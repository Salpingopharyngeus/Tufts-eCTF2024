
/Users/kmirza/Desktop/Mitre/Tufts-eCTF2024/component/build/max78000.elf:     file format elf32-littlearm


Disassembly of section .text:

1000e000 <__isr_vector>:
1000e000:	20020000 	.word	0x20020000
1000e004:	10010c7d 	.word	0x10010c7d
1000e008:	10010ab1 	.word	0x10010ab1
1000e00c:	10010cbb 	.word	0x10010cbb
1000e010:	10010cbd 	.word	0x10010cbd
1000e014:	10010cbf 	.word	0x10010cbf
1000e018:	10010cc1 	.word	0x10010cc1
	...
1000e02c:	10010cc3 	.word	0x10010cc3
1000e030:	10010cc5 	.word	0x10010cc5
1000e034:	00000000 	.word	0x00000000
1000e038:	10010cc7 	.word	0x10010cc7
1000e03c:	10010cc9 	.word	0x10010cc9
1000e040:	10010ccd 	.word	0x10010ccd
1000e044:	10010ccf 	.word	0x10010ccf
1000e048:	10010cd1 	.word	0x10010cd1
1000e04c:	10010cd3 	.word	0x10010cd3
1000e050:	10010cd5 	.word	0x10010cd5
1000e054:	10010cd7 	.word	0x10010cd7
1000e058:	10010cd9 	.word	0x10010cd9
1000e05c:	10010cdb 	.word	0x10010cdb
1000e060:	10010cdd 	.word	0x10010cdd
1000e064:	10010cdf 	.word	0x10010cdf
1000e068:	10010ce1 	.word	0x10010ce1
1000e06c:	10010ce3 	.word	0x10010ce3
1000e070:	10010ce5 	.word	0x10010ce5
1000e074:	10010ce7 	.word	0x10010ce7
1000e078:	10010ce9 	.word	0x10010ce9
1000e07c:	10010ceb 	.word	0x10010ceb
1000e080:	10010ced 	.word	0x10010ced
1000e084:	10010cef 	.word	0x10010cef
1000e088:	10010cf1 	.word	0x10010cf1
1000e08c:	10010cf3 	.word	0x10010cf3
1000e090:	10010cf5 	.word	0x10010cf5
1000e094:	10010cf7 	.word	0x10010cf7
1000e098:	10010cf9 	.word	0x10010cf9
1000e09c:	10010cfb 	.word	0x10010cfb
1000e0a0:	10010a35 	.word	0x10010a35
1000e0a4:	10010a3d 	.word	0x10010a3d
1000e0a8:	10010d01 	.word	0x10010d01
1000e0ac:	10010d03 	.word	0x10010d03
1000e0b0:	1000e295 	.word	0x1000e295
1000e0b4:	10010d07 	.word	0x10010d07
1000e0b8:	10010d09 	.word	0x10010d09
1000e0bc:	10010d0b 	.word	0x10010d0b
1000e0c0:	10010d0d 	.word	0x10010d0d
1000e0c4:	10010d0f 	.word	0x10010d0f
1000e0c8:	10010d11 	.word	0x10010d11
1000e0cc:	10010d13 	.word	0x10010d13
1000e0d0:	10010d15 	.word	0x10010d15
1000e0d4:	10010d17 	.word	0x10010d17
1000e0d8:	10010d19 	.word	0x10010d19
1000e0dc:	10010d1b 	.word	0x10010d1b
1000e0e0:	10010d1d 	.word	0x10010d1d
1000e0e4:	10010d1f 	.word	0x10010d1f
1000e0e8:	10010d21 	.word	0x10010d21
1000e0ec:	10010d23 	.word	0x10010d23
1000e0f0:	10010d25 	.word	0x10010d25
1000e0f4:	10010d27 	.word	0x10010d27
1000e0f8:	10010d29 	.word	0x10010d29
1000e0fc:	10010d2b 	.word	0x10010d2b
1000e100:	10010d2d 	.word	0x10010d2d
1000e104:	10010d2f 	.word	0x10010d2f
1000e108:	10010d31 	.word	0x10010d31
1000e10c:	10010d33 	.word	0x10010d33
1000e110:	10010d35 	.word	0x10010d35
1000e114:	10010d37 	.word	0x10010d37
1000e118:	10010d39 	.word	0x10010d39
1000e11c:	10010d3b 	.word	0x10010d3b
1000e120:	10010d3d 	.word	0x10010d3d
1000e124:	10010d3f 	.word	0x10010d3f
1000e128:	10010d41 	.word	0x10010d41
1000e12c:	10010d43 	.word	0x10010d43
1000e130:	10010d45 	.word	0x10010d45
1000e134:	10010d47 	.word	0x10010d47
1000e138:	10010d49 	.word	0x10010d49
1000e13c:	10010d4b 	.word	0x10010d4b
1000e140:	10010d4d 	.word	0x10010d4d
1000e144:	10010d4f 	.word	0x10010d4f
1000e148:	10010d51 	.word	0x10010d51
1000e14c:	10010d53 	.word	0x10010d53
1000e150:	10010d55 	.word	0x10010d55
1000e154:	10010d57 	.word	0x10010d57
1000e158:	10010d59 	.word	0x10010d59
1000e15c:	10010d5b 	.word	0x10010d5b
1000e160:	10010d5d 	.word	0x10010d5d
1000e164:	10010d5f 	.word	0x10010d5f
1000e168:	10010d61 	.word	0x10010d61
1000e16c:	10010d63 	.word	0x10010d63
1000e170:	10010d65 	.word	0x10010d65
1000e174:	10010d67 	.word	0x10010d67
1000e178:	10010d69 	.word	0x10010d69
1000e17c:	10010d6b 	.word	0x10010d6b
1000e180:	10010d6d 	.word	0x10010d6d
1000e184:	10010d6f 	.word	0x10010d6f
1000e188:	10010d71 	.word	0x10010d71
1000e18c:	10010d73 	.word	0x10010d73
1000e190:	10010d75 	.word	0x10010d75
1000e194:	10010d77 	.word	0x10010d77
1000e198:	10010d79 	.word	0x10010d79
1000e19c:	10010d7b 	.word	0x10010d7b
1000e1a0:	10010d7d 	.word	0x10010d7d
1000e1a4:	10010d7f 	.word	0x10010d7f
1000e1a8:	10010d81 	.word	0x10010d81
1000e1ac:	10010d83 	.word	0x10010d83
1000e1b0:	10010d85 	.word	0x10010d85
1000e1b4:	10010d87 	.word	0x10010d87
1000e1b8:	10010d89 	.word	0x10010d89
1000e1bc:	10010d8b 	.word	0x10010d8b
1000e1c0:	10010d8d 	.word	0x10010d8d
1000e1c4:	10010d8f 	.word	0x10010d8f
1000e1c8:	10010d91 	.word	0x10010d91
1000e1cc:	10010d93 	.word	0x10010d93
1000e1d0:	10010d95 	.word	0x10010d95
1000e1d4:	10010d97 	.word	0x10010d97
1000e1d8:	10010d99 	.word	0x10010d99
1000e1dc:	10010d9b 	.word	0x10010d9b
	...

1000e200 <firmware_startup>:
1000e200:	4800      	ldr	r0, [pc, #0]	@ (1000e204 <firmware_startup+0x4>)
1000e202:	4780      	blx	r0
1000e204:	10010c7d 	.word	0x10010c7d

1000e208 <deregister_tm_clones>:
1000e208:	4803      	ldr	r0, [pc, #12]	@ (1000e218 <deregister_tm_clones+0x10>)
1000e20a:	4b04      	ldr	r3, [pc, #16]	@ (1000e21c <deregister_tm_clones+0x14>)
1000e20c:	4283      	cmp	r3, r0
1000e20e:	d002      	beq.n	1000e216 <deregister_tm_clones+0xe>
1000e210:	4b03      	ldr	r3, [pc, #12]	@ (1000e220 <deregister_tm_clones+0x18>)
1000e212:	b103      	cbz	r3, 1000e216 <deregister_tm_clones+0xe>
1000e214:	4718      	bx	r3
1000e216:	4770      	bx	lr
1000e218:	20000738 	.word	0x20000738
1000e21c:	20000738 	.word	0x20000738
1000e220:	00000000 	.word	0x00000000

1000e224 <register_tm_clones>:
1000e224:	4805      	ldr	r0, [pc, #20]	@ (1000e23c <register_tm_clones+0x18>)
1000e226:	4b06      	ldr	r3, [pc, #24]	@ (1000e240 <register_tm_clones+0x1c>)
1000e228:	1a1b      	subs	r3, r3, r0
1000e22a:	0fd9      	lsrs	r1, r3, #31
1000e22c:	eb01 01a3 	add.w	r1, r1, r3, asr #2
1000e230:	1049      	asrs	r1, r1, #1
1000e232:	d002      	beq.n	1000e23a <register_tm_clones+0x16>
1000e234:	4b03      	ldr	r3, [pc, #12]	@ (1000e244 <register_tm_clones+0x20>)
1000e236:	b103      	cbz	r3, 1000e23a <register_tm_clones+0x16>
1000e238:	4718      	bx	r3
1000e23a:	4770      	bx	lr
1000e23c:	20000738 	.word	0x20000738
1000e240:	20000738 	.word	0x20000738
1000e244:	00000000 	.word	0x00000000

1000e248 <__do_global_dtors_aux>:
1000e248:	b510      	push	{r4, lr}
1000e24a:	4c06      	ldr	r4, [pc, #24]	@ (1000e264 <__do_global_dtors_aux+0x1c>)
1000e24c:	7823      	ldrb	r3, [r4, #0]
1000e24e:	b943      	cbnz	r3, 1000e262 <__do_global_dtors_aux+0x1a>
1000e250:	f7ff ffda 	bl	1000e208 <deregister_tm_clones>
1000e254:	4b04      	ldr	r3, [pc, #16]	@ (1000e268 <__do_global_dtors_aux+0x20>)
1000e256:	b113      	cbz	r3, 1000e25e <__do_global_dtors_aux+0x16>
1000e258:	4804      	ldr	r0, [pc, #16]	@ (1000e26c <__do_global_dtors_aux+0x24>)
1000e25a:	f3af 8000 	nop.w
1000e25e:	2301      	movs	r3, #1
1000e260:	7023      	strb	r3, [r4, #0]
1000e262:	bd10      	pop	{r4, pc}
1000e264:	20000800 	.word	0x20000800
1000e268:	00000000 	.word	0x00000000
1000e26c:	10023e68 	.word	0x10023e68

1000e270 <frame_dummy>:
1000e270:	b508      	push	{r3, lr}
1000e272:	4b05      	ldr	r3, [pc, #20]	@ (1000e288 <frame_dummy+0x18>)
1000e274:	b11b      	cbz	r3, 1000e27e <frame_dummy+0xe>
1000e276:	4905      	ldr	r1, [pc, #20]	@ (1000e28c <frame_dummy+0x1c>)
1000e278:	4805      	ldr	r0, [pc, #20]	@ (1000e290 <frame_dummy+0x20>)
1000e27a:	f3af 8000 	nop.w
1000e27e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1000e282:	f7ff bfcf 	b.w	1000e224 <register_tm_clones>
1000e286:	bf00      	nop
1000e288:	00000000 	.word	0x00000000
1000e28c:	20000804 	.word	0x20000804
1000e290:	10023e68 	.word	0x10023e68

1000e294 <DMA0_IRQHandler>:


#define MXC_AES_DATA_LENGTH 56 // 56 elements of 32 bits for a total of 224 bytes
volatile int dma_flag = 0;

void DMA0_IRQHandler() {
1000e294:	b508      	push	{r3, lr}
    MXC_DMA_Handler();
1000e296:	f003 fab1 	bl	100117fc <MXC_DMA_Handler>
    dma_flag++;
1000e29a:	4a02      	ldr	r2, [pc, #8]	@ (1000e2a4 <DMA0_IRQHandler+0x10>)
1000e29c:	6813      	ldr	r3, [r2, #0]
1000e29e:	3301      	adds	r3, #1
1000e2a0:	6013      	str	r3, [r2, #0]
}
1000e2a2:	bd08      	pop	{r3, pc}
1000e2a4:	2000081c 	.word	0x2000081c

1000e2a8 <AES_encrypt>:
 *
 *
 * Can only encrypt using external key
 */
// Easiest way would be to pass in a parameter of type mxc_aes_req_t, the MXC_AES functions utilize that
int AES_encrypt(int asynchronous, mxc_aes_keys_t key, uint32_t* inputData, uint32_t* encryptedData) {
1000e2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000e2ac:	b086      	sub	sp, #24
1000e2ae:	4605      	mov	r5, r0
1000e2b0:	460e      	mov	r6, r1
1000e2b2:	4690      	mov	r8, r2
1000e2b4:	461f      	mov	r7, r3
    int err = E_NO_ERROR;
    err = MXC_AES_Init();
1000e2b6:	f003 f843 	bl	10011340 <MXC_AES_Init>
    if (err) return err;
1000e2ba:	4604      	mov	r4, r0
1000e2bc:	b998      	cbnz	r0, 1000e2e6 <AES_encrypt+0x3e>

    // Declare data for an AES request
    mxc_aes_req_t req;
    req.length = MXC_AES_DATA_LENGTH;
1000e2be:	2338      	movs	r3, #56	@ 0x38
    req.inputData = inputData;
    req.resultData = encryptedData;
    req.keySize = key;
    req.encryption = MXC_AES_ENCRYPT_EXT_KEY;
1000e2c0:	f88d 0011 	strb.w	r0, [sp, #17]
    req.resultData = encryptedData;
1000e2c4:	e9cd 8702 	strd	r8, r7, [sp, #8]
    req.keySize = key;
1000e2c8:	f88d 6010 	strb.w	r6, [sp, #16]
    req.length = MXC_AES_DATA_LENGTH;
1000e2cc:	9301      	str	r3, [sp, #4]

    // TODO: check if asynchronous compatability works, and if we need it.
    if (asynchronous) {
        MXC_AES_EncryptAsync(&req);
1000e2ce:	a801      	add	r0, sp, #4
    if (asynchronous) {
1000e2d0:	b16d      	cbz	r5, 1000e2ee <AES_encrypt+0x46>
        MXC_AES_EncryptAsync(&req);
1000e2d2:	f003 f867 	bl	100113a4 <MXC_AES_EncryptAsync>
        if (err) return err;
1000e2d6:	4a0d      	ldr	r2, [pc, #52]	@ (1000e30c <AES_encrypt+0x64>)

        // Blocking Loop?
        while (dma_flag == 0);
1000e2d8:	6813      	ldr	r3, [r2, #0]
1000e2da:	2b00      	cmp	r3, #0
1000e2dc:	d0fc      	beq.n	1000e2d8 <AES_encrypt+0x30>
        dma_flag = 0;
1000e2de:	2300      	movs	r3, #0
1000e2e0:	6013      	str	r3, [r2, #0]
        // Non-asynchronous encrypt function
        err = MXC_AES_Encrypt(&req);
        if (err) return err;
    }
    
    MXC_AES_Shutdown();
1000e2e2:	f003 f841 	bl	10011368 <MXC_AES_Shutdown>

    return err;
}
1000e2e6:	4620      	mov	r0, r4
1000e2e8:	b006      	add	sp, #24
1000e2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = MXC_AES_Encrypt(&req);
1000e2ee:	f003 f853 	bl	10011398 <MXC_AES_Encrypt>
        if (err) return err;
1000e2f2:	b928      	cbnz	r0, 1000e300 <AES_encrypt+0x58>
    MXC_AES_Shutdown();
1000e2f4:	f003 f838 	bl	10011368 <MXC_AES_Shutdown>
}
1000e2f8:	4620      	mov	r0, r4
1000e2fa:	b006      	add	sp, #24
1000e2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000e300:	4604      	mov	r4, r0
1000e302:	4620      	mov	r0, r4
1000e304:	b006      	add	sp, #24
1000e306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000e30a:	bf00      	nop
1000e30c:	2000081c 	.word	0x2000081c

1000e310 <board_link_init>:
 * @return int: negative if error, zero if successful
 *
 * Initialized the underlying i2c_simple interface
*/
int board_link_init(i2c_addr_t addr) {
    return i2c_simple_peripheral_init(addr);
1000e310:	f002 b9c4 	b.w	1001069c <i2c_simple_peripheral_init>

1000e314 <component_id_to_i2c_addr>:
 * 
 * @return i2c_addr_t, i2c address
*/
i2c_addr_t component_id_to_i2c_addr(uint32_t component_id) {
    return (uint8_t) component_id & COMPONENT_ADDR_MASK;
}
1000e314:	b2c0      	uxtb	r0, r0
1000e316:	4770      	bx	lr

1000e318 <send_packet_and_ack>:
 * @param message: uint8_t*, message to be sent
 * 
 * This function utilizes the simple_i2c_peripheral library to
 * send a packet to the AP and wait for the message to be received
*/
void send_packet_and_ack(uint8_t len, uint8_t* packet) {
1000e318:	b510      	push	{r4, lr}
    I2C_REGS[TRANSMIT_LEN][0] = len;
1000e31a:	4c09      	ldr	r4, [pc, #36]	@ (1000e340 <send_packet_and_ack+0x28>)
1000e31c:	6963      	ldr	r3, [r4, #20]
1000e31e:	7018      	strb	r0, [r3, #0]
void send_packet_and_ack(uint8_t len, uint8_t* packet) {
1000e320:	4602      	mov	r2, r0
    memcpy((void*)I2C_REGS[TRANSMIT], (void*)packet, len);
1000e322:	68e0      	ldr	r0, [r4, #12]
1000e324:	f008 fd94 	bl	10016e50 <memcpy>
    I2C_REGS[TRANSMIT_DONE][0] = false;
1000e328:	6923      	ldr	r3, [r4, #16]
1000e32a:	2200      	movs	r2, #0
1000e32c:	701a      	strb	r2, [r3, #0]

    // Wait for ack from AP
    while(!I2C_REGS[TRANSMIT_DONE][0]);
1000e32e:	6922      	ldr	r2, [r4, #16]
1000e330:	7813      	ldrb	r3, [r2, #0]
1000e332:	2b00      	cmp	r3, #0
1000e334:	d0fc      	beq.n	1000e330 <send_packet_and_ack+0x18>
    I2C_REGS[RECEIVE_DONE][0] = false;
1000e336:	6863      	ldr	r3, [r4, #4]
1000e338:	2200      	movs	r2, #0
1000e33a:	701a      	strb	r2, [r3, #0]
}
1000e33c:	bd10      	pop	{r4, pc}
1000e33e:	bf00      	nop
1000e340:	20000058 	.word	0x20000058

1000e344 <wait_and_receive_packet>:
 * @param packet: uint8_t*, message received
 * 
 * This function waits for a new message to be available from the AP,
 * once the message is available it is returned in the buffer pointer to by packet 
*/
uint8_t wait_and_receive_packet(uint8_t* packet) {
1000e344:	b510      	push	{r4, lr}
    while(!I2C_REGS[RECEIVE_DONE][0]);
1000e346:	4907      	ldr	r1, [pc, #28]	@ (1000e364 <wait_and_receive_packet+0x20>)
1000e348:	684a      	ldr	r2, [r1, #4]
1000e34a:	7813      	ldrb	r3, [r2, #0]
1000e34c:	2b00      	cmp	r3, #0
1000e34e:	d0fc      	beq.n	1000e34a <wait_and_receive_packet+0x6>

    uint8_t len = I2C_REGS[RECEIVE_LEN][0];
1000e350:	688b      	ldr	r3, [r1, #8]
    memcpy(packet, (void*)I2C_REGS[RECEIVE], len);
1000e352:	6809      	ldr	r1, [r1, #0]
    uint8_t len = I2C_REGS[RECEIVE_LEN][0];
1000e354:	781c      	ldrb	r4, [r3, #0]
1000e356:	b2e4      	uxtb	r4, r4
    memcpy(packet, (void*)I2C_REGS[RECEIVE], len);
1000e358:	4622      	mov	r2, r4
1000e35a:	f008 fd79 	bl	10016e50 <memcpy>
    return len;
}
1000e35e:	4620      	mov	r0, r4
1000e360:	bd10      	pop	{r4, pc}
1000e362:	bf00      	nop
1000e364:	20000058 	.word	0x20000058

1000e368 <createUint32Buffer>:
    uint32_t* data;
    size_t capacity;
    size_t size;
} Uint32Buffer;

Uint32Buffer* createUint32Buffer(size_t initialCapacity) {
1000e368:	b538      	push	{r3, r4, r5, lr}
1000e36a:	4605      	mov	r5, r0
    Uint32Buffer* buffer = (Uint32Buffer*)malloc(sizeof(Uint32Buffer));
1000e36c:	200c      	movs	r0, #12
1000e36e:	f004 fba5 	bl	10012abc <malloc>
    if (buffer) {
1000e372:	b168      	cbz	r0, 1000e390 <createUint32Buffer+0x28>
        buffer->data = (uint32_t*)malloc(initialCapacity * sizeof(uint32_t));
1000e374:	4604      	mov	r4, r0
1000e376:	00a8      	lsls	r0, r5, #2
1000e378:	f004 fba0 	bl	10012abc <malloc>
1000e37c:	6020      	str	r0, [r4, #0]
        if (buffer->data) {
1000e37e:	b120      	cbz	r0, 1000e38a <createUint32Buffer+0x22>
            buffer->capacity = initialCapacity;
            buffer->size = 0;
1000e380:	2300      	movs	r3, #0
1000e382:	e9c4 5301 	strd	r5, r3, [r4, #4]
            free(buffer);
            buffer = NULL;
        }
    }
    return buffer;
}
1000e386:	4620      	mov	r0, r4
1000e388:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
1000e38a:	4620      	mov	r0, r4
1000e38c:	f004 fb9e 	bl	10012acc <free>
    Uint32Buffer* buffer = (Uint32Buffer*)malloc(sizeof(Uint32Buffer));
1000e390:	2400      	movs	r4, #0
    return buffer;
1000e392:	e7f8      	b.n	1000e386 <createUint32Buffer+0x1e>

1000e394 <appendToUint32Buffer>:
        free(buffer->data);
        free(buffer);
    }
}

int appendToUint32Buffer(Uint32Buffer* buffer, uint32_t value) {
1000e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (buffer->size >= buffer->capacity) {
1000e396:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
1000e39a:	42b3      	cmp	r3, r6
        size_t newCapacity = buffer->capacity * 2;
        uint32_t* newData = (uint32_t*)realloc(buffer->data, newCapacity * sizeof(uint32_t));
1000e39c:	6802      	ldr	r2, [r0, #0]
int appendToUint32Buffer(Uint32Buffer* buffer, uint32_t value) {
1000e39e:	4604      	mov	r4, r0
1000e3a0:	460d      	mov	r5, r1
    if (buffer->size >= buffer->capacity) {
1000e3a2:	d205      	bcs.n	1000e3b0 <appendToUint32Buffer+0x1c>
            return -1;
        }
        buffer->data = newData;
        buffer->capacity = newCapacity;
    }
    buffer->data[buffer->size++] = value;
1000e3a4:	1c59      	adds	r1, r3, #1
1000e3a6:	60a1      	str	r1, [r4, #8]
    return 0;
1000e3a8:	2000      	movs	r0, #0
    buffer->data[buffer->size++] = value;
1000e3aa:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
1000e3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint32_t* newData = (uint32_t*)realloc(buffer->data, newCapacity * sizeof(uint32_t));
1000e3b0:	4610      	mov	r0, r2
1000e3b2:	00f1      	lsls	r1, r6, #3
1000e3b4:	f007 fd84 	bl	10015ec0 <realloc>
        size_t newCapacity = buffer->capacity * 2;
1000e3b8:	0077      	lsls	r7, r6, #1
        if (!newData) {
1000e3ba:	4602      	mov	r2, r0
1000e3bc:	b118      	cbz	r0, 1000e3c6 <appendToUint32Buffer+0x32>
        buffer->capacity = newCapacity;
1000e3be:	e9c4 0700 	strd	r0, r7, [r4]
    buffer->data[buffer->size++] = value;
1000e3c2:	68a3      	ldr	r3, [r4, #8]
1000e3c4:	e7ee      	b.n	1000e3a4 <appendToUint32Buffer+0x10>
            return -1;
1000e3c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1000e3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000e3cc <searchUint32Buffer>:

int searchUint32Buffer(const Uint32Buffer* buffer, uint32_t value) {
1000e3cc:	b410      	push	{r4}
    for (size_t i = 0; i < buffer->size; ++i) {
1000e3ce:	6884      	ldr	r4, [r0, #8]
1000e3d0:	b17c      	cbz	r4, 1000e3f2 <searchUint32Buffer+0x26>
1000e3d2:	6802      	ldr	r2, [r0, #0]
1000e3d4:	2300      	movs	r3, #0
1000e3d6:	3a04      	subs	r2, #4
1000e3d8:	e001      	b.n	1000e3de <searchUint32Buffer+0x12>
1000e3da:	42a3      	cmp	r3, r4
1000e3dc:	d009      	beq.n	1000e3f2 <searchUint32Buffer+0x26>
        if (buffer->data[i] == value) {
1000e3de:	f852 0f04 	ldr.w	r0, [r2, #4]!
1000e3e2:	4288      	cmp	r0, r1
    for (size_t i = 0; i < buffer->size; ++i) {
1000e3e4:	f103 0301 	add.w	r3, r3, #1
        if (buffer->data[i] == value) {
1000e3e8:	d1f7      	bne.n	1000e3da <searchUint32Buffer+0xe>
            return 1; // Found
1000e3ea:	2001      	movs	r0, #1
        }
    }
    return 0; // Not found
}
1000e3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
1000e3f0:	4770      	bx	lr
    return 0; // Not found
1000e3f2:	2000      	movs	r0, #0
}
1000e3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
1000e3f8:	4770      	bx	lr
1000e3fa:	bf00      	nop

1000e3fc <secure_send>:
 * @param len: uint8_t, size of data to be sent 
 * 
 * Securely send data over I2C. This function is utilized in POST_BOOT functionality.
 * This function must be implemented by your team to align with the security requirements.
*/
void secure_send(uint8_t* buffer, uint8_t len) {
1000e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Ensure component is not initializing communication with AP.
    if (assigned_random_number == 0){
1000e400:	4b30      	ldr	r3, [pc, #192]	@ (1000e4c4 <secure_send+0xc8>)
void secure_send(uint8_t* buffer, uint8_t len) {
1000e402:	b0c4      	sub	sp, #272	@ 0x110
    if (assigned_random_number == 0){
1000e404:	681e      	ldr	r6, [r3, #0]
void secure_send(uint8_t* buffer, uint8_t len) {
1000e406:	af00      	add	r7, sp, #0
1000e408:	46e8      	mov	r8, sp
    if (assigned_random_number == 0){
1000e40a:	2e00      	cmp	r6, #0
1000e40c:	d053      	beq.n	1000e4b6 <secure_send+0xba>

    // Set Maximum Packet Size for Secure Send
    size_t MAX_PACKET_SIZE = MAX_I2C_MESSAGE_LEN - 1;
    
    // Ensure length of data to send does not exceed limits
    if (len > MAX_PACKET_SIZE - HASH_SIZE - sizeof(uint8_t) - sizeof(uint32_t)) {
1000e40e:	29ea      	cmp	r1, #234	@ 0xea
1000e410:	460c      	mov	r4, r1
1000e412:	d83c      	bhi.n	1000e48e <secure_send+0x92>
    }

    // Create secure packet
    uint8_t temp_buffer[MAX_PACKET_SIZE]; // Declare without initialization
    uint32_t random_number = assigned_random_number;
    memset(temp_buffer, 0, MAX_PACKET_SIZE); // Initialize buffer to zero
1000e414:	4605      	mov	r5, r0
1000e416:	22ff      	movs	r2, #255	@ 0xff
1000e418:	f107 0010 	add.w	r0, r7, #16
1000e41c:	2100      	movs	r1, #0
1000e41e:	f008 fbdd 	bl	10016bdc <memset>

    size_t hash_position = MAX_PACKET_SIZE - sizeof(uint32_t) - sizeof(uint8_t) - HASH_SIZE;
    size_t data_len_position = MAX_PACKET_SIZE - sizeof(uint32_t) - sizeof(uint8_t);
    size_t random_number_position = MAX_PACKET_SIZE - sizeof(uint32_t);
    memcpy(temp_buffer, buffer, len);
1000e422:	4622      	mov	r2, r4
1000e424:	4629      	mov	r1, r5
1000e426:	f107 0010 	add.w	r0, r7, #16
1000e42a:	f008 fd11 	bl	10016e50 <memcpy>
    
    size_t key_len = sizeof(KEY);

     // Build Authenication Hash
    size_t data_key_randnum_len = len + key_len + sizeof(uint32_t);
1000e42e:	f104 0308 	add.w	r3, r4, #8
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
1000e432:	4618      	mov	r0, r3
1000e434:	2101      	movs	r1, #1
1000e436:	4698      	mov	r8, r3
1000e438:	f004 fafe 	bl	10012a38 <calloc>
    memset(data_key_randnum, 0, data_key_randnum_len);
    if (!data_key_randnum) {
        print_error("Memory allocation failed for data_key_randnum");
        return ERROR_RETURN;
    }
    memcpy(data_key_randnum, buffer, len);
1000e43c:	4629      	mov	r1, r5
1000e43e:	4622      	mov	r2, r4
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
1000e440:	4605      	mov	r5, r0
    memcpy(data_key_randnum, buffer, len);
1000e442:	f008 fd05 	bl	10016e50 <memcpy>
    memcpy(data_key_randnum + len, KEY, key_len);
1000e446:	4b20      	ldr	r3, [pc, #128]	@ (1000e4c8 <secure_send+0xcc>)
1000e448:	681b      	ldr	r3, [r3, #0]
1000e44a:	512b      	str	r3, [r5, r4]
    memcpy(data_key_randnum + len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
1000e44c:	192b      	adds	r3, r5, r4

    uint8_t hash_out[HASH_SIZE];
    md5hash(data_key_randnum, data_key_randnum_len, hash_out);
1000e44e:	4641      	mov	r1, r8
    memcpy(data_key_randnum + len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
1000e450:	605e      	str	r6, [r3, #4]
    md5hash(data_key_randnum, data_key_randnum_len, hash_out);
1000e452:	463a      	mov	r2, r7
1000e454:	4628      	mov	r0, r5
1000e456:	f001 fe5f 	bl	10010118 <md5hash>
    free(data_key_randnum);
1000e45a:	4628      	mov	r0, r5
1000e45c:	f004 fb36 	bl	10012acc <free>

    // Add security attributes to packet
    memcpy(temp_buffer + hash_position, hash_out, HASH_SIZE); // add authentication hash
    temp_buffer[data_len_position] = len; // add data length
1000e460:	f887 410a 	strb.w	r4, [r7, #266]	@ 0x10a
    memcpy(temp_buffer + hash_position, hash_out, HASH_SIZE); // add authentication hash
1000e464:	463c      	mov	r4, r7
1000e466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1000e468:	f8c7 00fa 	str.w	r0, [r7, #250]	@ 0xfa
1000e46c:	f8c7 10fe 	str.w	r1, [r7, #254]	@ 0xfe
    memcpy(temp_buffer + random_number_position, &random_number, sizeof(uint32_t)); // add random number
    
    // Send packet
    send_packet_and_ack(MAX_PACKET_SIZE, temp_buffer); 
1000e470:	20ff      	movs	r0, #255	@ 0xff
1000e472:	4621      	mov	r1, r4
    memcpy(temp_buffer + random_number_position, &random_number, sizeof(uint32_t)); // add random number
1000e474:	f8c7 610b 	str.w	r6, [r7, #267]	@ 0x10b
    memcpy(temp_buffer + hash_position, hash_out, HASH_SIZE); // add authentication hash
1000e478:	f8c7 2102 	str.w	r2, [r7, #258]	@ 0x102
1000e47c:	f8c7 3106 	str.w	r3, [r7, #262]	@ 0x106
    send_packet_and_ack(MAX_PACKET_SIZE, temp_buffer); 
1000e480:	f7ff ff4a 	bl	1000e318 <send_packet_and_ack>
}
1000e484:	f507 7788 	add.w	r7, r7, #272	@ 0x110
1000e488:	46bd      	mov	sp, r7
1000e48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        print_error("Message too long");
1000e48e:	480f      	ldr	r0, [pc, #60]	@ (1000e4cc <secure_send+0xd0>)
1000e490:	f004 fdde 	bl	10013050 <printf>
1000e494:	480e      	ldr	r0, [pc, #56]	@ (1000e4d0 <secure_send+0xd4>)
1000e496:	f004 fddb 	bl	10013050 <printf>
1000e49a:	480e      	ldr	r0, [pc, #56]	@ (1000e4d4 <secure_send+0xd8>)
1000e49c:	f004 fdd8 	bl	10013050 <printf>
1000e4a0:	4b0d      	ldr	r3, [pc, #52]	@ (1000e4d8 <secure_send+0xdc>)
1000e4a2:	681b      	ldr	r3, [r3, #0]
1000e4a4:	6898      	ldr	r0, [r3, #8]
1000e4a6:	f007 ff7f 	bl	100163a8 <fflush>
}
1000e4aa:	f507 7788 	add.w	r7, r7, #272	@ 0x110
        return ERROR_RETURN;
1000e4ae:	46c5      	mov	sp, r8
}
1000e4b0:	46bd      	mov	sp, r7
1000e4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        print_error("Component attempting to initiate communication with AP first!\n");
1000e4b6:	4805      	ldr	r0, [pc, #20]	@ (1000e4cc <secure_send+0xd0>)
1000e4b8:	f004 fdca 	bl	10013050 <printf>
1000e4bc:	4807      	ldr	r0, [pc, #28]	@ (1000e4dc <secure_send+0xe0>)
1000e4be:	f007 fcf7 	bl	10015eb0 <puts>
1000e4c2:	e7ea      	b.n	1000e49a <secure_send+0x9e>
1000e4c4:	2000082c 	.word	0x2000082c
1000e4c8:	20000820 	.word	0x20000820
1000e4cc:	1001baec 	.word	0x1001baec
1000e4d0:	1001bb3c 	.word	0x1001bb3c
1000e4d4:	1001bb38 	.word	0x1001bb38
1000e4d8:	20000600 	.word	0x20000600
1000e4dc:	1001baf8 	.word	0x1001baf8

1000e4e0 <secure_receive>:
 * @return int: number of bytes received, negative if error
 * 
 * Securely receive data over I2C. This function is utilized in POST_BOOT functionality.
 * This function must be implemented by your team to align with the security requirements.
*/
int secure_receive(uint8_t* buffer) {
1000e4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1000e4e4:	4604      	mov	r4, r0
1000e4e6:	b089      	sub	sp, #36	@ 0x24
1000e4e8:	af00      	add	r7, sp, #0
    size_t MAX_PACKET_SIZE = MAX_I2C_MESSAGE_LEN - 1;

    uint8_t len = wait_and_receive_packet(buffer);
1000e4ea:	f7ff ff2b 	bl	1000e344 <wait_and_receive_packet>
    // Extract the random number
    uint32_t random_number;
    memcpy(&random_number, buffer + MAX_PACKET_SIZE - sizeof(uint32_t), sizeof(uint32_t));

    // Check if random number is unique
    int seen = searchUint32Buffer(random_number_hist, random_number);
1000e4ee:	4d52      	ldr	r5, [pc, #328]	@ (1000e638 <secure_receive+0x158>)
    memcpy(&random_number, buffer + MAX_PACKET_SIZE - sizeof(uint32_t), sizeof(uint32_t));
1000e4f0:	f8d4 90fb 	ldr.w	r9, [r4, #251]	@ 0xfb
    int seen = searchUint32Buffer(random_number_hist, random_number);
1000e4f4:	6828      	ldr	r0, [r5, #0]
1000e4f6:	4649      	mov	r1, r9
1000e4f8:	f7ff ff68 	bl	1000e3cc <searchUint32Buffer>
    if (seen) {
1000e4fc:	2800      	cmp	r0, #0
1000e4fe:	f040 8089 	bne.w	1000e614 <secure_receive+0x134>
        print_error("ERROR: Potential Replayed Packet!");
        return ERROR_RETURN;
    }
    appendToUint32Buffer(random_number_hist, random_number);
1000e502:	6828      	ldr	r0, [r5, #0]
1000e504:	4649      	mov	r1, r9
1000e506:	f7ff ff45 	bl	1000e394 <appendToUint32Buffer>

    // Extract the data length
    uint8_t data_len = buffer[MAX_PACKET_SIZE - sizeof(uint32_t) - sizeof(uint8_t)];
1000e50a:	f894 50fa 	ldrb.w	r5, [r4, #250]	@ 0xfa

    // Extract the hash
    uint8_t received_hash[HASH_SIZE];
    memcpy(received_hash, buffer + MAX_PACKET_SIZE - sizeof(uint32_t) - sizeof(uint8_t) - HASH_SIZE, HASH_SIZE);
1000e50e:	f8d4 30f6 	ldr.w	r3, [r4, #246]	@ 0xf6
1000e512:	f8d4 00ea 	ldr.w	r0, [r4, #234]	@ 0xea
1000e516:	f8d4 10ee 	ldr.w	r1, [r4, #238]	@ 0xee
1000e51a:	f8d4 20f2 	ldr.w	r2, [r4, #242]	@ 0xf2

    // Recreate authkey hash to check authenticity of receive_buffer
    size_t key_len = sizeof(KEY);

    size_t data_key_randnum_len = data_len + key_len + sizeof(uint32_t);
1000e51e:	f105 0808 	add.w	r8, r5, #8
    memcpy(received_hash, buffer + MAX_PACKET_SIZE - sizeof(uint32_t) - sizeof(uint8_t) - HASH_SIZE, HASH_SIZE);
1000e522:	463e      	mov	r6, r7
1000e524:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
1000e526:	2101      	movs	r1, #1
1000e528:	4640      	mov	r0, r8
1000e52a:	f004 fa85 	bl	10012a38 <calloc>
    memset(data_key_randnum, 0, data_key_randnum_len);
    if (!data_key_randnum) {
        print_error("Memory allocation failed for data_key_randnum");
        return ERROR_RETURN;
    }
    memcpy(data_key_randnum, buffer, data_len);
1000e52e:	462a      	mov	r2, r5
1000e530:	4621      	mov	r1, r4
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
1000e532:	4606      	mov	r6, r0
    memcpy(data_key_randnum, buffer, data_len);
1000e534:	f008 fc8c 	bl	10016e50 <memcpy>
    memcpy(data_key_randnum + data_len, KEY, key_len);
1000e538:	4b40      	ldr	r3, [pc, #256]	@ (1000e63c <secure_receive+0x15c>)
1000e53a:	681b      	ldr	r3, [r3, #0]
1000e53c:	5173      	str	r3, [r6, r5]
    memcpy(data_key_randnum + data_len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
1000e53e:	1973      	adds	r3, r6, r5

    uint8_t check_hash[HASH_SIZE];
    md5hash(data_key_randnum, data_key_randnum_len, check_hash);
1000e540:	f107 0210 	add.w	r2, r7, #16
    memcpy(data_key_randnum + data_len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
1000e544:	f8c3 9004 	str.w	r9, [r3, #4]
    md5hash(data_key_randnum, data_key_randnum_len, check_hash);
1000e548:	4630      	mov	r0, r6
1000e54a:	4641      	mov	r1, r8
1000e54c:	f001 fde4 	bl	10010118 <md5hash>
    free(data_key_randnum);
1000e550:	4630      	mov	r0, r6
1000e552:	f004 fabb 	bl	10012acc <free>
    for (int i = 0; i < array_size; i++) {
1000e556:	1d3e      	adds	r6, r7, #4
1000e558:	463b      	mov	r3, r7
1000e55a:	f107 0210 	add.w	r2, r7, #16
        if (hash1[i] != hash2[i]) {
1000e55e:	f813 0b01 	ldrb.w	r0, [r3], #1
1000e562:	f812 1b01 	ldrb.w	r1, [r2], #1
1000e566:	4288      	cmp	r0, r1
1000e568:	d141      	bne.n	1000e5ee <secure_receive+0x10e>
    for (int i = 0; i < array_size; i++) {
1000e56a:	42b3      	cmp	r3, r6
1000e56c:	d1f7      	bne.n	1000e55e <secure_receive+0x7e>
1000e56e:	4e34      	ldr	r6, [pc, #208]	@ (1000e640 <secure_receive+0x160>)
        print_error("Invalid packet received that cannot be authenticated.\n");
        send_error();
    }

    // Save assigned random_number from AP
    assigned_random_number = random_number;
1000e570:	4b34      	ldr	r3, [pc, #208]	@ (1000e644 <secure_receive+0x164>)
    
    // Extract the original message
    uint8_t original_message[data_len + 1]; // Add one for the null terminator
1000e572:	f408 78fc 	and.w	r8, r8, #504	@ 0x1f8
1000e576:	ebad 0d08 	sub.w	sp, sp, r8
    memcpy(original_message, buffer, data_len);
1000e57a:	4621      	mov	r1, r4
1000e57c:	462a      	mov	r2, r5
1000e57e:	4668      	mov	r0, sp
    assigned_random_number = random_number;
1000e580:	f8c3 9000 	str.w	r9, [r3]
    memcpy(original_message, buffer, data_len);
1000e584:	f008 fc64 	bl	10016e50 <memcpy>
    original_message[data_len] = '\0'; // Null-terminate the string
1000e588:	2300      	movs	r3, #0
1000e58a:	f80d 3005 	strb.w	r3, [sp, r5]

    print_debug("Original message: \n");
1000e58e:	482e      	ldr	r0, [pc, #184]	@ (1000e648 <secure_receive+0x168>)
1000e590:	f004 fd5e 	bl	10013050 <printf>
1000e594:	482d      	ldr	r0, [pc, #180]	@ (1000e64c <secure_receive+0x16c>)
1000e596:	f007 fc8b 	bl	10015eb0 <puts>
1000e59a:	482d      	ldr	r0, [pc, #180]	@ (1000e650 <secure_receive+0x170>)
1000e59c:	f004 fd58 	bl	10013050 <printf>
1000e5a0:	6833      	ldr	r3, [r6, #0]
1000e5a2:	6898      	ldr	r0, [r3, #8]
1000e5a4:	f007 ff00 	bl	100163a8 <fflush>
    print_debug("%s\n", original_message);
1000e5a8:	4827      	ldr	r0, [pc, #156]	@ (1000e648 <secure_receive+0x168>)
1000e5aa:	f004 fd51 	bl	10013050 <printf>
1000e5ae:	4668      	mov	r0, sp
1000e5b0:	f007 fc7e 	bl	10015eb0 <puts>
1000e5b4:	4826      	ldr	r0, [pc, #152]	@ (1000e650 <secure_receive+0x170>)
1000e5b6:	f004 fd4b 	bl	10013050 <printf>
1000e5ba:	6833      	ldr	r3, [r6, #0]
1000e5bc:	6898      	ldr	r0, [r3, #8]
1000e5be:	f007 fef3 	bl	100163a8 <fflush>
    print_debug("----------------------------------------\n");
1000e5c2:	4821      	ldr	r0, [pc, #132]	@ (1000e648 <secure_receive+0x168>)
1000e5c4:	f004 fd44 	bl	10013050 <printf>
1000e5c8:	4822      	ldr	r0, [pc, #136]	@ (1000e654 <secure_receive+0x174>)
1000e5ca:	f007 fc71 	bl	10015eb0 <puts>
1000e5ce:	4820      	ldr	r0, [pc, #128]	@ (1000e650 <secure_receive+0x170>)
1000e5d0:	f004 fd3e 	bl	10013050 <printf>
1000e5d4:	6833      	ldr	r3, [r6, #0]
1000e5d6:	6898      	ldr	r0, [r3, #8]
1000e5d8:	f007 fee6 	bl	100163a8 <fflush>

    secure_send(original_message, data_len);
1000e5dc:	4629      	mov	r1, r5
1000e5de:	4668      	mov	r0, sp
1000e5e0:	f7ff ff0c 	bl	1000e3fc <secure_send>

    // Return number of bytes of original data
    return data_len;
}
1000e5e4:	4628      	mov	r0, r5
1000e5e6:	3724      	adds	r7, #36	@ 0x24
1000e5e8:	46bd      	mov	sp, r7
1000e5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        print_error("Invalid packet received that cannot be authenticated.\n");
1000e5ee:	481a      	ldr	r0, [pc, #104]	@ (1000e658 <secure_receive+0x178>)
1000e5f0:	4e13      	ldr	r6, [pc, #76]	@ (1000e640 <secure_receive+0x160>)
1000e5f2:	f004 fd2d 	bl	10013050 <printf>
1000e5f6:	4819      	ldr	r0, [pc, #100]	@ (1000e65c <secure_receive+0x17c>)
1000e5f8:	f007 fc5a 	bl	10015eb0 <puts>
1000e5fc:	4814      	ldr	r0, [pc, #80]	@ (1000e650 <secure_receive+0x170>)
1000e5fe:	f004 fd27 	bl	10013050 <printf>
1000e602:	6833      	ldr	r3, [r6, #0]
1000e604:	6898      	ldr	r0, [r3, #8]
1000e606:	f007 fecf 	bl	100163a8 <fflush>
    send_packet_and_ack(ERROR_RETURN, transmit_buffer);
1000e60a:	4915      	ldr	r1, [pc, #84]	@ (1000e660 <secure_receive+0x180>)
1000e60c:	20ff      	movs	r0, #255	@ 0xff
1000e60e:	f7ff fe83 	bl	1000e318 <send_packet_and_ack>
}
1000e612:	e7ad      	b.n	1000e570 <secure_receive+0x90>
        print_error("ERROR: Potential Replayed Packet!");
1000e614:	4810      	ldr	r0, [pc, #64]	@ (1000e658 <secure_receive+0x178>)
1000e616:	f004 fd1b 	bl	10013050 <printf>
1000e61a:	4812      	ldr	r0, [pc, #72]	@ (1000e664 <secure_receive+0x184>)
1000e61c:	f004 fd18 	bl	10013050 <printf>
1000e620:	480b      	ldr	r0, [pc, #44]	@ (1000e650 <secure_receive+0x170>)
1000e622:	f004 fd15 	bl	10013050 <printf>
1000e626:	4b06      	ldr	r3, [pc, #24]	@ (1000e640 <secure_receive+0x160>)
1000e628:	681b      	ldr	r3, [r3, #0]
1000e62a:	6898      	ldr	r0, [r3, #8]
        return ERROR_RETURN;
1000e62c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
        print_error("ERROR: Potential Replayed Packet!");
1000e630:	f007 feba 	bl	100163a8 <fflush>
        return ERROR_RETURN;
1000e634:	e7d6      	b.n	1000e5e4 <secure_receive+0x104>
1000e636:	bf00      	nop
1000e638:	20000828 	.word	0x20000828
1000e63c:	20000820 	.word	0x20000820
1000e640:	20000600 	.word	0x20000600
1000e644:	2000082c 	.word	0x2000082c
1000e648:	1001bb74 	.word	0x1001bb74
1000e64c:	1001bb80 	.word	0x1001bb80
1000e650:	1001bb38 	.word	0x1001bb38
1000e654:	1001bb94 	.word	0x1001bb94
1000e658:	1001baec 	.word	0x1001baec
1000e65c:	1001bbc0 	.word	0x1001bbc0
1000e660:	20000830 	.word	0x20000830
1000e664:	1001bb50 	.word	0x1001bb50

1000e668 <boot>:

/******************************* FUNCTION DEFINITIONS **********************************/

// Example boot sequence
// Your design does not need to change this
void boot() {
1000e668:	b508      	push	{r3, lr}
#ifdef POST_BOOT
    POST_BOOT
#else
    // Anything after this macro can be changed by your design
    // but will not be run on provisioned systems
    LED_Off(LED1);
1000e66a:	2000      	movs	r0, #0
1000e66c:	f002 faca 	bl	10010c04 <LED_Off>
    LED_Off(LED2);
1000e670:	2001      	movs	r0, #1
1000e672:	f002 fac7 	bl	10010c04 <LED_Off>
    LED_Off(LED3);
1000e676:	2002      	movs	r0, #2
1000e678:	f002 fac4 	bl	10010c04 <LED_Off>
    //LED loop to show that boot occurred
    while (1) {
        LED_On(LED1);
        MXC_Delay(500000);
1000e67c:	4c12      	ldr	r4, [pc, #72]	@ (1000e6c8 <boot+0x60>)
        LED_On(LED1);
1000e67e:	2000      	movs	r0, #0
1000e680:	f002 faa0 	bl	10010bc4 <LED_On>
        MXC_Delay(500000);
1000e684:	4620      	mov	r0, r4
1000e686:	f002 fcab 	bl	10010fe0 <MXC_Delay>
        LED_On(LED2);
1000e68a:	2001      	movs	r0, #1
1000e68c:	f002 fa9a 	bl	10010bc4 <LED_On>
        MXC_Delay(500000);
1000e690:	4620      	mov	r0, r4
1000e692:	f002 fca5 	bl	10010fe0 <MXC_Delay>
        LED_On(LED3);
1000e696:	2002      	movs	r0, #2
1000e698:	f002 fa94 	bl	10010bc4 <LED_On>
        MXC_Delay(500000);
1000e69c:	4620      	mov	r0, r4
1000e69e:	f002 fc9f 	bl	10010fe0 <MXC_Delay>
        LED_Off(LED1);
1000e6a2:	2000      	movs	r0, #0
1000e6a4:	f002 faae 	bl	10010c04 <LED_Off>
        MXC_Delay(500000);
1000e6a8:	4620      	mov	r0, r4
1000e6aa:	f002 fc99 	bl	10010fe0 <MXC_Delay>
        LED_Off(LED2);
1000e6ae:	2001      	movs	r0, #1
1000e6b0:	f002 faa8 	bl	10010c04 <LED_Off>
        MXC_Delay(500000);
1000e6b4:	4620      	mov	r0, r4
1000e6b6:	f002 fc93 	bl	10010fe0 <MXC_Delay>
        LED_Off(LED3);
1000e6ba:	2002      	movs	r0, #2
1000e6bc:	f002 faa2 	bl	10010c04 <LED_Off>
        MXC_Delay(500000);
1000e6c0:	4620      	mov	r0, r4
1000e6c2:	f002 fc8d 	bl	10010fe0 <MXC_Delay>
    while (1) {
1000e6c6:	e7da      	b.n	1000e67e <boot+0x16>
1000e6c8:	0007a120 	.word	0x0007a120

1000e6cc <exchange_hash_key>:
            uint8_buffer[i * sizeof(uint32_t) + j] = (uint8_t)(value >> (j * 8));
        }
    }
}

void exchange_hash_key() {
1000e6cc:	b570      	push	{r4, r5, r6, lr}
    size_t HASH_KEY_SIZE = sizeof(KEY);
    // Accept AP's Public Key
    ap_public_key* ap_key = (ap_public_key*) receive_buffer;
    unsigned char ap_pb_key[X25519_KEY_LEN];
    memcpy(ap_pb_key, ap_key->public_key, sizeof(ap_pb_key));
1000e6ce:	4c2f      	ldr	r4, [pc, #188]	@ (1000e78c <exchange_hash_key+0xc0>)
    x25519_base(comp_pb_key, comp_pr_key);

    // Send component's public key to the AP
    comp_public_key comp_key;
    memcpy(comp_key.public_key, comp_pb_key, sizeof(comp_pb_key));
    memcpy(transmit_buffer, &comp_key, sizeof(comp_key));
1000e6d0:	4d2f      	ldr	r5, [pc, #188]	@ (1000e790 <exchange_hash_key+0xc4>)
    memcpy(ap_pb_key, ap_key->public_key, sizeof(ap_pb_key));
1000e6d2:	f8d4 0001 	ldr.w	r0, [r4, #1]
1000e6d6:	f8d4 1005 	ldr.w	r1, [r4, #5]
1000e6da:	f8d4 2009 	ldr.w	r2, [r4, #9]
1000e6de:	f8d4 300d 	ldr.w	r3, [r4, #13]
void exchange_hash_key() {
1000e6e2:	b0ac      	sub	sp, #176	@ 0xb0
    memcpy(ap_pb_key, ap_key->public_key, sizeof(ap_pb_key));
1000e6e4:	f10d 0c10 	add.w	ip, sp, #16
1000e6e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000e6ec:	f8d4 0011 	ldr.w	r0, [r4, #17]
1000e6f0:	f8d4 1015 	ldr.w	r1, [r4, #21]
1000e6f4:	f8d4 2019 	ldr.w	r2, [r4, #25]
1000e6f8:	f8d4 301d 	ldr.w	r3, [r4, #29]
1000e6fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    x25519_base(comp_pb_key, comp_pr_key);
1000e700:	a914      	add	r1, sp, #80	@ 0x50
1000e702:	4660      	mov	r0, ip
1000e704:	f002 f98a 	bl	10010a1c <x25519_base>
    memcpy(comp_key.public_key, comp_pb_key, sizeof(comp_pb_key));
1000e708:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
1000e70c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
1000e710:	f10d 0c70 	add.w	ip, sp, #112	@ 0x70
    memcpy(transmit_buffer, &comp_key, sizeof(comp_key));
1000e714:	4666      	mov	r6, ip
    memcpy(comp_key.public_key, comp_pb_key, sizeof(comp_pb_key));
1000e716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000e71a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
1000e71e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    memcpy(transmit_buffer, &comp_key, sizeof(comp_key));
1000e722:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1000e724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1000e726:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
1000e72a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    send_packet_and_ack(sizeof(comp_key), transmit_buffer);
1000e72e:	f1a5 0110 	sub.w	r1, r5, #16
1000e732:	2020      	movs	r0, #32
1000e734:	f7ff fdf0 	bl	1000e318 <send_packet_and_ack>

    // Receive encrypted AES key from AP
    memset(receive_buffer, 0, sizeof(receive_buffer));
1000e738:	f44f 7280 	mov.w	r2, #256	@ 0x100
1000e73c:	2100      	movs	r1, #0
1000e73e:	4620      	mov	r0, r4
1000e740:	f008 fa4c 	bl	10016bdc <memset>
    wait_and_receive_packet(receive_buffer);
1000e744:	4620      	mov	r0, r4
1000e746:	f7ff fdfd 	bl	1000e344 <wait_and_receive_packet>

    uint8_t encrypted_hash_key[HASH_KEY_SIZE];
    memcpy(encrypted_hash_key, receive_buffer, sizeof(encrypted_hash_key));
1000e74a:	6823      	ldr	r3, [r4, #0]
1000e74c:	9302      	str	r3, [sp, #8]

    // Generate the shared secret using x25519 key agreement
    uint8_t shared_secret[X25519_KEY_LEN];
    x25519(shared_secret, comp_pr_key, ap_pb_key);
1000e74e:	a914      	add	r1, sp, #80	@ 0x50
1000e750:	a824      	add	r0, sp, #144	@ 0x90
1000e752:	aa04      	add	r2, sp, #16
1000e754:	f002 f964 	bl	10010a20 <x25519>

    // Decrypt the AES key using the shared secret
    uint8_t decrypted_hash_key[HASH_KEY_SIZE];
    // Adds the dummy so that this xor occurs in constant time.
    volatile uint8_t dummy = 0;
1000e758:	ac03      	add	r4, sp, #12
1000e75a:	2300      	movs	r3, #0
1000e75c:	f88d 3007 	strb.w	r3, [sp, #7]
    for (int i = 0; i < HASH_KEY_SIZE; i++) {
1000e760:	a902      	add	r1, sp, #8
1000e762:	a824      	add	r0, sp, #144	@ 0x90
1000e764:	4626      	mov	r6, r4
        decrypted_hash_key[i] = encrypted_hash_key[i] ^ shared_secret[i];
1000e766:	f811 3b01 	ldrb.w	r3, [r1], #1
1000e76a:	f810 5b01 	ldrb.w	r5, [r0], #1
        //Meaning either way this xor is happening too.
        dummy ^= decrypted_hash_key[i];
1000e76e:	f89d 2007 	ldrb.w	r2, [sp, #7]
        decrypted_hash_key[i] = encrypted_hash_key[i] ^ shared_secret[i];
1000e772:	406b      	eors	r3, r5
        dummy ^= decrypted_hash_key[i];
1000e774:	405a      	eors	r2, r3
    for (int i = 0; i < HASH_KEY_SIZE; i++) {
1000e776:	42b1      	cmp	r1, r6
        decrypted_hash_key[i] = encrypted_hash_key[i] ^ shared_secret[i];
1000e778:	f804 3b01 	strb.w	r3, [r4], #1
        dummy ^= decrypted_hash_key[i];
1000e77c:	f88d 2007 	strb.w	r2, [sp, #7]
    for (int i = 0; i < HASH_KEY_SIZE; i++) {
1000e780:	d1f1      	bne.n	1000e766 <exchange_hash_key+0x9a>
    }
    memcpy(KEY, decrypted_hash_key, HASH_KEY_SIZE);
1000e782:	4b04      	ldr	r3, [pc, #16]	@ (1000e794 <exchange_hash_key+0xc8>)
1000e784:	9a03      	ldr	r2, [sp, #12]
1000e786:	601a      	str	r2, [r3, #0]
}
1000e788:	b02c      	add	sp, #176	@ 0xb0
1000e78a:	bd70      	pop	{r4, r5, r6, pc}
1000e78c:	20000930 	.word	0x20000930
1000e790:	20000830 	.word	0x20000830
1000e794:	20000820 	.word	0x20000820

1000e798 <exchange_aes_key>:

void exchange_aes_key() {
1000e798:	b570      	push	{r4, r5, r6, lr}
    // Accept AP's Public Key
    ap_public_key* ap_key = (ap_public_key*) receive_buffer;
    unsigned char ap_pb_key[X25519_KEY_LEN];
    memcpy(ap_pb_key, ap_key->public_key, sizeof(ap_pb_key));
1000e79a:	4c33      	ldr	r4, [pc, #204]	@ (1000e868 <exchange_aes_key+0xd0>)
    x25519_base(comp_pb_key, comp_pr_key);

    // Send component's public key to the AP
    comp_public_key comp_key;
    memcpy(comp_key.public_key, comp_pb_key, sizeof(comp_pb_key));
    memcpy(transmit_buffer, &comp_key, sizeof(comp_key));
1000e79c:	4d33      	ldr	r5, [pc, #204]	@ (1000e86c <exchange_aes_key+0xd4>)
    memcpy(ap_pb_key, ap_key->public_key, sizeof(ap_pb_key));
1000e79e:	f8d4 0001 	ldr.w	r0, [r4, #1]
1000e7a2:	f8d4 1005 	ldr.w	r1, [r4, #5]
1000e7a6:	f8d4 2009 	ldr.w	r2, [r4, #9]
1000e7aa:	f8d4 300d 	ldr.w	r3, [r4, #13]
void exchange_aes_key() {
1000e7ae:	b0b2      	sub	sp, #200	@ 0xc8
    memcpy(ap_pb_key, ap_key->public_key, sizeof(ap_pb_key));
1000e7b0:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
1000e7b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000e7b8:	f8d4 0011 	ldr.w	r0, [r4, #17]
1000e7bc:	f8d4 1015 	ldr.w	r1, [r4, #21]
1000e7c0:	f8d4 2019 	ldr.w	r2, [r4, #25]
1000e7c4:	f8d4 301d 	ldr.w	r3, [r4, #29]
1000e7c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    x25519_base(comp_pb_key, comp_pr_key);
1000e7cc:	a91a      	add	r1, sp, #104	@ 0x68
1000e7ce:	4660      	mov	r0, ip
1000e7d0:	f002 f924 	bl	10010a1c <x25519_base>
    memcpy(comp_key.public_key, comp_pb_key, sizeof(comp_pb_key));
1000e7d4:	f10d 0e48 	add.w	lr, sp, #72	@ 0x48
1000e7d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
1000e7dc:	f10d 0c88 	add.w	ip, sp, #136	@ 0x88
    memcpy(transmit_buffer, &comp_key, sizeof(comp_key));
1000e7e0:	4666      	mov	r6, ip
    memcpy(comp_key.public_key, comp_pb_key, sizeof(comp_pb_key));
1000e7e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1000e7e6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
1000e7ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    memcpy(transmit_buffer, &comp_key, sizeof(comp_key));
1000e7ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1000e7f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1000e7f2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
1000e7f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    send_packet_and_ack(sizeof(comp_key), transmit_buffer);
1000e7fa:	f1a5 0110 	sub.w	r1, r5, #16
1000e7fe:	2020      	movs	r0, #32
1000e800:	f7ff fd8a 	bl	1000e318 <send_packet_and_ack>

    // Receive encrypted AES key from AP
    memset(receive_buffer, 0, sizeof(receive_buffer));
1000e804:	f44f 7280 	mov.w	r2, #256	@ 0x100
1000e808:	2100      	movs	r1, #0
1000e80a:	4620      	mov	r0, r4
1000e80c:	f008 f9e6 	bl	10016bdc <memset>
    wait_and_receive_packet(receive_buffer);
1000e810:	4620      	mov	r0, r4
1000e812:	f7ff fd97 	bl	1000e344 <wait_and_receive_packet>

    uint8_t encrypted_aes_key[AES_KEY_SIZE];
    memcpy(encrypted_aes_key, receive_buffer, sizeof(encrypted_aes_key));
1000e816:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1000e81a:	ad02      	add	r5, sp, #8
1000e81c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    // Generate the shared secret using x25519 key agreement
    uint8_t shared_secret[X25519_KEY_LEN];
    x25519(shared_secret, comp_pr_key, ap_pb_key);
1000e820:	a91a      	add	r1, sp, #104	@ 0x68
1000e822:	a82a      	add	r0, sp, #168	@ 0xa8
1000e824:	aa0a      	add	r2, sp, #40	@ 0x28
1000e826:	f002 f8fb 	bl	10010a20 <x25519>

    // Decrypt the AES key using the shared secret
    uint8_t decrypted_aes_key[AES_KEY_SIZE];
    
    // Adds the dummy so that this xor occurs in constant time.
    volatile uint8_t dummy = 0;
1000e82a:	2300      	movs	r3, #0
1000e82c:	f10d 0017 	add.w	r0, sp, #23
1000e830:	f88d 3007 	strb.w	r3, [sp, #7]
    for (int i = 0; i < 16; i++) {
1000e834:	f10d 0107 	add.w	r1, sp, #7
1000e838:	f10d 0ca7 	add.w	ip, sp, #167	@ 0xa7
1000e83c:	4604      	mov	r4, r0
        decrypted_aes_key[i] = encrypted_aes_key[i] ^ shared_secret[i];
1000e83e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000e842:	f81c ef01 	ldrb.w	lr, [ip, #1]!
        //Meaning either way this xor is happening too.
        dummy ^= decrypted_aes_key[i];
1000e846:	f89d 2007 	ldrb.w	r2, [sp, #7]
        decrypted_aes_key[i] = encrypted_aes_key[i] ^ shared_secret[i];
1000e84a:	ea83 030e 	eor.w	r3, r3, lr
        dummy ^= decrypted_aes_key[i];
1000e84e:	405a      	eors	r2, r3
    for (int i = 0; i < 16; i++) {
1000e850:	42a1      	cmp	r1, r4
        decrypted_aes_key[i] = encrypted_aes_key[i] ^ shared_secret[i];
1000e852:	f800 3f01 	strb.w	r3, [r0, #1]!
        dummy ^= decrypted_aes_key[i];
1000e856:	f88d 2007 	strb.w	r2, [sp, #7]
    for (int i = 0; i < 16; i++) {
1000e85a:	d1f0      	bne.n	1000e83e <exchange_aes_key+0xa6>
    }

    // Set the decrypted AES key as the external key for the component
    MXC_AES_SetExtKey(decrypted_aes_key, MXC_AES_128BITS);
1000e85c:	2100      	movs	r1, #0
1000e85e:	a806      	add	r0, sp, #24
1000e860:	f002 fda6 	bl	100113b0 <MXC_AES_SetExtKey>
}
1000e864:	b032      	add	sp, #200	@ 0xc8
1000e866:	bd70      	pop	{r4, r5, r6, pc}
1000e868:	20000930 	.word	0x20000930
1000e86c:	20000830 	.word	0x20000830

1000e870 <process_boot>:
            send_error();
        }
    }
}

void process_boot() {
1000e870:	b510      	push	{r4, lr}
1000e872:	b084      	sub	sp, #16
    // respond with the boot message
    uint8_t len = strlen(COMPONENT_BOOT_MSG) + 1;

    // Attach authentication hash
    uint8_t hash_out[HASH_SIZE];
    md5hash(KEY, sizeof(KEY), hash_out);
1000e874:	4812      	ldr	r0, [pc, #72]	@ (1000e8c0 <process_boot+0x50>)
    memcpy((void*)transmit_buffer, COMPONENT_BOOT_MSG, len);
1000e876:	4c13      	ldr	r4, [pc, #76]	@ (1000e8c4 <process_boot+0x54>)
    md5hash(KEY, sizeof(KEY), hash_out);
1000e878:	466a      	mov	r2, sp
1000e87a:	2104      	movs	r1, #4
1000e87c:	f001 fc4c 	bl	10010118 <md5hash>
    memcpy((void*)transmit_buffer, COMPONENT_BOOT_MSG, len);
1000e880:	4a11      	ldr	r2, [pc, #68]	@ (1000e8c8 <process_boot+0x58>)
1000e882:	4b12      	ldr	r3, [pc, #72]	@ (1000e8cc <process_boot+0x5c>)
1000e884:	6812      	ldr	r2, [r2, #0]
1000e886:	ba12      	rev	r2, r2
    memcpy((void*)transmit_buffer + len, hash_out, HASH_SIZE);

    // Attach received random number
    uint8_t random_number_buffer[4];
    uint32_to_uint8_array(assigned_random_number, random_number_buffer);
    memcpy((void*)transmit_buffer + len + HASH_SIZE, random_number_buffer, sizeof(random_number_buffer));
1000e888:	f8c4 201f 	str.w	r2, [r4, #31]
    memcpy((void*)transmit_buffer, COMPONENT_BOOT_MSG, len);
1000e88c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1000e88e:	46a6      	mov	lr, r4
1000e890:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
1000e894:	f82e 3b02 	strh.w	r3, [lr], #2
1000e898:	0c1a      	lsrs	r2, r3, #16
    memcpy((void*)transmit_buffer + len, hash_out, HASH_SIZE);
1000e89a:	46ec      	mov	ip, sp
    memcpy((void*)transmit_buffer, COMPONENT_BOOT_MSG, len);
1000e89c:	f88e 2000 	strb.w	r2, [lr]
    memcpy((void*)transmit_buffer + len, hash_out, HASH_SIZE);
1000e8a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
1000e8a4:	f8c4 000f 	str.w	r0, [r4, #15]
1000e8a8:	f8c4 1013 	str.w	r1, [r4, #19]

    // Calculate the total length of data to be sent
    uint8_t total_len = len + HASH_SIZE + sizeof(random_number_buffer);
    
    // Send the data
    send_packet_and_ack(total_len, transmit_buffer);
1000e8ac:	2023      	movs	r0, #35	@ 0x23
1000e8ae:	4621      	mov	r1, r4
    memcpy((void*)transmit_buffer + len, hash_out, HASH_SIZE);
1000e8b0:	f8c4 2017 	str.w	r2, [r4, #23]
1000e8b4:	f8c4 301b 	str.w	r3, [r4, #27]
    send_packet_and_ack(total_len, transmit_buffer);
1000e8b8:	f7ff fd2e 	bl	1000e318 <send_packet_and_ack>
    
    // Call the boot function
    boot();
1000e8bc:	f7ff fed4 	bl	1000e668 <boot>
1000e8c0:	20000820 	.word	0x20000820
1000e8c4:	20000830 	.word	0x20000830
1000e8c8:	2000082c 	.word	0x2000082c
1000e8cc:	1001bbf8 	.word	0x1001bbf8

1000e8d0 <process_scan>:
}

void process_scan() {
1000e8d0:	b530      	push	{r4, r5, lr}
1000e8d2:	4b0d      	ldr	r3, [pc, #52]	@ (1000e908 <process_scan+0x38>)
    
    // The AP requested a scan. Respond with the Component ID
    scan_message *packet = (scan_message *)transmit_buffer;
    packet->component_id = COMPONENT_ID;
1000e8d4:	4d0d      	ldr	r5, [pc, #52]	@ (1000e90c <process_scan+0x3c>)
1000e8d6:	681b      	ldr	r3, [r3, #0]
1000e8d8:	490d      	ldr	r1, [pc, #52]	@ (1000e910 <process_scan+0x40>)
1000e8da:	6029      	str	r1, [r5, #0]
void process_scan() {
1000e8dc:	b085      	sub	sp, #20
    // Attach received random number
    uint32_to_uint8_array(assigned_random_number, packet->random_number);

    // Attach authentication hash
    uint8_t hash_out[HASH_SIZE];
    md5hash(KEY, sizeof(KEY), hash_out);
1000e8de:	466c      	mov	r4, sp
1000e8e0:	ba1b      	rev	r3, r3
1000e8e2:	4622      	mov	r2, r4
1000e8e4:	480b      	ldr	r0, [pc, #44]	@ (1000e914 <process_scan+0x44>)
    byte_array[0] = (value >> 24) & 0xFF; // Extracts the first byte.
1000e8e6:	616b      	str	r3, [r5, #20]
    md5hash(KEY, sizeof(KEY), hash_out);
1000e8e8:	2104      	movs	r1, #4
1000e8ea:	f001 fc15 	bl	10010118 <md5hash>
    memcpy(packet->authkey, hash_out, HASH_SIZE);
1000e8ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1000e8f2:	f105 0c04 	add.w	ip, r5, #4
1000e8f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    send_packet_and_ack(sizeof(scan_message), transmit_buffer);
1000e8fa:	4629      	mov	r1, r5
1000e8fc:	2018      	movs	r0, #24
1000e8fe:	f7ff fd0b 	bl	1000e318 <send_packet_and_ack>
}
1000e902:	b005      	add	sp, #20
1000e904:	bd30      	pop	{r4, r5, pc}
1000e906:	bf00      	nop
1000e908:	2000082c 	.word	0x2000082c
1000e90c:	20000830 	.word	0x20000830
1000e910:	11111125 	.word	0x11111125
1000e914:	20000820 	.word	0x20000820

1000e918 <process_validate>:

void process_validate() {
1000e918:	b530      	push	{r4, r5, lr}
1000e91a:	4b0d      	ldr	r3, [pc, #52]	@ (1000e950 <process_validate+0x38>)
    // The AP requested a validation. Respond with the Component I
    validate_message* packet = (validate_message*) transmit_buffer;
    packet->component_id = COMPONENT_ID;
1000e91c:	4d0d      	ldr	r5, [pc, #52]	@ (1000e954 <process_validate+0x3c>)
1000e91e:	681b      	ldr	r3, [r3, #0]
1000e920:	490d      	ldr	r1, [pc, #52]	@ (1000e958 <process_validate+0x40>)
1000e922:	6029      	str	r1, [r5, #0]
void process_validate() {
1000e924:	b085      	sub	sp, #20
    // Attach received random number
    uint32_to_uint8_array(assigned_random_number, packet->random_number);
    
    // Attach authentication hash
    uint8_t hash_out[HASH_SIZE];
    md5hash(KEY, sizeof(KEY), hash_out);
1000e926:	466c      	mov	r4, sp
1000e928:	ba1b      	rev	r3, r3
1000e92a:	4622      	mov	r2, r4
1000e92c:	480b      	ldr	r0, [pc, #44]	@ (1000e95c <process_validate+0x44>)
    byte_array[0] = (value >> 24) & 0xFF; // Extracts the first byte.
1000e92e:	616b      	str	r3, [r5, #20]
    md5hash(KEY, sizeof(KEY), hash_out);
1000e930:	2104      	movs	r1, #4
1000e932:	f001 fbf1 	bl	10010118 <md5hash>
    memcpy(packet->authkey, hash_out, HASH_SIZE);
1000e936:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1000e93a:	f105 0c04 	add.w	ip, r5, #4
1000e93e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    send_packet_and_ack(sizeof(validate_message), transmit_buffer);
1000e942:	4629      	mov	r1, r5
1000e944:	2018      	movs	r0, #24
1000e946:	f7ff fce7 	bl	1000e318 <send_packet_and_ack>
}
1000e94a:	b005      	add	sp, #20
1000e94c:	bd30      	pop	{r4, r5, pc}
1000e94e:	bf00      	nop
1000e950:	2000082c 	.word	0x2000082c
1000e954:	20000830 	.word	0x20000830
1000e958:	11111125 	.word	0x11111125
1000e95c:	20000820 	.word	0x20000820

1000e960 <process_attest>:

// Modify the process_attest function to encrypt the len variable
void process_attest() {
1000e960:	b510      	push	{r4, lr}
1000e962:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
    size_t ATTEST_SIZE = 224;
    uint8_t fixed_size = 17;
    uint8_t EXACT_SIZE = attest_loc_size + attest_date_size + attest_cust_size + fixed_size;
    
    char attestation_data[ATTEST_SIZE]; // Assuming a sufficiently large buffer size
    sprintf(attestation_data, "LOC>%s\nDATE>%s\nCUST>%s\n", ATTESTATION_LOC, ATTESTATION_DATE, ATTESTATION_CUSTOMER);
1000e966:	481e      	ldr	r0, [pc, #120]	@ (1000e9e0 <process_attest+0x80>)
1000e968:	4b1e      	ldr	r3, [pc, #120]	@ (1000e9e4 <process_attest+0x84>)
1000e96a:	4a1f      	ldr	r2, [pc, #124]	@ (1000e9e8 <process_attest+0x88>)
1000e96c:	491f      	ldr	r1, [pc, #124]	@ (1000e9ec <process_attest+0x8c>)
1000e96e:	9000      	str	r0, [sp, #0]
1000e970:	a802      	add	r0, sp, #8
1000e972:	f007 fd53 	bl	1001641c <sprintf>

    // Store Attestation Data in uint8_t* buffer
    uint8_t temp_buffer[ATTEST_SIZE];
    memset(temp_buffer, 0, ATTEST_SIZE);
    memcpy(temp_buffer, attestation_data, ATTEST_SIZE);
1000e976:	22e0      	movs	r2, #224	@ 0xe0
1000e978:	a902      	add	r1, sp, #8
1000e97a:	a83a      	add	r0, sp, #232	@ 0xe8
1000e97c:	f008 fa68 	bl	10016e50 <memcpy>
        uint32_buffer[i] = value;
1000e980:	22e0      	movs	r2, #224	@ 0xe0
1000e982:	a93a      	add	r1, sp, #232	@ 0xe8
1000e984:	a872      	add	r0, sp, #456	@ 0x1c8
1000e986:	f008 fa63 	bl	10016e50 <memcpy>
    memset(uint32_temp, 0, ATTEST_SIZE / sizeof(uint32_t));
    uint8_to_uint32(temp_buffer, sizeof(temp_buffer), uint32_temp, sizeof(uint32_temp) / sizeof(uint32_t));

    // Initialize uint32_t transmit buffer
    uint32_t uint32_transmit_buffer[ATTEST_SIZE/sizeof(uint32_t)];
    memset(uint32_transmit_buffer, 0, ATTEST_SIZE/sizeof(uint32_t));
1000e98a:	2100      	movs	r1, #0
1000e98c:	2238      	movs	r2, #56	@ 0x38
1000e98e:	a8aa      	add	r0, sp, #680	@ 0x2a8
1000e990:	f008 f924 	bl	10016bdc <memset>

    // Encrypt contents of uint32_t representation of attestation data and store result in uint32_t transmit buffer
    int aes_success = AES_encrypt(0, MXC_AES_128BITS, uint32_temp, uint32_transmit_buffer);
1000e994:	2100      	movs	r1, #0
1000e996:	abaa      	add	r3, sp, #680	@ 0x2a8
1000e998:	aa72      	add	r2, sp, #456	@ 0x1c8
1000e99a:	4608      	mov	r0, r1
1000e99c:	f7ff fc84 	bl	1000e2a8 <AES_encrypt>

    // Convert uint32_t transmit buffer content to uint8_t representation
    size_t num_elements = sizeof(uint32_transmit_buffer) / sizeof(uint32_t);
    size_t uint8_buffer_size = num_elements * sizeof(uint32_t); // Size of the resulting uint8_t buffer
    uint8_t uint8_transmit_buffer[uint8_buffer_size];
    memset(uint8_transmit_buffer, 0, uint8_buffer_size);
1000e9a0:	22e0      	movs	r2, #224	@ 0xe0
1000e9a2:	2100      	movs	r1, #0
1000e9a4:	a8e2      	add	r0, sp, #904	@ 0x388
1000e9a6:	f008 f919 	bl	10016bdc <memset>
    for (size_t i = 0; i < num_elements; i++) {
1000e9aa:	ace1      	add	r4, sp, #900	@ 0x384
1000e9ac:	f50d 7e29 	add.w	lr, sp, #676	@ 0x2a4
1000e9b0:	f50d 7c62 	add.w	ip, sp, #904	@ 0x388
        uint32_t value = uint32_buffer[i];
1000e9b4:	f85e 0f04 	ldr.w	r0, [lr, #4]!
1000e9b8:	4662      	mov	r2, ip
1000e9ba:	2300      	movs	r3, #0
            uint8_buffer[i * sizeof(uint32_t) + j] = (uint8_t)(value >> (j * 8));
1000e9bc:	fa20 f103 	lsr.w	r1, r0, r3
        for (size_t j = 0; j < sizeof(uint32_t); j++) {
1000e9c0:	3308      	adds	r3, #8
1000e9c2:	2b20      	cmp	r3, #32
            uint8_buffer[i * sizeof(uint32_t) + j] = (uint8_t)(value >> (j * 8));
1000e9c4:	f802 1b01 	strb.w	r1, [r2], #1
        for (size_t j = 0; j < sizeof(uint32_t); j++) {
1000e9c8:	d1f8      	bne.n	1000e9bc <process_attest+0x5c>
    for (size_t i = 0; i < num_elements; i++) {
1000e9ca:	4574      	cmp	r4, lr
1000e9cc:	f10c 0c04 	add.w	ip, ip, #4
1000e9d0:	d1f0      	bne.n	1000e9b4 <process_attest+0x54>
    uint32_to_uint8(uint32_transmit_buffer, num_elements, uint8_transmit_buffer, uint8_buffer_size);

    send_packet_and_ack(uint8_buffer_size, uint8_transmit_buffer);
1000e9d2:	a9e2      	add	r1, sp, #904	@ 0x388
1000e9d4:	20e0      	movs	r0, #224	@ 0xe0
1000e9d6:	f7ff fc9f 	bl	1000e318 <send_packet_and_ack>
}
1000e9da:	f50d 6d8d 	add.w	sp, sp, #1128	@ 0x468
1000e9de:	bd10      	pop	{r4, pc}
1000e9e0:	1001bc30 	.word	0x1001bc30
1000e9e4:	1001bc08 	.word	0x1001bc08
1000e9e8:	1001bc14 	.word	0x1001bc14
1000e9ec:	1001bc18 	.word	0x1001bc18

1000e9f0 <component_process_cmd.part.0>:
void component_process_cmd() {
1000e9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e9f2:	4d2a      	ldr	r5, [pc, #168]	@ (1000ea9c <component_process_cmd.part.0+0xac>)
        int seen = searchUint32Buffer(random_number_hist, received_rn);
1000e9f4:	4f2a      	ldr	r7, [pc, #168]	@ (1000eaa0 <component_process_cmd.part.0+0xb0>)
1000e9f6:	f8d5 4011 	ldr.w	r4, [r5, #17]
1000e9fa:	6838      	ldr	r0, [r7, #0]
1000e9fc:	ba24      	rev	r4, r4
void component_process_cmd() {
1000e9fe:	b085      	sub	sp, #20
        int seen = searchUint32Buffer(random_number_hist, received_rn);
1000ea00:	4621      	mov	r1, r4
1000ea02:	f7ff fce3 	bl	1000e3cc <searchUint32Buffer>
        memset(hash_out, 0, HASH_SIZE);
1000ea06:	2300      	movs	r3, #0
        md5hash(KEY, sizeof(KEY), hash_out);
1000ea08:	466a      	mov	r2, sp
1000ea0a:	2104      	movs	r1, #4
        int seen = searchUint32Buffer(random_number_hist, received_rn);
1000ea0c:	4606      	mov	r6, r0
        md5hash(KEY, sizeof(KEY), hash_out);
1000ea0e:	4825      	ldr	r0, [pc, #148]	@ (1000eaa4 <component_process_cmd.part.0+0xb4>)
        memset(hash_out, 0, HASH_SIZE);
1000ea10:	e9cd 3300 	strd	r3, r3, [sp]
1000ea14:	e9cd 3302 	strd	r3, r3, [sp, #8]
        md5hash(KEY, sizeof(KEY), hash_out);
1000ea18:	f001 fb7e 	bl	10010118 <md5hash>
    for (int i = 0; i < array_size; i++) {
1000ea1c:	466b      	mov	r3, sp
1000ea1e:	462a      	mov	r2, r5
1000ea20:	1d29      	adds	r1, r5, #4
        if (hash1[i] != hash2[i]) {
1000ea22:	f813 cb01 	ldrb.w	ip, [r3], #1
1000ea26:	f812 ef01 	ldrb.w	lr, [r2, #1]!
1000ea2a:	45e6      	cmp	lr, ip
1000ea2c:	d102      	bne.n	1000ea34 <component_process_cmd.part.0+0x44>
    for (int i = 0; i < array_size; i++) {
1000ea2e:	428a      	cmp	r2, r1
1000ea30:	d1f7      	bne.n	1000ea22 <component_process_cmd.part.0+0x32>
        if (hash_equal(command->authkey, hash_out) && !seen){
1000ea32:	b12e      	cbz	r6, 1000ea40 <component_process_cmd.part.0+0x50>
    send_packet_and_ack(ERROR_RETURN, transmit_buffer);
1000ea34:	491c      	ldr	r1, [pc, #112]	@ (1000eaa8 <component_process_cmd.part.0+0xb8>)
1000ea36:	20ff      	movs	r0, #255	@ 0xff
1000ea38:	f7ff fc6e 	bl	1000e318 <send_packet_and_ack>
}
1000ea3c:	b005      	add	sp, #20
1000ea3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            assigned_random_number = received_rn;
1000ea40:	4b1a      	ldr	r3, [pc, #104]	@ (1000eaac <component_process_cmd.part.0+0xbc>)
            appendToUint32Buffer(random_number_hist, received_rn);
1000ea42:	6838      	ldr	r0, [r7, #0]
            assigned_random_number = received_rn;
1000ea44:	601c      	str	r4, [r3, #0]
            appendToUint32Buffer(random_number_hist, received_rn);
1000ea46:	4621      	mov	r1, r4
1000ea48:	f7ff fca4 	bl	1000e394 <appendToUint32Buffer>
            switch (command->opcode) {
1000ea4c:	782b      	ldrb	r3, [r5, #0]
1000ea4e:	3b01      	subs	r3, #1
1000ea50:	2b03      	cmp	r3, #3
1000ea52:	d80e      	bhi.n	1000ea72 <component_process_cmd.part.0+0x82>
1000ea54:	e8df f003 	tbb	[pc, r3]
1000ea58:	020b0508 	.word	0x020b0508
                    process_attest();
1000ea5c:	f7ff ff80 	bl	1000e960 <process_attest>
                    break;
1000ea60:	e7ec      	b.n	1000ea3c <component_process_cmd.part.0+0x4c>
                    process_validate();
1000ea62:	f7ff ff59 	bl	1000e918 <process_validate>
                    break;
1000ea66:	e7e9      	b.n	1000ea3c <component_process_cmd.part.0+0x4c>
                    process_scan();
1000ea68:	f7ff ff32 	bl	1000e8d0 <process_scan>
                    break;
1000ea6c:	e7e6      	b.n	1000ea3c <component_process_cmd.part.0+0x4c>
                    process_boot();
1000ea6e:	f7ff feff 	bl	1000e870 <process_boot>
                    print_debug("Error: Unrecognized command received %d\n", command->opcode);
1000ea72:	480f      	ldr	r0, [pc, #60]	@ (1000eab0 <component_process_cmd.part.0+0xc0>)
1000ea74:	f004 faec 	bl	10013050 <printf>
1000ea78:	7829      	ldrb	r1, [r5, #0]
1000ea7a:	480e      	ldr	r0, [pc, #56]	@ (1000eab4 <component_process_cmd.part.0+0xc4>)
1000ea7c:	f004 fae8 	bl	10013050 <printf>
1000ea80:	480d      	ldr	r0, [pc, #52]	@ (1000eab8 <component_process_cmd.part.0+0xc8>)
1000ea82:	f004 fae5 	bl	10013050 <printf>
1000ea86:	4b0d      	ldr	r3, [pc, #52]	@ (1000eabc <component_process_cmd.part.0+0xcc>)
1000ea88:	681b      	ldr	r3, [r3, #0]
1000ea8a:	6898      	ldr	r0, [r3, #8]
1000ea8c:	f007 fc8c 	bl	100163a8 <fflush>
    send_packet_and_ack(ERROR_RETURN, transmit_buffer);
1000ea90:	4905      	ldr	r1, [pc, #20]	@ (1000eaa8 <component_process_cmd.part.0+0xb8>)
1000ea92:	20ff      	movs	r0, #255	@ 0xff
1000ea94:	f7ff fc40 	bl	1000e318 <send_packet_and_ack>
}
1000ea98:	e7d0      	b.n	1000ea3c <component_process_cmd.part.0+0x4c>
1000ea9a:	bf00      	nop
1000ea9c:	20000930 	.word	0x20000930
1000eaa0:	20000828 	.word	0x20000828
1000eaa4:	20000820 	.word	0x20000820
1000eaa8:	20000830 	.word	0x20000830
1000eaac:	2000082c 	.word	0x2000082c
1000eab0:	1001bb74 	.word	0x1001bb74
1000eab4:	1001bc38 	.word	0x1001bc38
1000eab8:	1001bb38 	.word	0x1001bb38
1000eabc:	20000600 	.word	0x20000600

1000eac0 <init>:

void init() {
1000eac0:	b500      	push	{lr}
    /*
     Disabling the peripheral clock disables functionality while also saving power. 
     Associated register states are retained but read and write access is blocked.
    */ 
    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_SMPHR);
1000eac2:	2029      	movs	r0, #41	@ 0x29
void init() {
1000eac4:	b085      	sub	sp, #20
    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_SMPHR);
1000eac6:	f002 fb85 	bl	100111d4 <MXC_SYS_ClockDisable>
    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_CPU1);
1000eaca:	203f      	movs	r0, #63	@ 0x3f
1000eacc:	f002 fb82 	bl	100111d4 <MXC_SYS_ClockDisable>

    // Validate device checksum
    uint8_t usn[MXC_SYS_USN_LEN];
    int usn_error = MXC_SYS_GetUSN(usn, NULL);
1000ead0:	2100      	movs	r1, #0
1000ead2:	4668      	mov	r0, sp
1000ead4:	f002 fade 	bl	10011094 <MXC_SYS_GetUSN>

    if (usn_error != E_NO_ERROR) {
1000ead8:	b968      	cbnz	r0, 1000eaf6 <init+0x36>
        printf("Invalid Component Hardware Device: Not MAX78000\n");
        valid_device = false;
        return ERROR_RETURN;

    } else {
        valid_device = true;
1000eada:	4b0b      	ldr	r3, [pc, #44]	@ (1000eb08 <init+0x48>)
        printf("Valid Component Hardware Device: MAX78000\n");        
1000eadc:	480b      	ldr	r0, [pc, #44]	@ (1000eb0c <init+0x4c>)
        valid_device = true;
1000eade:	2201      	movs	r2, #1
1000eae0:	701a      	strb	r2, [r3, #0]
        printf("Valid Component Hardware Device: MAX78000\n");        
1000eae2:	f007 f9e5 	bl	10015eb0 <puts>
    }
    // Initialize buffer to keep track of history of used random numbers
    random_number_hist = createUint32Buffer(10);
1000eae6:	200a      	movs	r0, #10
1000eae8:	f7ff fc3e 	bl	1000e368 <createUint32Buffer>
1000eaec:	4b08      	ldr	r3, [pc, #32]	@ (1000eb10 <init+0x50>)
1000eaee:	6018      	str	r0, [r3, #0]

}
1000eaf0:	b005      	add	sp, #20
1000eaf2:	f85d fb04 	ldr.w	pc, [sp], #4
        printf("Invalid Component Hardware Device: Not MAX78000\n");
1000eaf6:	4807      	ldr	r0, [pc, #28]	@ (1000eb14 <init+0x54>)
1000eaf8:	f007 f9da 	bl	10015eb0 <puts>
        valid_device = false;
1000eafc:	4b02      	ldr	r3, [pc, #8]	@ (1000eb08 <init+0x48>)
1000eafe:	2200      	movs	r2, #0
1000eb00:	701a      	strb	r2, [r3, #0]
}
1000eb02:	b005      	add	sp, #20
1000eb04:	f85d fb04 	ldr.w	pc, [sp], #4
1000eb08:	20000825 	.word	0x20000825
1000eb0c:	1001bc94 	.word	0x1001bc94
1000eb10:	20000828 	.word	0x20000828
1000eb14:	1001bc64 	.word	0x1001bc64

1000eb18 <main>:
/*********************************** MAIN *************************************/

int main(void) {
1000eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
1000eb1a:	b662      	cpsie	i
    __enable_irq();

    // Initialize Component

    // hardware
    init();
1000eb1c:	f7ff ffd0 	bl	1000eac0 <init>
    i2c_addr_t addr = component_id_to_i2c_addr(COMPONENT_ID);
1000eb20:	4819      	ldr	r0, [pc, #100]	@ (1000eb88 <main+0x70>)
    board_link_init(addr);

    LED_On(LED2);

    while(!INITIAL_HASH_SET) {
1000eb22:	4d1a      	ldr	r5, [pc, #104]	@ (1000eb8c <main+0x74>)
    i2c_addr_t addr = component_id_to_i2c_addr(COMPONENT_ID);
1000eb24:	f7ff fbf6 	bl	1000e314 <component_id_to_i2c_addr>
    board_link_init(addr);
1000eb28:	f7ff fbf2 	bl	1000e310 <board_link_init>
    LED_On(LED2);
1000eb2c:	2001      	movs	r0, #1
1000eb2e:	f002 f849 	bl	10010bc4 <LED_On>
    while(!INITIAL_HASH_SET) {
1000eb32:	782b      	ldrb	r3, [r5, #0]
1000eb34:	b9eb      	cbnz	r3, 1000eb72 <main+0x5a>
1000eb36:	4c16      	ldr	r4, [pc, #88]	@ (1000eb90 <main+0x78>)
1000eb38:	4f16      	ldr	r7, [pc, #88]	@ (1000eb94 <main+0x7c>)
    send_packet_and_ack(ERROR_RETURN, transmit_buffer);
1000eb3a:	4e17      	ldr	r6, [pc, #92]	@ (1000eb98 <main+0x80>)
1000eb3c:	e00c      	b.n	1000eb58 <main+0x40>
    if (command->opcode == COMPONENT_AP_KEY_EXCHANGE){
1000eb3e:	7823      	ldrb	r3, [r4, #0]
1000eb40:	2b05      	cmp	r3, #5
1000eb42:	d01e      	beq.n	1000eb82 <main+0x6a>
    } else if (command->opcode == COMPONENT_AP_HASH_KEY_EXCHANGE){
1000eb44:	2b06      	cmp	r3, #6
1000eb46:	d119      	bne.n	1000eb7c <main+0x64>
        if(!INITIAL_HASH_SET) {
1000eb48:	782b      	ldrb	r3, [r5, #0]
            INITIAL_HASH_SET = true;
1000eb4a:	2201      	movs	r2, #1
        if(!INITIAL_HASH_SET) {
1000eb4c:	b903      	cbnz	r3, 1000eb50 <main+0x38>
            INITIAL_HASH_SET = true;
1000eb4e:	702a      	strb	r2, [r5, #0]
        exchange_hash_key();
1000eb50:	f7ff fdbc 	bl	1000e6cc <exchange_hash_key>
    while(!INITIAL_HASH_SET) {
1000eb54:	782b      	ldrb	r3, [r5, #0]
1000eb56:	b963      	cbnz	r3, 1000eb72 <main+0x5a>
        wait_and_receive_packet(receive_buffer);
1000eb58:	4620      	mov	r0, r4
1000eb5a:	f7ff fbf3 	bl	1000e344 <wait_and_receive_packet>
        if(valid_device){
1000eb5e:	783b      	ldrb	r3, [r7, #0]
    send_packet_and_ack(ERROR_RETURN, transmit_buffer);
1000eb60:	4631      	mov	r1, r6
1000eb62:	20ff      	movs	r0, #255	@ 0xff
        if(valid_device){
1000eb64:	2b00      	cmp	r3, #0
1000eb66:	d1ea      	bne.n	1000eb3e <main+0x26>
    send_packet_and_ack(ERROR_RETURN, transmit_buffer);
1000eb68:	f7ff fbd6 	bl	1000e318 <send_packet_and_ack>
    while(!INITIAL_HASH_SET) {
1000eb6c:	782b      	ldrb	r3, [r5, #0]
1000eb6e:	2b00      	cmp	r3, #0
1000eb70:	d0f2      	beq.n	1000eb58 <main+0x40>
            send_error();
        }
    }

    while (1) {
        secure_receive(receive_buffer);
1000eb72:	4c07      	ldr	r4, [pc, #28]	@ (1000eb90 <main+0x78>)
1000eb74:	4620      	mov	r0, r4
1000eb76:	f7ff fcb3 	bl	1000e4e0 <secure_receive>
    while (1) {
1000eb7a:	e7fb      	b.n	1000eb74 <main+0x5c>
1000eb7c:	f7ff ff38 	bl	1000e9f0 <component_process_cmd.part.0>
1000eb80:	e7e8      	b.n	1000eb54 <main+0x3c>
        exchange_aes_key();
1000eb82:	f7ff fe09 	bl	1000e798 <exchange_aes_key>
1000eb86:	e7e5      	b.n	1000eb54 <main+0x3c>
1000eb88:	11111125 	.word	0x11111125
1000eb8c:	20000824 	.word	0x20000824
1000eb90:	20000930 	.word	0x20000930
1000eb94:	20000825 	.word	0x20000825
1000eb98:	20000830 	.word	0x20000830

1000eb9c <scale16>:
 *   0 <= pow <= 62
 *   2 | pow
 */
static void
scale16(struct pced *out, int pow, int x)
{
1000eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000eba0:	4614      	mov	r4, r2
1000eba2:	b0a1      	sub	sp, #132	@ 0x84
1000eba4:	460d      	mov	r5, r1
	struct pced R = { { 0 }, { 0 }, { 0 } };
1000eba6:	2278      	movs	r2, #120	@ 0x78
1000eba8:	2100      	movs	r1, #0
	limb_t mA, mB, mask;
	int neg, sgnx, absx;
	int i, k;
	
	neg = (x >> 3) & 1;
1000ebaa:	f3c4 08c0 	ubfx	r8, r4, #3, #1
{
1000ebae:	4681      	mov	r9, r0
	struct pced R = { { 0 }, { 0 }, { 0 } };
1000ebb0:	a802      	add	r0, sp, #8
1000ebb2:	f008 f813 	bl	10016bdc <memset>
	sgnx = 1 - 2*neg;
1000ebb6:	ea4f 0348 	mov.w	r3, r8, lsl #1
1000ebba:	f1c3 0c01 	rsb	ip, r3, #1
	absx = sgnx * x;
	pow >>= 1;
1000ebbe:	ea4f 0e65 	mov.w	lr, r5, asr #1
	absx = sgnx * x;
1000ebc2:	fb0c f504 	mul.w	r5, ip, r4

	/* handle abs(x) == 0 */
	mask = absx | (absx >> 2);
1000ebc6:	ea45 03a5 	orr.w	r3, r5, r5, asr #2
	mask |= mask >> 1;
1000ebca:	ea43 0363 	orr.w	r3, r3, r3, asr #1
	mask = (mask & 1) - 1;
1000ebce:	4952      	ldr	r1, [pc, #328]	@ (1000ed18 <scale16+0x17c>)
1000ebd0:	f003 0001 	and.w	r0, r3, #1
1000ebd4:	ab02      	add	r3, sp, #8
1000ebd6:	3801      	subs	r0, #1
1000ebd8:	461a      	mov	r2, r3
1000ebda:	f101 0728 	add.w	r7, r1, #40	@ 0x28
1000ebde:	9301      	str	r3, [sp, #4]
1000ebe0:	46c3      	mov	fp, r8
1000ebe2:	46e2      	mov	sl, ip
	for (i = 0; i < FLD_LIMB_NUM; i++) {
		R.diff[i] ^= pced_zero.diff[i] & mask;
1000ebe4:	680b      	ldr	r3, [r1, #0]
1000ebe6:	6814      	ldr	r4, [r2, #0]
1000ebe8:	4003      	ands	r3, r0
1000ebea:	4063      	eors	r3, r4
1000ebec:	6854      	ldr	r4, [r2, #4]
1000ebee:	f842 3b08 	str.w	r3, [r2], #8
1000ebf2:	684b      	ldr	r3, [r1, #4]
		R.sum[i] ^= pced_zero.sum[i] & mask;
1000ebf4:	6a16      	ldr	r6, [r2, #32]
		R.diff[i] ^= pced_zero.diff[i] & mask;
1000ebf6:	4003      	ands	r3, r0
1000ebf8:	4063      	eors	r3, r4
1000ebfa:	f842 3c04 	str.w	r3, [r2, #-4]
		R.sum[i] ^= pced_zero.sum[i] & mask;
1000ebfe:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
1000ec00:	ea00 0803 	and.w	r8, r0, r3
1000ec04:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
1000ec06:	ea00 0c03 	and.w	ip, r0, r3
		R.prod[i] ^= pced_zero.prod[i] & mask;
1000ec0a:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
		R.sum[i] ^= pced_zero.sum[i] & mask;
1000ec0c:	ea88 0606 	eor.w	r6, r8, r6
		R.prod[i] ^= pced_zero.prod[i] & mask;
1000ec10:	ea00 0403 	and.w	r4, r0, r3
1000ec14:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
		R.sum[i] ^= pced_zero.sum[i] & mask;
1000ec16:	6216      	str	r6, [r2, #32]
1000ec18:	6a56      	ldr	r6, [r2, #36]	@ 0x24
1000ec1a:	ea8c 0606 	eor.w	r6, ip, r6
1000ec1e:	6256      	str	r6, [r2, #36]	@ 0x24
		R.prod[i] ^= pced_zero.prod[i] & mask;
1000ec20:	6c96      	ldr	r6, [r2, #72]	@ 0x48
1000ec22:	4074      	eors	r4, r6
1000ec24:	6494      	str	r4, [r2, #72]	@ 0x48
1000ec26:	6cd4      	ldr	r4, [r2, #76]	@ 0x4c
	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ec28:	3108      	adds	r1, #8
		R.prod[i] ^= pced_zero.prod[i] & mask;
1000ec2a:	4003      	ands	r3, r0
1000ec2c:	4063      	eors	r3, r4
1000ec2e:	42b9      	cmp	r1, r7
1000ec30:	64d3      	str	r3, [r2, #76]	@ 0x4c
	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ec32:	d1d7      	bne.n	1000ebe4 <scale16+0x48>
1000ec34:	4c39      	ldr	r4, [pc, #228]	@ (1000ed1c <scale16+0x180>)
1000ec36:	46d4      	mov	ip, sl
1000ec38:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
1000ec3c:	f1a5 0608 	sub.w	r6, r5, #8
1000ec40:	eb04 148e 	add.w	r4, r4, lr, lsl #6
1000ec44:	46da      	mov	sl, fp
1000ec46:	46e6      	mov	lr, ip
1000ec48:	46b4      	mov	ip, r6
	}


	/* go through our table and look for abs(x) */
	for (k = 0; k < 8; k++) {
		absx--;
1000ec4a:	3d01      	subs	r5, #1
		mask = absx | (absx >> 2);
1000ec4c:	ea45 02a5 	orr.w	r2, r5, r5, asr #2
		mask |= mask >> 1;
1000ec50:	ea42 0262 	orr.w	r2, r2, r2, asr #1
		mask = (mask & 1) - 1;
1000ec54:	f002 0201 	and.w	r2, r2, #1
1000ec58:	46f0      	mov	r8, lr
1000ec5a:	3a01      	subs	r2, #1
		for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ec5c:	f1a4 0028 	sub.w	r0, r4, #40	@ 0x28
1000ec60:	f1a4 0780 	sub.w	r7, r4, #128	@ 0x80
1000ec64:	f1a4 0658 	sub.w	r6, r4, #88	@ 0x58
		mask = (mask & 1) - 1;
1000ec68:	ab02      	add	r3, sp, #8
1000ec6a:	46d3      	mov	fp, sl
1000ec6c:	46ae      	mov	lr, r5
			R.diff[i] ^= ed_lookup[pow][k].diff[i] & mask;
1000ec6e:	f857 5f08 	ldr.w	r5, [r7, #8]!
1000ec72:	6819      	ldr	r1, [r3, #0]
1000ec74:	f8d3 a004 	ldr.w	sl, [r3, #4]
1000ec78:	4015      	ands	r5, r2
1000ec7a:	404d      	eors	r5, r1
1000ec7c:	6879      	ldr	r1, [r7, #4]
1000ec7e:	f843 5b08 	str.w	r5, [r3], #8
1000ec82:	4011      	ands	r1, r2
1000ec84:	ea81 010a 	eor.w	r1, r1, sl
1000ec88:	f843 1c04 	str.w	r1, [r3, #-4]
			R.sum[i] ^= ed_lookup[pow][k].sum[i] & mask;
1000ec8c:	f856 1f08 	ldr.w	r1, [r6, #8]!
1000ec90:	6a1d      	ldr	r5, [r3, #32]
1000ec92:	ea02 0a01 	and.w	sl, r2, r1
1000ec96:	ea8a 0505 	eor.w	r5, sl, r5
1000ec9a:	6871      	ldr	r1, [r6, #4]
1000ec9c:	621d      	str	r5, [r3, #32]
1000ec9e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
1000eca0:	4011      	ands	r1, r2
1000eca2:	4069      	eors	r1, r5
1000eca4:	6259      	str	r1, [r3, #36]	@ 0x24
			R.prod[i] ^= ed_lookup[pow][k].prod[i] & mask;
1000eca6:	6845      	ldr	r5, [r0, #4]
1000eca8:	6801      	ldr	r1, [r0, #0]
1000ecaa:	ea02 0a05 	and.w	sl, r2, r5
1000ecae:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
1000ecb0:	4011      	ands	r1, r2
1000ecb2:	4069      	eors	r1, r5
1000ecb4:	6499      	str	r1, [r3, #72]	@ 0x48
1000ecb6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
		for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ecb8:	3008      	adds	r0, #8
			R.prod[i] ^= ed_lookup[pow][k].prod[i] & mask;
1000ecba:	ea8a 0101 	eor.w	r1, sl, r1
1000ecbe:	42a0      	cmp	r0, r4
1000ecc0:	64d9      	str	r1, [r3, #76]	@ 0x4c
		for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ecc2:	d1d4      	bne.n	1000ec6e <scale16+0xd2>
	for (k = 0; k < 8; k++) {
1000ecc4:	4675      	mov	r5, lr
1000ecc6:	4565      	cmp	r5, ip
1000ecc8:	46da      	mov	sl, fp
1000ecca:	46c6      	mov	lr, r8
1000eccc:	f100 0478 	add.w	r4, r0, #120	@ 0x78
1000ecd0:	d1bb      	bne.n	1000ec4a <scale16+0xae>
		}
	}

	/* conditionally negate R and write to out */
	mA = neg-1;
1000ecd2:	9b01      	ldr	r3, [sp, #4]
1000ecd4:	46f4      	mov	ip, lr
1000ecd6:	f10b 36ff 	add.w	r6, fp, #4294967295	@ 0xffffffff
	mB = ~mA;
1000ecda:	f1cb 0700 	rsb	r7, fp, #0
	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ecde:	f1a9 0104 	sub.w	r1, r9, #4
1000ece2:	f109 0e24 	add.w	lr, r9, #36	@ 0x24
		out->diff[i] = (mA & R.diff[i]) ^ (mB & R.sum[i]);
1000ece6:	f853 2b04 	ldr.w	r2, [r3], #4
1000ecea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
		out->sum[i]  = (mB & R.diff[i]) ^ (mA & R.sum[i]);
		out->prod[i] = sgnx * R.prod[i];
1000ecec:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
		out->diff[i] = (mA & R.diff[i]) ^ (mB & R.sum[i]);
1000ecee:	ea02 0506 	and.w	r5, r2, r6
1000ecf2:	ea00 0807 	and.w	r8, r0, r7
1000ecf6:	ea85 0508 	eor.w	r5, r5, r8
1000ecfa:	f841 5f04 	str.w	r5, [r1, #4]!
		out->sum[i]  = (mB & R.diff[i]) ^ (mA & R.sum[i]);
1000ecfe:	403a      	ands	r2, r7
1000ed00:	4030      	ands	r0, r6
1000ed02:	4042      	eors	r2, r0
		out->prod[i] = sgnx * R.prod[i];
1000ed04:	fb0c f404 	mul.w	r4, ip, r4
	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ed08:	4571      	cmp	r1, lr
		out->sum[i]  = (mB & R.diff[i]) ^ (mA & R.sum[i]);
1000ed0a:	628a      	str	r2, [r1, #40]	@ 0x28
		out->prod[i] = sgnx * R.prod[i];
1000ed0c:	650c      	str	r4, [r1, #80]	@ 0x50
	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000ed0e:	d1ea      	bne.n	1000ece6 <scale16+0x14a>
	}
}
1000ed10:	b021      	add	sp, #132	@ 0x84
1000ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ed16:	bf00      	nop
1000ed18:	1001bcc0 	.word	0x1001bcc0
1000ed1c:	1001be50 	.word	0x1001be50

1000ed20 <ed_add_pc>:
{
1000ed20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000ed24:	1f0c      	subs	r4, r1, #4
1000ed26:	b0d0      	sub	sp, #320	@ 0x140
1000ed28:	468a      	mov	sl, r1

static INLINE void
fld_sub(fld_t res, const fld_t a, const fld_t b)
{
	int i;
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed2a:	f101 0824 	add.w	r8, r1, #36	@ 0x24
1000ed2e:	4605      	mov	r5, r0
1000ed30:	4691      	mov	r9, r2
1000ed32:	466e      	mov	r6, sp
1000ed34:	4669      	mov	r1, sp
1000ed36:	4623      	mov	r3, r4
		res[i] = a[i] - b[i];
1000ed38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1000ed3a:	f853 0f04 	ldr.w	r0, [r3, #4]!
1000ed3e:	1a12      	subs	r2, r2, r0
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed40:	4543      	cmp	r3, r8
		res[i] = a[i] - b[i];
1000ed42:	f841 2b04 	str.w	r2, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed46:	d1f7      	bne.n	1000ed38 <ed_add_pc+0x18>
	fld_mul(a, a, Q->diff);
1000ed48:	464a      	mov	r2, r9
1000ed4a:	4669      	mov	r1, sp
1000ed4c:	4668      	mov	r0, sp
1000ed4e:	af0a      	add	r7, sp, #40	@ 0x28
1000ed50:	f000 fa80 	bl	1000f254 <fld_mul>
1000ed54:	463a      	mov	r2, r7
		res[i] = a[i] + b[i];
1000ed56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
1000ed58:	f854 3f04 	ldr.w	r3, [r4, #4]!
1000ed5c:	440b      	add	r3, r1
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed5e:	4544      	cmp	r4, r8
		res[i] = a[i] + b[i];
1000ed60:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed64:	d1f7      	bne.n	1000ed56 <ed_add_pc+0x36>
	fld_mul(b, b, Q->sum);
1000ed66:	a90a      	add	r1, sp, #40	@ 0x28
1000ed68:	4608      	mov	r0, r1
1000ed6a:	f109 0228 	add.w	r2, r9, #40	@ 0x28
1000ed6e:	f000 fa71 	bl	1000f254 <fld_mul>
	fld_mul(c, P->t, Q->prod);
1000ed72:	f10a 0150 	add.w	r1, sl, #80	@ 0x50
1000ed76:	f109 0250 	add.w	r2, r9, #80	@ 0x50
1000ed7a:	a814      	add	r0, sp, #80	@ 0x50
1000ed7c:	f000 fa6a 	bl	1000f254 <fld_mul>
 */
static INLINE void
fld_scale2(fld_t res, const fld_t a)
{
	int i;
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed80:	a91e      	add	r1, sp, #120	@ 0x78
1000ed82:	f10a 0274 	add.w	r2, sl, #116	@ 0x74
1000ed86:	4608      	mov	r0, r1
1000ed88:	f10a 0a9c 	add.w	sl, sl, #156	@ 0x9c
		res[i] = a[i] << 1;
1000ed8c:	f852 3f04 	ldr.w	r3, [r2, #4]!
1000ed90:	005b      	lsls	r3, r3, #1
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed92:	4552      	cmp	r2, sl
		res[i] = a[i] << 1;
1000ed94:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ed98:	d1f8      	bne.n	1000ed8c <ed_add_pc+0x6c>
1000ed9a:	ab0a      	add	r3, sp, #40	@ 0x28
1000ed9c:	466c      	mov	r4, sp
1000ed9e:	f10d 0ca0 	add.w	ip, sp, #160	@ 0xa0
1000eda2:	a814      	add	r0, sp, #80	@ 0x50
1000eda4:	461a      	mov	r2, r3
		res[i] = a[i] - b[i];
1000eda6:	f852 3b04 	ldr.w	r3, [r2], #4
1000edaa:	f854 eb04 	ldr.w	lr, [r4], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000edae:	4282      	cmp	r2, r0
		res[i] = a[i] - b[i];
1000edb0:	eba3 030e 	sub.w	r3, r3, lr
1000edb4:	f84c 3b04 	str.w	r3, [ip], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000edb8:	d1f5      	bne.n	1000eda6 <ed_add_pc+0x86>
1000edba:	ac14      	add	r4, sp, #80	@ 0x50
1000edbc:	f10d 08c8 	add.w	r8, sp, #200	@ 0xc8
1000edc0:	f101 0c28 	add.w	ip, r1, #40	@ 0x28
1000edc4:	46a6      	mov	lr, r4
1000edc6:	460a      	mov	r2, r1
		res[i] = a[i] - b[i];
1000edc8:	f852 3b04 	ldr.w	r3, [r2], #4
1000edcc:	f85e 9b04 	ldr.w	r9, [lr], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000edd0:	4562      	cmp	r2, ip
		res[i] = a[i] - b[i];
1000edd2:	eba3 0309 	sub.w	r3, r3, r9
1000edd6:	f848 3b04 	str.w	r3, [r8], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000edda:	d1f5      	bne.n	1000edc8 <ed_add_pc+0xa8>
1000eddc:	aa3c      	add	r2, sp, #240	@ 0xf0
		res[i] = a[i] + b[i];
1000edde:	f851 3b04 	ldr.w	r3, [r1], #4
1000ede2:	f854 eb04 	ldr.w	lr, [r4], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ede6:	4561      	cmp	r1, ip
		res[i] = a[i] + b[i];
1000ede8:	4473      	add	r3, lr
1000edea:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000edee:	d1f6      	bne.n	1000edde <ed_add_pc+0xbe>
1000edf0:	aa46      	add	r2, sp, #280	@ 0x118
		res[i] = a[i] + b[i];
1000edf2:	f857 3b04 	ldr.w	r3, [r7], #4
1000edf6:	f856 1b04 	ldr.w	r1, [r6], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000edfa:	4287      	cmp	r7, r0
		res[i] = a[i] + b[i];
1000edfc:	440b      	add	r3, r1
1000edfe:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ee02:	d1f6      	bne.n	1000edf2 <ed_add_pc+0xd2>
	fld_mul(out->x, e, f);
1000ee04:	4628      	mov	r0, r5
1000ee06:	aa32      	add	r2, sp, #200	@ 0xc8
1000ee08:	a928      	add	r1, sp, #160	@ 0xa0
1000ee0a:	f000 fa23 	bl	1000f254 <fld_mul>
	fld_mul(out->y, g, h);
1000ee0e:	aa46      	add	r2, sp, #280	@ 0x118
1000ee10:	a93c      	add	r1, sp, #240	@ 0xf0
1000ee12:	f105 0028 	add.w	r0, r5, #40	@ 0x28
1000ee16:	f000 fa1d 	bl	1000f254 <fld_mul>
	fld_mul(out->t, e, h);
1000ee1a:	aa46      	add	r2, sp, #280	@ 0x118
1000ee1c:	a928      	add	r1, sp, #160	@ 0xa0
1000ee1e:	f105 0050 	add.w	r0, r5, #80	@ 0x50
1000ee22:	f000 fa17 	bl	1000f254 <fld_mul>
	fld_mul(out->z, f, g);
1000ee26:	aa3c      	add	r2, sp, #240	@ 0xf0
1000ee28:	a932      	add	r1, sp, #200	@ 0xc8
1000ee2a:	f105 0078 	add.w	r0, r5, #120	@ 0x78
1000ee2e:	f000 fa11 	bl	1000f254 <fld_mul>
}
1000ee32:	b050      	add	sp, #320	@ 0x140
1000ee34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1000ee38 <ed_add>:
{
1000ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ee3c:	b0dd      	sub	sp, #372	@ 0x174
1000ee3e:	1f0d      	subs	r5, r1, #4
1000ee40:	af02      	add	r7, sp, #8
1000ee42:	9000      	str	r0, [sp, #0]
1000ee44:	4693      	mov	fp, r2
1000ee46:	468a      	mov	sl, r1
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ee48:	f101 0324 	add.w	r3, r1, #36	@ 0x24
1000ee4c:	4638      	mov	r0, r7
1000ee4e:	462a      	mov	r2, r5
		res[i] = a[i] - b[i];
1000ee50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
1000ee52:	f852 4f04 	ldr.w	r4, [r2, #4]!
1000ee56:	1b09      	subs	r1, r1, r4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ee58:	429a      	cmp	r2, r3
		res[i] = a[i] - b[i];
1000ee5a:	f840 1b04 	str.w	r1, [r0], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ee5e:	d1f7      	bne.n	1000ee50 <ed_add+0x18>
1000ee60:	f1ab 0404 	sub.w	r4, fp, #4
1000ee64:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
1000ee68:	f10b 0924 	add.w	r9, fp, #36	@ 0x24
1000ee6c:	4640      	mov	r0, r8
1000ee6e:	4622      	mov	r2, r4
		res[i] = a[i] - b[i];
1000ee70:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
1000ee72:	f852 6f04 	ldr.w	r6, [r2, #4]!
1000ee76:	1b89      	subs	r1, r1, r6
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ee78:	454a      	cmp	r2, r9
		res[i] = a[i] - b[i];
1000ee7a:	f840 1b04 	str.w	r1, [r0], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ee7e:	d1f7      	bne.n	1000ee70 <ed_add+0x38>
	fld_mul(a, a, t);
1000ee80:	a902      	add	r1, sp, #8
1000ee82:	4608      	mov	r0, r1
1000ee84:	aa52      	add	r2, sp, #328	@ 0x148
1000ee86:	9301      	str	r3, [sp, #4]
1000ee88:	ae0c      	add	r6, sp, #48	@ 0x30
1000ee8a:	f000 f9e3 	bl	1000f254 <fld_mul>
1000ee8e:	9b01      	ldr	r3, [sp, #4]
1000ee90:	4631      	mov	r1, r6
		res[i] = a[i] + b[i];
1000ee92:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
1000ee94:	f855 2f04 	ldr.w	r2, [r5, #4]!
1000ee98:	4402      	add	r2, r0
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ee9a:	429d      	cmp	r5, r3
		res[i] = a[i] + b[i];
1000ee9c:	f841 2b04 	str.w	r2, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000eea0:	d1f7      	bne.n	1000ee92 <ed_add+0x5a>
		res[i] = a[i] + b[i];
1000eea2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
1000eea4:	f854 3f04 	ldr.w	r3, [r4, #4]!
1000eea8:	4413      	add	r3, r2
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000eeaa:	454c      	cmp	r4, r9
		res[i] = a[i] + b[i];
1000eeac:	f848 3b04 	str.w	r3, [r8], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000eeb0:	d1f7      	bne.n	1000eea2 <ed_add+0x6a>
	fld_mul(b, b, t);
1000eeb2:	a90c      	add	r1, sp, #48	@ 0x30
1000eeb4:	4608      	mov	r0, r1
1000eeb6:	aa52      	add	r2, sp, #328	@ 0x148
1000eeb8:	f000 f9cc 	bl	1000f254 <fld_mul>
	fld_mul(c, P->t, Q->t);
1000eebc:	f10b 0250 	add.w	r2, fp, #80	@ 0x50
1000eec0:	f10a 0150 	add.w	r1, sl, #80	@ 0x50
1000eec4:	a816      	add	r0, sp, #88	@ 0x58
1000eec6:	f000 f9c5 	bl	1000f254 <fld_mul>
	fld_mul(c, c, con_2d);
1000eeca:	a916      	add	r1, sp, #88	@ 0x58
1000eecc:	4608      	mov	r0, r1
1000eece:	4a30      	ldr	r2, [pc, #192]	@ (1000ef90 <ed_add+0x158>)
1000eed0:	f000 f9c0 	bl	1000f254 <fld_mul>
	fld_mul(d, P->z, Q->z);
1000eed4:	f10a 0178 	add.w	r1, sl, #120	@ 0x78
1000eed8:	f10b 0278 	add.w	r2, fp, #120	@ 0x78
1000eedc:	a820      	add	r0, sp, #128	@ 0x80
1000eede:	f000 f9b9 	bl	1000f254 <fld_mul>
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000eee2:	a920      	add	r1, sp, #128	@ 0x80
1000eee4:	ac2a      	add	r4, sp, #168	@ 0xa8
1000eee6:	460b      	mov	r3, r1
		res[i] = a[i] << 1;
1000eee8:	681a      	ldr	r2, [r3, #0]
1000eeea:	0052      	lsls	r2, r2, #1
1000eeec:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000eef0:	42a3      	cmp	r3, r4
1000eef2:	d1f9      	bne.n	1000eee8 <ed_add+0xb0>
1000eef4:	ab0c      	add	r3, sp, #48	@ 0x30
1000eef6:	ad02      	add	r5, sp, #8
1000eef8:	46a4      	mov	ip, r4
1000eefa:	aa16      	add	r2, sp, #88	@ 0x58
1000eefc:	4618      	mov	r0, r3
		res[i] = a[i] - b[i];
1000eefe:	f850 3b04 	ldr.w	r3, [r0], #4
1000ef02:	f855 eb04 	ldr.w	lr, [r5], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef06:	4290      	cmp	r0, r2
		res[i] = a[i] - b[i];
1000ef08:	eba3 030e 	sub.w	r3, r3, lr
1000ef0c:	f84c 3b04 	str.w	r3, [ip], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef10:	d1f5      	bne.n	1000eefe <ed_add+0xc6>
1000ef12:	ad16      	add	r5, sp, #88	@ 0x58
1000ef14:	a820      	add	r0, sp, #128	@ 0x80
1000ef16:	f10d 0ed0 	add.w	lr, sp, #208	@ 0xd0
1000ef1a:	46ac      	mov	ip, r5
		res[i] = a[i] - b[i];
1000ef1c:	f850 3b04 	ldr.w	r3, [r0], #4
1000ef20:	f85c 8b04 	ldr.w	r8, [ip], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef24:	42a0      	cmp	r0, r4
		res[i] = a[i] - b[i];
1000ef26:	eba3 0308 	sub.w	r3, r3, r8
1000ef2a:	f84e 3b04 	str.w	r3, [lr], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef2e:	d1f5      	bne.n	1000ef1c <ed_add+0xe4>
1000ef30:	a83e      	add	r0, sp, #248	@ 0xf8
		res[i] = a[i] + b[i];
1000ef32:	f851 3b04 	ldr.w	r3, [r1], #4
1000ef36:	f855 cb04 	ldr.w	ip, [r5], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef3a:	42a1      	cmp	r1, r4
		res[i] = a[i] + b[i];
1000ef3c:	4463      	add	r3, ip
1000ef3e:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef42:	d1f6      	bne.n	1000ef32 <ed_add+0xfa>
1000ef44:	a948      	add	r1, sp, #288	@ 0x120
		res[i] = a[i] + b[i];
1000ef46:	f856 3b04 	ldr.w	r3, [r6], #4
1000ef4a:	f857 0b04 	ldr.w	r0, [r7], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef4e:	4296      	cmp	r6, r2
		res[i] = a[i] + b[i];
1000ef50:	4403      	add	r3, r0
1000ef52:	f841 3b04 	str.w	r3, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000ef56:	d1f6      	bne.n	1000ef46 <ed_add+0x10e>
	fld_mul(out->x, e, f);
1000ef58:	9d00      	ldr	r5, [sp, #0]
1000ef5a:	aa34      	add	r2, sp, #208	@ 0xd0
1000ef5c:	4628      	mov	r0, r5
1000ef5e:	4621      	mov	r1, r4
1000ef60:	f000 f978 	bl	1000f254 <fld_mul>
	fld_mul(out->y, g, h);
1000ef64:	aa48      	add	r2, sp, #288	@ 0x120
1000ef66:	a93e      	add	r1, sp, #248	@ 0xf8
1000ef68:	f105 0028 	add.w	r0, r5, #40	@ 0x28
1000ef6c:	f000 f972 	bl	1000f254 <fld_mul>
	fld_mul(out->t, e, h);
1000ef70:	aa48      	add	r2, sp, #288	@ 0x120
1000ef72:	4621      	mov	r1, r4
1000ef74:	f105 0050 	add.w	r0, r5, #80	@ 0x50
1000ef78:	f000 f96c 	bl	1000f254 <fld_mul>
	fld_mul(out->z, f, g);
1000ef7c:	aa3e      	add	r2, sp, #248	@ 0xf8
1000ef7e:	a934      	add	r1, sp, #208	@ 0xd0
1000ef80:	f105 0078 	add.w	r0, r5, #120	@ 0x78
1000ef84:	f000 f966 	bl	1000f254 <fld_mul>
}
1000ef88:	b05d      	add	sp, #372	@ 0x174
1000ef8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000ef8e:	bf00      	nop
1000ef90:	100235d8 	.word	0x100235d8

1000ef94 <ed_scale_base>:
/*
 * ed_scale_base - calculates x * base
 */
void
ed_scale_base(struct ed *out, const sc_t x)
{
1000ef94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef96:	4c29      	ldr	r4, [pc, #164]	@ (1000f03c <ed_scale_base+0xa8>)
1000ef98:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
1000ef9c:	1f0a      	subs	r2, r1, #4
1000ef9e:	f101 0524 	add.w	r5, r1, #36	@ 0x24
1000efa2:	4606      	mov	r6, r0
1000efa4:	a908      	add	r1, sp, #32
		res[i] = a[i] + b[i];
1000efa6:	f852 3f04 	ldr.w	r3, [r2, #4]!
1000efaa:	f854 0b04 	ldr.w	r0, [r4], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000efae:	42aa      	cmp	r2, r5
		res[i] = a[i] + b[i];
1000efb0:	4403      	add	r3, r0
1000efb2:	f841 3b04 	str.w	r3, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1000efb6:	d1f6      	bne.n	1000efa6 <ed_scale_base+0x12>
	uint8_t pack[32];
	int i;

	/* s <- x + 8 * (16^64 - 1) / 15 */
	sc_add(tmp, x, con_off);
	sc_export(pack, tmp);
1000efb8:	a908      	add	r1, sp, #32
1000efba:	4668      	mov	r0, sp
1000efbc:	f001 fa04 	bl	100103c8 <sc_export>

	/*
	 * R0 <- r0*B + r2*16^2*B + ... + r62*16^62*B 
	 * R1 <- r1*B + r3*16^2*B + ... + r63*16^62*B
	 */
	memcpy(&R0, &ed_zero, sizeof(struct ed));
1000efc0:	491f      	ldr	r1, [pc, #124]	@ (1000f040 <ed_scale_base+0xac>)
1000efc2:	22a0      	movs	r2, #160	@ 0xa0
1000efc4:	a830      	add	r0, sp, #192	@ 0xc0
1000efc6:	f007 ff43 	bl	10016e50 <memcpy>
	memcpy(&R1, &ed_zero, sizeof(struct ed));
1000efca:	491d      	ldr	r1, [pc, #116]	@ (1000f040 <ed_scale_base+0xac>)
1000efcc:	22a0      	movs	r2, #160	@ 0xa0
1000efce:	a858      	add	r0, sp, #352	@ 0x160
1000efd0:	f007 ff3e 	bl	10016e50 <memcpy>
	for (i = 0; i < 32; i++) {
1000efd4:	f10d 35ff 	add.w	r5, sp, #4294967295	@ 0xffffffff
1000efd8:	f10d 071f 	add.w	r7, sp, #31
	memcpy(&R1, &ed_zero, sizeof(struct ed));
1000efdc:	2400      	movs	r4, #0
		scale16(&P, 2*i, (pack[i] & 0xf) - 8);
1000efde:	f815 2f01 	ldrb.w	r2, [r5, #1]!
1000efe2:	f002 020f 	and.w	r2, r2, #15
1000efe6:	4621      	mov	r1, r4
1000efe8:	3a08      	subs	r2, #8
1000efea:	a812      	add	r0, sp, #72	@ 0x48
1000efec:	f7ff fdd6 	bl	1000eb9c <scale16>
		ed_add_pc(&R0, &R0, &P);
1000eff0:	a930      	add	r1, sp, #192	@ 0xc0
1000eff2:	4608      	mov	r0, r1
1000eff4:	aa12      	add	r2, sp, #72	@ 0x48
1000eff6:	f7ff fe93 	bl	1000ed20 <ed_add_pc>

		scale16(&P, 2*i, (pack[i] >> 4) - 8);
1000effa:	782a      	ldrb	r2, [r5, #0]
1000effc:	0912      	lsrs	r2, r2, #4
1000effe:	4621      	mov	r1, r4
1000f000:	3a08      	subs	r2, #8
1000f002:	a812      	add	r0, sp, #72	@ 0x48
1000f004:	f7ff fdca 	bl	1000eb9c <scale16>
		ed_add_pc(&R1, &R1, &P);
1000f008:	a958      	add	r1, sp, #352	@ 0x160
1000f00a:	aa12      	add	r2, sp, #72	@ 0x48
1000f00c:	4608      	mov	r0, r1
1000f00e:	f7ff fe87 	bl	1000ed20 <ed_add_pc>
	for (i = 0; i < 32; i++) {
1000f012:	42af      	cmp	r7, r5
1000f014:	f104 0402 	add.w	r4, r4, #2
1000f018:	d1e1      	bne.n	1000efde <ed_scale_base+0x4a>
1000f01a:	2404      	movs	r4, #4
	}

	/* R1 <- 16 * R1 */
	for (i = 0; i < 4; i++)
		ed_add(&R1, &R1, &R1);
1000f01c:	aa58      	add	r2, sp, #352	@ 0x160
1000f01e:	4611      	mov	r1, r2
1000f020:	4610      	mov	r0, r2
1000f022:	f7ff ff09 	bl	1000ee38 <ed_add>
	for (i = 0; i < 4; i++)
1000f026:	3c01      	subs	r4, #1
1000f028:	d1f8      	bne.n	1000f01c <ed_scale_base+0x88>

	/* out <- R0 + R1 */
	ed_add(out, &R0, &R1);
1000f02a:	aa58      	add	r2, sp, #352	@ 0x160
1000f02c:	a930      	add	r1, sp, #192	@ 0xc0
1000f02e:	4630      	mov	r0, r6
1000f030:	f7ff ff02 	bl	1000ee38 <ed_add>
}
1000f034:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
1000f038:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f03a:	bf00      	nop
1000f03c:	10023800 	.word	0x10023800
1000f040:	1001bd38 	.word	0x1001bd38

1000f044 <fld_reduce>:
 * assumes:
 *   abs(x[i]) <= 2^31 - 2^5 = 32 * (2^26 - 1)
 */
void
fld_reduce(fld_t res, const fld_t x)
{
1000f044:	b510      	push	{r4, lr}
	limb_t tmp;

	CARRY(res, x, tmp, 19);
1000f046:	2200      	movs	r2, #0
1000f048:	f04f 5318 	mov.w	r3, #637534208	@ 0x26000000
1000f04c:	f101 0e04 	add.w	lr, r1, #4
1000f050:	f100 0c04 	add.w	ip, r0, #4
1000f054:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
1000f058:	eb04 6363 	add.w	r3, r4, r3, asr #25
1000f05c:	f023 447c 	bic.w	r4, r3, #4227858432	@ 0xfc000000
1000f060:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
1000f064:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
1000f068:	eb04 63a3 	add.w	r3, r4, r3, asr #26
1000f06c:	f023 447e 	bic.w	r4, r3, #4261412864	@ 0xfe000000
1000f070:	f84c 4022 	str.w	r4, [ip, r2, lsl #2]
1000f074:	3202      	adds	r2, #2
1000f076:	2a0a      	cmp	r2, #10
1000f078:	d1ec      	bne.n	1000f054 <fld_reduce+0x10>
1000f07a:	165b      	asrs	r3, r3, #25
1000f07c:	6802      	ldr	r2, [r0, #0]
1000f07e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
1000f082:	eb03 0341 	add.w	r3, r3, r1, lsl #1
1000f086:	4413      	add	r3, r2
	 * and for i >= 1:
	 *   0 <= res[i] <= 2^26-1, i % 2 == 0,
	 *   0 <= res[i] <= 2^25-1, i % 2 == 1.
	 */

	CARRY(res, res, tmp, 0);
1000f088:	2200      	movs	r2, #0
	CARRY(res, x, tmp, 19);
1000f08a:	6003      	str	r3, [r0, #0]
	CARRY(res, res, tmp, 0);
1000f08c:	4613      	mov	r3, r2
1000f08e:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
1000f092:	eb01 6363 	add.w	r3, r1, r3, asr #25
1000f096:	f023 417c 	bic.w	r1, r3, #4227858432	@ 0xfc000000
1000f09a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
1000f09e:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
1000f0a2:	eb01 63a3 	add.w	r3, r1, r3, asr #26
1000f0a6:	f023 417e 	bic.w	r1, r3, #4261412864	@ 0xfe000000
1000f0aa:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
1000f0ae:	3202      	adds	r2, #2
1000f0b0:	2a0a      	cmp	r2, #10
1000f0b2:	d1ec      	bne.n	1000f08e <fld_reduce+0x4a>
1000f0b4:	165b      	asrs	r3, r3, #25
1000f0b6:	6802      	ldr	r2, [r0, #0]
1000f0b8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
1000f0bc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
1000f0c0:	441a      	add	r2, r3
1000f0c2:	6002      	str	r2, [r0, #0]

	/* next round we will first remove our offset resulting in
	 *   -2^26 - 38 <= res[0] <= 2^26 - 1,
	 * therefor only a negative carry could appear.
	 */
	CARRY(res, res, tmp, -19);
1000f0c4:	f04f 435a 	mov.w	r3, #3657433088	@ 0xda000000
1000f0c8:	2200      	movs	r2, #0
1000f0ca:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
1000f0ce:	eb01 6363 	add.w	r3, r1, r3, asr #25
1000f0d2:	f023 417c 	bic.w	r1, r3, #4227858432	@ 0xfc000000
1000f0d6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
1000f0da:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
1000f0de:	eb01 63a3 	add.w	r3, r1, r3, asr #26
1000f0e2:	f023 417e 	bic.w	r1, r3, #4261412864	@ 0xfe000000
1000f0e6:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
1000f0ea:	3202      	adds	r2, #2
1000f0ec:	2a0a      	cmp	r2, #10
1000f0ee:	d1ec      	bne.n	1000f0ca <fld_reduce+0x86>
1000f0f0:	165b      	asrs	r3, r3, #25
1000f0f2:	6802      	ldr	r2, [r0, #0]
1000f0f4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
1000f0f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
1000f0fc:	441a      	add	r2, r3
1000f0fe:	6002      	str	r2, [r0, #0]
	 * for all limbs as wished.
	 *
	 * if a carry had happend, we even know
	 *   2^26 - 38 - 19 <= res[0] <= 2^26 - 1.
	 */
}
1000f100:	bd10      	pop	{r4, pc}
1000f102:	bf00      	nop

1000f104 <fld_import>:
 * fld_import - import an 256bit, unsigned, little-endian integer into
 * our internal fld_t format.
 */
void
fld_import(fld_t dst, const uint8_t src[32])
{
1000f104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1000f108:	4607      	mov	r7, r0
	int i;
	uint32_t foo = 0;
	int fill = 0;
	int d = 1;
1000f10a:	2401      	movs	r4, #1
	int fill = 0;
1000f10c:	2000      	movs	r0, #0
{
1000f10e:	460e      	mov	r6, r1

	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000f110:	1f3d      	subs	r5, r7, #4
1000f112:	f107 0924 	add.w	r9, r7, #36	@ 0x24
	uint32_t foo = 0;
1000f116:	4684      	mov	ip, r0
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
			foo |= (uint32_t)*src++ << fill;
		dst[i] = foo & FLD_LIMB_MASK(d);
1000f118:	46a0      	mov	r8, r4
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
1000f11a:	f104 0118 	add.w	r1, r4, #24
1000f11e:	4281      	cmp	r1, r0
1000f120:	db10      	blt.n	1000f144 <fld_import+0x40>
1000f122:	4603      	mov	r3, r0
1000f124:	46b6      	mov	lr, r6
			foo |= (uint32_t)*src++ << fill;
1000f126:	f81e 2b01 	ldrb.w	r2, [lr], #1
1000f12a:	409a      	lsls	r2, r3
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
1000f12c:	3308      	adds	r3, #8
1000f12e:	428b      	cmp	r3, r1
			foo |= (uint32_t)*src++ << fill;
1000f130:	ea4c 0c02 	orr.w	ip, ip, r2
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
1000f134:	ddf7      	ble.n	1000f126 <fld_import+0x22>
1000f136:	1a09      	subs	r1, r1, r0
1000f138:	08c9      	lsrs	r1, r1, #3
			foo |= (uint32_t)*src++ << fill;
1000f13a:	1c4b      	adds	r3, r1, #1
1000f13c:	3008      	adds	r0, #8
1000f13e:	441e      	add	r6, r3
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
1000f140:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
		dst[i] = foo & FLD_LIMB_MASK(d);
1000f144:	f104 0219 	add.w	r2, r4, #25
1000f148:	fa08 f302 	lsl.w	r3, r8, r2
1000f14c:	3b01      	subs	r3, #1
1000f14e:	ea03 030c 	and.w	r3, r3, ip
1000f152:	f845 3f04 	str.w	r3, [r5, #4]!
	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000f156:	45a9      	cmp	r9, r5
		
		foo >>= FLD_LIMB_BITS(d);
1000f158:	fa2c fc02 	lsr.w	ip, ip, r2
		fill -= FLD_LIMB_BITS(d);
1000f15c:	eba0 0002 	sub.w	r0, r0, r2
		d = 1-d;
1000f160:	f1c4 0401 	rsb	r4, r4, #1
	for (i = 0; i < FLD_LIMB_NUM; i++) {
1000f164:	d1d9      	bne.n	1000f11a <fld_import+0x16>
	}
	dst[0] += 19*foo;
1000f166:	683b      	ldr	r3, [r7, #0]
1000f168:	eb0c 02cc 	add.w	r2, ip, ip, lsl #3
1000f16c:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
1000f170:	4463      	add	r3, ip
1000f172:	603b      	str	r3, [r7, #0]
}
1000f174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

1000f178 <fld_export>:
/*
 * fld_export - export a field element into 256bit little-endian encoded form.
 */
void
fld_export(uint8_t dst[32], const fld_t src)
{
1000f178:	b570      	push	{r4, r5, r6, lr}
1000f17a:	b08a      	sub	sp, #40	@ 0x28
1000f17c:	4604      	mov	r4, r0
	uint32_t foo;
	fld_t tmp;
	int fill, i;

	fld_reduce(tmp, src);
1000f17e:	4668      	mov	r0, sp
1000f180:	f7ff ff60 	bl	1000f044 <fld_reduce>

	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
1000f184:	2200      	movs	r2, #0
1000f186:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
1000f18a:	4613      	mov	r3, r2
		foo |= (tmp[i] & FLD_LIMB_MASK(1)) << fill;
1000f18c:	6805      	ldr	r5, [r0, #0]
1000f18e:	f102 0612 	add.w	r6, r2, #18
1000f192:	f025 457c 	bic.w	r5, r5, #4227858432	@ 0xfc000000
1000f196:	08f1      	lsrs	r1, r6, #3
1000f198:	4095      	lsls	r5, r2
1000f19a:	f101 0e01 	add.w	lr, r1, #1
1000f19e:	431d      	orrs	r5, r3
		for (fill += FLD_LIMB_BITS(1); fill >= 8; fill -= 8, foo >>= 8)
1000f1a0:	321a      	adds	r2, #26
1000f1a2:	44a6      	add	lr, r4
			*dst++ = foo & 0xff;
1000f1a4:	f804 5b01 	strb.w	r5, [r4], #1
		for (fill += FLD_LIMB_BITS(1); fill >= 8; fill -= 8, foo >>= 8)
1000f1a8:	45a6      	cmp	lr, r4
1000f1aa:	ea4f 2515 	mov.w	r5, r5, lsr #8
1000f1ae:	d1f9      	bne.n	1000f1a4 <fld_export+0x2c>
1000f1b0:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
1000f1b4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3

		foo |= (tmp[i+1] & FLD_LIMB_MASK(0)) << fill;
1000f1b8:	6843      	ldr	r3, [r0, #4]
1000f1ba:	3209      	adds	r2, #9
		for (fill += FLD_LIMB_BITS(1); fill >= 8; fill -= 8, foo >>= 8)
1000f1bc:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
		foo |= (tmp[i+1] & FLD_LIMB_MASK(0)) << fill;
1000f1c0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
1000f1c4:	08d1      	lsrs	r1, r2, #3
1000f1c6:	40b3      	lsls	r3, r6
1000f1c8:	1c4c      	adds	r4, r1, #1
1000f1ca:	432b      	orrs	r3, r5
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
1000f1cc:	4474      	add	r4, lr
			*dst++ = foo & 0xff;
1000f1ce:	f80e 3b01 	strb.w	r3, [lr], #1
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
1000f1d2:	4574      	cmp	r4, lr
1000f1d4:	ea4f 2313 	mov.w	r3, r3, lsr #8
1000f1d8:	d1f9      	bne.n	1000f1ce <fld_export+0x56>
	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
1000f1da:	3008      	adds	r0, #8
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
1000f1dc:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
1000f1e0:	4560      	cmp	r0, ip
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
1000f1e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
1000f1e6:	d1d1      	bne.n	1000f18c <fld_export+0x14>
	}
	*dst++ = foo & 0xff;
1000f1e8:	7023      	strb	r3, [r4, #0]
}
1000f1ea:	b00a      	add	sp, #40	@ 0x28
1000f1ec:	bd70      	pop	{r4, r5, r6, pc}
1000f1ee:	bf00      	nop

1000f1f0 <fld_scale>:
/*
 * fld_scale - multiply e by scalar s and reduce modulo q.
 */
void
fld_scale(fld_t dst, const fld_t e, limb_t x)
{
1000f1f0:	b570      	push	{r4, r5, r6, lr}
	llimb_t tmp;
	int i;

	for (tmp = 0, i = 0; i < FLD_LIMB_NUM; i += 2) {
1000f1f2:	f04f 0e00 	mov.w	lr, #0
1000f1f6:	4673      	mov	r3, lr
1000f1f8:	46f4      	mov	ip, lr
1000f1fa:	1d0d      	adds	r5, r1, #4
1000f1fc:	1d04      	adds	r4, r0, #4
		tmp = (tmp >> FLD_LIMB_BITS(0)) + (llimb_t) x*e[i];
1000f1fe:	f851 602e 	ldr.w	r6, [r1, lr, lsl #2]
1000f202:	0e5b      	lsrs	r3, r3, #25
1000f204:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
1000f208:	ea4f 6c6c 	mov.w	ip, ip, asr #25
1000f20c:	fbc6 3c02 	smlal	r3, ip, r6, r2
		dst[i] = tmp & FLD_LIMB_MASK(1);
1000f210:	f023 467c 	bic.w	r6, r3, #4227858432	@ 0xfc000000
1000f214:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
		tmp = (tmp >> FLD_LIMB_BITS(1)) + ((llimb_t) x*e[i+1]);
1000f218:	0e9b      	lsrs	r3, r3, #26
1000f21a:	f855 602e 	ldr.w	r6, [r5, lr, lsl #2]
1000f21e:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
1000f222:	ea4f 6cac 	mov.w	ip, ip, asr #26
1000f226:	fbc6 3c02 	smlal	r3, ip, r6, r2
		dst[i+1] = tmp & FLD_LIMB_MASK(0);
1000f22a:	f023 467e 	bic.w	r6, r3, #4261412864	@ 0xfe000000
1000f22e:	f844 602e 	str.w	r6, [r4, lr, lsl #2]
	for (tmp = 0, i = 0; i < FLD_LIMB_NUM; i += 2) {
1000f232:	f10e 0e02 	add.w	lr, lr, #2
1000f236:	f1be 0f0a 	cmp.w	lr, #10
1000f23a:	d1e0      	bne.n	1000f1fe <fld_scale+0xe>
	}
	dst[0] += 19*(tmp >> FLD_LIMB_BITS(0));
1000f23c:	0e5b      	lsrs	r3, r3, #25
1000f23e:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
1000f242:	6802      	ldr	r2, [r0, #0]
1000f244:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
1000f248:	eb03 0341 	add.w	r3, r3, r1, lsl #1
1000f24c:	441a      	add	r2, r3
1000f24e:	6002      	str	r2, [r0, #0]
}
1000f250:	bd70      	pop	{r4, r5, r6, pc}
1000f252:	bf00      	nop

1000f254 <fld_mul>:
/*
 * fld_mul - multiply a with b and reduce modulo q.
 */
void
fld_mul(fld_t dst, const fld_t a, const fld_t b)
{
1000f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f258:	b0ad      	sub	sp, #180	@ 0xb4
	llimb_t tmp;
	llimb_t c[10];

	c[0] = (llimb_t)a[0]*b[0];
1000f25a:	680d      	ldr	r5, [r1, #0]
1000f25c:	9504      	str	r5, [sp, #16]
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
1000f25e:	684d      	ldr	r5, [r1, #4]
1000f260:	9501      	str	r5, [sp, #4]
	c[2] = (llimb_t)a[0]*b[2] + (llimb_t)2*a[1]*b[1] + (llimb_t)a[2]*b[0];
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
		+ (llimb_t)a[3]*b[0];
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
		+ (llimb_t)2*a[3]*b[1] + (llimb_t)a[4]*b[0];
	c[5] = (llimb_t)a[0]*b[5] + (llimb_t)a[1]*b[4] + (llimb_t)a[2]*b[3] 
1000f262:	6955      	ldr	r5, [r2, #20]
1000f264:	950a      	str	r5, [sp, #40]	@ 0x28
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
1000f266:	694d      	ldr	r5, [r1, #20]
1000f268:	950b      	str	r5, [sp, #44]	@ 0x2c
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
1000f26a:	6995      	ldr	r5, [r2, #24]
1000f26c:	9502      	str	r5, [sp, #8]
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
1000f26e:	68d5      	ldr	r5, [r2, #12]
1000f270:	9507      	str	r5, [sp, #28]
		+ (llimb_t)2*a[3]*b[3] + (llimb_t)a[4]*b[2] + (llimb_t)2*a[5]*b[1]
		+ (llimb_t)a[6]*b[0];
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
1000f272:	69cd      	ldr	r5, [r1, #28]
	c[0] = (llimb_t)a[0]*b[0];
1000f274:	6813      	ldr	r3, [r2, #0]
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
1000f276:	950d      	str	r5, [sp, #52]	@ 0x34
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1000f278:	6915      	ldr	r5, [r2, #16]
	c[0] = (llimb_t)a[0]*b[0];
1000f27a:	9305      	str	r3, [sp, #20]
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1000f27c:	9509      	str	r5, [sp, #36]	@ 0x24
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
1000f27e:	6a13      	ldr	r3, [r2, #32]
		+ (llimb_t)a[6]*b[0];
1000f280:	698d      	ldr	r5, [r1, #24]
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
1000f282:	930f      	str	r3, [sp, #60]	@ 0x3c
		+ (llimb_t)a[6]*b[0];
1000f284:	950c      	str	r5, [sp, #48]	@ 0x30
		+ (llimb_t)a[3]*b[0];
1000f286:	68cb      	ldr	r3, [r1, #12]
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
1000f288:	6855      	ldr	r5, [r2, #4]
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
	c[9] = (llimb_t)a[0]*b[9] + (llimb_t)a[1]*b[8] + (llimb_t)a[2]*b[7]
1000f28a:	6a56      	ldr	r6, [r2, #36]	@ 0x24
	c[2] = (llimb_t)a[0]*b[2] + (llimb_t)2*a[1]*b[1] + (llimb_t)a[2]*b[0];
1000f28c:	688f      	ldr	r7, [r1, #8]
{
1000f28e:	9014      	str	r0, [sp, #80]	@ 0x50
		+ (llimb_t)a[3]*b[0];
1000f290:	9308      	str	r3, [sp, #32]
		+ (llimb_t)2*a[3]*b[1] + (llimb_t)a[4]*b[0];
1000f292:	6908      	ldr	r0, [r1, #16]
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
1000f294:	69d3      	ldr	r3, [r2, #28]
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
1000f296:	9506      	str	r5, [sp, #24]
	c[2] = (llimb_t)a[0]*b[2] + (llimb_t)2*a[1]*b[1] + (llimb_t)a[2]*b[0];
1000f298:	6894      	ldr	r4, [r2, #8]
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
		+ (llimb_t)a[9]*b[0];
1000f29a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
1000f29c:	6a09      	ldr	r1, [r1, #32]
1000f29e:	9103      	str	r1, [sp, #12]

	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f2a0:	9d01      	ldr	r5, [sp, #4]
		+ (llimb_t)a[9]*b[0];
1000f2a2:	920e      	str	r2, [sp, #56]	@ 0x38
		      + (llimb_t)a[9]*b[6]);
	c[6] += 19 * ((llimb_t)2*a[7]*b[9] + (llimb_t)a[8]*b[8] + (llimb_t)2*a[9]*b[7]);
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
	c[8] += 19 * ((llimb_t)2*a[9]*b[9]);

	CARRY(c, c, tmp, 0);
1000f2a4:	2100      	movs	r1, #0
1000f2a6:	e9cd 1115 	strd	r1, r1, [sp, #84]	@ 0x54
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f2aa:	4639      	mov	r1, r7
1000f2ac:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
		      + (llimb_t)a[4]*b[6] + (llimb_t)2*a[5]*b[5] + (llimb_t)a[6]*b[4]
1000f2ae:	9011      	str	r0, [sp, #68]	@ 0x44
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f2b0:	4632      	mov	r2, r6
1000f2b2:	fb85 6506 	smull	r6, r5, r5, r6
1000f2b6:	fb81 e707 	smull	lr, r7, r1, r7
1000f2ba:	19b6      	adds	r6, r6, r6
1000f2bc:	416d      	adcs	r5, r5
1000f2be:	eb16 060e 	adds.w	r6, r6, lr
1000f2c2:	eb45 0507 	adc.w	r5, r5, r7
1000f2c6:	9f08      	ldr	r7, [sp, #32]
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f2c8:	9210      	str	r2, [sp, #64]	@ 0x40
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f2ca:	fb87 7e03 	smull	r7, lr, r7, r3
1000f2ce:	19ff      	adds	r7, r7, r7
1000f2d0:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f2d4:	19f6      	adds	r6, r6, r7
		      + (llimb_t)a[4]*b[6] + (llimb_t)2*a[5]*b[5] + (llimb_t)a[6]*b[4]
1000f2d6:	9f02      	ldr	r7, [sp, #8]
		      + (llimb_t)a[8]*b[3] + (llimb_t)a[9]*b[2]);
1000f2d8:	9412      	str	r4, [sp, #72]	@ 0x48
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f2da:	eb45 050e 	adc.w	r5, r5, lr
		      + (llimb_t)a[4]*b[6] + (llimb_t)2*a[5]*b[5] + (llimb_t)a[6]*b[4]
1000f2de:	fbc0 6507 	smlal	r6, r5, r0, r7
1000f2e2:	e9dd 700a 	ldrd	r7, r0, [sp, #40]	@ 0x28
1000f2e6:	fb87 7e00 	smull	r7, lr, r7, r0
1000f2ea:	19ff      	adds	r7, r7, r7
1000f2ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
1000f2ee:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f2f2:	19f6      	adds	r6, r6, r7
1000f2f4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1000f2f6:	eb45 050e 	adc.w	r5, r5, lr
1000f2fa:	fbc7 6500 	smlal	r6, r5, r7, r0
		      + (llimb_t)2*a[7]*b[3] + (llimb_t)a[8]*b[2] + (llimb_t)2*a[9]*b[1]);
1000f2fe:	980d      	ldr	r0, [sp, #52]	@ 0x34
1000f300:	9f07      	ldr	r7, [sp, #28]
1000f302:	fb87 7e00 	smull	r7, lr, r7, r0
1000f306:	19ff      	adds	r7, r7, r7
1000f308:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f30c:	19f6      	adds	r6, r6, r7
1000f30e:	46b3      	mov	fp, r6
1000f310:	9e03      	ldr	r6, [sp, #12]
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f312:	9f08      	ldr	r7, [sp, #32]
1000f314:	9811      	ldr	r0, [sp, #68]	@ 0x44
		      + (llimb_t)2*a[7]*b[3] + (llimb_t)a[8]*b[2] + (llimb_t)2*a[9]*b[1]);
1000f316:	eb45 050e 	adc.w	r5, r5, lr
1000f31a:	fbc4 b506 	smlal	fp, r5, r4, r6
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f31e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
1000f320:	fb87 e806 	smull	lr, r8, r7, r6
1000f324:	fbc1 e802 	smlal	lr, r8, r1, r2
		      + (llimb_t)a[5]*b[6] + (llimb_t)a[6]*b[5] + (llimb_t)a[7]*b[4]
1000f328:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1000f32a:	9f02      	ldr	r7, [sp, #8]
1000f32c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f32e:	fbc0 e803 	smlal	lr, r8, r0, r3
		      + (llimb_t)a[5]*b[6] + (llimb_t)a[6]*b[5] + (llimb_t)a[7]*b[4]
1000f332:	fbc6 e807 	smlal	lr, r8, r6, r7
1000f336:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1000f338:	fbc6 e802 	smlal	lr, r8, r6, r2
1000f33c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1000f33e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1000f340:	fbc6 e802 	smlal	lr, r8, r6, r2
		      + (llimb_t)a[8]*b[3] + (llimb_t)a[9]*b[2]);
1000f344:	9e03      	ldr	r6, [sp, #12]
1000f346:	9a07      	ldr	r2, [sp, #28]
1000f348:	fbc2 e806 	smlal	lr, r8, r2, r6
1000f34c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
		      + (llimb_t)2*a[7]*b[3] + (llimb_t)a[8]*b[2] + (llimb_t)2*a[9]*b[1]);
1000f34e:	9f06      	ldr	r7, [sp, #24]
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f350:	9313      	str	r3, [sp, #76]	@ 0x4c
		      + (llimb_t)2*a[7]*b[3] + (llimb_t)a[8]*b[2] + (llimb_t)2*a[9]*b[1]);
1000f352:	fb87 9702 	smull	r9, r7, r7, r2
1000f356:	eb19 0909 	adds.w	r9, r9, r9
1000f35a:	417f      	adcs	r7, r7
1000f35c:	eb1b 0909 	adds.w	r9, fp, r9
1000f360:	eb45 0507 	adc.w	r5, r5, r7
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f364:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
1000f368:	ea4f 07c9 	mov.w	r7, r9, lsl #3
1000f36c:	eb17 0709 	adds.w	r7, r7, r9
1000f370:	ea4b 7b59 	orr.w	fp, fp, r9, lsr #29
1000f374:	eb45 0b0b 	adc.w	fp, r5, fp
1000f378:	19ff      	adds	r7, r7, r7
		      + (llimb_t)a[8]*b[3] + (llimb_t)a[9]*b[2]);
1000f37a:	fbc4 e802 	smlal	lr, r8, r4, r2
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f37e:	eb4b 0b0b 	adc.w	fp, fp, fp
1000f382:	9c04      	ldr	r4, [sp, #16]
1000f384:	9a05      	ldr	r2, [sp, #20]
1000f386:	eb17 0709 	adds.w	r7, r7, r9
1000f38a:	eb45 0b0b 	adc.w	fp, r5, fp
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
1000f38e:	9d01      	ldr	r5, [sp, #4]
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f390:	fbc4 7b02 	smlal	r7, fp, r4, r2
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f394:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
1000f398:	ea4f 06ce 	mov.w	r6, lr, lsl #3
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
1000f39c:	e9cd 7b18 	strd	r7, fp, [sp, #96]	@ 0x60
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f3a0:	eb16 060e 	adds.w	r6, r6, lr
1000f3a4:	ea4a 7a5e 	orr.w	sl, sl, lr, lsr #29
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
1000f3a8:	fb82 5705 	smull	r5, r7, r2, r5
1000f3ac:	4622      	mov	r2, r4
1000f3ae:	9c06      	ldr	r4, [sp, #24]
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f3b0:	eb48 0a0a 	adc.w	sl, r8, sl
1000f3b4:	19b6      	adds	r6, r6, r6
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
1000f3b6:	fbc2 5704 	smlal	r5, r7, r2, r4
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f3ba:	eb4a 0a0a 	adc.w	sl, sl, sl
1000f3be:	eb16 060e 	adds.w	r6, r6, lr
1000f3c2:	eb48 0a0a 	adc.w	sl, r8, sl
1000f3c6:	1976      	adds	r6, r6, r5
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1000f3c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1000f3ca:	9d08      	ldr	r5, [sp, #32]
		      + (llimb_t)2*a[9]*b[3]);
1000f3cc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1000f3ce:	eb4a 0707 	adc.w	r7, sl, r7
1000f3d2:	e9cd 671a 	strd	r6, r7, [sp, #104]	@ 0x68
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1000f3d6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
1000f3d8:	fb85 5e02 	smull	r5, lr, r5, r2
1000f3dc:	fb80 7606 	smull	r7, r6, r0, r6
1000f3e0:	196d      	adds	r5, r5, r5
1000f3e2:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f3e6:	19ed      	adds	r5, r5, r7
1000f3e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
		      + (llimb_t)a[6]*b[6] + (llimb_t)2*a[7]*b[5] + (llimb_t)a[8]*b[4]
1000f3ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1000f3ec:	eb4e 0e06 	adc.w	lr, lr, r6
1000f3f0:	fb87 6703 	smull	r6, r7, r7, r3
1000f3f4:	19b6      	adds	r6, r6, r6
1000f3f6:	417f      	adcs	r7, r7
1000f3f8:	19ad      	adds	r5, r5, r6
		      + (llimb_t)a[6]*b[6] + (llimb_t)2*a[7]*b[5] + (llimb_t)a[8]*b[4]
1000f3fa:	9e02      	ldr	r6, [sp, #8]
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1000f3fc:	eb4e 0e07 	adc.w	lr, lr, r7
		      + (llimb_t)a[6]*b[6] + (llimb_t)2*a[7]*b[5] + (llimb_t)a[8]*b[4]
1000f400:	fbc6 5e00 	smlal	r5, lr, r6, r0
1000f404:	980d      	ldr	r0, [sp, #52]	@ 0x34
1000f406:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1000f408:	fb86 6700 	smull	r6, r7, r6, r0
1000f40c:	19b6      	adds	r6, r6, r6
1000f40e:	417f      	adcs	r7, r7
1000f410:	19ad      	adds	r5, r5, r6
1000f412:	eb4e 0e07 	adc.w	lr, lr, r7
1000f416:	9e03      	ldr	r6, [sp, #12]
1000f418:	9f09      	ldr	r7, [sp, #36]	@ 0x24
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f41a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
		      + (llimb_t)a[6]*b[6] + (llimb_t)2*a[7]*b[5] + (llimb_t)a[8]*b[4]
1000f41c:	fbc7 5e06 	smlal	r5, lr, r7, r6
		      + (llimb_t)2*a[9]*b[3]);
1000f420:	9f07      	ldr	r7, [sp, #28]
1000f422:	fb87 7604 	smull	r7, r6, r7, r4
1000f426:	19ff      	adds	r7, r7, r7
1000f428:	4176      	adcs	r6, r6
1000f42a:	19ed      	adds	r5, r5, r7
1000f42c:	eb4e 0e06 	adc.w	lr, lr, r6
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1000f430:	ea4f 06ce 	mov.w	r6, lr, lsl #3
1000f434:	00ef      	lsls	r7, r5, #3
1000f436:	197f      	adds	r7, r7, r5
1000f438:	ea46 7655 	orr.w	r6, r6, r5, lsr #29
1000f43c:	eb4e 0606 	adc.w	r6, lr, r6
1000f440:	19ff      	adds	r7, r7, r7
1000f442:	4176      	adcs	r6, r6
1000f444:	197f      	adds	r7, r7, r5
1000f446:	eb4e 0e06 	adc.w	lr, lr, r6
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f44a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
1000f44c:	fb80 5906 	smull	r5, r9, r0, r6
1000f450:	9811      	ldr	r0, [sp, #68]	@ 0x44
1000f452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000f454:	fbc0 5902 	smlal	r5, r9, r0, r2
1000f458:	fbc6 5903 	smlal	r5, r9, r6, r3
		      + (llimb_t)a[7]*b[6] + (llimb_t)a[8]*b[5] + (llimb_t)a[9]*b[4]);
1000f45c:	9b02      	ldr	r3, [sp, #8]
1000f45e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1000f460:	fbc3 5906 	smlal	r5, r9, r3, r6
1000f464:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1000f466:	9b03      	ldr	r3, [sp, #12]
1000f468:	fbc6 5903 	smlal	r5, r9, r6, r3
1000f46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000f46e:	fbc3 5904 	smlal	r5, r9, r3, r4
	c[2] = (llimb_t)a[0]*b[2] + (llimb_t)2*a[1]*b[1] + (llimb_t)a[2]*b[0];
1000f472:	9c06      	ldr	r4, [sp, #24]
1000f474:	9b01      	ldr	r3, [sp, #4]
1000f476:	9a05      	ldr	r2, [sp, #20]
1000f478:	fb84 8b03 	smull	r8, fp, r4, r3
1000f47c:	eb18 0808 	adds.w	r8, r8, r8
1000f480:	9c12      	ldr	r4, [sp, #72]	@ 0x48
1000f482:	9b04      	ldr	r3, [sp, #16]
1000f484:	eb4b 0b0b 	adc.w	fp, fp, fp
1000f488:	fbc3 8b04 	smlal	r8, fp, r3, r4
1000f48c:	fbc2 8b01 	smlal	r8, fp, r2, r1
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1000f490:	eb17 0708 	adds.w	r7, r7, r8
1000f494:	eb4e 0e0b 	adc.w	lr, lr, fp
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f498:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
1000f49c:	00ee      	lsls	r6, r5, #3
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1000f49e:	e9cd 7e1c 	strd	r7, lr, [sp, #112]	@ 0x70
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f4a2:	1976      	adds	r6, r6, r5
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
1000f4a4:	9f01      	ldr	r7, [sp, #4]
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f4a6:	ea4a 7a55 	orr.w	sl, sl, r5, lsr #29
1000f4aa:	eb49 0a0a 	adc.w	sl, r9, sl
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
1000f4ae:	461a      	mov	r2, r3
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f4b0:	19b6      	adds	r6, r6, r6
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
1000f4b2:	9b07      	ldr	r3, [sp, #28]
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f4b4:	eb4a 0a0a 	adc.w	sl, sl, sl
1000f4b8:	1976      	adds	r6, r6, r5
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
1000f4ba:	fb87 5704 	smull	r5, r7, r7, r4
1000f4be:	fbc2 5703 	smlal	r5, r7, r2, r3
1000f4c2:	9b06      	ldr	r3, [sp, #24]
		+ (llimb_t)a[3]*b[0];
1000f4c4:	9a05      	ldr	r2, [sp, #20]
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
1000f4c6:	fbc3 5701 	smlal	r5, r7, r3, r1
		+ (llimb_t)a[3]*b[0];
1000f4ca:	9b08      	ldr	r3, [sp, #32]
1000f4cc:	fbc2 5703 	smlal	r5, r7, r2, r3
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
1000f4d0:	eb49 0a0a 	adc.w	sl, r9, sl
1000f4d4:	1976      	adds	r6, r6, r5
1000f4d6:	eb4a 0707 	adc.w	r7, sl, r7
1000f4da:	e9cd 671e 	strd	r6, r7, [sp, #120]	@ 0x78
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
1000f4de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
1000f4e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
1000f4e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1000f4e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1000f4e6:	fb87 5706 	smull	r5, r7, r7, r6
1000f4ea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
1000f4ec:	196d      	adds	r5, r5, r5
1000f4ee:	fb82 e606 	smull	lr, r6, r2, r6
1000f4f2:	417f      	adcs	r7, r7
1000f4f4:	eb15 050e 	adds.w	r5, r5, lr
1000f4f8:	eb47 0706 	adc.w	r7, r7, r6
1000f4fc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1000f4fe:	fb83 6e06 	smull	r6, lr, r3, r6
1000f502:	19b6      	adds	r6, r6, r6
1000f504:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f508:	19ad      	adds	r5, r5, r6
		      + (llimb_t)a[8]*b[6] + (llimb_t)2*a[9]*b[5]);
1000f50a:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
1000f50e:	eb47 070e 	adc.w	r7, r7, lr
		      + (llimb_t)a[8]*b[6] + (llimb_t)2*a[9]*b[5]);
1000f512:	fbc6 5702 	smlal	r5, r7, r6, r2
1000f516:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1000f518:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1000f51a:	9b01      	ldr	r3, [sp, #4]
		      + (llimb_t)a[8]*b[6] + (llimb_t)2*a[9]*b[5]);
1000f51c:	fb86 e602 	smull	lr, r6, r6, r2
1000f520:	eb1e 0e0e 	adds.w	lr, lr, lr
1000f524:	4176      	adcs	r6, r6
1000f526:	eb15 050e 	adds.w	r5, r5, lr
1000f52a:	eb47 0706 	adc.w	r7, r7, r6
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
1000f52e:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
1000f532:	00ee      	lsls	r6, r5, #3
1000f534:	1976      	adds	r6, r6, r5
1000f536:	ea4e 7e55 	orr.w	lr, lr, r5, lsr #29
1000f53a:	eb47 0e0e 	adc.w	lr, r7, lr
1000f53e:	19b6      	adds	r6, r6, r6
1000f540:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f544:	1976      	adds	r6, r6, r5
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1000f546:	9d07      	ldr	r5, [sp, #28]
1000f548:	9a04      	ldr	r2, [sp, #16]
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
1000f54a:	eb47 070e 	adc.w	r7, r7, lr
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1000f54e:	fb83 5e05 	smull	r5, lr, r3, r5
1000f552:	196d      	adds	r5, r5, r5
1000f554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000f556:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f55a:	fbc2 5e03 	smlal	r5, lr, r2, r3
		+ (llimb_t)2*a[3]*b[1] + (llimb_t)a[4]*b[0];
1000f55e:	9a06      	ldr	r2, [sp, #24]
1000f560:	9b08      	ldr	r3, [sp, #32]
1000f562:	fb82 8903 	smull	r8, r9, r2, r3
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1000f566:	fbc4 5e01 	smlal	r5, lr, r4, r1
		+ (llimb_t)2*a[3]*b[1] + (llimb_t)a[4]*b[0];
1000f56a:	eb18 0808 	adds.w	r8, r8, r8
1000f56e:	9a05      	ldr	r2, [sp, #20]
1000f570:	eb49 0909 	adc.w	r9, r9, r9
1000f574:	eb15 0508 	adds.w	r5, r5, r8
1000f578:	eb4e 0e09 	adc.w	lr, lr, r9
1000f57c:	fbc2 5e00 	smlal	r5, lr, r2, r0
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
1000f580:	1976      	adds	r6, r6, r5
1000f582:	eb47 070e 	adc.w	r7, r7, lr
1000f586:	e9cd 6720 	strd	r6, r7, [sp, #128]	@ 0x80
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1000f58a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
1000f58c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1000f58e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1000f590:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1000f592:	fb87 5605 	smull	r5, r6, r7, r5
1000f596:	9f10      	ldr	r7, [sp, #64]	@ 0x40
1000f598:	fbc2 5607 	smlal	r5, r6, r2, r7
1000f59c:	9f03      	ldr	r7, [sp, #12]
		      + (llimb_t)a[9]*b[6]);
1000f59e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1000f5a0:	fbc3 5607 	smlal	r5, r6, r3, r7
		      + (llimb_t)a[9]*b[6]);
1000f5a4:	9f02      	ldr	r7, [sp, #8]
	c[5] = (llimb_t)a[0]*b[5] + (llimb_t)a[1]*b[4] + (llimb_t)a[2]*b[3] 
1000f5a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
		      + (llimb_t)a[9]*b[6]);
1000f5a8:	fbc7 5602 	smlal	r5, r6, r7, r2
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1000f5ac:	00f7      	lsls	r7, r6, #3
1000f5ae:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
1000f5b2:	eb1e 0e05 	adds.w	lr, lr, r5
1000f5b6:	ea47 7755 	orr.w	r7, r7, r5, lsr #29
1000f5ba:	eb46 0707 	adc.w	r7, r6, r7
1000f5be:	eb1e 0e0e 	adds.w	lr, lr, lr
1000f5c2:	417f      	adcs	r7, r7
1000f5c4:	eb1e 0e05 	adds.w	lr, lr, r5
1000f5c8:	eb46 0607 	adc.w	r6, r6, r7
	c[5] = (llimb_t)a[0]*b[5] + (llimb_t)a[1]*b[4] + (llimb_t)a[2]*b[3] 
1000f5cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
1000f5ce:	9f01      	ldr	r7, [sp, #4]
1000f5d0:	9a04      	ldr	r2, [sp, #16]
1000f5d2:	fb87 5705 	smull	r5, r7, r7, r5
1000f5d6:	fbc2 5703 	smlal	r5, r7, r2, r3
1000f5da:	9a07      	ldr	r2, [sp, #28]
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
1000f5dc:	9b08      	ldr	r3, [sp, #32]
	c[5] = (llimb_t)a[0]*b[5] + (llimb_t)a[1]*b[4] + (llimb_t)a[2]*b[3] 
1000f5de:	fbc1 5702 	smlal	r5, r7, r1, r2
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
1000f5e2:	fbc4 5703 	smlal	r5, r7, r4, r3
1000f5e6:	9b06      	ldr	r3, [sp, #24]
1000f5e8:	9a05      	ldr	r2, [sp, #20]
1000f5ea:	fbc3 5700 	smlal	r5, r7, r3, r0
1000f5ee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1000f5f0:	fbc2 5700 	smlal	r5, r7, r2, r0
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1000f5f4:	eb15 0e0e 	adds.w	lr, r5, lr
1000f5f8:	eb47 0506 	adc.w	r5, r7, r6
1000f5fc:	9523      	str	r5, [sp, #140]	@ 0x8c
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
1000f5fe:	9e01      	ldr	r6, [sp, #4]
1000f600:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1000f602:	9a04      	ldr	r2, [sp, #16]
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1000f604:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
1000f608:	fb86 5705 	smull	r5, r7, r6, r5
1000f60c:	196d      	adds	r5, r5, r5
1000f60e:	9e02      	ldr	r6, [sp, #8]
		+ (llimb_t)2*a[3]*b[3] + (llimb_t)a[4]*b[2] + (llimb_t)2*a[5]*b[1]
1000f610:	9811      	ldr	r0, [sp, #68]	@ 0x44
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
1000f612:	417f      	adcs	r7, r7
1000f614:	fbc2 5706 	smlal	r5, r7, r2, r6
1000f618:	9e09      	ldr	r6, [sp, #36]	@ 0x24
		+ (llimb_t)a[6]*b[0];
1000f61a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
1000f61c:	fbc1 5706 	smlal	r5, r7, r1, r6
		+ (llimb_t)2*a[3]*b[3] + (llimb_t)a[4]*b[2] + (llimb_t)2*a[5]*b[1]
1000f620:	e9dd 6307 	ldrd	r6, r3, [sp, #28]
1000f624:	fb86 6e03 	smull	r6, lr, r6, r3
1000f628:	19b6      	adds	r6, r6, r6
1000f62a:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f62e:	19ad      	adds	r5, r5, r6
1000f630:	eb47 070e 	adc.w	r7, r7, lr
1000f634:	fbc4 5700 	smlal	r5, r7, r4, r0
1000f638:	9e06      	ldr	r6, [sp, #24]
1000f63a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1000f63c:	fb86 6e00 	smull	r6, lr, r6, r0
1000f640:	19b6      	adds	r6, r6, r6
1000f642:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f646:	19ad      	adds	r5, r5, r6
		+ (llimb_t)a[6]*b[0];
1000f648:	9e05      	ldr	r6, [sp, #20]
	c[6] += 19 * ((llimb_t)2*a[7]*b[9] + (llimb_t)a[8]*b[8] + (llimb_t)2*a[9]*b[7]);
1000f64a:	980d      	ldr	r0, [sp, #52]	@ 0x34
		+ (llimb_t)2*a[3]*b[3] + (llimb_t)a[4]*b[2] + (llimb_t)2*a[5]*b[1]
1000f64c:	eb47 070e 	adc.w	r7, r7, lr
		+ (llimb_t)a[6]*b[0];
1000f650:	fbc6 5702 	smlal	r5, r7, r6, r2
	c[6] += 19 * ((llimb_t)2*a[7]*b[9] + (llimb_t)a[8]*b[8] + (llimb_t)2*a[9]*b[7]);
1000f654:	9e10      	ldr	r6, [sp, #64]	@ 0x40
1000f656:	9b03      	ldr	r3, [sp, #12]
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
1000f658:	9a04      	ldr	r2, [sp, #16]
	c[6] += 19 * ((llimb_t)2*a[7]*b[9] + (llimb_t)a[8]*b[8] + (llimb_t)2*a[9]*b[7]);
1000f65a:	fb80 6806 	smull	r6, r8, r0, r6
1000f65e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1000f660:	19b6      	adds	r6, r6, r6
1000f662:	fb80 9e03 	smull	r9, lr, r0, r3
1000f666:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1000f668:	980e      	ldr	r0, [sp, #56]	@ 0x38
1000f66a:	eb48 0808 	adc.w	r8, r8, r8
1000f66e:	eb16 0609 	adds.w	r6, r6, r9
1000f672:	eb48 080e 	adc.w	r8, r8, lr
1000f676:	fb83 9e00 	smull	r9, lr, r3, r0
1000f67a:	eb19 0909 	adds.w	r9, r9, r9
1000f67e:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f682:	eb16 0609 	adds.w	r6, r6, r9
1000f686:	eb48 080e 	adc.w	r8, r8, lr
1000f68a:	ea4f 09c8 	mov.w	r9, r8, lsl #3
1000f68e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
1000f692:	eb1e 0e06 	adds.w	lr, lr, r6
1000f696:	ea49 7956 	orr.w	r9, r9, r6, lsr #29
1000f69a:	eb48 0909 	adc.w	r9, r8, r9
1000f69e:	eb1e 0e0e 	adds.w	lr, lr, lr
1000f6a2:	eb49 0909 	adc.w	r9, r9, r9
1000f6a6:	eb1e 0e06 	adds.w	lr, lr, r6
1000f6aa:	eb48 0809 	adc.w	r8, r8, r9
1000f6ae:	eb15 0a0e 	adds.w	sl, r5, lr
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
1000f6b2:	e9dd 6501 	ldrd	r6, r5, [sp, #4]
	c[6] += 19 * ((llimb_t)2*a[7]*b[9] + (llimb_t)a[8]*b[8] + (llimb_t)2*a[9]*b[7]);
1000f6b6:	eb47 0b08 	adc.w	fp, r7, r8
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
1000f6ba:	fb86 5605 	smull	r5, r6, r6, r5
1000f6be:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
1000f6c0:	9811      	ldr	r0, [sp, #68]	@ 0x44
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
1000f6c2:	fbc2 5603 	smlal	r5, r6, r2, r3
1000f6c6:	fbc1 5607 	smlal	r5, r6, r1, r7
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
1000f6ca:	e9dd 7208 	ldrd	r7, r2, [sp, #32]
1000f6ce:	fbc7 5602 	smlal	r5, r6, r7, r2
1000f6d2:	9f07      	ldr	r7, [sp, #28]
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
1000f6d4:	9a04      	ldr	r2, [sp, #16]
1000f6d6:	9104      	str	r1, [sp, #16]
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
1000f6d8:	fbc7 5600 	smlal	r5, r6, r7, r0
1000f6dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
1000f6de:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
1000f6e0:	fbc4 5600 	smlal	r5, r6, r4, r0
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
1000f6e4:	9806      	ldr	r0, [sp, #24]
1000f6e6:	fbc0 5607 	smlal	r5, r6, r0, r7
1000f6ea:	9f05      	ldr	r7, [sp, #20]
1000f6ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
1000f6ee:	fbc7 5600 	smlal	r5, r6, r7, r0
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
1000f6f2:	e9dd 400e 	ldrd	r4, r0, [sp, #56]	@ 0x38
1000f6f6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
1000f6f8:	fb80 e904 	smull	lr, r9, r0, r4
1000f6fc:	9c03      	ldr	r4, [sp, #12]
1000f6fe:	fbc4 e907 	smlal	lr, r9, r4, r7
1000f702:	ea4f 08c9 	mov.w	r8, r9, lsl #3
1000f706:	ea4f 07ce 	mov.w	r7, lr, lsl #3
1000f70a:	eb17 070e 	adds.w	r7, r7, lr
1000f70e:	ea48 785e 	orr.w	r8, r8, lr, lsr #29
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
1000f712:	9c01      	ldr	r4, [sp, #4]
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
1000f714:	eb49 0808 	adc.w	r8, r9, r8
1000f718:	19ff      	adds	r7, r7, r7
1000f71a:	eb48 0808 	adc.w	r8, r8, r8
1000f71e:	eb17 070e 	adds.w	r7, r7, lr
1000f722:	eb49 0908 	adc.w	r9, r9, r8
1000f726:	19ed      	adds	r5, r5, r7
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
1000f728:	fb84 7e03 	smull	r7, lr, r4, r3
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
1000f72c:	eb46 0609 	adc.w	r6, r6, r9
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
1000f730:	19ff      	adds	r7, r7, r7
1000f732:	eb4e 0e0e 	adc.w	lr, lr, lr
1000f736:	fbc2 7e00 	smlal	r7, lr, r2, r0
1000f73a:	4604      	mov	r4, r0
1000f73c:	9802      	ldr	r0, [sp, #8]
1000f73e:	fbc1 7e00 	smlal	r7, lr, r1, r0
	c[9] = (llimb_t)a[0]*b[9] + (llimb_t)a[1]*b[8] + (llimb_t)a[2]*b[7]
1000f742:	9801      	ldr	r0, [sp, #4]
1000f744:	9910      	ldr	r1, [sp, #64]	@ 0x40
1000f746:	fb80 0404 	smull	r0, r4, r0, r4
1000f74a:	fbc2 0401 	smlal	r0, r4, r2, r1
1000f74e:	9904      	ldr	r1, [sp, #16]
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
1000f750:	9a11      	ldr	r2, [sp, #68]	@ 0x44
	c[9] = (llimb_t)a[0]*b[9] + (llimb_t)a[1]*b[8] + (llimb_t)a[2]*b[7]
1000f752:	fbc1 0403 	smlal	r0, r4, r1, r3
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
1000f756:	9908      	ldr	r1, [sp, #32]
1000f758:	9b02      	ldr	r3, [sp, #8]
1000f75a:	fbc1 0403 	smlal	r0, r4, r1, r3
1000f75e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1000f760:	fb81 8903 	smull	r8, r9, r1, r3
1000f764:	eb18 0808 	adds.w	r8, r8, r8
1000f768:	9909      	ldr	r1, [sp, #36]	@ 0x24
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
1000f76a:	fbc2 0403 	smlal	r0, r4, r2, r3
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1000f76e:	eb49 0909 	adc.w	r9, r9, r9
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
1000f772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1000f774:	eb17 0708 	adds.w	r7, r7, r8
1000f778:	eb4e 0e09 	adc.w	lr, lr, r9
1000f77c:	fbc1 7e02 	smlal	r7, lr, r1, r2
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
1000f780:	fbc1 0403 	smlal	r0, r4, r1, r3
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
1000f784:	9907      	ldr	r1, [sp, #28]
1000f786:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1000f788:	fb81 8903 	smull	r8, r9, r1, r3
1000f78c:	eb18 0808 	adds.w	r8, r8, r8
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
1000f790:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1000f792:	fbc1 0402 	smlal	r0, r4, r1, r2
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1000f796:	eb49 0909 	adc.w	r9, r9, r9
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
1000f79a:	9912      	ldr	r1, [sp, #72]	@ 0x48
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1000f79c:	eb17 0708 	adds.w	r7, r7, r8
1000f7a0:	eb4e 0e09 	adc.w	lr, lr, r9
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
1000f7a4:	fbc1 7e02 	smlal	r7, lr, r1, r2
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
1000f7a8:	fbc1 0403 	smlal	r0, r4, r1, r3
1000f7ac:	9906      	ldr	r1, [sp, #24]
1000f7ae:	9a03      	ldr	r2, [sp, #12]
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
1000f7b0:	fb81 8903 	smull	r8, r9, r1, r3
1000f7b4:	eb18 0808 	adds.w	r8, r8, r8
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
1000f7b8:	fbc1 0402 	smlal	r0, r4, r1, r2
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
1000f7bc:	9b03      	ldr	r3, [sp, #12]
1000f7be:	9a05      	ldr	r2, [sp, #20]
1000f7c0:	eb49 0909 	adc.w	r9, r9, r9
1000f7c4:	eb17 0708 	adds.w	r7, r7, r8
1000f7c8:	eb4e 0e09 	adc.w	lr, lr, r9
1000f7cc:	fbc2 7e03 	smlal	r7, lr, r2, r3
		+ (llimb_t)a[9]*b[0];
1000f7d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1000f7d2:	fbc2 0403 	smlal	r0, r4, r2, r3
	c[8] += 19 * ((llimb_t)2*a[9]*b[9]);
1000f7d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	c[9] = (llimb_t)a[0]*b[9] + (llimb_t)a[1]*b[8] + (llimb_t)a[2]*b[7]
1000f7d8:	e9cd 042a 	strd	r0, r4, [sp, #168]	@ 0xa8
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
1000f7dc:	e9cd 5626 	strd	r5, r6, [sp, #152]	@ 0x98
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1000f7e0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1000f7e2:	9022      	str	r0, [sp, #136]	@ 0x88
	c[8] += 19 * ((llimb_t)2*a[9]*b[9]);
1000f7e4:	fb82 6503 	smull	r6, r5, r2, r3
1000f7e8:	00ac      	lsls	r4, r5, #2
1000f7ea:	00b0      	lsls	r0, r6, #2
1000f7ec:	1980      	adds	r0, r0, r6
1000f7ee:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
1000f7f2:	eb45 0404 	adc.w	r4, r5, r4
1000f7f6:	00a4      	lsls	r4, r4, #2
1000f7f8:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
1000f7fc:	0080      	lsls	r0, r0, #2
1000f7fe:	1b80      	subs	r0, r0, r6
1000f800:	eb64 0405 	sbc.w	r4, r4, r5
1000f804:	1800      	adds	r0, r0, r0
1000f806:	4164      	adcs	r4, r4
1000f808:	183f      	adds	r7, r7, r0
1000f80a:	eb4e 0404 	adc.w	r4, lr, r4
	c[6] += 19 * ((llimb_t)2*a[7]*b[9] + (llimb_t)a[8]*b[8] + (llimb_t)2*a[9]*b[7]);
1000f80e:	e9cd ab24 	strd	sl, fp, [sp, #144]	@ 0x90
	c[8] += 19 * ((llimb_t)2*a[9]*b[9]);
1000f812:	e9cd 7428 	strd	r7, r4, [sp, #160]	@ 0xa0
	CARRY(c, c, tmp, 0);
1000f816:	f10d 0c60 	add.w	ip, sp, #96	@ 0x60
	c[8] += 19 * ((llimb_t)2*a[9]*b[9]);
1000f81a:	2300      	movs	r3, #0
1000f81c:	4662      	mov	r2, ip
1000f81e:	4619      	mov	r1, r3
	CARRY(c, c, tmp, 0);
1000f820:	6810      	ldr	r0, [r2, #0]
1000f822:	6855      	ldr	r5, [r2, #4]
1000f824:	6894      	ldr	r4, [r2, #8]
1000f826:	0e5b      	lsrs	r3, r3, #25
1000f828:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
1000f82c:	1818      	adds	r0, r3, r0
1000f82e:	eb45 6161 	adc.w	r1, r5, r1, asr #25
1000f832:	0e83      	lsrs	r3, r0, #26
1000f834:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
1000f838:	191b      	adds	r3, r3, r4
1000f83a:	f020 407c 	bic.w	r0, r0, #4227858432	@ 0xfc000000
1000f83e:	68d4      	ldr	r4, [r2, #12]
1000f840:	6010      	str	r0, [r2, #0]
1000f842:	f023 457e 	bic.w	r5, r3, #4261412864	@ 0xfe000000
1000f846:	f04f 0000 	mov.w	r0, #0
1000f84a:	60d0      	str	r0, [r2, #12]
1000f84c:	e9c2 0501 	strd	r0, r5, [r2, #4]
1000f850:	f102 0210 	add.w	r2, r2, #16
1000f854:	a82c      	add	r0, sp, #176	@ 0xb0
1000f856:	eb44 61a1 	adc.w	r1, r4, r1, asr #26
1000f85a:	4290      	cmp	r0, r2
1000f85c:	d1e0      	bne.n	1000f820 <fld_mul+0x5cc>
1000f85e:	0e5b      	lsrs	r3, r3, #25
1000f860:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
1000f864:	1649      	asrs	r1, r1, #25
1000f866:	00c8      	lsls	r0, r1, #3
1000f868:	00da      	lsls	r2, r3, #3
1000f86a:	18d2      	adds	r2, r2, r3
1000f86c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
1000f870:	eb41 0000 	adc.w	r0, r1, r0
1000f874:	1892      	adds	r2, r2, r2
1000f876:	4140      	adcs	r0, r0
1000f878:	18d2      	adds	r2, r2, r3
1000f87a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1000f87c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
1000f87e:	eb41 0100 	adc.w	r1, r1, r0
1000f882:	189b      	adds	r3, r3, r2
1000f884:	9318      	str	r3, [sp, #96]	@ 0x60
1000f886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
	CARRY(dst, c, tmp, 0);
1000f888:	f04f 0000 	mov.w	r0, #0
	CARRY(c, c, tmp, 0);
1000f88c:	eb41 0103 	adc.w	r1, r1, r3
1000f890:	9119      	str	r1, [sp, #100]	@ 0x64
	CARRY(dst, c, tmp, 0);
1000f892:	4602      	mov	r2, r0
1000f894:	4601      	mov	r1, r0
1000f896:	1d35      	adds	r5, r6, #4
1000f898:	f8dc 4000 	ldr.w	r4, [ip]
1000f89c:	0e53      	lsrs	r3, r2, #25
1000f89e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
1000f8a2:	f8dc 2004 	ldr.w	r2, [ip, #4]
1000f8a6:	191c      	adds	r4, r3, r4
1000f8a8:	eb42 6161 	adc.w	r1, r2, r1, asr #25
1000f8ac:	0ea3      	lsrs	r3, r4, #26
1000f8ae:	f8dc 2008 	ldr.w	r2, [ip, #8]
1000f8b2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
1000f8b6:	189a      	adds	r2, r3, r2
1000f8b8:	f024 447c 	bic.w	r4, r4, #4227858432	@ 0xfc000000
1000f8bc:	f8dc 300c 	ldr.w	r3, [ip, #12]
1000f8c0:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
1000f8c4:	f022 477e 	bic.w	r7, r2, #4261412864	@ 0xfe000000
1000f8c8:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
1000f8cc:	f100 0002 	add.w	r0, r0, #2
1000f8d0:	eb43 61a1 	adc.w	r1, r3, r1, asr #26
1000f8d4:	280a      	cmp	r0, #10
1000f8d6:	f10c 0c10 	add.w	ip, ip, #16
1000f8da:	d1dd      	bne.n	1000f898 <fld_mul+0x644>
1000f8dc:	9814      	ldr	r0, [sp, #80]	@ 0x50
1000f8de:	0e53      	lsrs	r3, r2, #25
1000f8e0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
1000f8e4:	6802      	ldr	r2, [r0, #0]
1000f8e6:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
1000f8ea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
1000f8ee:	441a      	add	r2, r3
1000f8f0:	6002      	str	r2, [r0, #0]
}
1000f8f2:	b02d      	add	sp, #180	@ 0xb4
1000f8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1000f8f8 <fld_sq>:
/*
 * fld_sq - square x and reduce modulo q.
 */
void
fld_sq(fld_t dst, const fld_t a)
{
1000f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	llimb_t tmp;
	llimb_t c[10];

	c[0] = (llimb_t)a[0]*a[0];
1000f8fc:	e9d1 7200 	ldrd	r7, r2, [r1]
{
1000f900:	b09f      	sub	sp, #124	@ 0x7c
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
1000f902:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
1000f906:	690c      	ldr	r4, [r1, #16]
{
1000f908:	9007      	str	r0, [sp, #28]
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000f90a:	6988      	ldr	r0, [r1, #24]
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1000f90c:	f8d1 801c 	ldr.w	r8, [r1, #28]
	c[3] = 2*((llimb_t)a[0]*a[3] + (llimb_t)a[1]*a[2]);
1000f910:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1000f914:	f8d1 9014 	ldr.w	r9, [r1, #20]
	c[2] = 2*((llimb_t)a[0]*a[2] + (llimb_t)a[1]*a[1]);
1000f918:	688d      	ldr	r5, [r1, #8]
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
1000f91a:	9401      	str	r4, [sp, #4]
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000f91c:	9002      	str	r0, [sp, #8]
1000f91e:	a90a      	add	r1, sp, #40	@ 0x28
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
1000f920:	fb82 0403 	smull	r0, r4, r2, r3
1000f924:	fbc7 0406 	smlal	r0, r4, r7, r6
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
	c[4] += 19*(2*((llimb_t)2*a[5]*a[9] + (llimb_t)a[6]*a[8] + (llimb_t)a[7]*a[7]));
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
	c[7] += 19*2*(llimb_t)a[8]*a[9];
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1000f928:	e9cd 1108 	strd	r1, r1, [sp, #32]
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
1000f92c:	9902      	ldr	r1, [sp, #8]
	c[0] += 19*2*((llimb_t)2*a[1]*a[9] + (llimb_t)a[2]*a[8] + (llimb_t)2*a[3]*a[7] + (llimb_t)a[4]*a[6] + (llimb_t)a[5]*a[5]);
1000f92e:	9603      	str	r6, [sp, #12]
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
1000f930:	fbc5 0408 	smlal	r0, r4, r5, r8
1000f934:	fbce 0401 	smlal	r0, r4, lr, r1
1000f938:	9901      	ldr	r1, [sp, #4]
	c[0] += 19*2*((llimb_t)2*a[1]*a[9] + (llimb_t)a[2]*a[8] + (llimb_t)2*a[3]*a[7] + (llimb_t)a[4]*a[6] + (llimb_t)a[5]*a[5]);
1000f93a:	9504      	str	r5, [sp, #16]
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
1000f93c:	fbc1 0409 	smlal	r0, r4, r1, r9
1000f940:	1800      	adds	r0, r0, r0
1000f942:	4164      	adcs	r4, r4
1000f944:	901c      	str	r0, [sp, #112]	@ 0x70
	c[0] += 19*2*((llimb_t)2*a[1]*a[9] + (llimb_t)a[2]*a[8] + (llimb_t)2*a[3]*a[7] + (llimb_t)a[4]*a[6] + (llimb_t)a[5]*a[5]);
1000f946:	fb82 0606 	smull	r0, r6, r2, r6
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
1000f94a:	941d      	str	r4, [sp, #116]	@ 0x74
	c[0] += 19*2*((llimb_t)2*a[1]*a[9] + (llimb_t)a[2]*a[8] + (llimb_t)2*a[3]*a[7] + (llimb_t)a[4]*a[6] + (llimb_t)a[5]*a[5]);
1000f94c:	1800      	adds	r0, r0, r0
1000f94e:	fb85 5403 	smull	r5, r4, r5, r3
1000f952:	4176      	adcs	r6, r6
1000f954:	1940      	adds	r0, r0, r5
1000f956:	eb46 0604 	adc.w	r6, r6, r4
1000f95a:	fb8e 4508 	smull	r4, r5, lr, r8
1000f95e:	1924      	adds	r4, r4, r4
1000f960:	416d      	adcs	r5, r5
1000f962:	1900      	adds	r0, r0, r4
1000f964:	460c      	mov	r4, r1
1000f966:	9902      	ldr	r1, [sp, #8]
1000f968:	eb46 0605 	adc.w	r6, r6, r5
1000f96c:	fbc4 0601 	smlal	r0, r6, r4, r1
1000f970:	fbc9 0609 	smlal	r0, r6, r9, r9
1000f974:	00b5      	lsls	r5, r6, #2
1000f976:	0084      	lsls	r4, r0, #2
1000f978:	1824      	adds	r4, r4, r0
1000f97a:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
1000f97e:	eb46 0505 	adc.w	r5, r6, r5
1000f982:	00ad      	lsls	r5, r5, #2
1000f984:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
1000f988:	00a4      	lsls	r4, r4, #2
1000f98a:	1a24      	subs	r4, r4, r0
1000f98c:	eb65 0506 	sbc.w	r5, r5, r6
1000f990:	1924      	adds	r4, r4, r4
1000f992:	416d      	adcs	r5, r5
1000f994:	fbc7 4507 	smlal	r4, r5, r7, r7
1000f998:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
	c[1] += 19*2*((llimb_t)a[2]*a[9] + (llimb_t)a[3]*a[8] + (llimb_t)a[4]*a[7] + (llimb_t)a[5]*a[6]);
1000f99c:	e9dd 4003 	ldrd	r4, r0, [sp, #12]
1000f9a0:	fb8e 5603 	smull	r5, r6, lr, r3
1000f9a4:	fbc0 5604 	smlal	r5, r6, r0, r4
1000f9a8:	9c01      	ldr	r4, [sp, #4]
1000f9aa:	fbc4 5608 	smlal	r5, r6, r4, r8
1000f9ae:	fbc9 5601 	smlal	r5, r6, r9, r1
1000f9b2:	00b4      	lsls	r4, r6, #2
1000f9b4:	00a8      	lsls	r0, r5, #2
1000f9b6:	1940      	adds	r0, r0, r5
1000f9b8:	ea44 7495 	orr.w	r4, r4, r5, lsr #30
1000f9bc:	eb46 0404 	adc.w	r4, r6, r4
1000f9c0:	00a4      	lsls	r4, r4, #2
1000f9c2:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
1000f9c6:	0080      	lsls	r0, r0, #2
1000f9c8:	1b40      	subs	r0, r0, r5
1000f9ca:	eb64 0406 	sbc.w	r4, r4, r6
	c[1] = (llimb_t)2*a[0]*a[1];
1000f9ce:	fb87 5602 	smull	r5, r6, r7, r2
	c[1] += 19*2*((llimb_t)a[2]*a[9] + (llimb_t)a[3]*a[8] + (llimb_t)a[4]*a[7] + (llimb_t)a[5]*a[6]);
1000f9d2:	1800      	adds	r0, r0, r0
1000f9d4:	4164      	adcs	r4, r4
	c[1] = (llimb_t)2*a[0]*a[1];
1000f9d6:	196d      	adds	r5, r5, r5
1000f9d8:	4176      	adcs	r6, r6
	c[1] += 19*2*((llimb_t)a[2]*a[9] + (llimb_t)a[3]*a[8] + (llimb_t)a[4]*a[7] + (llimb_t)a[5]*a[6]);
1000f9da:	1940      	adds	r0, r0, r5
1000f9dc:	eb44 0406 	adc.w	r4, r4, r6
1000f9e0:	e9cd 040c 	strd	r0, r4, [sp, #48]	@ 0x30
	c[2] += 19*(2*((llimb_t)2*a[3]*a[9] + (llimb_t)a[4]*a[8] + (llimb_t)2*a[5]*a[7]) + (llimb_t)a[6]*a[6]);
1000f9e4:	9c03      	ldr	r4, [sp, #12]
1000f9e6:	9e01      	ldr	r6, [sp, #4]
1000f9e8:	9306      	str	r3, [sp, #24]
1000f9ea:	fb8e 0504 	smull	r0, r5, lr, r4
1000f9ee:	1800      	adds	r0, r0, r0
1000f9f0:	fb86 6403 	smull	r6, r4, r6, r3
1000f9f4:	416d      	adcs	r5, r5
1000f9f6:	1980      	adds	r0, r0, r6
1000f9f8:	eb45 0504 	adc.w	r5, r5, r4
1000f9fc:	fb89 4608 	smull	r4, r6, r9, r8
1000fa00:	1924      	adds	r4, r4, r4
1000fa02:	4176      	adcs	r6, r6
1000fa04:	1900      	adds	r0, r0, r4
1000fa06:	eb45 0506 	adc.w	r5, r5, r6
1000fa0a:	fb81 6401 	smull	r6, r4, r1, r1
1000fa0e:	1800      	adds	r0, r0, r0
1000fa10:	416d      	adcs	r5, r5
1000fa12:	1980      	adds	r0, r0, r6
1000fa14:	eb45 0504 	adc.w	r5, r5, r4
1000fa18:	00ee      	lsls	r6, r5, #3
1000fa1a:	00c4      	lsls	r4, r0, #3
1000fa1c:	1824      	adds	r4, r4, r0
1000fa1e:	ea46 7650 	orr.w	r6, r6, r0, lsr #29
1000fa22:	eb45 0606 	adc.w	r6, r5, r6
1000fa26:	1924      	adds	r4, r4, r4
	c[2] = 2*((llimb_t)a[0]*a[2] + (llimb_t)a[1]*a[1]);
1000fa28:	9b04      	ldr	r3, [sp, #16]
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
1000fa2a:	9901      	ldr	r1, [sp, #4]
	c[2] += 19*(2*((llimb_t)2*a[3]*a[9] + (llimb_t)a[4]*a[8] + (llimb_t)2*a[5]*a[7]) + (llimb_t)a[6]*a[6]);
1000fa2c:	4176      	adcs	r6, r6
1000fa2e:	1824      	adds	r4, r4, r0
1000fa30:	eb45 0606 	adc.w	r6, r5, r6
	c[2] = 2*((llimb_t)a[0]*a[2] + (llimb_t)a[1]*a[1]);
1000fa34:	fb82 0502 	smull	r0, r5, r2, r2
1000fa38:	fbc7 0503 	smlal	r0, r5, r7, r3
1000fa3c:	1800      	adds	r0, r0, r0
1000fa3e:	416d      	adcs	r5, r5
	c[2] += 19*(2*((llimb_t)2*a[3]*a[9] + (llimb_t)a[4]*a[8] + (llimb_t)2*a[5]*a[7]) + (llimb_t)a[6]*a[6]);
1000fa40:	1824      	adds	r4, r4, r0
1000fa42:	eb46 0605 	adc.w	r6, r6, r5
1000fa46:	e9cd 460e 	strd	r4, r6, [sp, #56]	@ 0x38
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
1000fa4a:	9c06      	ldr	r4, [sp, #24]
1000fa4c:	9803      	ldr	r0, [sp, #12]
1000fa4e:	fb89 5604 	smull	r5, r6, r9, r4
1000fa52:	fbc1 5600 	smlal	r5, r6, r1, r0
1000fa56:	9902      	ldr	r1, [sp, #8]
1000fa58:	fbc1 5608 	smlal	r5, r6, r1, r8
1000fa5c:	00b4      	lsls	r4, r6, #2
1000fa5e:	00a8      	lsls	r0, r5, #2
1000fa60:	1940      	adds	r0, r0, r5
1000fa62:	ea44 7495 	orr.w	r4, r4, r5, lsr #30
1000fa66:	eb46 0404 	adc.w	r4, r6, r4
1000fa6a:	00a4      	lsls	r4, r4, #2
1000fa6c:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
1000fa70:	0080      	lsls	r0, r0, #2
1000fa72:	1b40      	subs	r0, r0, r5
1000fa74:	eb64 0406 	sbc.w	r4, r4, r6
	c[3] = 2*((llimb_t)a[0]*a[3] + (llimb_t)a[1]*a[2]);
1000fa78:	fb82 5603 	smull	r5, r6, r2, r3
1000fa7c:	fbc7 560e 	smlal	r5, r6, r7, lr
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
1000fa80:	1800      	adds	r0, r0, r0
1000fa82:	4164      	adcs	r4, r4
	c[3] = 2*((llimb_t)a[0]*a[3] + (llimb_t)a[1]*a[2]);
1000fa84:	196d      	adds	r5, r5, r5
1000fa86:	4176      	adcs	r6, r6
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
1000fa88:	1940      	adds	r0, r0, r5
1000fa8a:	eb44 0406 	adc.w	r4, r4, r6
	c[3] = 2*((llimb_t)a[0]*a[3] + (llimb_t)a[1]*a[2]);
1000fa8e:	4639      	mov	r1, r7
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
1000fa90:	e9cd 0410 	strd	r0, r4, [sp, #64]	@ 0x40
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
1000fa94:	fb82 070e 	smull	r0, r7, r2, lr
1000fa98:	9105      	str	r1, [sp, #20]
1000fa9a:	1800      	adds	r0, r0, r0
1000fa9c:	460c      	mov	r4, r1
1000fa9e:	9901      	ldr	r1, [sp, #4]
	c[4] += 19*(2*((llimb_t)2*a[5]*a[9] + (llimb_t)a[6]*a[8] + (llimb_t)a[7]*a[7]));
1000faa0:	9e02      	ldr	r6, [sp, #8]
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
1000faa2:	417f      	adcs	r7, r7
1000faa4:	fbc4 0701 	smlal	r0, r7, r4, r1
1000faa8:	1800      	adds	r0, r0, r0
1000faaa:	fb83 5403 	smull	r5, r4, r3, r3
1000faae:	417f      	adcs	r7, r7
1000fab0:	1940      	adds	r0, r0, r5
	c[4] += 19*(2*((llimb_t)2*a[5]*a[9] + (llimb_t)a[6]*a[8] + (llimb_t)a[7]*a[7]));
1000fab2:	9d03      	ldr	r5, [sp, #12]
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
1000fab4:	eb47 0704 	adc.w	r7, r7, r4
	c[4] += 19*(2*((llimb_t)2*a[5]*a[9] + (llimb_t)a[6]*a[8] + (llimb_t)a[7]*a[7]));
1000fab8:	fb89 4c05 	smull	r4, ip, r9, r5
1000fabc:	9d06      	ldr	r5, [sp, #24]
1000fabe:	1924      	adds	r4, r4, r4
1000fac0:	fb86 5605 	smull	r5, r6, r6, r5
1000fac4:	eb4c 0c0c 	adc.w	ip, ip, ip
1000fac8:	1964      	adds	r4, r4, r5
1000faca:	eb4c 0c06 	adc.w	ip, ip, r6
1000face:	fbc8 4c08 	smlal	r4, ip, r8, r8
1000fad2:	ea4f 068c 	mov.w	r6, ip, lsl #2
1000fad6:	00a5      	lsls	r5, r4, #2
1000fad8:	192d      	adds	r5, r5, r4
1000fada:	ea46 7694 	orr.w	r6, r6, r4, lsr #30
1000fade:	eb4c 0606 	adc.w	r6, ip, r6
1000fae2:	00b6      	lsls	r6, r6, #2
1000fae4:	ea46 7695 	orr.w	r6, r6, r5, lsr #30
1000fae8:	00ad      	lsls	r5, r5, #2
1000faea:	1b2d      	subs	r5, r5, r4
1000faec:	eb66 060c 	sbc.w	r6, r6, ip
1000faf0:	196d      	adds	r5, r5, r5
1000faf2:	4176      	adcs	r6, r6
1000faf4:	1940      	adds	r0, r0, r5
1000faf6:	eb47 0706 	adc.w	r7, r7, r6
1000fafa:	e9cd 0712 	strd	r0, r7, [sp, #72]	@ 0x48
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1000fafe:	9f05      	ldr	r7, [sp, #20]
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
1000fb00:	9d03      	ldr	r5, [sp, #12]
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1000fb02:	fb82 4601 	smull	r4, r6, r2, r1
1000fb06:	fbc7 4609 	smlal	r4, r6, r7, r9
1000fb0a:	fbc3 460e 	smlal	r4, r6, r3, lr
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
1000fb0e:	9b06      	ldr	r3, [sp, #24]
1000fb10:	9902      	ldr	r1, [sp, #8]
1000fb12:	fb88 7c03 	smull	r7, ip, r8, r3
1000fb16:	fbc1 7c05 	smlal	r7, ip, r1, r5
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1000fb1a:	1924      	adds	r4, r4, r4
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
1000fb1c:	ea4f 058c 	mov.w	r5, ip, lsl #2
1000fb20:	ea4f 0087 	mov.w	r0, r7, lsl #2
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1000fb24:	4176      	adcs	r6, r6
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
1000fb26:	ea45 7597 	orr.w	r5, r5, r7, lsr #30
1000fb2a:	19c0      	adds	r0, r0, r7
1000fb2c:	eb4c 0505 	adc.w	r5, ip, r5
1000fb30:	00ad      	lsls	r5, r5, #2
1000fb32:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
1000fb36:	0080      	lsls	r0, r0, #2
1000fb38:	1bc0      	subs	r0, r0, r7
1000fb3a:	eb65 050c 	sbc.w	r5, r5, ip
1000fb3e:	1800      	adds	r0, r0, r0
1000fb40:	416d      	adcs	r5, r5
1000fb42:	1824      	adds	r4, r4, r0
1000fb44:	eb46 0605 	adc.w	r6, r6, r5
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000fb48:	fb82 0509 	smull	r0, r5, r2, r9
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
1000fb4c:	e9cd 4614 	strd	r4, r6, [sp, #80]	@ 0x50
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000fb50:	1800      	adds	r0, r0, r0
1000fb52:	9c05      	ldr	r4, [sp, #20]
1000fb54:	9e04      	ldr	r6, [sp, #16]
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
1000fb56:	9f03      	ldr	r7, [sp, #12]
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000fb58:	416d      	adcs	r5, r5
1000fb5a:	fbc4 0501 	smlal	r0, r5, r4, r1
1000fb5e:	9901      	ldr	r1, [sp, #4]
1000fb60:	fbc6 0501 	smlal	r0, r5, r6, r1
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
1000fb64:	fb88 6707 	smull	r6, r7, r8, r7
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000fb68:	fbce 050e 	smlal	r0, r5, lr, lr
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
1000fb6c:	00bf      	lsls	r7, r7, #2
1000fb6e:	fb83 c403 	smull	ip, r4, r3, r3
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000fb72:	1800      	adds	r0, r0, r0
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
1000fb74:	ea47 7796 	orr.w	r7, r7, r6, lsr #30
1000fb78:	ea4f 0686 	mov.w	r6, r6, lsl #2
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1000fb7c:	416d      	adcs	r5, r5
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
1000fb7e:	eb16 060c 	adds.w	r6, r6, ip
1000fb82:	eb47 0704 	adc.w	r7, r7, r4
1000fb86:	ea4f 0cc7 	mov.w	ip, r7, lsl #3
1000fb8a:	00f4      	lsls	r4, r6, #3
1000fb8c:	19a4      	adds	r4, r4, r6
1000fb8e:	ea4c 7c56 	orr.w	ip, ip, r6, lsr #29
1000fb92:	eb47 0c0c 	adc.w	ip, r7, ip
1000fb96:	1924      	adds	r4, r4, r4
1000fb98:	eb4c 0c0c 	adc.w	ip, ip, ip
1000fb9c:	19a4      	adds	r4, r4, r6
1000fb9e:	eb47 070c 	adc.w	r7, r7, ip
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1000fba2:	9902      	ldr	r1, [sp, #8]
1000fba4:	9e04      	ldr	r6, [sp, #16]
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
1000fba6:	1900      	adds	r0, r0, r4
1000fba8:	eb45 0507 	adc.w	r5, r5, r7
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1000fbac:	9c05      	ldr	r4, [sp, #20]
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
1000fbae:	e9cd 0516 	strd	r0, r5, [sp, #88]	@ 0x58
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1000fbb2:	fb82 c501 	smull	ip, r5, r2, r1
1000fbb6:	fbc4 c508 	smlal	ip, r5, r4, r8
1000fbba:	9901      	ldr	r1, [sp, #4]
1000fbbc:	fbc6 c509 	smlal	ip, r5, r6, r9
1000fbc0:	fbce c501 	smlal	ip, r5, lr, r1
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1000fbc4:	fb82 0208 	smull	r0, r2, r2, r8
1000fbc8:	fb8e 6809 	smull	r6, r8, lr, r9
1000fbcc:	fb81 e901 	smull	lr, r9, r1, r1
1000fbd0:	f8cd 9018 	str.w	r9, [sp, #24]
	c[7] += 19*2*(llimb_t)a[8]*a[9];
1000fbd4:	9f03      	ldr	r7, [sp, #12]
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1000fbd6:	f8cd e004 	str.w	lr, [sp, #4]
	c[7] += 19*2*(llimb_t)a[8]*a[9];
1000fbda:	fb83 7907 	smull	r7, r9, r3, r7
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1000fbde:	eb1c 0c0c 	adds.w	ip, ip, ip
	c[7] += 19*2*(llimb_t)a[8]*a[9];
1000fbe2:	ea4f 0e87 	mov.w	lr, r7, lsl #2
1000fbe6:	ea4f 0489 	mov.w	r4, r9, lsl #2
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1000fbea:	416d      	adcs	r5, r5
	c[7] += 19*2*(llimb_t)a[8]*a[9];
1000fbec:	ea44 7497 	orr.w	r4, r4, r7, lsr #30
1000fbf0:	eb1e 0e07 	adds.w	lr, lr, r7
1000fbf4:	eb49 0404 	adc.w	r4, r9, r4
1000fbf8:	00a4      	lsls	r4, r4, #2
1000fbfa:	ea44 749e 	orr.w	r4, r4, lr, lsr #30
1000fbfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
1000fc02:	ebbe 0e07 	subs.w	lr, lr, r7
1000fc06:	eb64 0409 	sbc.w	r4, r4, r9
1000fc0a:	eb1e 0e0e 	adds.w	lr, lr, lr
1000fc0e:	4164      	adcs	r4, r4
1000fc10:	eb1c 070e 	adds.w	r7, ip, lr
1000fc14:	eb45 0504 	adc.w	r5, r5, r4
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1000fc18:	1800      	adds	r0, r0, r0
1000fc1a:	9c05      	ldr	r4, [sp, #20]
1000fc1c:	9902      	ldr	r1, [sp, #8]
1000fc1e:	4152      	adcs	r2, r2
1000fc20:	fbc4 0203 	smlal	r0, r2, r4, r3
1000fc24:	9c04      	ldr	r4, [sp, #16]
1000fc26:	9b06      	ldr	r3, [sp, #24]
1000fc28:	fbc4 0201 	smlal	r0, r2, r4, r1
1000fc2c:	19b6      	adds	r6, r6, r6
	c[7] += 19*2*(llimb_t)a[8]*a[9];
1000fc2e:	e9cd 7518 	strd	r7, r5, [sp, #96]	@ 0x60
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1000fc32:	9f03      	ldr	r7, [sp, #12]
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1000fc34:	9901      	ldr	r1, [sp, #4]
1000fc36:	eb48 0808 	adc.w	r8, r8, r8
1000fc3a:	1980      	adds	r0, r0, r6
1000fc3c:	eb42 0208 	adc.w	r2, r2, r8
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1000fc40:	fb87 7607 	smull	r7, r6, r7, r7
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1000fc44:	1800      	adds	r0, r0, r0
1000fc46:	4152      	adcs	r2, r2
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1000fc48:	00b5      	lsls	r5, r6, #2
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1000fc4a:	1840      	adds	r0, r0, r1
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1000fc4c:	ea4f 0487 	mov.w	r4, r7, lsl #2
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1000fc50:	eb42 0203 	adc.w	r2, r2, r3
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1000fc54:	ea45 7597 	orr.w	r5, r5, r7, lsr #30
1000fc58:	19e4      	adds	r4, r4, r7
1000fc5a:	eb46 0505 	adc.w	r5, r6, r5
1000fc5e:	00ad      	lsls	r5, r5, #2
1000fc60:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
1000fc64:	00a4      	lsls	r4, r4, #2
1000fc66:	1be4      	subs	r4, r4, r7
1000fc68:	eb65 0506 	sbc.w	r5, r5, r6
1000fc6c:	1924      	adds	r4, r4, r4
1000fc6e:	416d      	adcs	r5, r5
1000fc70:	1900      	adds	r0, r0, r4
1000fc72:	eb42 0205 	adc.w	r2, r2, r5
1000fc76:	9b08      	ldr	r3, [sp, #32]
1000fc78:	e9cd 021a 	strd	r0, r2, [sp, #104]	@ 0x68

	CARRY(c, c, tmp, 0);
1000fc7c:	f04f 0a00 	mov.w	sl, #0
1000fc80:	46d3      	mov	fp, sl
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1000fc82:	4619      	mov	r1, r3
	CARRY(c, c, tmp, 0);
1000fc84:	6818      	ldr	r0, [r3, #0]
1000fc86:	685d      	ldr	r5, [r3, #4]
1000fc88:	689c      	ldr	r4, [r3, #8]
1000fc8a:	ea4f 625a 	mov.w	r2, sl, lsr #25
1000fc8e:	ea42 12cb 	orr.w	r2, r2, fp, lsl #7
1000fc92:	1810      	adds	r0, r2, r0
1000fc94:	eb45 6b6b 	adc.w	fp, r5, fp, asr #25
1000fc98:	0e82      	lsrs	r2, r0, #26
1000fc9a:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
1000fc9e:	eb12 0a04 	adds.w	sl, r2, r4
1000fca2:	f020 407c 	bic.w	r0, r0, #4227858432	@ 0xfc000000
1000fca6:	68da      	ldr	r2, [r3, #12]
1000fca8:	6018      	str	r0, [r3, #0]
1000fcaa:	f02a 447e 	bic.w	r4, sl, #4261412864	@ 0xfe000000
1000fcae:	f04f 0000 	mov.w	r0, #0
1000fcb2:	60d8      	str	r0, [r3, #12]
1000fcb4:	eb42 6bab 	adc.w	fp, r2, fp, asr #26
1000fcb8:	e9c3 0401 	strd	r0, r4, [r3, #4]
1000fcbc:	aa1e      	add	r2, sp, #120	@ 0x78
1000fcbe:	3310      	adds	r3, #16
1000fcc0:	429a      	cmp	r2, r3
1000fcc2:	d1df      	bne.n	1000fc84 <fld_sq+0x38c>
1000fcc4:	ea4f 635a 	mov.w	r3, sl, lsr #25
1000fcc8:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
1000fccc:	ea4f 626b 	mov.w	r2, fp, asr #25
1000fcd0:	00d4      	lsls	r4, r2, #3
1000fcd2:	00d8      	lsls	r0, r3, #3
1000fcd4:	18c0      	adds	r0, r0, r3
1000fcd6:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
1000fcda:	eb42 0404 	adc.w	r4, r2, r4
1000fcde:	1800      	adds	r0, r0, r0
1000fce0:	4164      	adcs	r4, r4
1000fce2:	18c0      	adds	r0, r0, r3
1000fce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000fce6:	9f07      	ldr	r7, [sp, #28]
1000fce8:	eb42 0204 	adc.w	r2, r2, r4
1000fcec:	181b      	adds	r3, r3, r0
1000fcee:	930a      	str	r3, [sp, #40]	@ 0x28
1000fcf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
	CARRY(dst, c, tmp, 0);
1000fcf2:	f04f 0400 	mov.w	r4, #0
	CARRY(c, c, tmp, 0);
1000fcf6:	eb42 0203 	adc.w	r2, r2, r3
1000fcfa:	920b      	str	r2, [sp, #44]	@ 0x2c
	CARRY(dst, c, tmp, 0);
1000fcfc:	4620      	mov	r0, r4
1000fcfe:	4622      	mov	r2, r4
1000fd00:	1d3e      	adds	r6, r7, #4
1000fd02:	680d      	ldr	r5, [r1, #0]
1000fd04:	0e53      	lsrs	r3, r2, #25
1000fd06:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
1000fd0a:	684a      	ldr	r2, [r1, #4]
1000fd0c:	195d      	adds	r5, r3, r5
1000fd0e:	eb42 6060 	adc.w	r0, r2, r0, asr #25
1000fd12:	0eab      	lsrs	r3, r5, #26
1000fd14:	688a      	ldr	r2, [r1, #8]
1000fd16:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
1000fd1a:	189a      	adds	r2, r3, r2
1000fd1c:	f022 437e 	bic.w	r3, r2, #4261412864	@ 0xfe000000
1000fd20:	f025 457c 	bic.w	r5, r5, #4227858432	@ 0xfc000000
1000fd24:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
1000fd28:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
1000fd2c:	68cb      	ldr	r3, [r1, #12]
1000fd2e:	f104 0402 	add.w	r4, r4, #2
1000fd32:	eb43 60a0 	adc.w	r0, r3, r0, asr #26
1000fd36:	2c0a      	cmp	r4, #10
1000fd38:	f101 0110 	add.w	r1, r1, #16
1000fd3c:	d1e1      	bne.n	1000fd02 <fld_sq+0x40a>
1000fd3e:	0e53      	lsrs	r3, r2, #25
1000fd40:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
1000fd44:	9807      	ldr	r0, [sp, #28]
1000fd46:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
1000fd4a:	6802      	ldr	r2, [r0, #0]
1000fd4c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
1000fd50:	441a      	add	r2, r3
1000fd52:	6002      	str	r2, [r0, #0]
}
1000fd54:	b01f      	add	sp, #124	@ 0x7c
1000fd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000fd5a:	bf00      	nop

1000fd5c <fld_inv>:
 * power. by lagrange's theorem (aka 'fermat's little theorem' in this
 * special case) this gives us z^-1 modulo q.
 */
void
fld_inv(fld_t res, const fld_t z)
{
1000fd5c:	b530      	push	{r4, r5, lr}
1000fd5e:	b0e5      	sub	sp, #404	@ 0x194
1000fd60:	4605      	mov	r5, r0
	fld_t z2_100_0;
	fld_t t0;
	fld_t t1;
	int i;

	/* 2 */ fld_sq(z2, z);
1000fd62:	4668      	mov	r0, sp
{
1000fd64:	460c      	mov	r4, r1
	/* 2 */ fld_sq(z2, z);
1000fd66:	f7ff fdc7 	bl	1000f8f8 <fld_sq>
	/* 4 */ fld_sq(t1, z2);
1000fd6a:	4669      	mov	r1, sp
1000fd6c:	a85a      	add	r0, sp, #360	@ 0x168
1000fd6e:	f7ff fdc3 	bl	1000f8f8 <fld_sq>
	/* 8 */ fld_sq(t0, t1);
1000fd72:	a95a      	add	r1, sp, #360	@ 0x168
1000fd74:	a850      	add	r0, sp, #320	@ 0x140
1000fd76:	f7ff fdbf 	bl	1000f8f8 <fld_sq>
	/* 9 */ fld_mul(z9,t0, z);
1000fd7a:	4622      	mov	r2, r4
1000fd7c:	a950      	add	r1, sp, #320	@ 0x140
1000fd7e:	a80a      	add	r0, sp, #40	@ 0x28
1000fd80:	f7ff fa68 	bl	1000f254 <fld_mul>
	/* 11 */ fld_mul(z11, z9, z2);
1000fd84:	466a      	mov	r2, sp
1000fd86:	a90a      	add	r1, sp, #40	@ 0x28
1000fd88:	a814      	add	r0, sp, #80	@ 0x50
1000fd8a:	f7ff fa63 	bl	1000f254 <fld_mul>
	/* 22 */ fld_sq(t0, z11);
1000fd8e:	a914      	add	r1, sp, #80	@ 0x50
1000fd90:	a850      	add	r0, sp, #320	@ 0x140
1000fd92:	f7ff fdb1 	bl	1000f8f8 <fld_sq>
	/* 2^5 - 2^0 = 31 */ fld_mul(z2_5_0, t0, z9);
1000fd96:	aa0a      	add	r2, sp, #40	@ 0x28
1000fd98:	a950      	add	r1, sp, #320	@ 0x140
1000fd9a:	a81e      	add	r0, sp, #120	@ 0x78
1000fd9c:	f7ff fa5a 	bl	1000f254 <fld_mul>

	/* 2^6 - 2^1 */ fld_sq(t0, z2_5_0);
1000fda0:	a91e      	add	r1, sp, #120	@ 0x78
1000fda2:	a850      	add	r0, sp, #320	@ 0x140
1000fda4:	f7ff fda8 	bl	1000f8f8 <fld_sq>
	/* 2^7 - 2^2 */ fld_sq(t1, t0);
1000fda8:	a950      	add	r1, sp, #320	@ 0x140
1000fdaa:	a85a      	add	r0, sp, #360	@ 0x168
1000fdac:	f7ff fda4 	bl	1000f8f8 <fld_sq>
	/* 2^8 - 2^3 */ fld_sq(t0, t1);
1000fdb0:	a95a      	add	r1, sp, #360	@ 0x168
1000fdb2:	a850      	add	r0, sp, #320	@ 0x140
1000fdb4:	f7ff fda0 	bl	1000f8f8 <fld_sq>
	/* 2^9 - 2^4 */ fld_sq(t1, t0);
1000fdb8:	a950      	add	r1, sp, #320	@ 0x140
1000fdba:	a85a      	add	r0, sp, #360	@ 0x168
1000fdbc:	f7ff fd9c 	bl	1000f8f8 <fld_sq>
	/* 2^10 - 2^5 */ fld_sq(t0, t1);
1000fdc0:	a95a      	add	r1, sp, #360	@ 0x168
1000fdc2:	a850      	add	r0, sp, #320	@ 0x140
1000fdc4:	f7ff fd98 	bl	1000f8f8 <fld_sq>
	/* 2^10 - 2^0 */ fld_mul(z2_10_0, t0, z2_5_0);
1000fdc8:	aa1e      	add	r2, sp, #120	@ 0x78
1000fdca:	a950      	add	r1, sp, #320	@ 0x140
1000fdcc:	a828      	add	r0, sp, #160	@ 0xa0
1000fdce:	f7ff fa41 	bl	1000f254 <fld_mul>

	/* 2^11 - 2^1 */ fld_sq(t0, z2_10_0);
1000fdd2:	a928      	add	r1, sp, #160	@ 0xa0
1000fdd4:	a850      	add	r0, sp, #320	@ 0x140
1000fdd6:	f7ff fd8f 	bl	1000f8f8 <fld_sq>
	/* 2^12 - 2^2 */ fld_sq(t1, t0);
1000fdda:	a950      	add	r1, sp, #320	@ 0x140
1000fddc:	a85a      	add	r0, sp, #360	@ 0x168
1000fdde:	f7ff fd8b 	bl	1000f8f8 <fld_sq>
1000fde2:	2404      	movs	r4, #4
	/* 2^20 - 2^10 */ for (i = 2; i < 10; i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
1000fde4:	a95a      	add	r1, sp, #360	@ 0x168
1000fde6:	a850      	add	r0, sp, #320	@ 0x140
1000fde8:	f7ff fd86 	bl	1000f8f8 <fld_sq>
1000fdec:	a950      	add	r1, sp, #320	@ 0x140
1000fdee:	a85a      	add	r0, sp, #360	@ 0x168
1000fdf0:	f7ff fd82 	bl	1000f8f8 <fld_sq>
1000fdf4:	3c01      	subs	r4, #1
1000fdf6:	d1f5      	bne.n	1000fde4 <fld_inv+0x88>
	/* 2^20 - 2^0 */ fld_mul(z2_20_0, t1, z2_10_0);
1000fdf8:	aa28      	add	r2, sp, #160	@ 0xa0
1000fdfa:	a95a      	add	r1, sp, #360	@ 0x168
1000fdfc:	a832      	add	r0, sp, #200	@ 0xc8
1000fdfe:	f7ff fa29 	bl	1000f254 <fld_mul>

	/* 2^21 - 2^1 */ fld_sq(t0, z2_20_0);
1000fe02:	a932      	add	r1, sp, #200	@ 0xc8
1000fe04:	a850      	add	r0, sp, #320	@ 0x140
1000fe06:	f7ff fd77 	bl	1000f8f8 <fld_sq>
	/* 2^22 - 2^2 */ fld_sq(t1, t0);
1000fe0a:	a950      	add	r1, sp, #320	@ 0x140
1000fe0c:	a85a      	add	r0, sp, #360	@ 0x168
1000fe0e:	f7ff fd73 	bl	1000f8f8 <fld_sq>
1000fe12:	2409      	movs	r4, #9
	/* 2^40 - 2^20 */ for (i = 2;i < 20;i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
1000fe14:	a95a      	add	r1, sp, #360	@ 0x168
1000fe16:	a850      	add	r0, sp, #320	@ 0x140
1000fe18:	f7ff fd6e 	bl	1000f8f8 <fld_sq>
1000fe1c:	a950      	add	r1, sp, #320	@ 0x140
1000fe1e:	a85a      	add	r0, sp, #360	@ 0x168
1000fe20:	f7ff fd6a 	bl	1000f8f8 <fld_sq>
1000fe24:	3c01      	subs	r4, #1
1000fe26:	d1f5      	bne.n	1000fe14 <fld_inv+0xb8>
	/* 2^40 - 2^0 */ fld_mul(t0, t1, z2_20_0);
1000fe28:	aa32      	add	r2, sp, #200	@ 0xc8
1000fe2a:	a95a      	add	r1, sp, #360	@ 0x168
1000fe2c:	a850      	add	r0, sp, #320	@ 0x140
1000fe2e:	f7ff fa11 	bl	1000f254 <fld_mul>

	/* 2^41 - 2^1 */ fld_sq(t1, t0);
1000fe32:	a950      	add	r1, sp, #320	@ 0x140
1000fe34:	a85a      	add	r0, sp, #360	@ 0x168
1000fe36:	f7ff fd5f 	bl	1000f8f8 <fld_sq>
	/* 2^42 - 2^2 */ fld_sq(t0, t1);
1000fe3a:	a95a      	add	r1, sp, #360	@ 0x168
1000fe3c:	a850      	add	r0, sp, #320	@ 0x140
1000fe3e:	f7ff fd5b 	bl	1000f8f8 <fld_sq>
1000fe42:	2404      	movs	r4, #4
	/* 2^50 - 2^10 */ for (i = 2; i < 10; i += 2) { fld_sq(t1, t0); fld_sq(t0, t1); }
1000fe44:	a950      	add	r1, sp, #320	@ 0x140
1000fe46:	a85a      	add	r0, sp, #360	@ 0x168
1000fe48:	f7ff fd56 	bl	1000f8f8 <fld_sq>
1000fe4c:	a95a      	add	r1, sp, #360	@ 0x168
1000fe4e:	a850      	add	r0, sp, #320	@ 0x140
1000fe50:	f7ff fd52 	bl	1000f8f8 <fld_sq>
1000fe54:	3c01      	subs	r4, #1
1000fe56:	d1f5      	bne.n	1000fe44 <fld_inv+0xe8>
	/* 2^50 - 2^0 */ fld_mul(z2_50_0, t0, z2_10_0);
1000fe58:	aa28      	add	r2, sp, #160	@ 0xa0
1000fe5a:	a950      	add	r1, sp, #320	@ 0x140
1000fe5c:	a83c      	add	r0, sp, #240	@ 0xf0
1000fe5e:	f7ff f9f9 	bl	1000f254 <fld_mul>

	/* 2^51 - 2^1 */ fld_sq(t0, z2_50_0);
1000fe62:	a93c      	add	r1, sp, #240	@ 0xf0
1000fe64:	a850      	add	r0, sp, #320	@ 0x140
1000fe66:	f7ff fd47 	bl	1000f8f8 <fld_sq>
	/* 2^52 - 2^2 */ fld_sq(t1, t0);
1000fe6a:	a950      	add	r1, sp, #320	@ 0x140
1000fe6c:	a85a      	add	r0, sp, #360	@ 0x168
1000fe6e:	f7ff fd43 	bl	1000f8f8 <fld_sq>
1000fe72:	2418      	movs	r4, #24
	/* 2^100 - 2^50 */ for (i = 2; i < 50; i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
1000fe74:	a95a      	add	r1, sp, #360	@ 0x168
1000fe76:	a850      	add	r0, sp, #320	@ 0x140
1000fe78:	f7ff fd3e 	bl	1000f8f8 <fld_sq>
1000fe7c:	a950      	add	r1, sp, #320	@ 0x140
1000fe7e:	a85a      	add	r0, sp, #360	@ 0x168
1000fe80:	f7ff fd3a 	bl	1000f8f8 <fld_sq>
1000fe84:	3c01      	subs	r4, #1
1000fe86:	d1f5      	bne.n	1000fe74 <fld_inv+0x118>
	/* 2^100 - 2^0 */ fld_mul(z2_100_0, t1, z2_50_0);
1000fe88:	aa3c      	add	r2, sp, #240	@ 0xf0
1000fe8a:	a95a      	add	r1, sp, #360	@ 0x168
1000fe8c:	a846      	add	r0, sp, #280	@ 0x118
1000fe8e:	f7ff f9e1 	bl	1000f254 <fld_mul>

	/* 2^101 - 2^1 */ fld_sq(t1, z2_100_0);
1000fe92:	a946      	add	r1, sp, #280	@ 0x118
1000fe94:	a85a      	add	r0, sp, #360	@ 0x168
1000fe96:	f7ff fd2f 	bl	1000f8f8 <fld_sq>
	/* 2^102 - 2^2 */ fld_sq(t0, t1);
1000fe9a:	a95a      	add	r1, sp, #360	@ 0x168
1000fe9c:	a850      	add	r0, sp, #320	@ 0x140
1000fe9e:	f7ff fd2b 	bl	1000f8f8 <fld_sq>
1000fea2:	2431      	movs	r4, #49	@ 0x31
	/* 2^200 - 2^100 */ for (i = 2; i < 100; i += 2) { fld_sq(t1, t0); fld_sq(t0, t1); }
1000fea4:	a950      	add	r1, sp, #320	@ 0x140
1000fea6:	a85a      	add	r0, sp, #360	@ 0x168
1000fea8:	f7ff fd26 	bl	1000f8f8 <fld_sq>
1000feac:	a95a      	add	r1, sp, #360	@ 0x168
1000feae:	a850      	add	r0, sp, #320	@ 0x140
1000feb0:	f7ff fd22 	bl	1000f8f8 <fld_sq>
1000feb4:	3c01      	subs	r4, #1
1000feb6:	d1f5      	bne.n	1000fea4 <fld_inv+0x148>
	/* 2^200 - 2^0 */ fld_mul(t1, t0, z2_100_0);
1000feb8:	aa46      	add	r2, sp, #280	@ 0x118
1000feba:	a950      	add	r1, sp, #320	@ 0x140
1000febc:	a85a      	add	r0, sp, #360	@ 0x168
1000febe:	f7ff f9c9 	bl	1000f254 <fld_mul>

	/* 2^201 - 2^1 */ fld_sq(t0, t1);
1000fec2:	a95a      	add	r1, sp, #360	@ 0x168
1000fec4:	a850      	add	r0, sp, #320	@ 0x140
1000fec6:	f7ff fd17 	bl	1000f8f8 <fld_sq>
	/* 2^202 - 2^2 */ fld_sq(t1, t0);
1000feca:	a950      	add	r1, sp, #320	@ 0x140
1000fecc:	a85a      	add	r0, sp, #360	@ 0x168
1000fece:	f7ff fd13 	bl	1000f8f8 <fld_sq>
1000fed2:	2418      	movs	r4, #24
	/* 2^250 - 2^50 */ for (i = 2; i < 50; i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
1000fed4:	a95a      	add	r1, sp, #360	@ 0x168
1000fed6:	a850      	add	r0, sp, #320	@ 0x140
1000fed8:	f7ff fd0e 	bl	1000f8f8 <fld_sq>
1000fedc:	a950      	add	r1, sp, #320	@ 0x140
1000fede:	a85a      	add	r0, sp, #360	@ 0x168
1000fee0:	f7ff fd0a 	bl	1000f8f8 <fld_sq>
1000fee4:	3c01      	subs	r4, #1
1000fee6:	d1f5      	bne.n	1000fed4 <fld_inv+0x178>
	/* 2^250 - 2^0 */ fld_mul(t0, t1, z2_50_0);
1000fee8:	aa3c      	add	r2, sp, #240	@ 0xf0
1000feea:	a95a      	add	r1, sp, #360	@ 0x168
1000feec:	a850      	add	r0, sp, #320	@ 0x140
1000feee:	f7ff f9b1 	bl	1000f254 <fld_mul>

	/* 2^251 - 2^1 */ fld_sq(t1, t0);
1000fef2:	a950      	add	r1, sp, #320	@ 0x140
1000fef4:	a85a      	add	r0, sp, #360	@ 0x168
1000fef6:	f7ff fcff 	bl	1000f8f8 <fld_sq>
	/* 2^252 - 2^2 */ fld_sq(t0, t1);
1000fefa:	a95a      	add	r1, sp, #360	@ 0x168
1000fefc:	a850      	add	r0, sp, #320	@ 0x140
1000fefe:	f7ff fcfb 	bl	1000f8f8 <fld_sq>
	
	/* 2^253 - 2^3 */ fld_sq(t1, t0);
1000ff02:	a950      	add	r1, sp, #320	@ 0x140
1000ff04:	a85a      	add	r0, sp, #360	@ 0x168
1000ff06:	f7ff fcf7 	bl	1000f8f8 <fld_sq>
	/* 2^254 - 2^4 */ fld_sq(t0, t1);
1000ff0a:	a95a      	add	r1, sp, #360	@ 0x168
1000ff0c:	a850      	add	r0, sp, #320	@ 0x140
1000ff0e:	f7ff fcf3 	bl	1000f8f8 <fld_sq>
	/* 2^255 - 2^5 */ fld_sq(t1, t0);
1000ff12:	a950      	add	r1, sp, #320	@ 0x140
1000ff14:	a85a      	add	r0, sp, #360	@ 0x168
1000ff16:	f7ff fcef 	bl	1000f8f8 <fld_sq>
	/* 2^255 - 21 */ fld_mul(res, t1, z11);
1000ff1a:	aa14      	add	r2, sp, #80	@ 0x50
1000ff1c:	a95a      	add	r1, sp, #360	@ 0x168
1000ff1e:	4628      	mov	r0, r5
1000ff20:	f7ff f998 	bl	1000f254 <fld_mul>
}
1000ff24:	b065      	add	sp, #404	@ 0x194
1000ff26:	bd30      	pop	{r4, r5, pc}

1000ff28 <md5Step>:
}

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
1000ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t AA = buffer[0];
    uint32_t BB = buffer[1];
1000ff2c:	e9d0 8a00 	ldrd	r8, sl, [r0]
    uint32_t CC = buffer[2];
1000ff30:	f8d0 b008 	ldr.w	fp, [r0, #8]
    uint32_t DD = buffer[3];
1000ff34:	4e32      	ldr	r6, [pc, #200]	@ (10010000 <md5Step+0xd8>)
1000ff36:	4d33      	ldr	r5, [pc, #204]	@ (10010004 <md5Step+0xdc>)
void md5Step(uint32_t *buffer, uint32_t *input){
1000ff38:	b085      	sub	sp, #20
1000ff3a:	4689      	mov	r9, r1
    uint32_t DD = buffer[3];
1000ff3c:	68c1      	ldr	r1, [r0, #12]

    uint32_t E;

    unsigned int j;

    for(unsigned int i = 0; i < 64; ++i){
1000ff3e:	f8cd b00c 	str.w	fp, [sp, #12]
void md5Step(uint32_t *buffer, uint32_t *input){
1000ff42:	4607      	mov	r7, r0
1000ff44:	e9cd 8a01 	strd	r8, sl, [sp, #4]
    uint32_t CC = buffer[2];
1000ff48:	465c      	mov	r4, fp
    uint32_t BB = buffer[1];
1000ff4a:	46d6      	mov	lr, sl
    uint32_t DD = buffer[3];
1000ff4c:	4608      	mov	r0, r1
    for(unsigned int i = 0; i < 64; ++i){
1000ff4e:	f04f 0c00 	mov.w	ip, #0
1000ff52:	468a      	mov	sl, r1
1000ff54:	46bb      	mov	fp, r7
1000ff56:	e01d      	b.n	1000ff94 <md5Step+0x6c>
        switch(i / 16){
1000ff58:	b3ab      	cbz	r3, 1000ffc6 <md5Step+0x9e>
            case 2:
                E = H(BB, CC, DD);
                j = ((i * 3) + 5) % 16;
                break;
            default:
                E = I(BB, CC, DD);
1000ff5a:	ea6e 0200 	orn	r2, lr, r0
                j = (i * 7) % 16;
1000ff5e:	ebcc 03cc 	rsb	r3, ip, ip, lsl #3
                E = I(BB, CC, DD);
1000ff62:	4062      	eors	r2, r4
                j = (i * 7) % 16;
1000ff64:	f003 030f 	and.w	r3, r3, #15
        }

        uint32_t temp = DD;
        DD = CC;
        CC = BB;
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
1000ff68:	f856 7f04 	ldr.w	r7, [r6, #4]!
1000ff6c:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
    return (x << n) | (x >> (32 - n));
1000ff70:	f855 3f04 	ldr.w	r3, [r5, #4]!
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
1000ff74:	443a      	add	r2, r7
1000ff76:	440a      	add	r2, r1
1000ff78:	4442      	add	r2, r8
    return (x << n) | (x >> (32 - n));
1000ff7a:	f1c3 0320 	rsb	r3, r3, #32
    for(unsigned int i = 0; i < 64; ++i){
1000ff7e:	f10c 0c01 	add.w	ip, ip, #1
    return (x << n) | (x >> (32 - n));
1000ff82:	41da      	rors	r2, r3
    for(unsigned int i = 0; i < 64; ++i){
1000ff84:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
1000ff88:	4472      	add	r2, lr
    for(unsigned int i = 0; i < 64; ++i){
1000ff8a:	4680      	mov	r8, r0
1000ff8c:	d022      	beq.n	1000ffd4 <md5Step+0xac>
1000ff8e:	4620      	mov	r0, r4
1000ff90:	4674      	mov	r4, lr
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
1000ff92:	4696      	mov	lr, r2
        switch(i / 16){
1000ff94:	ea4f 131c 	mov.w	r3, ip, lsr #4
1000ff98:	2b01      	cmp	r3, #1
1000ff9a:	d00a      	beq.n	1000ffb2 <md5Step+0x8a>
1000ff9c:	2b02      	cmp	r3, #2
1000ff9e:	d1db      	bne.n	1000ff58 <md5Step+0x30>
                j = ((i * 3) + 5) % 16;
1000ffa0:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
                E = H(BB, CC, DD);
1000ffa4:	ea8e 0204 	eor.w	r2, lr, r4
                j = ((i * 3) + 5) % 16;
1000ffa8:	3305      	adds	r3, #5
                E = H(BB, CC, DD);
1000ffaa:	4042      	eors	r2, r0
                j = ((i * 3) + 5) % 16;
1000ffac:	f003 030f 	and.w	r3, r3, #15
                break;
1000ffb0:	e7da      	b.n	1000ff68 <md5Step+0x40>
                E = G(BB, CC, DD);
1000ffb2:	ea8e 0204 	eor.w	r2, lr, r4
                j = ((i * 5) + 1) % 16;
1000ffb6:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
                E = G(BB, CC, DD);
1000ffba:	4002      	ands	r2, r0
                j = ((i * 5) + 1) % 16;
1000ffbc:	3301      	adds	r3, #1
                E = G(BB, CC, DD);
1000ffbe:	4062      	eors	r2, r4
                j = ((i * 5) + 1) % 16;
1000ffc0:	f003 030f 	and.w	r3, r3, #15
                break;
1000ffc4:	e7d0      	b.n	1000ff68 <md5Step+0x40>
                E = F(BB, CC, DD);
1000ffc6:	ea84 0200 	eor.w	r2, r4, r0
1000ffca:	ea02 020e 	and.w	r2, r2, lr
1000ffce:	4042      	eors	r2, r0
                break;
1000ffd0:	4663      	mov	r3, ip
1000ffd2:	e7c9      	b.n	1000ff68 <md5Step+0x40>
        AA = temp;
    }

    buffer[0] += AA;
1000ffd4:	465f      	mov	r7, fp
1000ffd6:	4651      	mov	r1, sl
1000ffd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
1000ffdc:	f8dd a008 	ldr.w	sl, [sp, #8]
1000ffe0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    buffer[1] += BB;
1000ffe4:	eb0a 0302 	add.w	r3, sl, r2
    buffer[0] += AA;
1000ffe8:	4440      	add	r0, r8
    buffer[2] += CC;
1000ffea:	eb0b 020e 	add.w	r2, fp, lr
    buffer[3] += DD;
1000ffee:	440c      	add	r4, r1
    buffer[1] += BB;
1000fff0:	e9c7 0300 	strd	r0, r3, [r7]
    buffer[3] += DD;
1000fff4:	e9c7 2402 	strd	r2, r4, [r7, #8]
}
1000fff8:	b005      	add	sp, #20
1000fffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000fffe:	bf00      	nop
10010000:	100235fc 	.word	0x100235fc
10010004:	100236fc 	.word	0x100236fc

10010008 <md5Update>:
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
10010008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    unsigned int offset = ctx->size % 64;
1001000c:	e9d0 5300 	ldrd	r5, r3, [r0]
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
10010010:	4680      	mov	r8, r0
    ctx->size += (uint64_t)input_len;
10010012:	1950      	adds	r0, r2, r5
10010014:	f143 0300 	adc.w	r3, r3, #0
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
10010018:	b091      	sub	sp, #68	@ 0x44
    ctx->size += (uint64_t)input_len;
1001001a:	f8c8 0000 	str.w	r0, [r8]
1001001e:	f8c8 3004 	str.w	r3, [r8, #4]
    for(unsigned int i = 0; i < input_len; ++i){
10010022:	b38a      	cbz	r2, 10010088 <md5Update+0x80>
10010024:	440a      	add	r2, r1
10010026:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
1001002a:	1e4e      	subs	r6, r1, #1
1001002c:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
10010030:	ac0f      	add	r4, sp, #60	@ 0x3c
            md5Step(ctx->buffer, input);
10010032:	f108 0708 	add.w	r7, r8, #8
10010036:	e002      	b.n	1001003e <md5Update+0x36>
    for(unsigned int i = 0; i < input_len; ++i){
10010038:	45b1      	cmp	r9, r6
1001003a:	461d      	mov	r5, r3
1001003c:	d024      	beq.n	10010088 <md5Update+0x80>
        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
1001003e:	eb08 0205 	add.w	r2, r8, r5
10010042:	1c6b      	adds	r3, r5, #1
10010044:	f816 1f01 	ldrb.w	r1, [r6, #1]!
10010048:	7611      	strb	r1, [r2, #24]
        if(offset % 64 == 0){
1001004a:	f013 053f 	ands.w	r5, r3, #63	@ 0x3f
1001004e:	d1f3      	bne.n	10010038 <md5Update+0x30>
10010050:	4642      	mov	r2, r8
10010052:	f1ad 0104 	sub.w	r1, sp, #4
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
10010056:	7e93      	ldrb	r3, [r2, #26]
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10010058:	f892 e01b 	ldrb.w	lr, [r2, #27]
                           (uint32_t)(ctx->input[(j * 4)]);
1001005c:	f892 c018 	ldrb.w	ip, [r2, #24]
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
10010060:	7e50      	ldrb	r0, [r2, #25]
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
10010062:	041b      	lsls	r3, r3, #16
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10010064:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
10010068:	ea43 030c 	orr.w	r3, r3, ip
1001006c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10010070:	f841 3f04 	str.w	r3, [r1, #4]!
            for(unsigned int j = 0; j < 16; ++j){
10010074:	428c      	cmp	r4, r1
10010076:	f102 0204 	add.w	r2, r2, #4
1001007a:	d1ec      	bne.n	10010056 <md5Update+0x4e>
            md5Step(ctx->buffer, input);
1001007c:	4669      	mov	r1, sp
1001007e:	4638      	mov	r0, r7
10010080:	f7ff ff52 	bl	1000ff28 <md5Step>
    for(unsigned int i = 0; i < input_len; ++i){
10010084:	45b1      	cmp	r9, r6
10010086:	d1da      	bne.n	1001003e <md5Update+0x36>
}
10010088:	b011      	add	sp, #68	@ 0x44
1001008a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1001008e:	bf00      	nop

10010090 <md5Finalize>:
void md5Finalize(MD5Context *ctx){
10010090:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int offset = ctx->size % 64;
10010092:	6805      	ldr	r5, [r0, #0]
    md5Update(ctx, PADDING, padding_length);
10010094:	491e      	ldr	r1, [pc, #120]	@ (10010110 <md5Finalize+0x80>)
    unsigned int offset = ctx->size % 64;
10010096:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
1001009a:	2d37      	cmp	r5, #55	@ 0x37
1001009c:	bf94      	ite	ls
1001009e:	f1c5 0538 	rsbls	r5, r5, #56	@ 0x38
100100a2:	f1c5 0578 	rsbhi	r5, r5, #120	@ 0x78
void md5Finalize(MD5Context *ctx){
100100a6:	4604      	mov	r4, r0
100100a8:	b091      	sub	sp, #68	@ 0x44
    md5Update(ctx, PADDING, padding_length);
100100aa:	462a      	mov	r2, r5
100100ac:	f7ff ffac 	bl	10010008 <md5Update>
    ctx->size -= (uint64_t)padding_length;
100100b0:	e9d4 6300 	ldrd	r6, r3, [r4]
100100b4:	1b76      	subs	r6, r6, r5
100100b6:	f163 0700 	sbc.w	r7, r3, #0
100100ba:	e9c4 6700 	strd	r6, r7, [r4]
    for(unsigned int j = 0; j < 14; ++j){
100100be:	f1ad 0c04 	sub.w	ip, sp, #4
100100c2:	ad0d      	add	r5, sp, #52	@ 0x34
    ctx->size -= (uint64_t)padding_length;
100100c4:	4621      	mov	r1, r4
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
100100c6:	7e8b      	ldrb	r3, [r1, #26]
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
100100c8:	7eca      	ldrb	r2, [r1, #27]
                   (uint32_t)(ctx->input[(j * 4)]);
100100ca:	7e08      	ldrb	r0, [r1, #24]
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
100100cc:	f891 e019 	ldrb.w	lr, [r1, #25]
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
100100d0:	041b      	lsls	r3, r3, #16
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
100100d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
100100d6:	4303      	orrs	r3, r0
100100d8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
100100dc:	f84c 3f04 	str.w	r3, [ip, #4]!
    for(unsigned int j = 0; j < 14; ++j){
100100e0:	45ac      	cmp	ip, r5
100100e2:	f101 0104 	add.w	r1, r1, #4
100100e6:	d1ee      	bne.n	100100c6 <md5Finalize+0x36>
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
100100e8:	00ff      	lsls	r7, r7, #3
    input[14] = (uint32_t)(ctx->size * 8);
100100ea:	00f2      	lsls	r2, r6, #3
    md5Step(ctx->buffer, input);
100100ec:	f104 0008 	add.w	r0, r4, #8
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
100100f0:	ea47 7756 	orr.w	r7, r7, r6, lsr #29
    md5Step(ctx->buffer, input);
100100f4:	4669      	mov	r1, sp
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
100100f6:	e9cd 270e 	strd	r2, r7, [sp, #56]	@ 0x38
    md5Step(ctx->buffer, input);
100100fa:	f7ff ff15 	bl	1000ff28 <md5Step>
    for(unsigned int i = 0; i < 4; ++i){
100100fe:	1d23      	adds	r3, r4, #4
10010100:	3414      	adds	r4, #20
        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
10010102:	f853 2f04 	ldr.w	r2, [r3, #4]!
10010106:	651a      	str	r2, [r3, #80]	@ 0x50
    for(unsigned int i = 0; i < 4; ++i){
10010108:	429c      	cmp	r4, r3
1001010a:	d1fa      	bne.n	10010102 <md5Finalize+0x72>
}
1001010c:	b011      	add	sp, #68	@ 0x44
1001010e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010110:	20000000 	.word	0x20000000
10010114:	00000000 	.word	0x00000000

10010118 <md5hash>:

/*
 * Functions that run the algorithm on the provided input and put the digest into result.
 * result should be able to store 16 bytes.
 */
void md5hash(uint8_t *input, size_t len, uint8_t *result){
10010118:	b510      	push	{r4, lr}
    ctx->size = (uint64_t)0;
1001011a:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 10010160 <md5hash+0x48>
void md5hash(uint8_t *input, size_t len, uint8_t *result){
1001011e:	b09a      	sub	sp, #104	@ 0x68
    ctx->size = (uint64_t)0;
10010120:	ed8d 7b00 	vstr	d7, [sp]
    ctx->buffer[0] = (uint32_t)A;
10010124:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 10010168 <md5hash+0x50>
10010128:	ed8d 7b02 	vstr	d7, [sp, #8]
1001012c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 10010170 <md5hash+0x58>
void md5hash(uint8_t *input, size_t len, uint8_t *result){
10010130:	460b      	mov	r3, r1
10010132:	4614      	mov	r4, r2
    MD5Context ctx;
    md5Init(&ctx);
    md5Update(&ctx, (uint8_t *)input, len);
10010134:	4601      	mov	r1, r0
10010136:	461a      	mov	r2, r3
10010138:	4668      	mov	r0, sp
    ctx->buffer[0] = (uint32_t)A;
1001013a:	ed8d 7b04 	vstr	d7, [sp, #16]
    md5Update(&ctx, (uint8_t *)input, len);
1001013e:	f7ff ff63 	bl	10010008 <md5Update>
    md5Finalize(&ctx);
10010142:	4668      	mov	r0, sp
10010144:	f7ff ffa4 	bl	10010090 <md5Finalize>

    memcpy(result, ctx.digest, 16);
10010148:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
1001014c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
10010150:	6020      	str	r0, [r4, #0]
10010152:	6061      	str	r1, [r4, #4]
10010154:	60a2      	str	r2, [r4, #8]
10010156:	60e3      	str	r3, [r4, #12]
}
10010158:	b01a      	add	sp, #104	@ 0x68
1001015a:	bd10      	pop	{r4, pc}
1001015c:	f3af 8000 	nop.w
	...
10010168:	67452301 	.word	0x67452301
1001016c:	efcdab89 	.word	0xefcdab89
10010170:	98badcfe 	.word	0x98badcfe
10010174:	10325476 	.word	0x10325476

10010178 <sc_barrett>:
 * conditionally subtract m from the result.
 *
 */
static void
sc_barrett(sc_t res, const lsc_t x)
{
10010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001017c:	4e61      	ldr	r6, [pc, #388]	@ (10010304 <sc_barrett+0x18c>)
1001017e:	f101 0720 	add.w	r7, r1, #32
	/* 
	 * step 1: q <- floor( floor(x/b^(k-1)) * mu / b^(k+1) )
	 */

	/* calculate carry from the (k-1)-th and k-th position of floor(x/b^(k-1))*mu */
	carry = 0;
10010182:	2300      	movs	r3, #0
{
10010184:	b097      	sub	sp, #92	@ 0x5c
10010186:	460c      	mov	r4, r1
10010188:	4605      	mov	r5, r0
1001018a:	f1a6 0828 	sub.w	r8, r6, #40	@ 0x28
1001018e:	46be      	mov	lr, r7
	carry = 0;
10010190:	469c      	mov	ip, r3
	for (i = 0; i <= K-1; i++)
		carry += (llimb_t)x[K-1+i] * con_mu[K-1-i];
10010192:	f856 1c04 	ldr.w	r1, [r6, #-4]
10010196:	f85e 0f04 	ldr.w	r0, [lr, #4]!
1001019a:	4632      	mov	r2, r6
1001019c:	3e04      	subs	r6, #4
	for (i = 0; i <= K-1; i++)
1001019e:	45b0      	cmp	r8, r6
		carry += (llimb_t)x[K-1+i] * con_mu[K-1-i];
100101a0:	fbc0 3c01 	smlal	r3, ip, r0, r1
	for (i = 0; i <= K-1; i++)
100101a4:	d1f5      	bne.n	10010192 <sc_barrett+0x1a>
	carry >>= LB;
100101a6:	f8df 9164 	ldr.w	r9, [pc, #356]	@ 1001030c <sc_barrett+0x194>
100101aa:	0e9b      	lsrs	r3, r3, #26
100101ac:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
100101b0:	4649      	mov	r1, r9
100101b2:	ea4f 6cac 	mov.w	ip, ip, asr #26
	for (i = 0; i <= K; i++)
		carry += (llimb_t)x[K-1+i] * con_mu[K-i];
100101b6:	468e      	mov	lr, r1
100101b8:	f857 6f04 	ldr.w	r6, [r7, #4]!
100101bc:	f851 0d04 	ldr.w	r0, [r1, #-4]!
	for (i = 0; i <= K; i++)
100101c0:	4572      	cmp	r2, lr
		carry += (llimb_t)x[K-1+i] * con_mu[K-i];
100101c2:	fbc6 3c00 	smlal	r3, ip, r6, r0
	for (i = 0; i <= K; i++)
100101c6:	d1f6      	bne.n	100101b6 <sc_barrett+0x3e>

	
	for (j = K+1; j <= 2*K; j++) {
100101c8:	46ee      	mov	lr, sp
100101ca:	f104 0824 	add.w	r8, r4, #36	@ 0x24
100101ce:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
	for (i = 0; i <= K; i++)
100101d2:	46f2      	mov	sl, lr
		carry >>= LB;
100101d4:	0e9b      	lsrs	r3, r3, #26
100101d6:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
100101da:	464e      	mov	r6, r9
100101dc:	ea4f 6cac 	mov.w	ip, ip, asr #26
100101e0:	4642      	mov	r2, r8
		for (i = j-K; i <= K; i++)
			carry += (llimb_t)x[K-1+i] * con_mu[j-i];
100101e2:	f852 0f04 	ldr.w	r0, [r2, #4]!
100101e6:	f856 1d04 	ldr.w	r1, [r6, #-4]!
		for (i = j-K; i <= K; i++)
100101ea:	4297      	cmp	r7, r2
			carry += (llimb_t)x[K-1+i] * con_mu[j-i];
100101ec:	fbc0 3c01 	smlal	r3, ip, r0, r1
		for (i = j-K; i <= K; i++)
100101f0:	d1f7      	bne.n	100101e2 <sc_barrett+0x6a>
	for (j = K+1; j <= 2*K; j++) {
100101f2:	f108 0804 	add.w	r8, r8, #4
		
		q[j-K-1] = carry & MSK;
100101f6:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
	for (j = K+1; j <= 2*K; j++) {
100101fa:	4547      	cmp	r7, r8
		q[j-K-1] = carry & MSK;
100101fc:	f84a 2b04 	str.w	r2, [sl], #4
	for (j = K+1; j <= 2*K; j++) {
10010200:	d1e8      	bne.n	100101d4 <sc_barrett+0x5c>
	}
	q[j-K-1] = carry >> LB;
10010202:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 10010310 <sc_barrett+0x198>
10010206:	0e9b      	lsrs	r3, r3, #26
10010208:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
	/*
	 * step 2: r <- (x - q * m) mod b^(k+1)
	 */

	/* r <- q*m mod b^(k+1) */
	for (j = 0, carry = 0; j <= K; j++) {
1001020c:	f04f 0900 	mov.w	r9, #0
10010210:	f10d 082c 	add.w	r8, sp, #44	@ 0x2c
	q[j-K-1] = carry >> LB;
10010214:	930a      	str	r3, [sp, #40]	@ 0x28
10010216:	46c3      	mov	fp, r8
	for (j = 0, carry = 0; j <= K; j++) {
10010218:	464b      	mov	r3, r9
1001021a:	46cc      	mov	ip, r9
1001021c:	f1aa 0704 	sub.w	r7, sl, #4
		carry >>= LB;
10010220:	0e9b      	lsrs	r3, r3, #26
10010222:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
10010226:	4652      	mov	r2, sl
10010228:	ea4f 6cac 	mov.w	ip, ip, asr #26
1001022c:	4676      	mov	r6, lr
		
		for (i = 0; i <= j; i++)
			carry += (llimb_t) q[i]*con_m[j-i];
1001022e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
10010232:	f856 0b04 	ldr.w	r0, [r6], #4
		for (i = 0; i <= j; i++)
10010236:	4297      	cmp	r7, r2
			carry += (llimb_t) q[i]*con_m[j-i];
10010238:	fbc0 3c01 	smlal	r3, ip, r0, r1
		for (i = 0; i <= j; i++)
1001023c:	d1f7      	bne.n	1001022e <sc_barrett+0xb6>
	for (j = 0, carry = 0; j <= K; j++) {
1001023e:	f109 0901 	add.w	r9, r9, #1
		
		r[j] = carry & MSK;
10010242:	f023 417c 	bic.w	r1, r3, #4227858432	@ 0xfc000000
	for (j = 0, carry = 0; j <= K; j++) {
10010246:	f1b9 0f0b 	cmp.w	r9, #11
		r[j] = carry & MSK;
1001024a:	f84b 1b04 	str.w	r1, [fp], #4
	for (j = 0, carry = 0; j <= K; j++) {
1001024e:	f10a 0a04 	add.w	sl, sl, #4
10010252:	d1e5      	bne.n	10010220 <sc_barrett+0xa8>
	}

	/* r <- x - r mod b^(k+1) */
	for (i = 0, carry = 0; i <= K; i++) {
10010254:	2300      	movs	r3, #0
10010256:	f1a4 0c04 	sub.w	ip, r4, #4
	for (j = 0, carry = 0; j <= K; j++) {
1001025a:	af0b      	add	r7, sp, #44	@ 0x2c
1001025c:	3428      	adds	r4, #40	@ 0x28
	for (i = 0, carry = 0; i <= K; i++) {
1001025e:	4618      	mov	r0, r3
		carry = (carry >> LB) + x[i] - r[i];
10010260:	f85c 1f04 	ldr.w	r1, [ip, #4]!
10010264:	683e      	ldr	r6, [r7, #0]
10010266:	0e9b      	lsrs	r3, r3, #26
10010268:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
1001026c:	185b      	adds	r3, r3, r1
1001026e:	ea4f 71e1 	mov.w	r1, r1, asr #31
10010272:	eb41 70e0 	adc.w	r0, r1, r0, asr #31
10010276:	1b9b      	subs	r3, r3, r6
		r[i] = carry & MSK;
10010278:	f023 417c 	bic.w	r1, r3, #4227858432	@ 0xfc000000
		carry = (carry >> LB) + x[i] - r[i];
1001027c:	eb60 70e6 	sbc.w	r0, r0, r6, asr #31
	for (i = 0, carry = 0; i <= K; i++) {
10010280:	4564      	cmp	r4, ip
		r[i] = carry & MSK;
10010282:	f847 1b04 	str.w	r1, [r7], #4
	for (i = 0, carry = 0; i <= K; i++) {
10010286:	d1eb      	bne.n	10010260 <sc_barrett+0xe8>
	 */

	/*
	 * step 4: if (r > m) r -= m;
	 */
	q[0] = r[0] - con_m[0];
10010288:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001028a:	481f      	ldr	r0, [pc, #124]	@ (10010308 <sc_barrett+0x190>)
1001028c:	4418      	add	r0, r3
1001028e:	ab0b      	add	r3, sp, #44	@ 0x2c
10010290:	9000      	str	r0, [sp, #0]
	for (i = 1; i <= K; i++) {
10010292:	f10d 0c54 	add.w	ip, sp, #84	@ 0x54
	q[0] = r[0] - con_m[0];
10010296:	4676      	mov	r6, lr
10010298:	461c      	mov	r4, r3
		q[i] = (q[i-1] >> LB) + r[i] - con_m[i];
1001029a:	f854 1f04 	ldr.w	r1, [r4, #4]!
1001029e:	f852 7f04 	ldr.w	r7, [r2, #4]!
100102a2:	4603      	mov	r3, r0
100102a4:	eb01 61a0 	add.w	r1, r1, r0, asr #26
100102a8:	1bc8      	subs	r0, r1, r7
		q[i-1] &= MSK;
100102aa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
	for (i = 1; i <= K; i++) {
100102ae:	45a4      	cmp	ip, r4
		q[i] = (q[i-1] >> LB) + r[i] - con_m[i];
100102b0:	6070      	str	r0, [r6, #4]
		q[i-1] &= MSK;
100102b2:	f846 3b04 	str.w	r3, [r6], #4
	for (i = 1; i <= K; i++) {
100102b6:	d1f0      	bne.n	1001029a <sc_barrett+0x122>
	}

	mask = ~(q[K] >> (8*sizeof(limb_t)-1));
100102b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
100102ba:	a816      	add	r0, sp, #88	@ 0x58
100102bc:	17c9      	asrs	r1, r1, #31
	for (i = 0; i <= K; i++)
		r[i] ^= (r[i] ^ q[i]) & mask;
100102be:	f8d8 3000 	ldr.w	r3, [r8]
100102c2:	f85e 2b04 	ldr.w	r2, [lr], #4
100102c6:	4053      	eors	r3, r2
100102c8:	400b      	ands	r3, r1
100102ca:	4053      	eors	r3, r2
100102cc:	f848 3b04 	str.w	r3, [r8], #4
	for (i = 0; i <= K; i++)
100102d0:	4580      	cmp	r8, r0
100102d2:	d1f4      	bne.n	100102be <sc_barrett+0x146>

	/*
	 * step 5: copy out and clean up
	 */
	for (i = 0; i < K; i++)
		res[i] = r[i];
100102d4:	ae0b      	add	r6, sp, #44	@ 0x2c
100102d6:	af13      	add	r7, sp, #76	@ 0x4c
100102d8:	4634      	mov	r4, r6
100102da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
100102dc:	42bc      	cmp	r4, r7
100102de:	f105 0510 	add.w	r5, r5, #16
100102e2:	4626      	mov	r6, r4
100102e4:	f845 0c10 	str.w	r0, [r5, #-16]
100102e8:	f845 1c0c 	str.w	r1, [r5, #-12]
100102ec:	f845 2c08 	str.w	r2, [r5, #-8]
100102f0:	f845 3c04 	str.w	r3, [r5, #-4]
100102f4:	d1f0      	bne.n	100102d8 <sc_barrett+0x160>
100102f6:	ce03      	ldmia	r6!, {r0, r1}
100102f8:	6028      	str	r0, [r5, #0]
100102fa:	6069      	str	r1, [r5, #4]
}
100102fc:	b017      	add	sp, #92	@ 0x5c
100102fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010302:	bf00      	nop
10010304:	10023850 	.word	0x10023850
10010308:	ff0a2c13 	.word	0xff0a2c13
1001030c:	10023854 	.word	0x10023854
10010310:	10023858 	.word	0x10023858

10010314 <sc_reduce>:
/*
 * sc_reduce - completely carry and reduce element e.
 */
void
sc_reduce(sc_t dst, const sc_t e)
{
10010314:	b510      	push	{r4, lr}
10010316:	b094      	sub	sp, #80	@ 0x50
10010318:	4604      	mov	r4, r0
1001031a:	1f0a      	subs	r2, r1, #4
1001031c:	46ec      	mov	ip, sp
1001031e:	f101 0e24 	add.w	lr, r1, #36	@ 0x24
	lsc_t tmp;
	limb_t carry;
	int i;

	/* carry e */
	for (carry = 0, i = 0; i < K; i++) {
10010322:	2300      	movs	r3, #0
		carry = (carry >> LB) + e[i];
10010324:	f852 1f04 	ldr.w	r1, [r2, #4]!
10010328:	eb01 63a3 	add.w	r3, r1, r3, asr #26
		tmp[i] = carry & MSK;
1001032c:	f023 417c 	bic.w	r1, r3, #4227858432	@ 0xfc000000
	for (carry = 0, i = 0; i < K; i++) {
10010330:	4596      	cmp	lr, r2
		tmp[i] = carry & MSK;
10010332:	f84c 1b04 	str.w	r1, [ip], #4
	for (carry = 0, i = 0; i < K; i++) {
10010336:	d1f5      	bne.n	10010324 <sc_reduce+0x10>
	}
	tmp[K] = carry >> LB;
10010338:	169b      	asrs	r3, r3, #26
	for (i = K+1; i < 2*K; i++)
		tmp[i] = 0;
1001033a:	2224      	movs	r2, #36	@ 0x24
1001033c:	2100      	movs	r1, #0
1001033e:	a80b      	add	r0, sp, #44	@ 0x2c
	tmp[K] = carry >> LB;
10010340:	930a      	str	r3, [sp, #40]	@ 0x28
		tmp[i] = 0;
10010342:	f006 fc4b 	bl	10016bdc <memset>
	
	/* reduce modulo m */
	sc_barrett(dst, tmp);
10010346:	4669      	mov	r1, sp
10010348:	4620      	mov	r0, r4
1001034a:	f7ff ff15 	bl	10010178 <sc_barrett>
}
1001034e:	b014      	add	sp, #80	@ 0x50
10010350:	bd10      	pop	{r4, pc}
10010352:	bf00      	nop

10010354 <sc_import>:
 * assumes:
 *   len <= 64
 */
void
sc_import(sc_t dst, const uint8_t *src, size_t len)
{
10010354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t *endp = src + len;
	lsc_t tmp;
	uint64_t foo;
	int i, fill;

	fill = 0;
10010358:	2300      	movs	r3, #0
{
1001035a:	b094      	sub	sp, #80	@ 0x50
	const uint8_t *endp = src + len;
1001035c:	188e      	adds	r6, r1, r2
	foo = 0;
	for (i = 0; i < 2*K; i++) {
1001035e:	f1ad 0704 	sub.w	r7, sp, #4
10010362:	f10d 084c 	add.w	r8, sp, #76	@ 0x4c
	foo = 0;
10010366:	461c      	mov	r4, r3
10010368:	461d      	mov	r5, r3
		while (src < endp && fill < LB) {
1001036a:	428e      	cmp	r6, r1
1001036c:	d816      	bhi.n	1001039c <sc_import+0x48>
1001036e:	e017      	b.n	100103a0 <sc_import+0x4c>
			foo |= (uint64_t)*src++ << fill;
10010370:	f811 cb01 	ldrb.w	ip, [r1], #1
10010374:	f1a3 0220 	sub.w	r2, r3, #32
10010378:	f1c3 0e20 	rsb	lr, r3, #32
1001037c:	fa0c f202 	lsl.w	r2, ip, r2
10010380:	fa2c fe0e 	lsr.w	lr, ip, lr
10010384:	ea42 020e 	orr.w	r2, r2, lr
10010388:	fa0c fc03 	lsl.w	ip, ip, r3
		while (src < endp && fill < LB) {
1001038c:	428e      	cmp	r6, r1
			foo |= (uint64_t)*src++ << fill;
1001038e:	ea4c 0404 	orr.w	r4, ip, r4
10010392:	f103 0308 	add.w	r3, r3, #8
10010396:	ea45 0502 	orr.w	r5, r5, r2
		while (src < endp && fill < LB) {
1001039a:	d001      	beq.n	100103a0 <sc_import+0x4c>
1001039c:	2b19      	cmp	r3, #25
1001039e:	dde7      	ble.n	10010370 <sc_import+0x1c>
			fill += 8;
		}
		
		tmp[i] = foo & MSK;
100103a0:	f024 427c 	bic.w	r2, r4, #4227858432	@ 0xfc000000
100103a4:	f847 2f04 	str.w	r2, [r7, #4]!

		foo >>= LB;
100103a8:	0ea4      	lsrs	r4, r4, #26
	for (i = 0; i < 2*K; i++) {
100103aa:	4547      	cmp	r7, r8
		foo >>= LB;
100103ac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
		fill -= LB;
100103b0:	f1a3 031a 	sub.w	r3, r3, #26
		foo >>= LB;
100103b4:	ea4f 6595 	mov.w	r5, r5, lsr #26
	for (i = 0; i < 2*K; i++) {
100103b8:	d1d7      	bne.n	1001036a <sc_import+0x16>
	}

	sc_barrett(dst, tmp);
100103ba:	4669      	mov	r1, sp
100103bc:	f7ff fedc 	bl	10010178 <sc_barrett>
}
100103c0:	b014      	add	sp, #80	@ 0x50
100103c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
100103c6:	bf00      	nop

100103c8 <sc_export>:
 * sc_export - export internal sc_t format to an unsigned, 256bit
 * little-endian integer.
 */
void
sc_export(uint8_t dst[32], const sc_t x)
{
100103c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100103cc:	b08a      	sub	sp, #40	@ 0x28
100103ce:	4604      	mov	r4, r0
	const uint8_t *endp = dst+32;
	sc_t tmp;
	uint64_t foo;
	int fill, i;

	sc_reduce(tmp, x);
100103d0:	4668      	mov	r0, sp
100103d2:	f7ff ff9f 	bl	10010314 <sc_reduce>

	for (i = 0, foo = 0, fill = 0; i < K; i++) {
100103d6:	2300      	movs	r3, #0
	const uint8_t *endp = dst+32;
100103d8:	f104 0c20 	add.w	ip, r4, #32
	for (i = 0, foo = 0, fill = 0; i < K; i++) {
100103dc:	466f      	mov	r7, sp
100103de:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
100103e2:	4619      	mov	r1, r3
100103e4:	461a      	mov	r2, r3
		foo |= (uint64_t)tmp[i] << fill;
100103e6:	f857 5b04 	ldr.w	r5, [r7], #4
100103ea:	f1a3 0620 	sub.w	r6, r3, #32
100103ee:	17e8      	asrs	r0, r5, #31
100103f0:	f1c3 0e20 	rsb	lr, r3, #32
100103f4:	4098      	lsls	r0, r3
100103f6:	fa05 f606 	lsl.w	r6, r5, r6
100103fa:	fa25 fe0e 	lsr.w	lr, r5, lr
100103fe:	4330      	orrs	r0, r6
10010400:	409d      	lsls	r5, r3
		for (fill += LB; fill >= 8 && dst < endp; fill -= 8, foo >>= 8)
10010402:	331a      	adds	r3, #26
		foo |= (uint64_t)tmp[i] << fill;
10010404:	ea40 000e 	orr.w	r0, r0, lr
		for (fill += LB; fill >= 8 && dst < endp; fill -= 8, foo >>= 8)
10010408:	2b07      	cmp	r3, #7
		foo |= (uint64_t)tmp[i] << fill;
1001040a:	ea41 0105 	orr.w	r1, r1, r5
1001040e:	ea42 0200 	orr.w	r2, r2, r0
		for (fill += LB; fill >= 8 && dst < endp; fill -= 8, foo >>= 8)
10010412:	dd0e      	ble.n	10010432 <sc_export+0x6a>
10010414:	45a4      	cmp	ip, r4
10010416:	d802      	bhi.n	1001041e <sc_export+0x56>
10010418:	e00b      	b.n	10010432 <sc_export+0x6a>
1001041a:	45a4      	cmp	ip, r4
1001041c:	d009      	beq.n	10010432 <sc_export+0x6a>
1001041e:	3b08      	subs	r3, #8
10010420:	0a08      	lsrs	r0, r1, #8
10010422:	2b07      	cmp	r3, #7
			*dst++ = foo & 0xff;
10010424:	f804 1b01 	strb.w	r1, [r4], #1
		for (fill += LB; fill >= 8 && dst < endp; fill -= 8, foo >>= 8)
10010428:	ea40 6102 	orr.w	r1, r0, r2, lsl #24
1001042c:	ea4f 2212 	mov.w	r2, r2, lsr #8
10010430:	dcf3      	bgt.n	1001041a <sc_export+0x52>
	for (i = 0, foo = 0, fill = 0; i < K; i++) {
10010432:	4547      	cmp	r7, r8
10010434:	d1d7      	bne.n	100103e6 <sc_export+0x1e>
	}
}
10010436:	b00a      	add	sp, #40	@ 0x28
10010438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1001043c <i2c_simple_isr>:
    static int READ_INDEX = 0;
    static int WRITE_INDEX = 0;
    static ECTF_I2C_REGS ACTIVE_REG = RECEIVE;

    // Read interrupt flags
    uint32_t Flags = I2C_INTERFACE->intfl0;
1001043c:	4890      	ldr	r0, [pc, #576]	@ (10010680 <i2c_simple_isr+0x244>)
void i2c_simple_isr (void) {
1001043e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t Flags = I2C_INTERFACE->intfl0;
10010440:	6884      	ldr	r4, [r0, #8]
    
    // Transaction over interrupt
    if (Flags & MXC_F_I2C_INTFL0_STOP) {
10010442:	0663      	lsls	r3, r4, #25
10010444:	d549      	bpl.n	100104da <i2c_simple_isr+0x9e>
        
        // Ready any remaining data
        if (WRITE_START == true) {
10010446:	4e8f      	ldr	r6, [pc, #572]	@ (10010684 <i2c_simple_isr+0x248>)
10010448:	7833      	ldrb	r3, [r6, #0]
1001044a:	2b00      	cmp	r3, #0
1001044c:	f040 80cb 	bne.w	100105e6 <i2c_simple_isr+0x1aa>
            MXC_I2C_ReadRXFIFO(I2C_INTERFACE, (volatile unsigned char*) &ACTIVE_REG, 1);
            WRITE_START = false;
        }
        if (ACTIVE_REG <= MAX_REG) {
10010450:	4d8d      	ldr	r5, [pc, #564]	@ (10010688 <i2c_simple_isr+0x24c>)
            int available = MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE);
10010452:	488b      	ldr	r0, [pc, #556]	@ (10010680 <i2c_simple_isr+0x244>)
        if (ACTIVE_REG <= MAX_REG) {
10010454:	782b      	ldrb	r3, [r5, #0]
10010456:	2b05      	cmp	r3, #5
10010458:	d81b      	bhi.n	10010492 <i2c_simple_isr+0x56>
            int available = MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE);
1001045a:	f001 fdef 	bl	1001203c <MXC_I2C_GetRXFIFOAvailable>
            if (available < (I2C_REGS_LEN[ACTIVE_REG]-WRITE_INDEX)) {
1001045e:	7829      	ldrb	r1, [r5, #0]
10010460:	4b8a      	ldr	r3, [pc, #552]	@ (1001068c <i2c_simple_isr+0x250>)
10010462:	4d8b      	ldr	r5, [pc, #556]	@ (10010690 <i2c_simple_isr+0x254>)
10010464:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
10010468:	682b      	ldr	r3, [r5, #0]
1001046a:	1ad2      	subs	r2, r2, r3
1001046c:	4282      	cmp	r2, r0
1001046e:	f340 80da 	ble.w	10010626 <i2c_simple_isr+0x1ea>
                WRITE_INDEX += MXC_I2C_ReadRXFIFO(I2C_INTERFACE,
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
10010472:	4a88      	ldr	r2, [pc, #544]	@ (10010694 <i2c_simple_isr+0x258>)
                    MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE));
10010474:	4882      	ldr	r0, [pc, #520]	@ (10010680 <i2c_simple_isr+0x244>)
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
10010476:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
1001047a:	441f      	add	r7, r3
                    MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE));
1001047c:	f001 fdde 	bl	1001203c <MXC_I2C_GetRXFIFOAvailable>
                WRITE_INDEX += MXC_I2C_ReadRXFIFO(I2C_INTERFACE,
10010480:	4639      	mov	r1, r7
                    MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE));
10010482:	4602      	mov	r2, r0
            }
            else {
                WRITE_INDEX += MXC_I2C_ReadRXFIFO(I2C_INTERFACE,
10010484:	487e      	ldr	r0, [pc, #504]	@ (10010680 <i2c_simple_isr+0x244>)
10010486:	f001 fdd7 	bl	10012038 <MXC_I2C_ReadRXFIFO>
1001048a:	682b      	ldr	r3, [r5, #0]
1001048c:	4403      	add	r3, r0
1001048e:	602b      	str	r3, [r5, #0]
10010490:	e002      	b.n	10010498 <i2c_simple_isr+0x5c>
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
                    I2C_REGS_LEN[ACTIVE_REG]-WRITE_INDEX);
            }
        } else {
            MXC_I2C_ClearRXFIFO(I2C_INTERFACE);
10010492:	f001 fdd9 	bl	10012048 <MXC_I2C_ClearRXFIFO>
10010496:	4d7e      	ldr	r5, [pc, #504]	@ (10010690 <i2c_simple_isr+0x254>)
        }

        // Disable bulk send/receive interrupts
        MXC_I2C_DisableInt(I2C_INTERFACE, MXC_F_I2C_INTEN0_RX_THD, 0);
10010498:	4879      	ldr	r0, [pc, #484]	@ (10010680 <i2c_simple_isr+0x244>)
1001049a:	2200      	movs	r2, #0
1001049c:	2110      	movs	r1, #16
1001049e:	f001 fddb 	bl	10012058 <MXC_I2C_DisableInt>
        MXC_I2C_DisableInt(I2C_INTERFACE, MXC_F_I2C_INTEN0_TX_THD, 0);
100104a2:	4877      	ldr	r0, [pc, #476]	@ (10010680 <i2c_simple_isr+0x244>)
100104a4:	2200      	movs	r2, #0
100104a6:	2120      	movs	r1, #32
100104a8:	f001 fdd6 	bl	10012058 <MXC_I2C_DisableInt>

        // Clear FIFOs if full
        if (MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE) != 0) {
100104ac:	4874      	ldr	r0, [pc, #464]	@ (10010680 <i2c_simple_isr+0x244>)
100104ae:	f001 fdc5 	bl	1001203c <MXC_I2C_GetRXFIFOAvailable>
100104b2:	2800      	cmp	r0, #0
100104b4:	f040 80df 	bne.w	10010676 <i2c_simple_isr+0x23a>
            MXC_I2C_ClearRXFIFO(I2C_INTERFACE);
        }
        if (MXC_I2C_GetTXFIFOAvailable(I2C_INTERFACE) != 8) {
100104b8:	4871      	ldr	r0, [pc, #452]	@ (10010680 <i2c_simple_isr+0x244>)
100104ba:	f001 fdc3 	bl	10012044 <MXC_I2C_GetTXFIFOAvailable>
100104be:	2808      	cmp	r0, #8
100104c0:	d002      	beq.n	100104c8 <i2c_simple_isr+0x8c>
            MXC_I2C_ClearTXFIFO(I2C_INTERFACE);
100104c2:	486f      	ldr	r0, [pc, #444]	@ (10010680 <i2c_simple_isr+0x244>)
100104c4:	f001 fdc2 	bl	1001204c <MXC_I2C_ClearTXFIFO>
        }

        // Reset state
        READ_INDEX = 0;
100104c8:	4b73      	ldr	r3, [pc, #460]	@ (10010698 <i2c_simple_isr+0x25c>)
        WRITE_INDEX = 0;
        WRITE_START = false;

        // Clear ISR flag
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_STOP, 0);
100104ca:	486d      	ldr	r0, [pc, #436]	@ (10010680 <i2c_simple_isr+0x244>)
        READ_INDEX = 0;
100104cc:	2200      	movs	r2, #0
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_STOP, 0);
100104ce:	2140      	movs	r1, #64	@ 0x40
        WRITE_INDEX = 0;
100104d0:	602a      	str	r2, [r5, #0]
        READ_INDEX = 0;
100104d2:	601a      	str	r2, [r3, #0]
        WRITE_START = false;
100104d4:	7032      	strb	r2, [r6, #0]
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_STOP, 0);
100104d6:	f001 fdbb 	bl	10012050 <MXC_I2C_ClearFlags>
    }

    // TX Fifo Threshold Met on Read
    if (Flags & MXC_F_I2C_INTEN0_TX_THD && (I2C_INTERFACE->inten0 & MXC_F_I2C_INTEN0_TX_THD)) {
100104da:	06a7      	lsls	r7, r4, #26
100104dc:	d503      	bpl.n	100104e6 <i2c_simple_isr+0xaa>
100104de:	4868      	ldr	r0, [pc, #416]	@ (10010680 <i2c_simple_isr+0x244>)
100104e0:	68c3      	ldr	r3, [r0, #12]
100104e2:	069e      	lsls	r6, r3, #26
100104e4:	d433      	bmi.n	1001054e <i2c_simple_isr+0x112>
        // Clear ISR flag
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_TX_THD, 0);
    }

    // Read from Peripheral from Controller Match
    if (Flags & MXC_F_I2C_INTFL0_WR_ADDR_MATCH) {
100104e6:	0220      	lsls	r0, r4, #8
100104e8:	d43f      	bmi.n	1001056a <i2c_simple_isr+0x12e>
            }
        }
    }

    // Write to Peripheral from Controller Match
    if (Flags & MXC_F_I2C_INTFL0_RD_ADDR_MATCH) {
100104ea:	0262      	lsls	r2, r4, #9
100104ec:	d46c      	bmi.n	100105c8 <i2c_simple_isr+0x18c>
        // Clear flag
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_RD_ADDR_MATCH, 0);
    }

    // RX Fifo Threshold Met on Write
    if (Flags & MXC_F_I2C_INTEN0_RX_THD) {
100104ee:	06e3      	lsls	r3, r4, #27
100104f0:	d511      	bpl.n	10010516 <i2c_simple_isr+0xda>
        // We always write a register before writing data so select register
        if (WRITE_START == true) {
100104f2:	4c64      	ldr	r4, [pc, #400]	@ (10010684 <i2c_simple_isr+0x248>)
100104f4:	7823      	ldrb	r3, [r4, #0]
100104f6:	2b00      	cmp	r3, #0
100104f8:	d17c      	bne.n	100105f4 <i2c_simple_isr+0x1b8>
            MXC_I2C_ReadRXFIFO(I2C_INTERFACE, (volatile unsigned char*) &ACTIVE_REG, 1);
            WRITE_START = false;
        }
        // Read remaining data
        if (ACTIVE_REG <= MAX_REG) {
100104fa:	4c63      	ldr	r4, [pc, #396]	@ (10010688 <i2c_simple_isr+0x24c>)
            int available = MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE);
100104fc:	4860      	ldr	r0, [pc, #384]	@ (10010680 <i2c_simple_isr+0x244>)
        if (ACTIVE_REG <= MAX_REG) {
100104fe:	7823      	ldrb	r3, [r4, #0]
10010500:	2b05      	cmp	r3, #5
10010502:	d909      	bls.n	10010518 <i2c_simple_isr+0xdc>
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
                    I2C_REGS_LEN[ACTIVE_REG]-WRITE_INDEX);
            }
        // Clear out FIFO if invalid register specified
        } else {
            MXC_I2C_ClearRXFIFO(I2C_INTERFACE);
10010504:	f001 fda0 	bl	10012048 <MXC_I2C_ClearRXFIFO>
        }

        // Clear ISR flag
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_RX_THD, 0);
    }
}
10010508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_RX_THD, 0);
1001050c:	485c      	ldr	r0, [pc, #368]	@ (10010680 <i2c_simple_isr+0x244>)
1001050e:	2200      	movs	r2, #0
10010510:	2110      	movs	r1, #16
10010512:	f001 bd9d 	b.w	10012050 <MXC_I2C_ClearFlags>
}
10010516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            int available = MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE);
10010518:	f001 fd90 	bl	1001203c <MXC_I2C_GetRXFIFOAvailable>
            if (available < (I2C_REGS_LEN[ACTIVE_REG]-WRITE_INDEX)) {
1001051c:	7821      	ldrb	r1, [r4, #0]
1001051e:	4a5b      	ldr	r2, [pc, #364]	@ (1001068c <i2c_simple_isr+0x250>)
10010520:	4c5b      	ldr	r4, [pc, #364]	@ (10010690 <i2c_simple_isr+0x254>)
10010522:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
10010526:	6823      	ldr	r3, [r4, #0]
10010528:	1ad2      	subs	r2, r2, r3
1001052a:	4282      	cmp	r2, r0
1001052c:	dd70      	ble.n	10010610 <i2c_simple_isr+0x1d4>
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
1001052e:	4a59      	ldr	r2, [pc, #356]	@ (10010694 <i2c_simple_isr+0x258>)
                    MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE));
10010530:	4853      	ldr	r0, [pc, #332]	@ (10010680 <i2c_simple_isr+0x244>)
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
10010532:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
10010536:	441d      	add	r5, r3
                    MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE));
10010538:	f001 fd80 	bl	1001203c <MXC_I2C_GetRXFIFOAvailable>
                WRITE_INDEX += MXC_I2C_ReadRXFIFO(I2C_INTERFACE,
1001053c:	4629      	mov	r1, r5
                    MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE));
1001053e:	4602      	mov	r2, r0
                WRITE_INDEX += MXC_I2C_ReadRXFIFO(I2C_INTERFACE,
10010540:	484f      	ldr	r0, [pc, #316]	@ (10010680 <i2c_simple_isr+0x244>)
10010542:	f001 fd79 	bl	10012038 <MXC_I2C_ReadRXFIFO>
10010546:	6823      	ldr	r3, [r4, #0]
10010548:	4403      	add	r3, r0
1001054a:	6023      	str	r3, [r4, #0]
1001054c:	e7dc      	b.n	10010508 <i2c_simple_isr+0xcc>
        if (Flags & MXC_F_I2C_INTFL0_TX_LOCKOUT) {
1001054e:	0425      	lsls	r5, r4, #16
10010550:	f100 808b 	bmi.w	1001066a <i2c_simple_isr+0x22e>
        if (ACTIVE_REG <= MAX_REG) {
10010554:	4d4c      	ldr	r5, [pc, #304]	@ (10010688 <i2c_simple_isr+0x24c>)
10010556:	782b      	ldrb	r3, [r5, #0]
10010558:	2b05      	cmp	r3, #5
1001055a:	d969      	bls.n	10010630 <i2c_simple_isr+0x1f4>
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_TX_THD, 0);
1001055c:	4848      	ldr	r0, [pc, #288]	@ (10010680 <i2c_simple_isr+0x244>)
1001055e:	2200      	movs	r2, #0
10010560:	2120      	movs	r1, #32
10010562:	f001 fd75 	bl	10012050 <MXC_I2C_ClearFlags>
    if (Flags & MXC_F_I2C_INTFL0_WR_ADDR_MATCH) {
10010566:	0220      	lsls	r0, r4, #8
10010568:	d5bf      	bpl.n	100104ea <i2c_simple_isr+0xae>
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_WR_ADDR_MATCH, 0);
1001056a:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
1001056e:	4844      	ldr	r0, [pc, #272]	@ (10010680 <i2c_simple_isr+0x244>)
10010570:	2200      	movs	r2, #0
10010572:	f001 fd6d 	bl	10012050 <MXC_I2C_ClearFlags>
        if (Flags & MXC_F_I2C_INTFL0_TX_LOCKOUT) {
10010576:	0421      	lsls	r1, r4, #16
10010578:	d5b7      	bpl.n	100104ea <i2c_simple_isr+0xae>
            MXC_I2C_ReadRXFIFO(I2C_INTERFACE, (volatile unsigned char*) &ACTIVE_REG, 1);
1001057a:	4d43      	ldr	r5, [pc, #268]	@ (10010688 <i2c_simple_isr+0x24c>)
            MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_TX_LOCKOUT, 0);
1001057c:	4840      	ldr	r0, [pc, #256]	@ (10010680 <i2c_simple_isr+0x244>)
1001057e:	2200      	movs	r2, #0
10010580:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
10010584:	f001 fd64 	bl	10012050 <MXC_I2C_ClearFlags>
            MXC_I2C_ReadRXFIFO(I2C_INTERFACE, (volatile unsigned char*) &ACTIVE_REG, 1);
10010588:	483d      	ldr	r0, [pc, #244]	@ (10010680 <i2c_simple_isr+0x244>)
1001058a:	2201      	movs	r2, #1
1001058c:	4629      	mov	r1, r5
1001058e:	f001 fd53 	bl	10012038 <MXC_I2C_ReadRXFIFO>
            if (ACTIVE_REG <= MAX_REG) {
10010592:	782b      	ldrb	r3, [r5, #0]
10010594:	2b05      	cmp	r3, #5
10010596:	d8a8      	bhi.n	100104ea <i2c_simple_isr+0xae>
                READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE, (volatile unsigned char*)I2C_REGS[ACTIVE_REG], I2C_REGS_LEN[ACTIVE_REG]);
10010598:	4e3c      	ldr	r6, [pc, #240]	@ (1001068c <i2c_simple_isr+0x250>)
1001059a:	4a3e      	ldr	r2, [pc, #248]	@ (10010694 <i2c_simple_isr+0x258>)
1001059c:	4838      	ldr	r0, [pc, #224]	@ (10010680 <i2c_simple_isr+0x244>)
1001059e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
100105a2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
100105a6:	f001 fd4b 	bl	10012040 <MXC_I2C_WriteTXFIFO>
100105aa:	4b3b      	ldr	r3, [pc, #236]	@ (10010698 <i2c_simple_isr+0x25c>)
                if (READ_INDEX < I2C_REGS_LEN[ACTIVE_REG]) {
100105ac:	782a      	ldrb	r2, [r5, #0]
                READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE, (volatile unsigned char*)I2C_REGS[ACTIVE_REG], I2C_REGS_LEN[ACTIVE_REG]);
100105ae:	6819      	ldr	r1, [r3, #0]
                if (READ_INDEX < I2C_REGS_LEN[ACTIVE_REG]) {
100105b0:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
                READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE, (volatile unsigned char*)I2C_REGS[ACTIVE_REG], I2C_REGS_LEN[ACTIVE_REG]);
100105b4:	4408      	add	r0, r1
                if (READ_INDEX < I2C_REGS_LEN[ACTIVE_REG]) {
100105b6:	4290      	cmp	r0, r2
                READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE, (volatile unsigned char*)I2C_REGS[ACTIVE_REG], I2C_REGS_LEN[ACTIVE_REG]);
100105b8:	6018      	str	r0, [r3, #0]
                if (READ_INDEX < I2C_REGS_LEN[ACTIVE_REG]) {
100105ba:	da96      	bge.n	100104ea <i2c_simple_isr+0xae>
                    MXC_I2C_EnableInt(I2C_INTERFACE, MXC_F_I2C_INTEN0_TX_THD, 0);
100105bc:	4830      	ldr	r0, [pc, #192]	@ (10010680 <i2c_simple_isr+0x244>)
100105be:	2200      	movs	r2, #0
100105c0:	2120      	movs	r1, #32
100105c2:	f001 fd47 	bl	10012054 <MXC_I2C_EnableInt>
100105c6:	e790      	b.n	100104ea <i2c_simple_isr+0xae>
        WRITE_START = true;
100105c8:	4b2e      	ldr	r3, [pc, #184]	@ (10010684 <i2c_simple_isr+0x248>)
        MXC_I2C_EnableInt(I2C_INTERFACE, MXC_F_I2C_INTEN0_RX_THD, 0);
100105ca:	482d      	ldr	r0, [pc, #180]	@ (10010680 <i2c_simple_isr+0x244>)
100105cc:	2200      	movs	r2, #0
100105ce:	2110      	movs	r1, #16
        WRITE_START = true;
100105d0:	2501      	movs	r5, #1
100105d2:	701d      	strb	r5, [r3, #0]
        MXC_I2C_EnableInt(I2C_INTERFACE, MXC_F_I2C_INTEN0_RX_THD, 0);
100105d4:	f001 fd3e 	bl	10012054 <MXC_I2C_EnableInt>
        MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_RD_ADDR_MATCH, 0);
100105d8:	4829      	ldr	r0, [pc, #164]	@ (10010680 <i2c_simple_isr+0x244>)
100105da:	2200      	movs	r2, #0
100105dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
100105e0:	f001 fd36 	bl	10012050 <MXC_I2C_ClearFlags>
100105e4:	e783      	b.n	100104ee <i2c_simple_isr+0xb2>
            MXC_I2C_ReadRXFIFO(I2C_INTERFACE, (volatile unsigned char*) &ACTIVE_REG, 1);
100105e6:	4928      	ldr	r1, [pc, #160]	@ (10010688 <i2c_simple_isr+0x24c>)
100105e8:	2201      	movs	r2, #1
100105ea:	f001 fd25 	bl	10012038 <MXC_I2C_ReadRXFIFO>
            WRITE_START = false;
100105ee:	2300      	movs	r3, #0
100105f0:	7033      	strb	r3, [r6, #0]
100105f2:	e72d      	b.n	10010450 <i2c_simple_isr+0x14>
            MXC_I2C_ReadRXFIFO(I2C_INTERFACE, (volatile unsigned char*) &ACTIVE_REG, 1);
100105f4:	4924      	ldr	r1, [pc, #144]	@ (10010688 <i2c_simple_isr+0x24c>)
100105f6:	4822      	ldr	r0, [pc, #136]	@ (10010680 <i2c_simple_isr+0x244>)
100105f8:	2201      	movs	r2, #1
100105fa:	f001 fd1d 	bl	10012038 <MXC_I2C_ReadRXFIFO>
            WRITE_START = false;
100105fe:	2300      	movs	r3, #0
10010600:	7023      	strb	r3, [r4, #0]
        if (ACTIVE_REG <= MAX_REG) {
10010602:	4c21      	ldr	r4, [pc, #132]	@ (10010688 <i2c_simple_isr+0x24c>)
            int available = MXC_I2C_GetRXFIFOAvailable(I2C_INTERFACE);
10010604:	481e      	ldr	r0, [pc, #120]	@ (10010680 <i2c_simple_isr+0x244>)
        if (ACTIVE_REG <= MAX_REG) {
10010606:	7823      	ldrb	r3, [r4, #0]
10010608:	2b05      	cmp	r3, #5
1001060a:	f63f af7b 	bhi.w	10010504 <i2c_simple_isr+0xc8>
1001060e:	e783      	b.n	10010518 <i2c_simple_isr+0xdc>
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
10010610:	4820      	ldr	r0, [pc, #128]	@ (10010694 <i2c_simple_isr+0x258>)
10010612:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
                WRITE_INDEX += MXC_I2C_ReadRXFIFO(I2C_INTERFACE,
10010616:	481a      	ldr	r0, [pc, #104]	@ (10010680 <i2c_simple_isr+0x244>)
10010618:	4419      	add	r1, r3
1001061a:	f001 fd0d 	bl	10012038 <MXC_I2C_ReadRXFIFO>
1001061e:	6823      	ldr	r3, [r4, #0]
10010620:	4403      	add	r3, r0
10010622:	6023      	str	r3, [r4, #0]
10010624:	e770      	b.n	10010508 <i2c_simple_isr+0xcc>
                    &I2C_REGS[ACTIVE_REG][WRITE_INDEX],
10010626:	481b      	ldr	r0, [pc, #108]	@ (10010694 <i2c_simple_isr+0x258>)
10010628:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
                WRITE_INDEX += MXC_I2C_ReadRXFIFO(I2C_INTERFACE,
1001062c:	4419      	add	r1, r3
1001062e:	e729      	b.n	10010484 <i2c_simple_isr+0x48>
            READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE,
10010630:	4e19      	ldr	r6, [pc, #100]	@ (10010698 <i2c_simple_isr+0x25c>)
                I2C_REGS_LEN[ACTIVE_REG]-READ_INDEX);
10010632:	4f16      	ldr	r7, [pc, #88]	@ (1001068c <i2c_simple_isr+0x250>)
                (volatile unsigned char*)&I2C_REGS[ACTIVE_REG][READ_INDEX],
10010634:	4917      	ldr	r1, [pc, #92]	@ (10010694 <i2c_simple_isr+0x258>)
            READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE,
10010636:	6832      	ldr	r2, [r6, #0]
                (volatile unsigned char*)&I2C_REGS[ACTIVE_REG][READ_INDEX],
10010638:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                I2C_REGS_LEN[ACTIVE_REG]-READ_INDEX);
1001063c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
            READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE,
10010640:	480f      	ldr	r0, [pc, #60]	@ (10010680 <i2c_simple_isr+0x244>)
10010642:	4411      	add	r1, r2
10010644:	1a9a      	subs	r2, r3, r2
10010646:	f001 fcfb 	bl	10012040 <MXC_I2C_WriteTXFIFO>
            if (I2C_REGS_LEN[ACTIVE_REG]-1 == READ_INDEX) {
1001064a:	782b      	ldrb	r3, [r5, #0]
            READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE,
1001064c:	6832      	ldr	r2, [r6, #0]
            if (I2C_REGS_LEN[ACTIVE_REG]-1 == READ_INDEX) {
1001064e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
            READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE,
10010652:	4410      	add	r0, r2
            if (I2C_REGS_LEN[ACTIVE_REG]-1 == READ_INDEX) {
10010654:	3b01      	subs	r3, #1
10010656:	4298      	cmp	r0, r3
            READ_INDEX += MXC_I2C_WriteTXFIFO(I2C_INTERFACE,
10010658:	6030      	str	r0, [r6, #0]
            if (I2C_REGS_LEN[ACTIVE_REG]-1 == READ_INDEX) {
1001065a:	f47f af7f 	bne.w	1001055c <i2c_simple_isr+0x120>
                MXC_I2C_DisableInt(I2C_INTERFACE, MXC_F_I2C_INTEN0_TX_THD, 0);
1001065e:	4808      	ldr	r0, [pc, #32]	@ (10010680 <i2c_simple_isr+0x244>)
10010660:	2200      	movs	r2, #0
10010662:	2120      	movs	r1, #32
10010664:	f001 fcf8 	bl	10012058 <MXC_I2C_DisableInt>
10010668:	e778      	b.n	1001055c <i2c_simple_isr+0x120>
            MXC_I2C_ClearFlags(I2C_INTERFACE, MXC_F_I2C_INTFL0_TX_LOCKOUT, 0);
1001066a:	2200      	movs	r2, #0
1001066c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
10010670:	f001 fcee 	bl	10012050 <MXC_I2C_ClearFlags>
10010674:	e76e      	b.n	10010554 <i2c_simple_isr+0x118>
            MXC_I2C_ClearRXFIFO(I2C_INTERFACE);
10010676:	4802      	ldr	r0, [pc, #8]	@ (10010680 <i2c_simple_isr+0x244>)
10010678:	f001 fce6 	bl	10012048 <MXC_I2C_ClearRXFIFO>
1001067c:	e71c      	b.n	100104b8 <i2c_simple_isr+0x7c>
1001067e:	bf00      	nop
10010680:	4001e000 	.word	0x4001e000
10010684:	20000a39 	.word	0x20000a39
10010688:	20000a38 	.word	0x20000a38
1001068c:	20000040 	.word	0x20000040
10010690:	20000a34 	.word	0x20000a34
10010694:	20000058 	.word	0x20000058
10010698:	20000a30 	.word	0x20000a30

1001069c <i2c_simple_peripheral_init>:
int i2c_simple_peripheral_init(uint8_t addr) {
1001069c:	b510      	push	{r4, lr}
1001069e:	4602      	mov	r2, r0
    error = MXC_I2C_Init(I2C_INTERFACE, false, addr);
100106a0:	2100      	movs	r1, #0
100106a2:	481b      	ldr	r0, [pc, #108]	@ (10010710 <i2c_simple_peripheral_init+0x74>)
100106a4:	f001 fc8a 	bl	10011fbc <MXC_I2C_Init>
    if (error != E_NO_ERROR) {
100106a8:	4604      	mov	r4, r0
100106aa:	bb60      	cbnz	r0, 10010706 <i2c_simple_peripheral_init+0x6a>
    MXC_I2C_SetFrequency(I2C_INTERFACE, I2C_FREQ);
100106ac:	4919      	ldr	r1, [pc, #100]	@ (10010714 <i2c_simple_peripheral_init+0x78>)
100106ae:	4818      	ldr	r0, [pc, #96]	@ (10010710 <i2c_simple_peripheral_init+0x74>)
100106b0:	f001 fcbe 	bl	10012030 <MXC_I2C_SetFrequency>
    MXC_I2C_ClearRXFIFO(I2C_INTERFACE);
100106b4:	4816      	ldr	r0, [pc, #88]	@ (10010710 <i2c_simple_peripheral_init+0x74>)
100106b6:	f001 fcc7 	bl	10012048 <MXC_I2C_ClearRXFIFO>
    MXC_I2C_EnableInt(I2C_INTERFACE, MXC_F_I2C_INTFL0_RD_ADDR_MATCH, 0);
100106ba:	4622      	mov	r2, r4
100106bc:	4814      	ldr	r0, [pc, #80]	@ (10010710 <i2c_simple_peripheral_init+0x74>)
100106be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
100106c2:	f001 fcc7 	bl	10012054 <MXC_I2C_EnableInt>
    MXC_I2C_EnableInt(I2C_INTERFACE, MXC_F_I2C_INTFL0_WR_ADDR_MATCH, 0);
100106c6:	4622      	mov	r2, r4
100106c8:	4811      	ldr	r0, [pc, #68]	@ (10010710 <i2c_simple_peripheral_init+0x74>)
100106ca:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
100106ce:	f001 fcc1 	bl	10012054 <MXC_I2C_EnableInt>
    MXC_I2C_EnableInt(I2C_INTERFACE, MXC_F_I2C_INTFL0_STOP, 0);
100106d2:	4622      	mov	r2, r4
100106d4:	480e      	ldr	r0, [pc, #56]	@ (10010710 <i2c_simple_peripheral_init+0x74>)
100106d6:	2140      	movs	r1, #64	@ 0x40
100106d8:	f001 fcbc 	bl	10012054 <MXC_I2C_EnableInt>
    MXC_NVIC_SetVector(MXC_I2C_GET_IRQ(MXC_I2C_GET_IDX(I2C_INTERFACE)), i2c_simple_isr);
100106dc:	490e      	ldr	r1, [pc, #56]	@ (10010718 <i2c_simple_peripheral_init+0x7c>)
100106de:	2024      	movs	r0, #36	@ 0x24
100106e0:	f000 fcb8 	bl	10011054 <MXC_NVIC_SetVector>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100106e4:	4b0d      	ldr	r3, [pc, #52]	@ (1001071c <i2c_simple_peripheral_init+0x80>)
100106e6:	2210      	movs	r2, #16
100106e8:	605a      	str	r2, [r3, #4]
    MXC_I2C_ClearFlags(I2C_INTERFACE, 0xFFFFFFFF, 0xFFFFFFFF);
100106ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100106ee:	4611      	mov	r1, r2
100106f0:	4807      	ldr	r0, [pc, #28]	@ (10010710 <i2c_simple_peripheral_init+0x74>)
100106f2:	f001 fcad 	bl	10012050 <MXC_I2C_ClearFlags>
    I2C_REGS[RECEIVE_DONE][0] = false;
100106f6:	4b0a      	ldr	r3, [pc, #40]	@ (10010720 <i2c_simple_peripheral_init+0x84>)
100106f8:	6859      	ldr	r1, [r3, #4]
100106fa:	700c      	strb	r4, [r1, #0]
    I2C_REGS[TRANSMIT_DONE][0] = true;
100106fc:	691b      	ldr	r3, [r3, #16]
100106fe:	2201      	movs	r2, #1
10010700:	701a      	strb	r2, [r3, #0]
}
10010702:	4620      	mov	r0, r4
10010704:	bd10      	pop	{r4, pc}
        printf("Failed to initialize I2C.\n");
10010706:	4807      	ldr	r0, [pc, #28]	@ (10010724 <i2c_simple_peripheral_init+0x88>)
10010708:	f005 fbd2 	bl	10015eb0 <puts>
}
1001070c:	4620      	mov	r0, r4
1001070e:	bd10      	pop	{r4, pc}
10010710:	4001e000 	.word	0x4001e000
10010714:	000186a0 	.word	0x000186a0
10010718:	1001043d 	.word	0x1001043d
1001071c:	e000e100 	.word	0xe000e100
10010720:	20000058 	.word	0x20000058
10010724:	10023880 	.word	0x10023880

10010728 <do_x25519_base>:
 */

static void
do_x25519_base(uint8_t out[X25519_KEY_LEN],
	       const uint8_t scalar[X25519_KEY_LEN])
{
10010728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001072c:	460e      	mov	r6, r1
1001072e:	b0ce      	sub	sp, #312	@ 0x138
	fld_t u, t;

	/*
	 * clear bits on input and import it as x
	 */
	memcpy(tmp, scalar, X25519_KEY_LEN);
10010730:	68b2      	ldr	r2, [r6, #8]
10010732:	68f3      	ldr	r3, [r6, #12]
{
10010734:	4605      	mov	r5, r0
	memcpy(tmp, scalar, X25519_KEY_LEN);
10010736:	6808      	ldr	r0, [r1, #0]
10010738:	6849      	ldr	r1, [r1, #4]
1001073a:	466c      	mov	r4, sp
1001073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1001073e:	6930      	ldr	r0, [r6, #16]
10010740:	6971      	ldr	r1, [r6, #20]
10010742:	69b2      	ldr	r2, [r6, #24]
10010744:	69f3      	ldr	r3, [r6, #28]
10010746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	tmp[0] &= 0xf8;
10010748:	f89d 1000 	ldrb.w	r1, [sp]
	tmp[31] &= 0x7f;
1001074c:	f89d 301f 	ldrb.w	r3, [sp, #31]
	tmp[0] &= 0xf8;
10010750:	f021 0107 	bic.w	r1, r1, #7
	tmp[31] &= 0x7f;
10010754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	tmp[31] |= 0x40;
10010758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40

	sc_import(x, tmp, sizeof(tmp));
1001075c:	4620      	mov	r0, r4
1001075e:	2220      	movs	r2, #32
	tmp[0] &= 0xf8;
10010760:	f88d 1000 	strb.w	r1, [sp]


	/*
	 * scale our base point on edwards curve
	 */
	ed_scale_base(&R, x);
10010764:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
	sc_import(x, tmp, sizeof(tmp));
10010768:	4669      	mov	r1, sp
	tmp[31] |= 0x40;
1001076a:	f88d 301f 	strb.w	r3, [sp, #31]
	sc_import(x, tmp, sizeof(tmp));
1001076e:	af1c      	add	r7, sp, #112	@ 0x70
10010770:	f7ff fdf0 	bl	10010354 <sc_import>
	ed_scale_base(&R, x);
10010774:	4621      	mov	r1, r4
10010776:	4640      	mov	r0, r8
10010778:	ac2f      	add	r4, sp, #188	@ 0xbc
1001077a:	f7fe fc0b 	bl	1000ef94 <ed_scale_base>
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001077e:	46be      	mov	lr, r7
10010780:	46a4      	mov	ip, r4
		res[i] = a[i] - b[i];
10010782:	f8dc 3054 	ldr.w	r3, [ip, #84]	@ 0x54
10010786:	f85c 6f04 	ldr.w	r6, [ip, #4]!
1001078a:	1b9b      	subs	r3, r3, r6
1001078c:	f84e 3b04 	str.w	r3, [lr], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
10010790:	45c6      	cmp	lr, r8
10010792:	d1f6      	bne.n	10010782 <do_x25519_base+0x5a>
	 * extract montgomery coordinate u from edwards point R
	 */

	/* u <- (z + y) / (z - y) */
	fld_sub(t, R.z, R.y);
	fld_inv(t, t);
10010794:	4639      	mov	r1, r7
10010796:	4638      	mov	r0, r7
10010798:	f7ff fae0 	bl	1000fd5c <fld_inv>
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001079c:	f10d 0c48 	add.w	ip, sp, #72	@ 0x48
		res[i] = a[i] + b[i];
100107a0:	6d66      	ldr	r6, [r4, #84]	@ 0x54
100107a2:	f854 3f04 	ldr.w	r3, [r4, #4]!
100107a6:	4433      	add	r3, r6
100107a8:	f84c 3b04 	str.w	r3, [ip], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
100107ac:	4567      	cmp	r7, ip
100107ae:	d1f7      	bne.n	100107a0 <do_x25519_base+0x78>
	fld_add(u, R.z, R.y);
	fld_mul(u, u, t);
100107b0:	a912      	add	r1, sp, #72	@ 0x48
100107b2:	463a      	mov	r2, r7
100107b4:	4608      	mov	r0, r1
100107b6:	f7fe fd4d 	bl	1000f254 <fld_mul>


	fld_export(out, u);
100107ba:	a912      	add	r1, sp, #72	@ 0x48
100107bc:	4628      	mov	r0, r5
100107be:	f7fe fcdb 	bl	1000f178 <fld_export>
}
100107c2:	b04e      	add	sp, #312	@ 0x138
100107c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

100107c8 <do_x25519>:
{
100107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100107cc:	460d      	mov	r5, r1
100107ce:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
	memcpy(s, scalar, X25519_KEY_LEN);
100107d2:	68eb      	ldr	r3, [r5, #12]
{
100107d4:	4607      	mov	r7, r0
100107d6:	4616      	mov	r6, r2
	memcpy(s, scalar, X25519_KEY_LEN);
100107d8:	6808      	ldr	r0, [r1, #0]
100107da:	68aa      	ldr	r2, [r5, #8]
100107dc:	6849      	ldr	r1, [r1, #4]
100107de:	ac04      	add	r4, sp, #16
100107e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
100107e2:	69eb      	ldr	r3, [r5, #28]
100107e4:	6928      	ldr	r0, [r5, #16]
100107e6:	6969      	ldr	r1, [r5, #20]
100107e8:	69aa      	ldr	r2, [r5, #24]
100107ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	s[31] &= 0x7f;
100107ec:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
	s[0] &= 0xf8;
100107f0:	f89d 2010 	ldrb.w	r2, [sp, #16]
	s[31] &= 0x7f;
100107f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	s[31] |= 0x40;
100107f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	s[0] &= 0xf8;
100107fc:	f022 0207 	bic.w	r2, r2, #7
	fld_import(P.x, point);
10010800:	4631      	mov	r1, r6
10010802:	a87a      	add	r0, sp, #488	@ 0x1e8
	s[31] |= 0x40;
10010804:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
	res[0] = x0;
10010808:	2401      	movs	r4, #1
	s[0] &= 0xf8;
1001080a:	f88d 2010 	strb.w	r2, [sp, #16]
	fld_import(P.x, point);
1001080e:	f7fe fc79 	bl	1000f104 <fld_import>
		res[i] = 0;
10010812:	2224      	movs	r2, #36	@ 0x24
10010814:	2100      	movs	r1, #0
10010816:	a885      	add	r0, sp, #532	@ 0x214
	res[0] = x0;
10010818:	9484      	str	r4, [sp, #528]	@ 0x210
		res[i] = 0;
1001081a:	f006 f9df 	bl	10016bdc <memset>
1001081e:	2224      	movs	r2, #36	@ 0x24
10010820:	2100      	movs	r1, #0
10010822:	a867      	add	r0, sp, #412	@ 0x19c
	res[0] = x0;
10010824:	9466      	str	r4, [sp, #408]	@ 0x198
		res[i] = 0;
10010826:	f006 f9d9 	bl	10016bdc <memset>
	res[0] = x0;
1001082a:	2100      	movs	r1, #0
		res[i] = 0;
1001082c:	2224      	movs	r2, #36	@ 0x24
1001082e:	a871      	add	r0, sp, #452	@ 0x1c4
	res[0] = x0;
10010830:	9170      	str	r1, [sp, #448]	@ 0x1c0
	for (i = 1; i < FLD_LIMB_NUM; i++)
10010832:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
		res[i] = 0;
10010836:	f006 f9d1 	bl	10016bdc <memset>
	memcpy(&T, P, sizeof(struct mg));
1001083a:	2250      	movs	r2, #80	@ 0x50
1001083c:	a97a      	add	r1, sp, #488	@ 0x1e8
1001083e:	a88e      	add	r0, sp, #568	@ 0x238
10010840:	f006 fb06 	bl	10016e50 <memcpy>
	for (i = X25519_KEY_LEN-1; i >= 0; i--) {
10010844:	f10d 0aa8 	add.w	sl, sp, #168	@ 0xa8
10010848:	9703      	str	r7, [sp, #12]
1001084a:	ac52      	add	r4, sp, #328	@ 0x148
1001084c:	ad5c      	add	r5, sp, #368	@ 0x170
1001084e:	464f      	mov	r7, r9
		foo = x[i];
10010850:	f917 6d01 	ldrsb.w	r6, [r7, #-1]!
10010854:	9702      	str	r7, [sp, #8]
10010856:	f04f 0908 	mov.w	r9, #8
			ctmemswap(out, &T, sizeof(struct mg), foo >> 7);
1001085a:	11f2      	asrs	r2, r6, #7
1001085c:	b2d2      	uxtb	r2, r2
	while (pa < endp) {
1001085e:	f04f 0800 	mov.w	r8, #0
10010862:	f362 0807 	bfi	r8, r2, #0, #8
10010866:	f362 280f 	bfi	r8, r2, #8, #8
1001086a:	f362 4817 	bfi	r8, r2, #16, #8
1001086e:	af65      	add	r7, sp, #404	@ 0x194
10010870:	f362 681f 	bfi	r8, r2, #24, #8
			ctmemswap(out, &T, sizeof(struct mg), foo >> 7);
10010874:	46bc      	mov	ip, r7
10010876:	a88e      	add	r0, sp, #568	@ 0x238
		delta = (*pa ^ *pb) & mask;
10010878:	f85c 3f04 	ldr.w	r3, [ip, #4]!
1001087c:	6801      	ldr	r1, [r0, #0]
1001087e:	ea83 0201 	eor.w	r2, r3, r1
10010882:	ea02 0208 	and.w	r2, r2, r8
		*pb++ ^= delta;
10010886:	4051      	eors	r1, r2
		*pa++ ^= delta;
10010888:	4053      	eors	r3, r2
		*pb++ ^= delta;
1001088a:	f840 1b04 	str.w	r1, [r0], #4
		*pa++ ^= delta;
1001088e:	f8cc 3000 	str.w	r3, [ip]
	while (pa < endp) {
10010892:	aba2      	add	r3, sp, #648	@ 0x288
10010894:	4298      	cmp	r0, r3
10010896:	d1ef      	bne.n	10010878 <do_x25519+0xb0>
10010898:	f50d 7bcc 	add.w	fp, sp, #408	@ 0x198
1001089c:	a90c      	add	r1, sp, #48	@ 0x30
1001089e:	465a      	mov	r2, fp
		res[i] = a[i] + b[i];
100108a0:	f852 0b04 	ldr.w	r0, [r2], #4
100108a4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
100108a6:	4403      	add	r3, r0
100108a8:	f841 3b04 	str.w	r3, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
100108ac:	ab70      	add	r3, sp, #448	@ 0x1c0
100108ae:	4293      	cmp	r3, r2
100108b0:	d1f6      	bne.n	100108a0 <do_x25519+0xd8>
	fld_sq(sqsumA, sumA);
100108b2:	a90c      	add	r1, sp, #48	@ 0x30
100108b4:	a820      	add	r0, sp, #128	@ 0x80
100108b6:	f7ff f81f 	bl	1000f8f8 <fld_sq>
	for (i = 0; i < FLD_LIMB_NUM; i++)
100108ba:	aa16      	add	r2, sp, #88	@ 0x58
		res[i] = a[i] - b[i];
100108bc:	f85b 3b04 	ldr.w	r3, [fp], #4
100108c0:	f8db 1024 	ldr.w	r1, [fp, #36]	@ 0x24
100108c4:	1a5b      	subs	r3, r3, r1
100108c6:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
100108ca:	ab70      	add	r3, sp, #448	@ 0x1c0
100108cc:	455b      	cmp	r3, fp
100108ce:	d1f5      	bne.n	100108bc <do_x25519+0xf4>
	fld_sq(sqsubA, subA);
100108d0:	a916      	add	r1, sp, #88	@ 0x58
100108d2:	4650      	mov	r0, sl
100108d4:	f7ff f810 	bl	1000f8f8 <fld_sq>
	fld_mul(A->x, sqsubA, sqsumA);
100108d8:	aa20      	add	r2, sp, #128	@ 0x80
100108da:	4651      	mov	r1, sl
100108dc:	a866      	add	r0, sp, #408	@ 0x198
100108de:	f7fe fcb9 	bl	1000f254 <fld_mul>
100108e2:	f10d 0b80 	add.w	fp, sp, #128	@ 0x80
100108e6:	ab48      	add	r3, sp, #288	@ 0x120
100108e8:	4650      	mov	r0, sl
100108ea:	9300      	str	r3, [sp, #0]
100108ec:	4619      	mov	r1, r3
100108ee:	465a      	mov	r2, fp
		res[i] = a[i] - b[i];
100108f0:	f852 3b04 	ldr.w	r3, [r2], #4
100108f4:	f850 cb04 	ldr.w	ip, [r0], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
100108f8:	4592      	cmp	sl, r2
		res[i] = a[i] - b[i];
100108fa:	eba3 030c 	sub.w	r3, r3, ip
100108fe:	f841 3b04 	str.w	r3, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
10010902:	d1f5      	bne.n	100108f0 <do_x25519+0x128>
	fld_scale(T2, T1, 121665);
10010904:	4a44      	ldr	r2, [pc, #272]	@ (10010a18 <do_x25519+0x250>)
10010906:	a948      	add	r1, sp, #288	@ 0x120
10010908:	4620      	mov	r0, r4
1001090a:	f7fe fc71 	bl	1000f1f0 <fld_scale>
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001090e:	9401      	str	r4, [sp, #4]
10010910:	4622      	mov	r2, r4
		res[i] = a[i] + b[i];
10010912:	6813      	ldr	r3, [r2, #0]
10010914:	f85b 1b04 	ldr.w	r1, [fp], #4
10010918:	440b      	add	r3, r1
1001091a:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001091e:	4295      	cmp	r5, r2
10010920:	d1f7      	bne.n	10010912 <do_x25519+0x14a>
	fld_mul(A->z, T1, T2);
10010922:	4622      	mov	r2, r4
10010924:	a948      	add	r1, sp, #288	@ 0x120
10010926:	a870      	add	r0, sp, #448	@ 0x1c0
10010928:	f7fe fc94 	bl	1000f254 <fld_mul>
1001092c:	aa8e      	add	r2, sp, #568	@ 0x238
1001092e:	f10d 0cd0 	add.w	ip, sp, #208	@ 0xd0
10010932:	4611      	mov	r1, r2
		res[i] = a[i] + b[i];
10010934:	f851 0b04 	ldr.w	r0, [r1], #4
10010938:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
1001093a:	4403      	add	r3, r0
1001093c:	f84c 3b04 	str.w	r3, [ip], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
10010940:	ab98      	add	r3, sp, #608	@ 0x260
10010942:	428b      	cmp	r3, r1
10010944:	d1f6      	bne.n	10010934 <do_x25519+0x16c>
10010946:	a93e      	add	r1, sp, #248	@ 0xf8
		res[i] = a[i] - b[i];
10010948:	f852 3b04 	ldr.w	r3, [r2], #4
1001094c:	6a50      	ldr	r0, [r2, #36]	@ 0x24
1001094e:	1a1b      	subs	r3, r3, r0
10010950:	f841 3b04 	str.w	r3, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
10010954:	ab98      	add	r3, sp, #608	@ 0x260
10010956:	429a      	cmp	r2, r3
10010958:	d1f6      	bne.n	10010948 <do_x25519+0x180>
	fld_mul(T1, subA, sumB);
1001095a:	aa34      	add	r2, sp, #208	@ 0xd0
1001095c:	a916      	add	r1, sp, #88	@ 0x58
1001095e:	a848      	add	r0, sp, #288	@ 0x120
10010960:	f7fe fc78 	bl	1000f254 <fld_mul>
	fld_mul(T2, sumA, subB);
10010964:	aa3e      	add	r2, sp, #248	@ 0xf8
10010966:	a90c      	add	r1, sp, #48	@ 0x30
10010968:	4620      	mov	r0, r4
1001096a:	f7fe fc73 	bl	1000f254 <fld_mul>
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001096e:	46ab      	mov	fp, r5
10010970:	4628      	mov	r0, r5
10010972:	4621      	mov	r1, r4
10010974:	aa48      	add	r2, sp, #288	@ 0x120
		res[i] = a[i] + b[i];
10010976:	f852 3b04 	ldr.w	r3, [r2], #4
1001097a:	f851 cb04 	ldr.w	ip, [r1], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001097e:	42a2      	cmp	r2, r4
		res[i] = a[i] + b[i];
10010980:	4463      	add	r3, ip
10010982:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < FLD_LIMB_NUM; i++)
10010986:	d1f6      	bne.n	10010976 <do_x25519+0x1ae>
	fld_sq(B->x, T3);
10010988:	4629      	mov	r1, r5
1001098a:	a88e      	add	r0, sp, #568	@ 0x238
1001098c:	f7fe ffb4 	bl	1000f8f8 <fld_sq>
		res[i] = a[i] - b[i];
10010990:	9900      	ldr	r1, [sp, #0]
10010992:	9801      	ldr	r0, [sp, #4]
10010994:	f851 3b04 	ldr.w	r3, [r1], #4
10010998:	f850 2b04 	ldr.w	r2, [r0], #4
1001099c:	9100      	str	r1, [sp, #0]
1001099e:	1a9b      	subs	r3, r3, r2
	for (i = 0; i < FLD_LIMB_NUM; i++)
100109a0:	42a1      	cmp	r1, r4
		res[i] = a[i] - b[i];
100109a2:	f84b 3b04 	str.w	r3, [fp], #4
100109a6:	9001      	str	r0, [sp, #4]
	for (i = 0; i < FLD_LIMB_NUM; i++)
100109a8:	d1f2      	bne.n	10010990 <do_x25519+0x1c8>
	fld_sq(T3, T3);
100109aa:	4629      	mov	r1, r5
100109ac:	4628      	mov	r0, r5
100109ae:	f7fe ffa3 	bl	1000f8f8 <fld_sq>
	fld_mul(B->z, T3, C->x);
100109b2:	a898      	add	r0, sp, #608	@ 0x260
100109b4:	aa7a      	add	r2, sp, #488	@ 0x1e8
100109b6:	4629      	mov	r1, r5
100109b8:	f7fe fc4c 	bl	1000f254 <fld_mul>
	while (pa < endp) {
100109bc:	a88e      	add	r0, sp, #568	@ 0x238
		delta = (*pa ^ *pb) & mask;
100109be:	f857 3f04 	ldr.w	r3, [r7, #4]!
100109c2:	6801      	ldr	r1, [r0, #0]
100109c4:	ea83 0201 	eor.w	r2, r3, r1
100109c8:	ea02 0208 	and.w	r2, r2, r8
		*pb++ ^= delta;
100109cc:	4051      	eors	r1, r2
		*pa++ ^= delta;
100109ce:	4053      	eors	r3, r2
		*pb++ ^= delta;
100109d0:	f840 1b04 	str.w	r1, [r0], #4
		*pa++ ^= delta;
100109d4:	603b      	str	r3, [r7, #0]
	while (pa < endp) {
100109d6:	aba2      	add	r3, sp, #648	@ 0x288
100109d8:	4298      	cmp	r0, r3
100109da:	d1f0      	bne.n	100109be <do_x25519+0x1f6>
		for (j = 8; j > 0; j--, foo <<= 1) {
100109dc:	0076      	lsls	r6, r6, #1
100109de:	f1b9 0901 	subs.w	r9, r9, #1
100109e2:	b276      	sxtb	r6, r6
100109e4:	f47f af39 	bne.w	1001085a <do_x25519+0x92>
	for (i = X25519_KEY_LEN-1; i >= 0; i--) {
100109e8:	9f02      	ldr	r7, [sp, #8]
100109ea:	ab04      	add	r3, sp, #16
100109ec:	429f      	cmp	r7, r3
100109ee:	f47f af2f 	bne.w	10010850 <do_x25519+0x88>
	fld_inv(res.z, res.z);
100109f2:	a970      	add	r1, sp, #448	@ 0x1c0
100109f4:	4608      	mov	r0, r1
100109f6:	9f03      	ldr	r7, [sp, #12]
100109f8:	f7ff f9b0 	bl	1000fd5c <fld_inv>
	fld_mul(res.x, res.x, res.z);
100109fc:	a966      	add	r1, sp, #408	@ 0x198
100109fe:	aa70      	add	r2, sp, #448	@ 0x1c0
10010a00:	4608      	mov	r0, r1
10010a02:	f7fe fc27 	bl	1000f254 <fld_mul>
	fld_export(out, res.x);
10010a06:	a966      	add	r1, sp, #408	@ 0x198
10010a08:	4638      	mov	r0, r7
10010a0a:	f7fe fbb5 	bl	1000f178 <fld_export>
}
10010a0e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
10010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010a16:	bf00      	nop
10010a18:	0001db41 	.word	0x0001db41

10010a1c <x25519_base>:
 */
void
x25519_base(uint8_t out[X25519_KEY_LEN],
	    const uint8_t scalar[X25519_KEY_LEN])
{
	do_x25519_base(out, scalar);
10010a1c:	f7ff be84 	b.w	10010728 <do_x25519_base>

10010a20 <x25519>:
void
x25519(uint8_t out[X25519_KEY_LEN],
       const uint8_t scalar[X25519_KEY_LEN],
       const uint8_t point[X25519_KEY_LEN])
{
	do_x25519(out, scalar, point);
10010a20:	f7ff bed2 	b.w	100107c8 <do_x25519>

10010a24 <mxc_assert>:
};
const unsigned int num_leds = (sizeof(led_pin) / sizeof(mxc_gpio_cfg_t));

/******************************************************************************/
void mxc_assert(const char *expr, const char *file, int line)
{
10010a24:	b508      	push	{r3, lr}
10010a26:	4603      	mov	r3, r0
    printf("MXC_ASSERT %s #%d: (%s)\n", file, line, expr);
10010a28:	4801      	ldr	r0, [pc, #4]	@ (10010a30 <mxc_assert+0xc>)
10010a2a:	f002 fb11 	bl	10013050 <printf>

    while (1) {}
10010a2e:	e7fe      	b.n	10010a2e <mxc_assert+0xa>
10010a30:	1002389c 	.word	0x1002389c

10010a34 <GPIO0_IRQHandler>:
 * NOTE: This weak definition is included to support Push Button 0 interrupts in
 *       case the user does not define this interrupt handler in their application.
 **/
__weak void GPIO0_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO0));
10010a34:	2000      	movs	r0, #0
10010a36:	f001 b941 	b.w	10011cbc <MXC_GPIO_Handler>
10010a3a:	bf00      	nop

10010a3c <GPIO1_IRQHandler>:
 * NOTE: This weak definition is included to support Push Button 1 interrupts in
 *       case the user does not define this interrupt handler in their application.
 **/
__weak void GPIO1_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO1));
10010a3c:	2001      	movs	r0, #1
10010a3e:	f001 b93d 	b.w	10011cbc <MXC_GPIO_Handler>
10010a42:	bf00      	nop

10010a44 <Board_Init>:
}

/******************************************************************************/
int Board_Init(void)
{
10010a44:	b510      	push	{r4, lr}
#ifndef __riscv
    int err;

    // Enable GPIO
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
10010a46:	2000      	movs	r0, #0
10010a48:	f000 fbe4 	bl	10011214 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
10010a4c:	2001      	movs	r0, #1
10010a4e:	f000 fbe1 	bl	10011214 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO2);
10010a52:	2040      	movs	r0, #64	@ 0x40
10010a54:	f000 fbde 	bl	10011214 <MXC_SYS_ClockEnable>
/******************************************************************************/
int Console_Init(void)
{
    int err;

    if ((err = MXC_UART_Init(ConsoleUart, CONSOLE_BAUD, MXC_UART_IBRO_CLK)) != E_NO_ERROR) {
10010a58:	4b10      	ldr	r3, [pc, #64]	@ (10010a9c <Board_Init+0x58>)
10010a5a:	2202      	movs	r2, #2
10010a5c:	6818      	ldr	r0, [r3, #0]
10010a5e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
10010a62:	f001 fd15 	bl	10012490 <MXC_UART_Init>
    if ((err = Console_Init()) < E_NO_ERROR) {
10010a66:	1e04      	subs	r4, r0, #0
10010a68:	db0c      	blt.n	10010a84 <Board_Init+0x40>
    if ((err = PB_Init()) != E_NO_ERROR) {
10010a6a:	f000 f8eb 	bl	10010c44 <PB_Init>
10010a6e:	b958      	cbnz	r0, 10010a88 <Board_Init+0x44>
    if ((err = LED_Init()) != E_NO_ERROR) {
10010a70:	f000 f888 	bl	10010b84 <LED_Init>
10010a74:	4604      	mov	r4, r0
10010a76:	b960      	cbnz	r0, 10010a92 <Board_Init+0x4e>
    MXC_SIMO->vrego_c = 0x43; // Set CNN voltage
10010a78:	4b09      	ldr	r3, [pc, #36]	@ (10010aa0 <Board_Init+0x5c>)
    MXC_Delay(200000);
10010a7a:	480a      	ldr	r0, [pc, #40]	@ (10010aa4 <Board_Init+0x60>)
    MXC_SIMO->vrego_c = 0x43; // Set CNN voltage
10010a7c:	2243      	movs	r2, #67	@ 0x43
10010a7e:	60da      	str	r2, [r3, #12]
    MXC_Delay(200000);
10010a80:	f000 faae 	bl	10010fe0 <MXC_Delay>
}
10010a84:	4620      	mov	r0, r4
10010a86:	bd10      	pop	{r4, pc}
        MXC_ASSERT_FAIL();
10010a88:	4907      	ldr	r1, [pc, #28]	@ (10010aa8 <Board_Init+0x64>)
10010a8a:	4808      	ldr	r0, [pc, #32]	@ (10010aac <Board_Init+0x68>)
10010a8c:	226f      	movs	r2, #111	@ 0x6f
10010a8e:	f7ff ffc9 	bl	10010a24 <mxc_assert>
        MXC_ASSERT_FAIL();
10010a92:	4905      	ldr	r1, [pc, #20]	@ (10010aa8 <Board_Init+0x64>)
10010a94:	4805      	ldr	r0, [pc, #20]	@ (10010aac <Board_Init+0x68>)
10010a96:	2274      	movs	r2, #116	@ 0x74
10010a98:	f7ff ffc4 	bl	10010a24 <mxc_assert>
10010a9c:	20000070 	.word	0x20000070
10010aa0:	40004400 	.word	0x40004400
10010aa4:	00030d40 	.word	0x00030d40
10010aa8:	100238b8 	.word	0x100238b8
10010aac:	1002391c 	.word	0x1002391c

10010ab0 <NMI_Handler>:
}

/******************************************************************************/
void NMI_Handler(void)
{
    __NOP();
10010ab0:	bf00      	nop
}
10010ab2:	4770      	bx	lr

10010ab4 <_close>:
    return -1;
}
int _close(int file)
{
    return -1;
}
10010ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10010ab8:	4770      	bx	lr
10010aba:	bf00      	nop

10010abc <_isatty>:
int _isatty(int file)
10010abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10010ac0:	4770      	bx	lr
10010ac2:	bf00      	nop

10010ac4 <_lseek>:
    return -1;
}
int _lseek(int file, off_t offset, int whence)
{
    return -1;
}
10010ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10010ac8:	4770      	bx	lr
10010aca:	bf00      	nop

10010acc <_fstat>:
int _fstat(int file, struct stat *st)
{
    return -1;
}
10010acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10010ad0:	4770      	bx	lr
10010ad2:	bf00      	nop

10010ad4 <_read>:
   fgetc for stdio */
#if defined(__ICCARM__) || defined(__GNUC__)

#if defined(__GNUC__) // GNUC _read function prototype
int _read(int file, char *ptr, int len)
{
10010ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t n;
#endif /*  */

    int num = 0; // count of number received.

    switch (file) {
10010ad6:	b9e0      	cbnz	r0, 10010b12 <_read+0x3e>
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
10010ad8:	2a00      	cmp	r2, #0
10010ada:	dd19      	ble.n	10010b10 <_read+0x3c>
            *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
10010adc:	4d10      	ldr	r5, [pc, #64]	@ (10010b20 <_read+0x4c>)
10010ade:	460e      	mov	r6, r1
10010ae0:	188f      	adds	r7, r1, r2
        for (n = 0; n < len; n++) {
10010ae2:	460c      	mov	r4, r1
10010ae4:	e002      	b.n	10010aec <_read+0x18>
10010ae6:	42bb      	cmp	r3, r7
10010ae8:	d00f      	beq.n	10010b0a <_read+0x36>
                num++;
                ptr++;

                break;
            } else {
                ptr++;
10010aea:	461c      	mov	r4, r3
            *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
10010aec:	4628      	mov	r0, r5
10010aee:	f001 fd93 	bl	10012618 <MXC_UART_ReadCharacter>
10010af2:	b2c1      	uxtb	r1, r0
10010af4:	7021      	strb	r1, [r4, #0]
            MXC_UART_WriteCharacter(MXC_UARTn, *ptr); // echo the byte.
10010af6:	4628      	mov	r0, r5
10010af8:	f001 fd90 	bl	1001261c <MXC_UART_WriteCharacter>
            if (*ptr == '\r') { // check for end of line.
10010afc:	7822      	ldrb	r2, [r4, #0]
10010afe:	2a0d      	cmp	r2, #13
                ptr++;
10010b00:	f104 0301 	add.w	r3, r4, #1
            if (*ptr == '\r') { // check for end of line.
10010b04:	d1ef      	bne.n	10010ae6 <_read+0x12>
                *ptr = '\n';
10010b06:	230a      	movs	r3, #10
10010b08:	7023      	strb	r3, [r4, #0]
                num++;
10010b0a:	f1c6 0601 	rsb	r6, r6, #1
10010b0e:	19a0      	adds	r0, r4, r6
        errno = EBADF;
        return -1;
    }

    return num;
}
10010b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        errno = EBADF;
10010b12:	f006 f905 	bl	10016d20 <__errno>
10010b16:	2309      	movs	r3, #9
10010b18:	6003      	str	r3, [r0, #0]
        return -1;
10010b1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10010b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010b20:	40042000 	.word	0x40042000

10010b24 <_write>:

/* newlib/libc printf() will eventually call write() to get the data to the stdout */
#if defined(__GNUC__)
// GNUC _write function prototype
int _write(int file, char *ptr, int len)
{
10010b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int __write(int file, const unsigned char *ptr, size_t len)
{
    size_t n;
#endif /* __GNUC__ */

    switch (file) {
10010b26:	1e43      	subs	r3, r0, #1
10010b28:	2b01      	cmp	r3, #1
10010b2a:	d821      	bhi.n	10010b70 <_write+0x4c>
    case STDOUT_FILENO:
    case STDERR_FILENO:

        // This function should be as fast as possible
        // So we'll forgo the UART driver for now
        for (n = 0; n < len; n++) {
10010b2c:	2a00      	cmp	r2, #0
10010b2e:	4617      	mov	r7, r2
10010b30:	dd12      	ble.n	10010b58 <_write+0x34>
10010b32:	1e53      	subs	r3, r2, #1
            if (*ptr == '\n') {
                // Wait until there's room in the FIFO
                while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10010b34:	4e12      	ldr	r6, [pc, #72]	@ (10010b80 <_write+0x5c>)
10010b36:	1e4c      	subs	r4, r1, #1
10010b38:	18cd      	adds	r5, r1, r3
            if (*ptr == '\n') {
10010b3a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
10010b3e:	2b0a      	cmp	r3, #10
10010b40:	d00c      	beq.n	10010b5c <_write+0x38>

                MXC_UART_WriteCharacter(MXC_UARTn, '\r');
            }

            // Wait until there's room in the FIFO
            while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10010b42:	480f      	ldr	r0, [pc, #60]	@ (10010b80 <_write+0x5c>)
10010b44:	f001 fd6e 	bl	10012624 <MXC_UART_GetTXFIFOAvailable>
10010b48:	2800      	cmp	r0, #0
10010b4a:	d0fa      	beq.n	10010b42 <_write+0x1e>

            MXC_UART_WriteCharacter(MXC_UARTn, *ptr++);
10010b4c:	7821      	ldrb	r1, [r4, #0]
10010b4e:	4630      	mov	r0, r6
10010b50:	f001 fd64 	bl	1001261c <MXC_UART_WriteCharacter>
        for (n = 0; n < len; n++) {
10010b54:	42ac      	cmp	r4, r5
10010b56:	d1f0      	bne.n	10010b3a <_write+0x16>

        break;

    default:
        errno = EBADF;
        return -1;
10010b58:	4638      	mov	r0, r7
    }

    return len;
}
10010b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10010b5c:	4808      	ldr	r0, [pc, #32]	@ (10010b80 <_write+0x5c>)
10010b5e:	f001 fd61 	bl	10012624 <MXC_UART_GetTXFIFOAvailable>
10010b62:	2800      	cmp	r0, #0
10010b64:	d0fa      	beq.n	10010b5c <_write+0x38>
                MXC_UART_WriteCharacter(MXC_UARTn, '\r');
10010b66:	210d      	movs	r1, #13
10010b68:	4630      	mov	r0, r6
10010b6a:	f001 fd57 	bl	1001261c <MXC_UART_WriteCharacter>
10010b6e:	e7e8      	b.n	10010b42 <_write+0x1e>
        errno = EBADF;
10010b70:	f006 f8d6 	bl	10016d20 <__errno>
10010b74:	2309      	movs	r3, #9
10010b76:	6003      	str	r3, [r0, #0]
        return -1;
10010b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10010b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010b7e:	bf00      	nop
10010b80:	40042000 	.word	0x40042000

10010b84 <LED_Init>:
#include "led.h"
#include "mxc_device.h"

/******************************************************************************/
int LED_Init(void)
{
10010b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int retval = E_NO_ERROR;
    unsigned int i;

    /* setup GPIO for the LED */
    for (i = 0; i < num_leds; i++) {
10010b86:	4b0d      	ldr	r3, [pc, #52]	@ (10010bbc <LED_Init+0x38>)
10010b88:	681f      	ldr	r7, [r3, #0]
10010b8a:	b1a7      	cbz	r7, 10010bb6 <LED_Init+0x32>
10010b8c:	2500      	movs	r5, #0
10010b8e:	4c0c      	ldr	r4, [pc, #48]	@ (10010bc0 <LED_Init+0x3c>)
    int retval = E_NO_ERROR;
10010b90:	462e      	mov	r6, r5
//******************************************************************************
void LED_Off(unsigned int idx)
{
    MXC_ASSERT(idx < num_leds);
#if (LED_ON == 0)
    MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
10010b92:	e9d4 0100 	ldrd	r0, r1, [r4]
10010b96:	f001 f865 	bl	10011c64 <MXC_GPIO_OutSet>
        if (MXC_GPIO_Config(&led_pin[i]) != E_NO_ERROR) {
10010b9a:	4620      	mov	r0, r4
10010b9c:	f001 f8b8 	bl	10011d10 <MXC_GPIO_Config>
    for (i = 0; i < num_leds; i++) {
10010ba0:	3501      	adds	r5, #1
            retval = E_UNKNOWN;
10010ba2:	2800      	cmp	r0, #0
10010ba4:	bf18      	it	ne
10010ba6:	f06f 0607 	mvnne.w	r6, #7
    for (i = 0; i < num_leds; i++) {
10010baa:	42af      	cmp	r7, r5
10010bac:	f104 040c 	add.w	r4, r4, #12
10010bb0:	d1ef      	bne.n	10010b92 <LED_Init+0xe>
}
10010bb2:	4630      	mov	r0, r6
10010bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int retval = E_NO_ERROR;
10010bb6:	463e      	mov	r6, r7
}
10010bb8:	4630      	mov	r0, r6
10010bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010bbc:	10023924 	.word	0x10023924
10010bc0:	10023928 	.word	0x10023928

10010bc4 <LED_On>:
    MXC_ASSERT(idx < num_leds);
10010bc4:	4b0b      	ldr	r3, [pc, #44]	@ (10010bf4 <LED_On+0x30>)
10010bc6:	681b      	ldr	r3, [r3, #0]
10010bc8:	4283      	cmp	r3, r0
{
10010bca:	b510      	push	{r4, lr}
10010bcc:	4604      	mov	r4, r0
    MXC_ASSERT(idx < num_leds);
10010bce:	d90b      	bls.n	10010be8 <LED_On+0x24>
    MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
10010bd0:	4b09      	ldr	r3, [pc, #36]	@ (10010bf8 <LED_On+0x34>)
10010bd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
10010bd6:	eb03 0284 	add.w	r2, r3, r4, lsl #2
10010bda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
10010bde:	6851      	ldr	r1, [r2, #4]
}
10010be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
10010be4:	f001 b854 	b.w	10011c90 <MXC_GPIO_OutClr>
    MXC_ASSERT(idx < num_leds);
10010be8:	4904      	ldr	r1, [pc, #16]	@ (10010bfc <LED_On+0x38>)
10010bea:	4805      	ldr	r0, [pc, #20]	@ (10010c00 <LED_On+0x3c>)
10010bec:	223b      	movs	r2, #59	@ 0x3b
10010bee:	f7ff ff19 	bl	10010a24 <mxc_assert>
10010bf2:	e7ed      	b.n	10010bd0 <LED_On+0xc>
10010bf4:	10023924 	.word	0x10023924
10010bf8:	10023928 	.word	0x10023928
10010bfc:	10023968 	.word	0x10023968
10010c00:	100239b8 	.word	0x100239b8

10010c04 <LED_Off>:
    MXC_ASSERT(idx < num_leds);
10010c04:	4b0b      	ldr	r3, [pc, #44]	@ (10010c34 <LED_Off+0x30>)
10010c06:	681b      	ldr	r3, [r3, #0]
10010c08:	4283      	cmp	r3, r0
{
10010c0a:	b510      	push	{r4, lr}
10010c0c:	4604      	mov	r4, r0
    MXC_ASSERT(idx < num_leds);
10010c0e:	d90b      	bls.n	10010c28 <LED_Off+0x24>
    MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
10010c10:	4b09      	ldr	r3, [pc, #36]	@ (10010c38 <LED_Off+0x34>)
10010c12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
10010c16:	eb03 0284 	add.w	r2, r3, r4, lsl #2
10010c1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
10010c1e:	6851      	ldr	r1, [r2, #4]
#else
    MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
#endif
}
10010c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
10010c24:	f001 b81e 	b.w	10011c64 <MXC_GPIO_OutSet>
    MXC_ASSERT(idx < num_leds);
10010c28:	4904      	ldr	r1, [pc, #16]	@ (10010c3c <LED_Off+0x38>)
10010c2a:	4805      	ldr	r0, [pc, #20]	@ (10010c40 <LED_Off+0x3c>)
10010c2c:	2246      	movs	r2, #70	@ 0x46
10010c2e:	f7ff fef9 	bl	10010a24 <mxc_assert>
10010c32:	e7ed      	b.n	10010c10 <LED_Off+0xc>
10010c34:	10023924 	.word	0x10023924
10010c38:	10023928 	.word	0x10023928
10010c3c:	10023968 	.word	0x10023968
10010c40:	100239b8 	.word	0x100239b8

10010c44 <PB_Init>:
#include "mxc_assert.h"
#include "pb.h"

/******************************************************************************/
int PB_Init(void)
{
10010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int retval = E_NO_ERROR;
    unsigned int i;

    // Enable pushbutton inputs
    for (i = 0; i < num_pbs; i++) {
10010c46:	4b0b      	ldr	r3, [pc, #44]	@ (10010c74 <PB_Init+0x30>)
10010c48:	681f      	ldr	r7, [r3, #0]
10010c4a:	b187      	cbz	r7, 10010c6e <PB_Init+0x2a>
10010c4c:	2400      	movs	r4, #0
10010c4e:	4d0a      	ldr	r5, [pc, #40]	@ (10010c78 <PB_Init+0x34>)
    int retval = E_NO_ERROR;
10010c50:	4626      	mov	r6, r4
        if (MXC_GPIO_Config(&pb_pin[i]) != E_NO_ERROR) {
10010c52:	4628      	mov	r0, r5
10010c54:	f001 f85c 	bl	10011d10 <MXC_GPIO_Config>
    for (i = 0; i < num_pbs; i++) {
10010c58:	3401      	adds	r4, #1
            retval = E_UNKNOWN;
10010c5a:	2800      	cmp	r0, #0
10010c5c:	bf18      	it	ne
10010c5e:	f06f 0607 	mvnne.w	r6, #7
    for (i = 0; i < num_pbs; i++) {
10010c62:	42bc      	cmp	r4, r7
10010c64:	f105 050c 	add.w	r5, r5, #12
10010c68:	d1f3      	bne.n	10010c52 <PB_Init+0xe>
        }
    }

    return retval;
}
10010c6a:	4630      	mov	r0, r6
10010c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int retval = E_NO_ERROR;
10010c6e:	463e      	mov	r6, r7
}
10010c70:	4630      	mov	r0, r6
10010c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010c74:	1002394c 	.word	0x1002394c
10010c78:	10023950 	.word	0x10023950

10010c7c <Reset_Handler>:
10010c7c:	4847      	ldr	r0, [pc, #284]	@ (10010d9c <LPCMP_IRQHandler+0x2>)
10010c7e:	4685      	mov	sp, r0
10010c80:	4847      	ldr	r0, [pc, #284]	@ (10010da0 <LPCMP_IRQHandler+0x6>)
10010c82:	4780      	blx	r0
10010c84:	b980      	cbnz	r0, 10010ca8 <.SKIPRAMINIT>
10010c86:	4947      	ldr	r1, [pc, #284]	@ (10010da4 <LPCMP_IRQHandler+0xa>)
10010c88:	4a47      	ldr	r2, [pc, #284]	@ (10010da8 <LPCMP_IRQHandler+0xe>)
10010c8a:	4b48      	ldr	r3, [pc, #288]	@ (10010dac <LPCMP_IRQHandler+0x12>)
10010c8c:	1a9b      	subs	r3, r3, r2
10010c8e:	dd03      	ble.n	10010c98 <Reset_Handler+0x1c>
10010c90:	3b04      	subs	r3, #4
10010c92:	58c8      	ldr	r0, [r1, r3]
10010c94:	50d0      	str	r0, [r2, r3]
10010c96:	dcfb      	bgt.n	10010c90 <Reset_Handler+0x14>
10010c98:	4945      	ldr	r1, [pc, #276]	@ (10010db0 <LPCMP_IRQHandler+0x16>)
10010c9a:	4a46      	ldr	r2, [pc, #280]	@ (10010db4 <LPCMP_IRQHandler+0x1a>)
10010c9c:	2000      	movs	r0, #0
10010c9e:	4291      	cmp	r1, r2
10010ca0:	bfbc      	itt	lt
10010ca2:	f841 0b04 	strlt.w	r0, [r1], #4
10010ca6:	e7fa      	blt.n	10010c9e <Reset_Handler+0x22>

10010ca8 <.SKIPRAMINIT>:
10010ca8:	4843      	ldr	r0, [pc, #268]	@ (10010db8 <LPCMP_IRQHandler+0x1e>)
10010caa:	4780      	blx	r0
10010cac:	4843      	ldr	r0, [pc, #268]	@ (10010dbc <LPCMP_IRQHandler+0x22>)
10010cae:	4780      	blx	r0
10010cb0:	4843      	ldr	r0, [pc, #268]	@ (10010dc0 <LPCMP_IRQHandler+0x26>)
10010cb2:	4780      	blx	r0

10010cb4 <.SPIN>:
10010cb4:	f7ff fffe 	bl	10010cb4 <.SPIN>
10010cb8:	e7fe      	b.n	10010cb8 <.SPIN+0x4>

10010cba <HardFault_Handler>:
10010cba:	e7fe      	b.n	10010cba <HardFault_Handler>

10010cbc <MemManage_Handler>:
10010cbc:	e7fe      	b.n	10010cbc <MemManage_Handler>

10010cbe <BusFault_Handler>:
10010cbe:	e7fe      	b.n	10010cbe <BusFault_Handler>

10010cc0 <UsageFault_Handler>:
10010cc0:	e7fe      	b.n	10010cc0 <UsageFault_Handler>

10010cc2 <SVC_Handler>:
10010cc2:	e7fe      	b.n	10010cc2 <SVC_Handler>

10010cc4 <DebugMon_Handler>:
10010cc4:	e7fe      	b.n	10010cc4 <DebugMon_Handler>

10010cc6 <PendSV_Handler>:
10010cc6:	e7fe      	b.n	10010cc6 <PendSV_Handler>

10010cc8 <SysTick_Handler>:
10010cc8:	e7fe      	b.n	10010cc8 <SysTick_Handler>

10010cca <Default_Handler>:
10010cca:	e7fe      	b.n	10010cca <Default_Handler>

10010ccc <PF_IRQHandler>:
10010ccc:	e7fe      	b.n	10010ccc <PF_IRQHandler>

10010cce <WDT0_IRQHandler>:
10010cce:	e7fe      	b.n	10010cce <WDT0_IRQHandler>

10010cd0 <RSV02_IRQHandler>:
10010cd0:	e7fe      	b.n	10010cd0 <RSV02_IRQHandler>

10010cd2 <RTC_IRQHandler>:
10010cd2:	e7fe      	b.n	10010cd2 <RTC_IRQHandler>

10010cd4 <TRNG_IRQHandler>:
10010cd4:	e7fe      	b.n	10010cd4 <TRNG_IRQHandler>

10010cd6 <TMR0_IRQHandler>:
10010cd6:	e7fe      	b.n	10010cd6 <TMR0_IRQHandler>

10010cd8 <TMR1_IRQHandler>:
10010cd8:	e7fe      	b.n	10010cd8 <TMR1_IRQHandler>

10010cda <TMR2_IRQHandler>:
10010cda:	e7fe      	b.n	10010cda <TMR2_IRQHandler>

10010cdc <TMR3_IRQHandler>:
10010cdc:	e7fe      	b.n	10010cdc <TMR3_IRQHandler>

10010cde <TMR4_IRQHandler>:
10010cde:	e7fe      	b.n	10010cde <TMR4_IRQHandler>

10010ce0 <TMR5_IRQHandler>:
10010ce0:	e7fe      	b.n	10010ce0 <TMR5_IRQHandler>

10010ce2 <RSV11_IRQHandler>:
10010ce2:	e7fe      	b.n	10010ce2 <RSV11_IRQHandler>

10010ce4 <RSV12_IRQHandler>:
10010ce4:	e7fe      	b.n	10010ce4 <RSV12_IRQHandler>

10010ce6 <I2C0_IRQHandler>:
10010ce6:	e7fe      	b.n	10010ce6 <I2C0_IRQHandler>

10010ce8 <UART0_IRQHandler>:
10010ce8:	e7fe      	b.n	10010ce8 <UART0_IRQHandler>

10010cea <UART1_IRQHandler>:
10010cea:	e7fe      	b.n	10010cea <UART1_IRQHandler>

10010cec <SPI1_IRQHandler>:
10010cec:	e7fe      	b.n	10010cec <SPI1_IRQHandler>

10010cee <RSV17_IRQHandler>:
10010cee:	e7fe      	b.n	10010cee <RSV17_IRQHandler>

10010cf0 <RSV18_IRQHandler>:
10010cf0:	e7fe      	b.n	10010cf0 <RSV18_IRQHandler>

10010cf2 <RSV19_IRQHandler>:
10010cf2:	e7fe      	b.n	10010cf2 <RSV19_IRQHandler>

10010cf4 <ADC_IRQHandler>:
10010cf4:	e7fe      	b.n	10010cf4 <ADC_IRQHandler>

10010cf6 <RSV21_IRQHandler>:
10010cf6:	e7fe      	b.n	10010cf6 <RSV21_IRQHandler>

10010cf8 <RSV22_IRQHandler>:
10010cf8:	e7fe      	b.n	10010cf8 <RSV22_IRQHandler>

10010cfa <FLC0_IRQHandler>:
10010cfa:	e7fe      	b.n	10010cfa <FLC0_IRQHandler>
10010cfc:	e7fe      	b.n	10010cfc <FLC0_IRQHandler+0x2>
10010cfe:	e7fe      	b.n	10010cfe <FLC0_IRQHandler+0x4>

10010d00 <GPIO2_IRQHandler>:
10010d00:	e7fe      	b.n	10010d00 <GPIO2_IRQHandler>

10010d02 <RSV27_IRQHandler>:
10010d02:	e7fe      	b.n	10010d02 <RSV27_IRQHandler>
10010d04:	e7fe      	b.n	10010d04 <RSV27_IRQHandler+0x2>

10010d06 <DMA1_IRQHandler>:
10010d06:	e7fe      	b.n	10010d06 <DMA1_IRQHandler>

10010d08 <DMA2_IRQHandler>:
10010d08:	e7fe      	b.n	10010d08 <DMA2_IRQHandler>

10010d0a <DMA3_IRQHandler>:
10010d0a:	e7fe      	b.n	10010d0a <DMA3_IRQHandler>

10010d0c <RSV32_IRQHandler>:
10010d0c:	e7fe      	b.n	10010d0c <RSV32_IRQHandler>

10010d0e <RSV33_IRQHandler>:
10010d0e:	e7fe      	b.n	10010d0e <RSV33_IRQHandler>

10010d10 <UART2_IRQHandler>:
10010d10:	e7fe      	b.n	10010d10 <UART2_IRQHandler>

10010d12 <RSV35_IRQHandler>:
10010d12:	e7fe      	b.n	10010d12 <RSV35_IRQHandler>

10010d14 <I2C1_IRQHandler>:
10010d14:	e7fe      	b.n	10010d14 <I2C1_IRQHandler>

10010d16 <RSV37_IRQHandler>:
10010d16:	e7fe      	b.n	10010d16 <RSV37_IRQHandler>

10010d18 <RSV38_IRQHandler>:
10010d18:	e7fe      	b.n	10010d18 <RSV38_IRQHandler>

10010d1a <RSV39_IRQHandler>:
10010d1a:	e7fe      	b.n	10010d1a <RSV39_IRQHandler>

10010d1c <RSV40_IRQHandler>:
10010d1c:	e7fe      	b.n	10010d1c <RSV40_IRQHandler>

10010d1e <RSV41_IRQHandler>:
10010d1e:	e7fe      	b.n	10010d1e <RSV41_IRQHandler>

10010d20 <RSV42_IRQHandler>:
10010d20:	e7fe      	b.n	10010d20 <RSV42_IRQHandler>

10010d22 <RSV43_IRQHandler>:
10010d22:	e7fe      	b.n	10010d22 <RSV43_IRQHandler>

10010d24 <RSV44_IRQHandler>:
10010d24:	e7fe      	b.n	10010d24 <RSV44_IRQHandler>

10010d26 <RSV45_IRQHandler>:
10010d26:	e7fe      	b.n	10010d26 <RSV45_IRQHandler>

10010d28 <RSV46_IRQHandler>:
10010d28:	e7fe      	b.n	10010d28 <RSV46_IRQHandler>

10010d2a <RSV47_IRQHandler>:
10010d2a:	e7fe      	b.n	10010d2a <RSV47_IRQHandler>

10010d2c <RSV48_IRQHandler>:
10010d2c:	e7fe      	b.n	10010d2c <RSV48_IRQHandler>

10010d2e <RSV49_IRQHandler>:
10010d2e:	e7fe      	b.n	10010d2e <RSV49_IRQHandler>

10010d30 <RSV50_IRQHandler>:
10010d30:	e7fe      	b.n	10010d30 <RSV50_IRQHandler>

10010d32 <RSV51_IRQHandler>:
10010d32:	e7fe      	b.n	10010d32 <RSV51_IRQHandler>

10010d34 <RSV52_IRQHandler>:
10010d34:	e7fe      	b.n	10010d34 <RSV52_IRQHandler>

10010d36 <WUT_IRQHandler>:
10010d36:	e7fe      	b.n	10010d36 <WUT_IRQHandler>

10010d38 <GPIOWAKE_IRQHandler>:
10010d38:	e7fe      	b.n	10010d38 <GPIOWAKE_IRQHandler>

10010d3a <RSV55_IRQHandler>:
10010d3a:	e7fe      	b.n	10010d3a <RSV55_IRQHandler>

10010d3c <SPI0_IRQHandler>:
10010d3c:	e7fe      	b.n	10010d3c <SPI0_IRQHandler>

10010d3e <WDT1_IRQHandler>:
10010d3e:	e7fe      	b.n	10010d3e <WDT1_IRQHandler>

10010d40 <RSV58_IRQHandler>:
10010d40:	e7fe      	b.n	10010d40 <RSV58_IRQHandler>

10010d42 <PT_IRQHandler>:
10010d42:	e7fe      	b.n	10010d42 <PT_IRQHandler>

10010d44 <RSV60_IRQHandler>:
10010d44:	e7fe      	b.n	10010d44 <RSV60_IRQHandler>

10010d46 <RSV61_IRQHandler>:
10010d46:	e7fe      	b.n	10010d46 <RSV61_IRQHandler>

10010d48 <I2C2_IRQHandler>:
10010d48:	e7fe      	b.n	10010d48 <I2C2_IRQHandler>

10010d4a <RISCV_IRQHandler>:
10010d4a:	e7fe      	b.n	10010d4a <RISCV_IRQHandler>

10010d4c <RSV64_IRQHandler>:
10010d4c:	e7fe      	b.n	10010d4c <RSV64_IRQHandler>

10010d4e <RSV65_IRQHandler>:
10010d4e:	e7fe      	b.n	10010d4e <RSV65_IRQHandler>

10010d50 <RSV66_IRQHandler>:
10010d50:	e7fe      	b.n	10010d50 <RSV66_IRQHandler>

10010d52 <OWM_IRQHandler>:
10010d52:	e7fe      	b.n	10010d52 <OWM_IRQHandler>

10010d54 <RSV68_IRQHandler>:
10010d54:	e7fe      	b.n	10010d54 <RSV68_IRQHandler>

10010d56 <RSV69_IRQHandler>:
10010d56:	e7fe      	b.n	10010d56 <RSV69_IRQHandler>

10010d58 <RSV70_IRQHandler>:
10010d58:	e7fe      	b.n	10010d58 <RSV70_IRQHandler>

10010d5a <RSV71_IRQHandler>:
10010d5a:	e7fe      	b.n	10010d5a <RSV71_IRQHandler>

10010d5c <RSV72_IRQHandler>:
10010d5c:	e7fe      	b.n	10010d5c <RSV72_IRQHandler>

10010d5e <RSV73_IRQHandler>:
10010d5e:	e7fe      	b.n	10010d5e <RSV73_IRQHandler>

10010d60 <RSV74_IRQHandler>:
10010d60:	e7fe      	b.n	10010d60 <RSV74_IRQHandler>

10010d62 <RSV75_IRQHandler>:
10010d62:	e7fe      	b.n	10010d62 <RSV75_IRQHandler>

10010d64 <RSV76_IRQHandler>:
10010d64:	e7fe      	b.n	10010d64 <RSV76_IRQHandler>

10010d66 <RSV77_IRQHandler>:
10010d66:	e7fe      	b.n	10010d66 <RSV77_IRQHandler>

10010d68 <RSV78_IRQHandler>:
10010d68:	e7fe      	b.n	10010d68 <RSV78_IRQHandler>

10010d6a <RSV79_IRQHandler>:
10010d6a:	e7fe      	b.n	10010d6a <RSV79_IRQHandler>

10010d6c <RSV80_IRQHandler>:
10010d6c:	e7fe      	b.n	10010d6c <RSV80_IRQHandler>

10010d6e <RSV81_IRQHandler>:
10010d6e:	e7fe      	b.n	10010d6e <RSV81_IRQHandler>

10010d70 <ECC_IRQHandler>:
10010d70:	e7fe      	b.n	10010d70 <ECC_IRQHandler>

10010d72 <DVS_IRQHandler>:
10010d72:	e7fe      	b.n	10010d72 <DVS_IRQHandler>

10010d74 <SIMO_IRQHandler>:
10010d74:	e7fe      	b.n	10010d74 <SIMO_IRQHandler>

10010d76 <RSV85_IRQHandler>:
10010d76:	e7fe      	b.n	10010d76 <RSV85_IRQHandler>

10010d78 <RSV86_IRQHandler>:
10010d78:	e7fe      	b.n	10010d78 <RSV86_IRQHandler>

10010d7a <RSV87_IRQHandler>:
10010d7a:	e7fe      	b.n	10010d7a <RSV87_IRQHandler>

10010d7c <UART3_IRQHandler>:
10010d7c:	e7fe      	b.n	10010d7c <UART3_IRQHandler>

10010d7e <RSV89_IRQHandler>:
10010d7e:	e7fe      	b.n	10010d7e <RSV89_IRQHandler>

10010d80 <RSV90_IRQHandler>:
10010d80:	e7fe      	b.n	10010d80 <RSV90_IRQHandler>

10010d82 <PCIF_IRQHandler>:
10010d82:	e7fe      	b.n	10010d82 <PCIF_IRQHandler>

10010d84 <RSV92_IRQHandler>:
10010d84:	e7fe      	b.n	10010d84 <RSV92_IRQHandler>

10010d86 <RSV93_IRQHandler>:
10010d86:	e7fe      	b.n	10010d86 <RSV93_IRQHandler>

10010d88 <RSV94_IRQHandler>:
10010d88:	e7fe      	b.n	10010d88 <RSV94_IRQHandler>

10010d8a <RSV95_IRQHandler>:
10010d8a:	e7fe      	b.n	10010d8a <RSV95_IRQHandler>

10010d8c <RSV96_IRQHandler>:
10010d8c:	e7fe      	b.n	10010d8c <RSV96_IRQHandler>

10010d8e <AES_IRQHandler>:
10010d8e:	e7fe      	b.n	10010d8e <AES_IRQHandler>

10010d90 <RSV98_IRQHandler>:
10010d90:	e7fe      	b.n	10010d90 <RSV98_IRQHandler>

10010d92 <I2S_IRQHandler>:
10010d92:	e7fe      	b.n	10010d92 <I2S_IRQHandler>

10010d94 <CNN_FIFO_IRQHandler>:
10010d94:	e7fe      	b.n	10010d94 <CNN_FIFO_IRQHandler>

10010d96 <CNN_IRQHandler>:
10010d96:	e7fe      	b.n	10010d96 <CNN_IRQHandler>

10010d98 <RSV102_IRQHandler>:
10010d98:	e7fe      	b.n	10010d98 <RSV102_IRQHandler>

10010d9a <LPCMP_IRQHandler>:
10010d9a:	e7fe      	b.n	10010d9a <LPCMP_IRQHandler>
10010d9c:	20020000 	.word	0x20020000
10010da0:	10010e69 	.word	0x10010e69
10010da4:	10023f28 	.word	0x10023f28
10010da8:	20000000 	.word	0x20000000
10010dac:	20000738 	.word	0x20000738
10010db0:	20000800 	.word	0x20000800
10010db4:	20001898 	.word	0x20001898
10010db8:	10010e6d 	.word	0x10010e6d
10010dbc:	10016d49 	.word	0x10016d49
10010dc0:	1000eb19 	.word	0x1000eb19

10010dc4 <_sbrk>:
extern unsigned int __HeapLimit;
caddr_t _sbrk(int incr)
{
    char *prev_heap_end;

    if (heap_end == 0) {
10010dc4:	4a0b      	ldr	r2, [pc, #44]	@ (10010df4 <_sbrk+0x30>)
{
10010dc6:	b508      	push	{r3, lr}
10010dc8:	4603      	mov	r3, r0
    if (heap_end == 0) {
10010dca:	6810      	ldr	r0, [r2, #0]
10010dcc:	b128      	cbz	r0, 10010dda <_sbrk+0x16>
        heap_end = (caddr_t)&__HeapBase;
    }
    prev_heap_end = heap_end;

    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
10010dce:	490a      	ldr	r1, [pc, #40]	@ (10010df8 <_sbrk+0x34>)
10010dd0:	4403      	add	r3, r0
10010dd2:	428b      	cmp	r3, r1
10010dd4:	d807      	bhi.n	10010de6 <_sbrk+0x22>
        errno = ENOMEM;
        return (caddr_t)-1;
    }

    heap_end += incr;
10010dd6:	6013      	str	r3, [r2, #0]

    return (caddr_t)prev_heap_end;
}
10010dd8:	bd08      	pop	{r3, pc}
        heap_end = (caddr_t)&__HeapBase;
10010dda:	4808      	ldr	r0, [pc, #32]	@ (10010dfc <_sbrk+0x38>)
    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
10010ddc:	4906      	ldr	r1, [pc, #24]	@ (10010df8 <_sbrk+0x34>)
        heap_end = (caddr_t)&__HeapBase;
10010dde:	6010      	str	r0, [r2, #0]
    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
10010de0:	4403      	add	r3, r0
10010de2:	428b      	cmp	r3, r1
10010de4:	d9f7      	bls.n	10010dd6 <_sbrk+0x12>
        errno = ENOMEM;
10010de6:	f005 ff9b 	bl	10016d20 <__errno>
10010dea:	230c      	movs	r3, #12
10010dec:	6003      	str	r3, [r0, #0]
        return (caddr_t)-1;
10010dee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10010df2:	bd08      	pop	{r3, pc}
10010df4:	20000c4c 	.word	0x20000c4c
10010df8:	2001f000 	.word	0x2001f000
10010dfc:	200018a0 	.word	0x200018a0

10010e00 <SystemCoreClockUpdate>:
__weak void SystemCoreClockUpdate(void)
{
    uint32_t base_freq, div, clk_src;

    // Get the clock source and frequency
    clk_src = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_SEL);
10010e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
10010e04:	689a      	ldr	r2, [r3, #8]
10010e06:	f402 6260 	and.w	r2, r2, #3584	@ 0xe00
    switch (clk_src) {
10010e0a:	f5b2 6f20 	cmp.w	r2, #2560	@ 0xa00
10010e0e:	d020      	beq.n	10010e52 <SystemCoreClockUpdate+0x52>
10010e10:	d911      	bls.n	10010e36 <SystemCoreClockUpdate+0x36>
10010e12:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
10010e16:	d017      	beq.n	10010e48 <SystemCoreClockUpdate+0x48>
        break;
    case MXC_S_GCR_CLKCTRL_SYSCLK_SEL_INRO:
        base_freq = INRO_FREQ;
        break;
    case MXC_S_GCR_CLKCTRL_SYSCLK_SEL_IPO:
        base_freq = IPO_FREQ;
10010e18:	4b0f      	ldr	r3, [pc, #60]	@ (10010e58 <SystemCoreClockUpdate+0x58>)
10010e1a:	4910      	ldr	r1, [pc, #64]	@ (10010e5c <SystemCoreClockUpdate+0x5c>)
10010e1c:	f5b2 6f60 	cmp.w	r2, #3584	@ 0xe00
10010e20:	bf18      	it	ne
10010e22:	460b      	movne	r3, r1
        // This code should never execute, however, initialize to safe value.
        base_freq = HIRC_FREQ;
        break;
    }

    div = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_DIV) >> MXC_F_GCR_CLKCTRL_SYSCLK_DIV_POS;
10010e24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000

    SystemCoreClock = base_freq >> div;
10010e28:	490d      	ldr	r1, [pc, #52]	@ (10010e60 <SystemCoreClockUpdate+0x60>)
    div = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_DIV) >> MXC_F_GCR_CLKCTRL_SYSCLK_DIV_POS;
10010e2a:	6892      	ldr	r2, [r2, #8]
10010e2c:	f3c2 1282 	ubfx	r2, r2, #6, #3
    SystemCoreClock = base_freq >> div;
10010e30:	40d3      	lsrs	r3, r2
10010e32:	600b      	str	r3, [r1, #0]
}
10010e34:	4770      	bx	lr
    switch (clk_src) {
10010e36:	b152      	cbz	r2, 10010e4e <SystemCoreClockUpdate+0x4e>
        base_freq = IPO_FREQ;
10010e38:	4908      	ldr	r1, [pc, #32]	@ (10010e5c <SystemCoreClockUpdate+0x5c>)
10010e3a:	f247 5330 	movw	r3, #30000	@ 0x7530
10010e3e:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
10010e42:	bf18      	it	ne
10010e44:	460b      	movne	r3, r1
10010e46:	e7ed      	b.n	10010e24 <SystemCoreClockUpdate+0x24>
        base_freq = ERTCO_FREQ;
10010e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
10010e4c:	e7ea      	b.n	10010e24 <SystemCoreClockUpdate+0x24>
        base_freq = ISO_FREQ;
10010e4e:	4b05      	ldr	r3, [pc, #20]	@ (10010e64 <SystemCoreClockUpdate+0x64>)
10010e50:	e7e8      	b.n	10010e24 <SystemCoreClockUpdate+0x24>
        base_freq = IBRO_FREQ;
10010e52:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
10010e56:	e7e5      	b.n	10010e24 <SystemCoreClockUpdate+0x24>
10010e58:	047868c0 	.word	0x047868c0
10010e5c:	05f5e100 	.word	0x05f5e100
10010e60:	20001898 	.word	0x20001898
10010e64:	03938700 	.word	0x03938700

10010e68 <PreInit>:
 */
__weak int PreInit(void)
{
    /* Do nothing */
    return 0;
}
10010e68:	2000      	movs	r0, #0
10010e6a:	4770      	bx	lr

10010e6c <SystemInit>:
 * You may over-ride this function in your program by defining a custom 
 *  SystemInit(), but care should be taken to reproduce the initialization
 *  steps or a non-functional system may result.
 */
__weak void SystemInit(void)
{
10010e6c:	b510      	push	{r4, lr}
    /* Configure the interrupt controller to use the application vector table in */
    /* the application space */
#if defined(__CC_ARM) || defined(__GNUC__)
    /* IAR sets the VTOR pointer incorrectly and causes stack corruption */
    SCB->VTOR = (uint32_t)__isr_vector;
10010e6e:	4c0a      	ldr	r4, [pc, #40]	@ (10010e98 <SystemInit+0x2c>)
10010e70:	4b0a      	ldr	r3, [pc, #40]	@ (10010e9c <SystemInit+0x30>)
10010e72:	60a3      	str	r3, [r4, #8]
#endif /* __CC_ARM || __GNUC__ */

    /* Enable instruction cache */
    MXC_ICC_Enable(MXC_ICC0);
10010e74:	480a      	ldr	r0, [pc, #40]	@ (10010ea0 <SystemInit+0x34>)
10010e76:	f001 faaa 	bl	100123ce <MXC_ICC_Enable>

    /* Enable FPU on Cortex-M4, which occupies coprocessor slots 10 & 11 */
    /* Grant full access, per "Table B3-24 CPACR bit assignments". */
    /* DDI0403D "ARMv7-M Architecture Reference Manual" */
    SCB->CPACR |= SCB_CPACR_CP10_Msk | SCB_CPACR_CP11_Msk;
10010e7a:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
10010e7e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10010e82:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
10010e86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10010e8a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();

    SystemCoreClockUpdate();
10010e8e:	f7ff ffb7 	bl	10010e00 <SystemCoreClockUpdate>

    Board_Init();
10010e92:	f7ff fdd7 	bl	10010a44 <Board_Init>
}
10010e96:	bd10      	pop	{r4, pc}
10010e98:	e000ed00 	.word	0xe000ed00
10010e9c:	1000e000 	.word	0x1000e000
10010ea0:	4002a000 	.word	0x4002a000

10010ea4 <MXC_DelayInit>:
    }
}

/* ************************************************************************** */
static void MXC_DelayInit(uint32_t us)
{
10010ea4:	b538      	push	{r3, r4, r5, lr}
    uint32_t starttick, reload, ticks, lastticks;

    // Record the current tick value and clear the overflow flag
    starttick = SysTick->VAL;
10010ea6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000

    // Save the state of control register (and clear the overflow flag)
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
10010eaa:	4918      	ldr	r1, [pc, #96]	@ (10010f0c <MXC_DelayInit+0x68>)
    starttick = SysTick->VAL;
10010eac:	699c      	ldr	r4, [r3, #24]
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
10010eae:	691a      	ldr	r2, [r3, #16]
10010eb0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
10010eb4:	600a      	str	r2, [r1, #0]

    // If the SysTick is not running, configure and start it
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk)) {
10010eb6:	691a      	ldr	r2, [r3, #16]
10010eb8:	07d2      	lsls	r2, r2, #31
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
10010eba:	bf5b      	ittet	pl
10010ebc:	f06f 447f 	mvnpl.w	r4, #4278190080	@ 0xff000000
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
10010ec0:	2205      	movpl	r2, #5
        starttick = SysTick_VAL_CURRENT_Msk;
        reload = SysTick_LOAD_RELOAD_Msk + 1;
    } else {
        reload = SysTick->LOAD + 1; // get the current reload value
10010ec2:	695d      	ldrmi	r5, [r3, #20]
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
10010ec4:	615c      	strpl	r4, [r3, #20]
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
10010ec6:	bf5c      	itt	pl
10010ec8:	619c      	strpl	r4, [r3, #24]
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
10010eca:	611a      	strpl	r2, [r3, #16]
    }

    // Calculate the total number of ticks to delay
    ticks = (uint32_t)(((uint64_t)us * (uint64_t)SystemCoreClock) / 1000000);
10010ecc:	4b10      	ldr	r3, [pc, #64]	@ (10010f10 <MXC_DelayInit+0x6c>)
10010ece:	4a11      	ldr	r2, [pc, #68]	@ (10010f14 <MXC_DelayInit+0x70>)
10010ed0:	6819      	ldr	r1, [r3, #0]
10010ed2:	f04f 0300 	mov.w	r3, #0
10010ed6:	fba0 0101 	umull	r0, r1, r0, r1
        reload = SysTick_LOAD_RELOAD_Msk + 1;
10010eda:	bf54      	ite	pl
10010edc:	f04f 7580 	movpl.w	r5, #16777216	@ 0x1000000
        reload = SysTick->LOAD + 1; // get the current reload value
10010ee0:	3501      	addmi	r5, #1
    ticks = (uint32_t)(((uint64_t)us * (uint64_t)SystemCoreClock) / 1000000);
10010ee2:	f00a fc8b 	bl	1001b7fc <__aeabi_uldivmod>

    // How many overflows of the SysTick will occur
    overflows = ticks / reload;
10010ee6:	4b0c      	ldr	r3, [pc, #48]	@ (10010f18 <MXC_DelayInit+0x74>)
10010ee8:	fbb0 f2f5 	udiv	r2, r0, r5

    // How many remaining ticks after the last overflow
    lastticks = ticks % reload;
10010eec:	fb05 0012 	mls	r0, r5, r2, r0

    // Check if there will be another overflow due to the current value of the SysTick
    if (lastticks >= starttick) {
10010ef0:	4284      	cmp	r4, r0
    overflows = ticks / reload;
10010ef2:	601a      	str	r2, [r3, #0]
        overflows++;
10010ef4:	bf9f      	itttt	ls
10010ef6:	681a      	ldrls	r2, [r3, #0]
10010ef8:	3201      	addls	r2, #1
10010efa:	601a      	strls	r2, [r3, #0]
        endtick = reload - (lastticks - starttick);
10010efc:	192d      	addls	r5, r5, r4
10010efe:	4b07      	ldr	r3, [pc, #28]	@ (10010f1c <MXC_DelayInit+0x78>)
10010f00:	bf94      	ite	ls
10010f02:	1a28      	subls	r0, r5, r0
    } else {
        endtick = starttick - lastticks;
10010f04:	1a20      	subhi	r0, r4, r0
        endtick = reload - (lastticks - starttick);
10010f06:	6018      	str	r0, [r3, #0]
    }
}
10010f08:	bd38      	pop	{r3, r4, r5, pc}
10010f0a:	bf00      	nop
10010f0c:	20000c54 	.word	0x20000c54
10010f10:	20001898 	.word	0x20001898
10010f14:	000f4240 	.word	0x000f4240
10010f18:	20000074 	.word	0x20000074
10010f1c:	20000c58 	.word	0x20000c58

10010f20 <MXC_DelayAsync>:

/* ************************************************************************** */
int MXC_DelayAsync(uint32_t us, mxc_delay_complete_t callback)
{
10010f20:	b510      	push	{r4, lr}
    cbFunc = callback;
10010f22:	4a0b      	ldr	r2, [pc, #44]	@ (10010f50 <MXC_DelayAsync+0x30>)

    // Check if timeout currently ongoing
    if (overflows > 0) {
10010f24:	4c0b      	ldr	r4, [pc, #44]	@ (10010f54 <MXC_DelayAsync+0x34>)
    cbFunc = callback;
10010f26:	6011      	str	r1, [r2, #0]
    if (overflows > 0) {
10010f28:	6822      	ldr	r2, [r4, #0]
10010f2a:	2a00      	cmp	r2, #0
10010f2c:	dc0d      	bgt.n	10010f4a <MXC_DelayAsync+0x2a>
        return E_BUSY;
    }

    // Check if there is nothing to do
    if (us == 0) {
10010f2e:	b150      	cbz	r0, 10010f46 <MXC_DelayAsync+0x26>
        return E_NO_ERROR;
    }

    // Calculate the necessary delay and start the timer
    MXC_DelayInit(us);
10010f30:	f7ff ffb8 	bl	10010ea4 <MXC_DelayInit>

    // Enable SysTick interrupt if necessary
    if (overflows > 0) {
10010f34:	6823      	ldr	r3, [r4, #0]
10010f36:	2b00      	cmp	r3, #0
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
10010f38:	bfc1      	itttt	gt
10010f3a:	f04f 22e0 	movgt.w	r2, #3758153728	@ 0xe000e000
10010f3e:	6913      	ldrgt	r3, [r2, #16]
10010f40:	f043 0302 	orrgt.w	r3, r3, #2
10010f44:	6113      	strgt	r3, [r2, #16]
        return E_NO_ERROR;
10010f46:	2000      	movs	r0, #0
    }

    return E_NO_ERROR;
}
10010f48:	bd10      	pop	{r4, pc}
        return E_BUSY;
10010f4a:	f06f 0005 	mvn.w	r0, #5
10010f4e:	e7fb      	b.n	10010f48 <MXC_DelayAsync+0x28>
10010f50:	20000c50 	.word	0x20000c50
10010f54:	20000074 	.word	0x20000074

10010f58 <MXC_DelayAbort>:
    return E_BUSY;
}

/* ************************************************************************** */
void MXC_DelayAbort(void)
{
10010f58:	b510      	push	{r4, lr}
    if (cbFunc != NULL) {
10010f5a:	4c09      	ldr	r4, [pc, #36]	@ (10010f80 <MXC_DelayAbort+0x28>)
10010f5c:	6823      	ldr	r3, [r4, #0]
10010f5e:	b123      	cbz	r3, 10010f6a <MXC_DelayAbort+0x12>
        cbFunc(E_ABORT);
10010f60:	f06f 000f 	mvn.w	r0, #15
10010f64:	4798      	blx	r3
        cbFunc = NULL;
10010f66:	2300      	movs	r3, #0
10010f68:	6023      	str	r3, [r4, #0]
    }

    SysTick->CTRL = ctrl_save;
10010f6a:	4b06      	ldr	r3, [pc, #24]	@ (10010f84 <MXC_DelayAbort+0x2c>)
10010f6c:	681a      	ldr	r2, [r3, #0]
10010f6e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
10010f72:	611a      	str	r2, [r3, #16]
    overflows = -1;
10010f74:	4b04      	ldr	r3, [pc, #16]	@ (10010f88 <MXC_DelayAbort+0x30>)
10010f76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10010f7a:	601a      	str	r2, [r3, #0]
}
10010f7c:	bd10      	pop	{r4, pc}
10010f7e:	bf00      	nop
10010f80:	20000c50 	.word	0x20000c50
10010f84:	20000c54 	.word	0x20000c54
10010f88:	20000074 	.word	0x20000074

10010f8c <MXC_DelayCheck>:
{
10010f8c:	b538      	push	{r3, r4, r5, lr}
    if (overflows < 0) {
10010f8e:	4b11      	ldr	r3, [pc, #68]	@ (10010fd4 <MXC_DelayCheck+0x48>)
10010f90:	681a      	ldr	r2, [r3, #0]
10010f92:	2a00      	cmp	r2, #0
10010f94:	da08      	bge.n	10010fa8 <MXC_DelayCheck+0x1c>
        if (cbFunc != NULL) {
10010f96:	4c10      	ldr	r4, [pc, #64]	@ (10010fd8 <MXC_DelayCheck+0x4c>)
10010f98:	6823      	ldr	r3, [r4, #0]
10010f9a:	b11b      	cbz	r3, 10010fa4 <MXC_DelayCheck+0x18>
            cbFunc(E_NO_ERROR);
10010f9c:	2000      	movs	r0, #0
10010f9e:	4798      	blx	r3
            cbFunc = NULL;
10010fa0:	2300      	movs	r3, #0
10010fa2:	6023      	str	r3, [r4, #0]
        return E_NO_ERROR;
10010fa4:	2000      	movs	r0, #0
}
10010fa6:	bd38      	pop	{r3, r4, r5, pc}
    if ((overflows == 0) && (SysTick->VAL <= endtick)) {
10010fa8:	681c      	ldr	r4, [r3, #0]
10010faa:	b984      	cbnz	r4, 10010fce <MXC_DelayCheck+0x42>
10010fac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
10010fb0:	699a      	ldr	r2, [r3, #24]
10010fb2:	4b0a      	ldr	r3, [pc, #40]	@ (10010fdc <MXC_DelayCheck+0x50>)
10010fb4:	681b      	ldr	r3, [r3, #0]
10010fb6:	429a      	cmp	r2, r3
10010fb8:	d809      	bhi.n	10010fce <MXC_DelayCheck+0x42>
        if (cbFunc != NULL) {
10010fba:	4d07      	ldr	r5, [pc, #28]	@ (10010fd8 <MXC_DelayCheck+0x4c>)
        MXC_DelayAbort();
10010fbc:	f7ff ffcc 	bl	10010f58 <MXC_DelayAbort>
        if (cbFunc != NULL) {
10010fc0:	682b      	ldr	r3, [r5, #0]
10010fc2:	2b00      	cmp	r3, #0
10010fc4:	d0ee      	beq.n	10010fa4 <MXC_DelayCheck+0x18>
            cbFunc(E_NO_ERROR);
10010fc6:	4620      	mov	r0, r4
10010fc8:	4798      	blx	r3
            cbFunc = NULL;
10010fca:	602c      	str	r4, [r5, #0]
10010fcc:	e7ea      	b.n	10010fa4 <MXC_DelayCheck+0x18>
    return E_BUSY;
10010fce:	f06f 0005 	mvn.w	r0, #5
10010fd2:	e7e8      	b.n	10010fa6 <MXC_DelayCheck+0x1a>
10010fd4:	20000074 	.word	0x20000074
10010fd8:	20000c50 	.word	0x20000c50
10010fdc:	20000c58 	.word	0x20000c58

10010fe0 <MXC_Delay>:

/* ************************************************************************** */
int MXC_Delay(uint32_t us)
{
10010fe0:	b510      	push	{r4, lr}
    // Check if timeout currently ongoing
    if (overflows > 0) {
10010fe2:	4c11      	ldr	r4, [pc, #68]	@ (10011028 <MXC_Delay+0x48>)
10010fe4:	6822      	ldr	r2, [r4, #0]
10010fe6:	2a00      	cmp	r2, #0
10010fe8:	dc1a      	bgt.n	10011020 <MXC_Delay+0x40>
        return E_BUSY;
    }

    // Check if there is nothing to do
    if (us == 0) {
10010fea:	b178      	cbz	r0, 1001100c <MXC_Delay+0x2c>
        return E_NO_ERROR;
    }

    // Calculate the necessary delay and start the timer
    MXC_DelayInit(us);
10010fec:	f7ff ff5a 	bl	10010ea4 <MXC_DelayInit>
    // Wait for the number of overflows
    while (overflows > 0) {
        // If SysTick interrupts are enabled, COUNTFLAG will never be set here and
        // overflows will be decremented in the ISR. If SysTick interrupts are
        // disabled, overflows is decremented here.
        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
10010ff0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    while (overflows > 0) {
10010ff4:	6823      	ldr	r3, [r4, #0]
10010ff6:	2b00      	cmp	r3, #0
10010ff8:	dc0a      	bgt.n	10011010 <MXC_Delay+0x30>
            overflows--;
        }
    }

    // Wait for the counter value
    while (SysTick->VAL > endtick) {}
10010ffa:	4b0c      	ldr	r3, [pc, #48]	@ (1001102c <MXC_Delay+0x4c>)
10010ffc:	681b      	ldr	r3, [r3, #0]
10010ffe:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
10011002:	698a      	ldr	r2, [r1, #24]
10011004:	429a      	cmp	r2, r3
10011006:	d8fc      	bhi.n	10011002 <MXC_Delay+0x22>

    MXC_DelayAbort();
10011008:	f7ff ffa6 	bl	10010f58 <MXC_DelayAbort>
        return E_NO_ERROR;
1001100c:	2000      	movs	r0, #0
    return E_NO_ERROR;
}
1001100e:	bd10      	pop	{r4, pc}
        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
10011010:	6913      	ldr	r3, [r2, #16]
10011012:	03db      	lsls	r3, r3, #15
            overflows--;
10011014:	bf42      	ittt	mi
10011016:	6823      	ldrmi	r3, [r4, #0]
10011018:	f103 33ff 	addmi.w	r3, r3, #4294967295	@ 0xffffffff
1001101c:	6023      	strmi	r3, [r4, #0]
1001101e:	e7e9      	b.n	10010ff4 <MXC_Delay+0x14>
        return E_BUSY;
10011020:	f06f 0005 	mvn.w	r0, #5
10011024:	e7f3      	b.n	1001100e <MXC_Delay+0x2e>
10011026:	bf00      	nop
10011028:	20000074 	.word	0x20000074
1001102c:	20000c58 	.word	0x20000c58

10011030 <NVIC_SetRAM>:
__attribute__((aligned(512)))
#endif
static void (*ramVectorTable[MXC_IRQ_COUNT])(void);

void NVIC_SetRAM(void)
{
10011030:	b508      	push	{r3, lr}
#else
    /* should be defined in starup_<device>.S */
    extern uint32_t __isr_vector[MXC_IRQ_COUNT];
#endif

    memcpy(&ramVectorTable, &__isr_vector, sizeof(ramVectorTable));
10011032:	4b05      	ldr	r3, [pc, #20]	@ (10011048 <NVIC_SetRAM+0x18>)
10011034:	4905      	ldr	r1, [pc, #20]	@ (1001104c <NVIC_SetRAM+0x1c>)
10011036:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
1001103a:	4618      	mov	r0, r3
1001103c:	f005 ff08 	bl	10016e50 <memcpy>
    SCB->VTOR = (uint32_t)&ramVectorTable;
10011040:	4a03      	ldr	r2, [pc, #12]	@ (10011050 <NVIC_SetRAM+0x20>)
10011042:	6090      	str	r0, [r2, #8]
}
10011044:	bd08      	pop	{r3, pc}
10011046:	bf00      	nop
10011048:	20000e00 	.word	0x20000e00
1001104c:	1000e000 	.word	0x1000e000
10011050:	e000ed00 	.word	0xe000ed00

10011054 <MXC_NVIC_SetVector>:

void MXC_NVIC_SetVector(IRQn_Type irqn, void (*irq_handler)(void))
{
10011054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int index = irqn + 16; /* offset for externals */

    /* If not copied, do copy */
    if (SCB->VTOR != (uint32_t)&ramVectorTable) {
10011056:	4b0c      	ldr	r3, [pc, #48]	@ (10011088 <MXC_NVIC_SetVector+0x34>)
10011058:	4e0c      	ldr	r6, [pc, #48]	@ (1001108c <MXC_NVIC_SetVector+0x38>)
1001105a:	689b      	ldr	r3, [r3, #8]
1001105c:	42b3      	cmp	r3, r6
{
1001105e:	4604      	mov	r4, r0
10011060:	460d      	mov	r5, r1
    int index = irqn + 16; /* offset for externals */
10011062:	f100 0710 	add.w	r7, r0, #16
    if (SCB->VTOR != (uint32_t)&ramVectorTable) {
10011066:	d001      	beq.n	1001106c <MXC_NVIC_SetVector+0x18>
        NVIC_SetRAM();
10011068:	f7ff ffe2 	bl	10011030 <NVIC_SetRAM>
  if ((int32_t)(IRQn) >= 0)
1001106c:	2c00      	cmp	r4, #0
    }

    ramVectorTable[index] = irq_handler;
1001106e:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
10011072:	db07      	blt.n	10011084 <MXC_NVIC_SetVector+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10011074:	4a06      	ldr	r2, [pc, #24]	@ (10011090 <MXC_NVIC_SetVector+0x3c>)
10011076:	0961      	lsrs	r1, r4, #5
10011078:	2301      	movs	r3, #1
1001107a:	f004 041f 	and.w	r4, r4, #31
1001107e:	40a3      	lsls	r3, r4
10011080:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NVIC_EnableIRQ(irqn);
}
10011084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011086:	bf00      	nop
10011088:	e000ed00 	.word	0xe000ed00
1001108c:	20000e00 	.word	0x20000e00
10011090:	e000e100 	.word	0xe000e100

10011094 <MXC_SYS_GetUSN>:

/* **** Functions **** */

/* ************************************************************************** */
int MXC_SYS_GetUSN(uint8_t *usn, uint8_t *checksum)
{
10011094:	b5f0      	push	{r4, r5, r6, r7, lr}
10011096:	460f      	mov	r7, r1
10011098:	b08f      	sub	sp, #60	@ 0x3c
    int err = E_NO_ERROR;
    uint32_t *infoblock = (uint32_t *)MXC_INFO0_MEM_BASE;

    if (usn == NULL) {
1001109a:	4604      	mov	r4, r0
1001109c:	2800      	cmp	r0, #0
1001109e:	d07d      	beq.n	1001119c <MXC_SYS_GetUSN+0x108>
    /* Read the USN from the info block */
    MXC_FLC_UnlockInfoBlock(MXC_INFO0_MEM_BASE);

    memset(usn, 0, MXC_SYS_USN_CHECKSUM_LEN);

    usn[0] = (infoblock[0] & 0x007F8000) >> 15;
100110a0:	f04f 5584 	mov.w	r5, #276824064	@ 0x10800000
    MXC_FLC_UnlockInfoBlock(MXC_INFO0_MEM_BASE);
100110a4:	f04f 5084 	mov.w	r0, #276824064	@ 0x10800000
100110a8:	f000 fd76 	bl	10011b98 <MXC_FLC_UnlockInfoBlock>
    memset(usn, 0, MXC_SYS_USN_CHECKSUM_LEN);
100110ac:	2210      	movs	r2, #16
100110ae:	2100      	movs	r1, #0
100110b0:	4620      	mov	r0, r4
100110b2:	f005 fd93 	bl	10016bdc <memset>
    usn[0] = (infoblock[0] & 0x007F8000) >> 15;
100110b6:	682b      	ldr	r3, [r5, #0]
100110b8:	0bdb      	lsrs	r3, r3, #15
100110ba:	7023      	strb	r3, [r4, #0]
    usn[1] = (infoblock[0] & 0x7F800000) >> 23;
100110bc:	682b      	ldr	r3, [r5, #0]
100110be:	0ddb      	lsrs	r3, r3, #23
100110c0:	7063      	strb	r3, [r4, #1]
    usn[2] = (infoblock[1] & 0x0000007F) << 1;
100110c2:	686b      	ldr	r3, [r5, #4]
100110c4:	005b      	lsls	r3, r3, #1
100110c6:	b2db      	uxtb	r3, r3
100110c8:	70a3      	strb	r3, [r4, #2]
    usn[2] |= (infoblock[0] & 0x80000000) >> 31;
100110ca:	682a      	ldr	r2, [r5, #0]
100110cc:	ea43 73d2 	orr.w	r3, r3, r2, lsr #31
100110d0:	70a3      	strb	r3, [r4, #2]
    usn[3] = (infoblock[1] & 0x00007F80) >> 7;
100110d2:	686b      	ldr	r3, [r5, #4]
100110d4:	09db      	lsrs	r3, r3, #7
100110d6:	70e3      	strb	r3, [r4, #3]
    usn[4] = (infoblock[1] & 0x007F8000) >> 15;
100110d8:	686b      	ldr	r3, [r5, #4]
100110da:	0bdb      	lsrs	r3, r3, #15
100110dc:	7123      	strb	r3, [r4, #4]
    usn[5] = (infoblock[1] & 0x7F800000) >> 23;
100110de:	686b      	ldr	r3, [r5, #4]
100110e0:	0ddb      	lsrs	r3, r3, #23
100110e2:	7163      	strb	r3, [r4, #5]
    usn[6] = (infoblock[2] & 0x007F8000) >> 15;
100110e4:	68ab      	ldr	r3, [r5, #8]
100110e6:	0bdb      	lsrs	r3, r3, #15
100110e8:	71a3      	strb	r3, [r4, #6]
    usn[7] = (infoblock[2] & 0x7F800000) >> 23;
100110ea:	68ab      	ldr	r3, [r5, #8]
100110ec:	0ddb      	lsrs	r3, r3, #23
100110ee:	71e3      	strb	r3, [r4, #7]
    usn[8] = (infoblock[3] & 0x0000007F) << 1;
100110f0:	68eb      	ldr	r3, [r5, #12]
100110f2:	005b      	lsls	r3, r3, #1
100110f4:	b2db      	uxtb	r3, r3
100110f6:	7223      	strb	r3, [r4, #8]
    usn[8] |= (infoblock[2] & 0x80000000) >> 31;
100110f8:	68aa      	ldr	r2, [r5, #8]
100110fa:	ea43 73d2 	orr.w	r3, r3, r2, lsr #31
100110fe:	7223      	strb	r3, [r4, #8]
    usn[9] = (infoblock[3] & 0x00007F80) >> 7;
10011100:	68eb      	ldr	r3, [r5, #12]
10011102:	09db      	lsrs	r3, r3, #7
10011104:	7263      	strb	r3, [r4, #9]
    usn[10] = (infoblock[3] & 0x007F8000) >> 15;
10011106:	68eb      	ldr	r3, [r5, #12]
10011108:	0bdb      	lsrs	r3, r3, #15
1001110a:	72a3      	strb	r3, [r4, #10]

    /* If requested, verify and return the checksum */
    if (checksum != NULL) {
1001110c:	2f00      	cmp	r7, #0
1001110e:	d039      	beq.n	10011184 <MXC_SYS_GetUSN+0xf0>
        uint8_t check_csum[MXC_SYS_USN_CHECKSUM_LEN];
        uint8_t aes_key[MXC_SYS_USN_CHECKSUM_LEN] = { 0 }; // NULL Key (per checksum spec)
10011110:	2300      	movs	r3, #0
10011112:	e9cd 3305 	strd	r3, r3, [sp, #20]
10011116:	e9cd 3307 	strd	r3, r3, [sp, #28]

        // Read Checksum from the infoblock
        checksum[0] = ((infoblock[3] & 0x7F800000) >> 23);
1001111a:	68eb      	ldr	r3, [r5, #12]
1001111c:	0ddb      	lsrs	r3, r3, #23
1001111e:	703b      	strb	r3, [r7, #0]
        checksum[1] = ((infoblock[4] & 0x007F8000) >> 15);
10011120:	692b      	ldr	r3, [r5, #16]
10011122:	0bdb      	lsrs	r3, r3, #15
10011124:	707b      	strb	r3, [r7, #1]

        err = MXC_AES_Init();
10011126:	f000 f90b 	bl	10011340 <MXC_AES_Init>
        if (err) {
1001112a:	4606      	mov	r6, r0
1001112c:	b128      	cbz	r0, 1001113a <MXC_SYS_GetUSN+0xa6>
        aes_req.encryption = MXC_AES_ENCRYPT_EXT_KEY;
        aes_req.callback = NULL;

        err = MXC_AES_Generic(&aes_req);
        if (err) {
            MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
1001112e:	4628      	mov	r0, r5
10011130:	f000 fd43 	bl	10011bba <MXC_FLC_LockInfoBlock>
    usn[12] = ((infoblock[4] & 0x007F8000) >> 15);

    MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);

    return err;
}
10011134:	4630      	mov	r0, r6
10011136:	b00f      	add	sp, #60	@ 0x3c
10011138:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MXC_AES_SetExtKey((const void *)aes_key, MXC_AES_128BITS);
1001113a:	4601      	mov	r1, r0
1001113c:	a805      	add	r0, sp, #20
1001113e:	f000 f937 	bl	100113b0 <MXC_AES_SetExtKey>
        aes_req.length = MXC_SYS_USN_CHECKSUM_LEN / 4;
10011142:	2304      	movs	r3, #4
        aes_req.inputData = (uint32_t *)usn;
10011144:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
        err = MXC_AES_Generic(&aes_req);
10011148:	a809      	add	r0, sp, #36	@ 0x24
        aes_req.resultData = (uint32_t *)check_csum;
1001114a:	446b      	add	r3, sp
        aes_req.keySize = MXC_AES_128BITS;
1001114c:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
        aes_req.callback = NULL;
10011150:	960d      	str	r6, [sp, #52]	@ 0x34
        aes_req.resultData = (uint32_t *)check_csum;
10011152:	930b      	str	r3, [sp, #44]	@ 0x2c
        err = MXC_AES_Generic(&aes_req);
10011154:	f000 f91a 	bl	1001138c <MXC_AES_Generic>
        if (err) {
10011158:	4606      	mov	r6, r0
1001115a:	2800      	cmp	r0, #0
1001115c:	d1e7      	bne.n	1001112e <MXC_SYS_GetUSN+0x9a>
        MXC_AES_Shutdown();
1001115e:	f000 f903 	bl	10011368 <MXC_AES_Shutdown>
        if (check_csum[0] != checksum[1] || check_csum[1] != checksum[0]) {
10011162:	f89d 2004 	ldrb.w	r2, [sp, #4]
10011166:	787b      	ldrb	r3, [r7, #1]
10011168:	429a      	cmp	r2, r3
1001116a:	d104      	bne.n	10011176 <MXC_SYS_GetUSN+0xe2>
1001116c:	f89d 2005 	ldrb.w	r2, [sp, #5]
10011170:	783b      	ldrb	r3, [r7, #0]
10011172:	429a      	cmp	r2, r3
10011174:	d006      	beq.n	10011184 <MXC_SYS_GetUSN+0xf0>
            MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
10011176:	f04f 5084 	mov.w	r0, #276824064	@ 0x10800000
1001117a:	f000 fd1e 	bl	10011bba <MXC_FLC_LockInfoBlock>
            return E_INVALID;
1001117e:	f06f 0603 	mvn.w	r6, #3
10011182:	e7d7      	b.n	10011134 <MXC_SYS_GetUSN+0xa0>
    usn[11] = ((infoblock[3] & 0x7F800000) >> 23);
10011184:	f04f 5084 	mov.w	r0, #276824064	@ 0x10800000
    return err;
10011188:	2600      	movs	r6, #0
    usn[11] = ((infoblock[3] & 0x7F800000) >> 23);
1001118a:	68c3      	ldr	r3, [r0, #12]
1001118c:	0ddb      	lsrs	r3, r3, #23
1001118e:	72e3      	strb	r3, [r4, #11]
    usn[12] = ((infoblock[4] & 0x007F8000) >> 15);
10011190:	6903      	ldr	r3, [r0, #16]
10011192:	0bdb      	lsrs	r3, r3, #15
10011194:	7323      	strb	r3, [r4, #12]
    MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
10011196:	f000 fd10 	bl	10011bba <MXC_FLC_LockInfoBlock>
    return err;
1001119a:	e7cb      	b.n	10011134 <MXC_SYS_GetUSN+0xa0>
        return E_NULL_PTR;
1001119c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
100111a0:	e7c8      	b.n	10011134 <MXC_SYS_GetUSN+0xa0>
	...

100111a4 <MXC_SYS_IsClockEnabled>:

/* ************************************************************************** */
int MXC_SYS_IsClockEnabled(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
100111a4:	283f      	cmp	r0, #63	@ 0x3f
100111a6:	d90a      	bls.n	100111be <MXC_SYS_IsClockEnabled+0x1a>
        clock -= 64;
        return !(MXC_LPGCR->pclkdis & (0x1 << clock));
100111a8:	4b09      	ldr	r3, [pc, #36]	@ (100111d0 <MXC_SYS_IsClockEnabled+0x2c>)
100111aa:	68da      	ldr	r2, [r3, #12]
        clock -= 64;
100111ac:	3840      	subs	r0, #64	@ 0x40
    } else if (clock > 31) {
        clock -= 32;
        return !(MXC_GCR->pclkdis1 & (0x1 << clock));
100111ae:	b2c0      	uxtb	r0, r0
    } else {
        return !(MXC_GCR->pclkdis0 & (0x1 << clock));
100111b0:	2301      	movs	r3, #1
100111b2:	4083      	lsls	r3, r0
100111b4:	4213      	tst	r3, r2
100111b6:	bf0c      	ite	eq
100111b8:	2001      	moveq	r0, #1
100111ba:	2000      	movne	r0, #0
    }
}
100111bc:	4770      	bx	lr
    } else if (clock > 31) {
100111be:	281f      	cmp	r0, #31
100111c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
100111c4:	d902      	bls.n	100111cc <MXC_SYS_IsClockEnabled+0x28>
        return !(MXC_GCR->pclkdis1 & (0x1 << clock));
100111c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
        clock -= 32;
100111c8:	3820      	subs	r0, #32
100111ca:	e7f0      	b.n	100111ae <MXC_SYS_IsClockEnabled+0xa>
        return !(MXC_GCR->pclkdis0 & (0x1 << clock));
100111cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100111ce:	e7ef      	b.n	100111b0 <MXC_SYS_IsClockEnabled+0xc>
100111d0:	40080000 	.word	0x40080000

100111d4 <MXC_SYS_ClockDisable>:

/* ************************************************************************** */
void MXC_SYS_ClockDisable(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
100111d4:	283f      	cmp	r0, #63	@ 0x3f
100111d6:	d908      	bls.n	100111ea <MXC_SYS_ClockDisable+0x16>
        clock -= 64;
        MXC_LPGCR->pclkdis |= (0x1 << clock);
100111d8:	4a0d      	ldr	r2, [pc, #52]	@ (10011210 <MXC_SYS_ClockDisable+0x3c>)
        clock -= 64;
100111da:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->pclkdis |= (0x1 << clock);
100111dc:	68d1      	ldr	r1, [r2, #12]
100111de:	b2c0      	uxtb	r0, r0
100111e0:	2301      	movs	r3, #1
100111e2:	4083      	lsls	r3, r0
100111e4:	430b      	orrs	r3, r1
100111e6:	60d3      	str	r3, [r2, #12]
100111e8:	4770      	bx	lr
    } else if (clock > 31) {
100111ea:	281f      	cmp	r0, #31
100111ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
100111f0:	d907      	bls.n	10011202 <MXC_SYS_ClockDisable+0x2e>
        clock -= 32;
100111f2:	3820      	subs	r0, #32
        MXC_GCR->pclkdis1 |= (0x1 << clock);
100111f4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
100111f6:	b2c0      	uxtb	r0, r0
100111f8:	2301      	movs	r3, #1
100111fa:	4083      	lsls	r3, r0
100111fc:	430b      	orrs	r3, r1
100111fe:	6493      	str	r3, [r2, #72]	@ 0x48
10011200:	4770      	bx	lr
    } else {
        MXC_GCR->pclkdis0 |= (0x1 << clock);
10011202:	6a51      	ldr	r1, [r2, #36]	@ 0x24
10011204:	2301      	movs	r3, #1
10011206:	4083      	lsls	r3, r0
10011208:	430b      	orrs	r3, r1
1001120a:	6253      	str	r3, [r2, #36]	@ 0x24
    }
}
1001120c:	4770      	bx	lr
1001120e:	bf00      	nop
10011210:	40080000 	.word	0x40080000

10011214 <MXC_SYS_ClockEnable>:

/* ************************************************************************** */
void MXC_SYS_ClockEnable(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
10011214:	283f      	cmp	r0, #63	@ 0x3f
10011216:	d909      	bls.n	1001122c <MXC_SYS_ClockEnable+0x18>
        clock -= 64;
        MXC_LPGCR->pclkdis &= ~(0x1 << clock);
10011218:	490e      	ldr	r1, [pc, #56]	@ (10011254 <MXC_SYS_ClockEnable+0x40>)
        clock -= 64;
1001121a:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->pclkdis &= ~(0x1 << clock);
1001121c:	68cb      	ldr	r3, [r1, #12]
1001121e:	b2c0      	uxtb	r0, r0
10011220:	2201      	movs	r2, #1
10011222:	4082      	lsls	r2, r0
10011224:	ea23 0302 	bic.w	r3, r3, r2
10011228:	60cb      	str	r3, [r1, #12]
1001122a:	4770      	bx	lr
    } else if (clock > 31) {
1001122c:	281f      	cmp	r0, #31
1001122e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
10011232:	d908      	bls.n	10011246 <MXC_SYS_ClockEnable+0x32>
        clock -= 32;
10011234:	3820      	subs	r0, #32
        MXC_GCR->pclkdis1 &= ~(0x1 << clock);
10011236:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10011238:	b2c0      	uxtb	r0, r0
1001123a:	2101      	movs	r1, #1
1001123c:	4081      	lsls	r1, r0
1001123e:	ea22 0201 	bic.w	r2, r2, r1
10011242:	649a      	str	r2, [r3, #72]	@ 0x48
10011244:	4770      	bx	lr
    } else {
        MXC_GCR->pclkdis0 &= ~(0x1 << clock);
10011246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10011248:	2101      	movs	r1, #1
1001124a:	4081      	lsls	r1, r0
1001124c:	ea22 0201 	bic.w	r2, r2, r1
10011250:	625a      	str	r2, [r3, #36]	@ 0x24
    }
}
10011252:	4770      	bx	lr
10011254:	40080000 	.word	0x40080000

10011258 <MXC_SYS_Clock_Timeout>:
    SystemCoreClockUpdate();
}

/* ************************************************************************** */
int MXC_SYS_Clock_Timeout(uint32_t ready)
{
10011258:	b538      	push	{r3, r4, r5, lr}
    // We do not have access to a system tick in the RV core.
    while (!(MXC_GCR->clkctrl & ready)) {}
    return E_NO_ERROR;
#else
    // Start timeout, wait for ready
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
1001125a:	2100      	movs	r1, #0
{
1001125c:	4604      	mov	r4, r0
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
1001125e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10011262:	f7ff fe5d 	bl	10010f20 <MXC_DelayAsync>

    do {
        if (MXC_GCR->clkctrl & ready) {
10011266:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
1001126a:	68ab      	ldr	r3, [r5, #8]
1001126c:	4223      	tst	r3, r4
1001126e:	d003      	beq.n	10011278 <MXC_SYS_Clock_Timeout+0x20>
            MXC_DelayAbort();
10011270:	f7ff fe72 	bl	10010f58 <MXC_DelayAbort>
            return E_NO_ERROR;
10011274:	2000      	movs	r0, #0
        }
    } while (MXC_DelayCheck() == E_BUSY);

    return E_TIME_OUT;
#endif // __riscv
}
10011276:	bd38      	pop	{r3, r4, r5, pc}
    } while (MXC_DelayCheck() == E_BUSY);
10011278:	f7ff fe88 	bl	10010f8c <MXC_DelayCheck>
1001127c:	3006      	adds	r0, #6
1001127e:	d0f4      	beq.n	1001126a <MXC_SYS_Clock_Timeout+0x12>
    return E_TIME_OUT;
10011280:	f06f 0009 	mvn.w	r0, #9
10011284:	e7f7      	b.n	10011276 <MXC_SYS_Clock_Timeout+0x1e>
	...

10011288 <MXC_SYS_ClockSourceEnable>:
    switch (clock) {
10011288:	2807      	cmp	r0, #7
1001128a:	d830      	bhi.n	100112ee <MXC_SYS_ClockSourceEnable+0x66>
1001128c:	e8df f000 	tbb	[pc, r0]
10011290:	232f2f17 	.word	0x232f2f17
10011294:	20260e04 	.word	0x20260e04
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IPO_EN;
10011298:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_IPO_RDY);
1001129c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IPO_EN;
100112a0:	6893      	ldr	r3, [r2, #8]
100112a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
100112a6:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ERTCO_RDY);
100112a8:	f7ff bfd6 	b.w	10011258 <MXC_SYS_Clock_Timeout>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IBRO_EN;
100112ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_IBRO_RDY);
100112b0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IBRO_EN;
100112b4:	6893      	ldr	r3, [r2, #8]
100112b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
100112ba:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_IBRO_RDY);
100112bc:	e7f4      	b.n	100112a8 <MXC_SYS_ClockSourceEnable+0x20>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ISO_EN;
100112be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ISO_RDY);
100112c2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ISO_EN;
100112c6:	6893      	ldr	r3, [r2, #8]
100112c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
100112cc:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ISO_RDY);
100112ce:	e7eb      	b.n	100112a8 <MXC_SYS_ClockSourceEnable+0x20>
        return MXC_GPIO_Config(&gpio_cfg_extclk);
100112d0:	4808      	ldr	r0, [pc, #32]	@ (100112f4 <MXC_SYS_ClockSourceEnable+0x6c>)
100112d2:	f000 bd1d 	b.w	10011d10 <MXC_GPIO_Config>
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_INRO_RDY);
100112d6:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
100112da:	e7e5      	b.n	100112a8 <MXC_SYS_ClockSourceEnable+0x20>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ERTCO_EN;
100112dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ERTCO_RDY);
100112e0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ERTCO_EN;
100112e4:	6893      	ldr	r3, [r2, #8]
100112e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
100112ea:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ERTCO_RDY);
100112ec:	e7dc      	b.n	100112a8 <MXC_SYS_ClockSourceEnable+0x20>
}
100112ee:	f06f 0002 	mvn.w	r0, #2
100112f2:	4770      	bx	lr
100112f4:	10023a1c 	.word	0x10023a1c

100112f8 <MXC_SYS_Reset_Periph>:

/* ************************************************************************** */
void MXC_SYS_Reset_Periph(mxc_sys_reset_t reset)
{
    /* The mxc_sys_reset_t enum uses enum values that are the offset by 32 and 64 for the rst register. */
    if (reset > 63) {
100112f8:	283f      	cmp	r0, #63	@ 0x3f
100112fa:	f04f 0301 	mov.w	r3, #1
100112fe:	d908      	bls.n	10011312 <MXC_SYS_Reset_Periph+0x1a>
        reset -= 64;
10011300:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->rst = (0x1 << reset);
10011302:	4a0e      	ldr	r2, [pc, #56]	@ (1001133c <MXC_SYS_Reset_Periph+0x44>)
10011304:	b2c0      	uxtb	r0, r0
10011306:	4083      	lsls	r3, r0
10011308:	6093      	str	r3, [r2, #8]
        while (MXC_LPGCR->rst & (0x1 << reset)) {}
1001130a:	6891      	ldr	r1, [r2, #8]
1001130c:	420b      	tst	r3, r1
1001130e:	d1fc      	bne.n	1001130a <MXC_SYS_Reset_Periph+0x12>
10011310:	4770      	bx	lr
    } else if (reset > 31) {
10011312:	281f      	cmp	r0, #31
10011314:	d909      	bls.n	1001132a <MXC_SYS_Reset_Periph+0x32>
        reset -= 32;
10011316:	3820      	subs	r0, #32
        MXC_GCR->rst1 = (0x1 << reset);
10011318:	b2c0      	uxtb	r0, r0
1001131a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
1001131e:	4083      	lsls	r3, r0
10011320:	6453      	str	r3, [r2, #68]	@ 0x44
        while (MXC_GCR->rst1 & (0x1 << reset)) {}
10011322:	6c51      	ldr	r1, [r2, #68]	@ 0x44
10011324:	420b      	tst	r3, r1
10011326:	d1fc      	bne.n	10011322 <MXC_SYS_Reset_Periph+0x2a>
10011328:	4770      	bx	lr
    } else {
        MXC_GCR->rst0 = (0x1 << reset);
1001132a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
1001132e:	4083      	lsls	r3, r0
10011330:	6053      	str	r3, [r2, #4]
        while (MXC_GCR->rst0 & (0x1 << reset)) {}
10011332:	6851      	ldr	r1, [r2, #4]
10011334:	420b      	tst	r3, r1
10011336:	d1fc      	bne.n	10011332 <MXC_SYS_Reset_Periph+0x3a>
    }
}
10011338:	4770      	bx	lr
1001133a:	bf00      	nop
1001133c:	40080000 	.word	0x40080000

10011340 <MXC_AES_Init>:
/* ************************************************************************* */
/* Global Control/Configuration functions                                    */
/* ************************************************************************* */

int MXC_AES_Init(void)
{
10011340:	b508      	push	{r3, lr}
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_AES);
10011342:	202f      	movs	r0, #47	@ 0x2f
10011344:	f7ff ff66 	bl	10011214 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TRNG);
10011348:	2022      	movs	r0, #34	@ 0x22
1001134a:	f7ff ff63 	bl	10011214 <MXC_SYS_ClockEnable>

    return MXC_AES_RevB_Init((mxc_aes_revb_regs_t *)MXC_AES);
}
1001134e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return MXC_AES_RevB_Init((mxc_aes_revb_regs_t *)MXC_AES);
10011352:	4801      	ldr	r0, [pc, #4]	@ (10011358 <MXC_AES_Init+0x18>)
10011354:	f000 b848 	b.w	100113e8 <MXC_AES_RevB_Init>
10011358:	40007400 	.word	0x40007400

1001135c <MXC_AES_IsBusy>:
    MXC_AES_RevB_DisableInt((mxc_aes_revb_regs_t *)MXC_AES, interrupt);
}

int MXC_AES_IsBusy(void)
{
    return MXC_AES_RevB_IsBusy((mxc_aes_revb_regs_t *)MXC_AES);
1001135c:	4801      	ldr	r0, [pc, #4]	@ (10011364 <MXC_AES_IsBusy+0x8>)
1001135e:	f000 b83b 	b.w	100113d8 <MXC_AES_RevB_IsBusy>
10011362:	bf00      	nop
10011364:	40007400 	.word	0x40007400

10011368 <MXC_AES_Shutdown>:
}

int MXC_AES_Shutdown(void)
{
10011368:	b510      	push	{r4, lr}
    int error = MXC_AES_RevB_Shutdown((mxc_aes_revb_regs_t *)MXC_AES);
1001136a:	4804      	ldr	r0, [pc, #16]	@ (1001137c <MXC_AES_Shutdown+0x14>)
1001136c:	f000 f86b 	bl	10011446 <MXC_AES_RevB_Shutdown>
10011370:	4604      	mov	r4, r0

    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_AES);
10011372:	202f      	movs	r0, #47	@ 0x2f
10011374:	f7ff ff2e 	bl	100111d4 <MXC_SYS_ClockDisable>

    return error;
}
10011378:	4620      	mov	r0, r4
1001137a:	bd10      	pop	{r4, pc}
1001137c:	40007400 	.word	0x40007400

10011380 <MXC_AES_Start>:
    MXC_AES_RevB_FlushOutputFIFO((mxc_aes_revb_regs_t *)MXC_AES);
}

void MXC_AES_Start(void)
{
    MXC_AES_RevB_Start((mxc_aes_revb_regs_t *)MXC_AES);
10011380:	4801      	ldr	r0, [pc, #4]	@ (10011388 <MXC_AES_Start+0x8>)
10011382:	f000 b86e 	b.w	10011462 <MXC_AES_RevB_Start>
10011386:	bf00      	nop
10011388:	40007400 	.word	0x40007400

1001138c <MXC_AES_Generic>:
{
    MXC_AES_RevB_ClearFlags((mxc_aes_revb_regs_t *)MXC_AES, flags);
}

int MXC_AES_Generic(mxc_aes_req_t *req)
{
1001138c:	4601      	mov	r1, r0
    return MXC_AES_RevB_Generic((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
1001138e:	4801      	ldr	r0, [pc, #4]	@ (10011394 <MXC_AES_Generic+0x8>)
10011390:	f000 b872 	b.w	10011478 <MXC_AES_RevB_Generic>
10011394:	40007400 	.word	0x40007400

10011398 <MXC_AES_Encrypt>:
}

int MXC_AES_Encrypt(mxc_aes_req_t *req)
{
10011398:	4601      	mov	r1, r0
    return MXC_AES_RevB_Encrypt((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
1001139a:	4801      	ldr	r0, [pc, #4]	@ (100113a0 <MXC_AES_Encrypt+0x8>)
1001139c:	f000 b8ed 	b.w	1001157a <MXC_AES_RevB_Encrypt>
100113a0:	40007400 	.word	0x40007400

100113a4 <MXC_AES_EncryptAsync>:
    return MXC_AES_RevB_GenericAsync((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req,
                                     enc);
}

int MXC_AES_EncryptAsync(mxc_aes_req_t *req)
{
100113a4:	4601      	mov	r1, r0
    return MXC_AES_RevB_EncryptAsync((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
100113a6:	4801      	ldr	r0, [pc, #4]	@ (100113ac <MXC_AES_EncryptAsync+0x8>)
100113a8:	f000 b9e6 	b.w	10011778 <MXC_AES_RevB_EncryptAsync>
100113ac:	40007400 	.word	0x40007400

100113b0 <MXC_AES_SetExtKey>:
{
    return MXC_AES_RevB_DecryptAsync((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
}

void MXC_AES_SetExtKey(const void *key, mxc_aes_keys_t len)
{
100113b0:	460a      	mov	r2, r1
    MXC_AES_RevB_SetExtKey((mxc_aeskeys_revb_regs_t *)MXC_AESKEYS, key, len);
100113b2:	4601      	mov	r1, r0
100113b4:	4801      	ldr	r0, [pc, #4]	@ (100113bc <MXC_AES_SetExtKey+0xc>)
100113b6:	f000 b9e2 	b.w	1001177e <MXC_AES_RevB_SetExtKey>
100113ba:	bf00      	nop
100113bc:	40007800 	.word	0x40007800

100113c0 <memcpy32r>:

/* Prevent GCC from optimimzing this function to memcpy */
static void __attribute__((optimize("no-tree-loop-distribute-patterns")))
memcpy32r(uint32_t *dst, const uint32_t *src, unsigned int len)
{
    uint32_t *dstr = dst + (len / 4) - 1;
100113c0:	1f13      	subs	r3, r2, #4
100113c2:	4418      	add	r0, r3
100113c4:	3904      	subs	r1, #4
100113c6:	1a12      	subs	r2, r2, r0
    while (len) {
        *dstr = SWAP_BYTES(*src);
100113c8:	f851 3f04 	ldr.w	r3, [r1, #4]!
100113cc:	ba1b      	rev	r3, r3
100113ce:	f840 3904 	str.w	r3, [r0], #-4
    while (len) {
100113d2:	42d0      	cmn	r0, r2
100113d4:	d1f8      	bne.n	100113c8 <memcpy32r+0x8>
        dstr--;
        src++;
        len -= 4;
    }
}
100113d6:	4770      	bx	lr

100113d8 <MXC_AES_RevB_IsBusy>:
    return E_NO_ERROR;
}

int MXC_AES_RevB_IsBusy(mxc_aes_revb_regs_t *aes)
{
    if (aes->status & MXC_F_AES_REVB_STATUS_BUSY) {
100113d8:	6843      	ldr	r3, [r0, #4]
        return E_BUSY;
    }

    return E_NO_ERROR;
100113da:	f013 0f01 	tst.w	r3, #1
}
100113de:	bf14      	ite	ne
100113e0:	f06f 0005 	mvnne.w	r0, #5
100113e4:	2000      	moveq	r0, #0
100113e6:	4770      	bx	lr

100113e8 <MXC_AES_RevB_Init>:
{
100113e8:	b508      	push	{r3, lr}
    aes->ctrl = 0x00;
100113ea:	2300      	movs	r3, #0
{
100113ec:	4602      	mov	r2, r0
    aes->ctrl = 0x00;
100113ee:	6003      	str	r3, [r0, #0]
    while (MXC_AES_RevB_IsBusy(aes) != E_NO_ERROR) {}
100113f0:	4610      	mov	r0, r2
100113f2:	f7ff fff1 	bl	100113d8 <MXC_AES_RevB_IsBusy>
100113f6:	2800      	cmp	r0, #0
100113f8:	d1fa      	bne.n	100113f0 <MXC_AES_RevB_Init+0x8>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_EN;
100113fa:	6813      	ldr	r3, [r2, #0]
100113fc:	f043 0301 	orr.w	r3, r3, #1
10011400:	6013      	str	r3, [r2, #0]
}
10011402:	bd08      	pop	{r3, pc}

10011404 <MXC_AES_RevB_SetKeySize>:

void MXC_AES_RevB_SetKeySize(mxc_aes_revb_regs_t *aes, mxc_aes_revb_keys_t key)
{
10011404:	b538      	push	{r3, r4, r5, lr}
10011406:	4605      	mov	r5, r0
10011408:	460c      	mov	r4, r1
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
1001140a:	f7ff ffa7 	bl	1001135c <MXC_AES_IsBusy>
1001140e:	2800      	cmp	r0, #0
10011410:	d1fb      	bne.n	1001140a <MXC_AES_RevB_SetKeySize+0x6>
    aes->ctrl |= key;
10011412:	682b      	ldr	r3, [r5, #0]
10011414:	431c      	orrs	r4, r3
10011416:	602c      	str	r4, [r5, #0]
}
10011418:	bd38      	pop	{r3, r4, r5, pc}

1001141a <MXC_AES_RevB_FlushInputFIFO>:
{
    return (aes->ctrl & MXC_F_AES_REVB_CTRL_KEY_SIZE);
}

void MXC_AES_RevB_FlushInputFIFO(mxc_aes_revb_regs_t *aes)
{
1001141a:	b510      	push	{r4, lr}
1001141c:	4604      	mov	r4, r0
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
1001141e:	f7ff ff9d 	bl	1001135c <MXC_AES_IsBusy>
10011422:	2800      	cmp	r0, #0
10011424:	d1fb      	bne.n	1001141e <MXC_AES_RevB_FlushInputFIFO+0x4>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_INPUT_FLUSH;
10011426:	6823      	ldr	r3, [r4, #0]
10011428:	f043 0310 	orr.w	r3, r3, #16
1001142c:	6023      	str	r3, [r4, #0]
}
1001142e:	bd10      	pop	{r4, pc}

10011430 <MXC_AES_RevB_FlushOutputFIFO>:

void MXC_AES_RevB_FlushOutputFIFO(mxc_aes_revb_regs_t *aes)
{
10011430:	b510      	push	{r4, lr}
10011432:	4604      	mov	r4, r0
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
10011434:	f7ff ff92 	bl	1001135c <MXC_AES_IsBusy>
10011438:	2800      	cmp	r0, #0
1001143a:	d1fb      	bne.n	10011434 <MXC_AES_RevB_FlushOutputFIFO+0x4>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_OUTPUT_FLUSH;
1001143c:	6823      	ldr	r3, [r4, #0]
1001143e:	f043 0320 	orr.w	r3, r3, #32
10011442:	6023      	str	r3, [r4, #0]
}
10011444:	bd10      	pop	{r4, pc}

10011446 <MXC_AES_RevB_Shutdown>:
{
10011446:	b510      	push	{r4, lr}
10011448:	4604      	mov	r4, r0
    MXC_AES_RevB_FlushInputFIFO(aes);
1001144a:	f7ff ffe6 	bl	1001141a <MXC_AES_RevB_FlushInputFIFO>
    MXC_AES_RevB_FlushOutputFIFO(aes);
1001144e:	4620      	mov	r0, r4
10011450:	f7ff ffee 	bl	10011430 <MXC_AES_RevB_FlushOutputFIFO>
    while (MXC_AES_RevB_IsBusy(aes) != E_NO_ERROR) {}
10011454:	4620      	mov	r0, r4
10011456:	f7ff ffbf 	bl	100113d8 <MXC_AES_RevB_IsBusy>
1001145a:	2800      	cmp	r0, #0
1001145c:	d1fa      	bne.n	10011454 <MXC_AES_RevB_Shutdown+0xe>
    aes->ctrl = 0x00;
1001145e:	6020      	str	r0, [r4, #0]
}
10011460:	bd10      	pop	{r4, pc}

10011462 <MXC_AES_RevB_Start>:

void MXC_AES_RevB_Start(mxc_aes_revb_regs_t *aes)
{
10011462:	b510      	push	{r4, lr}
10011464:	4604      	mov	r4, r0
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
10011466:	f7ff ff79 	bl	1001135c <MXC_AES_IsBusy>
1001146a:	2800      	cmp	r0, #0
1001146c:	d1fb      	bne.n	10011466 <MXC_AES_RevB_Start+0x4>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_START;
1001146e:	6823      	ldr	r3, [r4, #0]
10011470:	f043 0308 	orr.w	r3, r3, #8
10011474:	6023      	str	r3, [r4, #0]
}
10011476:	bd10      	pop	{r4, pc}

10011478 <MXC_AES_RevB_Generic>:
    aes->intfl = (flags & (MXC_F_AES_REVB_INTFL_DONE | MXC_F_AES_REVB_INTFL_KEY_CHANGE |
                           MXC_F_AES_REVB_INTFL_KEY_ZERO | MXC_F_AES_REVB_INTFL_OV));
}

int MXC_AES_RevB_Generic(mxc_aes_revb_regs_t *aes, mxc_aes_revb_req_t *req)
{
10011478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001147a:	4604      	mov	r4, r0
    int i;
    int remain;

    if (req == NULL) {
1001147c:	460d      	mov	r5, r1
1001147e:	2900      	cmp	r1, #0
10011480:	d075      	beq.n	1001156e <MXC_AES_RevB_Generic+0xf6>
        return E_NULL_PTR;
    }

    if (req->inputData == NULL || req->resultData == NULL) {
10011482:	684b      	ldr	r3, [r1, #4]
10011484:	2b00      	cmp	r3, #0
10011486:	d072      	beq.n	1001156e <MXC_AES_RevB_Generic+0xf6>
10011488:	688b      	ldr	r3, [r1, #8]
1001148a:	2b00      	cmp	r3, #0
1001148c:	d06f      	beq.n	1001156e <MXC_AES_RevB_Generic+0xf6>
        return E_NULL_PTR;
    }

    if (req->length == 0) {
1001148e:	680e      	ldr	r6, [r1, #0]
10011490:	2e00      	cmp	r6, #0
10011492:	d06f      	beq.n	10011574 <MXC_AES_RevB_Generic+0xfc>
        return E_BAD_PARAM;
    }

    remain = req->length;

    MXC_AES_RevB_FlushInputFIFO(aes);
10011494:	f7ff ffc1 	bl	1001141a <MXC_AES_RevB_FlushInputFIFO>
    MXC_AES_RevB_FlushOutputFIFO(aes);
10011498:	4620      	mov	r0, r4
1001149a:	f7ff ffc9 	bl	10011430 <MXC_AES_RevB_FlushOutputFIFO>

    MXC_AES_RevB_SetKeySize(aes, req->keySize);
1001149e:	7b29      	ldrb	r1, [r5, #12]
100114a0:	4620      	mov	r0, r4
100114a2:	f7ff ffaf 	bl	10011404 <MXC_AES_RevB_SetKeySize>

    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
100114a6:	f7ff ff59 	bl	1001135c <MXC_AES_IsBusy>
100114aa:	2800      	cmp	r0, #0
100114ac:	d1fb      	bne.n	100114a6 <MXC_AES_RevB_Generic+0x2e>

    MXC_SETFIELD(aes->ctrl, MXC_F_AES_REVB_CTRL_TYPE,
100114ae:	7b6b      	ldrb	r3, [r5, #13]
100114b0:	6822      	ldr	r2, [r4, #0]
100114b2:	021b      	lsls	r3, r3, #8
100114b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
100114b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
100114bc:	4313      	orrs	r3, r2
100114be:	6023      	str	r3, [r4, #0]
                 req->encryption << MXC_F_AES_REVB_CTRL_TYPE_POS);

    while (remain / 4) {
100114c0:	1cf3      	adds	r3, r6, #3
100114c2:	2b06      	cmp	r3, #6
100114c4:	d826      	bhi.n	10011514 <MXC_AES_RevB_Generic+0x9c>
        req->resultData += 4;

        remain -= 4;
    }

    if (remain % 4) {
100114c6:	07b2      	lsls	r2, r6, #30
100114c8:	d023      	beq.n	10011512 <MXC_AES_RevB_Generic+0x9a>
100114ca:	ea4f 0c86 	mov.w	ip, r6, lsl #2
        for (i = 0; i < remain; i++) {
            aes->fifo = SWAP_BYTES(req->inputData[remain - 1 - i]);
100114ce:	686b      	ldr	r3, [r5, #4]
100114d0:	4661      	mov	r1, ip
        for (i = 0; i < remain; i++) {
100114d2:	2200      	movs	r2, #0
100114d4:	42b2      	cmp	r2, r6
100114d6:	db44      	blt.n	10011562 <MXC_AES_RevB_Generic+0xea>
        }
        req->inputData += remain;
100114d8:	4463      	add	r3, ip
100114da:	606b      	str	r3, [r5, #4]

        // Pad last block with 0's
        for (i = remain; i < 4; i++) {
            aes->fifo = 0;
100114dc:	2300      	movs	r3, #0
        for (i = remain; i < 4; i++) {
100114de:	3601      	adds	r6, #1
100114e0:	2e04      	cmp	r6, #4
            aes->fifo = 0;
100114e2:	6123      	str	r3, [r4, #16]
        for (i = remain; i < 4; i++) {
100114e4:	d1fb      	bne.n	100114de <MXC_AES_RevB_Generic+0x66>
        }

        while (!(aes->intfl & MXC_F_AES_REVB_INTFL_DONE)) {}
100114e6:	68a3      	ldr	r3, [r4, #8]
100114e8:	07db      	lsls	r3, r3, #31
100114ea:	d5fc      	bpl.n	100114e6 <MXC_AES_RevB_Generic+0x6e>
        aes->intfl |= MXC_F_AES_REVB_INTFL_DONE;
100114ec:	68a3      	ldr	r3, [r4, #8]
100114ee:	f043 0301 	orr.w	r3, r3, #1
100114f2:	60a3      	str	r3, [r4, #8]

        for (i = 0; i < 4; i++) {
            uint32_t tmp = aes->fifo;
100114f4:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
100114f6:	68ab      	ldr	r3, [r5, #8]
100114f8:	ba12      	rev	r2, r2
100114fa:	60da      	str	r2, [r3, #12]
            uint32_t tmp = aes->fifo;
100114fc:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
100114fe:	ba12      	rev	r2, r2
10011500:	609a      	str	r2, [r3, #8]
            uint32_t tmp = aes->fifo;
10011502:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10011504:	ba12      	rev	r2, r2
10011506:	605a      	str	r2, [r3, #4]
            uint32_t tmp = aes->fifo;
10011508:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
1001150a:	ba12      	rev	r2, r2
1001150c:	f843 2b10 	str.w	r2, [r3], #16
        }
        req->resultData += 4;
10011510:	60ab      	str	r3, [r5, #8]
    }
    return E_NO_ERROR;
}
10011512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            aes->fifo = SWAP_BYTES(req->inputData[3 - i]);
10011514:	686b      	ldr	r3, [r5, #4]
10011516:	68da      	ldr	r2, [r3, #12]
10011518:	ba12      	rev	r2, r2
1001151a:	6122      	str	r2, [r4, #16]
1001151c:	689a      	ldr	r2, [r3, #8]
1001151e:	ba12      	rev	r2, r2
10011520:	6122      	str	r2, [r4, #16]
10011522:	685a      	ldr	r2, [r3, #4]
10011524:	ba12      	rev	r2, r2
10011526:	6122      	str	r2, [r4, #16]
10011528:	f853 2b10 	ldr.w	r2, [r3], #16
1001152c:	ba12      	rev	r2, r2
1001152e:	6122      	str	r2, [r4, #16]
        req->inputData += 4;
10011530:	606b      	str	r3, [r5, #4]
        while (!(aes->intfl & MXC_F_AES_REVB_INTFL_DONE)) {}
10011532:	68a3      	ldr	r3, [r4, #8]
10011534:	07d9      	lsls	r1, r3, #31
10011536:	d5fc      	bpl.n	10011532 <MXC_AES_RevB_Generic+0xba>
        aes->intfl |= MXC_F_AES_REVB_INTFL_DONE;
10011538:	68a3      	ldr	r3, [r4, #8]
1001153a:	f043 0301 	orr.w	r3, r3, #1
1001153e:	60a3      	str	r3, [r4, #8]
            uint32_t tmp = aes->fifo;
10011540:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10011542:	68ab      	ldr	r3, [r5, #8]
10011544:	ba12      	rev	r2, r2
10011546:	60da      	str	r2, [r3, #12]
            uint32_t tmp = aes->fifo;
10011548:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
1001154a:	ba12      	rev	r2, r2
1001154c:	609a      	str	r2, [r3, #8]
            uint32_t tmp = aes->fifo;
1001154e:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10011550:	ba12      	rev	r2, r2
10011552:	605a      	str	r2, [r3, #4]
            uint32_t tmp = aes->fifo;
10011554:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10011556:	ba12      	rev	r2, r2
10011558:	f843 2b10 	str.w	r2, [r3], #16
        remain -= 4;
1001155c:	3e04      	subs	r6, #4
        req->resultData += 4;
1001155e:	60ab      	str	r3, [r5, #8]
        remain -= 4;
10011560:	e7ae      	b.n	100114c0 <MXC_AES_RevB_Generic+0x48>
        for (i = 0; i < remain; i++) {
10011562:	3904      	subs	r1, #4
10011564:	3201      	adds	r2, #1
10011566:	585f      	ldr	r7, [r3, r1]
10011568:	ba3f      	rev	r7, r7
            aes->fifo = SWAP_BYTES(req->inputData[remain - 1 - i]);
1001156a:	6127      	str	r7, [r4, #16]
        for (i = 0; i < remain; i++) {
1001156c:	e7b2      	b.n	100114d4 <MXC_AES_RevB_Generic+0x5c>
        return E_NULL_PTR;
1001156e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10011572:	e7ce      	b.n	10011512 <MXC_AES_RevB_Generic+0x9a>
        return E_BAD_PARAM;
10011574:	f06f 0002 	mvn.w	r0, #2
10011578:	e7cb      	b.n	10011512 <MXC_AES_RevB_Generic+0x9a>

1001157a <MXC_AES_RevB_Encrypt>:

int MXC_AES_RevB_Encrypt(mxc_aes_revb_regs_t *aes, mxc_aes_revb_req_t *req)
{
    return MXC_AES_RevB_Generic(aes, req);
1001157a:	f7ff bf7d 	b.w	10011478 <MXC_AES_RevB_Generic>
	...

10011580 <MXC_AES_RevB_TXDMAConfig>:
{
    return MXC_AES_RevB_Generic(aes, req);
}

int MXC_AES_RevB_TXDMAConfig(void *src_addr, int len)
{
10011580:	b570      	push	{r4, r5, r6, lr}
10011582:	460d      	mov	r5, r1
10011584:	b08c      	sub	sp, #48	@ 0x30
    uint8_t channel;
    mxc_dma_config_t config;
    mxc_dma_srcdst_t srcdst;

    if (src_addr == NULL) {
10011586:	4606      	mov	r6, r0
10011588:	2800      	cmp	r0, #0
1001158a:	d036      	beq.n	100115fa <MXC_AES_RevB_TXDMAConfig+0x7a>
        return E_NULL_PTR;
    }

    if (len == 0) {
1001158c:	2900      	cmp	r1, #0
1001158e:	d037      	beq.n	10011600 <MXC_AES_RevB_TXDMAConfig+0x80>
        return E_BAD_PARAM;
    }

    MXC_DMA_Init();
10011590:	f000 f8fe 	bl	10011790 <MXC_DMA_Init>

    channel = MXC_DMA_AcquireChannel();
10011594:	f000 f910 	bl	100117b8 <MXC_DMA_AcquireChannel>
    dma_state.channelTX = channel;
10011598:	4b1b      	ldr	r3, [pc, #108]	@ (10011608 <MXC_AES_RevB_TXDMAConfig+0x88>)
    config.ch = channel;

    config.srcwd = MXC_DMA_WIDTH_WORD;
    config.dstwd = MXC_DMA_WIDTH_WORD;

    config.srcinc_en = 1;
1001159a:	491c      	ldr	r1, [pc, #112]	@ (1001160c <MXC_AES_RevB_TXDMAConfig+0x8c>)
    channel = MXC_DMA_AcquireChannel();
1001159c:	7098      	strb	r0, [r3, #2]
    config.dstinc_en = 0;

    srcdst.ch = channel;
    srcdst.source = src_addr;

    if (dma_state.enc == 1) {
1001159e:	781b      	ldrb	r3, [r3, #0]
    srcdst.source = src_addr;
100115a0:	9609      	str	r6, [sp, #36]	@ 0x24
    config.srcinc_en = 1;
100115a2:	2201      	movs	r2, #1
100115a4:	b2c4      	uxtb	r4, r0
100115a6:	e9cd 1205 	strd	r1, r2, [sp, #20]
    if (dma_state.enc == 1) {
100115aa:	2b01      	cmp	r3, #1
    config.dstinc_en = 0;
100115ac:	f04f 0200 	mov.w	r2, #0
    srcdst.ch = channel;
100115b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
    config.ch = channel;
100115b4:	9404      	str	r4, [sp, #16]
    if (dma_state.enc == 1) {
100115b6:	d01e      	beq.n	100115f6 <MXC_AES_RevB_TXDMAConfig+0x76>
        srcdst.len = 4;
    } else if (len > 4) {
100115b8:	2d04      	cmp	r5, #4
100115ba:	bfa8      	it	ge
100115bc:	2504      	movge	r5, #4
        srcdst.len = 4;
100115be:	950b      	str	r5, [sp, #44]	@ 0x2c
        srcdst.len = 4;
    } else {
        srcdst.len = len;
    }

    MXC_DMA_ConfigChannel(config, srcdst);
100115c0:	ab0c      	add	r3, sp, #48	@ 0x30
100115c2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
100115c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
100115ca:	ab04      	add	r3, sp, #16
100115cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
100115ce:	f000 f8fb 	bl	100117c8 <MXC_DMA_ConfigChannel>
    MXC_DMA_SetCallback(channel, MXC_AES_RevB_DMACallback);
100115d2:	490f      	ldr	r1, [pc, #60]	@ (10011610 <MXC_AES_RevB_TXDMAConfig+0x90>)
100115d4:	4620      	mov	r0, r4
100115d6:	f000 f902 	bl	100117de <MXC_DMA_SetCallback>

    MXC_DMA_EnableInt(channel);
100115da:	4620      	mov	r0, r4
100115dc:	f000 f906 	bl	100117ec <MXC_DMA_EnableInt>
    MXC_DMA_Start(channel);
100115e0:	4620      	mov	r0, r4
100115e2:	f000 f909 	bl	100117f8 <MXC_DMA_Start>
    //MXC_DMA->ch[channel].ctrl |= MXC_F_DMA_CTRL_CTZ_IE;
    MXC_DMA_SetChannelInterruptEn(channel, 0, 1);
100115e6:	2201      	movs	r2, #1
100115e8:	2100      	movs	r1, #0
100115ea:	4620      	mov	r0, r4
100115ec:	f000 f8f9 	bl	100117e2 <MXC_DMA_SetChannelInterruptEn>

    return E_NO_ERROR;
100115f0:	2000      	movs	r0, #0
}
100115f2:	b00c      	add	sp, #48	@ 0x30
100115f4:	bd70      	pop	{r4, r5, r6, pc}
100115f6:	2504      	movs	r5, #4
100115f8:	e7e1      	b.n	100115be <MXC_AES_RevB_TXDMAConfig+0x3e>
        return E_NULL_PTR;
100115fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100115fe:	e7f8      	b.n	100115f2 <MXC_AES_RevB_TXDMAConfig+0x72>
        return E_BAD_PARAM;
10011600:	f06f 0002 	mvn.w	r0, #2
10011604:	e7f5      	b.n	100115f2 <MXC_AES_RevB_TXDMAConfig+0x72>
10011606:	bf00      	nop
10011608:	20000fe0 	.word	0x20000fe0
1001160c:	02020300 	.word	0x02020300
10011610:	100116a5 	.word	0x100116a5

10011614 <MXC_AES_RevB_RXDMAConfig>:

int MXC_AES_RevB_RXDMAConfig(void *dest_addr, int len)
{
10011614:	b570      	push	{r4, r5, r6, lr}
10011616:	460d      	mov	r5, r1
10011618:	b08c      	sub	sp, #48	@ 0x30
    if (dest_addr == NULL) {
1001161a:	4606      	mov	r6, r0
1001161c:	2800      	cmp	r0, #0
1001161e:	d034      	beq.n	1001168a <MXC_AES_RevB_RXDMAConfig+0x76>
        return E_NULL_PTR;
    }

    if (len == 0) {
10011620:	2900      	cmp	r1, #0
10011622:	d035      	beq.n	10011690 <MXC_AES_RevB_RXDMAConfig+0x7c>

    uint8_t channel;
    mxc_dma_config_t config;
    mxc_dma_srcdst_t srcdst;

    MXC_DMA_Init();
10011624:	f000 f8b4 	bl	10011790 <MXC_DMA_Init>

    channel = MXC_DMA_AcquireChannel();
10011628:	f000 f8c6 	bl	100117b8 <MXC_DMA_AcquireChannel>
    dma_state.channelRX = channel;
1001162c:	4b1a      	ldr	r3, [pc, #104]	@ (10011698 <MXC_AES_RevB_RXDMAConfig+0x84>)
    config.ch = channel;

    config.srcwd = MXC_DMA_WIDTH_WORD;
    config.dstwd = MXC_DMA_WIDTH_WORD;

    config.srcinc_en = 0;
1001162e:	491b      	ldr	r1, [pc, #108]	@ (1001169c <MXC_AES_RevB_RXDMAConfig+0x88>)
    channel = MXC_DMA_AcquireChannel();
10011630:	7058      	strb	r0, [r3, #1]
    config.srcinc_en = 0;
10011632:	2200      	movs	r2, #0
    config.dstinc_en = 1;

    srcdst.ch = channel;
    srcdst.dest = dest_addr;

    if (dma_state.enc == 0) {
10011634:	781b      	ldrb	r3, [r3, #0]
    srcdst.dest = dest_addr;
10011636:	960a      	str	r6, [sp, #40]	@ 0x28
10011638:	b2c4      	uxtb	r4, r0
    config.srcinc_en = 0;
1001163a:	e9cd 1205 	strd	r1, r2, [sp, #20]
    config.dstinc_en = 1;
1001163e:	2201      	movs	r2, #1
    srcdst.ch = channel;
10011640:	e9cd 2407 	strd	r2, r4, [sp, #28]
    config.ch = channel;
10011644:	9404      	str	r4, [sp, #16]
    if (dma_state.enc == 0) {
10011646:	b1f3      	cbz	r3, 10011686 <MXC_AES_RevB_RXDMAConfig+0x72>
        srcdst.len = 4;
    } else if (len > 4) {
10011648:	2d04      	cmp	r5, #4
1001164a:	bfa8      	it	ge
1001164c:	2504      	movge	r5, #4
        srcdst.len = 4;
1001164e:	950b      	str	r5, [sp, #44]	@ 0x2c
        srcdst.len = 4;
    } else {
        srcdst.len = len;
    }

    MXC_DMA_ConfigChannel(config, srcdst);
10011650:	ab0c      	add	r3, sp, #48	@ 0x30
10011652:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
10011656:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
1001165a:	ab04      	add	r3, sp, #16
1001165c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1001165e:	f000 f8b3 	bl	100117c8 <MXC_DMA_ConfigChannel>
    MXC_DMA_SetCallback(channel, MXC_AES_RevB_DMACallback);
10011662:	490f      	ldr	r1, [pc, #60]	@ (100116a0 <MXC_AES_RevB_RXDMAConfig+0x8c>)
10011664:	4620      	mov	r0, r4
10011666:	f000 f8ba 	bl	100117de <MXC_DMA_SetCallback>

    MXC_DMA_EnableInt(channel);
1001166a:	4620      	mov	r0, r4
1001166c:	f000 f8be 	bl	100117ec <MXC_DMA_EnableInt>
    MXC_DMA_Start(channel);
10011670:	4620      	mov	r0, r4
10011672:	f000 f8c1 	bl	100117f8 <MXC_DMA_Start>
    //MXC_DMA->ch[channel].ctrl |= MXC_F_DMA_CTRL_CTZ_IE;
    MXC_DMA_SetChannelInterruptEn(channel, 0, 1);
10011676:	2201      	movs	r2, #1
10011678:	2100      	movs	r1, #0
1001167a:	4620      	mov	r0, r4
1001167c:	f000 f8b1 	bl	100117e2 <MXC_DMA_SetChannelInterruptEn>

    return E_NO_ERROR;
10011680:	2000      	movs	r0, #0
}
10011682:	b00c      	add	sp, #48	@ 0x30
10011684:	bd70      	pop	{r4, r5, r6, pc}
10011686:	2504      	movs	r5, #4
10011688:	e7e1      	b.n	1001164e <MXC_AES_RevB_RXDMAConfig+0x3a>
        return E_NULL_PTR;
1001168a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001168e:	e7f8      	b.n	10011682 <MXC_AES_RevB_RXDMAConfig+0x6e>
        return E_BAD_PARAM;
10011690:	f06f 0002 	mvn.w	r0, #2
10011694:	e7f5      	b.n	10011682 <MXC_AES_RevB_RXDMAConfig+0x6e>
10011696:	bf00      	nop
10011698:	20000fe0 	.word	0x20000fe0
1001169c:	02020100 	.word	0x02020100
100116a0:	100116a5 	.word	0x100116a5

100116a4 <MXC_AES_RevB_DMACallback>:
{
    return MXC_AES_RevB_GenericAsync(aes, req, 1);
}

void MXC_AES_RevB_DMACallback(int ch, int error)
{
100116a4:	b510      	push	{r4, lr}
100116a6:	4603      	mov	r3, r0
    if (error != E_NO_ERROR) {
100116a8:	bb29      	cbnz	r1, 100116f6 <MXC_AES_RevB_DMACallback+0x52>
    } else {
        if (dma_state.channelTX == ch) {
100116aa:	4c13      	ldr	r4, [pc, #76]	@ (100116f8 <MXC_AES_RevB_DMACallback+0x54>)
100116ac:	78a2      	ldrb	r2, [r4, #2]
100116ae:	4282      	cmp	r2, r0
100116b0:	d10c      	bne.n	100116cc <MXC_AES_RevB_DMACallback+0x28>
            MXC_DMA_ReleaseChannel(dma_state.channelTX);
100116b2:	f000 f887 	bl	100117c4 <MXC_DMA_ReleaseChannel>
            if (dma_state.remain < 4) {
100116b6:	6863      	ldr	r3, [r4, #4]
100116b8:	2b03      	cmp	r3, #3
100116ba:	d801      	bhi.n	100116c0 <MXC_AES_RevB_DMACallback+0x1c>
                MXC_AES_Start();
100116bc:	f7ff fe60 	bl	10011380 <MXC_AES_Start>
            }
            MXC_AES_RevB_RXDMAConfig(dma_state.outputText, dma_state.remain);
100116c0:	6861      	ldr	r1, [r4, #4]
100116c2:	68e0      	ldr	r0, [r4, #12]
            if (dma_state.remain > 0) {
                MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain);
            }
        }
    }
}
100116c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            MXC_AES_RevB_RXDMAConfig(dma_state.outputText, dma_state.remain);
100116c8:	f7ff bfa4 	b.w	10011614 <MXC_AES_RevB_RXDMAConfig>
        } else if (dma_state.channelRX == ch) {
100116cc:	7860      	ldrb	r0, [r4, #1]
100116ce:	4283      	cmp	r3, r0
100116d0:	d111      	bne.n	100116f6 <MXC_AES_RevB_DMACallback+0x52>
            if (dma_state.remain > 4) {
100116d2:	6863      	ldr	r3, [r4, #4]
100116d4:	2b04      	cmp	r3, #4
100116d6:	d90a      	bls.n	100116ee <MXC_AES_RevB_DMACallback+0x4a>
                dma_state.remain -= 4;
100116d8:	3b04      	subs	r3, #4
100116da:	6063      	str	r3, [r4, #4]
            MXC_DMA_ReleaseChannel(dma_state.channelRX);
100116dc:	f000 f872 	bl	100117c4 <MXC_DMA_ReleaseChannel>
            if (dma_state.remain > 0) {
100116e0:	6861      	ldr	r1, [r4, #4]
100116e2:	b141      	cbz	r1, 100116f6 <MXC_AES_RevB_DMACallback+0x52>
                MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain);
100116e4:	68a0      	ldr	r0, [r4, #8]
}
100116e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain);
100116ea:	f7ff bf49 	b.w	10011580 <MXC_AES_RevB_TXDMAConfig>
            } else if (dma_state.remain > 0) {
100116ee:	2b00      	cmp	r3, #0
100116f0:	d0f4      	beq.n	100116dc <MXC_AES_RevB_DMACallback+0x38>
                dma_state.remain = 0;
100116f2:	6061      	str	r1, [r4, #4]
100116f4:	e7f2      	b.n	100116dc <MXC_AES_RevB_DMACallback+0x38>
}
100116f6:	bd10      	pop	{r4, pc}
100116f8:	20000fe0 	.word	0x20000fe0

100116fc <MXC_AES_RevB_GenericAsync>:
{
100116fc:	b570      	push	{r4, r5, r6, lr}
100116fe:	4605      	mov	r5, r0
10011700:	4616      	mov	r6, r2
    if (req == NULL) {
10011702:	460c      	mov	r4, r1
10011704:	2900      	cmp	r1, #0
10011706:	d032      	beq.n	1001176e <MXC_AES_RevB_GenericAsync+0x72>
    if (req->inputData == NULL || req->resultData == NULL) {
10011708:	684b      	ldr	r3, [r1, #4]
1001170a:	2b00      	cmp	r3, #0
1001170c:	d02f      	beq.n	1001176e <MXC_AES_RevB_GenericAsync+0x72>
1001170e:	688b      	ldr	r3, [r1, #8]
10011710:	b36b      	cbz	r3, 1001176e <MXC_AES_RevB_GenericAsync+0x72>
    if (req->length == 0) {
10011712:	680b      	ldr	r3, [r1, #0]
10011714:	b913      	cbnz	r3, 1001171c <MXC_AES_RevB_GenericAsync+0x20>
        return E_BAD_PARAM;
10011716:	f06f 0002 	mvn.w	r0, #2
}
1001171a:	bd70      	pop	{r4, r5, r6, pc}
    MXC_AES_RevB_FlushInputFIFO(aes);
1001171c:	f7ff fe7d 	bl	1001141a <MXC_AES_RevB_FlushInputFIFO>
    MXC_AES_RevB_FlushOutputFIFO(aes);
10011720:	4628      	mov	r0, r5
10011722:	f7ff fe85 	bl	10011430 <MXC_AES_RevB_FlushOutputFIFO>
    MXC_AES_RevB_SetKeySize(aes, req->keySize);
10011726:	7b21      	ldrb	r1, [r4, #12]
10011728:	4628      	mov	r0, r5
1001172a:	f7ff fe6b 	bl	10011404 <MXC_AES_RevB_SetKeySize>
    MXC_AES_IsBusy();
1001172e:	f7ff fe15 	bl	1001135c <MXC_AES_IsBusy>
    MXC_SETFIELD(aes->ctrl, MXC_F_AES_REVB_CTRL_TYPE,
10011732:	7b63      	ldrb	r3, [r4, #13]
10011734:	682a      	ldr	r2, [r5, #0]
    dma_state.remain = req->length;
10011736:	6821      	ldr	r1, [r4, #0]
    dma_state.inputText = req->inputData;
10011738:	6860      	ldr	r0, [r4, #4]
    MXC_SETFIELD(aes->ctrl, MXC_F_AES_REVB_CTRL_TYPE,
1001173a:	021b      	lsls	r3, r3, #8
1001173c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
10011740:	f403 7340 	and.w	r3, r3, #768	@ 0x300
10011744:	4313      	orrs	r3, r2
10011746:	602b      	str	r3, [r5, #0]
    dma_state.enc = enc;
10011748:	4b0a      	ldr	r3, [pc, #40]	@ (10011774 <MXC_AES_RevB_GenericAsync+0x78>)
    dma_state.outputText = req->resultData;
1001174a:	68a2      	ldr	r2, [r4, #8]
    dma_state.enc = enc;
1001174c:	701e      	strb	r6, [r3, #0]
    dma_state.remain = req->length;
1001174e:	6059      	str	r1, [r3, #4]
    dma_state.inputText = req->inputData;
10011750:	6098      	str	r0, [r3, #8]
    dma_state.outputText = req->resultData;
10011752:	60da      	str	r2, [r3, #12]
    aes->ctrl |= MXC_F_AES_REVB_CTRL_DMA_RX_EN; //Enable AES DMA
10011754:	682b      	ldr	r3, [r5, #0]
10011756:	f043 0302 	orr.w	r3, r3, #2
1001175a:	602b      	str	r3, [r5, #0]
    aes->ctrl |= MXC_F_AES_REVB_CTRL_DMA_TX_EN; //Enable AES DMA
1001175c:	682b      	ldr	r3, [r5, #0]
1001175e:	f043 0304 	orr.w	r3, r3, #4
10011762:	602b      	str	r3, [r5, #0]
    if (MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain) != E_NO_ERROR) {
10011764:	f7ff ff0c 	bl	10011580 <MXC_AES_RevB_TXDMAConfig>
10011768:	2800      	cmp	r0, #0
1001176a:	d0d6      	beq.n	1001171a <MXC_AES_RevB_GenericAsync+0x1e>
1001176c:	e7d3      	b.n	10011716 <MXC_AES_RevB_GenericAsync+0x1a>
        return E_NULL_PTR;
1001176e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10011772:	e7d2      	b.n	1001171a <MXC_AES_RevB_GenericAsync+0x1e>
10011774:	20000fe0 	.word	0x20000fe0

10011778 <MXC_AES_RevB_EncryptAsync>:
    return MXC_AES_RevB_GenericAsync(aes, req, 0);
10011778:	2200      	movs	r2, #0
1001177a:	f7ff bfbf 	b.w	100116fc <MXC_AES_RevB_GenericAsync>

1001177e <MXC_AES_RevB_SetExtKey>:

void MXC_AES_RevB_SetExtKey(mxc_aeskeys_revb_regs_t *aeskeys, const void *key, mxc_aes_keys_t len)
{
    int numBytes;

    if (len == MXC_AES_128BITS) {
1001177e:	b12a      	cbz	r2, 1001178c <MXC_AES_RevB_SetExtKey+0xe>
        numBytes = 16;
    } else if (len == MXC_AES_192BITS) {
        numBytes = 24;
10011780:	2a40      	cmp	r2, #64	@ 0x40
10011782:	bf14      	ite	ne
10011784:	2220      	movne	r2, #32
10011786:	2218      	moveq	r2, #24
    } else {
        numBytes = 32;
    }

    /* TODO: Figure out if this is the correct byte ordering */
    memcpy32r((void *)&(aeskeys->key0), key, numBytes);
10011788:	f7ff be1a 	b.w	100113c0 <memcpy32r>
        numBytes = 16;
1001178c:	2210      	movs	r2, #16
1001178e:	e7fb      	b.n	10011788 <MXC_AES_RevB_SetExtKey+0xa>

10011790 <MXC_DMA_Init>:
/******* Globals *******/

/****** Functions ******/

int MXC_DMA_Init(void)
{
10011790:	b510      	push	{r4, lr}
    if (!MXC_SYS_IsClockEnabled(MXC_SYS_PERIPH_CLOCK_DMA)) {
10011792:	2005      	movs	r0, #5
10011794:	f7ff fd06 	bl	100111a4 <MXC_SYS_IsClockEnabled>
10011798:	4604      	mov	r4, r0
1001179a:	b928      	cbnz	r0, 100117a8 <MXC_DMA_Init+0x18>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_DMA);
1001179c:	2005      	movs	r0, #5
1001179e:	f7ff fd39 	bl	10011214 <MXC_SYS_ClockEnable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_DMA);
100117a2:	4620      	mov	r0, r4
100117a4:	f7ff fda8 	bl	100112f8 <MXC_SYS_Reset_Periph>
    }

    return MXC_DMA_RevA_Init((mxc_dma_reva_regs_t *)MXC_DMA);
}
100117a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_DMA_RevA_Init((mxc_dma_reva_regs_t *)MXC_DMA);
100117ac:	4801      	ldr	r0, [pc, #4]	@ (100117b4 <MXC_DMA_Init+0x24>)
100117ae:	f000 b82b 	b.w	10011808 <MXC_DMA_RevA_Init>
100117b2:	bf00      	nop
100117b4:	40028000 	.word	0x40028000

100117b8 <MXC_DMA_AcquireChannel>:
    return MXC_DMA_RevA_DeInit((mxc_dma_reva_regs_t *)MXC_DMA);
}

int MXC_DMA_AcquireChannel(void)
{
    return MXC_DMA_RevA_AcquireChannel((mxc_dma_reva_regs_t *)MXC_DMA);
100117b8:	4801      	ldr	r0, [pc, #4]	@ (100117c0 <MXC_DMA_AcquireChannel+0x8>)
100117ba:	f000 b86b 	b.w	10011894 <MXC_DMA_RevA_AcquireChannel>
100117be:	bf00      	nop
100117c0:	40028000 	.word	0x40028000

100117c4 <MXC_DMA_ReleaseChannel>:
}

int MXC_DMA_ReleaseChannel(int ch)
{
    return MXC_DMA_RevA_ReleaseChannel(ch);
100117c4:	f000 b89c 	b.w	10011900 <MXC_DMA_RevA_ReleaseChannel>

100117c8 <MXC_DMA_ConfigChannel>:
}

int MXC_DMA_ConfigChannel(mxc_dma_config_t config, mxc_dma_srcdst_t srcdst)
{
100117c8:	b410      	push	{r4}
100117ca:	b085      	sub	sp, #20
100117cc:	466c      	mov	r4, sp
100117ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return MXC_DMA_RevA_ConfigChannel(config, srcdst);
100117d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
}
100117d6:	b005      	add	sp, #20
100117d8:	bc10      	pop	{r4}
    return MXC_DMA_RevA_ConfigChannel(config, srcdst);
100117da:	f000 b8d3 	b.w	10011984 <MXC_DMA_RevA_ConfigChannel>

100117de <MXC_DMA_SetCallback>:
    return MXC_DMA_RevA_GetSrcReload(srcdst);
}

int MXC_DMA_SetCallback(int ch, void (*callback)(int, int))
{
    return MXC_DMA_RevA_SetCallback(ch, callback);
100117de:	f000 b903 	b.w	100119e8 <MXC_DMA_RevA_SetCallback>

100117e2 <MXC_DMA_SetChannelInterruptEn>:
}

int MXC_DMA_SetChannelInterruptEn(int ch, bool chdis, bool ctz)
{
    return MXC_DMA_RevA_SetChannelInterruptEn(ch, chdis, ctz);
100117e2:	f000 b911 	b.w	10011a08 <MXC_DMA_RevA_SetChannelInterruptEn>

100117e6 <MXC_DMA_ChannelClearFlags>:
    return MXC_DMA_RevA_ChannelGetFlags(ch);
}

int MXC_DMA_ChannelClearFlags(int ch, int flags)
{
    return MXC_DMA_RevA_ChannelClearFlags(ch, flags);
100117e6:	f000 b953 	b.w	10011a90 <MXC_DMA_RevA_ChannelClearFlags>
	...

100117ec <MXC_DMA_EnableInt>:
}

int MXC_DMA_EnableInt(int ch)
{
100117ec:	4601      	mov	r1, r0
    return MXC_DMA_RevA_EnableInt((mxc_dma_reva_regs_t *)MXC_DMA, ch);
100117ee:	4801      	ldr	r0, [pc, #4]	@ (100117f4 <MXC_DMA_EnableInt+0x8>)
100117f0:	f000 b92a 	b.w	10011a48 <MXC_DMA_RevA_EnableInt>
100117f4:	40028000 	.word	0x40028000

100117f8 <MXC_DMA_Start>:
    return MXC_DMA_RevA_DisableInt((mxc_dma_reva_regs_t *)MXC_DMA, ch);
}

int MXC_DMA_Start(int ch)
{
    return MXC_DMA_RevA_Start(ch);
100117f8:	f000 b960 	b.w	10011abc <MXC_DMA_RevA_Start>

100117fc <MXC_DMA_Handler>:
    return MXC_DMA_RevA_GetCHRegs(ch);
}

void MXC_DMA_Handler(void)
{
    MXC_DMA_RevA_Handler((mxc_dma_reva_regs_t *)MXC_DMA);
100117fc:	4801      	ldr	r0, [pc, #4]	@ (10011804 <MXC_DMA_Handler+0x8>)
100117fe:	f000 b97f 	b.w	10011b00 <MXC_DMA_RevA_Handler>
10011802:	bf00      	nop
10011804:	40028000 	.word	0x40028000

10011808 <MXC_DMA_RevA_Init>:
/****** Functions ******/
static void memcpy_callback(int ch, int error);
static void transfer_callback(int ch, int error);

int MXC_DMA_RevA_Init(mxc_dma_reva_regs_t *dma)
{
10011808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else
    numCh = MXC_DMA_CHANNELS;
    offset = 0;
#endif

    if (dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]) {
1001180a:	4e1e      	ldr	r6, [pc, #120]	@ (10011884 <MXC_DMA_RevA_Init+0x7c>)
1001180c:	4f1e      	ldr	r7, [pc, #120]	@ (10011888 <MXC_DMA_RevA_Init+0x80>)
1001180e:	1b86      	subs	r6, r0, r6
10011810:	bf18      	it	ne
10011812:	f04f 36ff 	movne.w	r6, #4294967295	@ 0xffffffff
{
10011816:	4605      	mov	r5, r0
    if (dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]) {
10011818:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
1001181c:	bb63      	cbnz	r3, 10011878 <MXC_DMA_RevA_Init+0x70>
        return E_BAD_STATE;
    }

#ifndef __riscv
    /* Initialize mutex */
    MXC_FreeLock(&dma_lock);
1001181e:	481b      	ldr	r0, [pc, #108]	@ (1001188c <MXC_DMA_RevA_Init+0x84>)
10011820:	f001 f8c8 	bl	100129b4 <MXC_FreeLock>

    if (MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10011824:	4819      	ldr	r0, [pc, #100]	@ (1001188c <MXC_DMA_RevA_Init+0x84>)
10011826:	2101      	movs	r1, #1
10011828:	f001 f8b6 	bl	10012998 <MXC_GetLock>
1001182c:	4604      	mov	r4, r0
1001182e:	bb30      	cbnz	r0, 1001187e <MXC_DMA_RevA_Init+0x76>
        return E_BUSY;
    }
#endif

    /* Ensure all channels are disabled at start, clear flags, init handles */
    dma->inten = 0;
10011830:	4b17      	ldr	r3, [pc, #92]	@ (10011890 <MXC_DMA_RevA_Init+0x88>)
10011832:	6028      	str	r0, [r5, #0]

    for (i = offset; i < (offset + numCh); i++) {
10011834:	4622      	mov	r2, r4
10011836:	f505 7080 	add.w	r0, r5, #256	@ 0x100
        dma_resource[i].valid = 0;
1001183a:	4621      	mov	r1, r4
1001183c:	eb05 1c42 	add.w	ip, r5, r2, lsl #5
        dma_resource[i].instance = 0;
        dma_resource[i].id = i;
        dma_resource[i].regs = (mxc_dma_reva_ch_regs_t *)&(dma->ch[(i % numCh)]);
10011840:	e9c3 2002 	strd	r2, r0, [r3, #8]
        dma_resource[i].instance = 0;
10011844:	e9c3 1100 	strd	r1, r1, [r3]
    for (i = offset; i < (offset + numCh); i++) {
10011848:	3201      	adds	r2, #1
        dma_resource[i].regs->ctrl = 0;
1001184a:	f8cc 1100 	str.w	r1, [ip, #256]	@ 0x100
        dma_resource[i].regs->status = dma_resource[i].regs->status;
1001184e:	f8dc e104 	ldr.w	lr, [ip, #260]	@ 0x104
10011852:	f8cc e104 	str.w	lr, [ip, #260]	@ 0x104
    for (i = offset; i < (offset + numCh); i++) {
10011856:	2a10      	cmp	r2, #16

        dma_resource[i].cb = NULL;
10011858:	6119      	str	r1, [r3, #16]
    for (i = offset; i < (offset + numCh); i++) {
1001185a:	f100 0020 	add.w	r0, r0, #32
1001185e:	f103 0314 	add.w	r3, r3, #20
10011862:	d1eb      	bne.n	1001183c <MXC_DMA_RevA_Init+0x34>
    }

    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]++;
10011864:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
#ifndef __riscv
    MXC_FreeLock(&dma_lock);
10011868:	4808      	ldr	r0, [pc, #32]	@ (1001188c <MXC_DMA_RevA_Init+0x84>)
    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]++;
1001186a:	3301      	adds	r3, #1
1001186c:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    MXC_FreeLock(&dma_lock);
10011870:	f001 f8a0 	bl	100129b4 <MXC_FreeLock>
#endif

    return E_NO_ERROR;
}
10011874:	4620      	mov	r0, r4
10011876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return E_BAD_STATE;
10011878:	f06f 0406 	mvn.w	r4, #6
1001187c:	e7fa      	b.n	10011874 <MXC_DMA_RevA_Init+0x6c>
        return E_BUSY;
1001187e:	f06f 0405 	mvn.w	r4, #5
10011882:	e7f7      	b.n	10011874 <MXC_DMA_RevA_Init+0x6c>
10011884:	40028000 	.word	0x40028000
10011888:	20001134 	.word	0x20001134
1001188c:	20000ff0 	.word	0x20000ff0
10011890:	20000ff4 	.word	0x20000ff4

10011894 <MXC_DMA_RevA_AcquireChannel>:
{
    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)] = 0;
}

int MXC_DMA_RevA_AcquireChannel(mxc_dma_reva_regs_t *dma)
{
10011894:	b538      	push	{r3, r4, r5, lr}
    int i, channel, numCh, offset;

    /* Check for initialization */
    if (!dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]) {
10011896:	4b16      	ldr	r3, [pc, #88]	@ (100118f0 <MXC_DMA_RevA_AcquireChannel+0x5c>)
10011898:	1ac0      	subs	r0, r0, r3
1001189a:	bf18      	it	ne
1001189c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
100118a0:	4b14      	ldr	r3, [pc, #80]	@ (100118f4 <MXC_DMA_RevA_AcquireChannel+0x60>)
100118a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
100118a6:	b1e3      	cbz	r3, 100118e2 <MXC_DMA_RevA_AcquireChannel+0x4e>
    offset = 0;
#endif

#ifndef __riscv
    /* If DMA is locked return busy */
    if (MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
100118a8:	4813      	ldr	r0, [pc, #76]	@ (100118f8 <MXC_DMA_RevA_AcquireChannel+0x64>)
100118aa:	2101      	movs	r1, #1
100118ac:	f001 f874 	bl	10012998 <MXC_GetLock>
100118b0:	4604      	mov	r4, r0
100118b2:	b9c8      	cbnz	r0, 100118e8 <MXC_DMA_RevA_AcquireChannel+0x54>
#endif
    /* Default is no channel available */
    channel = E_NONE_AVAIL;

    for (i = offset; i < (offset + numCh); i++) {
        if (!dma_resource[i].valid) {
100118b4:	4b11      	ldr	r3, [pc, #68]	@ (100118fc <MXC_DMA_RevA_AcquireChannel+0x68>)
100118b6:	2014      	movs	r0, #20
100118b8:	fb00 f104 	mul.w	r1, r0, r4
100118bc:	18cd      	adds	r5, r1, r3
100118be:	585a      	ldr	r2, [r3, r1]
100118c0:	b94a      	cbnz	r2, 100118d6 <MXC_DMA_RevA_AcquireChannel+0x42>
            /* Found one */
            channel = i;
            dma_resource[i].valid = 1;
100118c2:	2001      	movs	r0, #1
100118c4:	5058      	str	r0, [r3, r1]
            dma_resource[i].regs->ctrl = 0;
100118c6:	68eb      	ldr	r3, [r5, #12]
100118c8:	601a      	str	r2, [r3, #0]
            dma_resource[i].regs->cntrld = 0; /* Used by DMA_Start() to conditionally set RLDEN */
100118ca:	61da      	str	r2, [r3, #28]
            break;
        }
    }
#ifndef __riscv
    MXC_FreeLock(&dma_lock);
100118cc:	480a      	ldr	r0, [pc, #40]	@ (100118f8 <MXC_DMA_RevA_AcquireChannel+0x64>)
100118ce:	f001 f871 	bl	100129b4 <MXC_FreeLock>
#endif

    return channel;
}
100118d2:	4620      	mov	r0, r4
100118d4:	bd38      	pop	{r3, r4, r5, pc}
    for (i = offset; i < (offset + numCh); i++) {
100118d6:	3401      	adds	r4, #1
100118d8:	2c10      	cmp	r4, #16
100118da:	d1ed      	bne.n	100118b8 <MXC_DMA_RevA_AcquireChannel+0x24>
    channel = E_NONE_AVAIL;
100118dc:	f06f 040d 	mvn.w	r4, #13
100118e0:	e7f4      	b.n	100118cc <MXC_DMA_RevA_AcquireChannel+0x38>
        return E_BAD_STATE;
100118e2:	f06f 0406 	mvn.w	r4, #6
100118e6:	e7f4      	b.n	100118d2 <MXC_DMA_RevA_AcquireChannel+0x3e>
        return E_BUSY;
100118e8:	f06f 0405 	mvn.w	r4, #5
100118ec:	e7f1      	b.n	100118d2 <MXC_DMA_RevA_AcquireChannel+0x3e>
100118ee:	bf00      	nop
100118f0:	40028000 	.word	0x40028000
100118f4:	20001134 	.word	0x20001134
100118f8:	20000ff0 	.word	0x20000ff0
100118fc:	20000ff4 	.word	0x20000ff4

10011900 <MXC_DMA_RevA_ReleaseChannel>:

int MXC_DMA_RevA_ReleaseChannel(int ch)
{
    if (CHECK_HANDLE(ch)) {
10011900:	280f      	cmp	r0, #15
{
10011902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (CHECK_HANDLE(ch)) {
10011904:	d816      	bhi.n	10011934 <MXC_DMA_RevA_ReleaseChannel+0x34>
10011906:	2314      	movs	r3, #20
10011908:	4e0d      	ldr	r6, [pc, #52]	@ (10011940 <MXC_DMA_RevA_ReleaseChannel+0x40>)
1001190a:	fb03 f500 	mul.w	r5, r3, r0
1001190e:	1977      	adds	r7, r6, r5
10011910:	5973      	ldr	r3, [r6, r5]
10011912:	b17b      	cbz	r3, 10011934 <MXC_DMA_RevA_ReleaseChannel+0x34>
        if (MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10011914:	480b      	ldr	r0, [pc, #44]	@ (10011944 <MXC_DMA_RevA_ReleaseChannel+0x44>)
10011916:	2101      	movs	r1, #1
10011918:	f001 f83e 	bl	10012998 <MXC_GetLock>
1001191c:	4604      	mov	r4, r0
1001191e:	b960      	cbnz	r0, 1001193a <MXC_DMA_RevA_ReleaseChannel+0x3a>
            return E_BUSY;
        }

        dma_resource[ch].valid = 0;
        dma_resource[ch].regs->ctrl = 0;
10011920:	68fb      	ldr	r3, [r7, #12]
        dma_resource[ch].valid = 0;
10011922:	5170      	str	r0, [r6, r5]
        dma_resource[ch].regs->ctrl = 0;
10011924:	6018      	str	r0, [r3, #0]
        dma_resource[ch].regs->status = dma_resource[ch].regs->status;
10011926:	685a      	ldr	r2, [r3, #4]
        MXC_FreeLock(&dma_lock);
10011928:	4806      	ldr	r0, [pc, #24]	@ (10011944 <MXC_DMA_RevA_ReleaseChannel+0x44>)
        dma_resource[ch].regs->status = dma_resource[ch].regs->status;
1001192a:	605a      	str	r2, [r3, #4]
        MXC_FreeLock(&dma_lock);
1001192c:	f001 f842 	bl	100129b4 <MXC_FreeLock>
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
}
10011930:	4620      	mov	r0, r4
10011932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return E_BAD_PARAM;
10011934:	f06f 0402 	mvn.w	r4, #2
10011938:	e7fa      	b.n	10011930 <MXC_DMA_RevA_ReleaseChannel+0x30>
            return E_BUSY;
1001193a:	f06f 0405 	mvn.w	r4, #5
1001193e:	e7f7      	b.n	10011930 <MXC_DMA_RevA_ReleaseChannel+0x30>
10011940:	20000ff4 	.word	0x20000ff4
10011944:	20000ff0 	.word	0x20000ff0

10011948 <MXC_DMA_RevA_SetSrcDst>:

    return E_NO_ERROR;
}

int MXC_DMA_RevA_SetSrcDst(mxc_dma_srcdst_t srcdst)
{
10011948:	b084      	sub	sp, #16
1001194a:	f10d 0c10 	add.w	ip, sp, #16
    if (CHECK_HANDLE(srcdst.ch)) {
1001194e:	280f      	cmp	r0, #15
{
10011950:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
10011954:	4603      	mov	r3, r0
    if (CHECK_HANDLE(srcdst.ch)) {
10011956:	d80f      	bhi.n	10011978 <MXC_DMA_RevA_SetSrcDst+0x30>
10011958:	2114      	movs	r1, #20
1001195a:	4a09      	ldr	r2, [pc, #36]	@ (10011980 <MXC_DMA_RevA_SetSrcDst+0x38>)
1001195c:	434b      	muls	r3, r1
1001195e:	18d1      	adds	r1, r2, r3
10011960:	58d3      	ldr	r3, [r2, r3]
10011962:	b14b      	cbz	r3, 10011978 <MXC_DMA_RevA_SetSrcDst+0x30>
        dma_resource[srcdst.ch].regs->src = (unsigned int)srcdst.source;
10011964:	68cb      	ldr	r3, [r1, #12]
10011966:	9a01      	ldr	r2, [sp, #4]
10011968:	609a      	str	r2, [r3, #8]
        dma_resource[srcdst.ch].regs->dst = (unsigned int)srcdst.dest;
1001196a:	9a02      	ldr	r2, [sp, #8]
1001196c:	60da      	str	r2, [r3, #12]
        dma_resource[srcdst.ch].regs->cnt = srcdst.len;
1001196e:	9a03      	ldr	r2, [sp, #12]
10011970:	611a      	str	r2, [r3, #16]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011972:	2000      	movs	r0, #0
}
10011974:	b004      	add	sp, #16
10011976:	4770      	bx	lr
        return E_BAD_PARAM;
10011978:	f06f 0002 	mvn.w	r0, #2
1001197c:	e7fa      	b.n	10011974 <MXC_DMA_RevA_SetSrcDst+0x2c>
1001197e:	bf00      	nop
10011980:	20000ff4 	.word	0x20000ff4

10011984 <MXC_DMA_RevA_ConfigChannel>:
{
10011984:	b084      	sub	sp, #16
10011986:	f10d 0c10 	add.w	ip, sp, #16
    if (CHECK_HANDLE(config.ch)) {
1001198a:	280f      	cmp	r0, #15
{
1001198c:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
10011990:	4603      	mov	r3, r0
    if (CHECK_HANDLE(config.ch)) {
10011992:	d822      	bhi.n	100119da <MXC_DMA_RevA_ConfigChannel+0x56>
10011994:	2114      	movs	r1, #20
10011996:	4a13      	ldr	r2, [pc, #76]	@ (100119e4 <MXC_DMA_RevA_ConfigChannel+0x60>)
10011998:	434b      	muls	r3, r1
1001199a:	18d1      	adds	r1, r2, r3
1001199c:	58d3      	ldr	r3, [r2, r3]
1001199e:	b1e3      	cbz	r3, 100119da <MXC_DMA_RevA_ConfigChannel+0x56>
             (config.dstwd << MXC_F_DMA_REVA_CTRL_DSTWD_POS));
100119a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
100119a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
        dma_resource[config.ch].regs->ctrl =
100119a8:	68c9      	ldr	r1, [r1, #12]
             (config.dstwd << MXC_F_DMA_REVA_CTRL_DSTWD_POS));
100119aa:	051b      	lsls	r3, r3, #20
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
100119ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             (config.dstinc_en ? MXC_F_DMA_REVA_CTRL_DSTINC : 0) | config.reqsel |
100119b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
100119b4:	4313      	orrs	r3, r2
            ((config.srcinc_en ? MXC_F_DMA_REVA_CTRL_SRCINC : 0) |
100119b6:	9a02      	ldr	r2, [sp, #8]
100119b8:	3a00      	subs	r2, #0
100119ba:	bf18      	it	ne
100119bc:	2201      	movne	r2, #1
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
100119be:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
             (config.dstinc_en ? MXC_F_DMA_REVA_CTRL_DSTINC : 0) | config.reqsel |
100119c2:	9a03      	ldr	r2, [sp, #12]
100119c4:	3a00      	subs	r2, #0
100119c6:	bf18      	it	ne
100119c8:	2201      	movne	r2, #1
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
100119ca:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
        dma_resource[config.ch].regs->ctrl =
100119ce:	600b      	str	r3, [r1, #0]
    return MXC_DMA_RevA_SetSrcDst(srcdst);
100119d0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
}
100119d4:	b004      	add	sp, #16
    return MXC_DMA_RevA_SetSrcDst(srcdst);
100119d6:	f7ff bfb7 	b.w	10011948 <MXC_DMA_RevA_SetSrcDst>
}
100119da:	f06f 0002 	mvn.w	r0, #2
100119de:	b004      	add	sp, #16
100119e0:	4770      	bx	lr
100119e2:	bf00      	nop
100119e4:	20000ff4 	.word	0x20000ff4

100119e8 <MXC_DMA_RevA_SetCallback>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_SetCallback(int ch, void (*callback)(int, int))
{
    if (CHECK_HANDLE(ch)) {
100119e8:	280f      	cmp	r0, #15
100119ea:	d808      	bhi.n	100119fe <MXC_DMA_RevA_SetCallback+0x16>
100119ec:	2214      	movs	r2, #20
100119ee:	4b05      	ldr	r3, [pc, #20]	@ (10011a04 <MXC_DMA_RevA_SetCallback+0x1c>)
100119f0:	4350      	muls	r0, r2
100119f2:	181a      	adds	r2, r3, r0
100119f4:	581b      	ldr	r3, [r3, r0]
100119f6:	b113      	cbz	r3, 100119fe <MXC_DMA_RevA_SetCallback+0x16>
        /* Callback for interrupt handler, no checking is done, as NULL is valid for(none)  */
        dma_resource[ch].cb = callback;
100119f8:	6111      	str	r1, [r2, #16]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
100119fa:	2000      	movs	r0, #0
100119fc:	4770      	bx	lr
        return E_BAD_PARAM;
100119fe:	f06f 0002 	mvn.w	r0, #2
}
10011a02:	4770      	bx	lr
10011a04:	20000ff4 	.word	0x20000ff4

10011a08 <MXC_DMA_RevA_SetChannelInterruptEn>:

int MXC_DMA_RevA_SetChannelInterruptEn(int ch, bool chdis, bool ctz)
{
    if (CHECK_HANDLE(ch)) {
10011a08:	280f      	cmp	r0, #15
{
10011a0a:	b530      	push	{r4, r5, lr}
    if (CHECK_HANDLE(ch)) {
10011a0c:	d817      	bhi.n	10011a3e <MXC_DMA_RevA_SetChannelInterruptEn+0x36>
10011a0e:	2414      	movs	r4, #20
10011a10:	4b0c      	ldr	r3, [pc, #48]	@ (10011a44 <MXC_DMA_RevA_SetChannelInterruptEn+0x3c>)
10011a12:	4344      	muls	r4, r0
10011a14:	191d      	adds	r5, r3, r4
10011a16:	591c      	ldr	r4, [r3, r4]
10011a18:	b18c      	cbz	r4, 10011a3e <MXC_DMA_RevA_SetChannelInterruptEn+0x36>
        if (chdis) {
10011a1a:	b121      	cbz	r1, 10011a26 <MXC_DMA_RevA_SetChannelInterruptEn+0x1e>
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_DIS_IE);
10011a1c:	68ec      	ldr	r4, [r5, #12]
10011a1e:	6821      	ldr	r1, [r4, #0]
10011a20:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
10011a24:	6021      	str	r1, [r4, #0]
        }
        if (ctz) {
10011a26:	b90a      	cbnz	r2, 10011a2c <MXC_DMA_RevA_SetChannelInterruptEn+0x24>
        }
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011a28:	2000      	movs	r0, #0
}
10011a2a:	bd30      	pop	{r4, r5, pc}
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_CTZ_IE);
10011a2c:	2214      	movs	r2, #20
10011a2e:	fb02 3300 	mla	r3, r2, r0, r3
10011a32:	68da      	ldr	r2, [r3, #12]
10011a34:	6813      	ldr	r3, [r2, #0]
10011a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10011a3a:	6013      	str	r3, [r2, #0]
10011a3c:	e7f4      	b.n	10011a28 <MXC_DMA_RevA_SetChannelInterruptEn+0x20>
        return E_BAD_PARAM;
10011a3e:	f06f 0002 	mvn.w	r0, #2
10011a42:	e7f2      	b.n	10011a2a <MXC_DMA_RevA_SetChannelInterruptEn+0x22>
10011a44:	20000ff4 	.word	0x20000ff4

10011a48 <MXC_DMA_RevA_EnableInt>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_EnableInt(mxc_dma_reva_regs_t *dma, int ch)
{
    if (CHECK_HANDLE(ch)) {
10011a48:	290f      	cmp	r1, #15
10011a4a:	d80b      	bhi.n	10011a64 <MXC_DMA_RevA_EnableInt+0x1c>
10011a4c:	2314      	movs	r3, #20
10011a4e:	4a07      	ldr	r2, [pc, #28]	@ (10011a6c <MXC_DMA_RevA_EnableInt+0x24>)
10011a50:	434b      	muls	r3, r1
10011a52:	58d3      	ldr	r3, [r2, r3]
10011a54:	b133      	cbz	r3, 10011a64 <MXC_DMA_RevA_EnableInt+0x1c>
#if TARGET_NUM == 32665
        ch %= MXC_DMA_CH_OFFSET;
#endif
        dma->inten |= (1 << ch);
10011a56:	6802      	ldr	r2, [r0, #0]
10011a58:	2301      	movs	r3, #1
10011a5a:	408b      	lsls	r3, r1
10011a5c:	4313      	orrs	r3, r2
10011a5e:	6003      	str	r3, [r0, #0]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011a60:	2000      	movs	r0, #0
10011a62:	4770      	bx	lr
        return E_BAD_PARAM;
10011a64:	f06f 0002 	mvn.w	r0, #2
}
10011a68:	4770      	bx	lr
10011a6a:	bf00      	nop
10011a6c:	20000ff4 	.word	0x20000ff4

10011a70 <MXC_DMA_RevA_ChannelGetFlags>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_ChannelGetFlags(int ch)
{
    if (CHECK_HANDLE(ch)) {
10011a70:	280f      	cmp	r0, #15
10011a72:	d808      	bhi.n	10011a86 <MXC_DMA_RevA_ChannelGetFlags+0x16>
10011a74:	2214      	movs	r2, #20
10011a76:	4b05      	ldr	r3, [pc, #20]	@ (10011a8c <MXC_DMA_RevA_ChannelGetFlags+0x1c>)
10011a78:	4350      	muls	r0, r2
10011a7a:	181a      	adds	r2, r3, r0
10011a7c:	581b      	ldr	r3, [r3, r0]
10011a7e:	b113      	cbz	r3, 10011a86 <MXC_DMA_RevA_ChannelGetFlags+0x16>
        return dma_resource[ch].regs->status;
10011a80:	68d3      	ldr	r3, [r2, #12]
10011a82:	6858      	ldr	r0, [r3, #4]
10011a84:	4770      	bx	lr
    } else {
        return E_BAD_PARAM;
10011a86:	f06f 0002 	mvn.w	r0, #2
    }

    return E_NO_ERROR;
}
10011a8a:	4770      	bx	lr
10011a8c:	20000ff4 	.word	0x20000ff4

10011a90 <MXC_DMA_RevA_ChannelClearFlags>:

int MXC_DMA_RevA_ChannelClearFlags(int ch, int flags)
{
    if (CHECK_HANDLE(ch)) {
10011a90:	280f      	cmp	r0, #15
10011a92:	d80d      	bhi.n	10011ab0 <MXC_DMA_RevA_ChannelClearFlags+0x20>
10011a94:	2214      	movs	r2, #20
10011a96:	4b08      	ldr	r3, [pc, #32]	@ (10011ab8 <MXC_DMA_RevA_ChannelClearFlags+0x28>)
10011a98:	4350      	muls	r0, r2
10011a9a:	181a      	adds	r2, r3, r0
10011a9c:	581b      	ldr	r3, [r3, r0]
10011a9e:	b13b      	cbz	r3, 10011ab0 <MXC_DMA_RevA_ChannelClearFlags+0x20>
        dma_resource[ch].regs->status |= (flags & 0x5F); // Mask for Interrupt flags
10011aa0:	68d3      	ldr	r3, [r2, #12]
10011aa2:	685a      	ldr	r2, [r3, #4]
10011aa4:	f001 015f 	and.w	r1, r1, #95	@ 0x5f
10011aa8:	4311      	orrs	r1, r2
10011aaa:	6059      	str	r1, [r3, #4]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011aac:	2000      	movs	r0, #0
10011aae:	4770      	bx	lr
        return E_BAD_PARAM;
10011ab0:	f06f 0002 	mvn.w	r0, #2
}
10011ab4:	4770      	bx	lr
10011ab6:	bf00      	nop
10011ab8:	20000ff4 	.word	0x20000ff4

10011abc <MXC_DMA_RevA_Start>:

int MXC_DMA_RevA_Start(int ch)
{
    if (CHECK_HANDLE(ch)) {
10011abc:	280f      	cmp	r0, #15
{
10011abe:	b538      	push	{r3, r4, r5, lr}
10011ac0:	4604      	mov	r4, r0
    if (CHECK_HANDLE(ch)) {
10011ac2:	d818      	bhi.n	10011af6 <MXC_DMA_RevA_Start+0x3a>
10011ac4:	2314      	movs	r3, #20
10011ac6:	4a0d      	ldr	r2, [pc, #52]	@ (10011afc <MXC_DMA_RevA_Start+0x40>)
10011ac8:	4343      	muls	r3, r0
10011aca:	18d5      	adds	r5, r2, r3
10011acc:	58d3      	ldr	r3, [r2, r3]
10011ace:	b193      	cbz	r3, 10011af6 <MXC_DMA_RevA_Start+0x3a>
        MXC_DMA_ChannelClearFlags(ch, MXC_DMA_RevA_ChannelGetFlags(ch));
10011ad0:	f7ff ffce 	bl	10011a70 <MXC_DMA_RevA_ChannelGetFlags>
10011ad4:	4601      	mov	r1, r0
10011ad6:	4620      	mov	r0, r4
10011ad8:	f7ff fe85 	bl	100117e6 <MXC_DMA_ChannelClearFlags>

        if (dma_resource[ch].regs->cntrld) {
10011adc:	68eb      	ldr	r3, [r5, #12]
10011ade:	69da      	ldr	r2, [r3, #28]
10011ae0:	b12a      	cbz	r2, 10011aee <MXC_DMA_RevA_Start+0x32>
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_EN | MXC_F_DMA_REVA_CTRL_RLDEN);
10011ae2:	681a      	ldr	r2, [r3, #0]
10011ae4:	f042 0203 	orr.w	r2, r2, #3
10011ae8:	601a      	str	r2, [r3, #0]
        }
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011aea:	2000      	movs	r0, #0
}
10011aec:	bd38      	pop	{r3, r4, r5, pc}
            dma_resource[ch].regs->ctrl |= MXC_F_DMA_REVA_CTRL_EN;
10011aee:	681a      	ldr	r2, [r3, #0]
10011af0:	f042 0201 	orr.w	r2, r2, #1
10011af4:	e7f8      	b.n	10011ae8 <MXC_DMA_RevA_Start+0x2c>
        return E_BAD_PARAM;
10011af6:	f06f 0002 	mvn.w	r0, #2
10011afa:	e7f7      	b.n	10011aec <MXC_DMA_RevA_Start+0x30>
10011afc:	20000ff4 	.word	0x20000ff4

10011b00 <MXC_DMA_RevA_Handler>:
        return NULL;
    }
}

void MXC_DMA_RevA_Handler(mxc_dma_reva_regs_t *dma)
{
10011b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int numCh = MXC_DMA_CHANNELS / MXC_DMA_INSTANCES;
    int offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma);
10011b04:	4c18      	ldr	r4, [pc, #96]	@ (10011b68 <MXC_DMA_RevA_Handler+0x68>)
10011b06:	4d19      	ldr	r5, [pc, #100]	@ (10011b6c <MXC_DMA_RevA_Handler+0x6c>)
10011b08:	1b04      	subs	r4, r0, r4
10011b0a:	f06f 030f 	mvn.w	r3, #15
10011b0e:	bf18      	it	ne
10011b10:	2401      	movne	r4, #1
10011b12:	435c      	muls	r4, r3
    /* Do callback, if enabled */
    for (int i = offset; i < (offset + numCh); i++) {
10011b14:	2314      	movs	r3, #20
{
10011b16:	4606      	mov	r6, r0
    for (int i = offset; i < (offset + numCh); i++) {
10011b18:	f104 0710 	add.w	r7, r4, #16
10011b1c:	fb03 5504 	mla	r5, r3, r4, r5
        if (CHECK_HANDLE(i)) {
            if (dma->intfl & (0x1 << (i % numCh))) {
10011b20:	f04f 0801 	mov.w	r8, #1
        if (CHECK_HANDLE(i)) {
10011b24:	2c0f      	cmp	r4, #15
10011b26:	d906      	bls.n	10011b36 <MXC_DMA_RevA_Handler+0x36>
    for (int i = offset; i < (offset + numCh); i++) {
10011b28:	3401      	adds	r4, #1
10011b2a:	42bc      	cmp	r4, r7
10011b2c:	f105 0514 	add.w	r5, r5, #20
10011b30:	d1f8      	bne.n	10011b24 <MXC_DMA_RevA_Handler+0x24>
                    break;
                }
            }
        }
    }
}
10011b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (CHECK_HANDLE(i)) {
10011b36:	682b      	ldr	r3, [r5, #0]
10011b38:	2b00      	cmp	r3, #0
10011b3a:	d0f5      	beq.n	10011b28 <MXC_DMA_RevA_Handler+0x28>
            if (dma->intfl & (0x1 << (i % numCh))) {
10011b3c:	6873      	ldr	r3, [r6, #4]
10011b3e:	fa08 f204 	lsl.w	r2, r8, r4
10011b42:	421a      	tst	r2, r3
10011b44:	d0f0      	beq.n	10011b28 <MXC_DMA_RevA_Handler+0x28>
                if (dma_resource[i].cb != NULL) {
10011b46:	692b      	ldr	r3, [r5, #16]
10011b48:	b113      	cbz	r3, 10011b50 <MXC_DMA_RevA_Handler+0x50>
                    dma_resource[i].cb(i, E_NO_ERROR);
10011b4a:	2100      	movs	r1, #0
10011b4c:	4620      	mov	r0, r4
10011b4e:	4798      	blx	r3
                MXC_DMA_ChannelClearFlags(i, MXC_DMA_RevA_ChannelGetFlags(i));
10011b50:	4620      	mov	r0, r4
10011b52:	f7ff ff8d 	bl	10011a70 <MXC_DMA_RevA_ChannelGetFlags>
10011b56:	4601      	mov	r1, r0
10011b58:	4620      	mov	r0, r4
10011b5a:	f7ff fe44 	bl	100117e6 <MXC_DMA_ChannelClearFlags>
                if (dma->intfl == 0) {
10011b5e:	6873      	ldr	r3, [r6, #4]
10011b60:	2b00      	cmp	r3, #0
10011b62:	d1e1      	bne.n	10011b28 <MXC_DMA_RevA_Handler+0x28>
10011b64:	e7e5      	b.n	10011b32 <MXC_DMA_RevA_Handler+0x32>
10011b66:	bf00      	nop
10011b68:	40028000 	.word	0x40028000
10011b6c:	20000ff4 	.word	0x20000ff4

10011b70 <MXC_FLC_ME17_GetByAddress>:
}

//******************************************************************************
int MXC_FLC_ME17_GetByAddress(mxc_flc_regs_t **flc, uint32_t addr)
{
    if ((addr >= MXC_FLASH_MEM_BASE) && (addr < (MXC_FLASH_MEM_BASE + MXC_FLASH_MEM_SIZE))) {
10011b70:	f101 4370 	add.w	r3, r1, #4026531840	@ 0xf0000000
10011b74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
10011b78:	d203      	bcs.n	10011b82 <MXC_FLC_ME17_GetByAddress+0x12>
        *flc = MXC_FLC0;
10011b7a:	4b06      	ldr	r3, [pc, #24]	@ (10011b94 <MXC_FLC_ME17_GetByAddress+0x24>)
10011b7c:	6003      	str	r3, [r0, #0]
        *flc = MXC_FLC0;
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011b7e:	2000      	movs	r0, #0
10011b80:	4770      	bx	lr
    } else if ((addr >= MXC_INFO_MEM_BASE) && (addr < (MXC_INFO_MEM_BASE + MXC_INFO_MEM_SIZE))) {
10011b82:	f1a1 5184 	sub.w	r1, r1, #276824064	@ 0x10800000
10011b86:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
10011b8a:	d3f6      	bcc.n	10011b7a <MXC_FLC_ME17_GetByAddress+0xa>
        return E_BAD_PARAM;
10011b8c:	f06f 0002 	mvn.w	r0, #2
}
10011b90:	4770      	bx	lr
10011b92:	bf00      	nop
10011b94:	40029000 	.word	0x40029000

10011b98 <MXC_FLC_UnlockInfoBlock>:
    return E_NO_ERROR;
}

//******************************************************************************
int MXC_FLC_UnlockInfoBlock(uint32_t address)
{
10011b98:	b507      	push	{r0, r1, r2, lr}
10011b9a:	4602      	mov	r2, r0
    int err;
    mxc_flc_regs_t *flc;

    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
10011b9c:	4601      	mov	r1, r0
10011b9e:	a801      	add	r0, sp, #4
10011ba0:	f7ff ffe6 	bl	10011b70 <MXC_FLC_ME17_GetByAddress>
10011ba4:	b930      	cbnz	r0, 10011bb4 <MXC_FLC_UnlockInfoBlock+0x1c>
        return err;
    }

    return MXC_FLC_RevA_UnlockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
10011ba6:	9801      	ldr	r0, [sp, #4]
10011ba8:	4611      	mov	r1, r2
}
10011baa:	b003      	add	sp, #12
10011bac:	f85d eb04 	ldr.w	lr, [sp], #4
    return MXC_FLC_RevA_UnlockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
10011bb0:	f000 b814 	b.w	10011bdc <MXC_FLC_RevA_UnlockInfoBlock>
}
10011bb4:	b003      	add	sp, #12
10011bb6:	f85d fb04 	ldr.w	pc, [sp], #4

10011bba <MXC_FLC_LockInfoBlock>:

//******************************************************************************
int MXC_FLC_LockInfoBlock(uint32_t address)
{
10011bba:	b507      	push	{r0, r1, r2, lr}
10011bbc:	4602      	mov	r2, r0
    int err;
    mxc_flc_regs_t *flc;

    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
10011bbe:	4601      	mov	r1, r0
10011bc0:	a801      	add	r0, sp, #4
10011bc2:	f7ff ffd5 	bl	10011b70 <MXC_FLC_ME17_GetByAddress>
10011bc6:	b930      	cbnz	r0, 10011bd6 <MXC_FLC_LockInfoBlock+0x1c>
        return err;
    }

    return MXC_FLC_RevA_LockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
10011bc8:	9801      	ldr	r0, [sp, #4]
10011bca:	4611      	mov	r1, r2
}
10011bcc:	b003      	add	sp, #12
10011bce:	f85d eb04 	ldr.w	lr, [sp], #4
    return MXC_FLC_RevA_LockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
10011bd2:	f000 b823 	b.w	10011c1c <MXC_FLC_RevA_LockInfoBlock>
}
10011bd6:	b003      	add	sp, #12
10011bd8:	f85d fb04 	ldr.w	pc, [sp], #4

10011bdc <MXC_FLC_RevA_UnlockInfoBlock>:
}

//******************************************************************************
int MXC_FLC_RevA_UnlockInfoBlock(mxc_flc_reva_regs_t *flc, uint32_t address)
{
    if ((address < MXC_INFO_MEM_BASE) ||
10011bdc:	f1a1 5184 	sub.w	r1, r1, #276824064	@ 0x10800000
10011be0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
10011be4:	d214      	bcs.n	10011c10 <MXC_FLC_RevA_UnlockInfoBlock+0x34>
        (address >= (MXC_INFO_MEM_BASE + (MXC_INFO_MEM_SIZE * 2)))) {
        return E_BAD_PARAM;
    }

    /* Make sure the info block is locked */
    flc->actrl = 0x1234;
10011be6:	f241 2334 	movw	r3, #4660	@ 0x1234
10011bea:	6403      	str	r3, [r0, #64]	@ 0x40

    /* Write the unlock sequence */
    flc->actrl = 0x3a7f5ca3;
10011bec:	f103 5369 	add.w	r3, r3, #977272832	@ 0x3a400000
10011bf0:	f503 137d 	add.w	r3, r3, #4145152	@ 0x3f4000
10011bf4:	f603 236f 	addw	r3, r3, #2671	@ 0xa6f
10011bf8:	6403      	str	r3, [r0, #64]	@ 0x40
    flc->actrl = 0xa1e34f20;
10011bfa:	f103 43d0 	add.w	r3, r3, #1744830464	@ 0x68000000
10011bfe:	f5a3 031c 	sub.w	r3, r3, #10223616	@ 0x9c0000
10011c02:	f6a3 5383 	subw	r3, r3, #3459	@ 0xd83
10011c06:	6403      	str	r3, [r0, #64]	@ 0x40
    flc->actrl = 0x9608b2c1;
10011c08:	4b03      	ldr	r3, [pc, #12]	@ (10011c18 <MXC_FLC_RevA_UnlockInfoBlock+0x3c>)
10011c0a:	6403      	str	r3, [r0, #64]	@ 0x40

    return E_NO_ERROR;
10011c0c:	2000      	movs	r0, #0
10011c0e:	4770      	bx	lr
        return E_BAD_PARAM;
10011c10:	f06f 0002 	mvn.w	r0, #2
}
10011c14:	4770      	bx	lr
10011c16:	bf00      	nop
10011c18:	9608b2c1 	.word	0x9608b2c1

10011c1c <MXC_FLC_RevA_LockInfoBlock>:

//******************************************************************************
int MXC_FLC_RevA_LockInfoBlock(mxc_flc_reva_regs_t *flc, uint32_t address)
{
    if ((address < MXC_INFO_MEM_BASE) ||
10011c1c:	f1a1 5184 	sub.w	r1, r1, #276824064	@ 0x10800000
10011c20:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        (address >= (MXC_INFO_MEM_BASE + (MXC_INFO_MEM_SIZE * 2)))) {
        return E_BAD_PARAM;
    }

    flc->actrl = 0xDEADBEEF;
10011c24:	bf3d      	ittte	cc
10011c26:	4b03      	ldrcc	r3, [pc, #12]	@ (10011c34 <MXC_FLC_RevA_LockInfoBlock+0x18>)
10011c28:	6403      	strcc	r3, [r0, #64]	@ 0x40
    return E_NO_ERROR;
10011c2a:	2000      	movcc	r0, #0
        return E_BAD_PARAM;
10011c2c:	f06f 0002 	mvncs.w	r0, #2
}
10011c30:	4770      	bx	lr
10011c32:	bf00      	nop
10011c34:	deadbeef 	.word	0xdeadbeef

10011c38 <MXC_GPIO_Init>:
/* **** Globals **** */

/* **** Functions **** */
int MXC_GPIO_Init(uint32_t portmask)
{
    if (portmask & 0x1) {
10011c38:	07c1      	lsls	r1, r0, #31
{
10011c3a:	b510      	push	{r4, lr}
10011c3c:	4604      	mov	r4, r0
    if (portmask & 0x1) {
10011c3e:	d502      	bpl.n	10011c46 <MXC_GPIO_Init+0xe>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
10011c40:	2000      	movs	r0, #0
10011c42:	f7ff fae7 	bl	10011214 <MXC_SYS_ClockEnable>
    }

    if (portmask & 0x2) {
10011c46:	07a2      	lsls	r2, r4, #30
10011c48:	d502      	bpl.n	10011c50 <MXC_GPIO_Init+0x18>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
10011c4a:	2001      	movs	r0, #1
10011c4c:	f7ff fae2 	bl	10011214 <MXC_SYS_ClockEnable>
    }

    if (portmask & 0x4) {
10011c50:	0763      	lsls	r3, r4, #29
10011c52:	d502      	bpl.n	10011c5a <MXC_GPIO_Init+0x22>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO2);
10011c54:	2040      	movs	r0, #64	@ 0x40
10011c56:	f7ff fadd 	bl	10011214 <MXC_SYS_ClockEnable>
    }

    return MXC_GPIO_Common_Init(portmask);
10011c5a:	4620      	mov	r0, r4
}
10011c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_GPIO_Common_Init(portmask);
10011c60:	f000 beae 	b.w	100129c0 <MXC_GPIO_Common_Init>

10011c64 <MXC_GPIO_OutSet>:
}

/* ************************************************************************** */
void MXC_GPIO_OutSet(mxc_gpio_regs_t *port, uint32_t mask)
{
    if (port == MXC_GPIO3) {
10011c64:	4a08      	ldr	r2, [pc, #32]	@ (10011c88 <MXC_GPIO_OutSet+0x24>)
10011c66:	4290      	cmp	r0, r2
{
10011c68:	460b      	mov	r3, r1
    if (port == MXC_GPIO3) {
10011c6a:	d10a      	bne.n	10011c82 <MXC_GPIO_OutSet+0x1e>
        MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(mask) | P31_DATA_OUT(mask);
10011c6c:	4907      	ldr	r1, [pc, #28]	@ (10011c8c <MXC_GPIO_OutSet+0x28>)
10011c6e:	6a08      	ldr	r0, [r1, #32]
10011c70:	00da      	lsls	r2, r3, #3
10011c72:	f003 0301 	and.w	r3, r3, #1
10011c76:	f002 0210 	and.w	r2, r2, #16
10011c7a:	4303      	orrs	r3, r0
10011c7c:	4313      	orrs	r3, r2
10011c7e:	620b      	str	r3, [r1, #32]
        return;
    }

    MXC_GPIO_RevA_OutSet((mxc_gpio_reva_regs_t *)port, mask);
}
10011c80:	4770      	bx	lr
    MXC_GPIO_RevA_OutSet((mxc_gpio_reva_regs_t *)port, mask);
10011c82:	f000 b92d 	b.w	10011ee0 <MXC_GPIO_RevA_OutSet>
10011c86:	bf00      	nop
10011c88:	40080600 	.word	0x40080600
10011c8c:	40006c00 	.word	0x40006c00

10011c90 <MXC_GPIO_OutClr>:

/* ************************************************************************** */
void MXC_GPIO_OutClr(mxc_gpio_regs_t *port, uint32_t mask)
{
    if (port == MXC_GPIO3) {
10011c90:	4a08      	ldr	r2, [pc, #32]	@ (10011cb4 <MXC_GPIO_OutClr+0x24>)
10011c92:	4290      	cmp	r0, r2
{
10011c94:	460b      	mov	r3, r1
    if (port == MXC_GPIO3) {
10011c96:	d10b      	bne.n	10011cb0 <MXC_GPIO_OutClr+0x20>
        MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(mask) | P31_DATA_OUT(mask));
10011c98:	4807      	ldr	r0, [pc, #28]	@ (10011cb8 <MXC_GPIO_OutClr+0x28>)
10011c9a:	00da      	lsls	r2, r3, #3
10011c9c:	6a01      	ldr	r1, [r0, #32]
10011c9e:	f002 0210 	and.w	r2, r2, #16
10011ca2:	f003 0301 	and.w	r3, r3, #1
10011ca6:	4313      	orrs	r3, r2
10011ca8:	ea21 0303 	bic.w	r3, r1, r3
10011cac:	6203      	str	r3, [r0, #32]
        return;
    }

    MXC_GPIO_RevA_OutClr((mxc_gpio_reva_regs_t *)port, mask);
}
10011cae:	4770      	bx	lr
    MXC_GPIO_RevA_OutClr((mxc_gpio_reva_regs_t *)port, mask);
10011cb0:	f000 b918 	b.w	10011ee4 <MXC_GPIO_RevA_OutClr>
10011cb4:	40080600 	.word	0x40080600
10011cb8:	40006c00 	.word	0x40006c00

10011cbc <MXC_GPIO_Handler>:
}

/* ************************************************************************** */
void MXC_GPIO_Handler(unsigned int port)
{
    MXC_GPIO_Common_Handler(port);
10011cbc:	f000 be92 	b.w	100129e4 <MXC_GPIO_Common_Handler>

10011cc0 <MXC_GPIO_ClearFlags>:
}

/* ************************************************************************** */
void MXC_GPIO_ClearFlags(mxc_gpio_regs_t *port, uint32_t flags)
{
    if (port == MXC_GPIO3) {
10011cc0:	4a03      	ldr	r2, [pc, #12]	@ (10011cd0 <MXC_GPIO_ClearFlags+0x10>)
10011cc2:	4290      	cmp	r0, r2
10011cc4:	d102      	bne.n	10011ccc <MXC_GPIO_ClearFlags+0xc>
        MXC_PWRSEQ->lpwkst3 = flags;
10011cc6:	4a03      	ldr	r2, [pc, #12]	@ (10011cd4 <MXC_GPIO_ClearFlags+0x14>)
10011cc8:	61d1      	str	r1, [r2, #28]
        return;
    }

    MXC_GPIO_RevA_ClearFlags((mxc_gpio_reva_regs_t *)port, flags);
}
10011cca:	4770      	bx	lr
    MXC_GPIO_RevA_ClearFlags((mxc_gpio_reva_regs_t *)port, flags);
10011ccc:	f000 b90c 	b.w	10011ee8 <MXC_GPIO_RevA_ClearFlags>
10011cd0:	40080600 	.word	0x40080600
10011cd4:	40006800 	.word	0x40006800

10011cd8 <MXC_GPIO_GetFlags>:

/* ************************************************************************** */
uint32_t MXC_GPIO_GetFlags(mxc_gpio_regs_t *port)
{
    if (port == MXC_GPIO3) {
10011cd8:	4b03      	ldr	r3, [pc, #12]	@ (10011ce8 <MXC_GPIO_GetFlags+0x10>)
10011cda:	4298      	cmp	r0, r3
10011cdc:	d001      	beq.n	10011ce2 <MXC_GPIO_GetFlags+0xa>
        return MXC_PWRSEQ->lpwkst3;
    }

    return MXC_GPIO_RevA_GetFlags((mxc_gpio_reva_regs_t *)port);
10011cde:	f000 b905 	b.w	10011eec <MXC_GPIO_RevA_GetFlags>
        return MXC_PWRSEQ->lpwkst3;
10011ce2:	4b02      	ldr	r3, [pc, #8]	@ (10011cec <MXC_GPIO_GetFlags+0x14>)
10011ce4:	69d8      	ldr	r0, [r3, #28]
}
10011ce6:	4770      	bx	lr
10011ce8:	40080600 	.word	0x40080600
10011cec:	40006800 	.word	0x40006800

10011cf0 <MXC_GPIO_SetVSSEL>:

/* ************************************************************************** */
int MXC_GPIO_SetVSSEL(mxc_gpio_regs_t *port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
10011cf0:	b410      	push	{r4}
    if (port == MXC_GPIO3) {
10011cf2:	4c06      	ldr	r4, [pc, #24]	@ (10011d0c <MXC_GPIO_SetVSSEL+0x1c>)
10011cf4:	42a0      	cmp	r0, r4
10011cf6:	d002      	beq.n	10011cfe <MXC_GPIO_SetVSSEL+0xe>

        return E_NO_ERROR;
    }

    return MXC_GPIO_RevA_SetVSSEL((mxc_gpio_reva_regs_t *)port, vssel, mask);
}
10011cf8:	bc10      	pop	{r4}
    return MXC_GPIO_RevA_SetVSSEL((mxc_gpio_reva_regs_t *)port, vssel, mask);
10011cfa:	f000 b8f9 	b.w	10011ef0 <MXC_GPIO_RevA_SetVSSEL>
            return E_NOT_SUPPORTED;
10011cfe:	2900      	cmp	r1, #0
10011d00:	bf14      	ite	ne
10011d02:	2000      	movne	r0, #0
10011d04:	f06f 0010 	mvneq.w	r0, #16
}
10011d08:	bc10      	pop	{r4}
10011d0a:	4770      	bx	lr
10011d0c:	40080600 	.word	0x40080600

10011d10 <MXC_GPIO_Config>:
{
10011d10:	b570      	push	{r4, r5, r6, lr}
    port = MXC_GPIO_GET_IDX(cfg->port);
10011d12:	4b70      	ldr	r3, [pc, #448]	@ (10011ed4 <MXC_GPIO_Config+0x1c4>)
    mxc_gpio_regs_t *gpio = cfg->port;
10011d14:	6804      	ldr	r4, [r0, #0]
    port = MXC_GPIO_GET_IDX(cfg->port);
10011d16:	4e70      	ldr	r6, [pc, #448]	@ (10011ed8 <MXC_GPIO_Config+0x1c8>)
10011d18:	429c      	cmp	r4, r3
{
10011d1a:	4605      	mov	r5, r0
    port = MXC_GPIO_GET_IDX(cfg->port);
10011d1c:	d01e      	beq.n	10011d5c <MXC_GPIO_Config+0x4c>
10011d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10011d22:	429c      	cmp	r4, r3
10011d24:	d01c      	beq.n	10011d60 <MXC_GPIO_Config+0x50>
10011d26:	f503 23ee 	add.w	r3, r3, #487424	@ 0x77000
10011d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10011d2e:	429c      	cmp	r4, r3
10011d30:	d018      	beq.n	10011d64 <MXC_GPIO_Config+0x54>
10011d32:	42b4      	cmp	r4, r6
10011d34:	bf0c      	ite	eq
10011d36:	2303      	moveq	r3, #3
10011d38:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
    MXC_GPIO_Init(1 << port);
10011d3c:	2001      	movs	r0, #1
10011d3e:	4098      	lsls	r0, r3
10011d40:	f7ff ff7a 	bl	10011c38 <MXC_GPIO_Init>
    if (cfg->port == MXC_GPIO3) {
10011d44:	682b      	ldr	r3, [r5, #0]
10011d46:	7a29      	ldrb	r1, [r5, #8]
10011d48:	42b3      	cmp	r3, r6
10011d4a:	d17c      	bne.n	10011e46 <MXC_GPIO_Config+0x136>
        switch (cfg->func) {
10011d4c:	2901      	cmp	r1, #1
10011d4e:	d027      	beq.n	10011da0 <MXC_GPIO_Config+0x90>
10011d50:	2902      	cmp	r1, #2
10011d52:	d031      	beq.n	10011db8 <MXC_GPIO_Config+0xa8>
10011d54:	b141      	cbz	r1, 10011d68 <MXC_GPIO_Config+0x58>
            return E_NOT_SUPPORTED;
10011d56:	f06f 0010 	mvn.w	r0, #16
}
10011d5a:	bd70      	pop	{r4, r5, r6, pc}
    port = MXC_GPIO_GET_IDX(cfg->port);
10011d5c:	2300      	movs	r3, #0
10011d5e:	e7ed      	b.n	10011d3c <MXC_GPIO_Config+0x2c>
10011d60:	2301      	movs	r3, #1
10011d62:	e7eb      	b.n	10011d3c <MXC_GPIO_Config+0x2c>
10011d64:	2302      	movs	r3, #2
10011d66:	e7e9      	b.n	10011d3c <MXC_GPIO_Config+0x2c>
            MXC_MCR->gpio3_ctrl &= ~(P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask));
10011d68:	686b      	ldr	r3, [r5, #4]
10011d6a:	495c      	ldr	r1, [pc, #368]	@ (10011edc <MXC_GPIO_Config+0x1cc>)
10011d6c:	0058      	lsls	r0, r3, #1
10011d6e:	011a      	lsls	r2, r3, #4
10011d70:	6a0e      	ldr	r6, [r1, #32]
10011d72:	f000 0002 	and.w	r0, r0, #2
10011d76:	f002 0220 	and.w	r2, r2, #32
10011d7a:	4302      	orrs	r2, r0
10011d7c:	ea26 0202 	bic.w	r2, r6, r2
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
10011d80:	620a      	str	r2, [r1, #32]
            MXC_MCR->outen &= ~(SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask));
10011d82:	688a      	ldr	r2, [r1, #8]
10011d84:	f3c3 0340 	ubfx	r3, r3, #1, #1
10011d88:	4303      	orrs	r3, r0
10011d8a:	ea22 0303 	bic.w	r3, r2, r3
            MXC_MCR->outen |= SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask);
10011d8e:	608b      	str	r3, [r1, #8]
        switch (cfg->pad) {
10011d90:	7a6b      	ldrb	r3, [r5, #9]
10011d92:	2b04      	cmp	r3, #4
10011d94:	d8df      	bhi.n	10011d56 <MXC_GPIO_Config+0x46>
10011d96:	e8df f003 	tbb	[pc, r3]
10011d9a:	3421      	.short	0x3421
10011d9c:	344a      	.short	0x344a
10011d9e:	4a          	.byte	0x4a
10011d9f:	00          	.byte	0x00
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
10011da0:	686b      	ldr	r3, [r5, #4]
10011da2:	494e      	ldr	r1, [pc, #312]	@ (10011edc <MXC_GPIO_Config+0x1cc>)
10011da4:	0058      	lsls	r0, r3, #1
10011da6:	011a      	lsls	r2, r3, #4
10011da8:	6a0e      	ldr	r6, [r1, #32]
10011daa:	f000 0002 	and.w	r0, r0, #2
10011dae:	f002 0220 	and.w	r2, r2, #32
10011db2:	4302      	orrs	r2, r0
10011db4:	4332      	orrs	r2, r6
10011db6:	e7e3      	b.n	10011d80 <MXC_GPIO_Config+0x70>
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
10011db8:	686b      	ldr	r3, [r5, #4]
10011dba:	4948      	ldr	r1, [pc, #288]	@ (10011edc <MXC_GPIO_Config+0x1cc>)
10011dbc:	0058      	lsls	r0, r3, #1
10011dbe:	011a      	lsls	r2, r3, #4
10011dc0:	6a0e      	ldr	r6, [r1, #32]
10011dc2:	f000 0002 	and.w	r0, r0, #2
10011dc6:	f002 0220 	and.w	r2, r2, #32
10011dca:	4302      	orrs	r2, r0
10011dcc:	4332      	orrs	r2, r6
10011dce:	620a      	str	r2, [r1, #32]
            MXC_MCR->outen |= SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask);
10011dd0:	688a      	ldr	r2, [r1, #8]
10011dd2:	f3c3 0340 	ubfx	r3, r3, #1, #1
10011dd6:	4303      	orrs	r3, r0
10011dd8:	4313      	orrs	r3, r2
10011dda:	e7d8      	b.n	10011d8e <MXC_GPIO_Config+0x7e>
            MXC_MCR->gpio3_ctrl |= P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask);
10011ddc:	686a      	ldr	r2, [r5, #4]
10011dde:	493f      	ldr	r1, [pc, #252]	@ (10011edc <MXC_GPIO_Config+0x1cc>)
10011de0:	0093      	lsls	r3, r2, #2
10011de2:	0152      	lsls	r2, r2, #5
10011de4:	6a08      	ldr	r0, [r1, #32]
10011de6:	f003 0304 	and.w	r3, r3, #4
10011dea:	f002 0240 	and.w	r2, r2, #64	@ 0x40
10011dee:	4313      	orrs	r3, r2
10011df0:	4303      	orrs	r3, r0
            MXC_MCR->gpio3_ctrl &= ~(P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask));
10011df2:	620b      	str	r3, [r1, #32]
    return MXC_GPIO_SetVSSEL(gpio, cfg->vssel, cfg->mask);
10011df4:	686a      	ldr	r2, [r5, #4]
10011df6:	7aa9      	ldrb	r1, [r5, #10]
10011df8:	4620      	mov	r0, r4
}
10011dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_GPIO_SetVSSEL(gpio, cfg->vssel, cfg->mask);
10011dfe:	f7ff bf77 	b.w	10011cf0 <MXC_GPIO_SetVSSEL>
            MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask);
10011e02:	4936      	ldr	r1, [pc, #216]	@ (10011edc <MXC_GPIO_Config+0x1cc>)
10011e04:	686b      	ldr	r3, [r5, #4]
10011e06:	6a0e      	ldr	r6, [r1, #32]
10011e08:	00da      	lsls	r2, r3, #3
10011e0a:	f003 0001 	and.w	r0, r3, #1
10011e0e:	f002 0210 	and.w	r2, r2, #16
10011e12:	4330      	orrs	r0, r6
10011e14:	4302      	orrs	r2, r0
            MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask));
10011e16:	620a      	str	r2, [r1, #32]
            MXC_MCR->gpio3_ctrl &= ~(P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask));
10011e18:	009a      	lsls	r2, r3, #2
10011e1a:	015b      	lsls	r3, r3, #5
10011e1c:	6a08      	ldr	r0, [r1, #32]
10011e1e:	f002 0204 	and.w	r2, r2, #4
10011e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10011e26:	4313      	orrs	r3, r2
10011e28:	ea20 0303 	bic.w	r3, r0, r3
10011e2c:	e7e1      	b.n	10011df2 <MXC_GPIO_Config+0xe2>
            MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask));
10011e2e:	686b      	ldr	r3, [r5, #4]
10011e30:	492a      	ldr	r1, [pc, #168]	@ (10011edc <MXC_GPIO_Config+0x1cc>)
10011e32:	00da      	lsls	r2, r3, #3
10011e34:	6a08      	ldr	r0, [r1, #32]
10011e36:	f002 0210 	and.w	r2, r2, #16
10011e3a:	f003 0601 	and.w	r6, r3, #1
10011e3e:	4332      	orrs	r2, r6
10011e40:	ea20 0202 	bic.w	r2, r0, r2
10011e44:	e7e7      	b.n	10011e16 <MXC_GPIO_Config+0x106>
        error = MXC_GPIO_RevA_SetAF((mxc_gpio_reva_regs_t *)gpio, cfg->func, cfg->mask);
10011e46:	686a      	ldr	r2, [r5, #4]
10011e48:	4620      	mov	r0, r4
10011e4a:	f000 f863 	bl	10011f14 <MXC_GPIO_RevA_SetAF>
        if (error != E_NO_ERROR) {
10011e4e:	2800      	cmp	r0, #0
10011e50:	d183      	bne.n	10011d5a <MXC_GPIO_Config+0x4a>
        switch (cfg->pad) {
10011e52:	7a6b      	ldrb	r3, [r5, #9]
10011e54:	2b04      	cmp	r3, #4
10011e56:	d839      	bhi.n	10011ecc <MXC_GPIO_Config+0x1bc>
10011e58:	e8df f003 	tbb	[pc, r3]
10011e5c:	0d301c03 	.word	0x0d301c03
10011e60:	28          	.byte	0x28
10011e61:	00          	.byte	0x00
            gpio->padctrl0 &= ~cfg->mask;
10011e62:	6e23      	ldr	r3, [r4, #96]	@ 0x60
10011e64:	686a      	ldr	r2, [r5, #4]
10011e66:	ea23 0302 	bic.w	r3, r3, r2
10011e6a:	6623      	str	r3, [r4, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
10011e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10011e6e:	ea23 0302 	bic.w	r3, r3, r2
10011e72:	6663      	str	r3, [r4, #100]	@ 0x64
            break;
10011e74:	e7be      	b.n	10011df4 <MXC_GPIO_Config+0xe4>
            gpio->padctrl0 |= cfg->mask;
10011e76:	6e23      	ldr	r3, [r4, #96]	@ 0x60
10011e78:	686a      	ldr	r2, [r5, #4]
10011e7a:	4313      	orrs	r3, r2
10011e7c:	6623      	str	r3, [r4, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
10011e7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10011e80:	ea23 0302 	bic.w	r3, r3, r2
            gpio->padctrl1 |= cfg->mask;
10011e84:	6663      	str	r3, [r4, #100]	@ 0x64
            gpio->ps &= ~cfg->mask;
10011e86:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
10011e8a:	ea23 0302 	bic.w	r3, r3, r2
            gpio->ps |= cfg->mask;
10011e8e:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
            break;
10011e92:	e7af      	b.n	10011df4 <MXC_GPIO_Config+0xe4>
            gpio->padctrl0 |= cfg->mask;
10011e94:	6e22      	ldr	r2, [r4, #96]	@ 0x60
10011e96:	686b      	ldr	r3, [r5, #4]
10011e98:	431a      	orrs	r2, r3
10011e9a:	6622      	str	r2, [r4, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
10011e9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10011e9e:	ea22 0203 	bic.w	r2, r2, r3
            gpio->padctrl1 |= cfg->mask;
10011ea2:	6662      	str	r2, [r4, #100]	@ 0x64
            gpio->ps |= cfg->mask;
10011ea4:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
10011ea8:	4313      	orrs	r3, r2
10011eaa:	e7f0      	b.n	10011e8e <MXC_GPIO_Config+0x17e>
            gpio->padctrl0 &= ~cfg->mask;
10011eac:	6e23      	ldr	r3, [r4, #96]	@ 0x60
10011eae:	686a      	ldr	r2, [r5, #4]
10011eb0:	ea23 0302 	bic.w	r3, r3, r2
10011eb4:	6623      	str	r3, [r4, #96]	@ 0x60
            gpio->padctrl1 |= cfg->mask;
10011eb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10011eb8:	4313      	orrs	r3, r2
10011eba:	e7e3      	b.n	10011e84 <MXC_GPIO_Config+0x174>
            gpio->padctrl0 &= ~cfg->mask;
10011ebc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
10011ebe:	686b      	ldr	r3, [r5, #4]
10011ec0:	ea22 0203 	bic.w	r2, r2, r3
10011ec4:	6622      	str	r2, [r4, #96]	@ 0x60
            gpio->padctrl1 |= cfg->mask;
10011ec6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10011ec8:	431a      	orrs	r2, r3
10011eca:	e7ea      	b.n	10011ea2 <MXC_GPIO_Config+0x192>
        switch (cfg->pad) {
10011ecc:	f06f 0002 	mvn.w	r0, #2
10011ed0:	e743      	b.n	10011d5a <MXC_GPIO_Config+0x4a>
10011ed2:	bf00      	nop
10011ed4:	40008000 	.word	0x40008000
10011ed8:	40080600 	.word	0x40080600
10011edc:	40006c00 	.word	0x40006c00

10011ee0 <MXC_GPIO_RevA_OutSet>:
    return (port->in & mask);
}

void MXC_GPIO_RevA_OutSet(mxc_gpio_reva_regs_t *port, uint32_t mask)
{
    port->out_set = mask;
10011ee0:	61c1      	str	r1, [r0, #28]
}
10011ee2:	4770      	bx	lr

10011ee4 <MXC_GPIO_RevA_OutClr>:

void MXC_GPIO_RevA_OutClr(mxc_gpio_reva_regs_t *port, uint32_t mask)
{
    port->out_clr = mask;
10011ee4:	6201      	str	r1, [r0, #32]
}
10011ee6:	4770      	bx	lr

10011ee8 <MXC_GPIO_RevA_ClearFlags>:
    port->inten_clr = mask;
}

void MXC_GPIO_RevA_ClearFlags(mxc_gpio_reva_regs_t *port, uint32_t flags)
{
    port->intfl_clr = flags;
10011ee8:	6481      	str	r1, [r0, #72]	@ 0x48
}
10011eea:	4770      	bx	lr

10011eec <MXC_GPIO_RevA_GetFlags>:

uint32_t MXC_GPIO_RevA_GetFlags(mxc_gpio_reva_regs_t *port)
{
    return port->intfl;
10011eec:	6c00      	ldr	r0, [r0, #64]	@ 0x40
}
10011eee:	4770      	bx	lr

10011ef0 <MXC_GPIO_RevA_SetVSSEL>:

int MXC_GPIO_RevA_SetVSSEL(mxc_gpio_reva_regs_t *port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
    // Configure the vssel
    switch (vssel) {
10011ef0:	b121      	cbz	r1, 10011efc <MXC_GPIO_RevA_SetVSSEL+0xc>
10011ef2:	2901      	cmp	r1, #1
10011ef4:	d00a      	beq.n	10011f0c <MXC_GPIO_RevA_SetVSSEL+0x1c>
10011ef6:	f06f 0002 	mvn.w	r0, #2
10011efa:	4770      	bx	lr
    case MXC_GPIO_VSSEL_VDDIO:
        port->vssel &= ~mask;
10011efc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
10011f00:	ea23 0302 	bic.w	r3, r3, r2
10011f04:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0

    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011f08:	2000      	movs	r0, #0
}
10011f0a:	4770      	bx	lr
        port->vssel |= mask;
10011f0c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
10011f10:	4313      	orrs	r3, r2
10011f12:	e7f7      	b.n	10011f04 <MXC_GPIO_RevA_SetVSSEL+0x14>

10011f14 <MXC_GPIO_RevA_SetAF>:

int MXC_GPIO_RevA_SetAF(mxc_gpio_reva_regs_t *port, mxc_gpio_func_t func, uint32_t mask)
{
    //This is required for new devices going forward.
    port->inen |= mask;
10011f14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
10011f16:	4313      	orrs	r3, r2
10011f18:	6303      	str	r3, [r0, #48]	@ 0x30

    //Switch to I/O mode first
    port->en0_set = mask;
10011f1a:	6042      	str	r2, [r0, #4]

    switch (func) {
10011f1c:	2905      	cmp	r1, #5
10011f1e:	d821      	bhi.n	10011f64 <MXC_GPIO_RevA_SetAF+0x50>
10011f20:	e8df f001 	tbb	[pc, r1]
10011f24:	130d0b03 	.word	0x130d0b03
10011f28:	1c18      	.short	0x1c18
    case MXC_GPIO_FUNC_IN:
        port->outen_clr = mask;
10011f2a:	6142      	str	r2, [r0, #20]
        port->en0_set = mask;
10011f2c:	6042      	str	r2, [r0, #4]
        port->en1_clr = mask;
10011f2e:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en2_clr = mask;
10011f30:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en3_clr = mask;
10011f32:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
#endif
    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10011f36:	2000      	movs	r0, #0
10011f38:	4770      	bx	lr
        port->outen_set = mask;
10011f3a:	6102      	str	r2, [r0, #16]
        port->en0_set = mask;
10011f3c:	e7f6      	b.n	10011f2c <MXC_GPIO_RevA_SetAF+0x18>
        port->en3_clr = mask;
10011f3e:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_clr = mask;
10011f42:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en1_clr = mask;
10011f44:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en0_clr = mask;
10011f46:	6082      	str	r2, [r0, #8]
        break;
10011f48:	e7f5      	b.n	10011f36 <MXC_GPIO_RevA_SetAF+0x22>
        port->en3_clr = mask;
10011f4a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_clr = mask;
10011f4e:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en1_set = mask;
10011f50:	66c2      	str	r2, [r0, #108]	@ 0x6c
10011f52:	e7f8      	b.n	10011f46 <MXC_GPIO_RevA_SetAF+0x32>
        port->en3_clr = mask;
10011f54:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_set = mask;
10011f58:	6782      	str	r2, [r0, #120]	@ 0x78
10011f5a:	e7f3      	b.n	10011f44 <MXC_GPIO_RevA_SetAF+0x30>
        port->en3_clr = mask;
10011f5c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_set = mask;
10011f60:	6782      	str	r2, [r0, #120]	@ 0x78
10011f62:	e7f5      	b.n	10011f50 <MXC_GPIO_RevA_SetAF+0x3c>
    switch (func) {
10011f64:	f06f 0002 	mvn.w	r0, #2
}
10011f68:	4770      	bx	lr

10011f6a <MXC_I2C_SetSlaveAddr>:
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
}

int MXC_I2C_SetSlaveAddr(mxc_i2c_regs_t *i2c, unsigned int slaveAddr, int idx)
{
    return MXC_I2C_RevA_SetSlaveAddr((mxc_i2c_reva_regs_t *)i2c, slaveAddr, idx);
10011f6a:	f000 b8df 	b.w	1001212c <MXC_I2C_RevA_SetSlaveAddr>
	...

10011f70 <MXC_I2C_Shutdown>:
}

int MXC_I2C_Shutdown(mxc_i2c_regs_t *i2c)
{
10011f70:	b508      	push	{r3, lr}
    // Configure GPIO for I2C
    if (i2c == MXC_I2C0) {
10011f72:	4b0f      	ldr	r3, [pc, #60]	@ (10011fb0 <MXC_I2C_Shutdown+0x40>)
10011f74:	4298      	cmp	r0, r3
10011f76:	d107      	bne.n	10011f88 <MXC_I2C_Shutdown+0x18>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C0);
10011f78:	200d      	movs	r0, #13
10011f7a:	f7ff f92b 	bl	100111d4 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_I2C0);
10011f7e:	2010      	movs	r0, #16
10011f80:	f7ff f9ba 	bl	100112f8 <MXC_SYS_Reset_Periph>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C2);
    } else {
        return E_NO_DEVICE;
    }

    return E_NO_ERROR;
10011f84:	2000      	movs	r0, #0
}
10011f86:	bd08      	pop	{r3, pc}
    } else if (i2c == MXC_I2C1) {
10011f88:	4b0a      	ldr	r3, [pc, #40]	@ (10011fb4 <MXC_I2C_Shutdown+0x44>)
10011f8a:	4298      	cmp	r0, r3
10011f8c:	d104      	bne.n	10011f98 <MXC_I2C_Shutdown+0x28>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C1);
10011f8e:	201c      	movs	r0, #28
10011f90:	f7ff f920 	bl	100111d4 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C1);
10011f94:	2020      	movs	r0, #32
10011f96:	e7f3      	b.n	10011f80 <MXC_I2C_Shutdown+0x10>
    } else if (i2c == MXC_I2C2) {
10011f98:	4b07      	ldr	r3, [pc, #28]	@ (10011fb8 <MXC_I2C_Shutdown+0x48>)
10011f9a:	4298      	cmp	r0, r3
10011f9c:	d104      	bne.n	10011fa8 <MXC_I2C_Shutdown+0x38>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C2);
10011f9e:	2038      	movs	r0, #56	@ 0x38
10011fa0:	f7ff f918 	bl	100111d4 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C2);
10011fa4:	2034      	movs	r0, #52	@ 0x34
10011fa6:	e7eb      	b.n	10011f80 <MXC_I2C_Shutdown+0x10>
        return E_NO_DEVICE;
10011fa8:	f06f 0001 	mvn.w	r0, #1
10011fac:	e7eb      	b.n	10011f86 <MXC_I2C_Shutdown+0x16>
10011fae:	bf00      	nop
10011fb0:	4001d000 	.word	0x4001d000
10011fb4:	4001e000 	.word	0x4001e000
10011fb8:	4001f000 	.word	0x4001f000

10011fbc <MXC_I2C_Init>:
{
10011fbc:	b570      	push	{r4, r5, r6, lr}
10011fbe:	460d      	mov	r5, r1
10011fc0:	4616      	mov	r6, r2
    if (i2c == NULL) {
10011fc2:	4604      	mov	r4, r0
10011fc4:	b308      	cbz	r0, 1001200a <MXC_I2C_Init+0x4e>
    MXC_I2C_Shutdown(i2c); // Clear everything out
10011fc6:	f7ff ffd3 	bl	10011f70 <MXC_I2C_Shutdown>
    if (i2c == MXC_I2C0) {
10011fca:	4b13      	ldr	r3, [pc, #76]	@ (10012018 <MXC_I2C_Init+0x5c>)
10011fcc:	429c      	cmp	r4, r3
10011fce:	d10c      	bne.n	10011fea <MXC_I2C_Init+0x2e>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C0);
10011fd0:	200d      	movs	r0, #13
10011fd2:	f7ff f91f 	bl	10011214 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c0);
10011fd6:	4811      	ldr	r0, [pc, #68]	@ (1001201c <MXC_I2C_Init+0x60>)
        MXC_GPIO_Config(&gpio_cfg_i2c2);
10011fd8:	f7ff fe9a 	bl	10011d10 <MXC_GPIO_Config>
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
10011fdc:	4632      	mov	r2, r6
10011fde:	4629      	mov	r1, r5
10011fe0:	4620      	mov	r0, r4
}
10011fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
10011fe6:	f000 b83f 	b.w	10012068 <MXC_I2C_RevA_Init>
    } else if (i2c == MXC_I2C1) {
10011fea:	4b0d      	ldr	r3, [pc, #52]	@ (10012020 <MXC_I2C_Init+0x64>)
10011fec:	429c      	cmp	r4, r3
10011fee:	d104      	bne.n	10011ffa <MXC_I2C_Init+0x3e>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C1);
10011ff0:	201c      	movs	r0, #28
10011ff2:	f7ff f90f 	bl	10011214 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c1);
10011ff6:	480b      	ldr	r0, [pc, #44]	@ (10012024 <MXC_I2C_Init+0x68>)
10011ff8:	e7ee      	b.n	10011fd8 <MXC_I2C_Init+0x1c>
    } else if (i2c == MXC_I2C2) {
10011ffa:	4b0b      	ldr	r3, [pc, #44]	@ (10012028 <MXC_I2C_Init+0x6c>)
10011ffc:	429c      	cmp	r4, r3
10011ffe:	d107      	bne.n	10012010 <MXC_I2C_Init+0x54>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C2);
10012000:	2038      	movs	r0, #56	@ 0x38
10012002:	f7ff f907 	bl	10011214 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c2);
10012006:	4809      	ldr	r0, [pc, #36]	@ (1001202c <MXC_I2C_Init+0x70>)
10012008:	e7e6      	b.n	10011fd8 <MXC_I2C_Init+0x1c>
        return E_NULL_PTR;
1001200a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1001200e:	bd70      	pop	{r4, r5, r6, pc}
        return E_NO_DEVICE;
10012010:	f06f 0001 	mvn.w	r0, #1
10012014:	e7fb      	b.n	1001200e <MXC_I2C_Init+0x52>
10012016:	bf00      	nop
10012018:	4001d000 	.word	0x4001d000
1001201c:	10023a10 	.word	0x10023a10
10012020:	4001e000 	.word	0x4001e000
10012024:	10023a04 	.word	0x10023a04
10012028:	4001f000 	.word	0x4001f000
1001202c:	100239f8 	.word	0x100239f8

10012030 <MXC_I2C_SetFrequency>:
    return E_NO_ERROR;
}

int MXC_I2C_SetFrequency(mxc_i2c_regs_t *i2c, unsigned int hz)
{
    return MXC_I2C_RevA_SetFrequency((mxc_i2c_reva_regs_t *)i2c, hz);
10012030:	f000 b896 	b.w	10012160 <MXC_I2C_RevA_SetFrequency>

10012034 <MXC_I2C_GetFrequency>:
}

int MXC_I2C_GetFrequency(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_GetFrequency((mxc_i2c_reva_regs_t *)i2c);
10012034:	f000 b8dc 	b.w	100121f0 <MXC_I2C_RevA_GetFrequency>

10012038 <MXC_I2C_ReadRXFIFO>:
    return MXC_I2C_RevA_Read((mxc_i2c_reva_regs_t *)i2c, bytes, len, ack);
}

int MXC_I2C_ReadRXFIFO(mxc_i2c_regs_t *i2c, volatile unsigned char *bytes, unsigned int len)
{
    return MXC_I2C_RevA_ReadRXFIFO((mxc_i2c_reva_regs_t *)i2c, bytes, len);
10012038:	f000 b8ea 	b.w	10012210 <MXC_I2C_RevA_ReadRXFIFO>

1001203c <MXC_I2C_GetRXFIFOAvailable>:
                                      (mxc_i2c_reva_dma_complete_cb_t)callback, config, MXC_DMA);
}

int MXC_I2C_GetRXFIFOAvailable(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_GetRXFIFOAvailable((mxc_i2c_reva_regs_t *)i2c);
1001203c:	f000 b8fb 	b.w	10012236 <MXC_I2C_RevA_GetRXFIFOAvailable>

10012040 <MXC_I2C_WriteTXFIFO>:
}

int MXC_I2C_WriteTXFIFO(mxc_i2c_regs_t *i2c, volatile unsigned char *bytes, unsigned int len)
{
    return MXC_I2C_RevA_WriteTXFIFO((mxc_i2c_reva_regs_t *)i2c, bytes, len);
10012040:	f000 b901 	b.w	10012246 <MXC_I2C_RevA_WriteTXFIFO>

10012044 <MXC_I2C_GetTXFIFOAvailable>:
                                       (mxc_i2c_reva_dma_complete_cb_t)callback, config, MXC_DMA);
}

int MXC_I2C_GetTXFIFOAvailable(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_GetTXFIFOAvailable((mxc_i2c_reva_regs_t *)i2c);
10012044:	f000 b912 	b.w	1001226c <MXC_I2C_RevA_GetTXFIFOAvailable>

10012048 <MXC_I2C_ClearRXFIFO>:
}

void MXC_I2C_ClearRXFIFO(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_ClearRXFIFO((mxc_i2c_reva_regs_t *)i2c);
10012048:	f000 b91c 	b.w	10012284 <MXC_I2C_RevA_ClearRXFIFO>

1001204c <MXC_I2C_ClearTXFIFO>:
}

void MXC_I2C_ClearTXFIFO(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_ClearTXFIFO((mxc_i2c_reva_regs_t *)i2c);
1001204c:	f000 b922 	b.w	10012294 <MXC_I2C_RevA_ClearTXFIFO>

10012050 <MXC_I2C_ClearFlags>:
    return MXC_I2C_RevA_GetFlags((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
}

void MXC_I2C_ClearFlags(mxc_i2c_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    MXC_I2C_RevA_ClearFlags((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
10012050:	f000 b928 	b.w	100122a4 <MXC_I2C_RevA_ClearFlags>

10012054 <MXC_I2C_EnableInt>:
}

void MXC_I2C_EnableInt(mxc_i2c_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    MXC_I2C_RevA_EnableInt((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
10012054:	f000 b929 	b.w	100122aa <MXC_I2C_RevA_EnableInt>

10012058 <MXC_I2C_DisableInt>:
}

void MXC_I2C_DisableInt(mxc_i2c_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    MXC_I2C_RevA_DisableInt((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
10012058:	f000 b92e 	b.w	100122b8 <MXC_I2C_RevA_DisableInt>

1001205c <MXC_I2C_Recover>:
    return MXC_I2C_RevA_GetTimeout((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_Recover(mxc_i2c_regs_t *i2c, unsigned int retries)
{
    return MXC_I2C_RevA_Recover((mxc_i2c_reva_regs_t *)i2c, retries);
1001205c:	f000 b935 	b.w	100122ca <MXC_I2C_RevA_Recover>

10012060 <MXC_I2C_SetRXThreshold>:
        (mxc_i2c_reva_regs_t *)i2c, (mxc_i2c_reva_slave_handler_t)callback, interruptCheck);
}

int MXC_I2C_SetRXThreshold(mxc_i2c_regs_t *i2c, unsigned int numBytes)
{
    return MXC_I2C_RevA_SetRXThreshold((mxc_i2c_reva_regs_t *)i2c, numBytes);
10012060:	f000 b996 	b.w	10012390 <MXC_I2C_RevA_SetRXThreshold>

10012064 <MXC_I2C_SetTXThreshold>:
    return MXC_I2C_RevA_GetRXThreshold((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_SetTXThreshold(mxc_i2c_regs_t *i2c, unsigned int numBytes)
{
    return MXC_I2C_RevA_SetTXThreshold((mxc_i2c_reva_regs_t *)i2c, numBytes);
10012064:	f000 b9a3 	b.w	100123ae <MXC_I2C_RevA_SetTXThreshold>

10012068 <MXC_I2C_RevA_Init>:

/* ************************************************************************* */
/* Control/Configuration functions                                           */
/* ************************************************************************* */
int MXC_I2C_RevA_Init(mxc_i2c_reva_regs_t *i2c, int masterMode, unsigned int slaveAddr)
{
10012068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001206c:	460d      	mov	r5, r1
1001206e:	4690      	mov	r8, r2
    int err;

    if (i2c == NULL) {
10012070:	4604      	mov	r4, r0
10012072:	2800      	cmp	r0, #0
10012074:	d04e      	beq.n	10012114 <MXC_I2C_RevA_Init+0xac>
        return E_NULL_PTR;
    }

    if ((err = MXC_I2C_Recover((mxc_i2c_regs_t *)i2c, 16)) != E_NO_ERROR) {
10012076:	2110      	movs	r1, #16
10012078:	f7ff fff0 	bl	1001205c <MXC_I2C_Recover>
1001207c:	4606      	mov	r6, r0
1001207e:	bb50      	cbnz	r0, 100120d6 <MXC_I2C_RevA_Init+0x6e>
        return err;
    }

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_EN;
10012080:	6823      	ldr	r3, [r4, #0]
10012082:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 1001211c <MXC_I2C_RevA_Init+0xb4>
10012086:	4f26      	ldr	r7, [pc, #152]	@ (10012120 <MXC_I2C_RevA_Init+0xb8>)
10012088:	f043 0301 	orr.w	r3, r3, #1
1001208c:	6023      	str	r3, [r4, #0]

    MXC_I2C_ClearRXFIFO((mxc_i2c_regs_t *)i2c);
1001208e:	4620      	mov	r0, r4
10012090:	f7ff ffda 	bl	10012048 <MXC_I2C_ClearRXFIFO>
    MXC_I2C_ClearTXFIFO((mxc_i2c_regs_t *)i2c);
10012094:	4620      	mov	r0, r4
10012096:	f7ff ffd9 	bl	1001204c <MXC_I2C_ClearTXFIFO>
    // Set the thresholds here and allow the user to change them as needed
    MXC_I2C_SetTXThreshold((mxc_i2c_regs_t *)i2c, 2); // set TX threshold to 2 bytes
1001209a:	2102      	movs	r1, #2
1001209c:	4620      	mov	r0, r4
1001209e:	f7ff ffe1 	bl	10012064 <MXC_I2C_SetTXThreshold>
    MXC_I2C_SetRXThreshold((mxc_i2c_regs_t *)i2c, 6); // set RX threshold to 6 bytes
100120a2:	2106      	movs	r1, #6
100120a4:	4620      	mov	r0, r4
100120a6:	f7ff ffdb 	bl	10012060 <MXC_I2C_SetRXThreshold>

    if (!masterMode) {
100120aa:	b9cd      	cbnz	r5, 100120e0 <MXC_I2C_RevA_Init+0x78>
        MXC_I2C_SetSlaveAddr((mxc_i2c_regs_t *)i2c, slaveAddr, 0);
100120ac:	462a      	mov	r2, r5
100120ae:	4641      	mov	r1, r8
100120b0:	4620      	mov	r0, r4
100120b2:	f7ff ff5a 	bl	10011f6a <MXC_I2C_SetSlaveAddr>
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 0;
100120b6:	454c      	cmp	r4, r9
100120b8:	d008      	beq.n	100120cc <MXC_I2C_RevA_Init+0x64>
100120ba:	4b1a      	ldr	r3, [pc, #104]	@ (10012124 <MXC_I2C_RevA_Init+0xbc>)
100120bc:	429c      	cmp	r4, r3
100120be:	d00d      	beq.n	100120dc <MXC_I2C_RevA_Init+0x74>
100120c0:	4d19      	ldr	r5, [pc, #100]	@ (10012128 <MXC_I2C_RevA_Init+0xc0>)
100120c2:	42ac      	cmp	r4, r5
100120c4:	bf14      	ite	ne
100120c6:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
100120ca:	2502      	moveq	r5, #2
100120cc:	2318      	movs	r3, #24
100120ce:	fb03 7505 	mla	r5, r3, r5, r7
100120d2:	2300      	movs	r3, #0
100120d4:	606b      	str	r3, [r5, #4]
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
    }

    return E_NO_ERROR;
}
100120d6:	4630      	mov	r0, r6
100120d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 0;
100120dc:	2501      	movs	r5, #1
100120de:	e7f5      	b.n	100120cc <MXC_I2C_RevA_Init+0x64>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
100120e0:	6823      	ldr	r3, [r4, #0]
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
100120e2:	454c      	cmp	r4, r9
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
100120e4:	f043 0302 	orr.w	r3, r3, #2
100120e8:	6023      	str	r3, [r4, #0]
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
100120ea:	d00f      	beq.n	1001210c <MXC_I2C_RevA_Init+0xa4>
100120ec:	4b0d      	ldr	r3, [pc, #52]	@ (10012124 <MXC_I2C_RevA_Init+0xbc>)
100120ee:	429c      	cmp	r4, r3
100120f0:	d00e      	beq.n	10012110 <MXC_I2C_RevA_Init+0xa8>
100120f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100120f6:	429c      	cmp	r4, r3
100120f8:	bf14      	ite	ne
100120fa:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
100120fe:	2402      	moveq	r4, #2
10012100:	2318      	movs	r3, #24
10012102:	fb03 7704 	mla	r7, r3, r4, r7
10012106:	2301      	movs	r3, #1
10012108:	607b      	str	r3, [r7, #4]
1001210a:	e7e4      	b.n	100120d6 <MXC_I2C_RevA_Init+0x6e>
1001210c:	4634      	mov	r4, r6
1001210e:	e7f7      	b.n	10012100 <MXC_I2C_RevA_Init+0x98>
10012110:	2401      	movs	r4, #1
10012112:	e7f5      	b.n	10012100 <MXC_I2C_RevA_Init+0x98>
        return E_NULL_PTR;
10012114:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
10012118:	e7dd      	b.n	100120d6 <MXC_I2C_RevA_Init+0x6e>
1001211a:	bf00      	nop
1001211c:	4001d000 	.word	0x4001d000
10012120:	20001138 	.word	0x20001138
10012124:	4001e000 	.word	0x4001e000
10012128:	4001f000 	.word	0x4001f000

1001212c <MXC_I2C_RevA_SetSlaveAddr>:

int MXC_I2C_RevA_SetSlaveAddr(mxc_i2c_reva_regs_t *i2c, unsigned int slaveAddr, int idx)
{
    if (i2c == NULL) {
1001212c:	b178      	cbz	r0, 1001214e <MXC_I2C_RevA_SetSlaveAddr+0x22>
        return E_NULL_PTR;
    }

    if (idx != 0) {
1001212e:	b98a      	cbnz	r2, 10012154 <MXC_I2C_RevA_SetSlaveAddr+0x28>
        // Multiple slaves are not supported yet
        return E_NOT_SUPPORTED;
    }

    if (slaveAddr > MXC_F_I2C_REVA_SLAVE_ADDR) {
10012130:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
10012134:	d211      	bcs.n	1001215a <MXC_I2C_RevA_SetSlaveAddr+0x2e>
        return E_BAD_PARAM;
    }

    i2c->slave = 0;

    if (slaveAddr > MXC_I2C_REVA_MAX_ADDR_WIDTH) {
10012136:	297f      	cmp	r1, #127	@ 0x7f
        // Set for 10bit addressing mode
        i2c->slave = MXC_F_I2C_REVA_SLAVE_EXT_ADDR_EN;
10012138:	bf88      	it	hi
1001213a:	f44f 4300 	movhi.w	r3, #32768	@ 0x8000
    i2c->slave = 0;
1001213e:	64c2      	str	r2, [r0, #76]	@ 0x4c
        i2c->slave = MXC_F_I2C_REVA_SLAVE_EXT_ADDR_EN;
10012140:	bf88      	it	hi
10012142:	64c3      	strhi	r3, [r0, #76]	@ 0x4c
    }

    i2c->slave |= slaveAddr;
10012144:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
10012146:	430b      	orrs	r3, r1
10012148:	64c3      	str	r3, [r0, #76]	@ 0x4c

    return E_NO_ERROR;
}
1001214a:	4610      	mov	r0, r2
1001214c:	4770      	bx	lr
        return E_NULL_PTR;
1001214e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10012152:	e7fa      	b.n	1001214a <MXC_I2C_RevA_SetSlaveAddr+0x1e>
        return E_NOT_SUPPORTED;
10012154:	f06f 0210 	mvn.w	r2, #16
10012158:	e7f7      	b.n	1001214a <MXC_I2C_RevA_SetSlaveAddr+0x1e>
        return E_BAD_PARAM;
1001215a:	f06f 0202 	mvn.w	r2, #2
1001215e:	e7f4      	b.n	1001214a <MXC_I2C_RevA_SetSlaveAddr+0x1e>

10012160 <MXC_I2C_RevA_SetFrequency>:

int MXC_I2C_RevA_SetFrequency(mxc_i2c_reva_regs_t *i2c, unsigned int hz)
{
    unsigned int ticksTotal, hiClks, lowClks;

    if (i2c == NULL) {
10012160:	2800      	cmp	r0, #0
10012162:	d039      	beq.n	100121d8 <MXC_I2C_RevA_SetFrequency+0x78>
        return E_NULL_PTR;
    }

    if (hz > MXC_I2C_REVA_FASTPLUS_SPEED && hz <= MXC_I2C_REVA_HIGH_SPEED) {
10012164:	f46f 7210 	mvn.w	r2, #576	@ 0x240
10012168:	f5a1 2374 	sub.w	r3, r1, #999424	@ 0xf4000
1001216c:	4413      	add	r3, r2
1001216e:	4a1c      	ldr	r2, [pc, #112]	@ (100121e0 <MXC_I2C_RevA_SetFrequency+0x80>)
10012170:	4293      	cmp	r3, r2
10012172:	d22d      	bcs.n	100121d0 <MXC_I2C_RevA_SetFrequency+0x70>
        // Enable high speed mode
        int hsLowClks, hsHiClks;

        // Calculate the period of SCL and set up 33% duty cycle
        ticksTotal = PeripheralClock / hz;
10012174:	4b1b      	ldr	r3, [pc, #108]	@ (100121e4 <MXC_I2C_RevA_SetFrequency+0x84>)
10012176:	681b      	ldr	r3, [r3, #0]
10012178:	085b      	lsrs	r3, r3, #1
1001217a:	fbb3 f1f1 	udiv	r1, r3, r1
        hsLowClks = (ticksTotal * 2) / 3 - 1;
1001217e:	2303      	movs	r3, #3
10012180:	004a      	lsls	r2, r1, #1
10012182:	fbb2 f2f3 	udiv	r2, r2, r3
        hsHiClks = ticksTotal / 3 - 1;
10012186:	fbb1 f3f3 	udiv	r3, r1, r3
1001218a:	3b01      	subs	r3, #1
        if (ticksTotal % 1) {
            hsHiClks++;
        }

        // If we're too slow for high speed, bail out
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
1001218c:	2b0f      	cmp	r3, #15
        hsLowClks = (ticksTotal * 2) / 3 - 1;
1001218e:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
10012192:	dd02      	ble.n	1001219a <MXC_I2C_RevA_SetFrequency+0x3a>
            return E_BAD_PARAM;
10012194:	f06f 0002 	mvn.w	r0, #2
10012198:	4770      	bx	lr
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
1001219a:	2a0f      	cmp	r2, #15
1001219c:	dcfa      	bgt.n	10012194 <MXC_I2C_RevA_SetFrequency+0x34>
        }

        hsLowClks = (hsLowClks << MXC_F_I2C_REVA_HSCLK_LO_POS) & MXC_F_I2C_REVA_HSCLK_LO;
        hsHiClks = (hsHiClks << MXC_F_I2C_REVA_HSCLK_HI_POS) & MXC_F_I2C_REVA_HSCLK_HI;
1001219e:	021b      	lsls	r3, r3, #8
100121a0:	b29b      	uxth	r3, r3

        i2c->hsclk = (hsLowClks | hsHiClks);
100121a2:	b2d2      	uxtb	r2, r2
100121a4:	431a      	orrs	r2, r3
100121a6:	63c2      	str	r2, [r0, #60]	@ 0x3c

        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_HS_EN;
100121a8:	6803      	ldr	r3, [r0, #0]

        hz = MXC_I2C_REVA_FAST_SPEED; // High speed preambles will be sent at 400kHz
100121aa:	490f      	ldr	r1, [pc, #60]	@ (100121e8 <MXC_I2C_RevA_SetFrequency+0x88>)
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_HS_EN;
100121ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
100121b0:	6003      	str	r3, [r0, #0]
    } else if (hz > MXC_I2C_REVA_HIGH_SPEED) {
        return E_BAD_PARAM;
    }

    // Calculate the period of SCL, 50% duty cycle
    ticksTotal = PeripheralClock / hz;
100121b2:	4b0c      	ldr	r3, [pc, #48]	@ (100121e4 <MXC_I2C_RevA_SetFrequency+0x84>)
100121b4:	681b      	ldr	r3, [r3, #0]
100121b6:	085b      	lsrs	r3, r3, #1
100121b8:	fbb3 f3f1 	udiv	r3, r3, r1
    hiClks = (ticksTotal >> 1) - 1;
100121bc:	085b      	lsrs	r3, r3, #1
100121be:	1e5a      	subs	r2, r3, #1
    if (ticksTotal % 1) {
        hiClks++;
    }

    // Check for maximum/minimum supported speeds
    if ((hiClks > MXC_F_I2C_REVA_CLKHI_HI) || (lowClks == 0)) {
100121c0:	3b02      	subs	r3, #2
100121c2:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
100121c6:	d8e5      	bhi.n	10012194 <MXC_I2C_RevA_SetFrequency+0x34>
        return E_BAD_PARAM;
    }

    i2c->clklo = lowClks & MXC_F_I2C_REVA_CLKLO_LO;
100121c8:	6342      	str	r2, [r0, #52]	@ 0x34
    i2c->clkhi = hiClks & MXC_F_I2C_REVA_CLKHI_HI;
100121ca:	6382      	str	r2, [r0, #56]	@ 0x38

    // Return the actual speed set, since it won't be exactly what's requested
    return MXC_I2C_GetFrequency((mxc_i2c_regs_t *)i2c);
100121cc:	f7ff bf32 	b.w	10012034 <MXC_I2C_GetFrequency>
    } else if (hz > MXC_I2C_REVA_HIGH_SPEED) {
100121d0:	4b06      	ldr	r3, [pc, #24]	@ (100121ec <MXC_I2C_RevA_SetFrequency+0x8c>)
100121d2:	4299      	cmp	r1, r3
100121d4:	d9ed      	bls.n	100121b2 <MXC_I2C_RevA_SetFrequency+0x52>
100121d6:	e7dd      	b.n	10012194 <MXC_I2C_RevA_SetFrequency+0x34>
        return E_NULL_PTR;
100121d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
100121dc:	4770      	bx	lr
100121de:	bf00      	nop
100121e0:	00249f00 	.word	0x00249f00
100121e4:	20001898 	.word	0x20001898
100121e8:	00061a80 	.word	0x00061a80
100121ec:	0033e140 	.word	0x0033e140

100121f0 <MXC_I2C_RevA_GetFrequency>:
    unsigned int sclCycles = 0;

    // Calculate the speed based on what we've written into registers
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);

    return PeripheralClock / sclCycles;
100121f0:	4906      	ldr	r1, [pc, #24]	@ (1001220c <MXC_I2C_RevA_GetFrequency+0x1c>)
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);
100121f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
100121f4:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    return PeripheralClock / sclCycles;
100121f6:	6808      	ldr	r0, [r1, #0]
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);
100121f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
100121fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
10012200:	4413      	add	r3, r2
    return PeripheralClock / sclCycles;
10012202:	0840      	lsrs	r0, r0, #1
}
10012204:	fbb0 f0f3 	udiv	r0, r0, r3
10012208:	4770      	bx	lr
1001220a:	bf00      	nop
1001220c:	20001898 	.word	0x20001898

10012210 <MXC_I2C_RevA_ReadRXFIFO>:
    return MXC_I2C_ReadByte((mxc_i2c_regs_t *)i2c, &(bytes[read]), ack);
}

int MXC_I2C_RevA_ReadRXFIFO(mxc_i2c_reva_regs_t *i2c, volatile unsigned char *bytes,
                            unsigned int len)
{
10012210:	b510      	push	{r4, lr}
    unsigned read = 0;

    if ((i2c == NULL) || (bytes == NULL)) {
10012212:	b168      	cbz	r0, 10012230 <MXC_I2C_RevA_ReadRXFIFO+0x20>
10012214:	b161      	cbz	r1, 10012230 <MXC_I2C_RevA_ReadRXFIFO+0x20>
10012216:	2300      	movs	r3, #0
        return E_NULL_PTR;
    }

    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10012218:	429a      	cmp	r2, r3
1001221a:	d101      	bne.n	10012220 <MXC_I2C_RevA_ReadRXFIFO+0x10>
        bytes[read++] = i2c->fifo;
    }

    return read;
1001221c:	4618      	mov	r0, r3
}
1001221e:	bd10      	pop	{r4, pc}
    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10012220:	6844      	ldr	r4, [r0, #4]
10012222:	07a4      	lsls	r4, r4, #30
10012224:	d4fa      	bmi.n	1001221c <MXC_I2C_RevA_ReadRXFIFO+0xc>
        bytes[read++] = i2c->fifo;
10012226:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
10012228:	b2e4      	uxtb	r4, r4
1001222a:	54cc      	strb	r4, [r1, r3]
1001222c:	3301      	adds	r3, #1
1001222e:	e7f3      	b.n	10012218 <MXC_I2C_RevA_ReadRXFIFO+0x8>
        return E_NULL_PTR;
10012230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10012234:	e7f3      	b.n	1001221e <MXC_I2C_RevA_ReadRXFIFO+0xe>

10012236 <MXC_I2C_RevA_GetRXFIFOAvailable>:
    return E_NO_ERROR;
}

int MXC_I2C_RevA_GetRXFIFOAvailable(mxc_i2c_reva_regs_t *i2c)
{
    if (i2c == NULL) {
10012236:	b118      	cbz	r0, 10012240 <MXC_I2C_RevA_GetRXFIFOAvailable+0xa>
        return E_NULL_PTR;
    }

    return (i2c->rxctrl1 & MXC_F_I2C_REVA_RXCTRL1_LVL) >> MXC_F_I2C_REVA_RXCTRL1_LVL_POS;
10012238:	6a00      	ldr	r0, [r0, #32]
1001223a:	f3c0 2003 	ubfx	r0, r0, #8, #4
1001223e:	4770      	bx	lr
        return E_NULL_PTR;
10012240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10012244:	4770      	bx	lr

10012246 <MXC_I2C_RevA_WriteTXFIFO>:

int MXC_I2C_RevA_WriteTXFIFO(mxc_i2c_reva_regs_t *i2c, volatile unsigned char *bytes,
                             unsigned int len)
{
10012246:	b510      	push	{r4, lr}
    unsigned written = 0;

    if ((i2c == NULL) || (bytes == NULL)) {
10012248:	b168      	cbz	r0, 10012266 <MXC_I2C_RevA_WriteTXFIFO+0x20>
1001224a:	b161      	cbz	r1, 10012266 <MXC_I2C_RevA_WriteTXFIFO+0x20>
1001224c:	2300      	movs	r3, #0
        return E_NULL_PTR;
    }

    while ((len > written) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
1001224e:	429a      	cmp	r2, r3
10012250:	d101      	bne.n	10012256 <MXC_I2C_RevA_WriteTXFIFO+0x10>
        i2c->fifo = bytes[written++];
    }

    return written;
10012252:	4618      	mov	r0, r3
}
10012254:	bd10      	pop	{r4, pc}
    while ((len > written) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
10012256:	6844      	ldr	r4, [r0, #4]
10012258:	06e4      	lsls	r4, r4, #27
1001225a:	d4fa      	bmi.n	10012252 <MXC_I2C_RevA_WriteTXFIFO+0xc>
        i2c->fifo = bytes[written++];
1001225c:	5ccc      	ldrb	r4, [r1, r3]
1001225e:	b2e4      	uxtb	r4, r4
10012260:	62c4      	str	r4, [r0, #44]	@ 0x2c
10012262:	3301      	adds	r3, #1
10012264:	e7f3      	b.n	1001224e <MXC_I2C_RevA_WriteTXFIFO+0x8>
        return E_NULL_PTR;
10012266:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001226a:	e7f3      	b.n	10012254 <MXC_I2C_RevA_WriteTXFIFO+0xe>

1001226c <MXC_I2C_RevA_GetTXFIFOAvailable>:
    return E_NO_ERROR;
}

int MXC_I2C_RevA_GetTXFIFOAvailable(mxc_i2c_reva_regs_t *i2c)
{
    if (i2c == NULL) {
1001226c:	b138      	cbz	r0, 1001227e <MXC_I2C_RevA_GetTXFIFOAvailable+0x12>
        return E_NULL_PTR;
    }

    int txFIFOlen = (i2c->fifolen & MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH) >>
1001226e:	6983      	ldr	r3, [r0, #24]
                    MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH_POS;
    return txFIFOlen -
           ((i2c->txctrl1 & MXC_F_I2C_REVA_TXCTRL1_LVL) >> MXC_F_I2C_REVA_TXCTRL1_LVL_POS);
10012270:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    return txFIFOlen -
10012272:	f3c3 2007 	ubfx	r0, r3, #8, #8
           ((i2c->txctrl1 & MXC_F_I2C_REVA_TXCTRL1_LVL) >> MXC_F_I2C_REVA_TXCTRL1_LVL_POS);
10012276:	f3c2 2303 	ubfx	r3, r2, #8, #4
    return txFIFOlen -
1001227a:	1ac0      	subs	r0, r0, r3
1001227c:	4770      	bx	lr
        return E_NULL_PTR;
1001227e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10012282:	4770      	bx	lr

10012284 <MXC_I2C_RevA_ClearRXFIFO>:

void MXC_I2C_RevA_ClearRXFIFO(mxc_i2c_reva_regs_t *i2c)
{
    i2c->rxctrl0 |= MXC_F_I2C_REVA_RXCTRL0_FLUSH;
10012284:	69c3      	ldr	r3, [r0, #28]
10012286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001228a:	61c3      	str	r3, [r0, #28]

    while (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_FLUSH) {}
1001228c:	69c3      	ldr	r3, [r0, #28]
1001228e:	061b      	lsls	r3, r3, #24
10012290:	d4fc      	bmi.n	1001228c <MXC_I2C_RevA_ClearRXFIFO+0x8>
}
10012292:	4770      	bx	lr

10012294 <MXC_I2C_RevA_ClearTXFIFO>:

void MXC_I2C_RevA_ClearTXFIFO(mxc_i2c_reva_regs_t *i2c)
{
    i2c->txctrl0 |= MXC_F_I2C_REVA_TXCTRL0_FLUSH;
10012294:	6a43      	ldr	r3, [r0, #36]	@ 0x24
10012296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001229a:	6243      	str	r3, [r0, #36]	@ 0x24

    while (i2c->txctrl0 & MXC_F_I2C_REVA_TXCTRL0_FLUSH) {}
1001229c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
1001229e:	061b      	lsls	r3, r3, #24
100122a0:	d4fc      	bmi.n	1001229c <MXC_I2C_RevA_ClearTXFIFO+0x8>
}
100122a2:	4770      	bx	lr

100122a4 <MXC_I2C_RevA_ClearFlags>:
    return E_NO_ERROR;
}

void MXC_I2C_RevA_ClearFlags(mxc_i2c_reva_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    i2c->intfl0 = flags0;
100122a4:	6081      	str	r1, [r0, #8]
    i2c->intfl1 = flags1;
100122a6:	6102      	str	r2, [r0, #16]
}
100122a8:	4770      	bx	lr

100122aa <MXC_I2C_RevA_EnableInt>:

void MXC_I2C_RevA_EnableInt(mxc_i2c_reva_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    i2c->inten0 |= flags0;
100122aa:	68c3      	ldr	r3, [r0, #12]
100122ac:	430b      	orrs	r3, r1
100122ae:	60c3      	str	r3, [r0, #12]
    i2c->inten1 |= flags1;
100122b0:	6943      	ldr	r3, [r0, #20]
100122b2:	4313      	orrs	r3, r2
100122b4:	6143      	str	r3, [r0, #20]
}
100122b6:	4770      	bx	lr

100122b8 <MXC_I2C_RevA_DisableInt>:

void MXC_I2C_RevA_DisableInt(mxc_i2c_reva_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    i2c->inten0 &= ~flags0;
100122b8:	68c3      	ldr	r3, [r0, #12]
100122ba:	ea23 0301 	bic.w	r3, r3, r1
100122be:	60c3      	str	r3, [r0, #12]
    i2c->inten1 &= ~flags1;
100122c0:	6943      	ldr	r3, [r0, #20]
100122c2:	ea23 0302 	bic.w	r3, r3, r2
100122c6:	6143      	str	r3, [r0, #20]
}
100122c8:	4770      	bx	lr

100122ca <MXC_I2C_RevA_Recover>:

int MXC_I2C_RevA_Recover(mxc_i2c_reva_regs_t *i2c, unsigned int retries)
{
100122ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100122ce:	460f      	mov	r7, r1
    int err;
    unsigned int i;

    if (i2c == NULL) {
100122d0:	4604      	mov	r4, r0
100122d2:	2800      	cmp	r0, #0
100122d4:	d059      	beq.n	1001238a <MXC_I2C_RevA_Recover+0xc0>
        return E_NULL_PTR;
    }

    err = E_COMM_ERR;

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_EN;
100122d6:	6803      	ldr	r3, [r0, #0]
100122d8:	f043 0301 	orr.w	r3, r3, #1
100122dc:	6003      	str	r3, [r0, #0]
    int swBit = i2c->ctrl & MXC_F_I2C_REVA_CTRL_BB_MODE;
100122de:	6806      	ldr	r6, [r0, #0]

    if (i2c == NULL) {
        return E_NULL_PTR;
    }

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_BB_MODE;
100122e0:	6803      	ldr	r3, [r0, #0]
100122e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100122e6:	f406 6680 	and.w	r6, r6, #1024	@ 0x400
100122ea:	6003      	str	r3, [r0, #0]

    // Follow the procedure detailed in the header file
    // Delay 10uS between each step to give the line/slaves time to react
    for (i = 0; i < retries; i++) {
100122ec:	f04f 0800 	mov.w	r8, #0
100122f0:	45b8      	cmp	r8, r7
100122f2:	d10c      	bne.n	1001230e <MXC_I2C_RevA_Recover+0x44>
    err = E_COMM_ERR;
100122f4:	f06f 0008 	mvn.w	r0, #8
            err = E_NO_ERROR; // We have control
            break;
        }
    }

    if (swBit == 0) {
100122f8:	b91e      	cbnz	r6, 10012302 <MXC_I2C_RevA_Recover+0x38>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_BB_MODE;
100122fa:	6823      	ldr	r3, [r4, #0]
100122fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
10012300:	6023      	str	r3, [r4, #0]
    }

    i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_EN;
10012302:	6823      	ldr	r3, [r4, #0]
10012304:	f023 0301 	bic.w	r3, r3, #1
10012308:	6023      	str	r3, [r4, #0]

    return err;
}
1001230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MXC_Delay(10);
1001230e:	200a      	movs	r0, #10
10012310:	f7fe fe66 	bl	10010fe0 <MXC_Delay>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_SCL_OUT;
10012314:	6823      	ldr	r3, [r4, #0]
10012316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
1001231a:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
1001231c:	200a      	movs	r0, #10
1001231e:	f7fe fe5f 	bl	10010fe0 <MXC_Delay>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
10012322:	6823      	ldr	r3, [r4, #0]
10012324:	05d9      	lsls	r1, r3, #23
10012326:	d506      	bpl.n	10012336 <MXC_I2C_RevA_Recover+0x6c>
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
10012328:	6823      	ldr	r3, [r4, #0]
1001232a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
1001232e:	6023      	str	r3, [r4, #0]
    for (i = 0; i < retries; i++) {
10012330:	f108 0801 	add.w	r8, r8, #1
10012334:	e7dc      	b.n	100122f0 <MXC_I2C_RevA_Recover+0x26>
        MXC_Delay(10);
10012336:	200a      	movs	r0, #10
10012338:	f7fe fe52 	bl	10010fe0 <MXC_Delay>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_SDA_OUT;
1001233c:	6823      	ldr	r3, [r4, #0]
1001233e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
10012342:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
10012344:	200a      	movs	r0, #10
10012346:	f7fe fe4b 	bl	10010fe0 <MXC_Delay>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA) {
1001234a:	6825      	ldr	r5, [r4, #0]
1001234c:	f415 7500 	ands.w	r5, r5, #512	@ 0x200
10012350:	d1ea      	bne.n	10012328 <MXC_I2C_RevA_Recover+0x5e>
        MXC_Delay(10);
10012352:	200a      	movs	r0, #10
10012354:	f7fe fe44 	bl	10010fe0 <MXC_Delay>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SDA_OUT;
10012358:	6823      	ldr	r3, [r4, #0]
1001235a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001235e:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
10012360:	200a      	movs	r0, #10
10012362:	f7fe fe3d 	bl	10010fe0 <MXC_Delay>
        if (!(i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA)) {
10012366:	6823      	ldr	r3, [r4, #0]
10012368:	059a      	lsls	r2, r3, #22
1001236a:	d5dd      	bpl.n	10012328 <MXC_I2C_RevA_Recover+0x5e>
        MXC_Delay(10);
1001236c:	200a      	movs	r0, #10
1001236e:	f7fe fe37 	bl	10010fe0 <MXC_Delay>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT;
10012372:	6823      	ldr	r3, [r4, #0]
10012374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10012378:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
1001237a:	200a      	movs	r0, #10
1001237c:	f7fe fe30 	bl	10010fe0 <MXC_Delay>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
10012380:	6823      	ldr	r3, [r4, #0]
10012382:	05db      	lsls	r3, r3, #23
10012384:	d5d4      	bpl.n	10012330 <MXC_I2C_RevA_Recover+0x66>
            err = E_NO_ERROR; // We have control
10012386:	4628      	mov	r0, r5
10012388:	e7b6      	b.n	100122f8 <MXC_I2C_RevA_Recover+0x2e>
        return E_NULL_PTR;
1001238a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001238e:	e7bc      	b.n	1001230a <MXC_I2C_RevA_Recover+0x40>

10012390 <MXC_I2C_RevA_SetRXThreshold>:
    return E_NO_ERROR;
}

int MXC_I2C_RevA_SetRXThreshold(mxc_i2c_reva_regs_t *i2c, unsigned int numBytes)
{
    unsigned int rxFIFOlen = (i2c->fifolen & MXC_F_I2C_REVA_FIFOLEN_RX_DEPTH) >>
10012390:	6983      	ldr	r3, [r0, #24]
10012392:	b2db      	uxtb	r3, r3
                             MXC_F_I2C_REVA_FIFOLEN_RX_DEPTH_POS;

    if (numBytes > rxFIFOlen) {
10012394:	428b      	cmp	r3, r1
        return E_BAD_PARAM;
    }

    i2c->rxctrl0 = (i2c->rxctrl0 & ~MXC_F_I2C_REVA_RXCTRL0_THD_LVL) |
10012396:	bf21      	itttt	cs
10012398:	69c3      	ldrcs	r3, [r0, #28]
1001239a:	f423 6370 	biccs.w	r3, r3, #3840	@ 0xf00
1001239e:	ea43 2101 	orrcs.w	r1, r3, r1, lsl #8
100123a2:	61c1      	strcs	r1, [r0, #28]
                   (numBytes << MXC_F_I2C_REVA_RXCTRL0_THD_LVL_POS);
    return E_NO_ERROR;
100123a4:	bf2c      	ite	cs
100123a6:	2000      	movcs	r0, #0
        return E_BAD_PARAM;
100123a8:	f06f 0002 	mvncc.w	r0, #2
}
100123ac:	4770      	bx	lr

100123ae <MXC_I2C_RevA_SetTXThreshold>:
    return (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_THD_LVL) >> MXC_F_I2C_REVA_RXCTRL0_THD_LVL_POS;
}

int MXC_I2C_RevA_SetTXThreshold(mxc_i2c_reva_regs_t *i2c, unsigned int numBytes)
{
    unsigned int txFIFOlen = (i2c->fifolen & MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH) >>
100123ae:	6983      	ldr	r3, [r0, #24]
100123b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
                             MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH_POS;

    if (numBytes > txFIFOlen) {
100123b4:	428b      	cmp	r3, r1
        return E_BAD_PARAM;
    }

    i2c->txctrl0 = (i2c->txctrl0 & ~MXC_F_I2C_REVA_TXCTRL0_THD_LVL) |
100123b6:	bf21      	itttt	cs
100123b8:	6a43      	ldrcs	r3, [r0, #36]	@ 0x24
100123ba:	f423 6370 	biccs.w	r3, r3, #3840	@ 0xf00
100123be:	ea43 2101 	orrcs.w	r1, r3, r1, lsl #8
100123c2:	6241      	strcs	r1, [r0, #36]	@ 0x24
                   (numBytes << MXC_F_I2C_REVA_TXCTRL0_THD_LVL_POS);
    return E_NO_ERROR;
100123c4:	bf2c      	ite	cs
100123c6:	2000      	movcs	r0, #0
        return E_BAD_PARAM;
100123c8:	f06f 0002 	mvncc.w	r0, #2
}
100123cc:	4770      	bx	lr

100123ce <MXC_ICC_Enable>:
    return MXC_ICC_RevA_ID((mxc_icc_reva_regs_t *)icc, cid);
}

void MXC_ICC_Enable(mxc_icc_regs_t *icc)
{
    MXC_ICC_RevA_Enable((mxc_icc_reva_regs_t *)icc);
100123ce:	f000 b800 	b.w	100123d2 <MXC_ICC_RevA_Enable>

100123d2 <MXC_ICC_RevA_Enable>:
}

void MXC_ICC_RevA_Enable(mxc_icc_reva_regs_t *icc)
{
    // Invalidate cache and wait until ready
    icc->ctrl &= ~MXC_F_ICC_REVA_CTRL_EN;
100123d2:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
100123d6:	f023 0301 	bic.w	r3, r3, #1
100123da:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
    icc->invalidate = 1;
100123de:	2301      	movs	r3, #1
100123e0:	f8c0 3700 	str.w	r3, [r0, #1792]	@ 0x700
    return (icc->ctrl & MXC_F_ICC_REVA_CTRL_RDY);
100123e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100

    while (!(MXC_ICC_Ready(icc))) {}
100123e8:	03da      	lsls	r2, r3, #15
100123ea:	d5fb      	bpl.n	100123e4 <MXC_ICC_RevA_Enable+0x12>

    // Enable Cache
    icc->ctrl |= MXC_F_ICC_REVA_CTRL_EN;
100123ec:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
100123f0:	f043 0301 	orr.w	r3, r3, #1
100123f4:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
    return (icc->ctrl & MXC_F_ICC_REVA_CTRL_RDY);
100123f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
    while (!(MXC_ICC_Ready(icc))) {}
100123fc:	03db      	lsls	r3, r3, #15
100123fe:	d5fb      	bpl.n	100123f8 <MXC_ICC_RevA_Enable+0x26>
}
10012400:	4770      	bx	lr
	...

10012404 <MXC_UART_GetFrequency.part.0>:
        return E_BAD_PARAM;
    }

    // check if UARt is LP UART
    if (uart == MXC_UART3) {
        if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) == MXC_S_UART_CTRL_BCLKSRC_EXTERNAL_CLOCK) {
10012404:	4b09      	ldr	r3, [pc, #36]	@ (1001242c <MXC_UART_GetFrequency.part.0+0x28>)
10012406:	6818      	ldr	r0, [r3, #0]
10012408:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
1001240c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
10012410:	d005      	beq.n	1001241e <MXC_UART_GetFrequency.part.0+0x1a>
            periphClock = ERTCO_FREQ * 2;
        } else if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) ==
10012412:	681a      	ldr	r2, [r3, #0]
10012414:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
10012418:	d105      	bne.n	10012426 <MXC_UART_GetFrequency.part.0+0x22>
                   MXC_S_UART_CTRL_BCLKSRC_PERIPHERAL_CLOCK) {
            periphClock = IBRO_FREQ;
1001241a:	f44f 00e1 	mov.w	r0, #7372800	@ 0x708000
        } else {
            return E_BAD_PARAM;
        }
        return (periphClock / uart->clkdiv);
1001241e:	691b      	ldr	r3, [r3, #16]
10012420:	fbb0 f0f3 	udiv	r0, r0, r3
10012424:	4770      	bx	lr
        return E_BAD_PARAM;
10012426:	f06f 0002 	mvn.w	r0, #2
    } else {
        return MXC_UART_RevB_GetFrequency((mxc_uart_revb_regs_t *)uart);
    }
}
1001242a:	4770      	bx	lr
1001242c:	40081400 	.word	0x40081400

10012430 <MXC_UART_Shutdown>:
{
10012430:	b508      	push	{r3, lr}
    switch (MXC_UART_GET_IDX(uart)) {
10012432:	4b13      	ldr	r3, [pc, #76]	@ (10012480 <MXC_UART_Shutdown+0x50>)
10012434:	4298      	cmp	r0, r3
10012436:	d107      	bne.n	10012448 <MXC_UART_Shutdown+0x18>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART0);
10012438:	200b      	movs	r0, #11
1001243a:	f7fe ff5d 	bl	100112f8 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART0);
1001243e:	2009      	movs	r0, #9
10012440:	f7fe fec8 	bl	100111d4 <MXC_SYS_ClockDisable>
    return E_NO_ERROR;
10012444:	2000      	movs	r0, #0
}
10012446:	bd08      	pop	{r3, pc}
    switch (MXC_UART_GET_IDX(uart)) {
10012448:	4b0e      	ldr	r3, [pc, #56]	@ (10012484 <MXC_UART_Shutdown+0x54>)
1001244a:	4298      	cmp	r0, r3
1001244c:	d104      	bne.n	10012458 <MXC_UART_Shutdown+0x28>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART1);
1001244e:	200c      	movs	r0, #12
10012450:	f7fe ff52 	bl	100112f8 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART1);
10012454:	200a      	movs	r0, #10
10012456:	e7f3      	b.n	10012440 <MXC_UART_Shutdown+0x10>
    switch (MXC_UART_GET_IDX(uart)) {
10012458:	4b0b      	ldr	r3, [pc, #44]	@ (10012488 <MXC_UART_Shutdown+0x58>)
1001245a:	4298      	cmp	r0, r3
1001245c:	d104      	bne.n	10012468 <MXC_UART_Shutdown+0x38>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART2);
1001245e:	201c      	movs	r0, #28
10012460:	f7fe ff4a 	bl	100112f8 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART2);
10012464:	2021      	movs	r0, #33	@ 0x21
10012466:	e7eb      	b.n	10012440 <MXC_UART_Shutdown+0x10>
    switch (MXC_UART_GET_IDX(uart)) {
10012468:	4b08      	ldr	r3, [pc, #32]	@ (1001248c <MXC_UART_Shutdown+0x5c>)
1001246a:	4298      	cmp	r0, r3
1001246c:	d104      	bne.n	10012478 <MXC_UART_Shutdown+0x48>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET_UART3);
1001246e:	2044      	movs	r0, #68	@ 0x44
10012470:	f7fe ff42 	bl	100112f8 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART3);
10012474:	2044      	movs	r0, #68	@ 0x44
10012476:	e7e3      	b.n	10012440 <MXC_UART_Shutdown+0x10>
        return E_BAD_PARAM;
10012478:	f06f 0002 	mvn.w	r0, #2
1001247c:	e7e3      	b.n	10012446 <MXC_UART_Shutdown+0x16>
1001247e:	bf00      	nop
10012480:	40042000 	.word	0x40042000
10012484:	40043000 	.word	0x40043000
10012488:	40044000 	.word	0x40044000
1001248c:	40081400 	.word	0x40081400

10012490 <MXC_UART_Init>:
{
10012490:	b570      	push	{r4, r5, r6, lr}
10012492:	4604      	mov	r4, r0
10012494:	460e      	mov	r6, r1
10012496:	4615      	mov	r5, r2
    retval = MXC_UART_Shutdown(uart);
10012498:	f7ff ffca 	bl	10012430 <MXC_UART_Shutdown>
    if (retval) {
1001249c:	bb90      	cbnz	r0, 10012504 <MXC_UART_Init+0x74>
    switch (clock) {
1001249e:	2d02      	cmp	r5, #2
100124a0:	d014      	beq.n	100124cc <MXC_UART_Init+0x3c>
100124a2:	2d04      	cmp	r5, #4
100124a4:	d102      	bne.n	100124ac <MXC_UART_Init+0x1c>
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_ERTCO);
100124a6:	2006      	movs	r0, #6
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_IBRO);
100124a8:	f7fe feee 	bl	10011288 <MXC_SYS_ClockSourceEnable>
    switch (MXC_UART_GET_IDX(uart)) {
100124ac:	4b16      	ldr	r3, [pc, #88]	@ (10012508 <MXC_UART_Init+0x78>)
100124ae:	429c      	cmp	r4, r3
100124b0:	d10e      	bne.n	100124d0 <MXC_UART_Init+0x40>
        MXC_GPIO_Config(&gpio_cfg_uart0);
100124b2:	4816      	ldr	r0, [pc, #88]	@ (1001250c <MXC_UART_Init+0x7c>)
100124b4:	f7ff fc2c 	bl	10011d10 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART0);
100124b8:	2009      	movs	r0, #9
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART3);
100124ba:	f7fe feab 	bl	10011214 <MXC_SYS_ClockEnable>
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
100124be:	462a      	mov	r2, r5
100124c0:	4631      	mov	r1, r6
100124c2:	4620      	mov	r0, r4
}
100124c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
100124c8:	f000 b8ca 	b.w	10012660 <MXC_UART_RevB_Init>
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_IBRO);
100124cc:	2005      	movs	r0, #5
100124ce:	e7eb      	b.n	100124a8 <MXC_UART_Init+0x18>
    switch (MXC_UART_GET_IDX(uart)) {
100124d0:	4b0f      	ldr	r3, [pc, #60]	@ (10012510 <MXC_UART_Init+0x80>)
100124d2:	429c      	cmp	r4, r3
100124d4:	d104      	bne.n	100124e0 <MXC_UART_Init+0x50>
        MXC_GPIO_Config(&gpio_cfg_uart1);
100124d6:	480f      	ldr	r0, [pc, #60]	@ (10012514 <MXC_UART_Init+0x84>)
100124d8:	f7ff fc1a 	bl	10011d10 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART1);
100124dc:	200a      	movs	r0, #10
100124de:	e7ec      	b.n	100124ba <MXC_UART_Init+0x2a>
    switch (MXC_UART_GET_IDX(uart)) {
100124e0:	4b0d      	ldr	r3, [pc, #52]	@ (10012518 <MXC_UART_Init+0x88>)
100124e2:	429c      	cmp	r4, r3
100124e4:	d104      	bne.n	100124f0 <MXC_UART_Init+0x60>
        MXC_GPIO_Config(&gpio_cfg_uart2);
100124e6:	480d      	ldr	r0, [pc, #52]	@ (1001251c <MXC_UART_Init+0x8c>)
100124e8:	f7ff fc12 	bl	10011d10 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART2);
100124ec:	2021      	movs	r0, #33	@ 0x21
100124ee:	e7e4      	b.n	100124ba <MXC_UART_Init+0x2a>
    switch (MXC_UART_GET_IDX(uart)) {
100124f0:	4b0b      	ldr	r3, [pc, #44]	@ (10012520 <MXC_UART_Init+0x90>)
100124f2:	429c      	cmp	r4, r3
100124f4:	d104      	bne.n	10012500 <MXC_UART_Init+0x70>
        MXC_GPIO_Config(&gpio_cfg_uart3);
100124f6:	480b      	ldr	r0, [pc, #44]	@ (10012524 <MXC_UART_Init+0x94>)
100124f8:	f7ff fc0a 	bl	10011d10 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART3);
100124fc:	2044      	movs	r0, #68	@ 0x44
100124fe:	e7dc      	b.n	100124ba <MXC_UART_Init+0x2a>
        return E_BAD_PARAM;
10012500:	f06f 0002 	mvn.w	r0, #2
}
10012504:	bd70      	pop	{r4, r5, r6, pc}
10012506:	bf00      	nop
10012508:	40042000 	.word	0x40042000
1001250c:	100239ec 	.word	0x100239ec
10012510:	40043000 	.word	0x40043000
10012514:	100239e0 	.word	0x100239e0
10012518:	40044000 	.word	0x40044000
1001251c:	100239d4 	.word	0x100239d4
10012520:	40081400 	.word	0x40081400
10012524:	100239c8 	.word	0x100239c8

10012528 <MXC_UART_SetFrequency>:
    if (MXC_UART_GET_IDX(uart) < 0) {
10012528:	4b28      	ldr	r3, [pc, #160]	@ (100125cc <MXC_UART_SetFrequency+0xa4>)
1001252a:	4298      	cmp	r0, r3
{
1001252c:	b510      	push	{r4, lr}
1001252e:	4604      	mov	r4, r0
    if (MXC_UART_GET_IDX(uart) < 0) {
10012530:	d046      	beq.n	100125c0 <MXC_UART_SetFrequency+0x98>
10012532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012536:	4298      	cmp	r0, r3
10012538:	d042      	beq.n	100125c0 <MXC_UART_SetFrequency+0x98>
1001253a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001253e:	4298      	cmp	r0, r3
10012540:	d03e      	beq.n	100125c0 <MXC_UART_SetFrequency+0x98>
10012542:	4823      	ldr	r0, [pc, #140]	@ (100125d0 <MXC_UART_SetFrequency+0xa8>)
10012544:	4284      	cmp	r4, r0
10012546:	d106      	bne.n	10012556 <MXC_UART_SetFrequency+0x2e>
        uart->osr = 5;
10012548:	2305      	movs	r3, #5
        switch (clock) {
1001254a:	2a02      	cmp	r2, #2
        uart->osr = 5;
1001254c:	6163      	str	r3, [r4, #20]
        switch (clock) {
1001254e:	d005      	beq.n	1001255c <MXC_UART_SetFrequency+0x34>
10012550:	2a04      	cmp	r2, #4
10012552:	d01d      	beq.n	10012590 <MXC_UART_SetFrequency+0x68>
10012554:	b112      	cbz	r2, 1001255c <MXC_UART_SetFrequency+0x34>
        return E_BAD_PARAM;
10012556:	f06f 0002 	mvn.w	r0, #2
}
1001255a:	bd10      	pop	{r4, pc}
            clkDiv = ((IBRO_FREQ) / baud);
1001255c:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
10012560:	fbb3 f3f1 	udiv	r3, r3, r1
            mod = ((IBRO_FREQ) % baud);
10012564:	fb01 f203 	mul.w	r2, r1, r3
10012568:	f5c2 02e1 	rsb	r2, r2, #7372800	@ 0x708000
        if (!clkDiv || mod > (baud / 2)) {
1001256c:	b113      	cbz	r3, 10012574 <MXC_UART_SetFrequency+0x4c>
1001256e:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
10012572:	d900      	bls.n	10012576 <MXC_UART_SetFrequency+0x4e>
            clkDiv++;
10012574:	3301      	adds	r3, #1
        uart->clkdiv = clkDiv;
10012576:	6103      	str	r3, [r0, #16]
    if (MXC_UART_GET_IDX(uart) < 0) {
10012578:	f7ff ff44 	bl	10012404 <MXC_UART_GetFrequency.part.0>
    if (frequency > 0) {
1001257c:	2800      	cmp	r0, #0
1001257e:	ddec      	ble.n	1001255a <MXC_UART_SetFrequency+0x32>
        uart->ctrl |= MXC_F_UART_CTRL_BCLKEN;
10012580:	6823      	ldr	r3, [r4, #0]
10012582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
10012586:	6023      	str	r3, [r4, #0]
        while (((uart->ctrl & MXC_F_UART_CTRL_BCLKRDY) >> MXC_F_UART_CTRL_BCLKRDY_POS) == 0) {}
10012588:	6823      	ldr	r3, [r4, #0]
1001258a:	031b      	lsls	r3, r3, #12
1001258c:	d5fc      	bpl.n	10012588 <MXC_UART_SetFrequency+0x60>
1001258e:	e7e4      	b.n	1001255a <MXC_UART_SetFrequency+0x32>
            uart->ctrl |= MXC_S_UART_CTRL_BCLKSRC_EXTERNAL_CLOCK;
10012590:	6823      	ldr	r3, [r4, #0]
10012592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10012596:	6023      	str	r3, [r4, #0]
            uart->ctrl |= MXC_F_UART_CTRL_FDM;
10012598:	6823      	ldr	r3, [r4, #0]
            if (baud > 2400) {
1001259a:	f5b1 6f16 	cmp.w	r1, #2400	@ 0x960
            uart->ctrl |= MXC_F_UART_CTRL_FDM;
1001259e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
100125a2:	6023      	str	r3, [r4, #0]
            if (baud > 2400) {
100125a4:	d90a      	bls.n	100125bc <MXC_UART_SetFrequency+0x94>
                uart->osr = 0;
100125a6:	2300      	movs	r3, #0
100125a8:	6163      	str	r3, [r4, #20]
            clkDiv = ((ERTCO_FREQ * 2) / baud);
100125aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
100125ae:	fbb3 f3f1 	udiv	r3, r3, r1
            mod = ((ERTCO_FREQ * 2) % baud);
100125b2:	fb01 f203 	mul.w	r2, r1, r3
100125b6:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
100125ba:	e7d7      	b.n	1001256c <MXC_UART_SetFrequency+0x44>
                uart->osr = 1;
100125bc:	2301      	movs	r3, #1
100125be:	e7f3      	b.n	100125a8 <MXC_UART_SetFrequency+0x80>
        if (clock == MXC_UART_ERTCO_CLK) {
100125c0:	2a04      	cmp	r2, #4
100125c2:	d0c8      	beq.n	10012556 <MXC_UART_SetFrequency+0x2e>
        frequency = MXC_UART_RevB_SetFrequency((mxc_uart_revb_regs_t *)uart, baud, clock);
100125c4:	4620      	mov	r0, r4
100125c6:	f000 f87f 	bl	100126c8 <MXC_UART_RevB_SetFrequency>
100125ca:	e7d7      	b.n	1001257c <MXC_UART_SetFrequency+0x54>
100125cc:	40042000 	.word	0x40042000
100125d0:	40081400 	.word	0x40081400

100125d4 <MXC_UART_GetFrequency>:
    if (MXC_UART_GET_IDX(uart) < 0) {
100125d4:	4b0a      	ldr	r3, [pc, #40]	@ (10012600 <MXC_UART_GetFrequency+0x2c>)
100125d6:	4298      	cmp	r0, r3
100125d8:	d00d      	beq.n	100125f6 <MXC_UART_GetFrequency+0x22>
100125da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100125de:	4298      	cmp	r0, r3
100125e0:	d009      	beq.n	100125f6 <MXC_UART_GetFrequency+0x22>
100125e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100125e6:	4298      	cmp	r0, r3
100125e8:	d005      	beq.n	100125f6 <MXC_UART_GetFrequency+0x22>
100125ea:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100125ee:	4298      	cmp	r0, r3
100125f0:	d103      	bne.n	100125fa <MXC_UART_GetFrequency+0x26>
100125f2:	f7ff bf07 	b.w	10012404 <MXC_UART_GetFrequency.part.0>
        return MXC_UART_RevB_GetFrequency((mxc_uart_revb_regs_t *)uart);
100125f6:	f000 b8ab 	b.w	10012750 <MXC_UART_RevB_GetFrequency>
}
100125fa:	f06f 0002 	mvn.w	r0, #2
100125fe:	4770      	bx	lr
10012600:	40042000 	.word	0x40042000

10012604 <MXC_UART_SetDataSize>:

int MXC_UART_SetDataSize(mxc_uart_regs_t *uart, int dataSize)
{
    return MXC_UART_RevB_SetDataSize((mxc_uart_revb_regs_t *)uart, dataSize);
10012604:	f000 b8da 	b.w	100127bc <MXC_UART_RevB_SetDataSize>

10012608 <MXC_UART_SetStopBits>:
}

int MXC_UART_SetStopBits(mxc_uart_regs_t *uart, mxc_uart_stop_t stopBits)
{
    return MXC_UART_RevB_SetStopBits((mxc_uart_revb_regs_t *)uart, stopBits);
10012608:	f000 b8f8 	b.w	100127fc <MXC_UART_RevB_SetStopBits>

1001260c <MXC_UART_SetParity>:
}

int MXC_UART_SetParity(mxc_uart_regs_t *uart, mxc_uart_parity_t parity)
{
    return MXC_UART_RevB_SetParity((mxc_uart_revb_regs_t *)uart, parity);
1001260c:	f000 b918 	b.w	10012840 <MXC_UART_RevB_SetParity>

10012610 <MXC_UART_ReadCharacterRaw>:
    return MXC_UART_RevB_AbortTransmission((mxc_uart_revb_regs_t *)uart);
}

int MXC_UART_ReadCharacterRaw(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_ReadCharacterRaw((mxc_uart_revb_regs_t *)uart);
10012610:	f000 b960 	b.w	100128d4 <MXC_UART_RevB_ReadCharacterRaw>

10012614 <MXC_UART_WriteCharacterRaw>:
}

int MXC_UART_WriteCharacterRaw(mxc_uart_regs_t *uart, uint8_t character)
{
    return MXC_UART_RevB_WriteCharacterRaw((mxc_uart_revb_regs_t *)uart, character);
10012614:	f000 b97a 	b.w	1001290c <MXC_UART_RevB_WriteCharacterRaw>

10012618 <MXC_UART_ReadCharacter>:
}

int MXC_UART_ReadCharacter(mxc_uart_regs_t *uart)
{
    return MXC_UART_Common_ReadCharacter(uart);
10012618:	f000 b808 	b.w	1001262c <MXC_UART_Common_ReadCharacter>

1001261c <MXC_UART_WriteCharacter>:
}

int MXC_UART_WriteCharacter(mxc_uart_regs_t *uart, uint8_t character)
{
    return MXC_UART_Common_WriteCharacter(uart, character);
1001261c:	f000 b812 	b.w	10012644 <MXC_UART_Common_WriteCharacter>

10012620 <MXC_UART_GetRXFIFOAvailable>:
    return MXC_UART_RevB_ReadRXFIFODMA((mxc_uart_revb_regs_t *)uart, bytes, len, callback, config);
}

unsigned int MXC_UART_GetRXFIFOAvailable(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_GetRXFIFOAvailable((mxc_uart_revb_regs_t *)uart);
10012620:	f000 b992 	b.w	10012948 <MXC_UART_RevB_GetRXFIFOAvailable>

10012624 <MXC_UART_GetTXFIFOAvailable>:
    return MXC_UART_RevB_WriteTXFIFODMA((mxc_uart_revb_regs_t *)uart, bytes, len, callback, config);
}

unsigned int MXC_UART_GetTXFIFOAvailable(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_GetTXFIFOAvailable((mxc_uart_revb_regs_t *)uart);
10012624:	f000 b994 	b.w	10012950 <MXC_UART_RevB_GetTXFIFOAvailable>

10012628 <MXC_UART_SetRXThreshold>:
    return MXC_UART_RevB_ClearTXFIFO((mxc_uart_revb_regs_t *)uart);
}

int MXC_UART_SetRXThreshold(mxc_uart_regs_t *uart, unsigned int numBytes)
{
    return MXC_UART_RevB_SetRXThreshold((mxc_uart_revb_regs_t *)uart, numBytes);
10012628:	f000 b998 	b.w	1001295c <MXC_UART_RevB_SetRXThreshold>

1001262c <MXC_UART_Common_ReadCharacter>:

#include "uart_common.h"
#include "uart.h"

int MXC_UART_Common_ReadCharacter(mxc_uart_regs_t *uart)
{
1001262c:	b510      	push	{r4, lr}
1001262e:	4604      	mov	r4, r0
    // Wait until FIFO has a character ready.
    while (MXC_UART_GetRXFIFOAvailable(uart) < 1) {}
10012630:	4620      	mov	r0, r4
10012632:	f7ff fff5 	bl	10012620 <MXC_UART_GetRXFIFOAvailable>
10012636:	2800      	cmp	r0, #0
10012638:	d0fa      	beq.n	10012630 <MXC_UART_Common_ReadCharacter+0x4>

    // Read the character using the non-blocking function.
    return MXC_UART_ReadCharacterRaw(uart);
1001263a:	4620      	mov	r0, r4
}
1001263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_UART_ReadCharacterRaw(uart);
10012640:	f7ff bfe6 	b.w	10012610 <MXC_UART_ReadCharacterRaw>

10012644 <MXC_UART_Common_WriteCharacter>:

int MXC_UART_Common_WriteCharacter(mxc_uart_regs_t *uart, uint8_t character)
{
10012644:	b538      	push	{r3, r4, r5, lr}
10012646:	4604      	mov	r4, r0
10012648:	460d      	mov	r5, r1
    // Wait until FIFO has space for the character.
    while (MXC_UART_GetTXFIFOAvailable(uart) < 1) {}
1001264a:	4620      	mov	r0, r4
1001264c:	f7ff ffea 	bl	10012624 <MXC_UART_GetTXFIFOAvailable>
10012650:	2800      	cmp	r0, #0
10012652:	d0fa      	beq.n	1001264a <MXC_UART_Common_WriteCharacter+0x6>

    // Write the character using the non-blocking function.
    return MXC_UART_WriteCharacterRaw(uart, character);
10012654:	4629      	mov	r1, r5
10012656:	4620      	mov	r0, r4
}
10012658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return MXC_UART_WriteCharacterRaw(uart, character);
1001265c:	f7ff bfda 	b.w	10012614 <MXC_UART_WriteCharacterRaw>

10012660 <MXC_UART_RevB_Init>:
/* ************************************************************************* */
int MXC_UART_RevB_Init(mxc_uart_revb_regs_t *uart, unsigned int baud, mxc_uart_revb_clock_t clock)
{
    int err;

    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10012660:	4b18      	ldr	r3, [pc, #96]	@ (100126c4 <MXC_UART_RevB_Init+0x64>)
10012662:	4298      	cmp	r0, r3
{
10012664:	b570      	push	{r4, r5, r6, lr}
10012666:	4604      	mov	r4, r0
10012668:	460d      	mov	r5, r1
1001266a:	4616      	mov	r6, r2
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001266c:	d00b      	beq.n	10012686 <MXC_UART_RevB_Init+0x26>
1001266e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012672:	4298      	cmp	r0, r3
10012674:	d007      	beq.n	10012686 <MXC_UART_RevB_Init+0x26>
10012676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001267a:	4298      	cmp	r0, r3
1001267c:	d003      	beq.n	10012686 <MXC_UART_RevB_Init+0x26>
1001267e:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10012682:	4298      	cmp	r0, r3
10012684:	d11b      	bne.n	100126be <MXC_UART_RevB_Init+0x5e>
        return E_BAD_PARAM;
    }

    // Initialize UART
    if ((err = MXC_UART_SetRXThreshold((mxc_uart_regs_t *)uart, 1)) !=
10012686:	2101      	movs	r1, #1
10012688:	4620      	mov	r0, r4
1001268a:	f7ff ffcd 	bl	10012628 <MXC_UART_SetRXThreshold>
1001268e:	b9a8      	cbnz	r0, 100126bc <MXC_UART_RevB_Init+0x5c>
        E_NO_ERROR) { // Set RX threshold to 1 byte
        return err;
    }

    if ((err = MXC_UART_SetDataSize((mxc_uart_regs_t *)uart, 8)) !=
10012690:	2108      	movs	r1, #8
10012692:	4620      	mov	r0, r4
10012694:	f7ff ffb6 	bl	10012604 <MXC_UART_SetDataSize>
10012698:	b980      	cbnz	r0, 100126bc <MXC_UART_RevB_Init+0x5c>
        E_NO_ERROR) { // Set Datasize to 8 bits
        return err;
    }

    if ((err = MXC_UART_SetParity((mxc_uart_regs_t *)uart, MXC_UART_PARITY_DISABLE)) !=
1001269a:	4601      	mov	r1, r0
1001269c:	4620      	mov	r0, r4
1001269e:	f7ff ffb5 	bl	1001260c <MXC_UART_SetParity>
100126a2:	b958      	cbnz	r0, 100126bc <MXC_UART_RevB_Init+0x5c>
        E_NO_ERROR) {
        return err;
    }

    if ((err = MXC_UART_SetStopBits((mxc_uart_regs_t *)uart, MXC_UART_STOP_1)) != E_NO_ERROR) {
100126a4:	4601      	mov	r1, r0
100126a6:	4620      	mov	r0, r4
100126a8:	f7ff ffae 	bl	10012608 <MXC_UART_SetStopBits>
100126ac:	b930      	cbnz	r0, 100126bc <MXC_UART_RevB_Init+0x5c>
        return err;
    }

    if ((err = MXC_UART_SetFrequency((mxc_uart_regs_t *)uart, baud, (mxc_uart_clock_t)clock)) <
100126ae:	4632      	mov	r2, r6
100126b0:	4629      	mov	r1, r5
100126b2:	4620      	mov	r0, r4
100126b4:	f7ff ff38 	bl	10012528 <MXC_UART_SetFrequency>
100126b8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
        E_NO_ERROR) {
        return err;
    }

    return E_NO_ERROR;
}
100126bc:	bd70      	pop	{r4, r5, r6, pc}
        return E_BAD_PARAM;
100126be:	f06f 0002 	mvn.w	r0, #2
100126c2:	e7fb      	b.n	100126bc <MXC_UART_RevB_Init+0x5c>
100126c4:	40042000 	.word	0x40042000

100126c8 <MXC_UART_RevB_SetFrequency>:

int MXC_UART_RevB_SetFrequency(mxc_uart_revb_regs_t *uart, unsigned int baud,
                               mxc_uart_revb_clock_t clock)
{
    unsigned clkDiv = 0, mod = 0;
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100126c8:	4b1e      	ldr	r3, [pc, #120]	@ (10012744 <MXC_UART_RevB_SetFrequency+0x7c>)
100126ca:	4298      	cmp	r0, r3
{
100126cc:	b410      	push	{r4}
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100126ce:	d00b      	beq.n	100126e8 <MXC_UART_RevB_SetFrequency+0x20>
100126d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100126d4:	4298      	cmp	r0, r3
100126d6:	d007      	beq.n	100126e8 <MXC_UART_RevB_SetFrequency+0x20>
100126d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100126dc:	4298      	cmp	r0, r3
100126de:	d003      	beq.n	100126e8 <MXC_UART_RevB_SetFrequency+0x20>
100126e0:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100126e4:	4298      	cmp	r0, r3
100126e6:	d129      	bne.n	1001273c <MXC_UART_RevB_SetFrequency+0x74>
        return E_BAD_PARAM;
    }

    // OSR default value
    uart->osr = 5;
100126e8:	2305      	movs	r3, #5

    switch (clock) {
100126ea:	2a01      	cmp	r2, #1
    uart->osr = 5;
100126ec:	6143      	str	r3, [r0, #20]
    switch (clock) {
100126ee:	d012      	beq.n	10012716 <MXC_UART_RevB_SetFrequency+0x4e>
100126f0:	2a02      	cmp	r2, #2
100126f2:	d016      	beq.n	10012722 <MXC_UART_RevB_SetFrequency+0x5a>
100126f4:	bb12      	cbnz	r2, 1001273c <MXC_UART_RevB_SetFrequency+0x74>
    case MXC_UART_REVB_APB_CLK:
        clkDiv = (PeripheralClock / baud);
100126f6:	4b14      	ldr	r3, [pc, #80]	@ (10012748 <MXC_UART_RevB_SetFrequency+0x80>)
100126f8:	681b      	ldr	r3, [r3, #0]
100126fa:	085b      	lsrs	r3, r3, #1
        mod = (PeripheralClock % baud);
        break;

    case MXC_UART_REVB_EXT_CLK:
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK;
        clkDiv = UART_EXTCLK_FREQ / baud;
100126fc:	fbb3 f2f1 	udiv	r2, r3, r1
        mod = UART_EXTCLK_FREQ % baud;
10012700:	fb01 3312 	mls	r3, r1, r2, r3

    default:
        return E_BAD_PARAM;
    }

    if (!clkDiv || mod > (baud / 2)) {
10012704:	b112      	cbz	r2, 1001270c <MXC_UART_RevB_SetFrequency+0x44>
10012706:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
1001270a:	d900      	bls.n	1001270e <MXC_UART_RevB_SetFrequency+0x46>
        clkDiv++;
1001270c:	3201      	adds	r2, #1
    }
    uart->clkdiv = clkDiv;
    return MXC_UART_GetFrequency((mxc_uart_regs_t *)uart);
}
1001270e:	bc10      	pop	{r4}
    uart->clkdiv = clkDiv;
10012710:	6102      	str	r2, [r0, #16]
    return MXC_UART_GetFrequency((mxc_uart_regs_t *)uart);
10012712:	f7ff bf5f 	b.w	100125d4 <MXC_UART_GetFrequency>
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK;
10012716:	6803      	ldr	r3, [r0, #0]
10012718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
1001271c:	6003      	str	r3, [r0, #0]
        clkDiv = UART_EXTCLK_FREQ / baud;
1001271e:	4b0b      	ldr	r3, [pc, #44]	@ (1001274c <MXC_UART_RevB_SetFrequency+0x84>)
10012720:	e7ec      	b.n	100126fc <MXC_UART_RevB_SetFrequency+0x34>
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
10012722:	6804      	ldr	r4, [r0, #0]
        clkDiv = (IBRO_FREQ / baud);
10012724:	f44f 02e1 	mov.w	r2, #7372800	@ 0x708000
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
10012728:	f444 3400 	orr.w	r4, r4, #131072	@ 0x20000
        clkDiv = (IBRO_FREQ / baud);
1001272c:	fbb2 f2f1 	udiv	r2, r2, r1
        mod = (IBRO_FREQ % baud);
10012730:	fb01 f302 	mul.w	r3, r1, r2
10012734:	f5c3 03e1 	rsb	r3, r3, #7372800	@ 0x708000
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
10012738:	6004      	str	r4, [r0, #0]
        break;
1001273a:	e7e3      	b.n	10012704 <MXC_UART_RevB_SetFrequency+0x3c>
}
1001273c:	f06f 0002 	mvn.w	r0, #2
10012740:	bc10      	pop	{r4}
10012742:	4770      	bx	lr
10012744:	40042000 	.word	0x40042000
10012748:	20001898 	.word	0x20001898
1001274c:	047868c0 	.word	0x047868c0

10012750 <MXC_UART_RevB_GetFrequency>:

int MXC_UART_RevB_GetFrequency(mxc_uart_revb_regs_t *uart)
{
    int periphClock = 0;

    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10012750:	4b17      	ldr	r3, [pc, #92]	@ (100127b0 <MXC_UART_RevB_GetFrequency+0x60>)
10012752:	4298      	cmp	r0, r3
10012754:	d00b      	beq.n	1001276e <MXC_UART_RevB_GetFrequency+0x1e>
10012756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001275a:	4298      	cmp	r0, r3
1001275c:	d007      	beq.n	1001276e <MXC_UART_RevB_GetFrequency+0x1e>
1001275e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012762:	4298      	cmp	r0, r3
10012764:	d003      	beq.n	1001276e <MXC_UART_RevB_GetFrequency+0x1e>
10012766:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
1001276a:	4298      	cmp	r0, r3
1001276c:	d117      	bne.n	1001279e <MXC_UART_RevB_GetFrequency+0x4e>
        return E_BAD_PARAM;
    }

    if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) ==
1001276e:	6803      	ldr	r3, [r0, #0]
10012770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10012774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
10012778:	d014      	beq.n	100127a4 <MXC_UART_RevB_GetFrequency+0x54>
        MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK) {
        periphClock = UART_EXTCLK_FREQ;
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) ==
1001277a:	6803      	ldr	r3, [r0, #0]
1001277c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
10012780:	d106      	bne.n	10012790 <MXC_UART_RevB_GetFrequency+0x40>
               MXC_S_UART_REVB_CTRL_BCLKSRC_PERIPHERAL_CLOCK) {
        periphClock = PeripheralClock;
10012782:	4b0c      	ldr	r3, [pc, #48]	@ (100127b4 <MXC_UART_RevB_GetFrequency+0x64>)
10012784:	681b      	ldr	r3, [r3, #0]
10012786:	085b      	lsrs	r3, r3, #1
#endif
    } else {
        return E_BAD_PARAM;
    }

    return (periphClock / uart->clkdiv);
10012788:	6900      	ldr	r0, [r0, #16]
1001278a:	fbb3 f0f0 	udiv	r0, r3, r0
1001278e:	4770      	bx	lr
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) == MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2) {
10012790:	6803      	ldr	r3, [r0, #0]
10012792:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10012796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
1001279a:	d005      	beq.n	100127a8 <MXC_UART_RevB_GetFrequency+0x58>
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) == MXC_S_UART_REVB_CTRL_BCLKSRC_CLK3) {
1001279c:	6803      	ldr	r3, [r0, #0]
        return E_BAD_PARAM;
1001279e:	f06f 0002 	mvn.w	r0, #2
}
100127a2:	4770      	bx	lr
        periphClock = UART_EXTCLK_FREQ;
100127a4:	4b04      	ldr	r3, [pc, #16]	@ (100127b8 <MXC_UART_RevB_GetFrequency+0x68>)
100127a6:	e7ef      	b.n	10012788 <MXC_UART_RevB_GetFrequency+0x38>
        periphClock = IBRO_FREQ;
100127a8:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
100127ac:	e7ec      	b.n	10012788 <MXC_UART_RevB_GetFrequency+0x38>
100127ae:	bf00      	nop
100127b0:	40042000 	.word	0x40042000
100127b4:	20001898 	.word	0x20001898
100127b8:	047868c0 	.word	0x047868c0

100127bc <MXC_UART_RevB_SetDataSize>:

int MXC_UART_RevB_SetDataSize(mxc_uart_revb_regs_t *uart, int dataSize)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100127bc:	4b0e      	ldr	r3, [pc, #56]	@ (100127f8 <MXC_UART_RevB_SetDataSize+0x3c>)
100127be:	4298      	cmp	r0, r3
100127c0:	d00b      	beq.n	100127da <MXC_UART_RevB_SetDataSize+0x1e>
100127c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100127c6:	4298      	cmp	r0, r3
100127c8:	d007      	beq.n	100127da <MXC_UART_RevB_SetDataSize+0x1e>
100127ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100127ce:	4298      	cmp	r0, r3
100127d0:	d003      	beq.n	100127da <MXC_UART_RevB_SetDataSize+0x1e>
100127d2:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100127d6:	4298      	cmp	r0, r3
100127d8:	d10a      	bne.n	100127f0 <MXC_UART_RevB_SetDataSize+0x34>
        return E_BAD_PARAM;
    }

    if (dataSize < 5 || dataSize > 8) {
100127da:	3905      	subs	r1, #5
100127dc:	2903      	cmp	r1, #3
100127de:	d807      	bhi.n	100127f0 <MXC_UART_RevB_SetDataSize+0x34>
        return E_BAD_PARAM;
    }

    dataSize = (dataSize - 5) << MXC_F_UART_REVB_CTRL_CHAR_SIZE_POS;

    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_CHAR_SIZE, dataSize);
100127e0:	6803      	ldr	r3, [r0, #0]
100127e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
100127e6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
100127ea:	6003      	str	r3, [r0, #0]

    return E_NO_ERROR;
100127ec:	2000      	movs	r0, #0
100127ee:	4770      	bx	lr
        return E_BAD_PARAM;
100127f0:	f06f 0002 	mvn.w	r0, #2
}
100127f4:	4770      	bx	lr
100127f6:	bf00      	nop
100127f8:	40042000 	.word	0x40042000

100127fc <MXC_UART_RevB_SetStopBits>:

int MXC_UART_RevB_SetStopBits(mxc_uart_revb_regs_t *uart, mxc_uart_stop_t stopBits)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100127fc:	4b0f      	ldr	r3, [pc, #60]	@ (1001283c <MXC_UART_RevB_SetStopBits+0x40>)
100127fe:	4298      	cmp	r0, r3
10012800:	d00b      	beq.n	1001281a <MXC_UART_RevB_SetStopBits+0x1e>
10012802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012806:	4298      	cmp	r0, r3
10012808:	d007      	beq.n	1001281a <MXC_UART_RevB_SetStopBits+0x1e>
1001280a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001280e:	4298      	cmp	r0, r3
10012810:	d003      	beq.n	1001281a <MXC_UART_RevB_SetStopBits+0x1e>
10012812:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10012816:	4298      	cmp	r0, r3
10012818:	d102      	bne.n	10012820 <MXC_UART_RevB_SetStopBits+0x24>
        return E_BAD_PARAM;
    }

    switch (stopBits) {
1001281a:	b121      	cbz	r1, 10012826 <MXC_UART_RevB_SetStopBits+0x2a>
1001281c:	2901      	cmp	r1, #1
1001281e:	d008      	beq.n	10012832 <MXC_UART_RevB_SetStopBits+0x36>
10012820:	f06f 0002 	mvn.w	r0, #2
        return E_BAD_PARAM;
        break;
    }

    return E_NO_ERROR;
}
10012824:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_STOPBITS,
10012826:	6803      	ldr	r3, [r0, #0]
10012828:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1001282c:	6003      	str	r3, [r0, #0]
    return E_NO_ERROR;
1001282e:	2000      	movs	r0, #0
10012830:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_STOPBITS,
10012832:	6803      	ldr	r3, [r0, #0]
10012834:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
10012838:	e7f8      	b.n	1001282c <MXC_UART_RevB_SetStopBits+0x30>
1001283a:	bf00      	nop
1001283c:	40042000 	.word	0x40042000

10012840 <MXC_UART_RevB_SetParity>:

int MXC_UART_RevB_SetParity(mxc_uart_revb_regs_t *uart, mxc_uart_parity_t parity)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10012840:	4b23      	ldr	r3, [pc, #140]	@ (100128d0 <MXC_UART_RevB_SetParity+0x90>)
10012842:	4298      	cmp	r0, r3
10012844:	d00b      	beq.n	1001285e <MXC_UART_RevB_SetParity+0x1e>
10012846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001284a:	4298      	cmp	r0, r3
1001284c:	d007      	beq.n	1001285e <MXC_UART_RevB_SetParity+0x1e>
1001284e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012852:	4298      	cmp	r0, r3
10012854:	d003      	beq.n	1001285e <MXC_UART_RevB_SetParity+0x1e>
10012856:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
1001285a:	4298      	cmp	r0, r3
1001285c:	d134      	bne.n	100128c8 <MXC_UART_RevB_SetParity+0x88>
        return E_BAD_PARAM;
    }

    switch (parity) {
1001285e:	2904      	cmp	r1, #4
10012860:	d832      	bhi.n	100128c8 <MXC_UART_RevB_SetParity+0x88>
10012862:	e8df f001 	tbb	[pc, r1]
10012866:	0903      	.short	0x0903
10012868:	2115      	.short	0x2115
1001286a:	29          	.byte	0x29
1001286b:	00          	.byte	0x00
    case MXC_UART_PARITY_DISABLE:
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 0 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
1001286c:	6803      	ldr	r3, [r0, #0]
1001286e:	f023 0310 	bic.w	r3, r3, #16
10012872:	6003      	str	r3, [r0, #0]
    default:
        return E_BAD_PARAM;
        break;
    }

    return E_NO_ERROR;
10012874:	2000      	movs	r0, #0
10012876:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
10012878:	6803      	ldr	r3, [r0, #0]
1001287a:	f043 0310 	orr.w	r3, r3, #16
1001287e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 0 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10012880:	6803      	ldr	r3, [r0, #0]
10012882:	f023 0320 	bic.w	r3, r3, #32
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10012886:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 0 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
10012888:	6803      	ldr	r3, [r0, #0]
1001288a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
1001288e:	e7f0      	b.n	10012872 <MXC_UART_RevB_SetParity+0x32>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
10012890:	6803      	ldr	r3, [r0, #0]
10012892:	f043 0310 	orr.w	r3, r3, #16
10012896:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 0 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10012898:	6803      	ldr	r3, [r0, #0]
1001289a:	f023 0320 	bic.w	r3, r3, #32
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
1001289e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 1 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
100128a0:	6803      	ldr	r3, [r0, #0]
100128a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100128a6:	e7e4      	b.n	10012872 <MXC_UART_RevB_SetParity+0x32>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
100128a8:	6803      	ldr	r3, [r0, #0]
100128aa:	f043 0310 	orr.w	r3, r3, #16
100128ae:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
100128b0:	6803      	ldr	r3, [r0, #0]
100128b2:	f043 0320 	orr.w	r3, r3, #32
100128b6:	e7e6      	b.n	10012886 <MXC_UART_RevB_SetParity+0x46>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
100128b8:	6803      	ldr	r3, [r0, #0]
100128ba:	f043 0310 	orr.w	r3, r3, #16
100128be:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
100128c0:	6803      	ldr	r3, [r0, #0]
100128c2:	f043 0320 	orr.w	r3, r3, #32
100128c6:	e7ea      	b.n	1001289e <MXC_UART_RevB_SetParity+0x5e>
    switch (parity) {
100128c8:	f06f 0002 	mvn.w	r0, #2
}
100128cc:	4770      	bx	lr
100128ce:	bf00      	nop
100128d0:	40042000 	.word	0x40042000

100128d4 <MXC_UART_RevB_ReadCharacterRaw>:
    return E_NO_ERROR;
}

int MXC_UART_RevB_ReadCharacterRaw(mxc_uart_revb_regs_t *uart)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100128d4:	4b0c      	ldr	r3, [pc, #48]	@ (10012908 <MXC_UART_RevB_ReadCharacterRaw+0x34>)
100128d6:	4298      	cmp	r0, r3
100128d8:	d00b      	beq.n	100128f2 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
100128da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100128de:	4298      	cmp	r0, r3
100128e0:	d007      	beq.n	100128f2 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
100128e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100128e6:	4298      	cmp	r0, r3
100128e8:	d003      	beq.n	100128f2 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
100128ea:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100128ee:	4298      	cmp	r0, r3
100128f0:	d104      	bne.n	100128fc <MXC_UART_RevB_ReadCharacterRaw+0x28>
        return E_BAD_PARAM;
    }

    if (uart->status & MXC_F_UART_REVB_STATUS_RX_EM) {
100128f2:	6843      	ldr	r3, [r0, #4]
100128f4:	06db      	lsls	r3, r3, #27
100128f6:	d404      	bmi.n	10012902 <MXC_UART_RevB_ReadCharacterRaw+0x2e>
        return E_UNDERFLOW;
    }

    return uart->fifo;
100128f8:	6a00      	ldr	r0, [r0, #32]
100128fa:	4770      	bx	lr
        return E_BAD_PARAM;
100128fc:	f06f 0002 	mvn.w	r0, #2
10012900:	4770      	bx	lr
        return E_UNDERFLOW;
10012902:	f06f 000c 	mvn.w	r0, #12
}
10012906:	4770      	bx	lr
10012908:	40042000 	.word	0x40042000

1001290c <MXC_UART_RevB_WriteCharacterRaw>:

int MXC_UART_RevB_WriteCharacterRaw(mxc_uart_revb_regs_t *uart, uint8_t character)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001290c:	4b0d      	ldr	r3, [pc, #52]	@ (10012944 <MXC_UART_RevB_WriteCharacterRaw+0x38>)
1001290e:	4298      	cmp	r0, r3
{
10012910:	4602      	mov	r2, r0
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10012912:	d00b      	beq.n	1001292c <MXC_UART_RevB_WriteCharacterRaw+0x20>
10012914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012918:	4298      	cmp	r0, r3
1001291a:	d007      	beq.n	1001292c <MXC_UART_RevB_WriteCharacterRaw+0x20>
1001291c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012920:	4298      	cmp	r0, r3
10012922:	d003      	beq.n	1001292c <MXC_UART_RevB_WriteCharacterRaw+0x20>
10012924:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10012928:	4298      	cmp	r0, r3
1001292a:	d105      	bne.n	10012938 <MXC_UART_RevB_WriteCharacterRaw+0x2c>
        return E_BAD_PARAM;
    }

    // Require the TX FIFO to be empty, so that we write out the expected character
    // Return error if the FIFO is full
    if (uart->status & MXC_F_UART_REVB_STATUS_TX_FULL) {
1001292c:	6850      	ldr	r0, [r2, #4]
1001292e:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
10012932:	d104      	bne.n	1001293e <MXC_UART_RevB_WriteCharacterRaw+0x32>
        return E_OVERFLOW;
    }

    uart->fifo = character;
10012934:	6211      	str	r1, [r2, #32]

    return E_NO_ERROR;
10012936:	4770      	bx	lr
        return E_BAD_PARAM;
10012938:	f06f 0002 	mvn.w	r0, #2
1001293c:	4770      	bx	lr
        return E_OVERFLOW;
1001293e:	f06f 000b 	mvn.w	r0, #11
}
10012942:	4770      	bx	lr
10012944:	40042000 	.word	0x40042000

10012948 <MXC_UART_RevB_GetRXFIFOAvailable>:
    return read;
}

unsigned int MXC_UART_RevB_GetRXFIFOAvailable(mxc_uart_revb_regs_t *uart)
{
    return (uart->status & MXC_F_UART_REVB_STATUS_RX_LVL) >> MXC_F_UART_REVB_STATUS_RX_LVL_POS;
10012948:	6840      	ldr	r0, [r0, #4]
}
1001294a:	f3c0 2003 	ubfx	r0, r0, #8, #4
1001294e:	4770      	bx	lr

10012950 <MXC_UART_RevB_GetTXFIFOAvailable>:
    return written;
}

unsigned int MXC_UART_RevB_GetTXFIFOAvailable(mxc_uart_revb_regs_t *uart)
{
    int txCnt = (uart->status & MXC_F_UART_REVB_STATUS_TX_LVL) >> MXC_F_UART_REVB_STATUS_TX_LVL_POS;
10012950:	6840      	ldr	r0, [r0, #4]
10012952:	f3c0 3003 	ubfx	r0, r0, #12, #4
    return MXC_UART_FIFO_DEPTH - txCnt;
}
10012956:	f1c0 0008 	rsb	r0, r0, #8
1001295a:	4770      	bx	lr

1001295c <MXC_UART_RevB_SetRXThreshold>:
    return E_NO_ERROR;
}

int MXC_UART_RevB_SetRXThreshold(mxc_uart_revb_regs_t *uart, unsigned int numBytes)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001295c:	4b0d      	ldr	r3, [pc, #52]	@ (10012994 <MXC_UART_RevB_SetRXThreshold+0x38>)
1001295e:	4298      	cmp	r0, r3
10012960:	d00b      	beq.n	1001297a <MXC_UART_RevB_SetRXThreshold+0x1e>
10012962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10012966:	4298      	cmp	r0, r3
10012968:	d007      	beq.n	1001297a <MXC_UART_RevB_SetRXThreshold+0x1e>
1001296a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001296e:	4298      	cmp	r0, r3
10012970:	d003      	beq.n	1001297a <MXC_UART_RevB_SetRXThreshold+0x1e>
10012972:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10012976:	4298      	cmp	r0, r3
10012978:	d109      	bne.n	1001298e <MXC_UART_RevB_SetRXThreshold+0x32>
        return E_BAD_PARAM;
    }

    if (numBytes < 1 || numBytes > MXC_UART_FIFO_DEPTH) {
1001297a:	1e4b      	subs	r3, r1, #1
1001297c:	2b07      	cmp	r3, #7
1001297e:	d806      	bhi.n	1001298e <MXC_UART_RevB_SetRXThreshold+0x32>
        return E_BAD_PARAM;
    }

    numBytes <<= MXC_F_UART_REVB_CTRL_RX_THD_VAL_POS;
    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_RX_THD_VAL, numBytes);
10012980:	6803      	ldr	r3, [r0, #0]
10012982:	f023 030f 	bic.w	r3, r3, #15
10012986:	4319      	orrs	r1, r3
10012988:	6001      	str	r1, [r0, #0]

    return E_NO_ERROR;
1001298a:	2000      	movs	r0, #0
1001298c:	4770      	bx	lr
        return E_BAD_PARAM;
1001298e:	f06f 0002 	mvn.w	r0, #2
}
10012992:	4770      	bx	lr
10012994:	40042000 	.word	0x40042000

10012998 <MXC_GetLock>:
#include "mxc_lock.h"

#ifndef __riscv
/* ************************************************************************** */
int MXC_GetLock(uint32_t *lock, uint32_t value)
{
10012998:	4603      	mov	r3, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
1001299a:	e853 2f00 	ldrex	r2, [r3]
    do {
        // Return if the lock is taken by a different thread
        if (__LDREXW((volatile uint32_t *)lock) != 0) {
1001299e:	b932      	cbnz	r2, 100129ae <MXC_GetLock+0x16>
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
100129a0:	e843 1000 	strex	r0, r1, [r3]
            return E_BUSY;
        }

        // Attempt to take the lock
    } while (__STREXW(value, (volatile uint32_t *)lock) != 0);
100129a4:	2800      	cmp	r0, #0
100129a6:	d1f8      	bne.n	1001299a <MXC_GetLock+0x2>
  __ASM volatile ("dmb 0xF":::"memory");
100129a8:	f3bf 8f5f 	dmb	sy

    // Do not start any other memory access until memory barrier is complete
    __DMB();

    return E_NO_ERROR;
100129ac:	4770      	bx	lr
            return E_BUSY;
100129ae:	f06f 0005 	mvn.w	r0, #5
}
100129b2:	4770      	bx	lr

100129b4 <MXC_FreeLock>:
100129b4:	f3bf 8f5f 	dmb	sy
/* ************************************************************************** */
void MXC_FreeLock(uint32_t *lock)
{
    // Ensure memory operations complete before releasing lock
    __DMB();
    *lock = 0;
100129b8:	2300      	movs	r3, #0
100129ba:	6003      	str	r3, [r0, #0]
}
100129bc:	4770      	bx	lr
	...

100129c0 <MXC_GPIO_Common_Init>:
static void *cbparam[MXC_CFG_GPIO_INSTANCES][MXC_CFG_GPIO_PINS_PORT];
static uint8_t initialized = 0;

/* **** Functions **** */
int MXC_GPIO_Common_Init(uint32_t portmask)
{
100129c0:	b510      	push	{r4, lr}
    if (!initialized) {
100129c2:	4c06      	ldr	r4, [pc, #24]	@ (100129dc <MXC_GPIO_Common_Init+0x1c>)
100129c4:	7821      	ldrb	r1, [r4, #0]
100129c6:	b931      	cbnz	r1, 100129d6 <MXC_GPIO_Common_Init+0x16>
        int i, j;

        for (i = 0; i < MXC_CFG_GPIO_INSTANCES; i++) {
            // Initialize call back arrays
            for (j = 0; j < MXC_CFG_GPIO_PINS_PORT; j++) {
                callback[i][j] = NULL;
100129c8:	4805      	ldr	r0, [pc, #20]	@ (100129e0 <MXC_GPIO_Common_Init+0x20>)
100129ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
100129ce:	f004 f905 	bl	10016bdc <memset>
            }
        }

        initialized = 1;
100129d2:	2301      	movs	r3, #1
100129d4:	7023      	strb	r3, [r4, #0]
    }

    return E_NO_ERROR;
}
100129d6:	2000      	movs	r0, #0
100129d8:	bd10      	pop	{r4, pc}
100129da:	bf00      	nop
100129dc:	20001180 	.word	0x20001180
100129e0:	20001384 	.word	0x20001384

100129e4 <MXC_GPIO_Common_Handler>:
    uint32_t stat;
    unsigned int pin;

    MXC_ASSERT(port < MXC_CFG_GPIO_INSTANCES);

    mxc_gpio_regs_t *gpio = MXC_GPIO_GET_GPIO(port);
100129e4:	2803      	cmp	r0, #3
100129e6:	bf98      	it	ls
100129e8:	4b10      	ldrls	r3, [pc, #64]	@ (10012a2c <MXC_GPIO_Common_Handler+0x48>)
{
100129ea:	b570      	push	{r4, r5, r6, lr}
100129ec:	bf94      	ite	ls
100129ee:	f853 6020 	ldrls.w	r6, [r3, r0, lsl #2]
100129f2:	2600      	movhi	r6, #0
100129f4:	4605      	mov	r5, r0

    stat = MXC_GPIO_GetFlags(gpio);
100129f6:	4630      	mov	r0, r6
100129f8:	f7ff f96e 	bl	10011cd8 <MXC_GPIO_GetFlags>
    MXC_GPIO_ClearFlags(gpio, stat);
100129fc:	4601      	mov	r1, r0
    stat = MXC_GPIO_GetFlags(gpio);
100129fe:	4604      	mov	r4, r0
    MXC_GPIO_ClearFlags(gpio, stat);
10012a00:	4630      	mov	r0, r6
10012a02:	f7ff f95d 	bl	10011cc0 <MXC_GPIO_ClearFlags>

    pin = 0;

    while (stat) {
10012a06:	4e0a      	ldr	r6, [pc, #40]	@ (10012a30 <MXC_GPIO_Common_Handler+0x4c>)
10012a08:	4b0a      	ldr	r3, [pc, #40]	@ (10012a34 <MXC_GPIO_Common_Handler+0x50>)
10012a0a:	eb06 16c5 	add.w	r6, r6, r5, lsl #7
10012a0e:	eb03 15c5 	add.w	r5, r3, r5, lsl #7
10012a12:	b904      	cbnz	r4, 10012a16 <MXC_GPIO_Common_Handler+0x32>
        }

        pin++;
        stat >>= 1;
    }
}
10012a14:	bd70      	pop	{r4, r5, r6, pc}
        if (stat & 1) {
10012a16:	07e3      	lsls	r3, r4, #31
10012a18:	d503      	bpl.n	10012a22 <MXC_GPIO_Common_Handler+0x3e>
            if (callback[port][pin]) {
10012a1a:	682b      	ldr	r3, [r5, #0]
10012a1c:	b10b      	cbz	r3, 10012a22 <MXC_GPIO_Common_Handler+0x3e>
                callback[port][pin](cbparam[port][pin]);
10012a1e:	6830      	ldr	r0, [r6, #0]
10012a20:	4798      	blx	r3
        stat >>= 1;
10012a22:	0864      	lsrs	r4, r4, #1
10012a24:	3604      	adds	r6, #4
10012a26:	3504      	adds	r5, #4
10012a28:	e7f3      	b.n	10012a12 <MXC_GPIO_Common_Handler+0x2e>
10012a2a:	bf00      	nop
10012a2c:	10023a28 	.word	0x10023a28
10012a30:	20001184 	.word	0x20001184
10012a34:	20001384 	.word	0x20001384

10012a38 <calloc>:
10012a38:	b410      	push	{r4}
10012a3a:	4c04      	ldr	r4, [pc, #16]	@ (10012a4c <calloc+0x14>)
10012a3c:	4603      	mov	r3, r0
10012a3e:	460a      	mov	r2, r1
10012a40:	6820      	ldr	r0, [r4, #0]
10012a42:	f85d 4b04 	ldr.w	r4, [sp], #4
10012a46:	4619      	mov	r1, r3
10012a48:	f000 b802 	b.w	10012a50 <_calloc_r>
10012a4c:	20000600 	.word	0x20000600

10012a50 <_calloc_r>:
10012a50:	b538      	push	{r3, r4, r5, lr}
10012a52:	fba1 1402 	umull	r1, r4, r1, r2
10012a56:	bb54      	cbnz	r4, 10012aae <_calloc_r+0x5e>
10012a58:	f000 f840 	bl	10012adc <_malloc_r>
10012a5c:	4605      	mov	r5, r0
10012a5e:	b350      	cbz	r0, 10012ab6 <_calloc_r+0x66>
10012a60:	f850 2c04 	ldr.w	r2, [r0, #-4]
10012a64:	f022 0203 	bic.w	r2, r2, #3
10012a68:	3a04      	subs	r2, #4
10012a6a:	2a24      	cmp	r2, #36	@ 0x24
10012a6c:	d810      	bhi.n	10012a90 <_calloc_r+0x40>
10012a6e:	2a13      	cmp	r2, #19
10012a70:	d913      	bls.n	10012a9a <_calloc_r+0x4a>
10012a72:	2a1b      	cmp	r2, #27
10012a74:	6004      	str	r4, [r0, #0]
10012a76:	6044      	str	r4, [r0, #4]
10012a78:	d916      	bls.n	10012aa8 <_calloc_r+0x58>
10012a7a:	2a24      	cmp	r2, #36	@ 0x24
10012a7c:	6084      	str	r4, [r0, #8]
10012a7e:	60c4      	str	r4, [r0, #12]
10012a80:	bf11      	iteee	ne
10012a82:	f100 0210 	addne.w	r2, r0, #16
10012a86:	f100 0218 	addeq.w	r2, r0, #24
10012a8a:	6104      	streq	r4, [r0, #16]
10012a8c:	6144      	streq	r4, [r0, #20]
10012a8e:	e005      	b.n	10012a9c <_calloc_r+0x4c>
10012a90:	4621      	mov	r1, r4
10012a92:	f004 f8a3 	bl	10016bdc <memset>
10012a96:	4628      	mov	r0, r5
10012a98:	bd38      	pop	{r3, r4, r5, pc}
10012a9a:	4602      	mov	r2, r0
10012a9c:	2300      	movs	r3, #0
10012a9e:	6013      	str	r3, [r2, #0]
10012aa0:	6053      	str	r3, [r2, #4]
10012aa2:	6093      	str	r3, [r2, #8]
10012aa4:	4628      	mov	r0, r5
10012aa6:	bd38      	pop	{r3, r4, r5, pc}
10012aa8:	f100 0208 	add.w	r2, r0, #8
10012aac:	e7f6      	b.n	10012a9c <_calloc_r+0x4c>
10012aae:	f004 f937 	bl	10016d20 <__errno>
10012ab2:	230c      	movs	r3, #12
10012ab4:	6003      	str	r3, [r0, #0]
10012ab6:	2500      	movs	r5, #0
10012ab8:	4628      	mov	r0, r5
10012aba:	bd38      	pop	{r3, r4, r5, pc}

10012abc <malloc>:
10012abc:	4b02      	ldr	r3, [pc, #8]	@ (10012ac8 <malloc+0xc>)
10012abe:	4601      	mov	r1, r0
10012ac0:	6818      	ldr	r0, [r3, #0]
10012ac2:	f000 b80b 	b.w	10012adc <_malloc_r>
10012ac6:	bf00      	nop
10012ac8:	20000600 	.word	0x20000600

10012acc <free>:
10012acc:	4b02      	ldr	r3, [pc, #8]	@ (10012ad8 <free+0xc>)
10012ace:	4601      	mov	r1, r0
10012ad0:	6818      	ldr	r0, [r3, #0]
10012ad2:	f005 bb6f 	b.w	100181b4 <_free_r>
10012ad6:	bf00      	nop
10012ad8:	20000600 	.word	0x20000600

10012adc <_malloc_r>:
10012adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10012ae0:	f101 050b 	add.w	r5, r1, #11
10012ae4:	2d16      	cmp	r5, #22
10012ae6:	b085      	sub	sp, #20
10012ae8:	4606      	mov	r6, r0
10012aea:	d824      	bhi.n	10012b36 <_malloc_r+0x5a>
10012aec:	2910      	cmp	r1, #16
10012aee:	f200 80b1 	bhi.w	10012c54 <_malloc_r+0x178>
10012af2:	f003 f985 	bl	10015e00 <__malloc_lock>
10012af6:	2510      	movs	r5, #16
10012af8:	2318      	movs	r3, #24
10012afa:	f04f 0c02 	mov.w	ip, #2
10012afe:	4fba      	ldr	r7, [pc, #744]	@ (10012de8 <_malloc_r+0x30c>)
10012b00:	443b      	add	r3, r7
10012b02:	f1a3 0208 	sub.w	r2, r3, #8
10012b06:	685c      	ldr	r4, [r3, #4]
10012b08:	4294      	cmp	r4, r2
10012b0a:	f000 8122 	beq.w	10012d52 <_malloc_r+0x276>
10012b0e:	6863      	ldr	r3, [r4, #4]
10012b10:	68e2      	ldr	r2, [r4, #12]
10012b12:	68a1      	ldr	r1, [r4, #8]
10012b14:	f023 0303 	bic.w	r3, r3, #3
10012b18:	60ca      	str	r2, [r1, #12]
10012b1a:	4423      	add	r3, r4
10012b1c:	4630      	mov	r0, r6
10012b1e:	6091      	str	r1, [r2, #8]
10012b20:	685a      	ldr	r2, [r3, #4]
10012b22:	f042 0201 	orr.w	r2, r2, #1
10012b26:	605a      	str	r2, [r3, #4]
10012b28:	3408      	adds	r4, #8
10012b2a:	f003 f96f 	bl	10015e0c <__malloc_unlock>
10012b2e:	4620      	mov	r0, r4
10012b30:	b005      	add	sp, #20
10012b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10012b36:	f035 0507 	bics.w	r5, r5, #7
10012b3a:	f100 808b 	bmi.w	10012c54 <_malloc_r+0x178>
10012b3e:	42a9      	cmp	r1, r5
10012b40:	f200 8088 	bhi.w	10012c54 <_malloc_r+0x178>
10012b44:	f003 f95c 	bl	10015e00 <__malloc_lock>
10012b48:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
10012b4c:	f0c0 8173 	bcc.w	10012e36 <_malloc_r+0x35a>
10012b50:	0a6b      	lsrs	r3, r5, #9
10012b52:	f000 8083 	beq.w	10012c5c <_malloc_r+0x180>
10012b56:	2b04      	cmp	r3, #4
10012b58:	f200 8122 	bhi.w	10012da0 <_malloc_r+0x2c4>
10012b5c:	09ab      	lsrs	r3, r5, #6
10012b5e:	f103 0c39 	add.w	ip, r3, #57	@ 0x39
10012b62:	f103 0e38 	add.w	lr, r3, #56	@ 0x38
10012b66:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10012b6a:	4f9f      	ldr	r7, [pc, #636]	@ (10012de8 <_malloc_r+0x30c>)
10012b6c:	443b      	add	r3, r7
10012b6e:	f1a3 0008 	sub.w	r0, r3, #8
10012b72:	685c      	ldr	r4, [r3, #4]
10012b74:	42a0      	cmp	r0, r4
10012b76:	d107      	bne.n	10012b88 <_malloc_r+0xac>
10012b78:	e00d      	b.n	10012b96 <_malloc_r+0xba>
10012b7a:	2a00      	cmp	r2, #0
10012b7c:	68e1      	ldr	r1, [r4, #12]
10012b7e:	f280 80e2 	bge.w	10012d46 <_malloc_r+0x26a>
10012b82:	4288      	cmp	r0, r1
10012b84:	d007      	beq.n	10012b96 <_malloc_r+0xba>
10012b86:	460c      	mov	r4, r1
10012b88:	6863      	ldr	r3, [r4, #4]
10012b8a:	f023 0303 	bic.w	r3, r3, #3
10012b8e:	1b5a      	subs	r2, r3, r5
10012b90:	2a0f      	cmp	r2, #15
10012b92:	ddf2      	ble.n	10012b7a <_malloc_r+0x9e>
10012b94:	46f4      	mov	ip, lr
10012b96:	f8df 8264 	ldr.w	r8, [pc, #612]	@ 10012dfc <_malloc_r+0x320>
10012b9a:	693c      	ldr	r4, [r7, #16]
10012b9c:	4544      	cmp	r4, r8
10012b9e:	f000 80bf 	beq.w	10012d20 <_malloc_r+0x244>
10012ba2:	6863      	ldr	r3, [r4, #4]
10012ba4:	f023 0903 	bic.w	r9, r3, #3
10012ba8:	eba9 0305 	sub.w	r3, r9, r5
10012bac:	2b0f      	cmp	r3, #15
10012bae:	f300 8147 	bgt.w	10012e40 <_malloc_r+0x364>
10012bb2:	2b00      	cmp	r3, #0
10012bb4:	e9c7 8804 	strd	r8, r8, [r7, #16]
10012bb8:	f280 8131 	bge.w	10012e1e <_malloc_r+0x342>
10012bbc:	f5b9 7f00 	cmp.w	r9, #512	@ 0x200
10012bc0:	f8d7 e004 	ldr.w	lr, [r7, #4]
10012bc4:	f080 80cc 	bcs.w	10012d60 <_malloc_r+0x284>
10012bc8:	ea4f 01d9 	mov.w	r1, r9, lsr #3
10012bcc:	3101      	adds	r1, #1
10012bce:	ea4f 1959 	mov.w	r9, r9, lsr #5
10012bd2:	2301      	movs	r3, #1
10012bd4:	fa03 f309 	lsl.w	r3, r3, r9
10012bd8:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
10012bdc:	60a2      	str	r2, [r4, #8]
10012bde:	ea4e 0e03 	orr.w	lr, lr, r3
10012be2:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
10012be6:	3b08      	subs	r3, #8
10012be8:	60e3      	str	r3, [r4, #12]
10012bea:	f8c7 e004 	str.w	lr, [r7, #4]
10012bee:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
10012bf2:	60d4      	str	r4, [r2, #12]
10012bf4:	ea4f 03ac 	mov.w	r3, ip, asr #2
10012bf8:	2001      	movs	r0, #1
10012bfa:	4098      	lsls	r0, r3
10012bfc:	4570      	cmp	r0, lr
10012bfe:	d834      	bhi.n	10012c6a <_malloc_r+0x18e>
10012c00:	ea10 0f0e 	tst.w	r0, lr
10012c04:	d107      	bne.n	10012c16 <_malloc_r+0x13a>
10012c06:	f02c 0c03 	bic.w	ip, ip, #3
10012c0a:	0040      	lsls	r0, r0, #1
10012c0c:	ea10 0f0e 	tst.w	r0, lr
10012c10:	f10c 0c04 	add.w	ip, ip, #4
10012c14:	d0f9      	beq.n	10012c0a <_malloc_r+0x12e>
10012c16:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
10012c1a:	4652      	mov	r2, sl
10012c1c:	46e1      	mov	r9, ip
10012c1e:	68d1      	ldr	r1, [r2, #12]
10012c20:	e00e      	b.n	10012c40 <_malloc_r+0x164>
10012c22:	684b      	ldr	r3, [r1, #4]
10012c24:	f023 0303 	bic.w	r3, r3, #3
10012c28:	eba3 0e05 	sub.w	lr, r3, r5
10012c2c:	f1be 0f0f 	cmp.w	lr, #15
10012c30:	460c      	mov	r4, r1
10012c32:	68c9      	ldr	r1, [r1, #12]
10012c34:	f300 80c1 	bgt.w	10012dba <_malloc_r+0x2de>
10012c38:	f1be 0f00 	cmp.w	lr, #0
10012c3c:	f280 80e2 	bge.w	10012e04 <_malloc_r+0x328>
10012c40:	428a      	cmp	r2, r1
10012c42:	d1ee      	bne.n	10012c22 <_malloc_r+0x146>
10012c44:	f109 0901 	add.w	r9, r9, #1
10012c48:	f019 0f03 	tst.w	r9, #3
10012c4c:	f102 0208 	add.w	r2, r2, #8
10012c50:	d1e5      	bne.n	10012c1e <_malloc_r+0x142>
10012c52:	e121      	b.n	10012e98 <_malloc_r+0x3bc>
10012c54:	230c      	movs	r3, #12
10012c56:	6033      	str	r3, [r6, #0]
10012c58:	2400      	movs	r4, #0
10012c5a:	e768      	b.n	10012b2e <_malloc_r+0x52>
10012c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
10012c60:	f04f 0c40 	mov.w	ip, #64	@ 0x40
10012c64:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
10012c68:	e77f      	b.n	10012b6a <_malloc_r+0x8e>
10012c6a:	68bc      	ldr	r4, [r7, #8]
10012c6c:	6863      	ldr	r3, [r4, #4]
10012c6e:	f023 0903 	bic.w	r9, r3, #3
10012c72:	45a9      	cmp	r9, r5
10012c74:	d303      	bcc.n	10012c7e <_malloc_r+0x1a2>
10012c76:	eba9 0305 	sub.w	r3, r9, r5
10012c7a:	2b0f      	cmp	r3, #15
10012c7c:	dc53      	bgt.n	10012d26 <_malloc_r+0x24a>
10012c7e:	4b5b      	ldr	r3, [pc, #364]	@ (10012dec <_malloc_r+0x310>)
10012c80:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 10012e00 <_malloc_r+0x324>
10012c84:	681b      	ldr	r3, [r3, #0]
10012c86:	2008      	movs	r0, #8
10012c88:	f103 0810 	add.w	r8, r3, #16
10012c8c:	f004 f84e 	bl	10016d2c <sysconf>
10012c90:	f8db 3000 	ldr.w	r3, [fp]
10012c94:	9001      	str	r0, [sp, #4]
10012c96:	3301      	adds	r3, #1
10012c98:	44a8      	add	r8, r5
10012c9a:	eb04 0209 	add.w	r2, r4, r9
10012c9e:	d005      	beq.n	10012cac <_malloc_r+0x1d0>
10012ca0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
10012ca4:	4480      	add	r8, r0
10012ca6:	4243      	negs	r3, r0
10012ca8:	ea03 0808 	and.w	r8, r3, r8
10012cac:	4641      	mov	r1, r8
10012cae:	4630      	mov	r0, r6
10012cb0:	9202      	str	r2, [sp, #8]
10012cb2:	f004 f823 	bl	10016cfc <_sbrk_r>
10012cb6:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
10012cba:	9a02      	ldr	r2, [sp, #8]
10012cbc:	4682      	mov	sl, r0
10012cbe:	f000 80dc 	beq.w	10012e7a <_malloc_r+0x39e>
10012cc2:	4282      	cmp	r2, r0
10012cc4:	f200 80d7 	bhi.w	10012e76 <_malloc_r+0x39a>
10012cc8:	4b49      	ldr	r3, [pc, #292]	@ (10012df0 <_malloc_r+0x314>)
10012cca:	9901      	ldr	r1, [sp, #4]
10012ccc:	6818      	ldr	r0, [r3, #0]
10012cce:	4440      	add	r0, r8
10012cd0:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
10012cd4:	6018      	str	r0, [r3, #0]
10012cd6:	4684      	mov	ip, r0
10012cd8:	f040 80fc 	bne.w	10012ed4 <_malloc_r+0x3f8>
10012cdc:	ea1a 0f01 	tst.w	sl, r1
10012ce0:	f040 80f8 	bne.w	10012ed4 <_malloc_r+0x3f8>
10012ce4:	f8d7 a008 	ldr.w	sl, [r7, #8]
10012ce8:	44c8      	add	r8, r9
10012cea:	f048 0201 	orr.w	r2, r8, #1
10012cee:	f8ca 2004 	str.w	r2, [sl, #4]
10012cf2:	4b40      	ldr	r3, [pc, #256]	@ (10012df4 <_malloc_r+0x318>)
10012cf4:	6819      	ldr	r1, [r3, #0]
10012cf6:	4281      	cmp	r1, r0
10012cf8:	bf38      	it	cc
10012cfa:	6018      	strcc	r0, [r3, #0]
10012cfc:	4b3e      	ldr	r3, [pc, #248]	@ (10012df8 <_malloc_r+0x31c>)
10012cfe:	6819      	ldr	r1, [r3, #0]
10012d00:	4281      	cmp	r1, r0
10012d02:	bf38      	it	cc
10012d04:	6018      	strcc	r0, [r3, #0]
10012d06:	4654      	mov	r4, sl
10012d08:	f022 0803 	bic.w	r8, r2, #3
10012d0c:	45a8      	cmp	r8, r5
10012d0e:	eba8 0305 	sub.w	r3, r8, r5
10012d12:	d301      	bcc.n	10012d18 <_malloc_r+0x23c>
10012d14:	2b0f      	cmp	r3, #15
10012d16:	dc06      	bgt.n	10012d26 <_malloc_r+0x24a>
10012d18:	4630      	mov	r0, r6
10012d1a:	f003 f877 	bl	10015e0c <__malloc_unlock>
10012d1e:	e79b      	b.n	10012c58 <_malloc_r+0x17c>
10012d20:	f8d7 e004 	ldr.w	lr, [r7, #4]
10012d24:	e766      	b.n	10012bf4 <_malloc_r+0x118>
10012d26:	1962      	adds	r2, r4, r5
10012d28:	f043 0301 	orr.w	r3, r3, #1
10012d2c:	f045 0501 	orr.w	r5, r5, #1
10012d30:	6065      	str	r5, [r4, #4]
10012d32:	4630      	mov	r0, r6
10012d34:	60ba      	str	r2, [r7, #8]
10012d36:	6053      	str	r3, [r2, #4]
10012d38:	f003 f868 	bl	10015e0c <__malloc_unlock>
10012d3c:	3408      	adds	r4, #8
10012d3e:	4620      	mov	r0, r4
10012d40:	b005      	add	sp, #20
10012d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10012d46:	68a2      	ldr	r2, [r4, #8]
10012d48:	4423      	add	r3, r4
10012d4a:	60d1      	str	r1, [r2, #12]
10012d4c:	4630      	mov	r0, r6
10012d4e:	608a      	str	r2, [r1, #8]
10012d50:	e6e6      	b.n	10012b20 <_malloc_r+0x44>
10012d52:	68dc      	ldr	r4, [r3, #12]
10012d54:	42a3      	cmp	r3, r4
10012d56:	f47f aeda 	bne.w	10012b0e <_malloc_r+0x32>
10012d5a:	f10c 0c02 	add.w	ip, ip, #2
10012d5e:	e71a      	b.n	10012b96 <_malloc_r+0xba>
10012d60:	f5b9 6f20 	cmp.w	r9, #2560	@ 0xa00
10012d64:	ea4f 2259 	mov.w	r2, r9, lsr #9
10012d68:	d37e      	bcc.n	10012e68 <_malloc_r+0x38c>
10012d6a:	2a14      	cmp	r2, #20
10012d6c:	f200 8115 	bhi.w	10012f9a <_malloc_r+0x4be>
10012d70:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
10012d74:	00db      	lsls	r3, r3, #3
10012d76:	325b      	adds	r2, #91	@ 0x5b
10012d78:	18f9      	adds	r1, r7, r3
10012d7a:	58fb      	ldr	r3, [r7, r3]
10012d7c:	3908      	subs	r1, #8
10012d7e:	4299      	cmp	r1, r3
10012d80:	d103      	bne.n	10012d8a <_malloc_r+0x2ae>
10012d82:	e0f0      	b.n	10012f66 <_malloc_r+0x48a>
10012d84:	689b      	ldr	r3, [r3, #8]
10012d86:	4299      	cmp	r1, r3
10012d88:	d004      	beq.n	10012d94 <_malloc_r+0x2b8>
10012d8a:	685a      	ldr	r2, [r3, #4]
10012d8c:	f022 0203 	bic.w	r2, r2, #3
10012d90:	454a      	cmp	r2, r9
10012d92:	d8f7      	bhi.n	10012d84 <_malloc_r+0x2a8>
10012d94:	68d9      	ldr	r1, [r3, #12]
10012d96:	e9c4 3102 	strd	r3, r1, [r4, #8]
10012d9a:	608c      	str	r4, [r1, #8]
10012d9c:	60dc      	str	r4, [r3, #12]
10012d9e:	e729      	b.n	10012bf4 <_malloc_r+0x118>
10012da0:	2b14      	cmp	r3, #20
10012da2:	d96d      	bls.n	10012e80 <_malloc_r+0x3a4>
10012da4:	2b54      	cmp	r3, #84	@ 0x54
10012da6:	f200 8101 	bhi.w	10012fac <_malloc_r+0x4d0>
10012daa:	0b2b      	lsrs	r3, r5, #12
10012dac:	f103 0c6f 	add.w	ip, r3, #111	@ 0x6f
10012db0:	f103 0e6e 	add.w	lr, r3, #110	@ 0x6e
10012db4:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10012db8:	e6d7      	b.n	10012b6a <_malloc_r+0x8e>
10012dba:	4630      	mov	r0, r6
10012dbc:	68a6      	ldr	r6, [r4, #8]
10012dbe:	1962      	adds	r2, r4, r5
10012dc0:	f045 0501 	orr.w	r5, r5, #1
10012dc4:	6065      	str	r5, [r4, #4]
10012dc6:	60f1      	str	r1, [r6, #12]
10012dc8:	608e      	str	r6, [r1, #8]
10012dca:	f04e 0101 	orr.w	r1, lr, #1
10012dce:	e9c7 2204 	strd	r2, r2, [r7, #16]
10012dd2:	f8c2 8008 	str.w	r8, [r2, #8]
10012dd6:	f8c2 800c 	str.w	r8, [r2, #12]
10012dda:	6051      	str	r1, [r2, #4]
10012ddc:	f844 e003 	str.w	lr, [r4, r3]
10012de0:	f003 f814 	bl	10015e0c <__malloc_unlock>
10012de4:	3408      	adds	r4, #8
10012de6:	e6a2      	b.n	10012b2e <_malloc_r+0x52>
10012de8:	20000080 	.word	0x20000080
10012dec:	200015b4 	.word	0x200015b4
10012df0:	20001584 	.word	0x20001584
10012df4:	200015b0 	.word	0x200015b0
10012df8:	200015ac 	.word	0x200015ac
10012dfc:	20000088 	.word	0x20000088
10012e00:	20000078 	.word	0x20000078
10012e04:	4423      	add	r3, r4
10012e06:	4630      	mov	r0, r6
10012e08:	685a      	ldr	r2, [r3, #4]
10012e0a:	f042 0201 	orr.w	r2, r2, #1
10012e0e:	605a      	str	r2, [r3, #4]
10012e10:	f854 3f08 	ldr.w	r3, [r4, #8]!
10012e14:	60d9      	str	r1, [r3, #12]
10012e16:	608b      	str	r3, [r1, #8]
10012e18:	f002 fff8 	bl	10015e0c <__malloc_unlock>
10012e1c:	e687      	b.n	10012b2e <_malloc_r+0x52>
10012e1e:	44a1      	add	r9, r4
10012e20:	4630      	mov	r0, r6
10012e22:	f8d9 3004 	ldr.w	r3, [r9, #4]
10012e26:	f043 0301 	orr.w	r3, r3, #1
10012e2a:	f8c9 3004 	str.w	r3, [r9, #4]
10012e2e:	3408      	adds	r4, #8
10012e30:	f002 ffec 	bl	10015e0c <__malloc_unlock>
10012e34:	e67b      	b.n	10012b2e <_malloc_r+0x52>
10012e36:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
10012e3a:	f105 0308 	add.w	r3, r5, #8
10012e3e:	e65e      	b.n	10012afe <_malloc_r+0x22>
10012e40:	1962      	adds	r2, r4, r5
10012e42:	f043 0101 	orr.w	r1, r3, #1
10012e46:	f045 0501 	orr.w	r5, r5, #1
10012e4a:	6065      	str	r5, [r4, #4]
10012e4c:	4630      	mov	r0, r6
10012e4e:	e9c7 2204 	strd	r2, r2, [r7, #16]
10012e52:	f8c2 8008 	str.w	r8, [r2, #8]
10012e56:	f8c2 800c 	str.w	r8, [r2, #12]
10012e5a:	6051      	str	r1, [r2, #4]
10012e5c:	f844 3009 	str.w	r3, [r4, r9]
10012e60:	f002 ffd4 	bl	10015e0c <__malloc_unlock>
10012e64:	3408      	adds	r4, #8
10012e66:	e662      	b.n	10012b2e <_malloc_r+0x52>
10012e68:	ea4f 1299 	mov.w	r2, r9, lsr #6
10012e6c:	f102 0339 	add.w	r3, r2, #57	@ 0x39
10012e70:	00db      	lsls	r3, r3, #3
10012e72:	3238      	adds	r2, #56	@ 0x38
10012e74:	e780      	b.n	10012d78 <_malloc_r+0x29c>
10012e76:	42bc      	cmp	r4, r7
10012e78:	d024      	beq.n	10012ec4 <_malloc_r+0x3e8>
10012e7a:	68bc      	ldr	r4, [r7, #8]
10012e7c:	6862      	ldr	r2, [r4, #4]
10012e7e:	e743      	b.n	10012d08 <_malloc_r+0x22c>
10012e80:	f103 0c5c 	add.w	ip, r3, #92	@ 0x5c
10012e84:	f103 0e5b 	add.w	lr, r3, #91	@ 0x5b
10012e88:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10012e8c:	e66d      	b.n	10012b6a <_malloc_r+0x8e>
10012e8e:	f85a 3908 	ldr.w	r3, [sl], #-8
10012e92:	4553      	cmp	r3, sl
10012e94:	f040 80d8 	bne.w	10013048 <_malloc_r+0x56c>
10012e98:	f01c 0f03 	tst.w	ip, #3
10012e9c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
10012ea0:	d1f5      	bne.n	10012e8e <_malloc_r+0x3b2>
10012ea2:	687b      	ldr	r3, [r7, #4]
10012ea4:	ea23 0300 	bic.w	r3, r3, r0
10012ea8:	607b      	str	r3, [r7, #4]
10012eaa:	0040      	lsls	r0, r0, #1
10012eac:	4298      	cmp	r0, r3
10012eae:	f63f aedc 	bhi.w	10012c6a <_malloc_r+0x18e>
10012eb2:	b918      	cbnz	r0, 10012ebc <_malloc_r+0x3e0>
10012eb4:	e6d9      	b.n	10012c6a <_malloc_r+0x18e>
10012eb6:	0040      	lsls	r0, r0, #1
10012eb8:	f109 0904 	add.w	r9, r9, #4
10012ebc:	4218      	tst	r0, r3
10012ebe:	d0fa      	beq.n	10012eb6 <_malloc_r+0x3da>
10012ec0:	46cc      	mov	ip, r9
10012ec2:	e6a8      	b.n	10012c16 <_malloc_r+0x13a>
10012ec4:	4b61      	ldr	r3, [pc, #388]	@ (1001304c <_malloc_r+0x570>)
10012ec6:	9901      	ldr	r1, [sp, #4]
10012ec8:	6818      	ldr	r0, [r3, #0]
10012eca:	eb08 0c00 	add.w	ip, r8, r0
10012ece:	3901      	subs	r1, #1
10012ed0:	f8c3 c000 	str.w	ip, [r3]
10012ed4:	f8db 0000 	ldr.w	r0, [fp]
10012ed8:	3001      	adds	r0, #1
10012eda:	bf1b      	ittet	ne
10012edc:	ebaa 0202 	subne.w	r2, sl, r2
10012ee0:	4462      	addne	r2, ip
10012ee2:	f8cb a000 	streq.w	sl, [fp]
10012ee6:	601a      	strne	r2, [r3, #0]
10012ee8:	f01a 0207 	ands.w	r2, sl, #7
10012eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
10012ef0:	d042      	beq.n	10012f78 <_malloc_r+0x49c>
10012ef2:	f1c2 0208 	rsb	r2, r2, #8
10012ef6:	9b01      	ldr	r3, [sp, #4]
10012ef8:	4492      	add	sl, r2
10012efa:	44d0      	add	r8, sl
10012efc:	4413      	add	r3, r2
10012efe:	ea08 0001 	and.w	r0, r8, r1
10012f02:	1a1a      	subs	r2, r3, r0
10012f04:	ea02 0b01 	and.w	fp, r2, r1
10012f08:	4659      	mov	r1, fp
10012f0a:	4630      	mov	r0, r6
10012f0c:	f003 fef6 	bl	10016cfc <_sbrk_r>
10012f10:	1c42      	adds	r2, r0, #1
10012f12:	9b03      	ldr	r3, [sp, #12]
10012f14:	d07a      	beq.n	1001300c <_malloc_r+0x530>
10012f16:	eba0 000a 	sub.w	r0, r0, sl
10012f1a:	eb00 080b 	add.w	r8, r0, fp
10012f1e:	6818      	ldr	r0, [r3, #0]
10012f20:	f8c7 a008 	str.w	sl, [r7, #8]
10012f24:	f048 0201 	orr.w	r2, r8, #1
10012f28:	4458      	add	r0, fp
10012f2a:	42bc      	cmp	r4, r7
10012f2c:	f8ca 2004 	str.w	r2, [sl, #4]
10012f30:	6018      	str	r0, [r3, #0]
10012f32:	f43f aede 	beq.w	10012cf2 <_malloc_r+0x216>
10012f36:	f1b9 0f0f 	cmp.w	r9, #15
10012f3a:	d942      	bls.n	10012fc2 <_malloc_r+0x4e6>
10012f3c:	6861      	ldr	r1, [r4, #4]
10012f3e:	f1a9 020c 	sub.w	r2, r9, #12
10012f42:	f022 0207 	bic.w	r2, r2, #7
10012f46:	f001 0101 	and.w	r1, r1, #1
10012f4a:	4311      	orrs	r1, r2
10012f4c:	6061      	str	r1, [r4, #4]
10012f4e:	18a1      	adds	r1, r4, r2
10012f50:	f04f 0c05 	mov.w	ip, #5
10012f54:	2a0f      	cmp	r2, #15
10012f56:	f8c1 c004 	str.w	ip, [r1, #4]
10012f5a:	f8c1 c008 	str.w	ip, [r1, #8]
10012f5e:	d84a      	bhi.n	10012ff6 <_malloc_r+0x51a>
10012f60:	f8da 2004 	ldr.w	r2, [sl, #4]
10012f64:	e6c5      	b.n	10012cf2 <_malloc_r+0x216>
10012f66:	1092      	asrs	r2, r2, #2
10012f68:	2001      	movs	r0, #1
10012f6a:	fa00 f202 	lsl.w	r2, r0, r2
10012f6e:	ea4e 0e02 	orr.w	lr, lr, r2
10012f72:	f8c7 e004 	str.w	lr, [r7, #4]
10012f76:	e70e      	b.n	10012d96 <_malloc_r+0x2ba>
10012f78:	9b01      	ldr	r3, [sp, #4]
10012f7a:	eb0a 0208 	add.w	r2, sl, r8
10012f7e:	400a      	ands	r2, r1
10012f80:	1a9a      	subs	r2, r3, r2
10012f82:	ea02 0b01 	and.w	fp, r2, r1
10012f86:	4659      	mov	r1, fp
10012f88:	4630      	mov	r0, r6
10012f8a:	f003 feb7 	bl	10016cfc <_sbrk_r>
10012f8e:	1c43      	adds	r3, r0, #1
10012f90:	9b03      	ldr	r3, [sp, #12]
10012f92:	d1c0      	bne.n	10012f16 <_malloc_r+0x43a>
10012f94:	f8dd b008 	ldr.w	fp, [sp, #8]
10012f98:	e7c1      	b.n	10012f1e <_malloc_r+0x442>
10012f9a:	2a54      	cmp	r2, #84	@ 0x54
10012f9c:	d815      	bhi.n	10012fca <_malloc_r+0x4ee>
10012f9e:	ea4f 3219 	mov.w	r2, r9, lsr #12
10012fa2:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
10012fa6:	00db      	lsls	r3, r3, #3
10012fa8:	326e      	adds	r2, #110	@ 0x6e
10012faa:	e6e5      	b.n	10012d78 <_malloc_r+0x29c>
10012fac:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
10012fb0:	d815      	bhi.n	10012fde <_malloc_r+0x502>
10012fb2:	0beb      	lsrs	r3, r5, #15
10012fb4:	f103 0c78 	add.w	ip, r3, #120	@ 0x78
10012fb8:	f103 0e77 	add.w	lr, r3, #119	@ 0x77
10012fbc:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10012fc0:	e5d3      	b.n	10012b6a <_malloc_r+0x8e>
10012fc2:	2301      	movs	r3, #1
10012fc4:	f8ca 3004 	str.w	r3, [sl, #4]
10012fc8:	e6a6      	b.n	10012d18 <_malloc_r+0x23c>
10012fca:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
10012fce:	d825      	bhi.n	1001301c <_malloc_r+0x540>
10012fd0:	ea4f 32d9 	mov.w	r2, r9, lsr #15
10012fd4:	f102 0378 	add.w	r3, r2, #120	@ 0x78
10012fd8:	00db      	lsls	r3, r3, #3
10012fda:	3277      	adds	r2, #119	@ 0x77
10012fdc:	e6cc      	b.n	10012d78 <_malloc_r+0x29c>
10012fde:	f240 5254 	movw	r2, #1364	@ 0x554
10012fe2:	4293      	cmp	r3, r2
10012fe4:	d825      	bhi.n	10013032 <_malloc_r+0x556>
10012fe6:	0cab      	lsrs	r3, r5, #18
10012fe8:	f103 0c7d 	add.w	ip, r3, #125	@ 0x7d
10012fec:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
10012ff0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10012ff4:	e5b9      	b.n	10012b6a <_malloc_r+0x8e>
10012ff6:	4630      	mov	r0, r6
10012ff8:	f104 0108 	add.w	r1, r4, #8
10012ffc:	9301      	str	r3, [sp, #4]
10012ffe:	f005 f8d9 	bl	100181b4 <_free_r>
10013002:	9b01      	ldr	r3, [sp, #4]
10013004:	f8d7 a008 	ldr.w	sl, [r7, #8]
10013008:	6818      	ldr	r0, [r3, #0]
1001300a:	e7a9      	b.n	10012f60 <_malloc_r+0x484>
1001300c:	9a02      	ldr	r2, [sp, #8]
1001300e:	3a08      	subs	r2, #8
10013010:	4490      	add	r8, r2
10013012:	eba8 080a 	sub.w	r8, r8, sl
10013016:	f04f 0b00 	mov.w	fp, #0
1001301a:	e780      	b.n	10012f1e <_malloc_r+0x442>
1001301c:	f240 5354 	movw	r3, #1364	@ 0x554
10013020:	429a      	cmp	r2, r3
10013022:	d80d      	bhi.n	10013040 <_malloc_r+0x564>
10013024:	ea4f 4299 	mov.w	r2, r9, lsr #18
10013028:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
1001302c:	00db      	lsls	r3, r3, #3
1001302e:	327c      	adds	r2, #124	@ 0x7c
10013030:	e6a2      	b.n	10012d78 <_malloc_r+0x29c>
10013032:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
10013036:	f04f 0c7f 	mov.w	ip, #127	@ 0x7f
1001303a:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
1001303e:	e594      	b.n	10012b6a <_malloc_r+0x8e>
10013040:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
10013044:	227e      	movs	r2, #126	@ 0x7e
10013046:	e697      	b.n	10012d78 <_malloc_r+0x29c>
10013048:	687b      	ldr	r3, [r7, #4]
1001304a:	e72e      	b.n	10012eaa <_malloc_r+0x3ce>
1001304c:	20001584 	.word	0x20001584

10013050 <printf>:
10013050:	b40f      	push	{r0, r1, r2, r3}
10013052:	b500      	push	{lr}
10013054:	4907      	ldr	r1, [pc, #28]	@ (10013074 <printf+0x24>)
10013056:	b083      	sub	sp, #12
10013058:	ab04      	add	r3, sp, #16
1001305a:	6808      	ldr	r0, [r1, #0]
1001305c:	f853 2b04 	ldr.w	r2, [r3], #4
10013060:	6881      	ldr	r1, [r0, #8]
10013062:	9301      	str	r3, [sp, #4]
10013064:	f000 f808 	bl	10013078 <_vfprintf_r>
10013068:	b003      	add	sp, #12
1001306a:	f85d eb04 	ldr.w	lr, [sp], #4
1001306e:	b004      	add	sp, #16
10013070:	4770      	bx	lr
10013072:	bf00      	nop
10013074:	20000600 	.word	0x20000600

10013078 <_vfprintf_r>:
10013078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001307c:	b0df      	sub	sp, #380	@ 0x17c
1001307e:	461c      	mov	r4, r3
10013080:	9107      	str	r1, [sp, #28]
10013082:	4691      	mov	r9, r2
10013084:	4683      	mov	fp, r0
10013086:	f003 fe35 	bl	10016cf4 <_localeconv_r>
1001308a:	6803      	ldr	r3, [r0, #0]
1001308c:	9319      	str	r3, [sp, #100]	@ 0x64
1001308e:	4618      	mov	r0, r3
10013090:	f003 ff96 	bl	10016fc0 <strlen>
10013094:	2208      	movs	r2, #8
10013096:	9018      	str	r0, [sp, #96]	@ 0x60
10013098:	2100      	movs	r1, #0
1001309a:	a82e      	add	r0, sp, #184	@ 0xb8
1001309c:	940d      	str	r4, [sp, #52]	@ 0x34
1001309e:	f003 fd9d 	bl	10016bdc <memset>
100130a2:	f1bb 0f00 	cmp.w	fp, #0
100130a6:	d004      	beq.n	100130b2 <_vfprintf_r+0x3a>
100130a8:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
100130ac:	2b00      	cmp	r3, #0
100130ae:	f001 8087 	beq.w	100141c0 <_vfprintf_r+0x1148>
100130b2:	9b07      	ldr	r3, [sp, #28]
100130b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
100130b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
100130ba:	07d1      	lsls	r1, r2, #31
100130bc:	d402      	bmi.n	100130c4 <_vfprintf_r+0x4c>
100130be:	059a      	lsls	r2, r3, #22
100130c0:	f140 86a7 	bpl.w	10013e12 <_vfprintf_r+0xd9a>
100130c4:	049f      	lsls	r7, r3, #18
100130c6:	d407      	bmi.n	100130d8 <_vfprintf_r+0x60>
100130c8:	9907      	ldr	r1, [sp, #28]
100130ca:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
100130cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
100130d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
100130d4:	818b      	strh	r3, [r1, #12]
100130d6:	664a      	str	r2, [r1, #100]	@ 0x64
100130d8:	071e      	lsls	r6, r3, #28
100130da:	f140 80cc 	bpl.w	10013276 <_vfprintf_r+0x1fe>
100130de:	9a07      	ldr	r2, [sp, #28]
100130e0:	6912      	ldr	r2, [r2, #16]
100130e2:	2a00      	cmp	r2, #0
100130e4:	f000 80c7 	beq.w	10013276 <_vfprintf_r+0x1fe>
100130e8:	f003 021a 	and.w	r2, r3, #26
100130ec:	2a0a      	cmp	r2, #10
100130ee:	f000 80d1 	beq.w	10013294 <_vfprintf_r+0x21c>
100130f2:	ed9f 7b99 	vldr	d7, [pc, #612]	@ 10013358 <_vfprintf_r+0x2e0>
100130f6:	2300      	movs	r3, #0
100130f8:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
100130fc:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
10013100:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
10013104:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
10013108:	aa35      	add	r2, sp, #212	@ 0xd4
1001310a:	9313      	str	r3, [sp, #76]	@ 0x4c
1001310c:	9232      	str	r2, [sp, #200]	@ 0xc8
1001310e:	4690      	mov	r8, r2
10013110:	931a      	str	r3, [sp, #104]	@ 0x68
10013112:	930a      	str	r3, [sp, #40]	@ 0x28
10013114:	f8cd b020 	str.w	fp, [sp, #32]
10013118:	464d      	mov	r5, r9
1001311a:	9f08      	ldr	r7, [sp, #32]
1001311c:	462e      	mov	r6, r5
1001311e:	4b90      	ldr	r3, [pc, #576]	@ (10013360 <_vfprintf_r+0x2e8>)
10013120:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
10013124:	f003 fde0 	bl	10016ce8 <__locale_mb_cur_max>
10013128:	4603      	mov	r3, r0
1001312a:	a82e      	add	r0, sp, #184	@ 0xb8
1001312c:	9000      	str	r0, [sp, #0]
1001312e:	4632      	mov	r2, r6
10013130:	a92a      	add	r1, sp, #168	@ 0xa8
10013132:	4638      	mov	r0, r7
10013134:	47a0      	blx	r4
10013136:	2800      	cmp	r0, #0
10013138:	f000 80cb 	beq.w	100132d2 <_vfprintf_r+0x25a>
1001313c:	f2c0 80c1 	blt.w	100132c2 <_vfprintf_r+0x24a>
10013140:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
10013142:	2a25      	cmp	r2, #37	@ 0x25
10013144:	4603      	mov	r3, r0
10013146:	d001      	beq.n	1001314c <_vfprintf_r+0xd4>
10013148:	441e      	add	r6, r3
1001314a:	e7e8      	b.n	1001311e <_vfprintf_r+0xa6>
1001314c:	1b77      	subs	r7, r6, r5
1001314e:	4604      	mov	r4, r0
10013150:	f040 80c2 	bne.w	100132d8 <_vfprintf_r+0x260>
10013154:	2300      	movs	r3, #0
10013156:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001315a:	4699      	mov	r9, r3
1001315c:	930b      	str	r3, [sp, #44]	@ 0x2c
1001315e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10013162:	7873      	ldrb	r3, [r6, #1]
10013164:	9209      	str	r2, [sp, #36]	@ 0x24
10013166:	1c74      	adds	r4, r6, #1
10013168:	3401      	adds	r4, #1
1001316a:	f1a3 0220 	sub.w	r2, r3, #32
1001316e:	2a5a      	cmp	r2, #90	@ 0x5a
10013170:	f200 80f8 	bhi.w	10013364 <_vfprintf_r+0x2ec>
10013174:	e8df f012 	tbh	[pc, r2, lsl #1]
10013178:	00f602d0 	.word	0x00f602d0
1001317c:	02cc00f6 	.word	0x02cc00f6
10013180:	00f600f6 	.word	0x00f600f6
10013184:	006a00f6 	.word	0x006a00f6
10013188:	00f600f6 	.word	0x00f600f6
1001318c:	02a90286 	.word	0x02a90286
10013190:	029100f6 	.word	0x029100f6
10013194:	00f602b2 	.word	0x00f602b2
10013198:	005b02ae 	.word	0x005b02ae
1001319c:	005b005b 	.word	0x005b005b
100131a0:	005b005b 	.word	0x005b005b
100131a4:	005b005b 	.word	0x005b005b
100131a8:	005b005b 	.word	0x005b005b
100131ac:	00f600f6 	.word	0x00f600f6
100131b0:	00f600f6 	.word	0x00f600f6
100131b4:	00f600f6 	.word	0x00f600f6
100131b8:	017700f6 	.word	0x017700f6
100131bc:	021100f6 	.word	0x021100f6
100131c0:	0177032a 	.word	0x0177032a
100131c4:	01770177 	.word	0x01770177
100131c8:	00f600f6 	.word	0x00f600f6
100131cc:	00f600f6 	.word	0x00f600f6
100131d0:	00f60326 	.word	0x00f60326
100131d4:	02e200f6 	.word	0x02e200f6
100131d8:	00f600f6 	.word	0x00f600f6
100131dc:	022f00f6 	.word	0x022f00f6
100131e0:	031300f6 	.word	0x031300f6
100131e4:	00f600f6 	.word	0x00f600f6
100131e8:	00f6071f 	.word	0x00f6071f
100131ec:	00f600f6 	.word	0x00f600f6
100131f0:	00f600f6 	.word	0x00f600f6
100131f4:	00f600f6 	.word	0x00f600f6
100131f8:	017700f6 	.word	0x017700f6
100131fc:	021100f6 	.word	0x021100f6
10013200:	01770261 	.word	0x01770261
10013204:	01770177 	.word	0x01770177
10013208:	0261029f 	.word	0x0261029f
1001320c:	00f6020d 	.word	0x00f6020d
10013210:	00f60295 	.word	0x00f60295
10013214:	07470355 	.word	0x07470355
10013218:	020d0343 	.word	0x020d0343
1001321c:	022f00f6 	.word	0x022f00f6
10013220:	0742007d 	.word	0x0742007d
10013224:	00f600f6 	.word	0x00f600f6
10013228:	00f6074b 	.word	0x00f6074b
1001322c:	007d      	.short	0x007d
1001322e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10013232:	2100      	movs	r1, #0
10013234:	f814 3b01 	ldrb.w	r3, [r4], #1
10013238:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1001323c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
10013240:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10013244:	2a09      	cmp	r2, #9
10013246:	d9f5      	bls.n	10013234 <_vfprintf_r+0x1bc>
10013248:	910b      	str	r1, [sp, #44]	@ 0x2c
1001324a:	e78e      	b.n	1001316a <_vfprintf_r+0xf2>
1001324c:	9f08      	ldr	r7, [sp, #32]
1001324e:	4638      	mov	r0, r7
10013250:	f003 fd50 	bl	10016cf4 <_localeconv_r>
10013254:	6843      	ldr	r3, [r0, #4]
10013256:	931d      	str	r3, [sp, #116]	@ 0x74
10013258:	4618      	mov	r0, r3
1001325a:	f003 feb1 	bl	10016fc0 <strlen>
1001325e:	901e      	str	r0, [sp, #120]	@ 0x78
10013260:	4606      	mov	r6, r0
10013262:	4638      	mov	r0, r7
10013264:	f003 fd46 	bl	10016cf4 <_localeconv_r>
10013268:	6883      	ldr	r3, [r0, #8]
1001326a:	931b      	str	r3, [sp, #108]	@ 0x6c
1001326c:	2e00      	cmp	r6, #0
1001326e:	f040 8629 	bne.w	10013ec4 <_vfprintf_r+0xe4c>
10013272:	7823      	ldrb	r3, [r4, #0]
10013274:	e778      	b.n	10013168 <_vfprintf_r+0xf0>
10013276:	9d07      	ldr	r5, [sp, #28]
10013278:	4658      	mov	r0, fp
1001327a:	4629      	mov	r1, r5
1001327c:	f003 fb60 	bl	10016940 <__swsetup_r>
10013280:	2800      	cmp	r0, #0
10013282:	f041 83ac 	bne.w	100149de <_vfprintf_r+0x1966>
10013286:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
1001328a:	f003 021a 	and.w	r2, r3, #26
1001328e:	2a0a      	cmp	r2, #10
10013290:	f47f af2f 	bne.w	100130f2 <_vfprintf_r+0x7a>
10013294:	9907      	ldr	r1, [sp, #28]
10013296:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
1001329a:	2a00      	cmp	r2, #0
1001329c:	f6ff af29 	blt.w	100130f2 <_vfprintf_r+0x7a>
100132a0:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
100132a2:	07d0      	lsls	r0, r2, #31
100132a4:	d402      	bmi.n	100132ac <_vfprintf_r+0x234>
100132a6:	059a      	lsls	r2, r3, #22
100132a8:	f141 81c5 	bpl.w	10014636 <_vfprintf_r+0x15be>
100132ac:	9907      	ldr	r1, [sp, #28]
100132ae:	4623      	mov	r3, r4
100132b0:	464a      	mov	r2, r9
100132b2:	4658      	mov	r0, fp
100132b4:	f001 fd08 	bl	10014cc8 <__sbprintf>
100132b8:	900a      	str	r0, [sp, #40]	@ 0x28
100132ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
100132bc:	b05f      	add	sp, #380	@ 0x17c
100132be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100132c2:	2208      	movs	r2, #8
100132c4:	2100      	movs	r1, #0
100132c6:	a82e      	add	r0, sp, #184	@ 0xb8
100132c8:	f003 fc88 	bl	10016bdc <memset>
100132cc:	2301      	movs	r3, #1
100132ce:	441e      	add	r6, r3
100132d0:	e725      	b.n	1001311e <_vfprintf_r+0xa6>
100132d2:	1b77      	subs	r7, r6, r5
100132d4:	4604      	mov	r4, r0
100132d6:	d011      	beq.n	100132fc <_vfprintf_r+0x284>
100132d8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
100132da:	443b      	add	r3, r7
100132dc:	9334      	str	r3, [sp, #208]	@ 0xd0
100132de:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100132e0:	3301      	adds	r3, #1
100132e2:	2b07      	cmp	r3, #7
100132e4:	e9c8 5700 	strd	r5, r7, [r8]
100132e8:	9333      	str	r3, [sp, #204]	@ 0xcc
100132ea:	dc13      	bgt.n	10013314 <_vfprintf_r+0x29c>
100132ec:	f108 0808 	add.w	r8, r8, #8
100132f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100132f2:	443b      	add	r3, r7
100132f4:	930a      	str	r3, [sp, #40]	@ 0x28
100132f6:	2c00      	cmp	r4, #0
100132f8:	f47f af2c 	bne.w	10013154 <_vfprintf_r+0xdc>
100132fc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
100132fe:	f8dd b020 	ldr.w	fp, [sp, #32]
10013302:	2b00      	cmp	r3, #0
10013304:	f041 80dc 	bne.w	100144c0 <_vfprintf_r+0x1448>
10013308:	9b07      	ldr	r3, [sp, #28]
1001330a:	2200      	movs	r2, #0
1001330c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
10013310:	9233      	str	r2, [sp, #204]	@ 0xcc
10013312:	e012      	b.n	1001333a <_vfprintf_r+0x2c2>
10013314:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013318:	aa32      	add	r2, sp, #200	@ 0xc8
1001331a:	f001 fd51 	bl	10014dc0 <__sprint_r>
1001331e:	b948      	cbnz	r0, 10013334 <_vfprintf_r+0x2bc>
10013320:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013324:	e7e4      	b.n	100132f0 <_vfprintf_r+0x278>
10013326:	46bb      	mov	fp, r7
10013328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001332a:	b11b      	cbz	r3, 10013334 <_vfprintf_r+0x2bc>
1001332c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1001332e:	4658      	mov	r0, fp
10013330:	f004 ff40 	bl	100181b4 <_free_r>
10013334:	9b07      	ldr	r3, [sp, #28]
10013336:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
1001333a:	9a07      	ldr	r2, [sp, #28]
1001333c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
1001333e:	07d4      	lsls	r4, r2, #31
10013340:	f140 811d 	bpl.w	1001357e <_vfprintf_r+0x506>
10013344:	0659      	lsls	r1, r3, #25
10013346:	f101 8356 	bmi.w	100149f6 <_vfprintf_r+0x197e>
1001334a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001334c:	b05f      	add	sp, #380	@ 0x17c
1001334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10013352:	bf00      	nop
10013354:	f3af 8000 	nop.w
	...
10013360:	20000494 	.word	0x20000494
10013364:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10013368:	2b00      	cmp	r3, #0
1001336a:	d0c7      	beq.n	100132fc <_vfprintf_r+0x284>
1001336c:	2200      	movs	r2, #0
1001336e:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
10013372:	2301      	movs	r3, #1
10013374:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10013378:	9306      	str	r3, [sp, #24]
1001337a:	920c      	str	r2, [sp, #48]	@ 0x30
1001337c:	469b      	mov	fp, r3
1001337e:	9209      	str	r2, [sp, #36]	@ 0x24
10013380:	9214      	str	r2, [sp, #80]	@ 0x50
10013382:	9210      	str	r2, [sp, #64]	@ 0x40
10013384:	9212      	str	r2, [sp, #72]	@ 0x48
10013386:	ad45      	add	r5, sp, #276	@ 0x114
10013388:	f019 0302 	ands.w	r3, r9, #2
1001338c:	d002      	beq.n	10013394 <_vfprintf_r+0x31c>
1001338e:	9906      	ldr	r1, [sp, #24]
10013390:	3102      	adds	r1, #2
10013392:	9106      	str	r1, [sp, #24]
10013394:	f019 0784 	ands.w	r7, r9, #132	@ 0x84
10013398:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001339a:	d105      	bne.n	100133a8 <_vfprintf_r+0x330>
1001339c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1001339e:	9806      	ldr	r0, [sp, #24]
100133a0:	1a0e      	subs	r6, r1, r0
100133a2:	2e00      	cmp	r6, #0
100133a4:	f300 80aa 	bgt.w	100134fc <_vfprintf_r+0x484>
100133a8:	b182      	cbz	r2, 100133cc <_vfprintf_r+0x354>
100133aa:	2201      	movs	r2, #1
100133ac:	f8c8 2004 	str.w	r2, [r8, #4]
100133b0:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
100133b2:	3201      	adds	r2, #1
100133b4:	3401      	adds	r4, #1
100133b6:	f10d 019f 	add.w	r1, sp, #159	@ 0x9f
100133ba:	2a07      	cmp	r2, #7
100133bc:	9434      	str	r4, [sp, #208]	@ 0xd0
100133be:	9233      	str	r2, [sp, #204]	@ 0xcc
100133c0:	f8c8 1000 	str.w	r1, [r8]
100133c4:	f300 83e3 	bgt.w	10013b8e <_vfprintf_r+0xb16>
100133c8:	f108 0808 	add.w	r8, r8, #8
100133cc:	b183      	cbz	r3, 100133f0 <_vfprintf_r+0x378>
100133ce:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100133d0:	aa28      	add	r2, sp, #160	@ 0xa0
100133d2:	3301      	adds	r3, #1
100133d4:	3402      	adds	r4, #2
100133d6:	f8c8 2000 	str.w	r2, [r8]
100133da:	2b07      	cmp	r3, #7
100133dc:	f04f 0202 	mov.w	r2, #2
100133e0:	9434      	str	r4, [sp, #208]	@ 0xd0
100133e2:	9333      	str	r3, [sp, #204]	@ 0xcc
100133e4:	f8c8 2004 	str.w	r2, [r8, #4]
100133e8:	f300 83df 	bgt.w	10013baa <_vfprintf_r+0xb32>
100133ec:	f108 0808 	add.w	r8, r8, #8
100133f0:	2f80      	cmp	r7, #128	@ 0x80
100133f2:	f000 82c0 	beq.w	10013976 <_vfprintf_r+0x8fe>
100133f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100133f8:	eba3 060b 	sub.w	r6, r3, fp
100133fc:	2e00      	cmp	r6, #0
100133fe:	f300 82ff 	bgt.w	10013a00 <_vfprintf_r+0x988>
10013402:	f419 7f80 	tst.w	r9, #256	@ 0x100
10013406:	f040 821b 	bne.w	10013840 <_vfprintf_r+0x7c8>
1001340a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001340c:	f8c8 5000 	str.w	r5, [r8]
10013410:	3301      	adds	r3, #1
10013412:	445c      	add	r4, fp
10013414:	2b07      	cmp	r3, #7
10013416:	f8c8 b004 	str.w	fp, [r8, #4]
1001341a:	9434      	str	r4, [sp, #208]	@ 0xd0
1001341c:	9333      	str	r3, [sp, #204]	@ 0xcc
1001341e:	f300 834f 	bgt.w	10013ac0 <_vfprintf_r+0xa48>
10013422:	f108 0808 	add.w	r8, r8, #8
10013426:	f019 0f04 	tst.w	r9, #4
1001342a:	d005      	beq.n	10013438 <_vfprintf_r+0x3c0>
1001342c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001342e:	9a06      	ldr	r2, [sp, #24]
10013430:	1a9d      	subs	r5, r3, r2
10013432:	2d00      	cmp	r5, #0
10013434:	f300 83c5 	bgt.w	10013bc2 <_vfprintf_r+0xb4a>
10013438:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
1001343c:	9906      	ldr	r1, [sp, #24]
1001343e:	428a      	cmp	r2, r1
10013440:	bfac      	ite	ge
10013442:	189b      	addge	r3, r3, r2
10013444:	185b      	addlt	r3, r3, r1
10013446:	930a      	str	r3, [sp, #40]	@ 0x28
10013448:	2c00      	cmp	r4, #0
1001344a:	f040 8311 	bne.w	10013a70 <_vfprintf_r+0x9f8>
1001344e:	2300      	movs	r3, #0
10013450:	9333      	str	r3, [sp, #204]	@ 0xcc
10013452:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10013454:	b11b      	cbz	r3, 1001345e <_vfprintf_r+0x3e6>
10013456:	990c      	ldr	r1, [sp, #48]	@ 0x30
10013458:	9808      	ldr	r0, [sp, #32]
1001345a:	f004 feab 	bl	100181b4 <_free_r>
1001345e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013462:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10013464:	e659      	b.n	1001311a <_vfprintf_r+0xa2>
10013466:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001346a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001346c:	3307      	adds	r3, #7
1001346e:	f023 0307 	bic.w	r3, r3, #7
10013472:	ecb3 7b02 	vldmia	r3!, {d7}
10013476:	ec57 6b17 	vmov	r6, r7, d7
1001347a:	930d      	str	r3, [sp, #52]	@ 0x34
1001347c:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
10013480:	9323      	str	r3, [sp, #140]	@ 0x8c
10013482:	ed8d 7a22 	vstr	s14, [sp, #136]	@ 0x88
10013486:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	@ 0x88
1001348a:	4ba8      	ldr	r3, [pc, #672]	@ (1001372c <_vfprintf_r+0x6b4>)
1001348c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10013490:	4650      	mov	r0, sl
10013492:	4659      	mov	r1, fp
10013494:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
10013498:	f008 f972 	bl	1001b780 <__aeabi_dcmpun>
1001349c:	2800      	cmp	r0, #0
1001349e:	f040 852f 	bne.w	10013f00 <_vfprintf_r+0xe88>
100134a2:	4ba2      	ldr	r3, [pc, #648]	@ (1001372c <_vfprintf_r+0x6b4>)
100134a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100134a8:	4650      	mov	r0, sl
100134aa:	4659      	mov	r1, fp
100134ac:	f008 f94a 	bl	1001b744 <__aeabi_dcmple>
100134b0:	2800      	cmp	r0, #0
100134b2:	f040 8525 	bne.w	10013f00 <_vfprintf_r+0xe88>
100134b6:	2200      	movs	r2, #0
100134b8:	2300      	movs	r3, #0
100134ba:	4630      	mov	r0, r6
100134bc:	4639      	mov	r1, r7
100134be:	f008 f937 	bl	1001b730 <__aeabi_dcmplt>
100134c2:	2800      	cmp	r0, #0
100134c4:	f041 810c 	bne.w	100146e0 <_vfprintf_r+0x1668>
100134c8:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100134cc:	4d98      	ldr	r5, [pc, #608]	@ (10013730 <_vfprintf_r+0x6b8>)
100134ce:	4b99      	ldr	r3, [pc, #612]	@ (10013734 <_vfprintf_r+0x6bc>)
100134d0:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
100134d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
100134d6:	2947      	cmp	r1, #71	@ 0x47
100134d8:	bfc8      	it	gt
100134da:	461d      	movgt	r5, r3
100134dc:	2300      	movs	r3, #0
100134de:	2103      	movs	r1, #3
100134e0:	930c      	str	r3, [sp, #48]	@ 0x30
100134e2:	9106      	str	r1, [sp, #24]
100134e4:	468b      	mov	fp, r1
100134e6:	9309      	str	r3, [sp, #36]	@ 0x24
100134e8:	9314      	str	r3, [sp, #80]	@ 0x50
100134ea:	9310      	str	r3, [sp, #64]	@ 0x40
100134ec:	9312      	str	r3, [sp, #72]	@ 0x48
100134ee:	2a00      	cmp	r2, #0
100134f0:	f43f af4a 	beq.w	10013388 <_vfprintf_r+0x310>
100134f4:	9b06      	ldr	r3, [sp, #24]
100134f6:	3301      	adds	r3, #1
100134f8:	9306      	str	r3, [sp, #24]
100134fa:	e745      	b.n	10013388 <_vfprintf_r+0x310>
100134fc:	2e10      	cmp	r6, #16
100134fe:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
10013500:	f341 823a 	ble.w	10014978 <_vfprintf_r+0x1900>
10013504:	488c      	ldr	r0, [pc, #560]	@ (10013738 <_vfprintf_r+0x6c0>)
10013506:	9521      	str	r5, [sp, #132]	@ 0x84
10013508:	e9cd 371f 	strd	r3, r7, [sp, #124]	@ 0x7c
1001350c:	4621      	mov	r1, r4
1001350e:	9d07      	ldr	r5, [sp, #28]
10013510:	9c08      	ldr	r4, [sp, #32]
10013512:	9015      	str	r0, [sp, #84]	@ 0x54
10013514:	f04f 0a10 	mov.w	sl, #16
10013518:	4607      	mov	r7, r0
1001351a:	e004      	b.n	10013526 <_vfprintf_r+0x4ae>
1001351c:	3e10      	subs	r6, #16
1001351e:	2e10      	cmp	r6, #16
10013520:	f108 0808 	add.w	r8, r8, #8
10013524:	dd16      	ble.n	10013554 <_vfprintf_r+0x4dc>
10013526:	3201      	adds	r2, #1
10013528:	3110      	adds	r1, #16
1001352a:	2a07      	cmp	r2, #7
1001352c:	e9c8 7a00 	strd	r7, sl, [r8]
10013530:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
10013534:	ddf2      	ble.n	1001351c <_vfprintf_r+0x4a4>
10013536:	aa32      	add	r2, sp, #200	@ 0xc8
10013538:	4629      	mov	r1, r5
1001353a:	4620      	mov	r0, r4
1001353c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013540:	f001 fc3e 	bl	10014dc0 <__sprint_r>
10013544:	2800      	cmp	r0, #0
10013546:	f040 8635 	bne.w	100141b4 <_vfprintf_r+0x113c>
1001354a:	3e10      	subs	r6, #16
1001354c:	2e10      	cmp	r6, #16
1001354e:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
10013552:	dce8      	bgt.n	10013526 <_vfprintf_r+0x4ae>
10013554:	e9dd 371f 	ldrd	r3, r7, [sp, #124]	@ 0x7c
10013558:	9d21      	ldr	r5, [sp, #132]	@ 0x84
1001355a:	460c      	mov	r4, r1
1001355c:	3201      	adds	r2, #1
1001355e:	9915      	ldr	r1, [sp, #84]	@ 0x54
10013560:	f8c8 1000 	str.w	r1, [r8]
10013564:	4434      	add	r4, r6
10013566:	2a07      	cmp	r2, #7
10013568:	e9cd 2433 	strd	r2, r4, [sp, #204]	@ 0xcc
1001356c:	f8c8 6004 	str.w	r6, [r8, #4]
10013570:	f300 860f 	bgt.w	10014192 <_vfprintf_r+0x111a>
10013574:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10013578:	f108 0808 	add.w	r8, r8, #8
1001357c:	e714      	b.n	100133a8 <_vfprintf_r+0x330>
1001357e:	0598      	lsls	r0, r3, #22
10013580:	f53f aee0 	bmi.w	10013344 <_vfprintf_r+0x2cc>
10013584:	9c07      	ldr	r4, [sp, #28]
10013586:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10013588:	f003 fc0c 	bl	10016da4 <__retarget_lock_release_recursive>
1001358c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10013590:	e6d8      	b.n	10013344 <_vfprintf_r+0x2cc>
10013592:	7823      	ldrb	r3, [r4, #0]
10013594:	f049 0920 	orr.w	r9, r9, #32
10013598:	e5e6      	b.n	10013168 <_vfprintf_r+0xf0>
1001359a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001359c:	2b43      	cmp	r3, #67	@ 0x43
1001359e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100135a2:	f102 0404 	add.w	r4, r2, #4
100135a6:	f000 8561 	beq.w	1001406c <_vfprintf_r+0xff4>
100135aa:	f019 0f10 	tst.w	r9, #16
100135ae:	f040 855d 	bne.w	1001406c <_vfprintf_r+0xff4>
100135b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100135b4:	681b      	ldr	r3, [r3, #0]
100135b6:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
100135ba:	2301      	movs	r3, #1
100135bc:	9306      	str	r3, [sp, #24]
100135be:	469b      	mov	fp, r3
100135c0:	ad45      	add	r5, sp, #276	@ 0x114
100135c2:	2200      	movs	r2, #0
100135c4:	940d      	str	r4, [sp, #52]	@ 0x34
100135c6:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
100135ca:	920c      	str	r2, [sp, #48]	@ 0x30
100135cc:	9209      	str	r2, [sp, #36]	@ 0x24
100135ce:	9214      	str	r2, [sp, #80]	@ 0x50
100135d0:	9210      	str	r2, [sp, #64]	@ 0x40
100135d2:	9212      	str	r2, [sp, #72]	@ 0x48
100135d4:	e6d8      	b.n	10013388 <_vfprintf_r+0x310>
100135d6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100135d8:	f856 5b04 	ldr.w	r5, [r6], #4
100135dc:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100135e0:	2300      	movs	r3, #0
100135e2:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
100135e6:	2d00      	cmp	r5, #0
100135e8:	f000 852f 	beq.w	1001404a <_vfprintf_r+0xfd2>
100135ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100135ee:	2b53      	cmp	r3, #83	@ 0x53
100135f0:	f000 8600 	beq.w	100141f4 <_vfprintf_r+0x117c>
100135f4:	f019 0310 	ands.w	r3, r9, #16
100135f8:	9312      	str	r3, [sp, #72]	@ 0x48
100135fa:	f040 85fb 	bne.w	100141f4 <_vfprintf_r+0x117c>
100135fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10013600:	1c5a      	adds	r2, r3, #1
10013602:	f000 8767 	beq.w	100144d4 <_vfprintf_r+0x145c>
10013606:	9912      	ldr	r1, [sp, #72]	@ 0x48
10013608:	461a      	mov	r2, r3
1001360a:	4628      	mov	r0, r5
1001360c:	f003 fbd0 	bl	10016db0 <memchr>
10013610:	900c      	str	r0, [sp, #48]	@ 0x30
10013612:	2800      	cmp	r0, #0
10013614:	f001 82c2 	beq.w	10014b9c <_vfprintf_r+0x1b24>
10013618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001361a:	960d      	str	r6, [sp, #52]	@ 0x34
1001361c:	eba3 0b05 	sub.w	fp, r3, r5
10013620:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10013622:	9309      	str	r3, [sp, #36]	@ 0x24
10013624:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
10013628:	9314      	str	r3, [sp, #80]	@ 0x50
1001362a:	9310      	str	r3, [sp, #64]	@ 0x40
1001362c:	930c      	str	r3, [sp, #48]	@ 0x30
1001362e:	2373      	movs	r3, #115	@ 0x73
10013630:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10013634:	9106      	str	r1, [sp, #24]
10013636:	930e      	str	r3, [sp, #56]	@ 0x38
10013638:	e759      	b.n	100134ee <_vfprintf_r+0x476>
1001363a:	f019 0f20 	tst.w	r9, #32
1001363e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10013642:	f000 80cb 	beq.w	100137dc <_vfprintf_r+0x764>
10013646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10013648:	3307      	adds	r3, #7
1001364a:	f023 0307 	bic.w	r3, r3, #7
1001364e:	461a      	mov	r2, r3
10013650:	6859      	ldr	r1, [r3, #4]
10013652:	f852 3b08 	ldr.w	r3, [r2], #8
10013656:	920d      	str	r2, [sp, #52]	@ 0x34
10013658:	460a      	mov	r2, r1
1001365a:	2900      	cmp	r1, #0
1001365c:	f2c0 8424 	blt.w	10013ea8 <_vfprintf_r+0xe30>
10013660:	9909      	ldr	r1, [sp, #36]	@ 0x24
10013662:	3101      	adds	r1, #1
10013664:	f000 8284 	beq.w	10013b70 <_vfprintf_r+0xaf8>
10013668:	ea53 0102 	orrs.w	r1, r3, r2
1001366c:	f029 0480 	bic.w	r4, r9, #128	@ 0x80
10013670:	f040 827f 	bne.w	10013b72 <_vfprintf_r+0xafa>
10013674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10013676:	2a00      	cmp	r2, #0
10013678:	f040 8280 	bne.w	10013b7c <_vfprintf_r+0xb04>
1001367c:	46a1      	mov	r9, r4
1001367e:	4693      	mov	fp, r2
10013680:	ad5e      	add	r5, sp, #376	@ 0x178
10013682:	e14f      	b.n	10013924 <_vfprintf_r+0x8ac>
10013684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10013686:	f853 2b04 	ldr.w	r2, [r3], #4
1001368a:	920b      	str	r2, [sp, #44]	@ 0x2c
1001368c:	2a00      	cmp	r2, #0
1001368e:	f280 83cd 	bge.w	10013e2c <_vfprintf_r+0xdb4>
10013692:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10013694:	930d      	str	r3, [sp, #52]	@ 0x34
10013696:	4252      	negs	r2, r2
10013698:	920b      	str	r2, [sp, #44]	@ 0x2c
1001369a:	7823      	ldrb	r3, [r4, #0]
1001369c:	f049 0904 	orr.w	r9, r9, #4
100136a0:	e562      	b.n	10013168 <_vfprintf_r+0xf0>
100136a2:	7823      	ldrb	r3, [r4, #0]
100136a4:	2b6c      	cmp	r3, #108	@ 0x6c
100136a6:	bf03      	ittte	eq
100136a8:	7863      	ldrbeq	r3, [r4, #1]
100136aa:	f049 0920 	orreq.w	r9, r9, #32
100136ae:	3401      	addeq	r4, #1
100136b0:	f049 0910 	orrne.w	r9, r9, #16
100136b4:	e558      	b.n	10013168 <_vfprintf_r+0xf0>
100136b6:	7823      	ldrb	r3, [r4, #0]
100136b8:	2b68      	cmp	r3, #104	@ 0x68
100136ba:	bf03      	ittte	eq
100136bc:	7863      	ldrbeq	r3, [r4, #1]
100136be:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
100136c2:	3401      	addeq	r4, #1
100136c4:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
100136c8:	e54e      	b.n	10013168 <_vfprintf_r+0xf0>
100136ca:	232b      	movs	r3, #43	@ 0x2b
100136cc:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
100136d0:	7823      	ldrb	r3, [r4, #0]
100136d2:	e549      	b.n	10013168 <_vfprintf_r+0xf0>
100136d4:	7823      	ldrb	r3, [r4, #0]
100136d6:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
100136da:	e545      	b.n	10013168 <_vfprintf_r+0xf0>
100136dc:	4621      	mov	r1, r4
100136de:	f811 3b01 	ldrb.w	r3, [r1], #1
100136e2:	2b2a      	cmp	r3, #42	@ 0x2a
100136e4:	f001 82d7 	beq.w	10014c96 <_vfprintf_r+0x1c1e>
100136e8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
100136ec:	2a09      	cmp	r2, #9
100136ee:	460c      	mov	r4, r1
100136f0:	bf98      	it	ls
100136f2:	2100      	movls	r1, #0
100136f4:	f201 816f 	bhi.w	100149d6 <_vfprintf_r+0x195e>
100136f8:	f814 3b01 	ldrb.w	r3, [r4], #1
100136fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
10013700:	eb02 0141 	add.w	r1, r2, r1, lsl #1
10013704:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10013708:	2a09      	cmp	r2, #9
1001370a:	d9f5      	bls.n	100136f8 <_vfprintf_r+0x680>
1001370c:	9109      	str	r1, [sp, #36]	@ 0x24
1001370e:	e52c      	b.n	1001316a <_vfprintf_r+0xf2>
10013710:	7823      	ldrb	r3, [r4, #0]
10013712:	f049 0901 	orr.w	r9, r9, #1
10013716:	e527      	b.n	10013168 <_vfprintf_r+0xf0>
10013718:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001371c:	7823      	ldrb	r3, [r4, #0]
1001371e:	2a00      	cmp	r2, #0
10013720:	f47f ad22 	bne.w	10013168 <_vfprintf_r+0xf0>
10013724:	2220      	movs	r2, #32
10013726:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001372a:	e51d      	b.n	10013168 <_vfprintf_r+0xf0>
1001372c:	7fefffff 	.word	0x7fefffff
10013730:	10023a38 	.word	0x10023a38
10013734:	10023a3c 	.word	0x10023a3c
10013738:	10023a88 	.word	0x10023a88
1001373c:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10013740:	f049 0910 	orr.w	r9, r9, #16
10013744:	f019 0220 	ands.w	r2, r9, #32
10013748:	f000 8354 	beq.w	10013df4 <_vfprintf_r+0xd7c>
1001374c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001374e:	3307      	adds	r3, #7
10013750:	f023 0307 	bic.w	r3, r3, #7
10013754:	4619      	mov	r1, r3
10013756:	685a      	ldr	r2, [r3, #4]
10013758:	f851 3b08 	ldr.w	r3, [r1], #8
1001375c:	910d      	str	r1, [sp, #52]	@ 0x34
1001375e:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
10013762:	2100      	movs	r1, #0
10013764:	2000      	movs	r0, #0
10013766:	9d09      	ldr	r5, [sp, #36]	@ 0x24
10013768:	f88d 009f 	strb.w	r0, [sp, #159]	@ 0x9f
1001376c:	1c6f      	adds	r7, r5, #1
1001376e:	f000 80c2 	beq.w	100138f6 <_vfprintf_r+0x87e>
10013772:	ea53 0002 	orrs.w	r0, r3, r2
10013776:	f024 0980 	bic.w	r9, r4, #128	@ 0x80
1001377a:	f040 80bb 	bne.w	100138f4 <_vfprintf_r+0x87c>
1001377e:	2d00      	cmp	r5, #0
10013780:	f040 8523 	bne.w	100141ca <_vfprintf_r+0x1152>
10013784:	2900      	cmp	r1, #0
10013786:	f040 8496 	bne.w	100140b6 <_vfprintf_r+0x103e>
1001378a:	f014 0b01 	ands.w	fp, r4, #1
1001378e:	f000 8351 	beq.w	10013e34 <_vfprintf_r+0xdbc>
10013792:	2330      	movs	r3, #48	@ 0x30
10013794:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
10013798:	f20d 1577 	addw	r5, sp, #375	@ 0x177
1001379c:	e0c2      	b.n	10013924 <_vfprintf_r+0x8ac>
1001379e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100137a2:	f049 0410 	orr.w	r4, r9, #16
100137a6:	f014 0220 	ands.w	r2, r4, #32
100137aa:	f000 8315 	beq.w	10013dd8 <_vfprintf_r+0xd60>
100137ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100137b0:	3307      	adds	r3, #7
100137b2:	f023 0307 	bic.w	r3, r3, #7
100137b6:	4619      	mov	r1, r3
100137b8:	685a      	ldr	r2, [r3, #4]
100137ba:	f851 3b08 	ldr.w	r3, [r1], #8
100137be:	910d      	str	r1, [sp, #52]	@ 0x34
100137c0:	2101      	movs	r1, #1
100137c2:	e7cf      	b.n	10013764 <_vfprintf_r+0x6ec>
100137c4:	7823      	ldrb	r3, [r4, #0]
100137c6:	f049 0908 	orr.w	r9, r9, #8
100137ca:	e4cd      	b.n	10013168 <_vfprintf_r+0xf0>
100137cc:	f049 0910 	orr.w	r9, r9, #16
100137d0:	f019 0f20 	tst.w	r9, #32
100137d4:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100137d8:	f47f af35 	bne.w	10013646 <_vfprintf_r+0x5ce>
100137dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100137de:	f019 0f10 	tst.w	r9, #16
100137e2:	f852 3b04 	ldr.w	r3, [r2], #4
100137e6:	920d      	str	r2, [sp, #52]	@ 0x34
100137e8:	f040 8359 	bne.w	10013e9e <_vfprintf_r+0xe26>
100137ec:	f019 0f40 	tst.w	r9, #64	@ 0x40
100137f0:	f000 8351 	beq.w	10013e96 <_vfprintf_r+0xe1e>
100137f4:	f343 32c0 	sbfx	r2, r3, #15, #1
100137f8:	4611      	mov	r1, r2
100137fa:	b21b      	sxth	r3, r3
100137fc:	e72d      	b.n	1001365a <_vfprintf_r+0x5e2>
100137fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10013800:	940f      	str	r4, [sp, #60]	@ 0x3c
10013802:	f852 3b04 	ldr.w	r3, [r2], #4
10013806:	920d      	str	r2, [sp, #52]	@ 0x34
10013808:	f647 0230 	movw	r2, #30768	@ 0x7830
1001380c:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
10013810:	2078      	movs	r0, #120	@ 0x78
10013812:	4ab1      	ldr	r2, [pc, #708]	@ (10013ad8 <_vfprintf_r+0xa60>)
10013814:	921a      	str	r2, [sp, #104]	@ 0x68
10013816:	f049 0402 	orr.w	r4, r9, #2
1001381a:	2200      	movs	r2, #0
1001381c:	2102      	movs	r1, #2
1001381e:	900e      	str	r0, [sp, #56]	@ 0x38
10013820:	e7a0      	b.n	10013764 <_vfprintf_r+0x6ec>
10013822:	f019 0f20 	tst.w	r9, #32
10013826:	940f      	str	r4, [sp, #60]	@ 0x3c
10013828:	f000 8359 	beq.w	10013ede <_vfprintf_r+0xe66>
1001382c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001382e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10013830:	681b      	ldr	r3, [r3, #0]
10013832:	601a      	str	r2, [r3, #0]
10013834:	17d2      	asrs	r2, r2, #31
10013836:	605a      	str	r2, [r3, #4]
10013838:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001383a:	3304      	adds	r3, #4
1001383c:	930d      	str	r3, [sp, #52]	@ 0x34
1001383e:	e610      	b.n	10013462 <_vfprintf_r+0x3ea>
10013840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10013842:	2b65      	cmp	r3, #101	@ 0x65
10013844:	f340 814e 	ble.w	10013ae4 <_vfprintf_r+0xa6c>
10013848:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001384c:	2200      	movs	r2, #0
1001384e:	2300      	movs	r3, #0
10013850:	f007 ff64 	bl	1001b71c <__aeabi_dcmpeq>
10013854:	2800      	cmp	r0, #0
10013856:	f000 81ee 	beq.w	10013c36 <_vfprintf_r+0xbbe>
1001385a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001385c:	4a9f      	ldr	r2, [pc, #636]	@ (10013adc <_vfprintf_r+0xa64>)
1001385e:	f8c8 2000 	str.w	r2, [r8]
10013862:	3301      	adds	r3, #1
10013864:	3401      	adds	r4, #1
10013866:	2201      	movs	r2, #1
10013868:	2b07      	cmp	r3, #7
1001386a:	9434      	str	r4, [sp, #208]	@ 0xd0
1001386c:	9333      	str	r3, [sp, #204]	@ 0xcc
1001386e:	f8c8 2004 	str.w	r2, [r8, #4]
10013872:	f300 84af 	bgt.w	100141d4 <_vfprintf_r+0x115c>
10013876:	f108 0808 	add.w	r8, r8, #8
1001387a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001387c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001387e:	4293      	cmp	r3, r2
10013880:	f280 82cf 	bge.w	10013e22 <_vfprintf_r+0xdaa>
10013884:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10013886:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10013888:	441c      	add	r4, r3
1001388a:	e9c8 2300 	strd	r2, r3, [r8]
1001388e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013890:	9434      	str	r4, [sp, #208]	@ 0xd0
10013892:	3301      	adds	r3, #1
10013894:	2b07      	cmp	r3, #7
10013896:	9333      	str	r3, [sp, #204]	@ 0xcc
10013898:	f300 83cb 	bgt.w	10014032 <_vfprintf_r+0xfba>
1001389c:	f108 0808 	add.w	r8, r8, #8
100138a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100138a2:	1e5d      	subs	r5, r3, #1
100138a4:	2d00      	cmp	r5, #0
100138a6:	f77f adbe 	ble.w	10013426 <_vfprintf_r+0x3ae>
100138aa:	2d10      	cmp	r5, #16
100138ac:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100138ae:	f340 84f9 	ble.w	100142a4 <_vfprintf_r+0x122c>
100138b2:	4f8b      	ldr	r7, [pc, #556]	@ (10013ae0 <_vfprintf_r+0xa68>)
100138b4:	9715      	str	r7, [sp, #84]	@ 0x54
100138b6:	e9dd ab07 	ldrd	sl, fp, [sp, #28]
100138ba:	2610      	movs	r6, #16
100138bc:	e005      	b.n	100138ca <_vfprintf_r+0x852>
100138be:	f108 0808 	add.w	r8, r8, #8
100138c2:	3d10      	subs	r5, #16
100138c4:	2d10      	cmp	r5, #16
100138c6:	f340 84ef 	ble.w	100142a8 <_vfprintf_r+0x1230>
100138ca:	3301      	adds	r3, #1
100138cc:	3410      	adds	r4, #16
100138ce:	2b07      	cmp	r3, #7
100138d0:	e9c8 7600 	strd	r7, r6, [r8]
100138d4:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100138d8:	ddf1      	ble.n	100138be <_vfprintf_r+0x846>
100138da:	aa32      	add	r2, sp, #200	@ 0xc8
100138dc:	4651      	mov	r1, sl
100138de:	4658      	mov	r0, fp
100138e0:	f001 fa6e 	bl	10014dc0 <__sprint_r>
100138e4:	2800      	cmp	r0, #0
100138e6:	f47f ad1f 	bne.w	10013328 <_vfprintf_r+0x2b0>
100138ea:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
100138ee:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100138f2:	e7e6      	b.n	100138c2 <_vfprintf_r+0x84a>
100138f4:	464c      	mov	r4, r9
100138f6:	2901      	cmp	r1, #1
100138f8:	f000 813b 	beq.w	10013b72 <_vfprintf_r+0xafa>
100138fc:	2902      	cmp	r1, #2
100138fe:	ad5e      	add	r5, sp, #376	@ 0x178
10013900:	d11e      	bne.n	10013940 <_vfprintf_r+0x8c8>
10013902:	981a      	ldr	r0, [sp, #104]	@ 0x68
10013904:	f003 010f 	and.w	r1, r3, #15
10013908:	091b      	lsrs	r3, r3, #4
1001390a:	5c41      	ldrb	r1, [r0, r1]
1001390c:	f805 1d01 	strb.w	r1, [r5, #-1]!
10013910:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
10013914:	0912      	lsrs	r2, r2, #4
10013916:	ea53 0102 	orrs.w	r1, r3, r2
1001391a:	d1f3      	bne.n	10013904 <_vfprintf_r+0x88c>
1001391c:	ab5e      	add	r3, sp, #376	@ 0x178
1001391e:	46a1      	mov	r9, r4
10013920:	eba3 0b05 	sub.w	fp, r3, r5
10013924:	9909      	ldr	r1, [sp, #36]	@ 0x24
10013926:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001392a:	4559      	cmp	r1, fp
1001392c:	f04f 0300 	mov.w	r3, #0
10013930:	bfb8      	it	lt
10013932:	4659      	movlt	r1, fp
10013934:	930c      	str	r3, [sp, #48]	@ 0x30
10013936:	9106      	str	r1, [sp, #24]
10013938:	9314      	str	r3, [sp, #80]	@ 0x50
1001393a:	9310      	str	r3, [sp, #64]	@ 0x40
1001393c:	9312      	str	r3, [sp, #72]	@ 0x48
1001393e:	e5d6      	b.n	100134ee <_vfprintf_r+0x476>
10013940:	f003 0107 	and.w	r1, r3, #7
10013944:	08db      	lsrs	r3, r3, #3
10013946:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
1001394a:	08d2      	lsrs	r2, r2, #3
1001394c:	3130      	adds	r1, #48	@ 0x30
1001394e:	ea53 0602 	orrs.w	r6, r3, r2
10013952:	4628      	mov	r0, r5
10013954:	f805 1d01 	strb.w	r1, [r5, #-1]!
10013958:	d1f2      	bne.n	10013940 <_vfprintf_r+0x8c8>
1001395a:	07e6      	lsls	r6, r4, #31
1001395c:	d5de      	bpl.n	1001391c <_vfprintf_r+0x8a4>
1001395e:	2930      	cmp	r1, #48	@ 0x30
10013960:	d0dc      	beq.n	1001391c <_vfprintf_r+0x8a4>
10013962:	2330      	movs	r3, #48	@ 0x30
10013964:	3802      	subs	r0, #2
10013966:	f805 3c01 	strb.w	r3, [r5, #-1]
1001396a:	ab5e      	add	r3, sp, #376	@ 0x178
1001396c:	46a1      	mov	r9, r4
1001396e:	eba3 0b00 	sub.w	fp, r3, r0
10013972:	4605      	mov	r5, r0
10013974:	e7d6      	b.n	10013924 <_vfprintf_r+0x8ac>
10013976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10013978:	9a06      	ldr	r2, [sp, #24]
1001397a:	1a9e      	subs	r6, r3, r2
1001397c:	2e00      	cmp	r6, #0
1001397e:	f77f ad3a 	ble.w	100133f6 <_vfprintf_r+0x37e>
10013982:	2e10      	cmp	r6, #16
10013984:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013986:	f341 80ab 	ble.w	10014ae0 <_vfprintf_r+0x1a68>
1001398a:	4855      	ldr	r0, [pc, #340]	@ (10013ae0 <_vfprintf_r+0xa68>)
1001398c:	f8dd a020 	ldr.w	sl, [sp, #32]
10013990:	9015      	str	r0, [sp, #84]	@ 0x54
10013992:	4621      	mov	r1, r4
10013994:	2710      	movs	r7, #16
10013996:	461a      	mov	r2, r3
10013998:	4604      	mov	r4, r0
1001399a:	e004      	b.n	100139a6 <_vfprintf_r+0x92e>
1001399c:	3e10      	subs	r6, #16
1001399e:	2e10      	cmp	r6, #16
100139a0:	f108 0808 	add.w	r8, r8, #8
100139a4:	dd16      	ble.n	100139d4 <_vfprintf_r+0x95c>
100139a6:	3201      	adds	r2, #1
100139a8:	3110      	adds	r1, #16
100139aa:	2a07      	cmp	r2, #7
100139ac:	e9c8 4700 	strd	r4, r7, [r8]
100139b0:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
100139b4:	ddf2      	ble.n	1001399c <_vfprintf_r+0x924>
100139b6:	9907      	ldr	r1, [sp, #28]
100139b8:	aa32      	add	r2, sp, #200	@ 0xc8
100139ba:	4650      	mov	r0, sl
100139bc:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100139c0:	f001 f9fe 	bl	10014dc0 <__sprint_r>
100139c4:	2800      	cmp	r0, #0
100139c6:	f040 83f8 	bne.w	100141ba <_vfprintf_r+0x1142>
100139ca:	3e10      	subs	r6, #16
100139cc:	2e10      	cmp	r6, #16
100139ce:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
100139d2:	dce8      	bgt.n	100139a6 <_vfprintf_r+0x92e>
100139d4:	460c      	mov	r4, r1
100139d6:	4613      	mov	r3, r2
100139d8:	3301      	adds	r3, #1
100139da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100139dc:	f8c8 2000 	str.w	r2, [r8]
100139e0:	4434      	add	r4, r6
100139e2:	2b07      	cmp	r3, #7
100139e4:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100139e8:	f8c8 6004 	str.w	r6, [r8, #4]
100139ec:	f300 8314 	bgt.w	10014018 <_vfprintf_r+0xfa0>
100139f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100139f2:	eba3 060b 	sub.w	r6, r3, fp
100139f6:	2e00      	cmp	r6, #0
100139f8:	f108 0808 	add.w	r8, r8, #8
100139fc:	f77f ad01 	ble.w	10013402 <_vfprintf_r+0x38a>
10013a00:	4a37      	ldr	r2, [pc, #220]	@ (10013ae0 <_vfprintf_r+0xa68>)
10013a02:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013a04:	9215      	str	r2, [sp, #84]	@ 0x54
10013a06:	2e10      	cmp	r6, #16
10013a08:	dd23      	ble.n	10013a52 <_vfprintf_r+0x9da>
10013a0a:	4622      	mov	r2, r4
10013a0c:	f04f 0a10 	mov.w	sl, #16
10013a10:	e9dd 4707 	ldrd	r4, r7, [sp, #28]
10013a14:	e004      	b.n	10013a20 <_vfprintf_r+0x9a8>
10013a16:	3e10      	subs	r6, #16
10013a18:	2e10      	cmp	r6, #16
10013a1a:	f108 0808 	add.w	r8, r8, #8
10013a1e:	dd17      	ble.n	10013a50 <_vfprintf_r+0x9d8>
10013a20:	3301      	adds	r3, #1
10013a22:	492f      	ldr	r1, [pc, #188]	@ (10013ae0 <_vfprintf_r+0xa68>)
10013a24:	3210      	adds	r2, #16
10013a26:	2b07      	cmp	r3, #7
10013a28:	e9c8 1a00 	strd	r1, sl, [r8]
10013a2c:	e9cd 3233 	strd	r3, r2, [sp, #204]	@ 0xcc
10013a30:	ddf1      	ble.n	10013a16 <_vfprintf_r+0x99e>
10013a32:	aa32      	add	r2, sp, #200	@ 0xc8
10013a34:	4621      	mov	r1, r4
10013a36:	4638      	mov	r0, r7
10013a38:	f001 f9c2 	bl	10014dc0 <__sprint_r>
10013a3c:	2800      	cmp	r0, #0
10013a3e:	f47f ac72 	bne.w	10013326 <_vfprintf_r+0x2ae>
10013a42:	3e10      	subs	r6, #16
10013a44:	2e10      	cmp	r6, #16
10013a46:	e9dd 3233 	ldrd	r3, r2, [sp, #204]	@ 0xcc
10013a4a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013a4e:	dce7      	bgt.n	10013a20 <_vfprintf_r+0x9a8>
10013a50:	4614      	mov	r4, r2
10013a52:	3301      	adds	r3, #1
10013a54:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10013a56:	f8c8 2000 	str.w	r2, [r8]
10013a5a:	4434      	add	r4, r6
10013a5c:	2b07      	cmp	r3, #7
10013a5e:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10013a62:	f8c8 6004 	str.w	r6, [r8, #4]
10013a66:	f300 81aa 	bgt.w	10013dbe <_vfprintf_r+0xd46>
10013a6a:	f108 0808 	add.w	r8, r8, #8
10013a6e:	e4c8      	b.n	10013402 <_vfprintf_r+0x38a>
10013a70:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013a74:	aa32      	add	r2, sp, #200	@ 0xc8
10013a76:	f001 f9a3 	bl	10014dc0 <__sprint_r>
10013a7a:	2800      	cmp	r0, #0
10013a7c:	f43f ace7 	beq.w	1001344e <_vfprintf_r+0x3d6>
10013a80:	f8dd b020 	ldr.w	fp, [sp, #32]
10013a84:	e450      	b.n	10013328 <_vfprintf_r+0x2b0>
10013a86:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10013a88:	9919      	ldr	r1, [sp, #100]	@ 0x64
10013a8a:	441c      	add	r4, r3
10013a8c:	e9c8 1300 	strd	r1, r3, [r8]
10013a90:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013a92:	9434      	str	r4, [sp, #208]	@ 0xd0
10013a94:	3301      	adds	r3, #1
10013a96:	2b07      	cmp	r3, #7
10013a98:	9333      	str	r3, [sp, #204]	@ 0xcc
10013a9a:	f300 85bd 	bgt.w	10014618 <_vfprintf_r+0x15a0>
10013a9e:	f108 0808 	add.w	r8, r8, #8
10013aa2:	2a00      	cmp	r2, #0
10013aa4:	f2c0 87ac 	blt.w	10014a00 <_vfprintf_r+0x1988>
10013aa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10013aaa:	f8c8 5000 	str.w	r5, [r8]
10013aae:	3301      	adds	r3, #1
10013ab0:	4414      	add	r4, r2
10013ab2:	2b07      	cmp	r3, #7
10013ab4:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10013ab8:	f8c8 2004 	str.w	r2, [r8, #4]
10013abc:	f77f acb1 	ble.w	10013422 <_vfprintf_r+0x3aa>
10013ac0:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013ac4:	aa32      	add	r2, sp, #200	@ 0xc8
10013ac6:	f001 f97b 	bl	10014dc0 <__sprint_r>
10013aca:	2800      	cmp	r0, #0
10013acc:	d1d8      	bne.n	10013a80 <_vfprintf_r+0xa08>
10013ace:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10013ad0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013ad4:	e4a7      	b.n	10013426 <_vfprintf_r+0x3ae>
10013ad6:	bf00      	nop
10013ad8:	10023a48 	.word	0x10023a48
10013adc:	1001bcbc 	.word	0x1001bcbc
10013ae0:	10023a78 	.word	0x10023a78
10013ae4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10013ae6:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
10013ae8:	2b01      	cmp	r3, #1
10013aea:	f104 0401 	add.w	r4, r4, #1
10013aee:	f106 0601 	add.w	r6, r6, #1
10013af2:	f108 0708 	add.w	r7, r8, #8
10013af6:	f340 811d 	ble.w	10013d34 <_vfprintf_r+0xcbc>
10013afa:	2301      	movs	r3, #1
10013afc:	2e07      	cmp	r6, #7
10013afe:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10013b02:	f8c8 5000 	str.w	r5, [r8]
10013b06:	f8c8 3004 	str.w	r3, [r8, #4]
10013b0a:	f300 82e4 	bgt.w	100140d6 <_vfprintf_r+0x105e>
10013b0e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10013b10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10013b12:	3601      	adds	r6, #1
10013b14:	441c      	add	r4, r3
10013b16:	2e07      	cmp	r6, #7
10013b18:	e9c7 2300 	strd	r2, r3, [r7]
10013b1c:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10013b20:	f300 82cd 	bgt.w	100140be <_vfprintf_r+0x1046>
10013b24:	3708      	adds	r7, #8
10013b26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10013b28:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10013b2c:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
10013b30:	2200      	movs	r2, #0
10013b32:	2300      	movs	r3, #0
10013b34:	f007 fdf2 	bl	1001b71c <__aeabi_dcmpeq>
10013b38:	2800      	cmp	r0, #0
10013b3a:	f040 8115 	bne.w	10013d68 <_vfprintf_r+0xcf0>
10013b3e:	3601      	adds	r6, #1
10013b40:	3501      	adds	r5, #1
10013b42:	4444      	add	r4, r8
10013b44:	2e07      	cmp	r6, #7
10013b46:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10013b4a:	603d      	str	r5, [r7, #0]
10013b4c:	f8c7 8004 	str.w	r8, [r7, #4]
10013b50:	f300 80fe 	bgt.w	10013d50 <_vfprintf_r+0xcd8>
10013b54:	3708      	adds	r7, #8
10013b56:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10013b58:	607b      	str	r3, [r7, #4]
10013b5a:	3601      	adds	r6, #1
10013b5c:	441c      	add	r4, r3
10013b5e:	2e07      	cmp	r6, #7
10013b60:	ab2c      	add	r3, sp, #176	@ 0xb0
10013b62:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10013b66:	603b      	str	r3, [r7, #0]
10013b68:	dcaa      	bgt.n	10013ac0 <_vfprintf_r+0xa48>
10013b6a:	f107 0808 	add.w	r8, r7, #8
10013b6e:	e45a      	b.n	10013426 <_vfprintf_r+0x3ae>
10013b70:	464c      	mov	r4, r9
10013b72:	2b0a      	cmp	r3, #10
10013b74:	f172 0100 	sbcs.w	r1, r2, #0
10013b78:	f080 82b9 	bcs.w	100140ee <_vfprintf_r+0x1076>
10013b7c:	3330      	adds	r3, #48	@ 0x30
10013b7e:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
10013b82:	46a1      	mov	r9, r4
10013b84:	f04f 0b01 	mov.w	fp, #1
10013b88:	f20d 1577 	addw	r5, sp, #375	@ 0x177
10013b8c:	e6ca      	b.n	10013924 <_vfprintf_r+0x8ac>
10013b8e:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013b92:	aa32      	add	r2, sp, #200	@ 0xc8
10013b94:	9315      	str	r3, [sp, #84]	@ 0x54
10013b96:	f001 f913 	bl	10014dc0 <__sprint_r>
10013b9a:	2800      	cmp	r0, #0
10013b9c:	f47f af70 	bne.w	10013a80 <_vfprintf_r+0xa08>
10013ba0:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10013ba2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10013ba4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013ba8:	e410      	b.n	100133cc <_vfprintf_r+0x354>
10013baa:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013bae:	aa32      	add	r2, sp, #200	@ 0xc8
10013bb0:	f001 f906 	bl	10014dc0 <__sprint_r>
10013bb4:	2800      	cmp	r0, #0
10013bb6:	f47f af63 	bne.w	10013a80 <_vfprintf_r+0xa08>
10013bba:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10013bbc:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013bc0:	e416      	b.n	100133f0 <_vfprintf_r+0x378>
10013bc2:	2d10      	cmp	r5, #16
10013bc4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013bc6:	f340 8750 	ble.w	10014a6a <_vfprintf_r+0x19f2>
10013bca:	4fbb      	ldr	r7, [pc, #748]	@ (10013eb8 <_vfprintf_r+0xe40>)
10013bcc:	9715      	str	r7, [sp, #84]	@ 0x54
10013bce:	e9dd a907 	ldrd	sl, r9, [sp, #28]
10013bd2:	2610      	movs	r6, #16
10013bd4:	e004      	b.n	10013be0 <_vfprintf_r+0xb68>
10013bd6:	3d10      	subs	r5, #16
10013bd8:	2d10      	cmp	r5, #16
10013bda:	f108 0808 	add.w	r8, r8, #8
10013bde:	dd16      	ble.n	10013c0e <_vfprintf_r+0xb96>
10013be0:	3301      	adds	r3, #1
10013be2:	3410      	adds	r4, #16
10013be4:	2b07      	cmp	r3, #7
10013be6:	e9c8 7600 	strd	r7, r6, [r8]
10013bea:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10013bee:	ddf2      	ble.n	10013bd6 <_vfprintf_r+0xb5e>
10013bf0:	aa32      	add	r2, sp, #200	@ 0xc8
10013bf2:	4651      	mov	r1, sl
10013bf4:	4648      	mov	r0, r9
10013bf6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013bfa:	f001 f8e1 	bl	10014dc0 <__sprint_r>
10013bfe:	2800      	cmp	r0, #0
10013c00:	f040 82f5 	bne.w	100141ee <_vfprintf_r+0x1176>
10013c04:	3d10      	subs	r5, #16
10013c06:	2d10      	cmp	r5, #16
10013c08:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10013c0c:	dce8      	bgt.n	10013be0 <_vfprintf_r+0xb68>
10013c0e:	3301      	adds	r3, #1
10013c10:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10013c12:	442c      	add	r4, r5
10013c14:	2b07      	cmp	r3, #7
10013c16:	e9c8 2500 	strd	r2, r5, [r8]
10013c1a:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10013c1e:	f77f ac0b 	ble.w	10013438 <_vfprintf_r+0x3c0>
10013c22:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013c26:	aa32      	add	r2, sp, #200	@ 0xc8
10013c28:	f001 f8ca 	bl	10014dc0 <__sprint_r>
10013c2c:	2800      	cmp	r0, #0
10013c2e:	f47f af27 	bne.w	10013a80 <_vfprintf_r+0xa08>
10013c32:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10013c34:	e400      	b.n	10013438 <_vfprintf_r+0x3c0>
10013c36:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10013c38:	2a00      	cmp	r2, #0
10013c3a:	f340 80fd 	ble.w	10013e38 <_vfprintf_r+0xdc0>
10013c3e:	e9dd 7312 	ldrd	r7, r3, [sp, #72]	@ 0x48
10013c42:	429f      	cmp	r7, r3
10013c44:	bfa8      	it	ge
10013c46:	461f      	movge	r7, r3
10013c48:	2f00      	cmp	r7, #0
10013c4a:	eb05 0b03 	add.w	fp, r5, r3
10013c4e:	dd0b      	ble.n	10013c68 <_vfprintf_r+0xbf0>
10013c50:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013c52:	3301      	adds	r3, #1
10013c54:	443c      	add	r4, r7
10013c56:	2b07      	cmp	r3, #7
10013c58:	e9c8 5700 	strd	r5, r7, [r8]
10013c5c:	9434      	str	r4, [sp, #208]	@ 0xd0
10013c5e:	9333      	str	r3, [sp, #204]	@ 0xcc
10013c60:	f300 866d 	bgt.w	1001493e <_vfprintf_r+0x18c6>
10013c64:	f108 0808 	add.w	r8, r8, #8
10013c68:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10013c6a:	2f00      	cmp	r7, #0
10013c6c:	bfa8      	it	ge
10013c6e:	1bf6      	subge	r6, r6, r7
10013c70:	2e00      	cmp	r6, #0
10013c72:	f300 8345 	bgt.w	10014300 <_vfprintf_r+0x1288>
10013c76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10013c78:	f419 6f80 	tst.w	r9, #1024	@ 0x400
10013c7c:	442b      	add	r3, r5
10013c7e:	469a      	mov	sl, r3
10013c80:	f040 8578 	bne.w	10014774 <_vfprintf_r+0x16fc>
10013c84:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10013c86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10013c88:	429d      	cmp	r5, r3
10013c8a:	db03      	blt.n	10013c94 <_vfprintf_r+0xc1c>
10013c8c:	f019 0f01 	tst.w	r9, #1
10013c90:	f000 8402 	beq.w	10014498 <_vfprintf_r+0x1420>
10013c94:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10013c96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10013c98:	441c      	add	r4, r3
10013c9a:	e9c8 2300 	strd	r2, r3, [r8]
10013c9e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013ca0:	9434      	str	r4, [sp, #208]	@ 0xd0
10013ca2:	3301      	adds	r3, #1
10013ca4:	2b07      	cmp	r3, #7
10013ca6:	9333      	str	r3, [sp, #204]	@ 0xcc
10013ca8:	f300 8658 	bgt.w	1001495c <_vfprintf_r+0x18e4>
10013cac:	f108 0808 	add.w	r8, r8, #8
10013cb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10013cb2:	ebab 060a 	sub.w	r6, fp, sl
10013cb6:	1b5d      	subs	r5, r3, r5
10013cb8:	42ae      	cmp	r6, r5
10013cba:	bfa8      	it	ge
10013cbc:	462e      	movge	r6, r5
10013cbe:	2e00      	cmp	r6, #0
10013cc0:	dd0d      	ble.n	10013cde <_vfprintf_r+0xc66>
10013cc2:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013cc4:	f8c8 a000 	str.w	sl, [r8]
10013cc8:	3301      	adds	r3, #1
10013cca:	4434      	add	r4, r6
10013ccc:	2b07      	cmp	r3, #7
10013cce:	f8c8 6004 	str.w	r6, [r8, #4]
10013cd2:	9434      	str	r4, [sp, #208]	@ 0xd0
10013cd4:	9333      	str	r3, [sp, #204]	@ 0xcc
10013cd6:	f300 8653 	bgt.w	10014980 <_vfprintf_r+0x1908>
10013cda:	f108 0808 	add.w	r8, r8, #8
10013cde:	2e00      	cmp	r6, #0
10013ce0:	bfa8      	it	ge
10013ce2:	1bad      	subge	r5, r5, r6
10013ce4:	2d00      	cmp	r5, #0
10013ce6:	f77f ab9e 	ble.w	10013426 <_vfprintf_r+0x3ae>
10013cea:	2d10      	cmp	r5, #16
10013cec:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013cee:	f340 82d9 	ble.w	100142a4 <_vfprintf_r+0x122c>
10013cf2:	4f72      	ldr	r7, [pc, #456]	@ (10013ebc <_vfprintf_r+0xe44>)
10013cf4:	9715      	str	r7, [sp, #84]	@ 0x54
10013cf6:	e9dd ab07 	ldrd	sl, fp, [sp, #28]
10013cfa:	2610      	movs	r6, #16
10013cfc:	e005      	b.n	10013d0a <_vfprintf_r+0xc92>
10013cfe:	f108 0808 	add.w	r8, r8, #8
10013d02:	3d10      	subs	r5, #16
10013d04:	2d10      	cmp	r5, #16
10013d06:	f340 82cf 	ble.w	100142a8 <_vfprintf_r+0x1230>
10013d0a:	3301      	adds	r3, #1
10013d0c:	3410      	adds	r4, #16
10013d0e:	2b07      	cmp	r3, #7
10013d10:	e9c8 7600 	strd	r7, r6, [r8]
10013d14:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10013d18:	ddf1      	ble.n	10013cfe <_vfprintf_r+0xc86>
10013d1a:	aa32      	add	r2, sp, #200	@ 0xc8
10013d1c:	4651      	mov	r1, sl
10013d1e:	4658      	mov	r0, fp
10013d20:	f001 f84e 	bl	10014dc0 <__sprint_r>
10013d24:	2800      	cmp	r0, #0
10013d26:	f47f aaff 	bne.w	10013328 <_vfprintf_r+0x2b0>
10013d2a:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10013d2e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013d32:	e7e6      	b.n	10013d02 <_vfprintf_r+0xc8a>
10013d34:	f019 0f01 	tst.w	r9, #1
10013d38:	f47f aedf 	bne.w	10013afa <_vfprintf_r+0xa82>
10013d3c:	2301      	movs	r3, #1
10013d3e:	2e07      	cmp	r6, #7
10013d40:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10013d44:	f8c8 5000 	str.w	r5, [r8]
10013d48:	f8c8 3004 	str.w	r3, [r8, #4]
10013d4c:	f77f af03 	ble.w	10013b56 <_vfprintf_r+0xade>
10013d50:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013d54:	aa32      	add	r2, sp, #200	@ 0xc8
10013d56:	f001 f833 	bl	10014dc0 <__sprint_r>
10013d5a:	2800      	cmp	r0, #0
10013d5c:	f47f ae90 	bne.w	10013a80 <_vfprintf_r+0xa08>
10013d60:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10013d64:	af35      	add	r7, sp, #212	@ 0xd4
10013d66:	e6f6      	b.n	10013b56 <_vfprintf_r+0xade>
10013d68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10013d6a:	2b01      	cmp	r3, #1
10013d6c:	f77f aef3 	ble.w	10013b56 <_vfprintf_r+0xade>
10013d70:	2b11      	cmp	r3, #17
10013d72:	4b52      	ldr	r3, [pc, #328]	@ (10013ebc <_vfprintf_r+0xe44>)
10013d74:	9315      	str	r3, [sp, #84]	@ 0x54
10013d76:	f340 82b7 	ble.w	100142e8 <_vfprintf_r+0x1270>
10013d7a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
10013d7e:	e9dd ba07 	ldrd	fp, sl, [sp, #28]
10013d82:	2510      	movs	r5, #16
10013d84:	4699      	mov	r9, r3
10013d86:	e006      	b.n	10013d96 <_vfprintf_r+0xd1e>
10013d88:	3708      	adds	r7, #8
10013d8a:	f1a8 0810 	sub.w	r8, r8, #16
10013d8e:	f1b8 0f10 	cmp.w	r8, #16
10013d92:	f340 82a7 	ble.w	100142e4 <_vfprintf_r+0x126c>
10013d96:	3601      	adds	r6, #1
10013d98:	3410      	adds	r4, #16
10013d9a:	2e07      	cmp	r6, #7
10013d9c:	e9c7 9500 	strd	r9, r5, [r7]
10013da0:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10013da4:	ddf0      	ble.n	10013d88 <_vfprintf_r+0xd10>
10013da6:	aa32      	add	r2, sp, #200	@ 0xc8
10013da8:	4659      	mov	r1, fp
10013daa:	4650      	mov	r0, sl
10013dac:	f001 f808 	bl	10014dc0 <__sprint_r>
10013db0:	2800      	cmp	r0, #0
10013db2:	f040 8202 	bne.w	100141ba <_vfprintf_r+0x1142>
10013db6:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10013dba:	af35      	add	r7, sp, #212	@ 0xd4
10013dbc:	e7e5      	b.n	10013d8a <_vfprintf_r+0xd12>
10013dbe:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10013dc2:	aa32      	add	r2, sp, #200	@ 0xc8
10013dc4:	f000 fffc 	bl	10014dc0 <__sprint_r>
10013dc8:	2800      	cmp	r0, #0
10013dca:	f47f ae59 	bne.w	10013a80 <_vfprintf_r+0xa08>
10013dce:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10013dd0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10013dd4:	f7ff bb15 	b.w	10013402 <_vfprintf_r+0x38a>
10013dd8:	990d      	ldr	r1, [sp, #52]	@ 0x34
10013dda:	f851 3b04 	ldr.w	r3, [r1], #4
10013dde:	910d      	str	r1, [sp, #52]	@ 0x34
10013de0:	f014 0110 	ands.w	r1, r4, #16
10013de4:	d155      	bne.n	10013e92 <_vfprintf_r+0xe1a>
10013de6:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
10013dea:	d04d      	beq.n	10013e88 <_vfprintf_r+0xe10>
10013dec:	460a      	mov	r2, r1
10013dee:	b29b      	uxth	r3, r3
10013df0:	2101      	movs	r1, #1
10013df2:	e4b7      	b.n	10013764 <_vfprintf_r+0x6ec>
10013df4:	990d      	ldr	r1, [sp, #52]	@ 0x34
10013df6:	f851 3b04 	ldr.w	r3, [r1], #4
10013dfa:	910d      	str	r1, [sp, #52]	@ 0x34
10013dfc:	f019 0110 	ands.w	r1, r9, #16
10013e00:	f47f acad 	bne.w	1001375e <_vfprintf_r+0x6e6>
10013e04:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
10013e08:	f000 82a7 	beq.w	1001435a <_vfprintf_r+0x12e2>
10013e0c:	b29b      	uxth	r3, r3
10013e0e:	460a      	mov	r2, r1
10013e10:	e4a5      	b.n	1001375e <_vfprintf_r+0x6e6>
10013e12:	9d07      	ldr	r5, [sp, #28]
10013e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10013e16:	f002 ffc3 	bl	10016da0 <__retarget_lock_acquire_recursive>
10013e1a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
10013e1e:	f7ff b951 	b.w	100130c4 <_vfprintf_r+0x4c>
10013e22:	f019 0f01 	tst.w	r9, #1
10013e26:	f43f aafe 	beq.w	10013426 <_vfprintf_r+0x3ae>
10013e2a:	e52b      	b.n	10013884 <_vfprintf_r+0x80c>
10013e2c:	930d      	str	r3, [sp, #52]	@ 0x34
10013e2e:	7823      	ldrb	r3, [r4, #0]
10013e30:	f7ff b99a 	b.w	10013168 <_vfprintf_r+0xf0>
10013e34:	ad5e      	add	r5, sp, #376	@ 0x178
10013e36:	e575      	b.n	10013924 <_vfprintf_r+0x8ac>
10013e38:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013e3a:	4921      	ldr	r1, [pc, #132]	@ (10013ec0 <_vfprintf_r+0xe48>)
10013e3c:	f8c8 1000 	str.w	r1, [r8]
10013e40:	3301      	adds	r3, #1
10013e42:	3401      	adds	r4, #1
10013e44:	2101      	movs	r1, #1
10013e46:	2b07      	cmp	r3, #7
10013e48:	9434      	str	r4, [sp, #208]	@ 0xd0
10013e4a:	9333      	str	r3, [sp, #204]	@ 0xcc
10013e4c:	f8c8 1004 	str.w	r1, [r8, #4]
10013e50:	f300 854f 	bgt.w	100148f2 <_vfprintf_r+0x187a>
10013e54:	f108 0808 	add.w	r8, r8, #8
10013e58:	2a00      	cmp	r2, #0
10013e5a:	f47f ae14 	bne.w	10013a86 <_vfprintf_r+0xa0e>
10013e5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10013e60:	f009 0301 	and.w	r3, r9, #1
10013e64:	4313      	orrs	r3, r2
10013e66:	f43f aade 	beq.w	10013426 <_vfprintf_r+0x3ae>
10013e6a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10013e6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10013e6e:	441c      	add	r4, r3
10013e70:	e9c8 2300 	strd	r2, r3, [r8]
10013e74:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10013e76:	9434      	str	r4, [sp, #208]	@ 0xd0
10013e78:	3301      	adds	r3, #1
10013e7a:	2b07      	cmp	r3, #7
10013e7c:	9333      	str	r3, [sp, #204]	@ 0xcc
10013e7e:	f300 83cb 	bgt.w	10014618 <_vfprintf_r+0x15a0>
10013e82:	f108 0808 	add.w	r8, r8, #8
10013e86:	e60f      	b.n	10013aa8 <_vfprintf_r+0xa30>
10013e88:	f414 7200 	ands.w	r2, r4, #512	@ 0x200
10013e8c:	bf1c      	itt	ne
10013e8e:	b2db      	uxtbne	r3, r3
10013e90:	4602      	movne	r2, r0
10013e92:	2101      	movs	r1, #1
10013e94:	e466      	b.n	10013764 <_vfprintf_r+0x6ec>
10013e96:	f419 7f00 	tst.w	r9, #512	@ 0x200
10013e9a:	f040 8305 	bne.w	100144a8 <_vfprintf_r+0x1430>
10013e9e:	17da      	asrs	r2, r3, #31
10013ea0:	4611      	mov	r1, r2
10013ea2:	2900      	cmp	r1, #0
10013ea4:	f6bf abdc 	bge.w	10013660 <_vfprintf_r+0x5e8>
10013ea8:	425b      	negs	r3, r3
10013eaa:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
10013eae:	464c      	mov	r4, r9
10013eb0:	202d      	movs	r0, #45	@ 0x2d
10013eb2:	2101      	movs	r1, #1
10013eb4:	e457      	b.n	10013766 <_vfprintf_r+0x6ee>
10013eb6:	bf00      	nop
10013eb8:	10023a88 	.word	0x10023a88
10013ebc:	10023a78 	.word	0x10023a78
10013ec0:	1001bcbc 	.word	0x1001bcbc
10013ec4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
10013ec6:	7823      	ldrb	r3, [r4, #0]
10013ec8:	2a00      	cmp	r2, #0
10013eca:	f43f a94d 	beq.w	10013168 <_vfprintf_r+0xf0>
10013ece:	7812      	ldrb	r2, [r2, #0]
10013ed0:	2a00      	cmp	r2, #0
10013ed2:	f43f a949 	beq.w	10013168 <_vfprintf_r+0xf0>
10013ed6:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
10013eda:	f7ff b945 	b.w	10013168 <_vfprintf_r+0xf0>
10013ede:	f019 0f10 	tst.w	r9, #16
10013ee2:	f040 81f9 	bne.w	100142d8 <_vfprintf_r+0x1260>
10013ee6:	f019 0f40 	tst.w	r9, #64	@ 0x40
10013eea:	f040 82e3 	bne.w	100144b4 <_vfprintf_r+0x143c>
10013eee:	f419 7f00 	tst.w	r9, #512	@ 0x200
10013ef2:	f000 81f1 	beq.w	100142d8 <_vfprintf_r+0x1260>
10013ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10013ef8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10013efa:	681b      	ldr	r3, [r3, #0]
10013efc:	701a      	strb	r2, [r3, #0]
10013efe:	e49b      	b.n	10013838 <_vfprintf_r+0x7c0>
10013f00:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10013f04:	4602      	mov	r2, r0
10013f06:	460b      	mov	r3, r1
10013f08:	f007 fc3a 	bl	1001b780 <__aeabi_dcmpun>
10013f0c:	2800      	cmp	r0, #0
10013f0e:	f040 8636 	bne.w	10014b7e <_vfprintf_r+0x1b06>
10013f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10013f14:	2b61      	cmp	r3, #97	@ 0x61
10013f16:	f000 851f 	beq.w	10014958 <_vfprintf_r+0x18e0>
10013f1a:	2b41      	cmp	r3, #65	@ 0x41
10013f1c:	f000 82e1 	beq.w	100144e2 <_vfprintf_r+0x146a>
10013f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10013f22:	3301      	adds	r3, #1
10013f24:	f000 8615 	beq.w	10014b52 <_vfprintf_r+0x1ada>
10013f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10013f2a:	f023 0320 	bic.w	r3, r3, #32
10013f2e:	2b47      	cmp	r3, #71	@ 0x47
10013f30:	d104      	bne.n	10013f3c <_vfprintf_r+0xec4>
10013f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10013f34:	2b00      	cmp	r3, #0
10013f36:	bf08      	it	eq
10013f38:	2301      	moveq	r3, #1
10013f3a:	9309      	str	r3, [sp, #36]	@ 0x24
10013f3c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10013f40:	f449 7280 	orr.w	r2, r9, #256	@ 0x100
10013f44:	2900      	cmp	r1, #0
10013f46:	9215      	str	r2, [sp, #84]	@ 0x54
10013f48:	f8cd 9018 	str.w	r9, [sp, #24]
10013f4c:	f04f 0300 	mov.w	r3, #0
10013f50:	f2c0 84dd 	blt.w	1001490e <_vfprintf_r+0x1896>
10013f54:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
10013f58:	931f      	str	r3, [sp, #124]	@ 0x7c
10013f5a:	930c      	str	r3, [sp, #48]	@ 0x30
10013f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10013f5e:	3b41      	subs	r3, #65	@ 0x41
10013f60:	2b25      	cmp	r3, #37	@ 0x25
10013f62:	f200 8201 	bhi.w	10014368 <_vfprintf_r+0x12f0>
10013f66:	e8df f013 	tbh	[pc, r3, lsl #1]
10013f6a:	0372      	.short	0x0372
10013f6c:	01ff01ff 	.word	0x01ff01ff
10013f70:	036b01ff 	.word	0x036b01ff
10013f74:	01ff036f 	.word	0x01ff036f
10013f78:	01ff01ff 	.word	0x01ff01ff
10013f7c:	01ff01ff 	.word	0x01ff01ff
10013f80:	01ff01ff 	.word	0x01ff01ff
10013f84:	01ff01ff 	.word	0x01ff01ff
10013f88:	01ff01ff 	.word	0x01ff01ff
10013f8c:	01ff01ff 	.word	0x01ff01ff
10013f90:	01ff01ff 	.word	0x01ff01ff
10013f94:	01ff01ff 	.word	0x01ff01ff
10013f98:	01ff01ff 	.word	0x01ff01ff
10013f9c:	01ff01ff 	.word	0x01ff01ff
10013fa0:	01ff01ff 	.word	0x01ff01ff
10013fa4:	01ff01ff 	.word	0x01ff01ff
10013fa8:	01ff01ff 	.word	0x01ff01ff
10013fac:	01ff01ff 	.word	0x01ff01ff
10013fb0:	036b01ff 	.word	0x036b01ff
10013fb4:	036f      	.short	0x036f
10013fb6:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10013fba:	4bc2      	ldr	r3, [pc, #776]	@ (100142c4 <_vfprintf_r+0x124c>)
10013fbc:	931a      	str	r3, [sp, #104]	@ 0x68
10013fbe:	f019 0220 	ands.w	r2, r9, #32
10013fc2:	d06a      	beq.n	1001409a <_vfprintf_r+0x1022>
10013fc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10013fc6:	3307      	adds	r3, #7
10013fc8:	f023 0307 	bic.w	r3, r3, #7
10013fcc:	4619      	mov	r1, r3
10013fce:	685a      	ldr	r2, [r3, #4]
10013fd0:	f851 3b08 	ldr.w	r3, [r1], #8
10013fd4:	910d      	str	r1, [sp, #52]	@ 0x34
10013fd6:	f019 0f01 	tst.w	r9, #1
10013fda:	d00a      	beq.n	10013ff2 <_vfprintf_r+0xf7a>
10013fdc:	ea53 0102 	orrs.w	r1, r3, r2
10013fe0:	d007      	beq.n	10013ff2 <_vfprintf_r+0xf7a>
10013fe2:	990e      	ldr	r1, [sp, #56]	@ 0x38
10013fe4:	f88d 10a1 	strb.w	r1, [sp, #161]	@ 0xa1
10013fe8:	2130      	movs	r1, #48	@ 0x30
10013fea:	f049 0902 	orr.w	r9, r9, #2
10013fee:	f88d 10a0 	strb.w	r1, [sp, #160]	@ 0xa0
10013ff2:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
10013ff6:	2102      	movs	r1, #2
10013ff8:	f7ff bbb4 	b.w	10013764 <_vfprintf_r+0x6ec>
10013ffc:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10014000:	464c      	mov	r4, r9
10014002:	f7ff bbd0 	b.w	100137a6 <_vfprintf_r+0x72e>
10014006:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001400a:	f7ff bb9b 	b.w	10013744 <_vfprintf_r+0x6cc>
1001400e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10014012:	4bad      	ldr	r3, [pc, #692]	@ (100142c8 <_vfprintf_r+0x1250>)
10014014:	931a      	str	r3, [sp, #104]	@ 0x68
10014016:	e7d2      	b.n	10013fbe <_vfprintf_r+0xf46>
10014018:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
1001401c:	aa32      	add	r2, sp, #200	@ 0xc8
1001401e:	f000 fecf 	bl	10014dc0 <__sprint_r>
10014022:	2800      	cmp	r0, #0
10014024:	f47f ad2c 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014028:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001402a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001402e:	f7ff b9e2 	b.w	100133f6 <_vfprintf_r+0x37e>
10014032:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014036:	aa32      	add	r2, sp, #200	@ 0xc8
10014038:	f000 fec2 	bl	10014dc0 <__sprint_r>
1001403c:	2800      	cmp	r0, #0
1001403e:	f47f ad1f 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014042:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10014044:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10014048:	e42a      	b.n	100138a0 <_vfprintf_r+0x828>
1001404a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001404c:	950c      	str	r5, [sp, #48]	@ 0x30
1001404e:	2b06      	cmp	r3, #6
10014050:	4629      	mov	r1, r5
10014052:	bf28      	it	cs
10014054:	2306      	movcs	r3, #6
10014056:	9509      	str	r5, [sp, #36]	@ 0x24
10014058:	462a      	mov	r2, r5
1001405a:	9306      	str	r3, [sp, #24]
1001405c:	4d9b      	ldr	r5, [pc, #620]	@ (100142cc <_vfprintf_r+0x1254>)
1001405e:	960d      	str	r6, [sp, #52]	@ 0x34
10014060:	469b      	mov	fp, r3
10014062:	9114      	str	r1, [sp, #80]	@ 0x50
10014064:	9110      	str	r1, [sp, #64]	@ 0x40
10014066:	9112      	str	r1, [sp, #72]	@ 0x48
10014068:	f7ff ba41 	b.w	100134ee <_vfprintf_r+0x476>
1001406c:	2208      	movs	r2, #8
1001406e:	2100      	movs	r1, #0
10014070:	a830      	add	r0, sp, #192	@ 0xc0
10014072:	f002 fdb3 	bl	10016bdc <memset>
10014076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10014078:	9808      	ldr	r0, [sp, #32]
1001407a:	681a      	ldr	r2, [r3, #0]
1001407c:	ad45      	add	r5, sp, #276	@ 0x114
1001407e:	ab30      	add	r3, sp, #192	@ 0xc0
10014080:	4629      	mov	r1, r5
10014082:	f003 f809 	bl	10017098 <_wcrtomb_r>
10014086:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
1001408a:	4683      	mov	fp, r0
1001408c:	f000 8542 	beq.w	10014b14 <_vfprintf_r+0x1a9c>
10014090:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
10014094:	9306      	str	r3, [sp, #24]
10014096:	f7ff ba94 	b.w	100135c2 <_vfprintf_r+0x54a>
1001409a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1001409c:	f851 3b04 	ldr.w	r3, [r1], #4
100140a0:	910d      	str	r1, [sp, #52]	@ 0x34
100140a2:	f019 0110 	ands.w	r1, r9, #16
100140a6:	d196      	bne.n	10013fd6 <_vfprintf_r+0xf5e>
100140a8:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
100140ac:	f000 814f 	beq.w	1001434e <_vfprintf_r+0x12d6>
100140b0:	b29b      	uxth	r3, r3
100140b2:	460a      	mov	r2, r1
100140b4:	e78f      	b.n	10013fd6 <_vfprintf_r+0xf5e>
100140b6:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
100140ba:	ad5e      	add	r5, sp, #376	@ 0x178
100140bc:	e432      	b.n	10013924 <_vfprintf_r+0x8ac>
100140be:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100140c2:	aa32      	add	r2, sp, #200	@ 0xc8
100140c4:	f000 fe7c 	bl	10014dc0 <__sprint_r>
100140c8:	2800      	cmp	r0, #0
100140ca:	f47f acd9 	bne.w	10013a80 <_vfprintf_r+0xa08>
100140ce:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
100140d2:	af35      	add	r7, sp, #212	@ 0xd4
100140d4:	e527      	b.n	10013b26 <_vfprintf_r+0xaae>
100140d6:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100140da:	aa32      	add	r2, sp, #200	@ 0xc8
100140dc:	f000 fe70 	bl	10014dc0 <__sprint_r>
100140e0:	2800      	cmp	r0, #0
100140e2:	f47f accd 	bne.w	10013a80 <_vfprintf_r+0xa08>
100140e6:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
100140ea:	af35      	add	r7, sp, #212	@ 0xd4
100140ec:	e50f      	b.n	10013b0e <_vfprintf_r+0xa96>
100140ee:	f404 6b80 	and.w	fp, r4, #1024	@ 0x400
100140f2:	2100      	movs	r1, #0
100140f4:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
100140f8:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 100142d4 <_vfprintf_r+0x125c>
100140fc:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
10014100:	9406      	str	r4, [sp, #24]
10014102:	ad5e      	add	r5, sp, #376	@ 0x178
10014104:	f04f 3acc 	mov.w	sl, #3435973836	@ 0xcccccccc
10014108:	2705      	movs	r7, #5
1001410a:	468c      	mov	ip, r1
1001410c:	465e      	mov	r6, fp
1001410e:	e005      	b.n	1001411c <_vfprintf_r+0x10a4>
10014110:	2b0a      	cmp	r3, #10
10014112:	f172 0200 	sbcs.w	r2, r2, #0
10014116:	d333      	bcc.n	10014180 <_vfprintf_r+0x1108>
10014118:	465b      	mov	r3, fp
1001411a:	4622      	mov	r2, r4
1001411c:	1899      	adds	r1, r3, r2
1001411e:	f141 0100 	adc.w	r1, r1, #0
10014122:	fba9 0401 	umull	r0, r4, r9, r1
10014126:	f024 0003 	bic.w	r0, r4, #3
1001412a:	eb00 0094 	add.w	r0, r0, r4, lsr #2
1001412e:	1a09      	subs	r1, r1, r0
10014130:	1a58      	subs	r0, r3, r1
10014132:	f162 0e00 	sbc.w	lr, r2, #0
10014136:	fb0a f400 	mul.w	r4, sl, r0
1001413a:	fba0 b009 	umull	fp, r0, r0, r9
1001413e:	fb09 440e 	mla	r4, r9, lr, r4
10014142:	f00b 0e01 	and.w	lr, fp, #1
10014146:	4404      	add	r4, r0
10014148:	fbae 0e07 	umull	r0, lr, lr, r7
1001414c:	1840      	adds	r0, r0, r1
1001414e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
10014152:	3030      	adds	r0, #48	@ 0x30
10014154:	f805 0c01 	strb.w	r0, [r5, #-1]
10014158:	ea4b 7bc4 	orr.w	fp, fp, r4, lsl #31
1001415c:	f10c 0c01 	add.w	ip, ip, #1
10014160:	3d01      	subs	r5, #1
10014162:	0864      	lsrs	r4, r4, #1
10014164:	2e00      	cmp	r6, #0
10014166:	d0d3      	beq.n	10014110 <_vfprintf_r+0x1098>
10014168:	f898 1000 	ldrb.w	r1, [r8]
1001416c:	458c      	cmp	ip, r1
1001416e:	d1cf      	bne.n	10014110 <_vfprintf_r+0x1098>
10014170:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
10014174:	d0cc      	beq.n	10014110 <_vfprintf_r+0x1098>
10014176:	2b0a      	cmp	r3, #10
10014178:	f172 0200 	sbcs.w	r2, r2, #0
1001417c:	f080 82c3 	bcs.w	10014706 <_vfprintf_r+0x168e>
10014180:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
10014184:	9c06      	ldr	r4, [sp, #24]
10014186:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
1001418a:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
1001418e:	f7ff bbc5 	b.w	1001391c <_vfprintf_r+0x8a4>
10014192:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014196:	aa32      	add	r2, sp, #200	@ 0xc8
10014198:	9315      	str	r3, [sp, #84]	@ 0x54
1001419a:	f000 fe11 	bl	10014dc0 <__sprint_r>
1001419e:	2800      	cmp	r0, #0
100141a0:	f47f ac6e 	bne.w	10013a80 <_vfprintf_r+0xa08>
100141a4:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100141a8:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100141aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
100141ac:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100141b0:	f7ff b8fa 	b.w	100133a8 <_vfprintf_r+0x330>
100141b4:	46a3      	mov	fp, r4
100141b6:	f7ff b8b7 	b.w	10013328 <_vfprintf_r+0x2b0>
100141ba:	46d3      	mov	fp, sl
100141bc:	f7ff b8b4 	b.w	10013328 <_vfprintf_r+0x2b0>
100141c0:	4658      	mov	r0, fp
100141c2:	f002 f9ef 	bl	100165a4 <__sinit>
100141c6:	f7fe bf74 	b.w	100130b2 <_vfprintf_r+0x3a>
100141ca:	2901      	cmp	r1, #1
100141cc:	464c      	mov	r4, r9
100141ce:	f47f ab95 	bne.w	100138fc <_vfprintf_r+0x884>
100141d2:	e4d3      	b.n	10013b7c <_vfprintf_r+0xb04>
100141d4:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100141d8:	aa32      	add	r2, sp, #200	@ 0xc8
100141da:	f000 fdf1 	bl	10014dc0 <__sprint_r>
100141de:	2800      	cmp	r0, #0
100141e0:	f47f ac4e 	bne.w	10013a80 <_vfprintf_r+0xa08>
100141e4:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100141e6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100141ea:	f7ff bb46 	b.w	1001387a <_vfprintf_r+0x802>
100141ee:	46cb      	mov	fp, r9
100141f0:	f7ff b89a 	b.w	10013328 <_vfprintf_r+0x2b0>
100141f4:	af30      	add	r7, sp, #192	@ 0xc0
100141f6:	2208      	movs	r2, #8
100141f8:	2100      	movs	r1, #0
100141fa:	4638      	mov	r0, r7
100141fc:	952b      	str	r5, [sp, #172]	@ 0xac
100141fe:	f002 fced 	bl	10016bdc <memset>
10014202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10014204:	1c58      	adds	r0, r3, #1
10014206:	f000 8270 	beq.w	100146ea <_vfprintf_r+0x1672>
1001420a:	2400      	movs	r4, #0
1001420c:	f8cd 9018 	str.w	r9, [sp, #24]
10014210:	46a3      	mov	fp, r4
10014212:	f8dd 9020 	ldr.w	r9, [sp, #32]
10014216:	469a      	mov	sl, r3
10014218:	e00c      	b.n	10014234 <_vfprintf_r+0x11bc>
1001421a:	a945      	add	r1, sp, #276	@ 0x114
1001421c:	4648      	mov	r0, r9
1001421e:	f002 ff3b 	bl	10017098 <_wcrtomb_r>
10014222:	1c41      	adds	r1, r0, #1
10014224:	4458      	add	r0, fp
10014226:	f000 8475 	beq.w	10014b14 <_vfprintf_r+0x1a9c>
1001422a:	4550      	cmp	r0, sl
1001422c:	dc08      	bgt.n	10014240 <_vfprintf_r+0x11c8>
1001422e:	f000 84c2 	beq.w	10014bb6 <_vfprintf_r+0x1b3e>
10014232:	4683      	mov	fp, r0
10014234:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
10014236:	5912      	ldr	r2, [r2, r4]
10014238:	463b      	mov	r3, r7
1001423a:	3404      	adds	r4, #4
1001423c:	2a00      	cmp	r2, #0
1001423e:	d1ec      	bne.n	1001421a <_vfprintf_r+0x11a2>
10014240:	f8dd 9018 	ldr.w	r9, [sp, #24]
10014244:	f1bb 0f00 	cmp.w	fp, #0
10014248:	f000 8342 	beq.w	100148d0 <_vfprintf_r+0x1858>
1001424c:	f1bb 0f63 	cmp.w	fp, #99	@ 0x63
10014250:	f340 83f9 	ble.w	10014a46 <_vfprintf_r+0x19ce>
10014254:	9808      	ldr	r0, [sp, #32]
10014256:	f10b 0101 	add.w	r1, fp, #1
1001425a:	f7fe fc3f 	bl	10012adc <_malloc_r>
1001425e:	4605      	mov	r5, r0
10014260:	2800      	cmp	r0, #0
10014262:	f000 8457 	beq.w	10014b14 <_vfprintf_r+0x1a9c>
10014266:	900c      	str	r0, [sp, #48]	@ 0x30
10014268:	2208      	movs	r2, #8
1001426a:	2100      	movs	r1, #0
1001426c:	4638      	mov	r0, r7
1001426e:	f002 fcb5 	bl	10016bdc <memset>
10014272:	9808      	ldr	r0, [sp, #32]
10014274:	9700      	str	r7, [sp, #0]
10014276:	465b      	mov	r3, fp
10014278:	aa2b      	add	r2, sp, #172	@ 0xac
1001427a:	4629      	mov	r1, r5
1001427c:	f002 ff32 	bl	100170e4 <_wcsrtombs_r>
10014280:	4583      	cmp	fp, r0
10014282:	f040 8517 	bne.w	10014cb4 <_vfprintf_r+0x1c3c>
10014286:	2300      	movs	r3, #0
10014288:	f805 300b 	strb.w	r3, [r5, fp]
1001428c:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
10014290:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10014294:	960d      	str	r6, [sp, #52]	@ 0x34
10014296:	9309      	str	r3, [sp, #36]	@ 0x24
10014298:	9106      	str	r1, [sp, #24]
1001429a:	9314      	str	r3, [sp, #80]	@ 0x50
1001429c:	9310      	str	r3, [sp, #64]	@ 0x40
1001429e:	9312      	str	r3, [sp, #72]	@ 0x48
100142a0:	f7ff b925 	b.w	100134ee <_vfprintf_r+0x476>
100142a4:	4a0a      	ldr	r2, [pc, #40]	@ (100142d0 <_vfprintf_r+0x1258>)
100142a6:	9215      	str	r2, [sp, #84]	@ 0x54
100142a8:	3301      	adds	r3, #1
100142aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100142ac:	f8c8 2000 	str.w	r2, [r8]
100142b0:	442c      	add	r4, r5
100142b2:	2b07      	cmp	r3, #7
100142b4:	f8c8 5004 	str.w	r5, [r8, #4]
100142b8:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100142bc:	f77f a8b1 	ble.w	10013422 <_vfprintf_r+0x3aa>
100142c0:	f7ff bbfe 	b.w	10013ac0 <_vfprintf_r+0xa48>
100142c4:	10023a5c 	.word	0x10023a5c
100142c8:	10023a48 	.word	0x10023a48
100142cc:	10023a70 	.word	0x10023a70
100142d0:	10023a78 	.word	0x10023a78
100142d4:	cccccccd 	.word	0xcccccccd
100142d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100142da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100142dc:	681b      	ldr	r3, [r3, #0]
100142de:	601a      	str	r2, [r3, #0]
100142e0:	f7ff baaa 	b.w	10013838 <_vfprintf_r+0x7c0>
100142e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
100142e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
100142ea:	603b      	str	r3, [r7, #0]
100142ec:	3601      	adds	r6, #1
100142ee:	4444      	add	r4, r8
100142f0:	2e07      	cmp	r6, #7
100142f2:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
100142f6:	f8c7 8004 	str.w	r8, [r7, #4]
100142fa:	f77f ac2b 	ble.w	10013b54 <_vfprintf_r+0xadc>
100142fe:	e527      	b.n	10013d50 <_vfprintf_r+0xcd8>
10014300:	2e10      	cmp	r6, #16
10014302:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10014304:	f340 84ad 	ble.w	10014c62 <_vfprintf_r+0x1bea>
10014308:	4898      	ldr	r0, [pc, #608]	@ (1001456c <_vfprintf_r+0x14f4>)
1001430a:	9015      	str	r0, [sp, #84]	@ 0x54
1001430c:	4642      	mov	r2, r8
1001430e:	4621      	mov	r1, r4
10014310:	46a8      	mov	r8, r5
10014312:	e9dd 4a07 	ldrd	r4, sl, [sp, #28]
10014316:	2710      	movs	r7, #16
10014318:	4605      	mov	r5, r0
1001431a:	e004      	b.n	10014326 <_vfprintf_r+0x12ae>
1001431c:	3208      	adds	r2, #8
1001431e:	3e10      	subs	r6, #16
10014320:	2e10      	cmp	r6, #16
10014322:	f340 81ca 	ble.w	100146ba <_vfprintf_r+0x1642>
10014326:	3301      	adds	r3, #1
10014328:	3110      	adds	r1, #16
1001432a:	2b07      	cmp	r3, #7
1001432c:	e9c2 5700 	strd	r5, r7, [r2]
10014330:	e9cd 3133 	strd	r3, r1, [sp, #204]	@ 0xcc
10014334:	ddf2      	ble.n	1001431c <_vfprintf_r+0x12a4>
10014336:	aa32      	add	r2, sp, #200	@ 0xc8
10014338:	4621      	mov	r1, r4
1001433a:	4650      	mov	r0, sl
1001433c:	f000 fd40 	bl	10014dc0 <__sprint_r>
10014340:	2800      	cmp	r0, #0
10014342:	f47f af3a 	bne.w	100141ba <_vfprintf_r+0x1142>
10014346:	e9dd 3133 	ldrd	r3, r1, [sp, #204]	@ 0xcc
1001434a:	aa35      	add	r2, sp, #212	@ 0xd4
1001434c:	e7e7      	b.n	1001431e <_vfprintf_r+0x12a6>
1001434e:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
10014352:	bf1c      	itt	ne
10014354:	b2db      	uxtbne	r3, r3
10014356:	4602      	movne	r2, r0
10014358:	e63d      	b.n	10013fd6 <_vfprintf_r+0xf5e>
1001435a:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
1001435e:	bf1c      	itt	ne
10014360:	b2db      	uxtbne	r3, r3
10014362:	4602      	movne	r2, r0
10014364:	f7ff b9fb 	b.w	1001375e <_vfprintf_r+0x6e6>
10014368:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1001436a:	2302      	movs	r3, #2
1001436c:	e9cd 3600 	strd	r3, r6, [sp]
10014370:	ab30      	add	r3, sp, #192	@ 0xc0
10014372:	9304      	str	r3, [sp, #16]
10014374:	ab2b      	add	r3, sp, #172	@ 0xac
10014376:	9303      	str	r3, [sp, #12]
10014378:	ab29      	add	r3, sp, #164	@ 0xa4
1001437a:	9302      	str	r3, [sp, #8]
1001437c:	9808      	ldr	r0, [sp, #32]
1001437e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
10014382:	f002 ff99 	bl	100172b8 <_dtoa_r>
10014386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10014388:	2b67      	cmp	r3, #103	@ 0x67
1001438a:	4605      	mov	r5, r0
1001438c:	f000 8177 	beq.w	1001467e <_vfprintf_r+0x1606>
10014390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10014392:	2b47      	cmp	r3, #71	@ 0x47
10014394:	f000 8173 	beq.w	1001467e <_vfprintf_r+0x1606>
10014398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001439a:	f023 0720 	bic.w	r7, r3, #32
1001439e:	2f46      	cmp	r7, #70	@ 0x46
100143a0:	eb00 0406 	add.w	r4, r0, r6
100143a4:	d105      	bne.n	100143b2 <_vfprintf_r+0x133a>
100143a6:	7803      	ldrb	r3, [r0, #0]
100143a8:	2b30      	cmp	r3, #48	@ 0x30
100143aa:	f000 83db 	beq.w	10014b64 <_vfprintf_r+0x1aec>
100143ae:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
100143b0:	4434      	add	r4, r6
100143b2:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
100143b6:	2200      	movs	r2, #0
100143b8:	2300      	movs	r3, #0
100143ba:	f007 f9af 	bl	1001b71c <__aeabi_dcmpeq>
100143be:	2800      	cmp	r0, #0
100143c0:	f000 81cc 	beq.w	1001475c <_vfprintf_r+0x16e4>
100143c4:	4623      	mov	r3, r4
100143c6:	1b5b      	subs	r3, r3, r5
100143c8:	9313      	str	r3, [sp, #76]	@ 0x4c
100143ca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
100143cc:	9212      	str	r2, [sp, #72]	@ 0x48
100143ce:	2f47      	cmp	r7, #71	@ 0x47
100143d0:	f000 815d 	beq.w	1001468e <_vfprintf_r+0x1616>
100143d4:	2f46      	cmp	r7, #70	@ 0x46
100143d6:	f000 82e3 	beq.w	100149a0 <_vfprintf_r+0x1928>
100143da:	990e      	ldr	r1, [sp, #56]	@ 0x38
100143dc:	1e53      	subs	r3, r2, #1
100143de:	2961      	cmp	r1, #97	@ 0x61
100143e0:	9329      	str	r3, [sp, #164]	@ 0xa4
100143e2:	f000 8441 	beq.w	10014c68 <_vfprintf_r+0x1bf0>
100143e6:	2941      	cmp	r1, #65	@ 0x41
100143e8:	f040 815c 	bne.w	100146a4 <_vfprintf_r+0x162c>
100143ec:	2150      	movs	r1, #80	@ 0x50
100143ee:	2001      	movs	r0, #1
100143f0:	2b00      	cmp	r3, #0
100143f2:	bfb6      	itet	lt
100143f4:	f1c2 0301 	rsblt	r3, r2, #1
100143f8:	222b      	movge	r2, #43	@ 0x2b
100143fa:	222d      	movlt	r2, #45	@ 0x2d
100143fc:	2b09      	cmp	r3, #9
100143fe:	f88d 10b0 	strb.w	r1, [sp, #176]	@ 0xb0
10014402:	f88d 20b1 	strb.w	r2, [sp, #177]	@ 0xb1
10014406:	f340 8377 	ble.w	10014af8 <_vfprintf_r+0x1a80>
1001440a:	f10d 04c7 	add.w	r4, sp, #199	@ 0xc7
1001440e:	4e58      	ldr	r6, [pc, #352]	@ (10014570 <_vfprintf_r+0x14f8>)
10014410:	4622      	mov	r2, r4
10014412:	4610      	mov	r0, r2
10014414:	fba6 1203 	umull	r1, r2, r6, r3
10014418:	08d2      	lsrs	r2, r2, #3
1001441a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1001441e:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
10014422:	3130      	adds	r1, #48	@ 0x30
10014424:	f800 1c01 	strb.w	r1, [r0, #-1]
10014428:	4619      	mov	r1, r3
1001442a:	2963      	cmp	r1, #99	@ 0x63
1001442c:	4613      	mov	r3, r2
1001442e:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
10014432:	dcee      	bgt.n	10014412 <_vfprintf_r+0x139a>
10014434:	3330      	adds	r3, #48	@ 0x30
10014436:	f802 3c01 	strb.w	r3, [r2, #-1]
1001443a:	1e83      	subs	r3, r0, #2
1001443c:	42a3      	cmp	r3, r4
1001443e:	f080 840c 	bcs.w	10014c5a <_vfprintf_r+0x1be2>
10014442:	f10d 02b1 	add.w	r2, sp, #177	@ 0xb1
10014446:	f813 1b01 	ldrb.w	r1, [r3], #1
1001444a:	f802 1f01 	strb.w	r1, [r2, #1]!
1001444e:	42a3      	cmp	r3, r4
10014450:	d1f9      	bne.n	10014446 <_vfprintf_r+0x13ce>
10014452:	ab5e      	add	r3, sp, #376	@ 0x178
10014454:	1a18      	subs	r0, r3, r0
10014456:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
1001445a:	931c      	str	r3, [sp, #112]	@ 0x70
1001445c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001445e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
10014460:	2b01      	cmp	r3, #1
10014462:	eb03 0b02 	add.w	fp, r3, r2
10014466:	f340 8378 	ble.w	10014b5a <_vfprintf_r+0x1ae2>
1001446a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001446c:	449b      	add	fp, r3
1001446e:	9b06      	ldr	r3, [sp, #24]
10014470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
10014474:	f443 7980 	orr.w	r9, r3, #256	@ 0x100
10014478:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
1001447c:	2300      	movs	r3, #0
1001447e:	9314      	str	r3, [sp, #80]	@ 0x50
10014480:	9206      	str	r2, [sp, #24]
10014482:	9310      	str	r3, [sp, #64]	@ 0x40
10014484:	9312      	str	r3, [sp, #72]	@ 0x48
10014486:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
10014488:	2b00      	cmp	r3, #0
1001448a:	f040 810f 	bne.w	100146ac <_vfprintf_r+0x1634>
1001448e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10014492:	9309      	str	r3, [sp, #36]	@ 0x24
10014494:	f7ff b82b 	b.w	100134ee <_vfprintf_r+0x476>
10014498:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001449a:	ebab 060a 	sub.w	r6, fp, sl
1001449e:	1b5d      	subs	r5, r3, r5
100144a0:	42ae      	cmp	r6, r5
100144a2:	bfa8      	it	ge
100144a4:	462e      	movge	r6, r5
100144a6:	e41a      	b.n	10013cde <_vfprintf_r+0xc66>
100144a8:	f343 12c0 	sbfx	r2, r3, #7, #1
100144ac:	4611      	mov	r1, r2
100144ae:	b25b      	sxtb	r3, r3
100144b0:	f7ff b8d3 	b.w	1001365a <_vfprintf_r+0x5e2>
100144b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100144b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100144b8:	681b      	ldr	r3, [r3, #0]
100144ba:	801a      	strh	r2, [r3, #0]
100144bc:	f7ff b9bc 	b.w	10013838 <_vfprintf_r+0x7c0>
100144c0:	9907      	ldr	r1, [sp, #28]
100144c2:	aa32      	add	r2, sp, #200	@ 0xc8
100144c4:	4658      	mov	r0, fp
100144c6:	f000 fc7b 	bl	10014dc0 <__sprint_r>
100144ca:	2800      	cmp	r0, #0
100144cc:	f43e af1c 	beq.w	10013308 <_vfprintf_r+0x290>
100144d0:	f7fe bf30 	b.w	10013334 <_vfprintf_r+0x2bc>
100144d4:	4628      	mov	r0, r5
100144d6:	960d      	str	r6, [sp, #52]	@ 0x34
100144d8:	f002 fd72 	bl	10016fc0 <strlen>
100144dc:	4683      	mov	fp, r0
100144de:	f7ff b89f 	b.w	10013620 <_vfprintf_r+0x5a8>
100144e2:	2358      	movs	r3, #88	@ 0x58
100144e4:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
100144e8:	2330      	movs	r3, #48	@ 0x30
100144ea:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
100144ee:	f049 0302 	orr.w	r3, r9, #2
100144f2:	9306      	str	r3, [sp, #24]
100144f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100144f6:	2b63      	cmp	r3, #99	@ 0x63
100144f8:	f300 82f6 	bgt.w	10014ae8 <_vfprintf_r+0x1a70>
100144fc:	2300      	movs	r3, #0
100144fe:	930c      	str	r3, [sp, #48]	@ 0x30
10014500:	ad45      	add	r5, sp, #276	@ 0x114
10014502:	f449 7381 	orr.w	r3, r9, #258	@ 0x102
10014506:	9315      	str	r3, [sp, #84]	@ 0x54
10014508:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1001450a:	2b00      	cmp	r3, #0
1001450c:	f2c0 8200 	blt.w	10014910 <_vfprintf_r+0x1898>
10014510:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
10014514:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
10014518:	2300      	movs	r3, #0
1001451a:	931f      	str	r3, [sp, #124]	@ 0x7c
1001451c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001451e:	2b61      	cmp	r3, #97	@ 0x61
10014520:	f47f ad1c 	bne.w	10013f5c <_vfprintf_r+0xee4>
10014524:	aa29      	add	r2, sp, #164	@ 0xa4
10014526:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001452a:	f002 fde7 	bl	100170fc <frexp>
1001452e:	2200      	movs	r2, #0
10014530:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
10014534:	f006 fe8a 	bl	1001b24c <__aeabi_dmul>
10014538:	4602      	mov	r2, r0
1001453a:	460b      	mov	r3, r1
1001453c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
10014540:	2200      	movs	r2, #0
10014542:	2300      	movs	r3, #0
10014544:	f007 f8ea 	bl	1001b71c <__aeabi_dcmpeq>
10014548:	2800      	cmp	r0, #0
1001454a:	f040 82f8 	bne.w	10014b3e <_vfprintf_r+0x1ac6>
1001454e:	4b09      	ldr	r3, [pc, #36]	@ (10014574 <_vfprintf_r+0x14fc>)
10014550:	9312      	str	r3, [sp, #72]	@ 0x48
10014552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10014554:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
10014558:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
1001455c:	462e      	mov	r6, r5
1001455e:	9514      	str	r5, [sp, #80]	@ 0x50
10014560:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10014564:	464d      	mov	r5, r9
10014566:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
1001456a:	e00b      	b.n	10014584 <_vfprintf_r+0x150c>
1001456c:	10023a78 	.word	0x10023a78
10014570:	cccccccd 	.word	0xcccccccd
10014574:	10023a48 	.word	0x10023a48
10014578:	2200      	movs	r2, #0
1001457a:	2300      	movs	r3, #0
1001457c:	f007 f8ce 	bl	1001b71c <__aeabi_dcmpeq>
10014580:	b9f0      	cbnz	r0, 100145c0 <_vfprintf_r+0x1548>
10014582:	463d      	mov	r5, r7
10014584:	4ba9      	ldr	r3, [pc, #676]	@ (1001482c <_vfprintf_r+0x17b4>)
10014586:	2200      	movs	r2, #0
10014588:	4640      	mov	r0, r8
1001458a:	4649      	mov	r1, r9
1001458c:	f006 fe5e 	bl	1001b24c <__aeabi_dmul>
10014590:	4689      	mov	r9, r1
10014592:	4680      	mov	r8, r0
10014594:	f007 f90a 	bl	1001b7ac <__aeabi_d2iz>
10014598:	4604      	mov	r4, r0
1001459a:	f006 fded 	bl	1001b178 <__aeabi_i2d>
1001459e:	460b      	mov	r3, r1
100145a0:	4602      	mov	r2, r0
100145a2:	4649      	mov	r1, r9
100145a4:	4640      	mov	r0, r8
100145a6:	f006 fc99 	bl	1001aedc <__aeabi_dsub>
100145aa:	f81b 3004 	ldrb.w	r3, [fp, r4]
100145ae:	46b2      	mov	sl, r6
100145b0:	f806 3b01 	strb.w	r3, [r6], #1
100145b4:	1c6b      	adds	r3, r5, #1
100145b6:	f105 37ff 	add.w	r7, r5, #4294967295	@ 0xffffffff
100145ba:	4680      	mov	r8, r0
100145bc:	4689      	mov	r9, r1
100145be:	d1db      	bne.n	10014578 <_vfprintf_r+0x1500>
100145c0:	46cb      	mov	fp, r9
100145c2:	4657      	mov	r7, sl
100145c4:	46c2      	mov	sl, r8
100145c6:	4b9a      	ldr	r3, [pc, #616]	@ (10014830 <_vfprintf_r+0x17b8>)
100145c8:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
100145cc:	2200      	movs	r2, #0
100145ce:	4650      	mov	r0, sl
100145d0:	4659      	mov	r1, fp
100145d2:	46a9      	mov	r9, r5
100145d4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
100145d6:	f007 f8c9 	bl	1001b76c <__aeabi_dcmpgt>
100145da:	2800      	cmp	r0, #0
100145dc:	f040 8264 	bne.w	10014aa8 <_vfprintf_r+0x1a30>
100145e0:	4b93      	ldr	r3, [pc, #588]	@ (10014830 <_vfprintf_r+0x17b8>)
100145e2:	4650      	mov	r0, sl
100145e4:	4659      	mov	r1, fp
100145e6:	2200      	movs	r2, #0
100145e8:	f007 f898 	bl	1001b71c <__aeabi_dcmpeq>
100145ec:	b110      	cbz	r0, 100145f4 <_vfprintf_r+0x157c>
100145ee:	07e2      	lsls	r2, r4, #31
100145f0:	f100 825a 	bmi.w	10014aa8 <_vfprintf_r+0x1a30>
100145f4:	f1b9 0f00 	cmp.w	r9, #0
100145f8:	f2c0 8270 	blt.w	10014adc <_vfprintf_r+0x1a64>
100145fc:	f109 0301 	add.w	r3, r9, #1
10014600:	4433      	add	r3, r6
10014602:	2230      	movs	r2, #48	@ 0x30
10014604:	f806 2b01 	strb.w	r2, [r6], #1
10014608:	42b3      	cmp	r3, r6
1001460a:	d1fb      	bne.n	10014604 <_vfprintf_r+0x158c>
1001460c:	1b5b      	subs	r3, r3, r5
1001460e:	9313      	str	r3, [sp, #76]	@ 0x4c
10014610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10014612:	f023 0720 	bic.w	r7, r3, #32
10014616:	e6d8      	b.n	100143ca <_vfprintf_r+0x1352>
10014618:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
1001461c:	aa32      	add	r2, sp, #200	@ 0xc8
1001461e:	f000 fbcf 	bl	10014dc0 <__sprint_r>
10014622:	2800      	cmp	r0, #0
10014624:	f47f aa2c 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014628:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001462c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001462e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10014632:	f7ff ba36 	b.w	10013aa2 <_vfprintf_r+0xa2a>
10014636:	6d88      	ldr	r0, [r1, #88]	@ 0x58
10014638:	f002 fbb4 	bl	10016da4 <__retarget_lock_release_recursive>
1001463c:	f7fe be36 	b.w	100132ac <_vfprintf_r+0x234>
10014640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10014642:	1c5e      	adds	r6, r3, #1
10014644:	2302      	movs	r3, #2
10014646:	e691      	b.n	1001436c <_vfprintf_r+0x12f4>
10014648:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1001464a:	2303      	movs	r3, #3
1001464c:	e68e      	b.n	1001436c <_vfprintf_r+0x12f4>
1001464e:	aa29      	add	r2, sp, #164	@ 0xa4
10014650:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10014654:	f002 fd52 	bl	100170fc <frexp>
10014658:	2200      	movs	r2, #0
1001465a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
1001465e:	f006 fdf5 	bl	1001b24c <__aeabi_dmul>
10014662:	4602      	mov	r2, r0
10014664:	460b      	mov	r3, r1
10014666:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1001466a:	2200      	movs	r2, #0
1001466c:	2300      	movs	r3, #0
1001466e:	f007 f855 	bl	1001b71c <__aeabi_dcmpeq>
10014672:	2800      	cmp	r0, #0
10014674:	f040 8263 	bne.w	10014b3e <_vfprintf_r+0x1ac6>
10014678:	4b6e      	ldr	r3, [pc, #440]	@ (10014834 <_vfprintf_r+0x17bc>)
1001467a:	9312      	str	r3, [sp, #72]	@ 0x48
1001467c:	e769      	b.n	10014552 <_vfprintf_r+0x14da>
1001467e:	9b06      	ldr	r3, [sp, #24]
10014680:	07db      	lsls	r3, r3, #31
10014682:	f100 81e4 	bmi.w	10014a4e <_vfprintf_r+0x19d6>
10014686:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10014688:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001468a:	1b5b      	subs	r3, r3, r5
1001468c:	9313      	str	r3, [sp, #76]	@ 0x4c
1001468e:	1cd3      	adds	r3, r2, #3
10014690:	9212      	str	r2, [sp, #72]	@ 0x48
10014692:	db02      	blt.n	1001469a <_vfprintf_r+0x1622>
10014694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10014696:	4293      	cmp	r3, r2
10014698:	da44      	bge.n	10014724 <_vfprintf_r+0x16ac>
1001469a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001469c:	3b02      	subs	r3, #2
1001469e:	930e      	str	r3, [sp, #56]	@ 0x38
100146a0:	1e53      	subs	r3, r2, #1
100146a2:	9329      	str	r3, [sp, #164]	@ 0xa4
100146a4:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
100146a8:	2000      	movs	r0, #0
100146aa:	e6a1      	b.n	100143f0 <_vfprintf_r+0x1378>
100146ac:	222d      	movs	r2, #45	@ 0x2d
100146ae:	2300      	movs	r3, #0
100146b0:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
100146b4:	9309      	str	r3, [sp, #36]	@ 0x24
100146b6:	f7fe bf1d 	b.w	100134f4 <_vfprintf_r+0x47c>
100146ba:	4645      	mov	r5, r8
100146bc:	460c      	mov	r4, r1
100146be:	4690      	mov	r8, r2
100146c0:	3301      	adds	r3, #1
100146c2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100146c4:	f8c8 2000 	str.w	r2, [r8]
100146c8:	4434      	add	r4, r6
100146ca:	2b07      	cmp	r3, #7
100146cc:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100146d0:	f8c8 6004 	str.w	r6, [r8, #4]
100146d4:	f300 8226 	bgt.w	10014b24 <_vfprintf_r+0x1aac>
100146d8:	f108 0808 	add.w	r8, r8, #8
100146dc:	f7ff bacb 	b.w	10013c76 <_vfprintf_r+0xbfe>
100146e0:	222d      	movs	r2, #45	@ 0x2d
100146e2:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
100146e6:	f7fe bef1 	b.w	100134cc <_vfprintf_r+0x454>
100146ea:	2300      	movs	r3, #0
100146ec:	9808      	ldr	r0, [sp, #32]
100146ee:	9700      	str	r7, [sp, #0]
100146f0:	aa2b      	add	r2, sp, #172	@ 0xac
100146f2:	4619      	mov	r1, r3
100146f4:	f002 fcf6 	bl	100170e4 <_wcsrtombs_r>
100146f8:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
100146fc:	4683      	mov	fp, r0
100146fe:	f000 8209 	beq.w	10014b14 <_vfprintf_r+0x1a9c>
10014702:	952b      	str	r5, [sp, #172]	@ 0xac
10014704:	e59e      	b.n	10014244 <_vfprintf_r+0x11cc>
10014706:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
10014708:	991d      	ldr	r1, [sp, #116]	@ 0x74
1001470a:	1aed      	subs	r5, r5, r3
1001470c:	461a      	mov	r2, r3
1001470e:	4628      	mov	r0, r5
10014710:	f002 fab6 	bl	10016c80 <strncpy>
10014714:	f898 3001 	ldrb.w	r3, [r8, #1]
10014718:	b10b      	cbz	r3, 1001471e <_vfprintf_r+0x16a6>
1001471a:	f108 0801 	add.w	r8, r8, #1
1001471e:	f04f 0c00 	mov.w	ip, #0
10014722:	e4f9      	b.n	10014118 <_vfprintf_r+0x10a0>
10014724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10014726:	4293      	cmp	r3, r2
10014728:	f300 8194 	bgt.w	10014a54 <_vfprintf_r+0x19dc>
1001472c:	9b06      	ldr	r3, [sp, #24]
1001472e:	07de      	lsls	r6, r3, #31
10014730:	f140 824a 	bpl.w	10014bc8 <_vfprintf_r+0x1b50>
10014734:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10014736:	eb02 0b03 	add.w	fp, r2, r3
1001473a:	9b06      	ldr	r3, [sp, #24]
1001473c:	055c      	lsls	r4, r3, #21
1001473e:	d502      	bpl.n	10014746 <_vfprintf_r+0x16ce>
10014740:	2a00      	cmp	r2, #0
10014742:	f300 824a 	bgt.w	10014bda <_vfprintf_r+0x1b62>
10014746:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001474a:	9306      	str	r3, [sp, #24]
1001474c:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10014750:	2367      	movs	r3, #103	@ 0x67
10014752:	930e      	str	r3, [sp, #56]	@ 0x38
10014754:	2300      	movs	r3, #0
10014756:	9314      	str	r3, [sp, #80]	@ 0x50
10014758:	9310      	str	r3, [sp, #64]	@ 0x40
1001475a:	e694      	b.n	10014486 <_vfprintf_r+0x140e>
1001475c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001475e:	42a3      	cmp	r3, r4
10014760:	f4bf ae31 	bcs.w	100143c6 <_vfprintf_r+0x134e>
10014764:	2130      	movs	r1, #48	@ 0x30
10014766:	1c5a      	adds	r2, r3, #1
10014768:	9230      	str	r2, [sp, #192]	@ 0xc0
1001476a:	7019      	strb	r1, [r3, #0]
1001476c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001476e:	429c      	cmp	r4, r3
10014770:	d8f9      	bhi.n	10014766 <_vfprintf_r+0x16ee>
10014772:	e628      	b.n	100143c6 <_vfprintf_r+0x134e>
10014774:	4621      	mov	r1, r4
10014776:	461c      	mov	r4, r3
10014778:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001477a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
1001477e:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
10014782:	4642      	mov	r2, r8
10014784:	4f2c      	ldr	r7, [pc, #176]	@ (10014838 <_vfprintf_r+0x17c0>)
10014786:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
1001478a:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
1001478e:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
10014792:	f8dd b020 	ldr.w	fp, [sp, #32]
10014796:	b37b      	cbz	r3, 100147f8 <_vfprintf_r+0x1780>
10014798:	f1b9 0f00 	cmp.w	r9, #0
1001479c:	f000 8085 	beq.w	100148aa <_vfprintf_r+0x1832>
100147a0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
100147a4:	9833      	ldr	r0, [sp, #204]	@ 0xcc
100147a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100147a8:	3001      	adds	r0, #1
100147aa:	4441      	add	r1, r8
100147ac:	2807      	cmp	r0, #7
100147ae:	e9c2 3800 	strd	r3, r8, [r2]
100147b2:	9134      	str	r1, [sp, #208]	@ 0xd0
100147b4:	9033      	str	r0, [sp, #204]	@ 0xcc
100147b6:	dc6d      	bgt.n	10014894 <_vfprintf_r+0x181c>
100147b8:	3208      	adds	r2, #8
100147ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100147bc:	f89a 0000 	ldrb.w	r0, [sl]
100147c0:	1b1e      	subs	r6, r3, r4
100147c2:	4286      	cmp	r6, r0
100147c4:	bfa8      	it	ge
100147c6:	4606      	movge	r6, r0
100147c8:	2e00      	cmp	r6, #0
100147ca:	dd0b      	ble.n	100147e4 <_vfprintf_r+0x176c>
100147cc:	9833      	ldr	r0, [sp, #204]	@ 0xcc
100147ce:	3001      	adds	r0, #1
100147d0:	4431      	add	r1, r6
100147d2:	2807      	cmp	r0, #7
100147d4:	e9c2 4600 	strd	r4, r6, [r2]
100147d8:	9134      	str	r1, [sp, #208]	@ 0xd0
100147da:	9033      	str	r0, [sp, #204]	@ 0xcc
100147dc:	dc6b      	bgt.n	100148b6 <_vfprintf_r+0x183e>
100147de:	f89a 0000 	ldrb.w	r0, [sl]
100147e2:	3208      	adds	r2, #8
100147e4:	2e00      	cmp	r6, #0
100147e6:	bfac      	ite	ge
100147e8:	1b85      	subge	r5, r0, r6
100147ea:	4605      	movlt	r5, r0
100147ec:	2d00      	cmp	r5, #0
100147ee:	dc14      	bgt.n	1001481a <_vfprintf_r+0x17a2>
100147f0:	4404      	add	r4, r0
100147f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100147f4:	2b00      	cmp	r3, #0
100147f6:	d1cf      	bne.n	10014798 <_vfprintf_r+0x1720>
100147f8:	f1b9 0f00 	cmp.w	r9, #0
100147fc:	d1d0      	bne.n	100147a0 <_vfprintf_r+0x1728>
100147fe:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10014802:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
10014806:	46a2      	mov	sl, r4
10014808:	45da      	cmp	sl, fp
1001480a:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
1001480e:	4690      	mov	r8, r2
10014810:	460c      	mov	r4, r1
10014812:	bf28      	it	cs
10014814:	46da      	movcs	sl, fp
10014816:	f7ff ba35 	b.w	10013c84 <_vfprintf_r+0xc0c>
1001481a:	2d10      	cmp	r5, #16
1001481c:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001481e:	f340 821a 	ble.w	10014c56 <_vfprintf_r+0x1bde>
10014822:	4623      	mov	r3, r4
10014824:	463e      	mov	r6, r7
10014826:	462c      	mov	r4, r5
10014828:	461d      	mov	r5, r3
1001482a:	e00c      	b.n	10014846 <_vfprintf_r+0x17ce>
1001482c:	40300000 	.word	0x40300000
10014830:	3fe00000 	.word	0x3fe00000
10014834:	10023a5c 	.word	0x10023a5c
10014838:	10023a78 	.word	0x10023a78
1001483c:	3c10      	subs	r4, #16
1001483e:	2c10      	cmp	r4, #16
10014840:	f102 0208 	add.w	r2, r2, #8
10014844:	dd16      	ble.n	10014874 <_vfprintf_r+0x17fc>
10014846:	3001      	adds	r0, #1
10014848:	3110      	adds	r1, #16
1001484a:	2310      	movs	r3, #16
1001484c:	2807      	cmp	r0, #7
1001484e:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
10014852:	6017      	str	r7, [r2, #0]
10014854:	6053      	str	r3, [r2, #4]
10014856:	ddf1      	ble.n	1001483c <_vfprintf_r+0x17c4>
10014858:	9907      	ldr	r1, [sp, #28]
1001485a:	aa32      	add	r2, sp, #200	@ 0xc8
1001485c:	4658      	mov	r0, fp
1001485e:	f000 faaf 	bl	10014dc0 <__sprint_r>
10014862:	2800      	cmp	r0, #0
10014864:	f47e ad60 	bne.w	10013328 <_vfprintf_r+0x2b0>
10014868:	3c10      	subs	r4, #16
1001486a:	2c10      	cmp	r4, #16
1001486c:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
10014870:	aa35      	add	r2, sp, #212	@ 0xd4
10014872:	dce8      	bgt.n	10014846 <_vfprintf_r+0x17ce>
10014874:	462b      	mov	r3, r5
10014876:	4625      	mov	r5, r4
10014878:	461c      	mov	r4, r3
1001487a:	3001      	adds	r0, #1
1001487c:	4429      	add	r1, r5
1001487e:	2807      	cmp	r0, #7
10014880:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
10014884:	6016      	str	r6, [r2, #0]
10014886:	6055      	str	r5, [r2, #4]
10014888:	dc4b      	bgt.n	10014922 <_vfprintf_r+0x18aa>
1001488a:	f89a 0000 	ldrb.w	r0, [sl]
1001488e:	3208      	adds	r2, #8
10014890:	4404      	add	r4, r0
10014892:	e7ae      	b.n	100147f2 <_vfprintf_r+0x177a>
10014894:	9907      	ldr	r1, [sp, #28]
10014896:	aa32      	add	r2, sp, #200	@ 0xc8
10014898:	4658      	mov	r0, fp
1001489a:	f000 fa91 	bl	10014dc0 <__sprint_r>
1001489e:	2800      	cmp	r0, #0
100148a0:	f47e ad42 	bne.w	10013328 <_vfprintf_r+0x2b0>
100148a4:	9934      	ldr	r1, [sp, #208]	@ 0xd0
100148a6:	aa35      	add	r2, sp, #212	@ 0xd4
100148a8:	e787      	b.n	100147ba <_vfprintf_r+0x1742>
100148aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100148ac:	3b01      	subs	r3, #1
100148ae:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
100148b2:	9310      	str	r3, [sp, #64]	@ 0x40
100148b4:	e776      	b.n	100147a4 <_vfprintf_r+0x172c>
100148b6:	9907      	ldr	r1, [sp, #28]
100148b8:	aa32      	add	r2, sp, #200	@ 0xc8
100148ba:	4658      	mov	r0, fp
100148bc:	f000 fa80 	bl	10014dc0 <__sprint_r>
100148c0:	2800      	cmp	r0, #0
100148c2:	f47e ad31 	bne.w	10013328 <_vfprintf_r+0x2b0>
100148c6:	f89a 0000 	ldrb.w	r0, [sl]
100148ca:	9934      	ldr	r1, [sp, #208]	@ 0xd0
100148cc:	aa35      	add	r2, sp, #212	@ 0xd4
100148ce:	e789      	b.n	100147e4 <_vfprintf_r+0x176c>
100148d0:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100148d4:	960d      	str	r6, [sp, #52]	@ 0x34
100148d6:	f8cd b018 	str.w	fp, [sp, #24]
100148da:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
100148de:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
100148e2:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
100148e6:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
100148ea:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
100148ee:	f7fe bdfe 	b.w	100134ee <_vfprintf_r+0x476>
100148f2:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100148f6:	aa32      	add	r2, sp, #200	@ 0xc8
100148f8:	f000 fa62 	bl	10014dc0 <__sprint_r>
100148fc:	2800      	cmp	r0, #0
100148fe:	f47f a8bf 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014902:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10014904:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10014906:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001490a:	f7ff baa5 	b.w	10013e58 <_vfprintf_r+0xde0>
1001490e:	930c      	str	r3, [sp, #48]	@ 0x30
10014910:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	@ 0x58
10014914:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
10014918:	9325      	str	r3, [sp, #148]	@ 0x94
1001491a:	232d      	movs	r3, #45	@ 0x2d
1001491c:	9124      	str	r1, [sp, #144]	@ 0x90
1001491e:	931f      	str	r3, [sp, #124]	@ 0x7c
10014920:	e5fc      	b.n	1001451c <_vfprintf_r+0x14a4>
10014922:	9907      	ldr	r1, [sp, #28]
10014924:	aa32      	add	r2, sp, #200	@ 0xc8
10014926:	4658      	mov	r0, fp
10014928:	f000 fa4a 	bl	10014dc0 <__sprint_r>
1001492c:	2800      	cmp	r0, #0
1001492e:	f47e acfb 	bne.w	10013328 <_vfprintf_r+0x2b0>
10014932:	f89a 0000 	ldrb.w	r0, [sl]
10014936:	9934      	ldr	r1, [sp, #208]	@ 0xd0
10014938:	aa35      	add	r2, sp, #212	@ 0xd4
1001493a:	4404      	add	r4, r0
1001493c:	e759      	b.n	100147f2 <_vfprintf_r+0x177a>
1001493e:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014942:	aa32      	add	r2, sp, #200	@ 0xc8
10014944:	f000 fa3c 	bl	10014dc0 <__sprint_r>
10014948:	2800      	cmp	r0, #0
1001494a:	f47f a899 	bne.w	10013a80 <_vfprintf_r+0xa08>
1001494e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10014950:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10014954:	f7ff b988 	b.w	10013c68 <_vfprintf_r+0xbf0>
10014958:	2378      	movs	r3, #120	@ 0x78
1001495a:	e5c3      	b.n	100144e4 <_vfprintf_r+0x146c>
1001495c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014960:	aa32      	add	r2, sp, #200	@ 0xc8
10014962:	f000 fa2d 	bl	10014dc0 <__sprint_r>
10014966:	2800      	cmp	r0, #0
10014968:	f47f a88a 	bne.w	10013a80 <_vfprintf_r+0xa08>
1001496c:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001496e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10014970:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10014974:	f7ff b99c 	b.w	10013cb0 <_vfprintf_r+0xc38>
10014978:	49ab      	ldr	r1, [pc, #684]	@ (10014c28 <_vfprintf_r+0x1bb0>)
1001497a:	9115      	str	r1, [sp, #84]	@ 0x54
1001497c:	f7fe bdee 	b.w	1001355c <_vfprintf_r+0x4e4>
10014980:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014984:	aa32      	add	r2, sp, #200	@ 0xc8
10014986:	f000 fa1b 	bl	10014dc0 <__sprint_r>
1001498a:	2800      	cmp	r0, #0
1001498c:	f47f a878 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014990:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10014992:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10014994:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10014996:	1b5d      	subs	r5, r3, r5
10014998:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001499c:	f7ff b99f 	b.w	10013cde <_vfprintf_r+0xc66>
100149a0:	9b06      	ldr	r3, [sp, #24]
100149a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
100149a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100149a6:	f003 0301 	and.w	r3, r3, #1
100149aa:	2900      	cmp	r1, #0
100149ac:	ea43 0302 	orr.w	r3, r3, r2
100149b0:	f340 815d 	ble.w	10014c6e <_vfprintf_r+0x1bf6>
100149b4:	2b00      	cmp	r3, #0
100149b6:	f040 8109 	bne.w	10014bcc <_vfprintf_r+0x1b54>
100149ba:	2366      	movs	r3, #102	@ 0x66
100149bc:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
100149c0:	930e      	str	r3, [sp, #56]	@ 0x38
100149c2:	9b06      	ldr	r3, [sp, #24]
100149c4:	055a      	lsls	r2, r3, #21
100149c6:	f100 810a 	bmi.w	10014bde <_vfprintf_r+0x1b66>
100149ca:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
100149ce:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
100149d2:	9306      	str	r3, [sp, #24]
100149d4:	e6be      	b.n	10014754 <_vfprintf_r+0x16dc>
100149d6:	2200      	movs	r2, #0
100149d8:	9209      	str	r2, [sp, #36]	@ 0x24
100149da:	f7fe bbc6 	b.w	1001316a <_vfprintf_r+0xf2>
100149de:	9b07      	ldr	r3, [sp, #28]
100149e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100149e2:	07dd      	lsls	r5, r3, #31
100149e4:	d407      	bmi.n	100149f6 <_vfprintf_r+0x197e>
100149e6:	9b07      	ldr	r3, [sp, #28]
100149e8:	899b      	ldrh	r3, [r3, #12]
100149ea:	059c      	lsls	r4, r3, #22
100149ec:	d403      	bmi.n	100149f6 <_vfprintf_r+0x197e>
100149ee:	9b07      	ldr	r3, [sp, #28]
100149f0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
100149f2:	f002 f9d7 	bl	10016da4 <__retarget_lock_release_recursive>
100149f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100149fa:	930a      	str	r3, [sp, #40]	@ 0x28
100149fc:	f7fe bca5 	b.w	1001334a <_vfprintf_r+0x2d2>
10014a00:	4256      	negs	r6, r2
10014a02:	3210      	adds	r2, #16
10014a04:	4a89      	ldr	r2, [pc, #548]	@ (10014c2c <_vfprintf_r+0x1bb4>)
10014a06:	9215      	str	r2, [sp, #84]	@ 0x54
10014a08:	da34      	bge.n	10014a74 <_vfprintf_r+0x19fc>
10014a0a:	46aa      	mov	sl, r5
10014a0c:	2710      	movs	r7, #16
10014a0e:	4615      	mov	r5, r2
10014a10:	e004      	b.n	10014a1c <_vfprintf_r+0x19a4>
10014a12:	f108 0808 	add.w	r8, r8, #8
10014a16:	3e10      	subs	r6, #16
10014a18:	2e10      	cmp	r6, #16
10014a1a:	dd2a      	ble.n	10014a72 <_vfprintf_r+0x19fa>
10014a1c:	3301      	adds	r3, #1
10014a1e:	3410      	adds	r4, #16
10014a20:	2b07      	cmp	r3, #7
10014a22:	e9c8 5700 	strd	r5, r7, [r8]
10014a26:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10014a2a:	ddf2      	ble.n	10014a12 <_vfprintf_r+0x199a>
10014a2c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014a30:	aa32      	add	r2, sp, #200	@ 0xc8
10014a32:	f000 f9c5 	bl	10014dc0 <__sprint_r>
10014a36:	2800      	cmp	r0, #0
10014a38:	f47f a822 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014a3c:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10014a40:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10014a44:	e7e7      	b.n	10014a16 <_vfprintf_r+0x199e>
10014a46:	2300      	movs	r3, #0
10014a48:	930c      	str	r3, [sp, #48]	@ 0x30
10014a4a:	ad45      	add	r5, sp, #276	@ 0x114
10014a4c:	e40c      	b.n	10014268 <_vfprintf_r+0x11f0>
10014a4e:	19ac      	adds	r4, r5, r6
10014a50:	2747      	movs	r7, #71	@ 0x47
10014a52:	e4ae      	b.n	100143b2 <_vfprintf_r+0x133a>
10014a54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10014a56:	9a18      	ldr	r2, [sp, #96]	@ 0x60
10014a58:	eb03 0b02 	add.w	fp, r3, r2
10014a5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10014a5e:	2b00      	cmp	r3, #0
10014a60:	f340 80ee 	ble.w	10014c40 <_vfprintf_r+0x1bc8>
10014a64:	2367      	movs	r3, #103	@ 0x67
10014a66:	930e      	str	r3, [sp, #56]	@ 0x38
10014a68:	e7ab      	b.n	100149c2 <_vfprintf_r+0x194a>
10014a6a:	4a6f      	ldr	r2, [pc, #444]	@ (10014c28 <_vfprintf_r+0x1bb0>)
10014a6c:	9215      	str	r2, [sp, #84]	@ 0x54
10014a6e:	f7ff b8ce 	b.w	10013c0e <_vfprintf_r+0xb96>
10014a72:	4655      	mov	r5, sl
10014a74:	3301      	adds	r3, #1
10014a76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10014a78:	f8c8 2000 	str.w	r2, [r8]
10014a7c:	4434      	add	r4, r6
10014a7e:	2b07      	cmp	r3, #7
10014a80:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10014a84:	f8c8 6004 	str.w	r6, [r8, #4]
10014a88:	f77f a9fb 	ble.w	10013e82 <_vfprintf_r+0xe0a>
10014a8c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014a90:	aa32      	add	r2, sp, #200	@ 0xc8
10014a92:	f000 f995 	bl	10014dc0 <__sprint_r>
10014a96:	2800      	cmp	r0, #0
10014a98:	f47e aff2 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014a9c:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10014aa0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10014aa4:	f7ff b800 	b.w	10013aa8 <_vfprintf_r+0xa30>
10014aa8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10014aaa:	9730      	str	r7, [sp, #192]	@ 0xc0
10014aac:	7bd9      	ldrb	r1, [r3, #15]
10014aae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
10014ab2:	428a      	cmp	r2, r1
10014ab4:	4633      	mov	r3, r6
10014ab6:	d109      	bne.n	10014acc <_vfprintf_r+0x1a54>
10014ab8:	2030      	movs	r0, #48	@ 0x30
10014aba:	f803 0c01 	strb.w	r0, [r3, #-1]
10014abe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10014ac0:	1e5a      	subs	r2, r3, #1
10014ac2:	9230      	str	r2, [sp, #192]	@ 0xc0
10014ac4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
10014ac8:	4291      	cmp	r1, r2
10014aca:	d0f6      	beq.n	10014aba <_vfprintf_r+0x1a42>
10014acc:	2a39      	cmp	r2, #57	@ 0x39
10014ace:	bf0b      	itete	eq
10014ad0:	9a12      	ldreq	r2, [sp, #72]	@ 0x48
10014ad2:	3201      	addne	r2, #1
10014ad4:	7a92      	ldrbeq	r2, [r2, #10]
10014ad6:	b2d2      	uxtbne	r2, r2
10014ad8:	f803 2c01 	strb.w	r2, [r3, #-1]
10014adc:	4633      	mov	r3, r6
10014ade:	e595      	b.n	1001460c <_vfprintf_r+0x1594>
10014ae0:	4a52      	ldr	r2, [pc, #328]	@ (10014c2c <_vfprintf_r+0x1bb4>)
10014ae2:	9215      	str	r2, [sp, #84]	@ 0x54
10014ae4:	f7fe bf78 	b.w	100139d8 <_vfprintf_r+0x960>
10014ae8:	9808      	ldr	r0, [sp, #32]
10014aea:	1c59      	adds	r1, r3, #1
10014aec:	f7fd fff6 	bl	10012adc <_malloc_r>
10014af0:	4605      	mov	r5, r0
10014af2:	b178      	cbz	r0, 10014b14 <_vfprintf_r+0x1a9c>
10014af4:	900c      	str	r0, [sp, #48]	@ 0x30
10014af6:	e504      	b.n	10014502 <_vfprintf_r+0x148a>
10014af8:	2800      	cmp	r0, #0
10014afa:	d162      	bne.n	10014bc2 <_vfprintf_r+0x1b4a>
10014afc:	2230      	movs	r2, #48	@ 0x30
10014afe:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
10014b02:	f10d 02b3 	add.w	r2, sp, #179	@ 0xb3
10014b06:	3330      	adds	r3, #48	@ 0x30
10014b08:	f802 3b01 	strb.w	r3, [r2], #1
10014b0c:	ab2c      	add	r3, sp, #176	@ 0xb0
10014b0e:	1ad3      	subs	r3, r2, r3
10014b10:	931c      	str	r3, [sp, #112]	@ 0x70
10014b12:	e4a3      	b.n	1001445c <_vfprintf_r+0x13e4>
10014b14:	9a07      	ldr	r2, [sp, #28]
10014b16:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
10014b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10014b1e:	8193      	strh	r3, [r2, #12]
10014b20:	f7fe bc0b 	b.w	1001333a <_vfprintf_r+0x2c2>
10014b24:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10014b28:	aa32      	add	r2, sp, #200	@ 0xc8
10014b2a:	f000 f949 	bl	10014dc0 <__sprint_r>
10014b2e:	2800      	cmp	r0, #0
10014b30:	f47e afa6 	bne.w	10013a80 <_vfprintf_r+0xa08>
10014b34:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10014b36:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10014b3a:	f7ff b89c 	b.w	10013c76 <_vfprintf_r+0xbfe>
10014b3e:	4b3c      	ldr	r3, [pc, #240]	@ (10014c30 <_vfprintf_r+0x1bb8>)
10014b40:	4a3c      	ldr	r2, [pc, #240]	@ (10014c34 <_vfprintf_r+0x1bbc>)
10014b42:	990e      	ldr	r1, [sp, #56]	@ 0x38
10014b44:	2961      	cmp	r1, #97	@ 0x61
10014b46:	bf18      	it	ne
10014b48:	461a      	movne	r2, r3
10014b4a:	2301      	movs	r3, #1
10014b4c:	9212      	str	r2, [sp, #72]	@ 0x48
10014b4e:	9329      	str	r3, [sp, #164]	@ 0xa4
10014b50:	e4ff      	b.n	10014552 <_vfprintf_r+0x14da>
10014b52:	2306      	movs	r3, #6
10014b54:	9309      	str	r3, [sp, #36]	@ 0x24
10014b56:	f7ff b9f1 	b.w	10013f3c <_vfprintf_r+0xec4>
10014b5a:	9b06      	ldr	r3, [sp, #24]
10014b5c:	07df      	lsls	r7, r3, #31
10014b5e:	f57f ac86 	bpl.w	1001446e <_vfprintf_r+0x13f6>
10014b62:	e482      	b.n	1001446a <_vfprintf_r+0x13f2>
10014b64:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10014b68:	2200      	movs	r2, #0
10014b6a:	2300      	movs	r3, #0
10014b6c:	f006 fdd6 	bl	1001b71c <__aeabi_dcmpeq>
10014b70:	2800      	cmp	r0, #0
10014b72:	f47f ac1c 	bne.w	100143ae <_vfprintf_r+0x1336>
10014b76:	f1c6 0601 	rsb	r6, r6, #1
10014b7a:	9629      	str	r6, [sp, #164]	@ 0xa4
10014b7c:	e418      	b.n	100143b0 <_vfprintf_r+0x1338>
10014b7e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
10014b80:	4d2d      	ldr	r5, [pc, #180]	@ (10014c38 <_vfprintf_r+0x1bc0>)
10014b82:	2b00      	cmp	r3, #0
10014b84:	bfb4      	ite	lt
10014b86:	222d      	movlt	r2, #45	@ 0x2d
10014b88:	f89d 209f 	ldrbge.w	r2, [sp, #159]	@ 0x9f
10014b8c:	4b2b      	ldr	r3, [pc, #172]	@ (10014c3c <_vfprintf_r+0x1bc4>)
10014b8e:	bfb8      	it	lt
10014b90:	f88d 209f 	strblt.w	r2, [sp, #159]	@ 0x9f
10014b94:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
10014b98:	f7fe bc9c 	b.w	100134d4 <_vfprintf_r+0x45c>
10014b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10014b9e:	9306      	str	r3, [sp, #24]
10014ba0:	469b      	mov	fp, r3
10014ba2:	2373      	movs	r3, #115	@ 0x73
10014ba4:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10014ba8:	960d      	str	r6, [sp, #52]	@ 0x34
10014baa:	9009      	str	r0, [sp, #36]	@ 0x24
10014bac:	9014      	str	r0, [sp, #80]	@ 0x50
10014bae:	9010      	str	r0, [sp, #64]	@ 0x40
10014bb0:	930e      	str	r3, [sp, #56]	@ 0x38
10014bb2:	f7fe bc9c 	b.w	100134ee <_vfprintf_r+0x476>
10014bb6:	f8dd 9018 	ldr.w	r9, [sp, #24]
10014bba:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10014bbe:	f7ff bb41 	b.w	10014244 <_vfprintf_r+0x11cc>
10014bc2:	f10d 02b2 	add.w	r2, sp, #178	@ 0xb2
10014bc6:	e79e      	b.n	10014b06 <_vfprintf_r+0x1a8e>
10014bc8:	4693      	mov	fp, r2
10014bca:	e5b6      	b.n	1001473a <_vfprintf_r+0x16c2>
10014bcc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10014bce:	18cf      	adds	r7, r1, r3
10014bd0:	443a      	add	r2, r7
10014bd2:	2366      	movs	r3, #102	@ 0x66
10014bd4:	4693      	mov	fp, r2
10014bd6:	930e      	str	r3, [sp, #56]	@ 0x38
10014bd8:	e6f3      	b.n	100149c2 <_vfprintf_r+0x194a>
10014bda:	2367      	movs	r3, #103	@ 0x67
10014bdc:	930e      	str	r3, [sp, #56]	@ 0x38
10014bde:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10014be0:	780b      	ldrb	r3, [r1, #0]
10014be2:	2bff      	cmp	r3, #255	@ 0xff
10014be4:	d062      	beq.n	10014cac <_vfprintf_r+0x1c34>
10014be6:	2400      	movs	r4, #0
10014be8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10014bea:	4620      	mov	r0, r4
10014bec:	e003      	b.n	10014bf6 <_vfprintf_r+0x1b7e>
10014bee:	3001      	adds	r0, #1
10014bf0:	3101      	adds	r1, #1
10014bf2:	2bff      	cmp	r3, #255	@ 0xff
10014bf4:	d008      	beq.n	10014c08 <_vfprintf_r+0x1b90>
10014bf6:	4293      	cmp	r3, r2
10014bf8:	da06      	bge.n	10014c08 <_vfprintf_r+0x1b90>
10014bfa:	1ad2      	subs	r2, r2, r3
10014bfc:	784b      	ldrb	r3, [r1, #1]
10014bfe:	2b00      	cmp	r3, #0
10014c00:	d1f5      	bne.n	10014bee <_vfprintf_r+0x1b76>
10014c02:	780b      	ldrb	r3, [r1, #0]
10014c04:	3401      	adds	r4, #1
10014c06:	e7f4      	b.n	10014bf2 <_vfprintf_r+0x1b7a>
10014c08:	911b      	str	r1, [sp, #108]	@ 0x6c
10014c0a:	9212      	str	r2, [sp, #72]	@ 0x48
10014c0c:	9010      	str	r0, [sp, #64]	@ 0x40
10014c0e:	9414      	str	r4, [sp, #80]	@ 0x50
10014c10:	e9dd 3914 	ldrd	r3, r9, [sp, #80]	@ 0x50
10014c14:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10014c16:	4413      	add	r3, r2
10014c18:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
10014c1a:	fb02 bb03 	mla	fp, r2, r3, fp
10014c1e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10014c22:	9306      	str	r3, [sp, #24]
10014c24:	e42f      	b.n	10014486 <_vfprintf_r+0x140e>
10014c26:	bf00      	nop
10014c28:	10023a88 	.word	0x10023a88
10014c2c:	10023a78 	.word	0x10023a78
10014c30:	10023a5c 	.word	0x10023a5c
10014c34:	10023a48 	.word	0x10023a48
10014c38:	10023a40 	.word	0x10023a40
10014c3c:	10023a44 	.word	0x10023a44
10014c40:	f1c3 0301 	rsb	r3, r3, #1
10014c44:	449b      	add	fp, r3
10014c46:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10014c4a:	9306      	str	r3, [sp, #24]
10014c4c:	2367      	movs	r3, #103	@ 0x67
10014c4e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10014c52:	930e      	str	r3, [sp, #56]	@ 0x38
10014c54:	e57e      	b.n	10014754 <_vfprintf_r+0x16dc>
10014c56:	4e1b      	ldr	r6, [pc, #108]	@ (10014cc4 <_vfprintf_r+0x1c4c>)
10014c58:	e60f      	b.n	1001487a <_vfprintf_r+0x1802>
10014c5a:	2302      	movs	r3, #2
10014c5c:	931c      	str	r3, [sp, #112]	@ 0x70
10014c5e:	f7ff bbfd 	b.w	1001445c <_vfprintf_r+0x13e4>
10014c62:	4a18      	ldr	r2, [pc, #96]	@ (10014cc4 <_vfprintf_r+0x1c4c>)
10014c64:	9215      	str	r2, [sp, #84]	@ 0x54
10014c66:	e52b      	b.n	100146c0 <_vfprintf_r+0x1648>
10014c68:	2170      	movs	r1, #112	@ 0x70
10014c6a:	f7ff bbc0 	b.w	100143ee <_vfprintf_r+0x1376>
10014c6e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10014c72:	b92b      	cbnz	r3, 10014c80 <_vfprintf_r+0x1c08>
10014c74:	2301      	movs	r3, #1
10014c76:	2266      	movs	r2, #102	@ 0x66
10014c78:	9306      	str	r3, [sp, #24]
10014c7a:	920e      	str	r2, [sp, #56]	@ 0x38
10014c7c:	469b      	mov	fp, r3
10014c7e:	e569      	b.n	10014754 <_vfprintf_r+0x16dc>
10014c80:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10014c82:	1c5f      	adds	r7, r3, #1
10014c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10014c86:	443b      	add	r3, r7
10014c88:	469b      	mov	fp, r3
10014c8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10014c8e:	9306      	str	r3, [sp, #24]
10014c90:	2366      	movs	r3, #102	@ 0x66
10014c92:	930e      	str	r3, [sp, #56]	@ 0x38
10014c94:	e55e      	b.n	10014754 <_vfprintf_r+0x16dc>
10014c96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10014c98:	7863      	ldrb	r3, [r4, #1]
10014c9a:	460c      	mov	r4, r1
10014c9c:	f852 1b04 	ldr.w	r1, [r2], #4
10014ca0:	920d      	str	r2, [sp, #52]	@ 0x34
10014ca2:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
10014ca6:	9109      	str	r1, [sp, #36]	@ 0x24
10014ca8:	f7fe ba5e 	b.w	10013168 <_vfprintf_r+0xf0>
10014cac:	2300      	movs	r3, #0
10014cae:	9314      	str	r3, [sp, #80]	@ 0x50
10014cb0:	9310      	str	r3, [sp, #64]	@ 0x40
10014cb2:	e7ad      	b.n	10014c10 <_vfprintf_r+0x1b98>
10014cb4:	e9dd 2b07 	ldrd	r2, fp, [sp, #28]
10014cb8:	8993      	ldrh	r3, [r2, #12]
10014cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10014cbe:	8193      	strh	r3, [r2, #12]
10014cc0:	f7fe bb32 	b.w	10013328 <_vfprintf_r+0x2b0>
10014cc4:	10023a78 	.word	0x10023a78

10014cc8 <__sbprintf>:
10014cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10014cca:	461f      	mov	r7, r3
10014ccc:	898b      	ldrh	r3, [r1, #12]
10014cce:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
10014cd2:	f023 0302 	bic.w	r3, r3, #2
10014cd6:	f8ad 300c 	strh.w	r3, [sp, #12]
10014cda:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10014cdc:	9319      	str	r3, [sp, #100]	@ 0x64
10014cde:	89cb      	ldrh	r3, [r1, #14]
10014ce0:	f8ad 300e 	strh.w	r3, [sp, #14]
10014ce4:	69cb      	ldr	r3, [r1, #28]
10014ce6:	9307      	str	r3, [sp, #28]
10014ce8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
10014cea:	9309      	str	r3, [sp, #36]	@ 0x24
10014cec:	ab1a      	add	r3, sp, #104	@ 0x68
10014cee:	9300      	str	r3, [sp, #0]
10014cf0:	9304      	str	r3, [sp, #16]
10014cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
10014cf6:	4615      	mov	r5, r2
10014cf8:	4606      	mov	r6, r0
10014cfa:	9302      	str	r3, [sp, #8]
10014cfc:	9305      	str	r3, [sp, #20]
10014cfe:	a816      	add	r0, sp, #88	@ 0x58
10014d00:	2300      	movs	r3, #0
10014d02:	460c      	mov	r4, r1
10014d04:	9306      	str	r3, [sp, #24]
10014d06:	f002 f847 	bl	10016d98 <__retarget_lock_init_recursive>
10014d0a:	462a      	mov	r2, r5
10014d0c:	463b      	mov	r3, r7
10014d0e:	4669      	mov	r1, sp
10014d10:	4630      	mov	r0, r6
10014d12:	f7fe f9b1 	bl	10013078 <_vfprintf_r>
10014d16:	1e05      	subs	r5, r0, #0
10014d18:	db07      	blt.n	10014d2a <__sbprintf+0x62>
10014d1a:	4669      	mov	r1, sp
10014d1c:	4630      	mov	r0, r6
10014d1e:	f001 fb19 	bl	10016354 <_fflush_r>
10014d22:	2800      	cmp	r0, #0
10014d24:	bf18      	it	ne
10014d26:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10014d2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
10014d2e:	065b      	lsls	r3, r3, #25
10014d30:	d503      	bpl.n	10014d3a <__sbprintf+0x72>
10014d32:	89a3      	ldrh	r3, [r4, #12]
10014d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10014d38:	81a3      	strh	r3, [r4, #12]
10014d3a:	9816      	ldr	r0, [sp, #88]	@ 0x58
10014d3c:	f002 f82e 	bl	10016d9c <__retarget_lock_close_recursive>
10014d40:	4628      	mov	r0, r5
10014d42:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
10014d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

10014d48 <__sprint_r.part.0>:
10014d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10014d4c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10014d4e:	049c      	lsls	r4, r3, #18
10014d50:	4690      	mov	r8, r2
10014d52:	d52e      	bpl.n	10014db2 <__sprint_r.part.0+0x6a>
10014d54:	6893      	ldr	r3, [r2, #8]
10014d56:	6812      	ldr	r2, [r2, #0]
10014d58:	b34b      	cbz	r3, 10014dae <__sprint_r.part.0+0x66>
10014d5a:	460d      	mov	r5, r1
10014d5c:	4606      	mov	r6, r0
10014d5e:	f102 0908 	add.w	r9, r2, #8
10014d62:	e959 2a02 	ldrd	r2, sl, [r9, #-8]
10014d66:	ea5f 079a 	movs.w	r7, sl, lsr #2
10014d6a:	d016      	beq.n	10014d9a <__sprint_r.part.0+0x52>
10014d6c:	f1a2 0b04 	sub.w	fp, r2, #4
10014d70:	2400      	movs	r4, #0
10014d72:	e001      	b.n	10014d78 <__sprint_r.part.0+0x30>
10014d74:	42a7      	cmp	r7, r4
10014d76:	d00e      	beq.n	10014d96 <__sprint_r.part.0+0x4e>
10014d78:	f85b 1f04 	ldr.w	r1, [fp, #4]!
10014d7c:	462a      	mov	r2, r5
10014d7e:	4630      	mov	r0, r6
10014d80:	f001 fe7c 	bl	10016a7c <_fputwc_r>
10014d84:	1c43      	adds	r3, r0, #1
10014d86:	f104 0401 	add.w	r4, r4, #1
10014d8a:	d1f3      	bne.n	10014d74 <__sprint_r.part.0+0x2c>
10014d8c:	2300      	movs	r3, #0
10014d8e:	e9c8 3301 	strd	r3, r3, [r8, #4]
10014d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10014d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
10014d9a:	f02a 0a03 	bic.w	sl, sl, #3
10014d9e:	eba3 030a 	sub.w	r3, r3, sl
10014da2:	f8c8 3008 	str.w	r3, [r8, #8]
10014da6:	f109 0908 	add.w	r9, r9, #8
10014daa:	2b00      	cmp	r3, #0
10014dac:	d1d9      	bne.n	10014d62 <__sprint_r.part.0+0x1a>
10014dae:	2000      	movs	r0, #0
10014db0:	e7ec      	b.n	10014d8c <__sprint_r.part.0+0x44>
10014db2:	f001 fc21 	bl	100165f8 <__sfvwrite_r>
10014db6:	2300      	movs	r3, #0
10014db8:	e9c8 3301 	strd	r3, r3, [r8, #4]
10014dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

10014dc0 <__sprint_r>:
10014dc0:	b410      	push	{r4}
10014dc2:	6894      	ldr	r4, [r2, #8]
10014dc4:	b11c      	cbz	r4, 10014dce <__sprint_r+0xe>
10014dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
10014dca:	f7ff bfbd 	b.w	10014d48 <__sprint_r.part.0>
10014dce:	4620      	mov	r0, r4
10014dd0:	6054      	str	r4, [r2, #4]
10014dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
10014dd6:	4770      	bx	lr

10014dd8 <_vfiprintf_r>:
10014dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10014ddc:	b0c7      	sub	sp, #284	@ 0x11c
10014dde:	af16      	add	r7, sp, #88	@ 0x58
10014de0:	4683      	mov	fp, r0
10014de2:	9103      	str	r1, [sp, #12]
10014de4:	9206      	str	r2, [sp, #24]
10014de6:	2100      	movs	r1, #0
10014de8:	2208      	movs	r2, #8
10014dea:	4638      	mov	r0, r7
10014dec:	461c      	mov	r4, r3
10014dee:	930a      	str	r3, [sp, #40]	@ 0x28
10014df0:	f001 fef4 	bl	10016bdc <memset>
10014df4:	f1bb 0f00 	cmp.w	fp, #0
10014df8:	d004      	beq.n	10014e04 <_vfiprintf_r+0x2c>
10014dfa:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
10014dfe:	2b00      	cmp	r3, #0
10014e00:	f000 86b8 	beq.w	10015b74 <_vfiprintf_r+0xd9c>
10014e04:	9a03      	ldr	r2, [sp, #12]
10014e06:	6e53      	ldr	r3, [r2, #100]	@ 0x64
10014e08:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
10014e0c:	07db      	lsls	r3, r3, #31
10014e0e:	d402      	bmi.n	10014e16 <_vfiprintf_r+0x3e>
10014e10:	0596      	lsls	r6, r2, #22
10014e12:	f140 859d 	bpl.w	10015950 <_vfiprintf_r+0xb78>
10014e16:	0495      	lsls	r5, r2, #18
10014e18:	d407      	bmi.n	10014e2a <_vfiprintf_r+0x52>
10014e1a:	9903      	ldr	r1, [sp, #12]
10014e1c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10014e1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10014e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
10014e26:	818a      	strh	r2, [r1, #12]
10014e28:	664b      	str	r3, [r1, #100]	@ 0x64
10014e2a:	0710      	lsls	r0, r2, #28
10014e2c:	f140 80c9 	bpl.w	10014fc2 <_vfiprintf_r+0x1ea>
10014e30:	9b03      	ldr	r3, [sp, #12]
10014e32:	691b      	ldr	r3, [r3, #16]
10014e34:	2b00      	cmp	r3, #0
10014e36:	f000 80c4 	beq.w	10014fc2 <_vfiprintf_r+0x1ea>
10014e3a:	f002 031a 	and.w	r3, r2, #26
10014e3e:	2b0a      	cmp	r3, #10
10014e40:	f000 80ce 	beq.w	10014fe0 <_vfiprintf_r+0x208>
10014e44:	2300      	movs	r3, #0
10014e46:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
10014e4a:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
10014e4e:	aa1d      	add	r2, sp, #116	@ 0x74
10014e50:	f8df a904 	ldr.w	sl, [pc, #2308]	@ 10015758 <_vfiprintf_r+0x980>
10014e54:	930d      	str	r3, [sp, #52]	@ 0x34
10014e56:	921a      	str	r2, [sp, #104]	@ 0x68
10014e58:	4691      	mov	r9, r2
10014e5a:	9310      	str	r3, [sp, #64]	@ 0x40
10014e5c:	9307      	str	r3, [sp, #28]
10014e5e:	9d06      	ldr	r5, [sp, #24]
10014e60:	f8da 40e4 	ldr.w	r4, [sl, #228]	@ 0xe4
10014e64:	f001 ff40 	bl	10016ce8 <__locale_mb_cur_max>
10014e68:	462a      	mov	r2, r5
10014e6a:	4603      	mov	r3, r0
10014e6c:	a914      	add	r1, sp, #80	@ 0x50
10014e6e:	9700      	str	r7, [sp, #0]
10014e70:	4658      	mov	r0, fp
10014e72:	47a0      	blx	r4
10014e74:	2800      	cmp	r0, #0
10014e76:	f000 80d2 	beq.w	1001501e <_vfiprintf_r+0x246>
10014e7a:	f2c0 80c8 	blt.w	1001500e <_vfiprintf_r+0x236>
10014e7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10014e80:	2a25      	cmp	r2, #37	@ 0x25
10014e82:	4603      	mov	r3, r0
10014e84:	d001      	beq.n	10014e8a <_vfiprintf_r+0xb2>
10014e86:	441d      	add	r5, r3
10014e88:	e7ea      	b.n	10014e60 <_vfiprintf_r+0x88>
10014e8a:	9b06      	ldr	r3, [sp, #24]
10014e8c:	1aee      	subs	r6, r5, r3
10014e8e:	4604      	mov	r4, r0
10014e90:	f040 80c9 	bne.w	10015026 <_vfiprintf_r+0x24e>
10014e94:	2300      	movs	r3, #0
10014e96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10014e9a:	786a      	ldrb	r2, [r5, #1]
10014e9c:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10014ea0:	9308      	str	r3, [sp, #32]
10014ea2:	1c6c      	adds	r4, r5, #1
10014ea4:	9105      	str	r1, [sp, #20]
10014ea6:	9302      	str	r3, [sp, #8]
10014ea8:	3401      	adds	r4, #1
10014eaa:	f1a2 0320 	sub.w	r3, r2, #32
10014eae:	2b5a      	cmp	r3, #90	@ 0x5a
10014eb0:	f200 80ff 	bhi.w	100150b2 <_vfiprintf_r+0x2da>
10014eb4:	e8df f013 	tbh	[pc, r3, lsl #1]
10014eb8:	00fd0300 	.word	0x00fd0300
10014ebc:	02fa00fd 	.word	0x02fa00fd
10014ec0:	00fd00fd 	.word	0x00fd00fd
10014ec4:	006b00fd 	.word	0x006b00fd
10014ec8:	00fd00fd 	.word	0x00fd00fd
10014ecc:	032a0215 	.word	0x032a0215
10014ed0:	022000fd 	.word	0x022000fd
10014ed4:	00fd0310 	.word	0x00fd0310
10014ed8:	005b030a 	.word	0x005b030a
10014edc:	005b005b 	.word	0x005b005b
10014ee0:	005b005b 	.word	0x005b005b
10014ee4:	005b005b 	.word	0x005b005b
10014ee8:	005b005b 	.word	0x005b005b
10014eec:	00fd00fd 	.word	0x00fd00fd
10014ef0:	00fd00fd 	.word	0x00fd00fd
10014ef4:	00fd00fd 	.word	0x00fd00fd
10014ef8:	00fd00fd 	.word	0x00fd00fd
10014efc:	01cb00fd 	.word	0x01cb00fd
10014f00:	00fd025a 	.word	0x00fd025a
10014f04:	00fd00fd 	.word	0x00fd00fd
10014f08:	00fd00fd 	.word	0x00fd00fd
10014f0c:	00fd00fd 	.word	0x00fd00fd
10014f10:	00fd00fd 	.word	0x00fd00fd
10014f14:	022600fd 	.word	0x022600fd
10014f18:	00fd00fd 	.word	0x00fd00fd
10014f1c:	01a300fd 	.word	0x01a300fd
10014f20:	027300fd 	.word	0x027300fd
10014f24:	00fd00fd 	.word	0x00fd00fd
10014f28:	00fd058c 	.word	0x00fd058c
10014f2c:	00fd00fd 	.word	0x00fd00fd
10014f30:	00fd00fd 	.word	0x00fd00fd
10014f34:	00fd00fd 	.word	0x00fd00fd
10014f38:	00fd00fd 	.word	0x00fd00fd
10014f3c:	01cb00fd 	.word	0x01cb00fd
10014f40:	00fd01f0 	.word	0x00fd01f0
10014f44:	00fd00fd 	.word	0x00fd00fd
10014f48:	01f002c1 	.word	0x01f002c1
10014f4c:	00fd007f 	.word	0x00fd007f
10014f50:	00fd032f 	.word	0x00fd032f
10014f54:	058902eb 	.word	0x058902eb
10014f58:	007f02ca 	.word	0x007f02ca
10014f5c:	01a300fd 	.word	0x01a300fd
10014f60:	0586007d 	.word	0x0586007d
10014f64:	00fd00fd 	.word	0x00fd00fd
10014f68:	00fd05af 	.word	0x00fd05af
10014f6c:	007d      	.short	0x007d
10014f6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
10014f72:	2200      	movs	r2, #0
10014f74:	4611      	mov	r1, r2
10014f76:	f814 2b01 	ldrb.w	r2, [r4], #1
10014f7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
10014f7e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
10014f82:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
10014f86:	2b09      	cmp	r3, #9
10014f88:	d9f5      	bls.n	10014f76 <_vfiprintf_r+0x19e>
10014f8a:	9108      	str	r1, [sp, #32]
10014f8c:	e78d      	b.n	10014eaa <_vfiprintf_r+0xd2>
10014f8e:	4658      	mov	r0, fp
10014f90:	f001 feb0 	bl	10016cf4 <_localeconv_r>
10014f94:	6843      	ldr	r3, [r0, #4]
10014f96:	9310      	str	r3, [sp, #64]	@ 0x40
10014f98:	4618      	mov	r0, r3
10014f9a:	f002 f811 	bl	10016fc0 <strlen>
10014f9e:	900f      	str	r0, [sp, #60]	@ 0x3c
10014fa0:	4605      	mov	r5, r0
10014fa2:	4658      	mov	r0, fp
10014fa4:	f001 fea6 	bl	10016cf4 <_localeconv_r>
10014fa8:	6883      	ldr	r3, [r0, #8]
10014faa:	930e      	str	r3, [sp, #56]	@ 0x38
10014fac:	2d00      	cmp	r5, #0
10014fae:	f040 84e3 	bne.w	10015978 <_vfiprintf_r+0xba0>
10014fb2:	7822      	ldrb	r2, [r4, #0]
10014fb4:	e778      	b.n	10014ea8 <_vfiprintf_r+0xd0>
10014fb6:	9b02      	ldr	r3, [sp, #8]
10014fb8:	7822      	ldrb	r2, [r4, #0]
10014fba:	f043 0320 	orr.w	r3, r3, #32
10014fbe:	9302      	str	r3, [sp, #8]
10014fc0:	e772      	b.n	10014ea8 <_vfiprintf_r+0xd0>
10014fc2:	9d03      	ldr	r5, [sp, #12]
10014fc4:	4658      	mov	r0, fp
10014fc6:	4629      	mov	r1, r5
10014fc8:	f001 fcba 	bl	10016940 <__swsetup_r>
10014fcc:	2800      	cmp	r0, #0
10014fce:	f040 86a3 	bne.w	10015d18 <_vfiprintf_r+0xf40>
10014fd2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
10014fd6:	f002 031a 	and.w	r3, r2, #26
10014fda:	2b0a      	cmp	r3, #10
10014fdc:	f47f af32 	bne.w	10014e44 <_vfiprintf_r+0x6c>
10014fe0:	9903      	ldr	r1, [sp, #12]
10014fe2:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
10014fe6:	2b00      	cmp	r3, #0
10014fe8:	f6ff af2c 	blt.w	10014e44 <_vfiprintf_r+0x6c>
10014fec:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10014fee:	07db      	lsls	r3, r3, #31
10014ff0:	d402      	bmi.n	10014ff8 <_vfiprintf_r+0x220>
10014ff2:	0597      	lsls	r7, r2, #22
10014ff4:	f140 865b 	bpl.w	10015cae <_vfiprintf_r+0xed6>
10014ff8:	9a06      	ldr	r2, [sp, #24]
10014ffa:	9903      	ldr	r1, [sp, #12]
10014ffc:	4623      	mov	r3, r4
10014ffe:	4658      	mov	r0, fp
10015000:	f000 febe 	bl	10015d80 <__sbprintf>
10015004:	9007      	str	r0, [sp, #28]
10015006:	9807      	ldr	r0, [sp, #28]
10015008:	b047      	add	sp, #284	@ 0x11c
1001500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001500e:	2208      	movs	r2, #8
10015010:	2100      	movs	r1, #0
10015012:	4638      	mov	r0, r7
10015014:	f001 fde2 	bl	10016bdc <memset>
10015018:	2301      	movs	r3, #1
1001501a:	441d      	add	r5, r3
1001501c:	e720      	b.n	10014e60 <_vfiprintf_r+0x88>
1001501e:	9b06      	ldr	r3, [sp, #24]
10015020:	1aee      	subs	r6, r5, r3
10015022:	4604      	mov	r4, r0
10015024:	d012      	beq.n	1001504c <_vfiprintf_r+0x274>
10015026:	9b06      	ldr	r3, [sp, #24]
10015028:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
1001502a:	e9c9 3600 	strd	r3, r6, [r9]
1001502e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10015030:	3301      	adds	r3, #1
10015032:	4432      	add	r2, r6
10015034:	2b07      	cmp	r3, #7
10015036:	921c      	str	r2, [sp, #112]	@ 0x70
10015038:	931b      	str	r3, [sp, #108]	@ 0x6c
1001503a:	dc11      	bgt.n	10015060 <_vfiprintf_r+0x288>
1001503c:	f109 0908 	add.w	r9, r9, #8
10015040:	9b07      	ldr	r3, [sp, #28]
10015042:	4433      	add	r3, r6
10015044:	9307      	str	r3, [sp, #28]
10015046:	2c00      	cmp	r4, #0
10015048:	f47f af24 	bne.w	10014e94 <_vfiprintf_r+0xbc>
1001504c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
1001504e:	2b00      	cmp	r3, #0
10015050:	f040 864d 	bne.w	10015cee <_vfiprintf_r+0xf16>
10015054:	9b03      	ldr	r3, [sp, #12]
10015056:	2200      	movs	r2, #0
10015058:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
1001505c:	921b      	str	r2, [sp, #108]	@ 0x6c
1001505e:	e01c      	b.n	1001509a <_vfiprintf_r+0x2c2>
10015060:	2a00      	cmp	r2, #0
10015062:	f000 842d 	beq.w	100158c0 <_vfiprintf_r+0xae8>
10015066:	9903      	ldr	r1, [sp, #12]
10015068:	aa1a      	add	r2, sp, #104	@ 0x68
1001506a:	4658      	mov	r0, fp
1001506c:	f7ff fe6c 	bl	10014d48 <__sprint_r.part.0>
10015070:	b980      	cbnz	r0, 10015094 <_vfiprintf_r+0x2bc>
10015072:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015076:	e7e3      	b.n	10015040 <_vfiprintf_r+0x268>
10015078:	9903      	ldr	r1, [sp, #12]
1001507a:	aa1a      	add	r2, sp, #104	@ 0x68
1001507c:	4658      	mov	r0, fp
1001507e:	f7ff fe63 	bl	10014d48 <__sprint_r.part.0>
10015082:	2800      	cmp	r0, #0
10015084:	f000 80a6 	beq.w	100151d4 <_vfiprintf_r+0x3fc>
10015088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001508a:	b11b      	cbz	r3, 10015094 <_vfiprintf_r+0x2bc>
1001508c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1001508e:	4658      	mov	r0, fp
10015090:	f003 f890 	bl	100181b4 <_free_r>
10015094:	9b03      	ldr	r3, [sp, #12]
10015096:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
1001509a:	9a03      	ldr	r2, [sp, #12]
1001509c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
1001509e:	07d1      	lsls	r1, r2, #31
100150a0:	f140 80a3 	bpl.w	100151ea <_vfiprintf_r+0x412>
100150a4:	065b      	lsls	r3, r3, #25
100150a6:	f100 8643 	bmi.w	10015d30 <_vfiprintf_r+0xf58>
100150aa:	9807      	ldr	r0, [sp, #28]
100150ac:	b047      	add	sp, #284	@ 0x11c
100150ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100150b2:	9406      	str	r4, [sp, #24]
100150b4:	2a00      	cmp	r2, #0
100150b6:	d0c9      	beq.n	1001504c <_vfiprintf_r+0x274>
100150b8:	2300      	movs	r3, #0
100150ba:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
100150be:	2301      	movs	r3, #1
100150c0:	f88d 20b4 	strb.w	r2, [sp, #180]	@ 0xb4
100150c4:	9304      	str	r3, [sp, #16]
100150c6:	9309      	str	r3, [sp, #36]	@ 0x24
100150c8:	ac2d      	add	r4, sp, #180	@ 0xb4
100150ca:	2300      	movs	r3, #0
100150cc:	930b      	str	r3, [sp, #44]	@ 0x2c
100150ce:	9305      	str	r3, [sp, #20]
100150d0:	9b02      	ldr	r3, [sp, #8]
100150d2:	f013 0302 	ands.w	r3, r3, #2
100150d6:	d002      	beq.n	100150de <_vfiprintf_r+0x306>
100150d8:	9a04      	ldr	r2, [sp, #16]
100150da:	3202      	adds	r2, #2
100150dc:	9204      	str	r2, [sp, #16]
100150de:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
100150e2:	9d02      	ldr	r5, [sp, #8]
100150e4:	1c50      	adds	r0, r2, #1
100150e6:	f015 0584 	ands.w	r5, r5, #132	@ 0x84
100150ea:	4601      	mov	r1, r0
100150ec:	950c      	str	r5, [sp, #48]	@ 0x30
100150ee:	d105      	bne.n	100150fc <_vfiprintf_r+0x324>
100150f0:	9d08      	ldr	r5, [sp, #32]
100150f2:	9e04      	ldr	r6, [sp, #16]
100150f4:	1bad      	subs	r5, r5, r6
100150f6:	2d00      	cmp	r5, #0
100150f8:	f300 8332 	bgt.w	10015760 <_vfiprintf_r+0x988>
100150fc:	f89d 004b 	ldrb.w	r0, [sp, #75]	@ 0x4b
10015100:	b188      	cbz	r0, 10015126 <_vfiprintf_r+0x34e>
10015102:	2201      	movs	r2, #1
10015104:	f10c 0c01 	add.w	ip, ip, #1
10015108:	f8c9 2004 	str.w	r2, [r9, #4]
1001510c:	2907      	cmp	r1, #7
1001510e:	f10d 024b 	add.w	r2, sp, #75	@ 0x4b
10015112:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
10015116:	f8c9 2000 	str.w	r2, [r9]
1001511a:	f300 82e1 	bgt.w	100156e0 <_vfiprintf_r+0x908>
1001511e:	460a      	mov	r2, r1
10015120:	f109 0908 	add.w	r9, r9, #8
10015124:	3101      	adds	r1, #1
10015126:	b1eb      	cbz	r3, 10015164 <_vfiprintf_r+0x38c>
10015128:	ab13      	add	r3, sp, #76	@ 0x4c
1001512a:	f10c 0c02 	add.w	ip, ip, #2
1001512e:	f8c9 3000 	str.w	r3, [r9]
10015132:	2907      	cmp	r1, #7
10015134:	f04f 0302 	mov.w	r3, #2
10015138:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
1001513c:	f8c9 3004 	str.w	r3, [r9, #4]
10015140:	f340 82ec 	ble.w	1001571c <_vfiprintf_r+0x944>
10015144:	f1bc 0f00 	cmp.w	ip, #0
10015148:	f000 83db 	beq.w	10015902 <_vfiprintf_r+0xb2a>
1001514c:	9903      	ldr	r1, [sp, #12]
1001514e:	aa1a      	add	r2, sp, #104	@ 0x68
10015150:	4658      	mov	r0, fp
10015152:	f7ff fdf9 	bl	10014d48 <__sprint_r.part.0>
10015156:	2800      	cmp	r0, #0
10015158:	d196      	bne.n	10015088 <_vfiprintf_r+0x2b0>
1001515a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
1001515e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015162:	1c51      	adds	r1, r2, #1
10015164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10015166:	2b80      	cmp	r3, #128	@ 0x80
10015168:	f000 8213 	beq.w	10015592 <_vfiprintf_r+0x7ba>
1001516c:	9b05      	ldr	r3, [sp, #20]
1001516e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10015170:	1a1d      	subs	r5, r3, r0
10015172:	2d00      	cmp	r5, #0
10015174:	f300 8268 	bgt.w	10015648 <_vfiprintf_r+0x870>
10015178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001517a:	f8c9 4000 	str.w	r4, [r9]
1001517e:	eb02 030c 	add.w	r3, r2, ip
10015182:	2907      	cmp	r1, #7
10015184:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
10015188:	f8c9 2004 	str.w	r2, [r9, #4]
1001518c:	f340 81fe 	ble.w	1001558c <_vfiprintf_r+0x7b4>
10015190:	2b00      	cmp	r3, #0
10015192:	f000 832c 	beq.w	100157ee <_vfiprintf_r+0xa16>
10015196:	9903      	ldr	r1, [sp, #12]
10015198:	aa1a      	add	r2, sp, #104	@ 0x68
1001519a:	4658      	mov	r0, fp
1001519c:	f7ff fdd4 	bl	10014d48 <__sprint_r.part.0>
100151a0:	2800      	cmp	r0, #0
100151a2:	f47f af71 	bne.w	10015088 <_vfiprintf_r+0x2b0>
100151a6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
100151a8:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100151ac:	9a02      	ldr	r2, [sp, #8]
100151ae:	0750      	lsls	r0, r2, #29
100151b0:	d505      	bpl.n	100151be <_vfiprintf_r+0x3e6>
100151b2:	9a08      	ldr	r2, [sp, #32]
100151b4:	9904      	ldr	r1, [sp, #16]
100151b6:	1a54      	subs	r4, r2, r1
100151b8:	2c00      	cmp	r4, #0
100151ba:	f300 8323 	bgt.w	10015804 <_vfiprintf_r+0xa2c>
100151be:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
100151c2:	9804      	ldr	r0, [sp, #16]
100151c4:	4281      	cmp	r1, r0
100151c6:	bfac      	ite	ge
100151c8:	1852      	addge	r2, r2, r1
100151ca:	1812      	addlt	r2, r2, r0
100151cc:	9207      	str	r2, [sp, #28]
100151ce:	2b00      	cmp	r3, #0
100151d0:	f47f af52 	bne.w	10015078 <_vfiprintf_r+0x2a0>
100151d4:	2300      	movs	r3, #0
100151d6:	931b      	str	r3, [sp, #108]	@ 0x6c
100151d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100151da:	b11b      	cbz	r3, 100151e4 <_vfiprintf_r+0x40c>
100151dc:	4619      	mov	r1, r3
100151de:	4658      	mov	r0, fp
100151e0:	f002 ffe8 	bl	100181b4 <_free_r>
100151e4:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100151e8:	e639      	b.n	10014e5e <_vfiprintf_r+0x86>
100151ea:	059a      	lsls	r2, r3, #22
100151ec:	f53f af5a 	bmi.w	100150a4 <_vfiprintf_r+0x2cc>
100151f0:	9c03      	ldr	r4, [sp, #12]
100151f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100151f4:	f001 fdd6 	bl	10016da4 <__retarget_lock_release_recursive>
100151f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100151fc:	e752      	b.n	100150a4 <_vfiprintf_r+0x2cc>
100151fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10015200:	9406      	str	r4, [sp, #24]
10015202:	f856 4b04 	ldr.w	r4, [r6], #4
10015206:	2300      	movs	r3, #0
10015208:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
1001520c:	2c00      	cmp	r4, #0
1001520e:	f000 84c9 	beq.w	10015ba4 <_vfiprintf_r+0xdcc>
10015212:	2a53      	cmp	r2, #83	@ 0x53
10015214:	f000 8422 	beq.w	10015a5c <_vfiprintf_r+0xc84>
10015218:	9b02      	ldr	r3, [sp, #8]
1001521a:	f013 0510 	ands.w	r5, r3, #16
1001521e:	f040 841d 	bne.w	10015a5c <_vfiprintf_r+0xc84>
10015222:	9b05      	ldr	r3, [sp, #20]
10015224:	1c5a      	adds	r2, r3, #1
10015226:	f000 854e 	beq.w	10015cc6 <_vfiprintf_r+0xeee>
1001522a:	461a      	mov	r2, r3
1001522c:	4629      	mov	r1, r5
1001522e:	4620      	mov	r0, r4
10015230:	f001 fdbe 	bl	10016db0 <memchr>
10015234:	900b      	str	r0, [sp, #44]	@ 0x2c
10015236:	2800      	cmp	r0, #0
10015238:	f000 853e 	beq.w	10015cb8 <_vfiprintf_r+0xee0>
1001523c:	1b03      	subs	r3, r0, r4
1001523e:	9309      	str	r3, [sp, #36]	@ 0x24
10015240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10015244:	9505      	str	r5, [sp, #20]
10015246:	960a      	str	r6, [sp, #40]	@ 0x28
10015248:	9304      	str	r3, [sp, #16]
1001524a:	950b      	str	r5, [sp, #44]	@ 0x2c
1001524c:	e18d      	b.n	1001556a <_vfiprintf_r+0x792>
1001524e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10015250:	9406      	str	r4, [sp, #24]
10015252:	2a43      	cmp	r2, #67	@ 0x43
10015254:	f103 0504 	add.w	r5, r3, #4
10015258:	d003      	beq.n	10015262 <_vfiprintf_r+0x48a>
1001525a:	9b02      	ldr	r3, [sp, #8]
1001525c:	06de      	lsls	r6, r3, #27
1001525e:	f140 83e5 	bpl.w	10015a2c <_vfiprintf_r+0xc54>
10015262:	2208      	movs	r2, #8
10015264:	2100      	movs	r1, #0
10015266:	a818      	add	r0, sp, #96	@ 0x60
10015268:	f001 fcb8 	bl	10016bdc <memset>
1001526c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001526e:	ac2d      	add	r4, sp, #180	@ 0xb4
10015270:	681a      	ldr	r2, [r3, #0]
10015272:	4621      	mov	r1, r4
10015274:	ab18      	add	r3, sp, #96	@ 0x60
10015276:	4658      	mov	r0, fp
10015278:	f001 ff0e 	bl	10017098 <_wcrtomb_r>
1001527c:	4603      	mov	r3, r0
1001527e:	3301      	adds	r3, #1
10015280:	9009      	str	r0, [sp, #36]	@ 0x24
10015282:	f000 8541 	beq.w	10015d08 <_vfiprintf_r+0xf30>
10015286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10015288:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1001528c:	9304      	str	r3, [sp, #16]
1001528e:	2300      	movs	r3, #0
10015290:	950a      	str	r5, [sp, #40]	@ 0x28
10015292:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10015296:	e718      	b.n	100150ca <_vfiprintf_r+0x2f2>
10015298:	9b02      	ldr	r3, [sp, #8]
1001529a:	9406      	str	r4, [sp, #24]
1001529c:	069c      	lsls	r4, r3, #26
1001529e:	d56d      	bpl.n	1001537c <_vfiprintf_r+0x5a4>
100152a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100152a2:	3307      	adds	r3, #7
100152a4:	f023 0307 	bic.w	r3, r3, #7
100152a8:	4619      	mov	r1, r3
100152aa:	685a      	ldr	r2, [r3, #4]
100152ac:	f851 3b08 	ldr.w	r3, [r1], #8
100152b0:	910a      	str	r1, [sp, #40]	@ 0x28
100152b2:	4611      	mov	r1, r2
100152b4:	2a00      	cmp	r2, #0
100152b6:	f2c0 8137 	blt.w	10015528 <_vfiprintf_r+0x750>
100152ba:	9a05      	ldr	r2, [sp, #20]
100152bc:	3201      	adds	r2, #1
100152be:	f000 8140 	beq.w	10015542 <_vfiprintf_r+0x76a>
100152c2:	9a02      	ldr	r2, [sp, #8]
100152c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
100152c8:	9202      	str	r2, [sp, #8]
100152ca:	ea53 0201 	orrs.w	r2, r3, r1
100152ce:	f040 8138 	bne.w	10015542 <_vfiprintf_r+0x76a>
100152d2:	9b05      	ldr	r3, [sp, #20]
100152d4:	2b00      	cmp	r3, #0
100152d6:	f040 8508 	bne.w	10015cea <_vfiprintf_r+0xf12>
100152da:	9304      	str	r3, [sp, #16]
100152dc:	9309      	str	r3, [sp, #36]	@ 0x24
100152de:	ac46      	add	r4, sp, #280	@ 0x118
100152e0:	e141      	b.n	10015566 <_vfiprintf_r+0x78e>
100152e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100152e4:	f853 2b04 	ldr.w	r2, [r3], #4
100152e8:	9208      	str	r2, [sp, #32]
100152ea:	2a00      	cmp	r2, #0
100152ec:	f280 8328 	bge.w	10015940 <_vfiprintf_r+0xb68>
100152f0:	9a08      	ldr	r2, [sp, #32]
100152f2:	930a      	str	r3, [sp, #40]	@ 0x28
100152f4:	4252      	negs	r2, r2
100152f6:	9208      	str	r2, [sp, #32]
100152f8:	9b02      	ldr	r3, [sp, #8]
100152fa:	7822      	ldrb	r2, [r4, #0]
100152fc:	f043 0304 	orr.w	r3, r3, #4
10015300:	9302      	str	r3, [sp, #8]
10015302:	e5d1      	b.n	10014ea8 <_vfiprintf_r+0xd0>
10015304:	9b02      	ldr	r3, [sp, #8]
10015306:	9406      	str	r4, [sp, #24]
10015308:	f043 0210 	orr.w	r2, r3, #16
1001530c:	f012 0120 	ands.w	r1, r2, #32
10015310:	f000 82e8 	beq.w	100158e4 <_vfiprintf_r+0xb0c>
10015314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10015316:	3307      	adds	r3, #7
10015318:	f023 0307 	bic.w	r3, r3, #7
1001531c:	4618      	mov	r0, r3
1001531e:	6859      	ldr	r1, [r3, #4]
10015320:	f850 3b08 	ldr.w	r3, [r0], #8
10015324:	900a      	str	r0, [sp, #40]	@ 0x28
10015326:	f422 6480 	bic.w	r4, r2, #1024	@ 0x400
1001532a:	9402      	str	r4, [sp, #8]
1001532c:	9c05      	ldr	r4, [sp, #20]
1001532e:	2000      	movs	r0, #0
10015330:	3401      	adds	r4, #1
10015332:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
10015336:	d05d      	beq.n	100153f4 <_vfiprintf_r+0x61c>
10015338:	ea53 0401 	orrs.w	r4, r3, r1
1001533c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
10015340:	f040 8414 	bne.w	10015b6c <_vfiprintf_r+0xd94>
10015344:	9c02      	ldr	r4, [sp, #8]
10015346:	9202      	str	r2, [sp, #8]
10015348:	9b05      	ldr	r3, [sp, #20]
1001534a:	2b00      	cmp	r3, #0
1001534c:	d14a      	bne.n	100153e4 <_vfiprintf_r+0x60c>
1001534e:	2800      	cmp	r0, #0
10015350:	f040 82f1 	bne.w	10015936 <_vfiprintf_r+0xb5e>
10015354:	f014 0201 	ands.w	r2, r4, #1
10015358:	9209      	str	r2, [sp, #36]	@ 0x24
1001535a:	f000 82f5 	beq.w	10015948 <_vfiprintf_r+0xb70>
1001535e:	2330      	movs	r3, #48	@ 0x30
10015360:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
10015364:	9204      	str	r2, [sp, #16]
10015366:	f20d 1417 	addw	r4, sp, #279	@ 0x117
1001536a:	e0fc      	b.n	10015566 <_vfiprintf_r+0x78e>
1001536c:	9b02      	ldr	r3, [sp, #8]
1001536e:	9406      	str	r4, [sp, #24]
10015370:	f043 0310 	orr.w	r3, r3, #16
10015374:	9302      	str	r3, [sp, #8]
10015376:	9b02      	ldr	r3, [sp, #8]
10015378:	069c      	lsls	r4, r3, #26
1001537a:	d491      	bmi.n	100152a0 <_vfiprintf_r+0x4c8>
1001537c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001537e:	f852 3b04 	ldr.w	r3, [r2], #4
10015382:	920a      	str	r2, [sp, #40]	@ 0x28
10015384:	9a02      	ldr	r2, [sp, #8]
10015386:	06d0      	lsls	r0, r2, #27
10015388:	f100 82f3 	bmi.w	10015972 <_vfiprintf_r+0xb9a>
1001538c:	9a02      	ldr	r2, [sp, #8]
1001538e:	0651      	lsls	r1, r2, #25
10015390:	f140 82eb 	bpl.w	1001596a <_vfiprintf_r+0xb92>
10015394:	f343 31c0 	sbfx	r1, r3, #15, #1
10015398:	460a      	mov	r2, r1
1001539a:	b21b      	sxth	r3, r3
1001539c:	e78a      	b.n	100152b4 <_vfiprintf_r+0x4dc>
1001539e:	9b02      	ldr	r3, [sp, #8]
100153a0:	9406      	str	r4, [sp, #24]
100153a2:	f043 0410 	orr.w	r4, r3, #16
100153a6:	f014 0120 	ands.w	r1, r4, #32
100153aa:	f000 828c 	beq.w	100158c6 <_vfiprintf_r+0xaee>
100153ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100153b0:	3307      	adds	r3, #7
100153b2:	f023 0307 	bic.w	r3, r3, #7
100153b6:	461a      	mov	r2, r3
100153b8:	6859      	ldr	r1, [r3, #4]
100153ba:	f852 3b08 	ldr.w	r3, [r2], #8
100153be:	920a      	str	r2, [sp, #40]	@ 0x28
100153c0:	2200      	movs	r2, #0
100153c2:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
100153c6:	9a05      	ldr	r2, [sp, #20]
100153c8:	3201      	adds	r2, #1
100153ca:	f000 83d1 	beq.w	10015b70 <_vfiprintf_r+0xd98>
100153ce:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
100153d2:	9202      	str	r2, [sp, #8]
100153d4:	ea53 0201 	orrs.w	r2, r3, r1
100153d8:	f040 80b3 	bne.w	10015542 <_vfiprintf_r+0x76a>
100153dc:	9b05      	ldr	r3, [sp, #20]
100153de:	2001      	movs	r0, #1
100153e0:	2b00      	cmp	r3, #0
100153e2:	d0b4      	beq.n	1001534e <_vfiprintf_r+0x576>
100153e4:	2801      	cmp	r0, #1
100153e6:	f000 8480 	beq.w	10015cea <_vfiprintf_r+0xf12>
100153ea:	2300      	movs	r3, #0
100153ec:	2802      	cmp	r0, #2
100153ee:	4619      	mov	r1, r3
100153f0:	f000 8199 	beq.w	10015726 <_vfiprintf_r+0x94e>
100153f4:	ac46      	add	r4, sp, #280	@ 0x118
100153f6:	f003 0207 	and.w	r2, r3, #7
100153fa:	08db      	lsrs	r3, r3, #3
100153fc:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
10015400:	08c9      	lsrs	r1, r1, #3
10015402:	3230      	adds	r2, #48	@ 0x30
10015404:	ea53 0501 	orrs.w	r5, r3, r1
10015408:	4620      	mov	r0, r4
1001540a:	f804 2d01 	strb.w	r2, [r4, #-1]!
1001540e:	d1f2      	bne.n	100153f6 <_vfiprintf_r+0x61e>
10015410:	9b02      	ldr	r3, [sp, #8]
10015412:	07dd      	lsls	r5, r3, #31
10015414:	f140 8195 	bpl.w	10015742 <_vfiprintf_r+0x96a>
10015418:	2a30      	cmp	r2, #48	@ 0x30
1001541a:	f000 8192 	beq.w	10015742 <_vfiprintf_r+0x96a>
1001541e:	2330      	movs	r3, #48	@ 0x30
10015420:	9a05      	ldr	r2, [sp, #20]
10015422:	f804 3c01 	strb.w	r3, [r4, #-1]
10015426:	3802      	subs	r0, #2
10015428:	ab46      	add	r3, sp, #280	@ 0x118
1001542a:	1a1b      	subs	r3, r3, r0
1001542c:	429a      	cmp	r2, r3
1001542e:	bfb8      	it	lt
10015430:	461a      	movlt	r2, r3
10015432:	9309      	str	r3, [sp, #36]	@ 0x24
10015434:	4604      	mov	r4, r0
10015436:	9204      	str	r2, [sp, #16]
10015438:	e095      	b.n	10015566 <_vfiprintf_r+0x78e>
1001543a:	7822      	ldrb	r2, [r4, #0]
1001543c:	9b02      	ldr	r3, [sp, #8]
1001543e:	2a68      	cmp	r2, #104	@ 0x68
10015440:	f000 839d 	beq.w	10015b7e <_vfiprintf_r+0xda6>
10015444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10015448:	9302      	str	r3, [sp, #8]
1001544a:	e52d      	b.n	10014ea8 <_vfiprintf_r+0xd0>
1001544c:	9b02      	ldr	r3, [sp, #8]
1001544e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10015450:	9406      	str	r4, [sp, #24]
10015452:	f043 0302 	orr.w	r3, r3, #2
10015456:	9302      	str	r3, [sp, #8]
10015458:	f852 3b04 	ldr.w	r3, [r2], #4
1001545c:	920a      	str	r2, [sp, #40]	@ 0x28
1001545e:	f647 0230 	movw	r2, #30768	@ 0x7830
10015462:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
10015466:	4abb      	ldr	r2, [pc, #748]	@ (10015754 <_vfiprintf_r+0x97c>)
10015468:	920d      	str	r2, [sp, #52]	@ 0x34
1001546a:	2100      	movs	r1, #0
1001546c:	2200      	movs	r2, #0
1001546e:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
10015472:	9a05      	ldr	r2, [sp, #20]
10015474:	3201      	adds	r2, #1
10015476:	f000 8156 	beq.w	10015726 <_vfiprintf_r+0x94e>
1001547a:	9c02      	ldr	r4, [sp, #8]
1001547c:	ea53 0001 	orrs.w	r0, r3, r1
10015480:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
10015484:	9202      	str	r2, [sp, #8]
10015486:	f040 814e 	bne.w	10015726 <_vfiprintf_r+0x94e>
1001548a:	2002      	movs	r0, #2
1001548c:	e75c      	b.n	10015348 <_vfiprintf_r+0x570>
1001548e:	9b02      	ldr	r3, [sp, #8]
10015490:	9406      	str	r4, [sp, #24]
10015492:	069b      	lsls	r3, r3, #26
10015494:	f140 827f 	bpl.w	10015996 <_vfiprintf_r+0xbbe>
10015498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001549a:	9a07      	ldr	r2, [sp, #28]
1001549c:	681b      	ldr	r3, [r3, #0]
1001549e:	601a      	str	r2, [r3, #0]
100154a0:	17d2      	asrs	r2, r2, #31
100154a2:	605a      	str	r2, [r3, #4]
100154a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100154a6:	3304      	adds	r3, #4
100154a8:	930a      	str	r3, [sp, #40]	@ 0x28
100154aa:	e4d8      	b.n	10014e5e <_vfiprintf_r+0x86>
100154ac:	9b02      	ldr	r3, [sp, #8]
100154ae:	7822      	ldrb	r2, [r4, #0]
100154b0:	f043 0301 	orr.w	r3, r3, #1
100154b4:	9302      	str	r3, [sp, #8]
100154b6:	e4f7      	b.n	10014ea8 <_vfiprintf_r+0xd0>
100154b8:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
100154bc:	7822      	ldrb	r2, [r4, #0]
100154be:	2b00      	cmp	r3, #0
100154c0:	f47f acf2 	bne.w	10014ea8 <_vfiprintf_r+0xd0>
100154c4:	2320      	movs	r3, #32
100154c6:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
100154ca:	e4ed      	b.n	10014ea8 <_vfiprintf_r+0xd0>
100154cc:	9b02      	ldr	r3, [sp, #8]
100154ce:	7822      	ldrb	r2, [r4, #0]
100154d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100154d4:	9302      	str	r3, [sp, #8]
100154d6:	e4e7      	b.n	10014ea8 <_vfiprintf_r+0xd0>
100154d8:	4621      	mov	r1, r4
100154da:	f811 2b01 	ldrb.w	r2, [r1], #1
100154de:	2a2a      	cmp	r2, #42	@ 0x2a
100154e0:	f000 8433 	beq.w	10015d4a <_vfiprintf_r+0xf72>
100154e4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
100154e8:	2b09      	cmp	r3, #9
100154ea:	460c      	mov	r4, r1
100154ec:	f200 83f6 	bhi.w	10015cdc <_vfiprintf_r+0xf04>
100154f0:	2200      	movs	r2, #0
100154f2:	4611      	mov	r1, r2
100154f4:	f814 2b01 	ldrb.w	r2, [r4], #1
100154f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
100154fc:	eb03 0141 	add.w	r1, r3, r1, lsl #1
10015500:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
10015504:	2b09      	cmp	r3, #9
10015506:	d9f5      	bls.n	100154f4 <_vfiprintf_r+0x71c>
10015508:	9105      	str	r1, [sp, #20]
1001550a:	e4ce      	b.n	10014eaa <_vfiprintf_r+0xd2>
1001550c:	232b      	movs	r3, #43	@ 0x2b
1001550e:	7822      	ldrb	r2, [r4, #0]
10015510:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10015514:	e4c8      	b.n	10014ea8 <_vfiprintf_r+0xd0>
10015516:	7822      	ldrb	r2, [r4, #0]
10015518:	9b02      	ldr	r3, [sp, #8]
1001551a:	2a6c      	cmp	r2, #108	@ 0x6c
1001551c:	f000 8336 	beq.w	10015b8c <_vfiprintf_r+0xdb4>
10015520:	f043 0310 	orr.w	r3, r3, #16
10015524:	9302      	str	r3, [sp, #8]
10015526:	e4bf      	b.n	10014ea8 <_vfiprintf_r+0xd0>
10015528:	222d      	movs	r2, #45	@ 0x2d
1001552a:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
1001552e:	9a05      	ldr	r2, [sp, #20]
10015530:	425b      	negs	r3, r3
10015532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10015536:	3201      	adds	r2, #1
10015538:	d003      	beq.n	10015542 <_vfiprintf_r+0x76a>
1001553a:	9a02      	ldr	r2, [sp, #8]
1001553c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
10015540:	9202      	str	r2, [sp, #8]
10015542:	2b0a      	cmp	r3, #10
10015544:	f171 0200 	sbcs.w	r2, r1, #0
10015548:	f080 82bd 	bcs.w	10015ac6 <_vfiprintf_r+0xcee>
1001554c:	3330      	adds	r3, #48	@ 0x30
1001554e:	b2db      	uxtb	r3, r3
10015550:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
10015554:	9b05      	ldr	r3, [sp, #20]
10015556:	2b01      	cmp	r3, #1
10015558:	bfb8      	it	lt
1001555a:	2301      	movlt	r3, #1
1001555c:	9304      	str	r3, [sp, #16]
1001555e:	2301      	movs	r3, #1
10015560:	9309      	str	r3, [sp, #36]	@ 0x24
10015562:	f20d 1417 	addw	r4, sp, #279	@ 0x117
10015566:	2300      	movs	r3, #0
10015568:	930b      	str	r3, [sp, #44]	@ 0x2c
1001556a:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
1001556e:	2b00      	cmp	r3, #0
10015570:	f43f adae 	beq.w	100150d0 <_vfiprintf_r+0x2f8>
10015574:	9b04      	ldr	r3, [sp, #16]
10015576:	3301      	adds	r3, #1
10015578:	9304      	str	r3, [sp, #16]
1001557a:	e5a9      	b.n	100150d0 <_vfiprintf_r+0x2f8>
1001557c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001557e:	941d      	str	r4, [sp, #116]	@ 0x74
10015580:	2201      	movs	r2, #1
10015582:	931e      	str	r3, [sp, #120]	@ 0x78
10015584:	931c      	str	r3, [sp, #112]	@ 0x70
10015586:	921b      	str	r2, [sp, #108]	@ 0x6c
10015588:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001558c:	f109 0908 	add.w	r9, r9, #8
10015590:	e60c      	b.n	100151ac <_vfiprintf_r+0x3d4>
10015592:	9b08      	ldr	r3, [sp, #32]
10015594:	9804      	ldr	r0, [sp, #16]
10015596:	1a1d      	subs	r5, r3, r0
10015598:	2d00      	cmp	r5, #0
1001559a:	f77f ade7 	ble.w	1001516c <_vfiprintf_r+0x394>
1001559e:	2d10      	cmp	r5, #16
100155a0:	f340 83cb 	ble.w	10015d3a <_vfiprintf_r+0xf62>
100155a4:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 1001575c <_vfiprintf_r+0x984>
100155a8:	4643      	mov	r3, r8
100155aa:	2610      	movs	r6, #16
100155ac:	46a0      	mov	r8, r4
100155ae:	4661      	mov	r1, ip
100155b0:	461c      	mov	r4, r3
100155b2:	e007      	b.n	100155c4 <_vfiprintf_r+0x7ec>
100155b4:	f102 0c02 	add.w	ip, r2, #2
100155b8:	f109 0908 	add.w	r9, r9, #8
100155bc:	4602      	mov	r2, r0
100155be:	3d10      	subs	r5, #16
100155c0:	2d10      	cmp	r5, #16
100155c2:	dd1a      	ble.n	100155fa <_vfiprintf_r+0x822>
100155c4:	1c50      	adds	r0, r2, #1
100155c6:	3110      	adds	r1, #16
100155c8:	2807      	cmp	r0, #7
100155ca:	e9c9 4600 	strd	r4, r6, [r9]
100155ce:	e9cd 011b 	strd	r0, r1, [sp, #108]	@ 0x6c
100155d2:	ddef      	ble.n	100155b4 <_vfiprintf_r+0x7dc>
100155d4:	aa1a      	add	r2, sp, #104	@ 0x68
100155d6:	2900      	cmp	r1, #0
100155d8:	d07c      	beq.n	100156d4 <_vfiprintf_r+0x8fc>
100155da:	9903      	ldr	r1, [sp, #12]
100155dc:	4658      	mov	r0, fp
100155de:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100155e2:	f7ff fbb1 	bl	10014d48 <__sprint_r.part.0>
100155e6:	2800      	cmp	r0, #0
100155e8:	f47f ad4e 	bne.w	10015088 <_vfiprintf_r+0x2b0>
100155ec:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
100155f0:	3d10      	subs	r5, #16
100155f2:	2d10      	cmp	r5, #16
100155f4:	f102 0c01 	add.w	ip, r2, #1
100155f8:	dce4      	bgt.n	100155c4 <_vfiprintf_r+0x7ec>
100155fa:	4623      	mov	r3, r4
100155fc:	4660      	mov	r0, ip
100155fe:	4644      	mov	r4, r8
10015600:	468c      	mov	ip, r1
10015602:	4698      	mov	r8, r3
10015604:	44ac      	add	ip, r5
10015606:	2807      	cmp	r0, #7
10015608:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	@ 0x6c
1001560c:	f8c9 8000 	str.w	r8, [r9]
10015610:	f8c9 5004 	str.w	r5, [r9, #4]
10015614:	f340 81a4 	ble.w	10015960 <_vfiprintf_r+0xb88>
10015618:	f1bc 0f00 	cmp.w	ip, #0
1001561c:	f000 8327 	beq.w	10015c6e <_vfiprintf_r+0xe96>
10015620:	9903      	ldr	r1, [sp, #12]
10015622:	aa1a      	add	r2, sp, #104	@ 0x68
10015624:	4658      	mov	r0, fp
10015626:	f7ff fb8f 	bl	10014d48 <__sprint_r.part.0>
1001562a:	2800      	cmp	r0, #0
1001562c:	f47f ad2c 	bne.w	10015088 <_vfiprintf_r+0x2b0>
10015630:	9b05      	ldr	r3, [sp, #20]
10015632:	9809      	ldr	r0, [sp, #36]	@ 0x24
10015634:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
10015638:	1a1d      	subs	r5, r3, r0
1001563a:	2d00      	cmp	r5, #0
1001563c:	f102 0101 	add.w	r1, r2, #1
10015640:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015644:	f77f ad98 	ble.w	10015178 <_vfiprintf_r+0x3a0>
10015648:	2d10      	cmp	r5, #16
1001564a:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 1001575c <_vfiprintf_r+0x984>
1001564e:	dd2d      	ble.n	100156ac <_vfiprintf_r+0x8d4>
10015650:	462b      	mov	r3, r5
10015652:	2610      	movs	r6, #16
10015654:	4625      	mov	r5, r4
10015656:	4660      	mov	r0, ip
10015658:	461c      	mov	r4, r3
1001565a:	e007      	b.n	1001566c <_vfiprintf_r+0x894>
1001565c:	f102 0c02 	add.w	ip, r2, #2
10015660:	f109 0908 	add.w	r9, r9, #8
10015664:	460a      	mov	r2, r1
10015666:	3c10      	subs	r4, #16
10015668:	2c10      	cmp	r4, #16
1001566a:	dd1a      	ble.n	100156a2 <_vfiprintf_r+0x8ca>
1001566c:	1c51      	adds	r1, r2, #1
1001566e:	4b3b      	ldr	r3, [pc, #236]	@ (1001575c <_vfiprintf_r+0x984>)
10015670:	3010      	adds	r0, #16
10015672:	2907      	cmp	r1, #7
10015674:	e9c9 3600 	strd	r3, r6, [r9]
10015678:	e9cd 101b 	strd	r1, r0, [sp, #108]	@ 0x6c
1001567c:	ddee      	ble.n	1001565c <_vfiprintf_r+0x884>
1001567e:	aa1a      	add	r2, sp, #104	@ 0x68
10015680:	b310      	cbz	r0, 100156c8 <_vfiprintf_r+0x8f0>
10015682:	9903      	ldr	r1, [sp, #12]
10015684:	4658      	mov	r0, fp
10015686:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001568a:	f7ff fb5d 	bl	10014d48 <__sprint_r.part.0>
1001568e:	2800      	cmp	r0, #0
10015690:	f47f acfa 	bne.w	10015088 <_vfiprintf_r+0x2b0>
10015694:	e9dd 201b 	ldrd	r2, r0, [sp, #108]	@ 0x6c
10015698:	3c10      	subs	r4, #16
1001569a:	2c10      	cmp	r4, #16
1001569c:	f102 0c01 	add.w	ip, r2, #1
100156a0:	dce4      	bgt.n	1001566c <_vfiprintf_r+0x894>
100156a2:	4623      	mov	r3, r4
100156a4:	4661      	mov	r1, ip
100156a6:	462c      	mov	r4, r5
100156a8:	4684      	mov	ip, r0
100156aa:	461d      	mov	r5, r3
100156ac:	44ac      	add	ip, r5
100156ae:	2907      	cmp	r1, #7
100156b0:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
100156b4:	f8c9 8000 	str.w	r8, [r9]
100156b8:	f8c9 5004 	str.w	r5, [r9, #4]
100156bc:	f300 80ed 	bgt.w	1001589a <_vfiprintf_r+0xac2>
100156c0:	f109 0908 	add.w	r9, r9, #8
100156c4:	3101      	adds	r1, #1
100156c6:	e557      	b.n	10015178 <_vfiprintf_r+0x3a0>
100156c8:	f04f 0c01 	mov.w	ip, #1
100156cc:	4602      	mov	r2, r0
100156ce:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100156d2:	e7c8      	b.n	10015666 <_vfiprintf_r+0x88e>
100156d4:	f04f 0c01 	mov.w	ip, #1
100156d8:	460a      	mov	r2, r1
100156da:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100156de:	e76e      	b.n	100155be <_vfiprintf_r+0x7e6>
100156e0:	f1bc 0f00 	cmp.w	ip, #0
100156e4:	d00f      	beq.n	10015706 <_vfiprintf_r+0x92e>
100156e6:	9903      	ldr	r1, [sp, #12]
100156e8:	9311      	str	r3, [sp, #68]	@ 0x44
100156ea:	aa1a      	add	r2, sp, #104	@ 0x68
100156ec:	4658      	mov	r0, fp
100156ee:	f7ff fb2b 	bl	10014d48 <__sprint_r.part.0>
100156f2:	2800      	cmp	r0, #0
100156f4:	f47f acc8 	bne.w	10015088 <_vfiprintf_r+0x2b0>
100156f8:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
100156fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100156fe:	1c51      	adds	r1, r2, #1
10015700:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015704:	e50f      	b.n	10015126 <_vfiprintf_r+0x34e>
10015706:	2b00      	cmp	r3, #0
10015708:	f000 8156 	beq.w	100159b8 <_vfiprintf_r+0xbe0>
1001570c:	2302      	movs	r3, #2
1001570e:	931e      	str	r3, [sp, #120]	@ 0x78
10015710:	469c      	mov	ip, r3
10015712:	ab13      	add	r3, sp, #76	@ 0x4c
10015714:	931d      	str	r3, [sp, #116]	@ 0x74
10015716:	2101      	movs	r1, #1
10015718:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001571c:	460a      	mov	r2, r1
1001571e:	f109 0908 	add.w	r9, r9, #8
10015722:	3101      	adds	r1, #1
10015724:	e51e      	b.n	10015164 <_vfiprintf_r+0x38c>
10015726:	980d      	ldr	r0, [sp, #52]	@ 0x34
10015728:	ac46      	add	r4, sp, #280	@ 0x118
1001572a:	f003 020f 	and.w	r2, r3, #15
1001572e:	091b      	lsrs	r3, r3, #4
10015730:	5c82      	ldrb	r2, [r0, r2]
10015732:	f804 2d01 	strb.w	r2, [r4, #-1]!
10015736:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
1001573a:	0909      	lsrs	r1, r1, #4
1001573c:	ea53 0201 	orrs.w	r2, r3, r1
10015740:	d1f3      	bne.n	1001572a <_vfiprintf_r+0x952>
10015742:	9a05      	ldr	r2, [sp, #20]
10015744:	ab46      	add	r3, sp, #280	@ 0x118
10015746:	1b1b      	subs	r3, r3, r4
10015748:	429a      	cmp	r2, r3
1001574a:	bfb8      	it	lt
1001574c:	461a      	movlt	r2, r3
1001574e:	9309      	str	r3, [sp, #36]	@ 0x24
10015750:	9204      	str	r2, [sp, #16]
10015752:	e708      	b.n	10015566 <_vfiprintf_r+0x78e>
10015754:	10023a48 	.word	0x10023a48
10015758:	20000494 	.word	0x20000494
1001575c:	10023a98 	.word	0x10023a98
10015760:	2d10      	cmp	r5, #16
10015762:	f340 82bf 	ble.w	10015ce4 <_vfiprintf_r+0xf0c>
10015766:	4eae      	ldr	r6, [pc, #696]	@ (10015a20 <_vfiprintf_r+0xc48>)
10015768:	9311      	str	r3, [sp, #68]	@ 0x44
1001576a:	4649      	mov	r1, r9
1001576c:	f04f 0810 	mov.w	r8, #16
10015770:	46a1      	mov	r9, r4
10015772:	4634      	mov	r4, r6
10015774:	4666      	mov	r6, ip
10015776:	e007      	b.n	10015788 <_vfiprintf_r+0x9b0>
10015778:	f102 0e02 	add.w	lr, r2, #2
1001577c:	3108      	adds	r1, #8
1001577e:	4602      	mov	r2, r0
10015780:	3d10      	subs	r5, #16
10015782:	2d10      	cmp	r5, #16
10015784:	dd18      	ble.n	100157b8 <_vfiprintf_r+0x9e0>
10015786:	1c50      	adds	r0, r2, #1
10015788:	3610      	adds	r6, #16
1001578a:	2807      	cmp	r0, #7
1001578c:	e9c1 4800 	strd	r4, r8, [r1]
10015790:	e9cd 061b 	strd	r0, r6, [sp, #108]	@ 0x6c
10015794:	ddf0      	ble.n	10015778 <_vfiprintf_r+0x9a0>
10015796:	9903      	ldr	r1, [sp, #12]
10015798:	aa1a      	add	r2, sp, #104	@ 0x68
1001579a:	4658      	mov	r0, fp
1001579c:	b316      	cbz	r6, 100157e4 <_vfiprintf_r+0xa0c>
1001579e:	f7ff fad3 	bl	10014d48 <__sprint_r.part.0>
100157a2:	2800      	cmp	r0, #0
100157a4:	f47f ac70 	bne.w	10015088 <_vfiprintf_r+0x2b0>
100157a8:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	@ 0x6c
100157ac:	3d10      	subs	r5, #16
100157ae:	2d10      	cmp	r5, #16
100157b0:	f102 0e01 	add.w	lr, r2, #1
100157b4:	a91d      	add	r1, sp, #116	@ 0x74
100157b6:	dce6      	bgt.n	10015786 <_vfiprintf_r+0x9ae>
100157b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100157ba:	46b4      	mov	ip, r6
100157bc:	4626      	mov	r6, r4
100157be:	464c      	mov	r4, r9
100157c0:	4689      	mov	r9, r1
100157c2:	44ac      	add	ip, r5
100157c4:	f1be 0f07 	cmp.w	lr, #7
100157c8:	e9cd ec1b 	strd	lr, ip, [sp, #108]	@ 0x6c
100157cc:	f8c9 6000 	str.w	r6, [r9]
100157d0:	f8c9 5004 	str.w	r5, [r9, #4]
100157d4:	f300 809a 	bgt.w	1001590c <_vfiprintf_r+0xb34>
100157d8:	f109 0908 	add.w	r9, r9, #8
100157dc:	f10e 0101 	add.w	r1, lr, #1
100157e0:	4672      	mov	r2, lr
100157e2:	e48b      	b.n	100150fc <_vfiprintf_r+0x324>
100157e4:	4632      	mov	r2, r6
100157e6:	f04f 0e01 	mov.w	lr, #1
100157ea:	a91d      	add	r1, sp, #116	@ 0x74
100157ec:	e7c8      	b.n	10015780 <_vfiprintf_r+0x9a8>
100157ee:	9a02      	ldr	r2, [sp, #8]
100157f0:	931b      	str	r3, [sp, #108]	@ 0x6c
100157f2:	0754      	lsls	r4, r2, #29
100157f4:	d548      	bpl.n	10015888 <_vfiprintf_r+0xab0>
100157f6:	9a08      	ldr	r2, [sp, #32]
100157f8:	9904      	ldr	r1, [sp, #16]
100157fa:	1a54      	subs	r4, r2, r1
100157fc:	2c00      	cmp	r4, #0
100157fe:	dd43      	ble.n	10015888 <_vfiprintf_r+0xab0>
10015800:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015804:	2c10      	cmp	r4, #16
10015806:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10015808:	f340 827b 	ble.w	10015d02 <_vfiprintf_r+0xf2a>
1001580c:	4e84      	ldr	r6, [pc, #528]	@ (10015a20 <_vfiprintf_r+0xc48>)
1001580e:	f8dd 800c 	ldr.w	r8, [sp, #12]
10015812:	2510      	movs	r5, #16
10015814:	e006      	b.n	10015824 <_vfiprintf_r+0xa4c>
10015816:	1c88      	adds	r0, r1, #2
10015818:	f109 0908 	add.w	r9, r9, #8
1001581c:	4611      	mov	r1, r2
1001581e:	3c10      	subs	r4, #16
10015820:	2c10      	cmp	r4, #16
10015822:	dd19      	ble.n	10015858 <_vfiprintf_r+0xa80>
10015824:	1c4a      	adds	r2, r1, #1
10015826:	3310      	adds	r3, #16
10015828:	2a07      	cmp	r2, #7
1001582a:	e9c9 6500 	strd	r6, r5, [r9]
1001582e:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
10015832:	ddf0      	ble.n	10015816 <_vfiprintf_r+0xa3e>
10015834:	aa1a      	add	r2, sp, #104	@ 0x68
10015836:	b313      	cbz	r3, 1001587e <_vfiprintf_r+0xaa6>
10015838:	4641      	mov	r1, r8
1001583a:	4658      	mov	r0, fp
1001583c:	f7ff fa84 	bl	10014d48 <__sprint_r.part.0>
10015840:	2800      	cmp	r0, #0
10015842:	f47f ac21 	bne.w	10015088 <_vfiprintf_r+0x2b0>
10015846:	e9dd 131b 	ldrd	r1, r3, [sp, #108]	@ 0x6c
1001584a:	3c10      	subs	r4, #16
1001584c:	2c10      	cmp	r4, #16
1001584e:	f101 0001 	add.w	r0, r1, #1
10015852:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015856:	dce5      	bgt.n	10015824 <_vfiprintf_r+0xa4c>
10015858:	4423      	add	r3, r4
1001585a:	2807      	cmp	r0, #7
1001585c:	e9c9 6400 	strd	r6, r4, [r9]
10015860:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
10015864:	f77f acab 	ble.w	100151be <_vfiprintf_r+0x3e6>
10015868:	b173      	cbz	r3, 10015888 <_vfiprintf_r+0xab0>
1001586a:	9903      	ldr	r1, [sp, #12]
1001586c:	aa1a      	add	r2, sp, #104	@ 0x68
1001586e:	4658      	mov	r0, fp
10015870:	f7ff fa6a 	bl	10014d48 <__sprint_r.part.0>
10015874:	2800      	cmp	r0, #0
10015876:	f47f ac07 	bne.w	10015088 <_vfiprintf_r+0x2b0>
1001587a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
1001587c:	e49f      	b.n	100151be <_vfiprintf_r+0x3e6>
1001587e:	2001      	movs	r0, #1
10015880:	4619      	mov	r1, r3
10015882:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015886:	e7ca      	b.n	1001581e <_vfiprintf_r+0xa46>
10015888:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
1001588c:	9904      	ldr	r1, [sp, #16]
1001588e:	428a      	cmp	r2, r1
10015890:	bfac      	ite	ge
10015892:	189b      	addge	r3, r3, r2
10015894:	185b      	addlt	r3, r3, r1
10015896:	9307      	str	r3, [sp, #28]
10015898:	e49c      	b.n	100151d4 <_vfiprintf_r+0x3fc>
1001589a:	f1bc 0f00 	cmp.w	ip, #0
1001589e:	f43f ae6d 	beq.w	1001557c <_vfiprintf_r+0x7a4>
100158a2:	9903      	ldr	r1, [sp, #12]
100158a4:	aa1a      	add	r2, sp, #104	@ 0x68
100158a6:	4658      	mov	r0, fp
100158a8:	f7ff fa4e 	bl	10014d48 <__sprint_r.part.0>
100158ac:	2800      	cmp	r0, #0
100158ae:	f47f abeb 	bne.w	10015088 <_vfiprintf_r+0x2b0>
100158b2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
100158b4:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
100158b8:	3101      	adds	r1, #1
100158ba:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100158be:	e45b      	b.n	10015178 <_vfiprintf_r+0x3a0>
100158c0:	921b      	str	r2, [sp, #108]	@ 0x6c
100158c2:	f7ff bbd6 	b.w	10015072 <_vfiprintf_r+0x29a>
100158c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100158c8:	f852 3b04 	ldr.w	r3, [r2], #4
100158cc:	920a      	str	r2, [sp, #40]	@ 0x28
100158ce:	f014 0210 	ands.w	r2, r4, #16
100158d2:	f47f ad75 	bne.w	100153c0 <_vfiprintf_r+0x5e8>
100158d6:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
100158da:	f000 816d 	beq.w	10015bb8 <_vfiprintf_r+0xde0>
100158de:	b29b      	uxth	r3, r3
100158e0:	4611      	mov	r1, r2
100158e2:	e56d      	b.n	100153c0 <_vfiprintf_r+0x5e8>
100158e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
100158e6:	f850 3b04 	ldr.w	r3, [r0], #4
100158ea:	900a      	str	r0, [sp, #40]	@ 0x28
100158ec:	f012 0010 	ands.w	r0, r2, #16
100158f0:	f47f ad19 	bne.w	10015326 <_vfiprintf_r+0x54e>
100158f4:	f012 0440 	ands.w	r4, r2, #64	@ 0x40
100158f8:	f000 8166 	beq.w	10015bc8 <_vfiprintf_r+0xdf0>
100158fc:	b29b      	uxth	r3, r3
100158fe:	4601      	mov	r1, r0
10015900:	e511      	b.n	10015326 <_vfiprintf_r+0x54e>
10015902:	2101      	movs	r1, #1
10015904:	4662      	mov	r2, ip
10015906:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001590a:	e42b      	b.n	10015164 <_vfiprintf_r+0x38c>
1001590c:	f1bc 0f00 	cmp.w	ip, #0
10015910:	f000 8095 	beq.w	10015a3e <_vfiprintf_r+0xc66>
10015914:	9903      	ldr	r1, [sp, #12]
10015916:	9311      	str	r3, [sp, #68]	@ 0x44
10015918:	aa1a      	add	r2, sp, #104	@ 0x68
1001591a:	4658      	mov	r0, fp
1001591c:	f7ff fa14 	bl	10014d48 <__sprint_r.part.0>
10015920:	2800      	cmp	r0, #0
10015922:	f47f abb1 	bne.w	10015088 <_vfiprintf_r+0x2b0>
10015926:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
1001592a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1001592c:	1c51      	adds	r1, r2, #1
1001592e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015932:	f7ff bbe3 	b.w	100150fc <_vfiprintf_r+0x324>
10015936:	9b05      	ldr	r3, [sp, #20]
10015938:	9304      	str	r3, [sp, #16]
1001593a:	9309      	str	r3, [sp, #36]	@ 0x24
1001593c:	ac46      	add	r4, sp, #280	@ 0x118
1001593e:	e612      	b.n	10015566 <_vfiprintf_r+0x78e>
10015940:	7822      	ldrb	r2, [r4, #0]
10015942:	930a      	str	r3, [sp, #40]	@ 0x28
10015944:	f7ff bab0 	b.w	10014ea8 <_vfiprintf_r+0xd0>
10015948:	9b05      	ldr	r3, [sp, #20]
1001594a:	9304      	str	r3, [sp, #16]
1001594c:	ac46      	add	r4, sp, #280	@ 0x118
1001594e:	e60a      	b.n	10015566 <_vfiprintf_r+0x78e>
10015950:	9d03      	ldr	r5, [sp, #12]
10015952:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10015954:	f001 fa24 	bl	10016da0 <__retarget_lock_acquire_recursive>
10015958:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
1001595c:	f7ff ba5b 	b.w	10014e16 <_vfiprintf_r+0x3e>
10015960:	f109 0908 	add.w	r9, r9, #8
10015964:	1c41      	adds	r1, r0, #1
10015966:	4602      	mov	r2, r0
10015968:	e400      	b.n	1001516c <_vfiprintf_r+0x394>
1001596a:	9a02      	ldr	r2, [sp, #8]
1001596c:	0592      	lsls	r2, r2, #22
1001596e:	f100 8184 	bmi.w	10015c7a <_vfiprintf_r+0xea2>
10015972:	17d9      	asrs	r1, r3, #31
10015974:	460a      	mov	r2, r1
10015976:	e49d      	b.n	100152b4 <_vfiprintf_r+0x4dc>
10015978:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001597a:	7822      	ldrb	r2, [r4, #0]
1001597c:	2b00      	cmp	r3, #0
1001597e:	f43f aa93 	beq.w	10014ea8 <_vfiprintf_r+0xd0>
10015982:	781b      	ldrb	r3, [r3, #0]
10015984:	2b00      	cmp	r3, #0
10015986:	f43f aa8f 	beq.w	10014ea8 <_vfiprintf_r+0xd0>
1001598a:	9b02      	ldr	r3, [sp, #8]
1001598c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10015990:	9302      	str	r3, [sp, #8]
10015992:	f7ff ba89 	b.w	10014ea8 <_vfiprintf_r+0xd0>
10015996:	9b02      	ldr	r3, [sp, #8]
10015998:	06de      	lsls	r6, r3, #27
1001599a:	f100 80fe 	bmi.w	10015b9a <_vfiprintf_r+0xdc2>
1001599e:	9b02      	ldr	r3, [sp, #8]
100159a0:	065d      	lsls	r5, r3, #25
100159a2:	f100 8176 	bmi.w	10015c92 <_vfiprintf_r+0xeba>
100159a6:	9b02      	ldr	r3, [sp, #8]
100159a8:	059c      	lsls	r4, r3, #22
100159aa:	f140 80f6 	bpl.w	10015b9a <_vfiprintf_r+0xdc2>
100159ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100159b0:	9a07      	ldr	r2, [sp, #28]
100159b2:	681b      	ldr	r3, [r3, #0]
100159b4:	701a      	strb	r2, [r3, #0]
100159b6:	e575      	b.n	100154a4 <_vfiprintf_r+0x6cc>
100159b8:	4662      	mov	r2, ip
100159ba:	2101      	movs	r1, #1
100159bc:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100159c0:	f7ff bbd0 	b.w	10015164 <_vfiprintf_r+0x38c>
100159c4:	9406      	str	r4, [sp, #24]
100159c6:	9c02      	ldr	r4, [sp, #8]
100159c8:	e4ed      	b.n	100153a6 <_vfiprintf_r+0x5ce>
100159ca:	9a02      	ldr	r2, [sp, #8]
100159cc:	9406      	str	r4, [sp, #24]
100159ce:	e49d      	b.n	1001530c <_vfiprintf_r+0x534>
100159d0:	4b14      	ldr	r3, [pc, #80]	@ (10015a24 <_vfiprintf_r+0xc4c>)
100159d2:	9406      	str	r4, [sp, #24]
100159d4:	930d      	str	r3, [sp, #52]	@ 0x34
100159d6:	9b02      	ldr	r3, [sp, #8]
100159d8:	f013 0120 	ands.w	r1, r3, #32
100159dc:	d063      	beq.n	10015aa6 <_vfiprintf_r+0xcce>
100159de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100159e0:	3307      	adds	r3, #7
100159e2:	f023 0307 	bic.w	r3, r3, #7
100159e6:	4618      	mov	r0, r3
100159e8:	6859      	ldr	r1, [r3, #4]
100159ea:	f850 3b08 	ldr.w	r3, [r0], #8
100159ee:	900a      	str	r0, [sp, #40]	@ 0x28
100159f0:	9c02      	ldr	r4, [sp, #8]
100159f2:	07e6      	lsls	r6, r4, #31
100159f4:	d50a      	bpl.n	10015a0c <_vfiprintf_r+0xc34>
100159f6:	ea53 0001 	orrs.w	r0, r3, r1
100159fa:	d007      	beq.n	10015a0c <_vfiprintf_r+0xc34>
100159fc:	f88d 204d 	strb.w	r2, [sp, #77]	@ 0x4d
10015a00:	f044 0202 	orr.w	r2, r4, #2
10015a04:	9202      	str	r2, [sp, #8]
10015a06:	2230      	movs	r2, #48	@ 0x30
10015a08:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
10015a0c:	9a02      	ldr	r2, [sp, #8]
10015a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
10015a12:	9202      	str	r2, [sp, #8]
10015a14:	e52a      	b.n	1001546c <_vfiprintf_r+0x694>
10015a16:	4b04      	ldr	r3, [pc, #16]	@ (10015a28 <_vfiprintf_r+0xc50>)
10015a18:	9406      	str	r4, [sp, #24]
10015a1a:	930d      	str	r3, [sp, #52]	@ 0x34
10015a1c:	e7db      	b.n	100159d6 <_vfiprintf_r+0xbfe>
10015a1e:	bf00      	nop
10015a20:	10023aa8 	.word	0x10023aa8
10015a24:	10023a5c 	.word	0x10023a5c
10015a28:	10023a48 	.word	0x10023a48
10015a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10015a2e:	681b      	ldr	r3, [r3, #0]
10015a30:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
10015a34:	2301      	movs	r3, #1
10015a36:	9304      	str	r3, [sp, #16]
10015a38:	9309      	str	r3, [sp, #36]	@ 0x24
10015a3a:	ac2d      	add	r4, sp, #180	@ 0xb4
10015a3c:	e427      	b.n	1001528e <_vfiprintf_r+0x4b6>
10015a3e:	f89d 204b 	ldrb.w	r2, [sp, #75]	@ 0x4b
10015a42:	2a00      	cmp	r2, #0
10015a44:	f000 811f 	beq.w	10015c86 <_vfiprintf_r+0xeae>
10015a48:	2101      	movs	r1, #1
10015a4a:	f10d 024b 	add.w	r2, sp, #75	@ 0x4b
10015a4e:	911e      	str	r1, [sp, #120]	@ 0x78
10015a50:	921d      	str	r2, [sp, #116]	@ 0x74
10015a52:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015a56:	468c      	mov	ip, r1
10015a58:	f7ff bb61 	b.w	1001511e <_vfiprintf_r+0x346>
10015a5c:	2208      	movs	r2, #8
10015a5e:	2100      	movs	r1, #0
10015a60:	a818      	add	r0, sp, #96	@ 0x60
10015a62:	9415      	str	r4, [sp, #84]	@ 0x54
10015a64:	f001 f8ba 	bl	10016bdc <memset>
10015a68:	9b05      	ldr	r3, [sp, #20]
10015a6a:	1c58      	adds	r0, r3, #1
10015a6c:	f000 80ba 	beq.w	10015be4 <_vfiprintf_r+0xe0c>
10015a70:	2500      	movs	r5, #0
10015a72:	9404      	str	r4, [sp, #16]
10015a74:	4698      	mov	r8, r3
10015a76:	462c      	mov	r4, r5
10015a78:	e00c      	b.n	10015a94 <_vfiprintf_r+0xcbc>
10015a7a:	a92d      	add	r1, sp, #180	@ 0xb4
10015a7c:	4658      	mov	r0, fp
10015a7e:	f001 fb0b 	bl	10017098 <_wcrtomb_r>
10015a82:	1c41      	adds	r1, r0, #1
10015a84:	4420      	add	r0, r4
10015a86:	f000 813f 	beq.w	10015d08 <_vfiprintf_r+0xf30>
10015a8a:	4540      	cmp	r0, r8
10015a8c:	dc08      	bgt.n	10015aa0 <_vfiprintf_r+0xcc8>
10015a8e:	f000 8158 	beq.w	10015d42 <_vfiprintf_r+0xf6a>
10015a92:	4604      	mov	r4, r0
10015a94:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10015a96:	5952      	ldr	r2, [r2, r5]
10015a98:	ab18      	add	r3, sp, #96	@ 0x60
10015a9a:	3504      	adds	r5, #4
10015a9c:	2a00      	cmp	r2, #0
10015a9e:	d1ec      	bne.n	10015a7a <_vfiprintf_r+0xca2>
10015aa0:	9409      	str	r4, [sp, #36]	@ 0x24
10015aa2:	9c04      	ldr	r4, [sp, #16]
10015aa4:	e0ac      	b.n	10015c00 <_vfiprintf_r+0xe28>
10015aa6:	980a      	ldr	r0, [sp, #40]	@ 0x28
10015aa8:	f850 3b04 	ldr.w	r3, [r0], #4
10015aac:	900a      	str	r0, [sp, #40]	@ 0x28
10015aae:	9802      	ldr	r0, [sp, #8]
10015ab0:	f010 0010 	ands.w	r0, r0, #16
10015ab4:	d19c      	bne.n	100159f0 <_vfiprintf_r+0xc18>
10015ab6:	9902      	ldr	r1, [sp, #8]
10015ab8:	f011 0440 	ands.w	r4, r1, #64	@ 0x40
10015abc:	f000 808b 	beq.w	10015bd6 <_vfiprintf_r+0xdfe>
10015ac0:	b29b      	uxth	r3, r3
10015ac2:	4601      	mov	r1, r0
10015ac4:	e794      	b.n	100159f0 <_vfiprintf_r+0xc18>
10015ac6:	9a02      	ldr	r2, [sp, #8]
10015ac8:	f8cd 9010 	str.w	r9, [sp, #16]
10015acc:	ac46      	add	r4, sp, #280	@ 0x118
10015ace:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
10015ad2:	46a1      	mov	r9, r4
10015ad4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
10015ad8:	4ea5      	ldr	r6, [pc, #660]	@ (10015d70 <_vfiprintf_r+0xf98>)
10015ada:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
10015ade:	f04f 0c00 	mov.w	ip, #0
10015ae2:	4614      	mov	r4, r2
10015ae4:	e005      	b.n	10015af2 <_vfiprintf_r+0xd1a>
10015ae6:	2b0a      	cmp	r3, #10
10015ae8:	f171 0100 	sbcs.w	r1, r1, #0
10015aec:	d336      	bcc.n	10015b5c <_vfiprintf_r+0xd84>
10015aee:	4643      	mov	r3, r8
10015af0:	4629      	mov	r1, r5
10015af2:	185a      	adds	r2, r3, r1
10015af4:	f142 0200 	adc.w	r2, r2, #0
10015af8:	fba6 0502 	umull	r0, r5, r6, r2
10015afc:	f025 0003 	bic.w	r0, r5, #3
10015b00:	eb00 0095 	add.w	r0, r0, r5, lsr #2
10015b04:	1a12      	subs	r2, r2, r0
10015b06:	1a98      	subs	r0, r3, r2
10015b08:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
10015b0c:	f161 0e00 	sbc.w	lr, r1, #0
10015b10:	fb05 f500 	mul.w	r5, r5, r0
10015b14:	fb06 550e 	mla	r5, r6, lr, r5
10015b18:	fba0 8006 	umull	r8, r0, r0, r6
10015b1c:	4405      	add	r5, r0
10015b1e:	f008 0e01 	and.w	lr, r8, #1
10015b22:	2005      	movs	r0, #5
10015b24:	fbae 0e00 	umull	r0, lr, lr, r0
10015b28:	1880      	adds	r0, r0, r2
10015b2a:	ea4f 0858 	mov.w	r8, r8, lsr #1
10015b2e:	3030      	adds	r0, #48	@ 0x30
10015b30:	f809 0c01 	strb.w	r0, [r9, #-1]
10015b34:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
10015b38:	f10c 0c01 	add.w	ip, ip, #1
10015b3c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
10015b40:	086d      	lsrs	r5, r5, #1
10015b42:	2c00      	cmp	r4, #0
10015b44:	d0cf      	beq.n	10015ae6 <_vfiprintf_r+0xd0e>
10015b46:	f89b 2000 	ldrb.w	r2, [fp]
10015b4a:	4562      	cmp	r2, ip
10015b4c:	d1cb      	bne.n	10015ae6 <_vfiprintf_r+0xd0e>
10015b4e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
10015b52:	d0c8      	beq.n	10015ae6 <_vfiprintf_r+0xd0e>
10015b54:	2b0a      	cmp	r3, #10
10015b56:	f171 0100 	sbcs.w	r1, r1, #0
10015b5a:	d272      	bcs.n	10015c42 <_vfiprintf_r+0xe6a>
10015b5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
10015b60:	464c      	mov	r4, r9
10015b62:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10015b66:	f8dd 9010 	ldr.w	r9, [sp, #16]
10015b6a:	e5ea      	b.n	10015742 <_vfiprintf_r+0x96a>
10015b6c:	9202      	str	r2, [sp, #8]
10015b6e:	e441      	b.n	100153f4 <_vfiprintf_r+0x61c>
10015b70:	9402      	str	r4, [sp, #8]
10015b72:	e4e6      	b.n	10015542 <_vfiprintf_r+0x76a>
10015b74:	4658      	mov	r0, fp
10015b76:	f000 fd15 	bl	100165a4 <__sinit>
10015b7a:	f7ff b943 	b.w	10014e04 <_vfiprintf_r+0x2c>
10015b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
10015b82:	7862      	ldrb	r2, [r4, #1]
10015b84:	9302      	str	r3, [sp, #8]
10015b86:	3401      	adds	r4, #1
10015b88:	f7ff b98e 	b.w	10014ea8 <_vfiprintf_r+0xd0>
10015b8c:	f043 0320 	orr.w	r3, r3, #32
10015b90:	7862      	ldrb	r2, [r4, #1]
10015b92:	9302      	str	r3, [sp, #8]
10015b94:	3401      	adds	r4, #1
10015b96:	f7ff b987 	b.w	10014ea8 <_vfiprintf_r+0xd0>
10015b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10015b9c:	9a07      	ldr	r2, [sp, #28]
10015b9e:	681b      	ldr	r3, [r3, #0]
10015ba0:	601a      	str	r2, [r3, #0]
10015ba2:	e47f      	b.n	100154a4 <_vfiprintf_r+0x6cc>
10015ba4:	9b05      	ldr	r3, [sp, #20]
10015ba6:	4c73      	ldr	r4, [pc, #460]	@ (10015d74 <_vfiprintf_r+0xf9c>)
10015ba8:	2b06      	cmp	r3, #6
10015baa:	bf28      	it	cs
10015bac:	2306      	movcs	r3, #6
10015bae:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
10015bb2:	9304      	str	r3, [sp, #16]
10015bb4:	f7ff ba89 	b.w	100150ca <_vfiprintf_r+0x2f2>
10015bb8:	f414 7100 	ands.w	r1, r4, #512	@ 0x200
10015bbc:	f43f ac00 	beq.w	100153c0 <_vfiprintf_r+0x5e8>
10015bc0:	b2db      	uxtb	r3, r3
10015bc2:	4601      	mov	r1, r0
10015bc4:	f7ff bbfc 	b.w	100153c0 <_vfiprintf_r+0x5e8>
10015bc8:	f412 7100 	ands.w	r1, r2, #512	@ 0x200
10015bcc:	bf1c      	itt	ne
10015bce:	b2db      	uxtbne	r3, r3
10015bd0:	4621      	movne	r1, r4
10015bd2:	f7ff bba8 	b.w	10015326 <_vfiprintf_r+0x54e>
10015bd6:	9902      	ldr	r1, [sp, #8]
10015bd8:	f411 7100 	ands.w	r1, r1, #512	@ 0x200
10015bdc:	bf1c      	itt	ne
10015bde:	b2db      	uxtbne	r3, r3
10015be0:	4621      	movne	r1, r4
10015be2:	e705      	b.n	100159f0 <_vfiprintf_r+0xc18>
10015be4:	ab18      	add	r3, sp, #96	@ 0x60
10015be6:	9300      	str	r3, [sp, #0]
10015be8:	2300      	movs	r3, #0
10015bea:	4619      	mov	r1, r3
10015bec:	aa15      	add	r2, sp, #84	@ 0x54
10015bee:	4658      	mov	r0, fp
10015bf0:	f001 fa78 	bl	100170e4 <_wcsrtombs_r>
10015bf4:	4603      	mov	r3, r0
10015bf6:	3301      	adds	r3, #1
10015bf8:	9009      	str	r0, [sp, #36]	@ 0x24
10015bfa:	f000 8085 	beq.w	10015d08 <_vfiprintf_r+0xf30>
10015bfe:	9415      	str	r4, [sp, #84]	@ 0x54
10015c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10015c02:	b373      	cbz	r3, 10015c62 <_vfiprintf_r+0xe8a>
10015c04:	2b63      	cmp	r3, #99	@ 0x63
10015c06:	dc49      	bgt.n	10015c9c <_vfiprintf_r+0xec4>
10015c08:	2300      	movs	r3, #0
10015c0a:	930b      	str	r3, [sp, #44]	@ 0x2c
10015c0c:	ac2d      	add	r4, sp, #180	@ 0xb4
10015c0e:	2208      	movs	r2, #8
10015c10:	2100      	movs	r1, #0
10015c12:	a818      	add	r0, sp, #96	@ 0x60
10015c14:	f000 ffe2 	bl	10016bdc <memset>
10015c18:	9d09      	ldr	r5, [sp, #36]	@ 0x24
10015c1a:	ab18      	add	r3, sp, #96	@ 0x60
10015c1c:	9300      	str	r3, [sp, #0]
10015c1e:	aa15      	add	r2, sp, #84	@ 0x54
10015c20:	462b      	mov	r3, r5
10015c22:	4621      	mov	r1, r4
10015c24:	4658      	mov	r0, fp
10015c26:	f001 fa5d 	bl	100170e4 <_wcsrtombs_r>
10015c2a:	4285      	cmp	r5, r0
10015c2c:	f040 8098 	bne.w	10015d60 <_vfiprintf_r+0xf88>
10015c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10015c32:	960a      	str	r6, [sp, #40]	@ 0x28
10015c34:	2300      	movs	r3, #0
10015c36:	54a3      	strb	r3, [r4, r2]
10015c38:	9305      	str	r3, [sp, #20]
10015c3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
10015c3e:	9304      	str	r3, [sp, #16]
10015c40:	e493      	b.n	1001556a <_vfiprintf_r+0x792>
10015c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10015c44:	9910      	ldr	r1, [sp, #64]	@ 0x40
10015c46:	eba9 0903 	sub.w	r9, r9, r3
10015c4a:	461a      	mov	r2, r3
10015c4c:	4648      	mov	r0, r9
10015c4e:	f001 f817 	bl	10016c80 <strncpy>
10015c52:	f89b 3001 	ldrb.w	r3, [fp, #1]
10015c56:	b10b      	cbz	r3, 10015c5c <_vfiprintf_r+0xe84>
10015c58:	f10b 0b01 	add.w	fp, fp, #1
10015c5c:	f04f 0c00 	mov.w	ip, #0
10015c60:	e745      	b.n	10015aee <_vfiprintf_r+0xd16>
10015c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10015c64:	960a      	str	r6, [sp, #40]	@ 0x28
10015c66:	e9cd 3304 	strd	r3, r3, [sp, #16]
10015c6a:	930b      	str	r3, [sp, #44]	@ 0x2c
10015c6c:	e47d      	b.n	1001556a <_vfiprintf_r+0x792>
10015c6e:	2101      	movs	r1, #1
10015c70:	4662      	mov	r2, ip
10015c72:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015c76:	f7ff ba79 	b.w	1001516c <_vfiprintf_r+0x394>
10015c7a:	f343 11c0 	sbfx	r1, r3, #7, #1
10015c7e:	460a      	mov	r2, r1
10015c80:	b25b      	sxtb	r3, r3
10015c82:	f7ff bb17 	b.w	100152b4 <_vfiprintf_r+0x4dc>
10015c86:	4662      	mov	r2, ip
10015c88:	2101      	movs	r1, #1
10015c8a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10015c8e:	f7ff ba4a 	b.w	10015126 <_vfiprintf_r+0x34e>
10015c92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10015c94:	9a07      	ldr	r2, [sp, #28]
10015c96:	681b      	ldr	r3, [r3, #0]
10015c98:	801a      	strh	r2, [r3, #0]
10015c9a:	e403      	b.n	100154a4 <_vfiprintf_r+0x6cc>
10015c9c:	1c59      	adds	r1, r3, #1
10015c9e:	4658      	mov	r0, fp
10015ca0:	f7fc ff1c 	bl	10012adc <_malloc_r>
10015ca4:	4604      	mov	r4, r0
10015ca6:	2800      	cmp	r0, #0
10015ca8:	d02e      	beq.n	10015d08 <_vfiprintf_r+0xf30>
10015caa:	900b      	str	r0, [sp, #44]	@ 0x2c
10015cac:	e7af      	b.n	10015c0e <_vfiprintf_r+0xe36>
10015cae:	6d88      	ldr	r0, [r1, #88]	@ 0x58
10015cb0:	f001 f878 	bl	10016da4 <__retarget_lock_release_recursive>
10015cb4:	f7ff b9a0 	b.w	10014ff8 <_vfiprintf_r+0x220>
10015cb8:	9b05      	ldr	r3, [sp, #20]
10015cba:	9304      	str	r3, [sp, #16]
10015cbc:	9309      	str	r3, [sp, #36]	@ 0x24
10015cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10015cc0:	960a      	str	r6, [sp, #40]	@ 0x28
10015cc2:	9305      	str	r3, [sp, #20]
10015cc4:	e451      	b.n	1001556a <_vfiprintf_r+0x792>
10015cc6:	4620      	mov	r0, r4
10015cc8:	9505      	str	r5, [sp, #20]
10015cca:	960a      	str	r6, [sp, #40]	@ 0x28
10015ccc:	f001 f978 	bl	10016fc0 <strlen>
10015cd0:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
10015cd4:	9009      	str	r0, [sp, #36]	@ 0x24
10015cd6:	9304      	str	r3, [sp, #16]
10015cd8:	950b      	str	r5, [sp, #44]	@ 0x2c
10015cda:	e446      	b.n	1001556a <_vfiprintf_r+0x792>
10015cdc:	2300      	movs	r3, #0
10015cde:	9305      	str	r3, [sp, #20]
10015ce0:	f7ff b8e3 	b.w	10014eaa <_vfiprintf_r+0xd2>
10015ce4:	4e24      	ldr	r6, [pc, #144]	@ (10015d78 <_vfiprintf_r+0xfa0>)
10015ce6:	4686      	mov	lr, r0
10015ce8:	e56b      	b.n	100157c2 <_vfiprintf_r+0x9ea>
10015cea:	2330      	movs	r3, #48	@ 0x30
10015cec:	e430      	b.n	10015550 <_vfiprintf_r+0x778>
10015cee:	9903      	ldr	r1, [sp, #12]
10015cf0:	aa1a      	add	r2, sp, #104	@ 0x68
10015cf2:	4658      	mov	r0, fp
10015cf4:	f7ff f828 	bl	10014d48 <__sprint_r.part.0>
10015cf8:	2800      	cmp	r0, #0
10015cfa:	f43f a9ab 	beq.w	10015054 <_vfiprintf_r+0x27c>
10015cfe:	f7ff b9c9 	b.w	10015094 <_vfiprintf_r+0x2bc>
10015d02:	4e1d      	ldr	r6, [pc, #116]	@ (10015d78 <_vfiprintf_r+0xfa0>)
10015d04:	1c48      	adds	r0, r1, #1
10015d06:	e5a7      	b.n	10015858 <_vfiprintf_r+0xa80>
10015d08:	9a03      	ldr	r2, [sp, #12]
10015d0a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
10015d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10015d12:	8193      	strh	r3, [r2, #12]
10015d14:	f7ff b9c1 	b.w	1001509a <_vfiprintf_r+0x2c2>
10015d18:	9b03      	ldr	r3, [sp, #12]
10015d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10015d1c:	07d9      	lsls	r1, r3, #31
10015d1e:	d407      	bmi.n	10015d30 <_vfiprintf_r+0xf58>
10015d20:	9b03      	ldr	r3, [sp, #12]
10015d22:	899b      	ldrh	r3, [r3, #12]
10015d24:	059a      	lsls	r2, r3, #22
10015d26:	d403      	bmi.n	10015d30 <_vfiprintf_r+0xf58>
10015d28:	9b03      	ldr	r3, [sp, #12]
10015d2a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
10015d2c:	f001 f83a 	bl	10016da4 <__retarget_lock_release_recursive>
10015d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10015d34:	9307      	str	r3, [sp, #28]
10015d36:	f7ff b9b8 	b.w	100150aa <_vfiprintf_r+0x2d2>
10015d3a:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 10015d7c <_vfiprintf_r+0xfa4>
10015d3e:	4608      	mov	r0, r1
10015d40:	e460      	b.n	10015604 <_vfiprintf_r+0x82c>
10015d42:	e9dd 4304 	ldrd	r4, r3, [sp, #16]
10015d46:	9309      	str	r3, [sp, #36]	@ 0x24
10015d48:	e75a      	b.n	10015c00 <_vfiprintf_r+0xe28>
10015d4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10015d4c:	7862      	ldrb	r2, [r4, #1]
10015d4e:	460c      	mov	r4, r1
10015d50:	f853 1b04 	ldr.w	r1, [r3], #4
10015d54:	930a      	str	r3, [sp, #40]	@ 0x28
10015d56:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
10015d5a:	9105      	str	r1, [sp, #20]
10015d5c:	f7ff b8a4 	b.w	10014ea8 <_vfiprintf_r+0xd0>
10015d60:	9a03      	ldr	r2, [sp, #12]
10015d62:	8993      	ldrh	r3, [r2, #12]
10015d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10015d68:	8193      	strh	r3, [r2, #12]
10015d6a:	f7ff b98d 	b.w	10015088 <_vfiprintf_r+0x2b0>
10015d6e:	bf00      	nop
10015d70:	cccccccd 	.word	0xcccccccd
10015d74:	10023a70 	.word	0x10023a70
10015d78:	10023aa8 	.word	0x10023aa8
10015d7c:	10023a98 	.word	0x10023a98

10015d80 <__sbprintf>:
10015d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10015d82:	461f      	mov	r7, r3
10015d84:	898b      	ldrh	r3, [r1, #12]
10015d86:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
10015d8a:	f023 0302 	bic.w	r3, r3, #2
10015d8e:	f8ad 300c 	strh.w	r3, [sp, #12]
10015d92:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10015d94:	9319      	str	r3, [sp, #100]	@ 0x64
10015d96:	89cb      	ldrh	r3, [r1, #14]
10015d98:	f8ad 300e 	strh.w	r3, [sp, #14]
10015d9c:	69cb      	ldr	r3, [r1, #28]
10015d9e:	9307      	str	r3, [sp, #28]
10015da0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
10015da2:	9309      	str	r3, [sp, #36]	@ 0x24
10015da4:	ab1a      	add	r3, sp, #104	@ 0x68
10015da6:	9300      	str	r3, [sp, #0]
10015da8:	9304      	str	r3, [sp, #16]
10015daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
10015dae:	4615      	mov	r5, r2
10015db0:	4606      	mov	r6, r0
10015db2:	9302      	str	r3, [sp, #8]
10015db4:	9305      	str	r3, [sp, #20]
10015db6:	a816      	add	r0, sp, #88	@ 0x58
10015db8:	2300      	movs	r3, #0
10015dba:	460c      	mov	r4, r1
10015dbc:	9306      	str	r3, [sp, #24]
10015dbe:	f000 ffeb 	bl	10016d98 <__retarget_lock_init_recursive>
10015dc2:	462a      	mov	r2, r5
10015dc4:	463b      	mov	r3, r7
10015dc6:	4669      	mov	r1, sp
10015dc8:	4630      	mov	r0, r6
10015dca:	f7ff f805 	bl	10014dd8 <_vfiprintf_r>
10015dce:	1e05      	subs	r5, r0, #0
10015dd0:	db07      	blt.n	10015de2 <__sbprintf+0x62>
10015dd2:	4669      	mov	r1, sp
10015dd4:	4630      	mov	r0, r6
10015dd6:	f000 fabd 	bl	10016354 <_fflush_r>
10015dda:	2800      	cmp	r0, #0
10015ddc:	bf18      	it	ne
10015dde:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10015de2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
10015de6:	065b      	lsls	r3, r3, #25
10015de8:	d503      	bpl.n	10015df2 <__sbprintf+0x72>
10015dea:	89a3      	ldrh	r3, [r4, #12]
10015dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10015df0:	81a3      	strh	r3, [r4, #12]
10015df2:	9816      	ldr	r0, [sp, #88]	@ 0x58
10015df4:	f000 ffd2 	bl	10016d9c <__retarget_lock_close_recursive>
10015df8:	4628      	mov	r0, r5
10015dfa:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
10015dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10015e00 <__malloc_lock>:
10015e00:	4801      	ldr	r0, [pc, #4]	@ (10015e08 <__malloc_lock+0x8>)
10015e02:	f000 bfcd 	b.w	10016da0 <__retarget_lock_acquire_recursive>
10015e06:	bf00      	nop
10015e08:	200016f4 	.word	0x200016f4

10015e0c <__malloc_unlock>:
10015e0c:	4801      	ldr	r0, [pc, #4]	@ (10015e14 <__malloc_unlock+0x8>)
10015e0e:	f000 bfc9 	b.w	10016da4 <__retarget_lock_release_recursive>
10015e12:	bf00      	nop
10015e14:	200016f4 	.word	0x200016f4

10015e18 <_puts_r>:
10015e18:	b570      	push	{r4, r5, r6, lr}
10015e1a:	4605      	mov	r5, r0
10015e1c:	b088      	sub	sp, #32
10015e1e:	4608      	mov	r0, r1
10015e20:	460c      	mov	r4, r1
10015e22:	f001 f8cd 	bl	10016fc0 <strlen>
10015e26:	4e21      	ldr	r6, [pc, #132]	@ (10015eac <_puts_r+0x94>)
10015e28:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
10015e2a:	9005      	str	r0, [sp, #20]
10015e2c:	2101      	movs	r1, #1
10015e2e:	1843      	adds	r3, r0, r1
10015e30:	e9cd 6106 	strd	r6, r1, [sp, #24]
10015e34:	a804      	add	r0, sp, #16
10015e36:	2102      	movs	r1, #2
10015e38:	9404      	str	r4, [sp, #16]
10015e3a:	9303      	str	r3, [sp, #12]
10015e3c:	68ac      	ldr	r4, [r5, #8]
10015e3e:	9001      	str	r0, [sp, #4]
10015e40:	9102      	str	r1, [sp, #8]
10015e42:	2a00      	cmp	r2, #0
10015e44:	d02e      	beq.n	10015ea4 <_puts_r+0x8c>
10015e46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10015e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10015e4c:	07d6      	lsls	r6, r2, #31
10015e4e:	d401      	bmi.n	10015e54 <_puts_r+0x3c>
10015e50:	0598      	lsls	r0, r3, #22
10015e52:	d521      	bpl.n	10015e98 <_puts_r+0x80>
10015e54:	0499      	lsls	r1, r3, #18
10015e56:	d406      	bmi.n	10015e66 <_puts_r+0x4e>
10015e58:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10015e5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
10015e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
10015e62:	81a3      	strh	r3, [r4, #12]
10015e64:	6662      	str	r2, [r4, #100]	@ 0x64
10015e66:	4628      	mov	r0, r5
10015e68:	aa01      	add	r2, sp, #4
10015e6a:	4621      	mov	r1, r4
10015e6c:	f000 fbc4 	bl	100165f8 <__sfvwrite_r>
10015e70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10015e72:	2800      	cmp	r0, #0
10015e74:	bf0c      	ite	eq
10015e76:	250a      	moveq	r5, #10
10015e78:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10015e7c:	07da      	lsls	r2, r3, #31
10015e7e:	d402      	bmi.n	10015e86 <_puts_r+0x6e>
10015e80:	89a3      	ldrh	r3, [r4, #12]
10015e82:	059b      	lsls	r3, r3, #22
10015e84:	d502      	bpl.n	10015e8c <_puts_r+0x74>
10015e86:	4628      	mov	r0, r5
10015e88:	b008      	add	sp, #32
10015e8a:	bd70      	pop	{r4, r5, r6, pc}
10015e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10015e8e:	f000 ff89 	bl	10016da4 <__retarget_lock_release_recursive>
10015e92:	4628      	mov	r0, r5
10015e94:	b008      	add	sp, #32
10015e96:	bd70      	pop	{r4, r5, r6, pc}
10015e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10015e9a:	f000 ff81 	bl	10016da0 <__retarget_lock_acquire_recursive>
10015e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10015ea2:	e7d7      	b.n	10015e54 <_puts_r+0x3c>
10015ea4:	4628      	mov	r0, r5
10015ea6:	f000 fb7d 	bl	100165a4 <__sinit>
10015eaa:	e7cc      	b.n	10015e46 <_puts_r+0x2e>
10015eac:	10023ab8 	.word	0x10023ab8

10015eb0 <puts>:
10015eb0:	4b02      	ldr	r3, [pc, #8]	@ (10015ebc <puts+0xc>)
10015eb2:	4601      	mov	r1, r0
10015eb4:	6818      	ldr	r0, [r3, #0]
10015eb6:	f7ff bfaf 	b.w	10015e18 <_puts_r>
10015eba:	bf00      	nop
10015ebc:	20000600 	.word	0x20000600

10015ec0 <realloc>:
10015ec0:	b410      	push	{r4}
10015ec2:	4c04      	ldr	r4, [pc, #16]	@ (10015ed4 <realloc+0x14>)
10015ec4:	4603      	mov	r3, r0
10015ec6:	460a      	mov	r2, r1
10015ec8:	6820      	ldr	r0, [r4, #0]
10015eca:	f85d 4b04 	ldr.w	r4, [sp], #4
10015ece:	4619      	mov	r1, r3
10015ed0:	f000 b802 	b.w	10015ed8 <_realloc_r>
10015ed4:	20000600 	.word	0x20000600

10015ed8 <_realloc_r>:
10015ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10015edc:	4616      	mov	r6, r2
10015ede:	2900      	cmp	r1, #0
10015ee0:	f000 8096 	beq.w	10016010 <_realloc_r+0x138>
10015ee4:	460c      	mov	r4, r1
10015ee6:	4680      	mov	r8, r0
10015ee8:	f106 050b 	add.w	r5, r6, #11
10015eec:	f7ff ff88 	bl	10015e00 <__malloc_lock>
10015ef0:	f854 1c04 	ldr.w	r1, [r4, #-4]
10015ef4:	2d16      	cmp	r5, #22
10015ef6:	f1a4 0908 	sub.w	r9, r4, #8
10015efa:	f021 0703 	bic.w	r7, r1, #3
10015efe:	d858      	bhi.n	10015fb2 <_realloc_r+0xda>
10015f00:	2510      	movs	r5, #16
10015f02:	42ae      	cmp	r6, r5
10015f04:	d858      	bhi.n	10015fb8 <_realloc_r+0xe0>
10015f06:	42af      	cmp	r7, r5
10015f08:	da60      	bge.n	10015fcc <_realloc_r+0xf4>
10015f0a:	4bbe      	ldr	r3, [pc, #760]	@ (10016204 <_realloc_r+0x32c>)
10015f0c:	689a      	ldr	r2, [r3, #8]
10015f0e:	eb09 0c07 	add.w	ip, r9, r7
10015f12:	4562      	cmp	r2, ip
10015f14:	f8dc 0004 	ldr.w	r0, [ip, #4]
10015f18:	f000 8090 	beq.w	1001603c <_realloc_r+0x164>
10015f1c:	f020 0301 	bic.w	r3, r0, #1
10015f20:	4463      	add	r3, ip
10015f22:	685b      	ldr	r3, [r3, #4]
10015f24:	07da      	lsls	r2, r3, #31
10015f26:	d468      	bmi.n	10015ffa <_realloc_r+0x122>
10015f28:	f020 0003 	bic.w	r0, r0, #3
10015f2c:	183b      	adds	r3, r7, r0
10015f2e:	429d      	cmp	r5, r3
10015f30:	dd47      	ble.n	10015fc2 <_realloc_r+0xea>
10015f32:	07cb      	lsls	r3, r1, #31
10015f34:	d412      	bmi.n	10015f5c <_realloc_r+0x84>
10015f36:	f854 3c08 	ldr.w	r3, [r4, #-8]
10015f3a:	eba9 0b03 	sub.w	fp, r9, r3
10015f3e:	f8db 3004 	ldr.w	r3, [fp, #4]
10015f42:	f023 0203 	bic.w	r2, r3, #3
10015f46:	4410      	add	r0, r2
10015f48:	eb00 0a07 	add.w	sl, r0, r7
10015f4c:	4555      	cmp	r5, sl
10015f4e:	f340 80f6 	ble.w	1001613e <_realloc_r+0x266>
10015f52:	eb07 0a02 	add.w	sl, r7, r2
10015f56:	4555      	cmp	r5, sl
10015f58:	f340 80cc 	ble.w	100160f4 <_realloc_r+0x21c>
10015f5c:	4631      	mov	r1, r6
10015f5e:	4640      	mov	r0, r8
10015f60:	f7fc fdbc 	bl	10012adc <_malloc_r>
10015f64:	4606      	mov	r6, r0
10015f66:	2800      	cmp	r0, #0
10015f68:	f000 8120 	beq.w	100161ac <_realloc_r+0x2d4>
10015f6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
10015f70:	f023 0301 	bic.w	r3, r3, #1
10015f74:	444b      	add	r3, r9
10015f76:	f1a0 0208 	sub.w	r2, r0, #8
10015f7a:	4293      	cmp	r3, r2
10015f7c:	f000 80b4 	beq.w	100160e8 <_realloc_r+0x210>
10015f80:	1f3a      	subs	r2, r7, #4
10015f82:	2a24      	cmp	r2, #36	@ 0x24
10015f84:	f200 80d7 	bhi.w	10016136 <_realloc_r+0x25e>
10015f88:	2a13      	cmp	r2, #19
10015f8a:	f200 80a2 	bhi.w	100160d2 <_realloc_r+0x1fa>
10015f8e:	4603      	mov	r3, r0
10015f90:	4622      	mov	r2, r4
10015f92:	6811      	ldr	r1, [r2, #0]
10015f94:	6019      	str	r1, [r3, #0]
10015f96:	6851      	ldr	r1, [r2, #4]
10015f98:	6059      	str	r1, [r3, #4]
10015f9a:	6892      	ldr	r2, [r2, #8]
10015f9c:	609a      	str	r2, [r3, #8]
10015f9e:	4621      	mov	r1, r4
10015fa0:	4640      	mov	r0, r8
10015fa2:	f002 f907 	bl	100181b4 <_free_r>
10015fa6:	4640      	mov	r0, r8
10015fa8:	f7ff ff30 	bl	10015e0c <__malloc_unlock>
10015fac:	4630      	mov	r0, r6
10015fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10015fb2:	f035 0507 	bics.w	r5, r5, #7
10015fb6:	d5a4      	bpl.n	10015f02 <_realloc_r+0x2a>
10015fb8:	230c      	movs	r3, #12
10015fba:	f8c8 3000 	str.w	r3, [r8]
10015fbe:	2600      	movs	r6, #0
10015fc0:	e018      	b.n	10015ff4 <_realloc_r+0x11c>
10015fc2:	461f      	mov	r7, r3
10015fc4:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
10015fc8:	60d3      	str	r3, [r2, #12]
10015fca:	609a      	str	r2, [r3, #8]
10015fcc:	f8d9 3004 	ldr.w	r3, [r9, #4]
10015fd0:	1b7a      	subs	r2, r7, r5
10015fd2:	2a0f      	cmp	r2, #15
10015fd4:	f003 0301 	and.w	r3, r3, #1
10015fd8:	eb09 0007 	add.w	r0, r9, r7
10015fdc:	d81d      	bhi.n	1001601a <_realloc_r+0x142>
10015fde:	433b      	orrs	r3, r7
10015fe0:	f8c9 3004 	str.w	r3, [r9, #4]
10015fe4:	6843      	ldr	r3, [r0, #4]
10015fe6:	f043 0301 	orr.w	r3, r3, #1
10015fea:	6043      	str	r3, [r0, #4]
10015fec:	4640      	mov	r0, r8
10015fee:	f7ff ff0d 	bl	10015e0c <__malloc_unlock>
10015ff2:	4626      	mov	r6, r4
10015ff4:	4630      	mov	r0, r6
10015ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10015ffa:	07c9      	lsls	r1, r1, #31
10015ffc:	d4ae      	bmi.n	10015f5c <_realloc_r+0x84>
10015ffe:	f854 3c08 	ldr.w	r3, [r4, #-8]
10016002:	eba9 0b03 	sub.w	fp, r9, r3
10016006:	f8db 3004 	ldr.w	r3, [fp, #4]
1001600a:	f023 0203 	bic.w	r2, r3, #3
1001600e:	e7a0      	b.n	10015f52 <_realloc_r+0x7a>
10016010:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10016014:	4611      	mov	r1, r2
10016016:	f7fc bd61 	b.w	10012adc <_malloc_r>
1001601a:	eb09 0105 	add.w	r1, r9, r5
1001601e:	432b      	orrs	r3, r5
10016020:	f042 0201 	orr.w	r2, r2, #1
10016024:	f8c9 3004 	str.w	r3, [r9, #4]
10016028:	604a      	str	r2, [r1, #4]
1001602a:	6843      	ldr	r3, [r0, #4]
1001602c:	f043 0301 	orr.w	r3, r3, #1
10016030:	6043      	str	r3, [r0, #4]
10016032:	3108      	adds	r1, #8
10016034:	4640      	mov	r0, r8
10016036:	f002 f8bd 	bl	100181b4 <_free_r>
1001603a:	e7d7      	b.n	10015fec <_realloc_r+0x114>
1001603c:	f020 0003 	bic.w	r0, r0, #3
10016040:	19c2      	adds	r2, r0, r7
10016042:	f105 0c10 	add.w	ip, r5, #16
10016046:	4562      	cmp	r2, ip
10016048:	f280 8091 	bge.w	1001616e <_realloc_r+0x296>
1001604c:	07ca      	lsls	r2, r1, #31
1001604e:	d485      	bmi.n	10015f5c <_realloc_r+0x84>
10016050:	f854 2c08 	ldr.w	r2, [r4, #-8]
10016054:	eba9 0b02 	sub.w	fp, r9, r2
10016058:	f8db 2004 	ldr.w	r2, [fp, #4]
1001605c:	f022 0203 	bic.w	r2, r2, #3
10016060:	4410      	add	r0, r2
10016062:	eb00 0a07 	add.w	sl, r0, r7
10016066:	45d4      	cmp	ip, sl
10016068:	f73f af73 	bgt.w	10015f52 <_realloc_r+0x7a>
1001606c:	465e      	mov	r6, fp
1001606e:	f8db 100c 	ldr.w	r1, [fp, #12]
10016072:	f856 0f08 	ldr.w	r0, [r6, #8]!
10016076:	1f3a      	subs	r2, r7, #4
10016078:	2a24      	cmp	r2, #36	@ 0x24
1001607a:	60c1      	str	r1, [r0, #12]
1001607c:	6088      	str	r0, [r1, #8]
1001607e:	f200 80ae 	bhi.w	100161de <_realloc_r+0x306>
10016082:	2a13      	cmp	r2, #19
10016084:	f240 80a9 	bls.w	100161da <_realloc_r+0x302>
10016088:	6821      	ldr	r1, [r4, #0]
1001608a:	f8cb 1008 	str.w	r1, [fp, #8]
1001608e:	6861      	ldr	r1, [r4, #4]
10016090:	f8cb 100c 	str.w	r1, [fp, #12]
10016094:	2a1b      	cmp	r2, #27
10016096:	f200 80a8 	bhi.w	100161ea <_realloc_r+0x312>
1001609a:	3408      	adds	r4, #8
1001609c:	f10b 0210 	add.w	r2, fp, #16
100160a0:	6821      	ldr	r1, [r4, #0]
100160a2:	6011      	str	r1, [r2, #0]
100160a4:	6861      	ldr	r1, [r4, #4]
100160a6:	6051      	str	r1, [r2, #4]
100160a8:	68a1      	ldr	r1, [r4, #8]
100160aa:	6091      	str	r1, [r2, #8]
100160ac:	eb0b 0105 	add.w	r1, fp, r5
100160b0:	ebaa 0205 	sub.w	r2, sl, r5
100160b4:	f042 0201 	orr.w	r2, r2, #1
100160b8:	6099      	str	r1, [r3, #8]
100160ba:	604a      	str	r2, [r1, #4]
100160bc:	f8db 3004 	ldr.w	r3, [fp, #4]
100160c0:	f003 0301 	and.w	r3, r3, #1
100160c4:	432b      	orrs	r3, r5
100160c6:	4640      	mov	r0, r8
100160c8:	f8cb 3004 	str.w	r3, [fp, #4]
100160cc:	f7ff fe9e 	bl	10015e0c <__malloc_unlock>
100160d0:	e790      	b.n	10015ff4 <_realloc_r+0x11c>
100160d2:	6823      	ldr	r3, [r4, #0]
100160d4:	6003      	str	r3, [r0, #0]
100160d6:	6863      	ldr	r3, [r4, #4]
100160d8:	6043      	str	r3, [r0, #4]
100160da:	2a1b      	cmp	r2, #27
100160dc:	d83c      	bhi.n	10016158 <_realloc_r+0x280>
100160de:	f104 0208 	add.w	r2, r4, #8
100160e2:	f100 0308 	add.w	r3, r0, #8
100160e6:	e754      	b.n	10015f92 <_realloc_r+0xba>
100160e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
100160ec:	f023 0303 	bic.w	r3, r3, #3
100160f0:	441f      	add	r7, r3
100160f2:	e76b      	b.n	10015fcc <_realloc_r+0xf4>
100160f4:	1f3a      	subs	r2, r7, #4
100160f6:	465e      	mov	r6, fp
100160f8:	f8db 300c 	ldr.w	r3, [fp, #12]
100160fc:	f856 1f08 	ldr.w	r1, [r6, #8]!
10016100:	2a24      	cmp	r2, #36	@ 0x24
10016102:	60cb      	str	r3, [r1, #12]
10016104:	6099      	str	r1, [r3, #8]
10016106:	d822      	bhi.n	1001614e <_realloc_r+0x276>
10016108:	2a13      	cmp	r2, #19
1001610a:	d91e      	bls.n	1001614a <_realloc_r+0x272>
1001610c:	6823      	ldr	r3, [r4, #0]
1001610e:	f8cb 3008 	str.w	r3, [fp, #8]
10016112:	6863      	ldr	r3, [r4, #4]
10016114:	f8cb 300c 	str.w	r3, [fp, #12]
10016118:	2a1b      	cmp	r2, #27
1001611a:	d83b      	bhi.n	10016194 <_realloc_r+0x2bc>
1001611c:	3408      	adds	r4, #8
1001611e:	f10b 0310 	add.w	r3, fp, #16
10016122:	6822      	ldr	r2, [r4, #0]
10016124:	601a      	str	r2, [r3, #0]
10016126:	6862      	ldr	r2, [r4, #4]
10016128:	605a      	str	r2, [r3, #4]
1001612a:	68a2      	ldr	r2, [r4, #8]
1001612c:	609a      	str	r2, [r3, #8]
1001612e:	4634      	mov	r4, r6
10016130:	4657      	mov	r7, sl
10016132:	46d9      	mov	r9, fp
10016134:	e74a      	b.n	10015fcc <_realloc_r+0xf4>
10016136:	4621      	mov	r1, r4
10016138:	f000 fcd0 	bl	10016adc <memmove>
1001613c:	e72f      	b.n	10015f9e <_realloc_r+0xc6>
1001613e:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
10016142:	1f3a      	subs	r2, r7, #4
10016144:	60cb      	str	r3, [r1, #12]
10016146:	6099      	str	r1, [r3, #8]
10016148:	e7d5      	b.n	100160f6 <_realloc_r+0x21e>
1001614a:	4633      	mov	r3, r6
1001614c:	e7e9      	b.n	10016122 <_realloc_r+0x24a>
1001614e:	4621      	mov	r1, r4
10016150:	4630      	mov	r0, r6
10016152:	f000 fcc3 	bl	10016adc <memmove>
10016156:	e7ea      	b.n	1001612e <_realloc_r+0x256>
10016158:	68a3      	ldr	r3, [r4, #8]
1001615a:	6083      	str	r3, [r0, #8]
1001615c:	68e3      	ldr	r3, [r4, #12]
1001615e:	60c3      	str	r3, [r0, #12]
10016160:	2a24      	cmp	r2, #36	@ 0x24
10016162:	d027      	beq.n	100161b4 <_realloc_r+0x2dc>
10016164:	f104 0210 	add.w	r2, r4, #16
10016168:	f100 0310 	add.w	r3, r0, #16
1001616c:	e711      	b.n	10015f92 <_realloc_r+0xba>
1001616e:	eb09 0105 	add.w	r1, r9, r5
10016172:	6099      	str	r1, [r3, #8]
10016174:	1b53      	subs	r3, r2, r5
10016176:	f043 0301 	orr.w	r3, r3, #1
1001617a:	604b      	str	r3, [r1, #4]
1001617c:	f854 3c04 	ldr.w	r3, [r4, #-4]
10016180:	f003 0301 	and.w	r3, r3, #1
10016184:	432b      	orrs	r3, r5
10016186:	4640      	mov	r0, r8
10016188:	f844 3c04 	str.w	r3, [r4, #-4]
1001618c:	f7ff fe3e 	bl	10015e0c <__malloc_unlock>
10016190:	4626      	mov	r6, r4
10016192:	e72f      	b.n	10015ff4 <_realloc_r+0x11c>
10016194:	68a3      	ldr	r3, [r4, #8]
10016196:	f8cb 3010 	str.w	r3, [fp, #16]
1001619a:	68e3      	ldr	r3, [r4, #12]
1001619c:	f8cb 3014 	str.w	r3, [fp, #20]
100161a0:	2a24      	cmp	r2, #36	@ 0x24
100161a2:	d010      	beq.n	100161c6 <_realloc_r+0x2ee>
100161a4:	3410      	adds	r4, #16
100161a6:	f10b 0318 	add.w	r3, fp, #24
100161aa:	e7ba      	b.n	10016122 <_realloc_r+0x24a>
100161ac:	4640      	mov	r0, r8
100161ae:	f7ff fe2d 	bl	10015e0c <__malloc_unlock>
100161b2:	e704      	b.n	10015fbe <_realloc_r+0xe6>
100161b4:	6923      	ldr	r3, [r4, #16]
100161b6:	6103      	str	r3, [r0, #16]
100161b8:	6961      	ldr	r1, [r4, #20]
100161ba:	6141      	str	r1, [r0, #20]
100161bc:	f104 0218 	add.w	r2, r4, #24
100161c0:	f100 0318 	add.w	r3, r0, #24
100161c4:	e6e5      	b.n	10015f92 <_realloc_r+0xba>
100161c6:	6923      	ldr	r3, [r4, #16]
100161c8:	f8cb 3018 	str.w	r3, [fp, #24]
100161cc:	6963      	ldr	r3, [r4, #20]
100161ce:	f8cb 301c 	str.w	r3, [fp, #28]
100161d2:	3418      	adds	r4, #24
100161d4:	f10b 0320 	add.w	r3, fp, #32
100161d8:	e7a3      	b.n	10016122 <_realloc_r+0x24a>
100161da:	4632      	mov	r2, r6
100161dc:	e760      	b.n	100160a0 <_realloc_r+0x1c8>
100161de:	4621      	mov	r1, r4
100161e0:	4630      	mov	r0, r6
100161e2:	f000 fc7b 	bl	10016adc <memmove>
100161e6:	4b07      	ldr	r3, [pc, #28]	@ (10016204 <_realloc_r+0x32c>)
100161e8:	e760      	b.n	100160ac <_realloc_r+0x1d4>
100161ea:	68a1      	ldr	r1, [r4, #8]
100161ec:	f8cb 1010 	str.w	r1, [fp, #16]
100161f0:	68e1      	ldr	r1, [r4, #12]
100161f2:	f8cb 1014 	str.w	r1, [fp, #20]
100161f6:	2a24      	cmp	r2, #36	@ 0x24
100161f8:	d006      	beq.n	10016208 <_realloc_r+0x330>
100161fa:	3410      	adds	r4, #16
100161fc:	f10b 0218 	add.w	r2, fp, #24
10016200:	e74e      	b.n	100160a0 <_realloc_r+0x1c8>
10016202:	bf00      	nop
10016204:	20000080 	.word	0x20000080
10016208:	6922      	ldr	r2, [r4, #16]
1001620a:	f8cb 2018 	str.w	r2, [fp, #24]
1001620e:	6962      	ldr	r2, [r4, #20]
10016210:	f8cb 201c 	str.w	r2, [fp, #28]
10016214:	3418      	adds	r4, #24
10016216:	f10b 0220 	add.w	r2, fp, #32
1001621a:	e741      	b.n	100160a0 <_realloc_r+0x1c8>

1001621c <__sflush_r>:
1001621c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10016220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10016224:	460c      	mov	r4, r1
10016226:	0711      	lsls	r1, r2, #28
10016228:	4680      	mov	r8, r0
1001622a:	d44b      	bmi.n	100162c4 <__sflush_r+0xa8>
1001622c:	6861      	ldr	r1, [r4, #4]
1001622e:	f442 6300 	orr.w	r3, r2, #2048	@ 0x800
10016232:	2900      	cmp	r1, #0
10016234:	81a3      	strh	r3, [r4, #12]
10016236:	dd60      	ble.n	100162fa <__sflush_r+0xde>
10016238:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
1001623a:	2d00      	cmp	r5, #0
1001623c:	d03f      	beq.n	100162be <__sflush_r+0xa2>
1001623e:	2100      	movs	r1, #0
10016240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
10016244:	f8d8 6000 	ldr.w	r6, [r8]
10016248:	f8c8 1000 	str.w	r1, [r8]
1001624c:	69e1      	ldr	r1, [r4, #28]
1001624e:	d161      	bne.n	10016314 <__sflush_r+0xf8>
10016250:	2301      	movs	r3, #1
10016252:	4640      	mov	r0, r8
10016254:	47a8      	blx	r5
10016256:	1c43      	adds	r3, r0, #1
10016258:	4602      	mov	r2, r0
1001625a:	d06b      	beq.n	10016334 <__sflush_r+0x118>
1001625c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10016260:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
10016262:	69e1      	ldr	r1, [r4, #28]
10016264:	075f      	lsls	r7, r3, #29
10016266:	d505      	bpl.n	10016274 <__sflush_r+0x58>
10016268:	6863      	ldr	r3, [r4, #4]
1001626a:	1ad2      	subs	r2, r2, r3
1001626c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
1001626e:	b10b      	cbz	r3, 10016274 <__sflush_r+0x58>
10016270:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
10016272:	1ad2      	subs	r2, r2, r3
10016274:	2300      	movs	r3, #0
10016276:	4640      	mov	r0, r8
10016278:	47a8      	blx	r5
1001627a:	1c45      	adds	r5, r0, #1
1001627c:	d14c      	bne.n	10016318 <__sflush_r+0xfc>
1001627e:	f8d8 1000 	ldr.w	r1, [r8]
10016282:	291d      	cmp	r1, #29
10016284:	d83d      	bhi.n	10016302 <__sflush_r+0xe6>
10016286:	4a32      	ldr	r2, [pc, #200]	@ (10016350 <__sflush_r+0x134>)
10016288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001628c:	410a      	asrs	r2, r1
1001628e:	f012 0201 	ands.w	r2, r2, #1
10016292:	d138      	bne.n	10016306 <__sflush_r+0xea>
10016294:	6062      	str	r2, [r4, #4]
10016296:	6922      	ldr	r2, [r4, #16]
10016298:	6022      	str	r2, [r4, #0]
1001629a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
1001629e:	81a2      	strh	r2, [r4, #12]
100162a0:	04da      	lsls	r2, r3, #19
100162a2:	d452      	bmi.n	1001634a <__sflush_r+0x12e>
100162a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
100162a6:	f8c8 6000 	str.w	r6, [r8]
100162aa:	b141      	cbz	r1, 100162be <__sflush_r+0xa2>
100162ac:	f104 0340 	add.w	r3, r4, #64	@ 0x40
100162b0:	4299      	cmp	r1, r3
100162b2:	d002      	beq.n	100162ba <__sflush_r+0x9e>
100162b4:	4640      	mov	r0, r8
100162b6:	f001 ff7d 	bl	100181b4 <_free_r>
100162ba:	2300      	movs	r3, #0
100162bc:	6323      	str	r3, [r4, #48]	@ 0x30
100162be:	2000      	movs	r0, #0
100162c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
100162c4:	6926      	ldr	r6, [r4, #16]
100162c6:	2e00      	cmp	r6, #0
100162c8:	d0f9      	beq.n	100162be <__sflush_r+0xa2>
100162ca:	6825      	ldr	r5, [r4, #0]
100162cc:	6026      	str	r6, [r4, #0]
100162ce:	0791      	lsls	r1, r2, #30
100162d0:	bf0c      	ite	eq
100162d2:	6963      	ldreq	r3, [r4, #20]
100162d4:	2300      	movne	r3, #0
100162d6:	1bad      	subs	r5, r5, r6
100162d8:	60a3      	str	r3, [r4, #8]
100162da:	e00b      	b.n	100162f4 <__sflush_r+0xd8>
100162dc:	462b      	mov	r3, r5
100162de:	4632      	mov	r2, r6
100162e0:	69e1      	ldr	r1, [r4, #28]
100162e2:	6a67      	ldr	r7, [r4, #36]	@ 0x24
100162e4:	4640      	mov	r0, r8
100162e6:	47b8      	blx	r7
100162e8:	f1b0 0c00 	subs.w	ip, r0, #0
100162ec:	eba5 050c 	sub.w	r5, r5, ip
100162f0:	4466      	add	r6, ip
100162f2:	dd06      	ble.n	10016302 <__sflush_r+0xe6>
100162f4:	2d00      	cmp	r5, #0
100162f6:	dcf1      	bgt.n	100162dc <__sflush_r+0xc0>
100162f8:	e7e1      	b.n	100162be <__sflush_r+0xa2>
100162fa:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
100162fc:	2900      	cmp	r1, #0
100162fe:	dc9b      	bgt.n	10016238 <__sflush_r+0x1c>
10016300:	e7dd      	b.n	100162be <__sflush_r+0xa2>
10016302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10016306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001630a:	81a3      	strh	r3, [r4, #12]
1001630c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10016310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10016314:	6d22      	ldr	r2, [r4, #80]	@ 0x50
10016316:	e7a5      	b.n	10016264 <__sflush_r+0x48>
10016318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001631c:	6922      	ldr	r2, [r4, #16]
1001631e:	6022      	str	r2, [r4, #0]
10016320:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
10016324:	81a2      	strh	r2, [r4, #12]
10016326:	04db      	lsls	r3, r3, #19
10016328:	f04f 0200 	mov.w	r2, #0
1001632c:	6062      	str	r2, [r4, #4]
1001632e:	d5b9      	bpl.n	100162a4 <__sflush_r+0x88>
10016330:	6520      	str	r0, [r4, #80]	@ 0x50
10016332:	e7b7      	b.n	100162a4 <__sflush_r+0x88>
10016334:	f8d8 3000 	ldr.w	r3, [r8]
10016338:	2b00      	cmp	r3, #0
1001633a:	d08f      	beq.n	1001625c <__sflush_r+0x40>
1001633c:	2b1d      	cmp	r3, #29
1001633e:	d001      	beq.n	10016344 <__sflush_r+0x128>
10016340:	2b16      	cmp	r3, #22
10016342:	d1de      	bne.n	10016302 <__sflush_r+0xe6>
10016344:	f8c8 6000 	str.w	r6, [r8]
10016348:	e7b9      	b.n	100162be <__sflush_r+0xa2>
1001634a:	2900      	cmp	r1, #0
1001634c:	d1aa      	bne.n	100162a4 <__sflush_r+0x88>
1001634e:	e7ef      	b.n	10016330 <__sflush_r+0x114>
10016350:	dfbffffe 	.word	0xdfbffffe

10016354 <_fflush_r>:
10016354:	b538      	push	{r3, r4, r5, lr}
10016356:	460c      	mov	r4, r1
10016358:	4605      	mov	r5, r0
1001635a:	b108      	cbz	r0, 10016360 <_fflush_r+0xc>
1001635c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001635e:	b303      	cbz	r3, 100163a2 <_fflush_r+0x4e>
10016360:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
10016364:	b188      	cbz	r0, 1001638a <_fflush_r+0x36>
10016366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10016368:	07db      	lsls	r3, r3, #31
1001636a:	d401      	bmi.n	10016370 <_fflush_r+0x1c>
1001636c:	0581      	lsls	r1, r0, #22
1001636e:	d50f      	bpl.n	10016390 <_fflush_r+0x3c>
10016370:	4628      	mov	r0, r5
10016372:	4621      	mov	r1, r4
10016374:	f7ff ff52 	bl	1001621c <__sflush_r>
10016378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001637a:	07da      	lsls	r2, r3, #31
1001637c:	4605      	mov	r5, r0
1001637e:	d402      	bmi.n	10016386 <_fflush_r+0x32>
10016380:	89a3      	ldrh	r3, [r4, #12]
10016382:	059b      	lsls	r3, r3, #22
10016384:	d508      	bpl.n	10016398 <_fflush_r+0x44>
10016386:	4628      	mov	r0, r5
10016388:	bd38      	pop	{r3, r4, r5, pc}
1001638a:	4605      	mov	r5, r0
1001638c:	4628      	mov	r0, r5
1001638e:	bd38      	pop	{r3, r4, r5, pc}
10016390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10016392:	f000 fd05 	bl	10016da0 <__retarget_lock_acquire_recursive>
10016396:	e7eb      	b.n	10016370 <_fflush_r+0x1c>
10016398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001639a:	f000 fd03 	bl	10016da4 <__retarget_lock_release_recursive>
1001639e:	4628      	mov	r0, r5
100163a0:	bd38      	pop	{r3, r4, r5, pc}
100163a2:	f000 f8ff 	bl	100165a4 <__sinit>
100163a6:	e7db      	b.n	10016360 <_fflush_r+0xc>

100163a8 <fflush>:
100163a8:	b350      	cbz	r0, 10016400 <fflush+0x58>
100163aa:	b538      	push	{r3, r4, r5, lr}
100163ac:	4b17      	ldr	r3, [pc, #92]	@ (1001640c <fflush+0x64>)
100163ae:	681d      	ldr	r5, [r3, #0]
100163b0:	4604      	mov	r4, r0
100163b2:	b10d      	cbz	r5, 100163b8 <fflush+0x10>
100163b4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
100163b6:	b1bb      	cbz	r3, 100163e8 <fflush+0x40>
100163b8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
100163bc:	b188      	cbz	r0, 100163e2 <fflush+0x3a>
100163be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100163c0:	07db      	lsls	r3, r3, #31
100163c2:	d401      	bmi.n	100163c8 <fflush+0x20>
100163c4:	0581      	lsls	r1, r0, #22
100163c6:	d513      	bpl.n	100163f0 <fflush+0x48>
100163c8:	4628      	mov	r0, r5
100163ca:	4621      	mov	r1, r4
100163cc:	f7ff ff26 	bl	1001621c <__sflush_r>
100163d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100163d2:	07da      	lsls	r2, r3, #31
100163d4:	4605      	mov	r5, r0
100163d6:	d402      	bmi.n	100163de <fflush+0x36>
100163d8:	89a3      	ldrh	r3, [r4, #12]
100163da:	059b      	lsls	r3, r3, #22
100163dc:	d50c      	bpl.n	100163f8 <fflush+0x50>
100163de:	4628      	mov	r0, r5
100163e0:	bd38      	pop	{r3, r4, r5, pc}
100163e2:	4605      	mov	r5, r0
100163e4:	4628      	mov	r0, r5
100163e6:	bd38      	pop	{r3, r4, r5, pc}
100163e8:	4628      	mov	r0, r5
100163ea:	f000 f8db 	bl	100165a4 <__sinit>
100163ee:	e7e3      	b.n	100163b8 <fflush+0x10>
100163f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100163f2:	f000 fcd5 	bl	10016da0 <__retarget_lock_acquire_recursive>
100163f6:	e7e7      	b.n	100163c8 <fflush+0x20>
100163f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100163fa:	f000 fcd3 	bl	10016da4 <__retarget_lock_release_recursive>
100163fe:	e7ee      	b.n	100163de <fflush+0x36>
10016400:	4a03      	ldr	r2, [pc, #12]	@ (10016410 <fflush+0x68>)
10016402:	4904      	ldr	r1, [pc, #16]	@ (10016414 <fflush+0x6c>)
10016404:	4804      	ldr	r0, [pc, #16]	@ (10016418 <fflush+0x70>)
10016406:	f000 ba77 	b.w	100168f8 <_fwalk_sglue>
1001640a:	bf00      	nop
1001640c:	20000600 	.word	0x20000600
10016410:	20000488 	.word	0x20000488
10016414:	10016355 	.word	0x10016355
10016418:	20000608 	.word	0x20000608

1001641c <sprintf>:
1001641c:	b40e      	push	{r1, r2, r3}
1001641e:	b510      	push	{r4, lr}
10016420:	b09d      	sub	sp, #116	@ 0x74
10016422:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
10016426:	ab1f      	add	r3, sp, #124	@ 0x7c
10016428:	9104      	str	r1, [sp, #16]
1001642a:	9107      	str	r1, [sp, #28]
1001642c:	4909      	ldr	r1, [pc, #36]	@ (10016454 <sprintf+0x38>)
1001642e:	f853 2b04 	ldr.w	r2, [r3], #4
10016432:	9002      	str	r0, [sp, #8]
10016434:	9006      	str	r0, [sp, #24]
10016436:	4c08      	ldr	r4, [pc, #32]	@ (10016458 <sprintf+0x3c>)
10016438:	6808      	ldr	r0, [r1, #0]
1001643a:	9301      	str	r3, [sp, #4]
1001643c:	a902      	add	r1, sp, #8
1001643e:	9405      	str	r4, [sp, #20]
10016440:	f001 ffce 	bl	100183e0 <_svfprintf_r>
10016444:	9b02      	ldr	r3, [sp, #8]
10016446:	2200      	movs	r2, #0
10016448:	701a      	strb	r2, [r3, #0]
1001644a:	b01d      	add	sp, #116	@ 0x74
1001644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10016450:	b003      	add	sp, #12
10016452:	4770      	bx	lr
10016454:	20000600 	.word	0x20000600
10016458:	ffff0208 	.word	0xffff0208

1001645c <stdio_exit_handler>:
1001645c:	4a02      	ldr	r2, [pc, #8]	@ (10016468 <stdio_exit_handler+0xc>)
1001645e:	4903      	ldr	r1, [pc, #12]	@ (1001646c <stdio_exit_handler+0x10>)
10016460:	4803      	ldr	r0, [pc, #12]	@ (10016470 <stdio_exit_handler+0x14>)
10016462:	f000 ba49 	b.w	100168f8 <_fwalk_sglue>
10016466:	bf00      	nop
10016468:	20000488 	.word	0x20000488
1001646c:	1001a7d1 	.word	0x1001a7d1
10016470:	20000608 	.word	0x20000608

10016474 <cleanup_stdio>:
10016474:	4b0c      	ldr	r3, [pc, #48]	@ (100164a8 <cleanup_stdio+0x34>)
10016476:	6841      	ldr	r1, [r0, #4]
10016478:	4299      	cmp	r1, r3
1001647a:	b510      	push	{r4, lr}
1001647c:	4604      	mov	r4, r0
1001647e:	d001      	beq.n	10016484 <cleanup_stdio+0x10>
10016480:	f004 f9a6 	bl	1001a7d0 <_fclose_r>
10016484:	68a1      	ldr	r1, [r4, #8]
10016486:	4b09      	ldr	r3, [pc, #36]	@ (100164ac <cleanup_stdio+0x38>)
10016488:	4299      	cmp	r1, r3
1001648a:	d002      	beq.n	10016492 <cleanup_stdio+0x1e>
1001648c:	4620      	mov	r0, r4
1001648e:	f004 f99f 	bl	1001a7d0 <_fclose_r>
10016492:	68e1      	ldr	r1, [r4, #12]
10016494:	4b06      	ldr	r3, [pc, #24]	@ (100164b0 <cleanup_stdio+0x3c>)
10016496:	4299      	cmp	r1, r3
10016498:	d004      	beq.n	100164a4 <cleanup_stdio+0x30>
1001649a:	4620      	mov	r0, r4
1001649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100164a0:	f004 b996 	b.w	1001a7d0 <_fclose_r>
100164a4:	bd10      	pop	{r4, pc}
100164a6:	bf00      	nop
100164a8:	200015b8 	.word	0x200015b8
100164ac:	20001620 	.word	0x20001620
100164b0:	20001688 	.word	0x20001688

100164b4 <global_stdio_init.part.0>:
100164b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100164b8:	4c31      	ldr	r4, [pc, #196]	@ (10016580 <global_stdio_init.part.0+0xcc>)
100164ba:	4b32      	ldr	r3, [pc, #200]	@ (10016584 <global_stdio_init.part.0+0xd0>)
100164bc:	4832      	ldr	r0, [pc, #200]	@ (10016588 <global_stdio_init.part.0+0xd4>)
100164be:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 1001659c <global_stdio_init.part.0+0xe8>
100164c2:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 100165a0 <global_stdio_init.part.0+0xec>
100164c6:	4f31      	ldr	r7, [pc, #196]	@ (1001658c <global_stdio_init.part.0+0xd8>)
100164c8:	6018      	str	r0, [r3, #0]
100164ca:	2500      	movs	r5, #0
100164cc:	4629      	mov	r1, r5
100164ce:	2304      	movs	r3, #4
100164d0:	2208      	movs	r2, #8
100164d2:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
100164d6:	4e2e      	ldr	r6, [pc, #184]	@ (10016590 <global_stdio_init.part.0+0xdc>)
100164d8:	60e3      	str	r3, [r4, #12]
100164da:	e9c4 5500 	strd	r5, r5, [r4]
100164de:	e9c4 5504 	strd	r5, r5, [r4, #16]
100164e2:	60a5      	str	r5, [r4, #8]
100164e4:	6665      	str	r5, [r4, #100]	@ 0x64
100164e6:	61a5      	str	r5, [r4, #24]
100164e8:	f000 fb78 	bl	10016bdc <memset>
100164ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
100164f0:	e9c4 4907 	strd	r4, r9, [r4, #28]
100164f4:	e9c4 8709 	strd	r8, r7, [r4, #36]	@ 0x24
100164f8:	62e6      	str	r6, [r4, #44]	@ 0x2c
100164fa:	f000 fc4d 	bl	10016d98 <__retarget_lock_init_recursive>
100164fe:	4629      	mov	r1, r5
10016500:	4b24      	ldr	r3, [pc, #144]	@ (10016594 <global_stdio_init.part.0+0xe0>)
10016502:	6763      	str	r3, [r4, #116]	@ 0x74
10016504:	2208      	movs	r2, #8
10016506:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
1001650a:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
1001650e:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
10016512:	6725      	str	r5, [r4, #112]	@ 0x70
10016514:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
10016518:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
1001651c:	f000 fb5e 	bl	10016bdc <memset>
10016520:	f104 0368 	add.w	r3, r4, #104	@ 0x68
10016524:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
10016528:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
1001652c:	e9c4 9822 	strd	r9, r8, [r4, #136]	@ 0x88
10016530:	e9c4 7624 	strd	r7, r6, [r4, #144]	@ 0x90
10016534:	f000 fc30 	bl	10016d98 <__retarget_lock_init_recursive>
10016538:	4b17      	ldr	r3, [pc, #92]	@ (10016598 <global_stdio_init.part.0+0xe4>)
1001653a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
1001653e:	4629      	mov	r1, r5
10016540:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
10016544:	2208      	movs	r2, #8
10016546:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
1001654a:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
1001654e:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
10016552:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
10016556:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
1001655a:	f000 fb3f 	bl	10016bdc <memset>
1001655e:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
10016562:	e9c4 873d 	strd	r8, r7, [r4, #244]	@ 0xf4
10016566:	f8c4 90f0 	str.w	r9, [r4, #240]	@ 0xf0
1001656a:	f504 7094 	add.w	r0, r4, #296	@ 0x128
1001656e:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
10016572:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
10016576:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001657a:	f000 bc0d 	b.w	10016d98 <__retarget_lock_init_recursive>
1001657e:	bf00      	nop
10016580:	200015b8 	.word	0x200015b8
10016584:	200016f0 	.word	0x200016f0
10016588:	1001645d 	.word	0x1001645d
1001658c:	1001a8f5 	.word	0x1001a8f5
10016590:	1001a919 	.word	0x1001a919
10016594:	00010009 	.word	0x00010009
10016598:	00020012 	.word	0x00020012
1001659c:	1001a891 	.word	0x1001a891
100165a0:	1001a8b5 	.word	0x1001a8b5

100165a4 <__sinit>:
100165a4:	b510      	push	{r4, lr}
100165a6:	4604      	mov	r4, r0
100165a8:	480a      	ldr	r0, [pc, #40]	@ (100165d4 <__sinit+0x30>)
100165aa:	f000 fbf9 	bl	10016da0 <__retarget_lock_acquire_recursive>
100165ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
100165b0:	b923      	cbnz	r3, 100165bc <__sinit+0x18>
100165b2:	4b09      	ldr	r3, [pc, #36]	@ (100165d8 <__sinit+0x34>)
100165b4:	4a09      	ldr	r2, [pc, #36]	@ (100165dc <__sinit+0x38>)
100165b6:	681b      	ldr	r3, [r3, #0]
100165b8:	6362      	str	r2, [r4, #52]	@ 0x34
100165ba:	b123      	cbz	r3, 100165c6 <__sinit+0x22>
100165bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100165c0:	4804      	ldr	r0, [pc, #16]	@ (100165d4 <__sinit+0x30>)
100165c2:	f000 bbef 	b.w	10016da4 <__retarget_lock_release_recursive>
100165c6:	f7ff ff75 	bl	100164b4 <global_stdio_init.part.0>
100165ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100165ce:	4801      	ldr	r0, [pc, #4]	@ (100165d4 <__sinit+0x30>)
100165d0:	f000 bbe8 	b.w	10016da4 <__retarget_lock_release_recursive>
100165d4:	200016fc 	.word	0x200016fc
100165d8:	200016f0 	.word	0x200016f0
100165dc:	10016475 	.word	0x10016475

100165e0 <__sfp_lock_acquire>:
100165e0:	4801      	ldr	r0, [pc, #4]	@ (100165e8 <__sfp_lock_acquire+0x8>)
100165e2:	f000 bbdd 	b.w	10016da0 <__retarget_lock_acquire_recursive>
100165e6:	bf00      	nop
100165e8:	200016fc 	.word	0x200016fc

100165ec <__sfp_lock_release>:
100165ec:	4801      	ldr	r0, [pc, #4]	@ (100165f4 <__sfp_lock_release+0x8>)
100165ee:	f000 bbd9 	b.w	10016da4 <__retarget_lock_release_recursive>
100165f2:	bf00      	nop
100165f4:	200016fc 	.word	0x200016fc

100165f8 <__sfvwrite_r>:
100165f8:	6893      	ldr	r3, [r2, #8]
100165fa:	2b00      	cmp	r3, #0
100165fc:	f000 80f8 	beq.w	100167f0 <__sfvwrite_r+0x1f8>
10016600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10016604:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
10016608:	f01c 0f08 	tst.w	ip, #8
1001660c:	b083      	sub	sp, #12
1001660e:	4690      	mov	r8, r2
10016610:	4681      	mov	r9, r0
10016612:	460c      	mov	r4, r1
10016614:	d031      	beq.n	1001667a <__sfvwrite_r+0x82>
10016616:	690b      	ldr	r3, [r1, #16]
10016618:	b37b      	cbz	r3, 1001667a <__sfvwrite_r+0x82>
1001661a:	f01c 0702 	ands.w	r7, ip, #2
1001661e:	f8d8 6000 	ldr.w	r6, [r8]
10016622:	d038      	beq.n	10016696 <__sfvwrite_r+0x9e>
10016624:	2700      	movs	r7, #0
10016626:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
1001662a:	69e1      	ldr	r1, [r4, #28]
1001662c:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 100168f4 <__sfvwrite_r+0x2fc>
10016630:	463d      	mov	r5, r7
10016632:	4555      	cmp	r5, sl
10016634:	462b      	mov	r3, r5
10016636:	463a      	mov	r2, r7
10016638:	bf28      	it	cs
1001663a:	4653      	movcs	r3, sl
1001663c:	4648      	mov	r0, r9
1001663e:	b1c5      	cbz	r5, 10016672 <__sfvwrite_r+0x7a>
10016640:	47d8      	blx	fp
10016642:	2800      	cmp	r0, #0
10016644:	f340 80ca 	ble.w	100167dc <__sfvwrite_r+0x1e4>
10016648:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001664c:	1a1b      	subs	r3, r3, r0
1001664e:	4407      	add	r7, r0
10016650:	1a2d      	subs	r5, r5, r0
10016652:	f8c8 3008 	str.w	r3, [r8, #8]
10016656:	2b00      	cmp	r3, #0
10016658:	f000 80b6 	beq.w	100167c8 <__sfvwrite_r+0x1d0>
1001665c:	4555      	cmp	r5, sl
1001665e:	462b      	mov	r3, r5
10016660:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
10016664:	69e1      	ldr	r1, [r4, #28]
10016666:	bf28      	it	cs
10016668:	4653      	movcs	r3, sl
1001666a:	463a      	mov	r2, r7
1001666c:	4648      	mov	r0, r9
1001666e:	2d00      	cmp	r5, #0
10016670:	d1e6      	bne.n	10016640 <__sfvwrite_r+0x48>
10016672:	e9d6 7500 	ldrd	r7, r5, [r6]
10016676:	3608      	adds	r6, #8
10016678:	e7db      	b.n	10016632 <__sfvwrite_r+0x3a>
1001667a:	4621      	mov	r1, r4
1001667c:	4648      	mov	r0, r9
1001667e:	f000 f95f 	bl	10016940 <__swsetup_r>
10016682:	2800      	cmp	r0, #0
10016684:	f040 80af 	bne.w	100167e6 <__sfvwrite_r+0x1ee>
10016688:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
1001668c:	f8d8 6000 	ldr.w	r6, [r8]
10016690:	f01c 0702 	ands.w	r7, ip, #2
10016694:	d1c6      	bne.n	10016624 <__sfvwrite_r+0x2c>
10016696:	f01c 0a01 	ands.w	sl, ip, #1
1001669a:	d163      	bne.n	10016764 <__sfvwrite_r+0x16c>
1001669c:	6823      	ldr	r3, [r4, #0]
1001669e:	68a1      	ldr	r1, [r4, #8]
100166a0:	4657      	mov	r7, sl
100166a2:	4618      	mov	r0, r3
100166a4:	468b      	mov	fp, r1
100166a6:	2f00      	cmp	r7, #0
100166a8:	d058      	beq.n	1001675c <__sfvwrite_r+0x164>
100166aa:	f41c 7f00 	tst.w	ip, #512	@ 0x200
100166ae:	f000 80b5 	beq.w	1001681c <__sfvwrite_r+0x224>
100166b2:	42b9      	cmp	r1, r7
100166b4:	460a      	mov	r2, r1
100166b6:	f200 80e1 	bhi.w	1001687c <__sfvwrite_r+0x284>
100166ba:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
100166be:	d02f      	beq.n	10016720 <__sfvwrite_r+0x128>
100166c0:	6921      	ldr	r1, [r4, #16]
100166c2:	6962      	ldr	r2, [r4, #20]
100166c4:	1a5d      	subs	r5, r3, r1
100166c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
100166ca:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
100166ce:	1c6b      	adds	r3, r5, #1
100166d0:	1052      	asrs	r2, r2, #1
100166d2:	443b      	add	r3, r7
100166d4:	4293      	cmp	r3, r2
100166d6:	bf92      	itee	ls
100166d8:	4693      	movls	fp, r2
100166da:	469b      	movhi	fp, r3
100166dc:	461a      	movhi	r2, r3
100166de:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
100166e2:	f000 80ea 	beq.w	100168ba <__sfvwrite_r+0x2c2>
100166e6:	4611      	mov	r1, r2
100166e8:	4648      	mov	r0, r9
100166ea:	f7fc f9f7 	bl	10012adc <_malloc_r>
100166ee:	2800      	cmp	r0, #0
100166f0:	f000 80f9 	beq.w	100168e6 <__sfvwrite_r+0x2ee>
100166f4:	462a      	mov	r2, r5
100166f6:	6921      	ldr	r1, [r4, #16]
100166f8:	9000      	str	r0, [sp, #0]
100166fa:	f000 fba9 	bl	10016e50 <memcpy>
100166fe:	89a2      	ldrh	r2, [r4, #12]
10016700:	9b00      	ldr	r3, [sp, #0]
10016702:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
10016706:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
1001670a:	81a2      	strh	r2, [r4, #12]
1001670c:	1958      	adds	r0, r3, r5
1001670e:	ebab 0505 	sub.w	r5, fp, r5
10016712:	f8c4 b014 	str.w	fp, [r4, #20]
10016716:	6123      	str	r3, [r4, #16]
10016718:	60a5      	str	r5, [r4, #8]
1001671a:	6020      	str	r0, [r4, #0]
1001671c:	46bb      	mov	fp, r7
1001671e:	463a      	mov	r2, r7
10016720:	4651      	mov	r1, sl
10016722:	9200      	str	r2, [sp, #0]
10016724:	f000 f9da 	bl	10016adc <memmove>
10016728:	68a1      	ldr	r1, [r4, #8]
1001672a:	6823      	ldr	r3, [r4, #0]
1001672c:	9a00      	ldr	r2, [sp, #0]
1001672e:	eba1 010b 	sub.w	r1, r1, fp
10016732:	441a      	add	r2, r3
10016734:	463d      	mov	r5, r7
10016736:	60a1      	str	r1, [r4, #8]
10016738:	6022      	str	r2, [r4, #0]
1001673a:	2700      	movs	r7, #0
1001673c:	f8d8 3008 	ldr.w	r3, [r8, #8]
10016740:	1b5b      	subs	r3, r3, r5
10016742:	44aa      	add	sl, r5
10016744:	f8c8 3008 	str.w	r3, [r8, #8]
10016748:	2b00      	cmp	r3, #0
1001674a:	d03d      	beq.n	100167c8 <__sfvwrite_r+0x1d0>
1001674c:	6823      	ldr	r3, [r4, #0]
1001674e:	68a1      	ldr	r1, [r4, #8]
10016750:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
10016754:	4618      	mov	r0, r3
10016756:	468b      	mov	fp, r1
10016758:	2f00      	cmp	r7, #0
1001675a:	d1a6      	bne.n	100166aa <__sfvwrite_r+0xb2>
1001675c:	e9d6 a700 	ldrd	sl, r7, [r6]
10016760:	3608      	adds	r6, #8
10016762:	e79e      	b.n	100166a2 <__sfvwrite_r+0xaa>
10016764:	4638      	mov	r0, r7
10016766:	46bb      	mov	fp, r7
10016768:	463d      	mov	r5, r7
1001676a:	9700      	str	r7, [sp, #0]
1001676c:	2d00      	cmp	r5, #0
1001676e:	d041      	beq.n	100167f4 <__sfvwrite_r+0x1fc>
10016770:	2800      	cmp	r0, #0
10016772:	d046      	beq.n	10016802 <__sfvwrite_r+0x20a>
10016774:	9a00      	ldr	r2, [sp, #0]
10016776:	6820      	ldr	r0, [r4, #0]
10016778:	68a1      	ldr	r1, [r4, #8]
1001677a:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
1001677e:	42aa      	cmp	r2, r5
10016780:	bf28      	it	cs
10016782:	462a      	movcs	r2, r5
10016784:	42b8      	cmp	r0, r7
10016786:	d904      	bls.n	10016792 <__sfvwrite_r+0x19a>
10016788:	eb01 0a03 	add.w	sl, r1, r3
1001678c:	4552      	cmp	r2, sl
1001678e:	f300 8085 	bgt.w	1001689c <__sfvwrite_r+0x2a4>
10016792:	4293      	cmp	r3, r2
10016794:	dc75      	bgt.n	10016882 <__sfvwrite_r+0x28a>
10016796:	69e1      	ldr	r1, [r4, #28]
10016798:	6a67      	ldr	r7, [r4, #36]	@ 0x24
1001679a:	465a      	mov	r2, fp
1001679c:	4648      	mov	r0, r9
1001679e:	47b8      	blx	r7
100167a0:	f1b0 0a00 	subs.w	sl, r0, #0
100167a4:	dd1a      	ble.n	100167dc <__sfvwrite_r+0x1e4>
100167a6:	9b00      	ldr	r3, [sp, #0]
100167a8:	ebb3 030a 	subs.w	r3, r3, sl
100167ac:	9300      	str	r3, [sp, #0]
100167ae:	d00f      	beq.n	100167d0 <__sfvwrite_r+0x1d8>
100167b0:	2001      	movs	r0, #1
100167b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
100167b6:	eba3 030a 	sub.w	r3, r3, sl
100167ba:	44d3      	add	fp, sl
100167bc:	eba5 050a 	sub.w	r5, r5, sl
100167c0:	f8c8 3008 	str.w	r3, [r8, #8]
100167c4:	2b00      	cmp	r3, #0
100167c6:	d1d1      	bne.n	1001676c <__sfvwrite_r+0x174>
100167c8:	2000      	movs	r0, #0
100167ca:	b003      	add	sp, #12
100167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100167d0:	4621      	mov	r1, r4
100167d2:	4648      	mov	r0, r9
100167d4:	f7ff fdbe 	bl	10016354 <_fflush_r>
100167d8:	2800      	cmp	r0, #0
100167da:	d0ea      	beq.n	100167b2 <__sfvwrite_r+0x1ba>
100167dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100167e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100167e4:	81a3      	strh	r3, [r4, #12]
100167e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100167ea:	b003      	add	sp, #12
100167ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100167f0:	2000      	movs	r0, #0
100167f2:	4770      	bx	lr
100167f4:	6875      	ldr	r5, [r6, #4]
100167f6:	4633      	mov	r3, r6
100167f8:	3608      	adds	r6, #8
100167fa:	2d00      	cmp	r5, #0
100167fc:	d0fa      	beq.n	100167f4 <__sfvwrite_r+0x1fc>
100167fe:	f8d3 b000 	ldr.w	fp, [r3]
10016802:	462a      	mov	r2, r5
10016804:	210a      	movs	r1, #10
10016806:	4658      	mov	r0, fp
10016808:	f000 fad2 	bl	10016db0 <memchr>
1001680c:	2800      	cmp	r0, #0
1001680e:	d067      	beq.n	100168e0 <__sfvwrite_r+0x2e8>
10016810:	3001      	adds	r0, #1
10016812:	eba0 030b 	sub.w	r3, r0, fp
10016816:	9300      	str	r3, [sp, #0]
10016818:	461a      	mov	r2, r3
1001681a:	e7ac      	b.n	10016776 <__sfvwrite_r+0x17e>
1001681c:	6922      	ldr	r2, [r4, #16]
1001681e:	429a      	cmp	r2, r3
10016820:	d314      	bcc.n	1001684c <__sfvwrite_r+0x254>
10016822:	6962      	ldr	r2, [r4, #20]
10016824:	42ba      	cmp	r2, r7
10016826:	d811      	bhi.n	1001684c <__sfvwrite_r+0x254>
10016828:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
1001682c:	42bb      	cmp	r3, r7
1001682e:	bf28      	it	cs
10016830:	463b      	movcs	r3, r7
10016832:	6a65      	ldr	r5, [r4, #36]	@ 0x24
10016834:	fb93 f3f2 	sdiv	r3, r3, r2
10016838:	69e1      	ldr	r1, [r4, #28]
1001683a:	fb02 f303 	mul.w	r3, r2, r3
1001683e:	4648      	mov	r0, r9
10016840:	4652      	mov	r2, sl
10016842:	47a8      	blx	r5
10016844:	1e05      	subs	r5, r0, #0
10016846:	ddc9      	ble.n	100167dc <__sfvwrite_r+0x1e4>
10016848:	1b7f      	subs	r7, r7, r5
1001684a:	e777      	b.n	1001673c <__sfvwrite_r+0x144>
1001684c:	42b9      	cmp	r1, r7
1001684e:	bf28      	it	cs
10016850:	4639      	movcs	r1, r7
10016852:	460d      	mov	r5, r1
10016854:	4618      	mov	r0, r3
10016856:	460a      	mov	r2, r1
10016858:	4651      	mov	r1, sl
1001685a:	f000 f93f 	bl	10016adc <memmove>
1001685e:	68a1      	ldr	r1, [r4, #8]
10016860:	6823      	ldr	r3, [r4, #0]
10016862:	1b49      	subs	r1, r1, r5
10016864:	442b      	add	r3, r5
10016866:	60a1      	str	r1, [r4, #8]
10016868:	6023      	str	r3, [r4, #0]
1001686a:	2900      	cmp	r1, #0
1001686c:	d1ec      	bne.n	10016848 <__sfvwrite_r+0x250>
1001686e:	4621      	mov	r1, r4
10016870:	4648      	mov	r0, r9
10016872:	f7ff fd6f 	bl	10016354 <_fflush_r>
10016876:	2800      	cmp	r0, #0
10016878:	d0e6      	beq.n	10016848 <__sfvwrite_r+0x250>
1001687a:	e7af      	b.n	100167dc <__sfvwrite_r+0x1e4>
1001687c:	46bb      	mov	fp, r7
1001687e:	463a      	mov	r2, r7
10016880:	e74e      	b.n	10016720 <__sfvwrite_r+0x128>
10016882:	4659      	mov	r1, fp
10016884:	9201      	str	r2, [sp, #4]
10016886:	f000 f929 	bl	10016adc <memmove>
1001688a:	9a01      	ldr	r2, [sp, #4]
1001688c:	68a3      	ldr	r3, [r4, #8]
1001688e:	1a9b      	subs	r3, r3, r2
10016890:	60a3      	str	r3, [r4, #8]
10016892:	6823      	ldr	r3, [r4, #0]
10016894:	4413      	add	r3, r2
10016896:	6023      	str	r3, [r4, #0]
10016898:	4692      	mov	sl, r2
1001689a:	e784      	b.n	100167a6 <__sfvwrite_r+0x1ae>
1001689c:	4659      	mov	r1, fp
1001689e:	4652      	mov	r2, sl
100168a0:	f000 f91c 	bl	10016adc <memmove>
100168a4:	6823      	ldr	r3, [r4, #0]
100168a6:	4453      	add	r3, sl
100168a8:	6023      	str	r3, [r4, #0]
100168aa:	4621      	mov	r1, r4
100168ac:	4648      	mov	r0, r9
100168ae:	f7ff fd51 	bl	10016354 <_fflush_r>
100168b2:	2800      	cmp	r0, #0
100168b4:	f43f af77 	beq.w	100167a6 <__sfvwrite_r+0x1ae>
100168b8:	e790      	b.n	100167dc <__sfvwrite_r+0x1e4>
100168ba:	4648      	mov	r0, r9
100168bc:	f7ff fb0c 	bl	10015ed8 <_realloc_r>
100168c0:	4603      	mov	r3, r0
100168c2:	2800      	cmp	r0, #0
100168c4:	f47f af22 	bne.w	1001670c <__sfvwrite_r+0x114>
100168c8:	6921      	ldr	r1, [r4, #16]
100168ca:	4648      	mov	r0, r9
100168cc:	f001 fc72 	bl	100181b4 <_free_r>
100168d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100168d4:	220c      	movs	r2, #12
100168d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
100168da:	f8c9 2000 	str.w	r2, [r9]
100168de:	e77f      	b.n	100167e0 <__sfvwrite_r+0x1e8>
100168e0:	1c6a      	adds	r2, r5, #1
100168e2:	9200      	str	r2, [sp, #0]
100168e4:	e747      	b.n	10016776 <__sfvwrite_r+0x17e>
100168e6:	220c      	movs	r2, #12
100168e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100168ec:	f8c9 2000 	str.w	r2, [r9]
100168f0:	e776      	b.n	100167e0 <__sfvwrite_r+0x1e8>
100168f2:	bf00      	nop
100168f4:	7ffffc00 	.word	0x7ffffc00

100168f8 <_fwalk_sglue>:
100168f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100168fc:	4680      	mov	r8, r0
100168fe:	460f      	mov	r7, r1
10016900:	4616      	mov	r6, r2
10016902:	f04f 0900 	mov.w	r9, #0
10016906:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
1001690a:	3d01      	subs	r5, #1
1001690c:	d411      	bmi.n	10016932 <_fwalk_sglue+0x3a>
1001690e:	89a3      	ldrh	r3, [r4, #12]
10016910:	2b01      	cmp	r3, #1
10016912:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
10016916:	d908      	bls.n	1001692a <_fwalk_sglue+0x32>
10016918:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1001691c:	3301      	adds	r3, #1
1001691e:	4621      	mov	r1, r4
10016920:	d003      	beq.n	1001692a <_fwalk_sglue+0x32>
10016922:	4640      	mov	r0, r8
10016924:	47b8      	blx	r7
10016926:	ea49 0900 	orr.w	r9, r9, r0
1001692a:	1c6b      	adds	r3, r5, #1
1001692c:	f104 0468 	add.w	r4, r4, #104	@ 0x68
10016930:	d1ed      	bne.n	1001690e <_fwalk_sglue+0x16>
10016932:	6836      	ldr	r6, [r6, #0]
10016934:	2e00      	cmp	r6, #0
10016936:	d1e6      	bne.n	10016906 <_fwalk_sglue+0xe>
10016938:	4648      	mov	r0, r9
1001693a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001693e:	bf00      	nop

10016940 <__swsetup_r>:
10016940:	b538      	push	{r3, r4, r5, lr}
10016942:	4b2e      	ldr	r3, [pc, #184]	@ (100169fc <__swsetup_r+0xbc>)
10016944:	681b      	ldr	r3, [r3, #0]
10016946:	4605      	mov	r5, r0
10016948:	460c      	mov	r4, r1
1001694a:	b113      	cbz	r3, 10016952 <__swsetup_r+0x12>
1001694c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1001694e:	2a00      	cmp	r2, #0
10016950:	d04b      	beq.n	100169ea <__swsetup_r+0xaa>
10016952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10016956:	0718      	lsls	r0, r3, #28
10016958:	d51c      	bpl.n	10016994 <__swsetup_r+0x54>
1001695a:	6922      	ldr	r2, [r4, #16]
1001695c:	b322      	cbz	r2, 100169a8 <__swsetup_r+0x68>
1001695e:	f013 0101 	ands.w	r1, r3, #1
10016962:	d007      	beq.n	10016974 <__swsetup_r+0x34>
10016964:	6961      	ldr	r1, [r4, #20]
10016966:	2000      	movs	r0, #0
10016968:	4249      	negs	r1, r1
1001696a:	60a0      	str	r0, [r4, #8]
1001696c:	61a1      	str	r1, [r4, #24]
1001696e:	b13a      	cbz	r2, 10016980 <__swsetup_r+0x40>
10016970:	2000      	movs	r0, #0
10016972:	bd38      	pop	{r3, r4, r5, pc}
10016974:	0798      	lsls	r0, r3, #30
10016976:	bf58      	it	pl
10016978:	6961      	ldrpl	r1, [r4, #20]
1001697a:	60a1      	str	r1, [r4, #8]
1001697c:	2a00      	cmp	r2, #0
1001697e:	d1f7      	bne.n	10016970 <__swsetup_r+0x30>
10016980:	0619      	lsls	r1, r3, #24
10016982:	bf58      	it	pl
10016984:	4610      	movpl	r0, r2
10016986:	d5f4      	bpl.n	10016972 <__swsetup_r+0x32>
10016988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001698c:	81a3      	strh	r3, [r4, #12]
1001698e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10016992:	bd38      	pop	{r3, r4, r5, pc}
10016994:	06d9      	lsls	r1, r3, #27
10016996:	d52c      	bpl.n	100169f2 <__swsetup_r+0xb2>
10016998:	075a      	lsls	r2, r3, #29
1001699a:	d412      	bmi.n	100169c2 <__swsetup_r+0x82>
1001699c:	6922      	ldr	r2, [r4, #16]
1001699e:	f043 0308 	orr.w	r3, r3, #8
100169a2:	81a3      	strh	r3, [r4, #12]
100169a4:	2a00      	cmp	r2, #0
100169a6:	d1da      	bne.n	1001695e <__swsetup_r+0x1e>
100169a8:	f403 7120 	and.w	r1, r3, #640	@ 0x280
100169ac:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
100169b0:	d0d5      	beq.n	1001695e <__swsetup_r+0x1e>
100169b2:	4621      	mov	r1, r4
100169b4:	4628      	mov	r0, r5
100169b6:	f003 fae3 	bl	10019f80 <__smakebuf_r>
100169ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100169be:	6922      	ldr	r2, [r4, #16]
100169c0:	e7cd      	b.n	1001695e <__swsetup_r+0x1e>
100169c2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
100169c4:	b151      	cbz	r1, 100169dc <__swsetup_r+0x9c>
100169c6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
100169ca:	4291      	cmp	r1, r2
100169cc:	d004      	beq.n	100169d8 <__swsetup_r+0x98>
100169ce:	4628      	mov	r0, r5
100169d0:	f001 fbf0 	bl	100181b4 <_free_r>
100169d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100169d8:	2200      	movs	r2, #0
100169da:	6322      	str	r2, [r4, #48]	@ 0x30
100169dc:	6922      	ldr	r2, [r4, #16]
100169de:	2100      	movs	r1, #0
100169e0:	e9c4 2100 	strd	r2, r1, [r4]
100169e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
100169e8:	e7d9      	b.n	1001699e <__swsetup_r+0x5e>
100169ea:	4618      	mov	r0, r3
100169ec:	f7ff fdda 	bl	100165a4 <__sinit>
100169f0:	e7af      	b.n	10016952 <__swsetup_r+0x12>
100169f2:	2209      	movs	r2, #9
100169f4:	602a      	str	r2, [r5, #0]
100169f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100169fa:	e7c7      	b.n	1001698c <__swsetup_r+0x4c>
100169fc:	20000600 	.word	0x20000600

10016a00 <__fputwc>:
10016a00:	b570      	push	{r4, r5, r6, lr}
10016a02:	b082      	sub	sp, #8
10016a04:	4606      	mov	r6, r0
10016a06:	460d      	mov	r5, r1
10016a08:	4614      	mov	r4, r2
10016a0a:	f000 f96d 	bl	10016ce8 <__locale_mb_cur_max>
10016a0e:	2801      	cmp	r0, #1
10016a10:	d102      	bne.n	10016a18 <__fputwc+0x18>
10016a12:	1e6b      	subs	r3, r5, #1
10016a14:	2bfe      	cmp	r3, #254	@ 0xfe
10016a16:	d926      	bls.n	10016a66 <__fputwc+0x66>
10016a18:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
10016a1c:	462a      	mov	r2, r5
10016a1e:	a901      	add	r1, sp, #4
10016a20:	4630      	mov	r0, r6
10016a22:	f000 fb39 	bl	10017098 <_wcrtomb_r>
10016a26:	1c43      	adds	r3, r0, #1
10016a28:	d020      	beq.n	10016a6c <__fputwc+0x6c>
10016a2a:	b178      	cbz	r0, 10016a4c <__fputwc+0x4c>
10016a2c:	68a3      	ldr	r3, [r4, #8]
10016a2e:	f89d 1004 	ldrb.w	r1, [sp, #4]
10016a32:	3b01      	subs	r3, #1
10016a34:	2b00      	cmp	r3, #0
10016a36:	60a3      	str	r3, [r4, #8]
10016a38:	da04      	bge.n	10016a44 <__fputwc+0x44>
10016a3a:	69a2      	ldr	r2, [r4, #24]
10016a3c:	4293      	cmp	r3, r2
10016a3e:	db08      	blt.n	10016a52 <__fputwc+0x52>
10016a40:	290a      	cmp	r1, #10
10016a42:	d006      	beq.n	10016a52 <__fputwc+0x52>
10016a44:	6823      	ldr	r3, [r4, #0]
10016a46:	1c5a      	adds	r2, r3, #1
10016a48:	6022      	str	r2, [r4, #0]
10016a4a:	7019      	strb	r1, [r3, #0]
10016a4c:	4628      	mov	r0, r5
10016a4e:	b002      	add	sp, #8
10016a50:	bd70      	pop	{r4, r5, r6, pc}
10016a52:	4622      	mov	r2, r4
10016a54:	4630      	mov	r0, r6
10016a56:	f003 ff71 	bl	1001a93c <__swbuf_r>
10016a5a:	3001      	adds	r0, #1
10016a5c:	d1f6      	bne.n	10016a4c <__fputwc+0x4c>
10016a5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10016a62:	b002      	add	sp, #8
10016a64:	bd70      	pop	{r4, r5, r6, pc}
10016a66:	f88d 5004 	strb.w	r5, [sp, #4]
10016a6a:	e7df      	b.n	10016a2c <__fputwc+0x2c>
10016a6c:	89a3      	ldrh	r3, [r4, #12]
10016a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10016a72:	81a3      	strh	r3, [r4, #12]
10016a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10016a78:	e7f3      	b.n	10016a62 <__fputwc+0x62>
10016a7a:	bf00      	nop

10016a7c <_fputwc_r>:
10016a7c:	b530      	push	{r4, r5, lr}
10016a7e:	4614      	mov	r4, r2
10016a80:	6e52      	ldr	r2, [r2, #100]	@ 0x64
10016a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10016a86:	4605      	mov	r5, r0
10016a88:	07d0      	lsls	r0, r2, #31
10016a8a:	b083      	sub	sp, #12
10016a8c:	d401      	bmi.n	10016a92 <_fputwc_r+0x16>
10016a8e:	059a      	lsls	r2, r3, #22
10016a90:	d51c      	bpl.n	10016acc <_fputwc_r+0x50>
10016a92:	0498      	lsls	r0, r3, #18
10016a94:	d406      	bmi.n	10016aa4 <_fputwc_r+0x28>
10016a96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10016a98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
10016a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10016aa0:	81a3      	strh	r3, [r4, #12]
10016aa2:	6662      	str	r2, [r4, #100]	@ 0x64
10016aa4:	4622      	mov	r2, r4
10016aa6:	4628      	mov	r0, r5
10016aa8:	f7ff ffaa 	bl	10016a00 <__fputwc>
10016aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10016aae:	07da      	lsls	r2, r3, #31
10016ab0:	4605      	mov	r5, r0
10016ab2:	d402      	bmi.n	10016aba <_fputwc_r+0x3e>
10016ab4:	89a3      	ldrh	r3, [r4, #12]
10016ab6:	059b      	lsls	r3, r3, #22
10016ab8:	d502      	bpl.n	10016ac0 <_fputwc_r+0x44>
10016aba:	4628      	mov	r0, r5
10016abc:	b003      	add	sp, #12
10016abe:	bd30      	pop	{r4, r5, pc}
10016ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10016ac2:	f000 f96f 	bl	10016da4 <__retarget_lock_release_recursive>
10016ac6:	4628      	mov	r0, r5
10016ac8:	b003      	add	sp, #12
10016aca:	bd30      	pop	{r4, r5, pc}
10016acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10016ace:	9101      	str	r1, [sp, #4]
10016ad0:	f000 f966 	bl	10016da0 <__retarget_lock_acquire_recursive>
10016ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10016ad8:	9901      	ldr	r1, [sp, #4]
10016ada:	e7da      	b.n	10016a92 <_fputwc_r+0x16>

10016adc <memmove>:
10016adc:	4288      	cmp	r0, r1
10016ade:	d90e      	bls.n	10016afe <memmove+0x22>
10016ae0:	188b      	adds	r3, r1, r2
10016ae2:	4283      	cmp	r3, r0
10016ae4:	d90b      	bls.n	10016afe <memmove+0x22>
10016ae6:	eb00 0c02 	add.w	ip, r0, r2
10016aea:	2a00      	cmp	r2, #0
10016aec:	d06e      	beq.n	10016bcc <memmove+0xf0>
10016aee:	4662      	mov	r2, ip
10016af0:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
10016af4:	f802 cd01 	strb.w	ip, [r2, #-1]!
10016af8:	4299      	cmp	r1, r3
10016afa:	d1f9      	bne.n	10016af0 <memmove+0x14>
10016afc:	4770      	bx	lr
10016afe:	2a0f      	cmp	r2, #15
10016b00:	d80f      	bhi.n	10016b22 <memmove+0x46>
10016b02:	4603      	mov	r3, r0
10016b04:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
10016b08:	2a00      	cmp	r2, #0
10016b0a:	d05f      	beq.n	10016bcc <memmove+0xf0>
10016b0c:	f10c 0c01 	add.w	ip, ip, #1
10016b10:	3b01      	subs	r3, #1
10016b12:	448c      	add	ip, r1
10016b14:	f811 2b01 	ldrb.w	r2, [r1], #1
10016b18:	f803 2f01 	strb.w	r2, [r3, #1]!
10016b1c:	4561      	cmp	r1, ip
10016b1e:	d1f9      	bne.n	10016b14 <memmove+0x38>
10016b20:	4770      	bx	lr
10016b22:	ea40 0301 	orr.w	r3, r0, r1
10016b26:	079b      	lsls	r3, r3, #30
10016b28:	d151      	bne.n	10016bce <memmove+0xf2>
10016b2a:	f1a2 0310 	sub.w	r3, r2, #16
10016b2e:	b570      	push	{r4, r5, r6, lr}
10016b30:	f101 0c20 	add.w	ip, r1, #32
10016b34:	f023 050f 	bic.w	r5, r3, #15
10016b38:	f101 0e10 	add.w	lr, r1, #16
10016b3c:	f100 0410 	add.w	r4, r0, #16
10016b40:	44ac      	add	ip, r5
10016b42:	091b      	lsrs	r3, r3, #4
10016b44:	f85e 5c10 	ldr.w	r5, [lr, #-16]
10016b48:	f844 5c10 	str.w	r5, [r4, #-16]
10016b4c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
10016b50:	f844 5c0c 	str.w	r5, [r4, #-12]
10016b54:	f85e 5c08 	ldr.w	r5, [lr, #-8]
10016b58:	f844 5c08 	str.w	r5, [r4, #-8]
10016b5c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
10016b60:	f844 5c04 	str.w	r5, [r4, #-4]
10016b64:	f10e 0e10 	add.w	lr, lr, #16
10016b68:	45e6      	cmp	lr, ip
10016b6a:	f104 0410 	add.w	r4, r4, #16
10016b6e:	d1e9      	bne.n	10016b44 <memmove+0x68>
10016b70:	3301      	adds	r3, #1
10016b72:	f012 0f0c 	tst.w	r2, #12
10016b76:	eb01 1103 	add.w	r1, r1, r3, lsl #4
10016b7a:	f002 040f 	and.w	r4, r2, #15
10016b7e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
10016b82:	d028      	beq.n	10016bd6 <memmove+0xfa>
10016b84:	3c04      	subs	r4, #4
10016b86:	f024 0603 	bic.w	r6, r4, #3
10016b8a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
10016b8e:	441e      	add	r6, r3
10016b90:	1f1c      	subs	r4, r3, #4
10016b92:	468e      	mov	lr, r1
10016b94:	f85e 5b04 	ldr.w	r5, [lr], #4
10016b98:	f844 5f04 	str.w	r5, [r4, #4]!
10016b9c:	42b4      	cmp	r4, r6
10016b9e:	d1f9      	bne.n	10016b94 <memmove+0xb8>
10016ba0:	f10c 0401 	add.w	r4, ip, #1
10016ba4:	f002 0203 	and.w	r2, r2, #3
10016ba8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
10016bac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
10016bb0:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
10016bb4:	b14a      	cbz	r2, 10016bca <memmove+0xee>
10016bb6:	f10c 0c01 	add.w	ip, ip, #1
10016bba:	3b01      	subs	r3, #1
10016bbc:	448c      	add	ip, r1
10016bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
10016bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
10016bc6:	4561      	cmp	r1, ip
10016bc8:	d1f9      	bne.n	10016bbe <memmove+0xe2>
10016bca:	bd70      	pop	{r4, r5, r6, pc}
10016bcc:	4770      	bx	lr
10016bce:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
10016bd2:	4603      	mov	r3, r0
10016bd4:	e79a      	b.n	10016b0c <memmove+0x30>
10016bd6:	4622      	mov	r2, r4
10016bd8:	e7ea      	b.n	10016bb0 <memmove+0xd4>
10016bda:	bf00      	nop

10016bdc <memset>:
10016bdc:	0783      	lsls	r3, r0, #30
10016bde:	b530      	push	{r4, r5, lr}
10016be0:	d047      	beq.n	10016c72 <memset+0x96>
10016be2:	1e54      	subs	r4, r2, #1
10016be4:	2a00      	cmp	r2, #0
10016be6:	d03e      	beq.n	10016c66 <memset+0x8a>
10016be8:	b2ca      	uxtb	r2, r1
10016bea:	4603      	mov	r3, r0
10016bec:	e001      	b.n	10016bf2 <memset+0x16>
10016bee:	3c01      	subs	r4, #1
10016bf0:	d339      	bcc.n	10016c66 <memset+0x8a>
10016bf2:	f803 2b01 	strb.w	r2, [r3], #1
10016bf6:	079d      	lsls	r5, r3, #30
10016bf8:	d1f9      	bne.n	10016bee <memset+0x12>
10016bfa:	2c03      	cmp	r4, #3
10016bfc:	d92c      	bls.n	10016c58 <memset+0x7c>
10016bfe:	b2cd      	uxtb	r5, r1
10016c00:	eb05 2505 	add.w	r5, r5, r5, lsl #8
10016c04:	2c0f      	cmp	r4, #15
10016c06:	eb05 4505 	add.w	r5, r5, r5, lsl #16
10016c0a:	d935      	bls.n	10016c78 <memset+0x9c>
10016c0c:	f1a4 0210 	sub.w	r2, r4, #16
10016c10:	f022 0c0f 	bic.w	ip, r2, #15
10016c14:	f103 0e10 	add.w	lr, r3, #16
10016c18:	44e6      	add	lr, ip
10016c1a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
10016c1e:	461a      	mov	r2, r3
10016c20:	6015      	str	r5, [r2, #0]
10016c22:	6055      	str	r5, [r2, #4]
10016c24:	6095      	str	r5, [r2, #8]
10016c26:	60d5      	str	r5, [r2, #12]
10016c28:	3210      	adds	r2, #16
10016c2a:	4572      	cmp	r2, lr
10016c2c:	d1f8      	bne.n	10016c20 <memset+0x44>
10016c2e:	f10c 0201 	add.w	r2, ip, #1
10016c32:	f014 0f0c 	tst.w	r4, #12
10016c36:	eb03 1202 	add.w	r2, r3, r2, lsl #4
10016c3a:	f004 0c0f 	and.w	ip, r4, #15
10016c3e:	d013      	beq.n	10016c68 <memset+0x8c>
10016c40:	f1ac 0304 	sub.w	r3, ip, #4
10016c44:	f023 0303 	bic.w	r3, r3, #3
10016c48:	3304      	adds	r3, #4
10016c4a:	4413      	add	r3, r2
10016c4c:	f842 5b04 	str.w	r5, [r2], #4
10016c50:	429a      	cmp	r2, r3
10016c52:	d1fb      	bne.n	10016c4c <memset+0x70>
10016c54:	f00c 0403 	and.w	r4, ip, #3
10016c58:	b12c      	cbz	r4, 10016c66 <memset+0x8a>
10016c5a:	b2c9      	uxtb	r1, r1
10016c5c:	441c      	add	r4, r3
10016c5e:	f803 1b01 	strb.w	r1, [r3], #1
10016c62:	429c      	cmp	r4, r3
10016c64:	d1fb      	bne.n	10016c5e <memset+0x82>
10016c66:	bd30      	pop	{r4, r5, pc}
10016c68:	4664      	mov	r4, ip
10016c6a:	4613      	mov	r3, r2
10016c6c:	2c00      	cmp	r4, #0
10016c6e:	d1f4      	bne.n	10016c5a <memset+0x7e>
10016c70:	e7f9      	b.n	10016c66 <memset+0x8a>
10016c72:	4603      	mov	r3, r0
10016c74:	4614      	mov	r4, r2
10016c76:	e7c0      	b.n	10016bfa <memset+0x1e>
10016c78:	461a      	mov	r2, r3
10016c7a:	46a4      	mov	ip, r4
10016c7c:	e7e0      	b.n	10016c40 <memset+0x64>
10016c7e:	bf00      	nop

10016c80 <strncpy>:
10016c80:	ea40 0301 	orr.w	r3, r0, r1
10016c84:	079b      	lsls	r3, r3, #30
10016c86:	b510      	push	{r4, lr}
10016c88:	d101      	bne.n	10016c8e <strncpy+0xe>
10016c8a:	2a03      	cmp	r2, #3
10016c8c:	d817      	bhi.n	10016cbe <strncpy+0x3e>
10016c8e:	4684      	mov	ip, r0
10016c90:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
10016c94:	e007      	b.n	10016ca6 <strncpy+0x26>
10016c96:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
10016c9a:	f803 1b01 	strb.w	r1, [r3], #1
10016c9e:	1e54      	subs	r4, r2, #1
10016ca0:	b129      	cbz	r1, 10016cae <strncpy+0x2e>
10016ca2:	469c      	mov	ip, r3
10016ca4:	4622      	mov	r2, r4
10016ca6:	4663      	mov	r3, ip
10016ca8:	2a00      	cmp	r2, #0
10016caa:	d1f4      	bne.n	10016c96 <strncpy+0x16>
10016cac:	bd10      	pop	{r4, pc}
10016cae:	4494      	add	ip, r2
10016cb0:	2c00      	cmp	r4, #0
10016cb2:	d0fb      	beq.n	10016cac <strncpy+0x2c>
10016cb4:	f803 1b01 	strb.w	r1, [r3], #1
10016cb8:	4563      	cmp	r3, ip
10016cba:	d1fb      	bne.n	10016cb4 <strncpy+0x34>
10016cbc:	bd10      	pop	{r4, pc}
10016cbe:	468e      	mov	lr, r1
10016cc0:	4684      	mov	ip, r0
10016cc2:	f8de 4000 	ldr.w	r4, [lr]
10016cc6:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
10016cca:	ea23 0304 	bic.w	r3, r3, r4
10016cce:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
10016cd2:	4671      	mov	r1, lr
10016cd4:	f10e 0e04 	add.w	lr, lr, #4
10016cd8:	d1da      	bne.n	10016c90 <strncpy+0x10>
10016cda:	3a04      	subs	r2, #4
10016cdc:	2a03      	cmp	r2, #3
10016cde:	f84c 4b04 	str.w	r4, [ip], #4
10016ce2:	d8ee      	bhi.n	10016cc2 <strncpy+0x42>
10016ce4:	4671      	mov	r1, lr
10016ce6:	e7d3      	b.n	10016c90 <strncpy+0x10>

10016ce8 <__locale_mb_cur_max>:
10016ce8:	4b01      	ldr	r3, [pc, #4]	@ (10016cf0 <__locale_mb_cur_max+0x8>)
10016cea:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
10016cee:	4770      	bx	lr
10016cf0:	20000494 	.word	0x20000494

10016cf4 <_localeconv_r>:
10016cf4:	4800      	ldr	r0, [pc, #0]	@ (10016cf8 <_localeconv_r+0x4>)
10016cf6:	4770      	bx	lr
10016cf8:	20000584 	.word	0x20000584

10016cfc <_sbrk_r>:
10016cfc:	b538      	push	{r3, r4, r5, lr}
10016cfe:	4d07      	ldr	r5, [pc, #28]	@ (10016d1c <_sbrk_r+0x20>)
10016d00:	2200      	movs	r2, #0
10016d02:	4604      	mov	r4, r0
10016d04:	4608      	mov	r0, r1
10016d06:	602a      	str	r2, [r5, #0]
10016d08:	f7fa f85c 	bl	10010dc4 <_sbrk>
10016d0c:	1c43      	adds	r3, r0, #1
10016d0e:	d000      	beq.n	10016d12 <_sbrk_r+0x16>
10016d10:	bd38      	pop	{r3, r4, r5, pc}
10016d12:	682b      	ldr	r3, [r5, #0]
10016d14:	2b00      	cmp	r3, #0
10016d16:	d0fb      	beq.n	10016d10 <_sbrk_r+0x14>
10016d18:	6023      	str	r3, [r4, #0]
10016d1a:	bd38      	pop	{r3, r4, r5, pc}
10016d1c:	20001704 	.word	0x20001704

10016d20 <__errno>:
10016d20:	4b01      	ldr	r3, [pc, #4]	@ (10016d28 <__errno+0x8>)
10016d22:	6818      	ldr	r0, [r3, #0]
10016d24:	4770      	bx	lr
10016d26:	bf00      	nop
10016d28:	20000600 	.word	0x20000600

10016d2c <sysconf>:
10016d2c:	2808      	cmp	r0, #8
10016d2e:	d102      	bne.n	10016d36 <sysconf+0xa>
10016d30:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
10016d34:	4770      	bx	lr
10016d36:	b508      	push	{r3, lr}
10016d38:	f7ff fff2 	bl	10016d20 <__errno>
10016d3c:	2316      	movs	r3, #22
10016d3e:	6003      	str	r3, [r0, #0]
10016d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10016d44:	bd08      	pop	{r3, pc}
10016d46:	bf00      	nop

10016d48 <__libc_init_array>:
10016d48:	b570      	push	{r4, r5, r6, lr}
10016d4a:	4b0f      	ldr	r3, [pc, #60]	@ (10016d88 <__libc_init_array+0x40>)
10016d4c:	4d0f      	ldr	r5, [pc, #60]	@ (10016d8c <__libc_init_array+0x44>)
10016d4e:	42ab      	cmp	r3, r5
10016d50:	eba3 0605 	sub.w	r6, r3, r5
10016d54:	d007      	beq.n	10016d66 <__libc_init_array+0x1e>
10016d56:	10b6      	asrs	r6, r6, #2
10016d58:	2400      	movs	r4, #0
10016d5a:	f855 3b04 	ldr.w	r3, [r5], #4
10016d5e:	3401      	adds	r4, #1
10016d60:	4798      	blx	r3
10016d62:	42a6      	cmp	r6, r4
10016d64:	d8f9      	bhi.n	10016d5a <__libc_init_array+0x12>
10016d66:	f00d f873 	bl	10023e50 <_init>
10016d6a:	4d09      	ldr	r5, [pc, #36]	@ (10016d90 <__libc_init_array+0x48>)
10016d6c:	4b09      	ldr	r3, [pc, #36]	@ (10016d94 <__libc_init_array+0x4c>)
10016d6e:	1b5e      	subs	r6, r3, r5
10016d70:	42ab      	cmp	r3, r5
10016d72:	ea4f 06a6 	mov.w	r6, r6, asr #2
10016d76:	d006      	beq.n	10016d86 <__libc_init_array+0x3e>
10016d78:	2400      	movs	r4, #0
10016d7a:	f855 3b04 	ldr.w	r3, [r5], #4
10016d7e:	3401      	adds	r4, #1
10016d80:	4798      	blx	r3
10016d82:	42a6      	cmp	r6, r4
10016d84:	d8f9      	bhi.n	10016d7a <__libc_init_array+0x32>
10016d86:	bd70      	pop	{r4, r5, r6, pc}
10016d88:	2000072c 	.word	0x2000072c
10016d8c:	2000072c 	.word	0x2000072c
10016d90:	2000072c 	.word	0x2000072c
10016d94:	20000734 	.word	0x20000734

10016d98 <__retarget_lock_init_recursive>:
10016d98:	4770      	bx	lr
10016d9a:	bf00      	nop

10016d9c <__retarget_lock_close_recursive>:
10016d9c:	4770      	bx	lr
10016d9e:	bf00      	nop

10016da0 <__retarget_lock_acquire_recursive>:
10016da0:	4770      	bx	lr
10016da2:	bf00      	nop

10016da4 <__retarget_lock_release_recursive>:
10016da4:	4770      	bx	lr
10016da6:	bf00      	nop
	...

10016db0 <memchr>:
10016db0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10016db4:	2a10      	cmp	r2, #16
10016db6:	db2b      	blt.n	10016e10 <memchr+0x60>
10016db8:	f010 0f07 	tst.w	r0, #7
10016dbc:	d008      	beq.n	10016dd0 <memchr+0x20>
10016dbe:	f810 3b01 	ldrb.w	r3, [r0], #1
10016dc2:	3a01      	subs	r2, #1
10016dc4:	428b      	cmp	r3, r1
10016dc6:	d02d      	beq.n	10016e24 <memchr+0x74>
10016dc8:	f010 0f07 	tst.w	r0, #7
10016dcc:	b342      	cbz	r2, 10016e20 <memchr+0x70>
10016dce:	d1f6      	bne.n	10016dbe <memchr+0xe>
10016dd0:	b4f0      	push	{r4, r5, r6, r7}
10016dd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10016dd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
10016dda:	f022 0407 	bic.w	r4, r2, #7
10016dde:	f07f 0700 	mvns.w	r7, #0
10016de2:	2300      	movs	r3, #0
10016de4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10016de8:	3c08      	subs	r4, #8
10016dea:	ea85 0501 	eor.w	r5, r5, r1
10016dee:	ea86 0601 	eor.w	r6, r6, r1
10016df2:	fa85 f547 	uadd8	r5, r5, r7
10016df6:	faa3 f587 	sel	r5, r3, r7
10016dfa:	fa86 f647 	uadd8	r6, r6, r7
10016dfe:	faa5 f687 	sel	r6, r5, r7
10016e02:	b98e      	cbnz	r6, 10016e28 <memchr+0x78>
10016e04:	d1ee      	bne.n	10016de4 <memchr+0x34>
10016e06:	bcf0      	pop	{r4, r5, r6, r7}
10016e08:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10016e0c:	f002 0207 	and.w	r2, r2, #7
10016e10:	b132      	cbz	r2, 10016e20 <memchr+0x70>
10016e12:	f810 3b01 	ldrb.w	r3, [r0], #1
10016e16:	3a01      	subs	r2, #1
10016e18:	ea83 0301 	eor.w	r3, r3, r1
10016e1c:	b113      	cbz	r3, 10016e24 <memchr+0x74>
10016e1e:	d1f8      	bne.n	10016e12 <memchr+0x62>
10016e20:	2000      	movs	r0, #0
10016e22:	4770      	bx	lr
10016e24:	3801      	subs	r0, #1
10016e26:	4770      	bx	lr
10016e28:	2d00      	cmp	r5, #0
10016e2a:	bf06      	itte	eq
10016e2c:	4635      	moveq	r5, r6
10016e2e:	3803      	subeq	r0, #3
10016e30:	3807      	subne	r0, #7
10016e32:	f015 0f01 	tst.w	r5, #1
10016e36:	d107      	bne.n	10016e48 <memchr+0x98>
10016e38:	3001      	adds	r0, #1
10016e3a:	f415 7f80 	tst.w	r5, #256	@ 0x100
10016e3e:	bf02      	ittt	eq
10016e40:	3001      	addeq	r0, #1
10016e42:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
10016e46:	3001      	addeq	r0, #1
10016e48:	bcf0      	pop	{r4, r5, r6, r7}
10016e4a:	3801      	subs	r0, #1
10016e4c:	4770      	bx	lr
10016e4e:	bf00      	nop

10016e50 <memcpy>:
10016e50:	4684      	mov	ip, r0
10016e52:	ea41 0300 	orr.w	r3, r1, r0
10016e56:	f013 0303 	ands.w	r3, r3, #3
10016e5a:	d16d      	bne.n	10016f38 <memcpy+0xe8>
10016e5c:	3a40      	subs	r2, #64	@ 0x40
10016e5e:	d341      	bcc.n	10016ee4 <memcpy+0x94>
10016e60:	f851 3b04 	ldr.w	r3, [r1], #4
10016e64:	f840 3b04 	str.w	r3, [r0], #4
10016e68:	f851 3b04 	ldr.w	r3, [r1], #4
10016e6c:	f840 3b04 	str.w	r3, [r0], #4
10016e70:	f851 3b04 	ldr.w	r3, [r1], #4
10016e74:	f840 3b04 	str.w	r3, [r0], #4
10016e78:	f851 3b04 	ldr.w	r3, [r1], #4
10016e7c:	f840 3b04 	str.w	r3, [r0], #4
10016e80:	f851 3b04 	ldr.w	r3, [r1], #4
10016e84:	f840 3b04 	str.w	r3, [r0], #4
10016e88:	f851 3b04 	ldr.w	r3, [r1], #4
10016e8c:	f840 3b04 	str.w	r3, [r0], #4
10016e90:	f851 3b04 	ldr.w	r3, [r1], #4
10016e94:	f840 3b04 	str.w	r3, [r0], #4
10016e98:	f851 3b04 	ldr.w	r3, [r1], #4
10016e9c:	f840 3b04 	str.w	r3, [r0], #4
10016ea0:	f851 3b04 	ldr.w	r3, [r1], #4
10016ea4:	f840 3b04 	str.w	r3, [r0], #4
10016ea8:	f851 3b04 	ldr.w	r3, [r1], #4
10016eac:	f840 3b04 	str.w	r3, [r0], #4
10016eb0:	f851 3b04 	ldr.w	r3, [r1], #4
10016eb4:	f840 3b04 	str.w	r3, [r0], #4
10016eb8:	f851 3b04 	ldr.w	r3, [r1], #4
10016ebc:	f840 3b04 	str.w	r3, [r0], #4
10016ec0:	f851 3b04 	ldr.w	r3, [r1], #4
10016ec4:	f840 3b04 	str.w	r3, [r0], #4
10016ec8:	f851 3b04 	ldr.w	r3, [r1], #4
10016ecc:	f840 3b04 	str.w	r3, [r0], #4
10016ed0:	f851 3b04 	ldr.w	r3, [r1], #4
10016ed4:	f840 3b04 	str.w	r3, [r0], #4
10016ed8:	f851 3b04 	ldr.w	r3, [r1], #4
10016edc:	f840 3b04 	str.w	r3, [r0], #4
10016ee0:	3a40      	subs	r2, #64	@ 0x40
10016ee2:	d2bd      	bcs.n	10016e60 <memcpy+0x10>
10016ee4:	3230      	adds	r2, #48	@ 0x30
10016ee6:	d311      	bcc.n	10016f0c <memcpy+0xbc>
10016ee8:	f851 3b04 	ldr.w	r3, [r1], #4
10016eec:	f840 3b04 	str.w	r3, [r0], #4
10016ef0:	f851 3b04 	ldr.w	r3, [r1], #4
10016ef4:	f840 3b04 	str.w	r3, [r0], #4
10016ef8:	f851 3b04 	ldr.w	r3, [r1], #4
10016efc:	f840 3b04 	str.w	r3, [r0], #4
10016f00:	f851 3b04 	ldr.w	r3, [r1], #4
10016f04:	f840 3b04 	str.w	r3, [r0], #4
10016f08:	3a10      	subs	r2, #16
10016f0a:	d2ed      	bcs.n	10016ee8 <memcpy+0x98>
10016f0c:	320c      	adds	r2, #12
10016f0e:	d305      	bcc.n	10016f1c <memcpy+0xcc>
10016f10:	f851 3b04 	ldr.w	r3, [r1], #4
10016f14:	f840 3b04 	str.w	r3, [r0], #4
10016f18:	3a04      	subs	r2, #4
10016f1a:	d2f9      	bcs.n	10016f10 <memcpy+0xc0>
10016f1c:	3204      	adds	r2, #4
10016f1e:	d008      	beq.n	10016f32 <memcpy+0xe2>
10016f20:	07d2      	lsls	r2, r2, #31
10016f22:	bf1c      	itt	ne
10016f24:	f811 3b01 	ldrbne.w	r3, [r1], #1
10016f28:	f800 3b01 	strbne.w	r3, [r0], #1
10016f2c:	d301      	bcc.n	10016f32 <memcpy+0xe2>
10016f2e:	880b      	ldrh	r3, [r1, #0]
10016f30:	8003      	strh	r3, [r0, #0]
10016f32:	4660      	mov	r0, ip
10016f34:	4770      	bx	lr
10016f36:	bf00      	nop
10016f38:	2a08      	cmp	r2, #8
10016f3a:	d313      	bcc.n	10016f64 <memcpy+0x114>
10016f3c:	078b      	lsls	r3, r1, #30
10016f3e:	d08d      	beq.n	10016e5c <memcpy+0xc>
10016f40:	f010 0303 	ands.w	r3, r0, #3
10016f44:	d08a      	beq.n	10016e5c <memcpy+0xc>
10016f46:	f1c3 0304 	rsb	r3, r3, #4
10016f4a:	1ad2      	subs	r2, r2, r3
10016f4c:	07db      	lsls	r3, r3, #31
10016f4e:	bf1c      	itt	ne
10016f50:	f811 3b01 	ldrbne.w	r3, [r1], #1
10016f54:	f800 3b01 	strbne.w	r3, [r0], #1
10016f58:	d380      	bcc.n	10016e5c <memcpy+0xc>
10016f5a:	f831 3b02 	ldrh.w	r3, [r1], #2
10016f5e:	f820 3b02 	strh.w	r3, [r0], #2
10016f62:	e77b      	b.n	10016e5c <memcpy+0xc>
10016f64:	3a04      	subs	r2, #4
10016f66:	d3d9      	bcc.n	10016f1c <memcpy+0xcc>
10016f68:	3a01      	subs	r2, #1
10016f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
10016f6e:	f800 3b01 	strb.w	r3, [r0], #1
10016f72:	d2f9      	bcs.n	10016f68 <memcpy+0x118>
10016f74:	780b      	ldrb	r3, [r1, #0]
10016f76:	7003      	strb	r3, [r0, #0]
10016f78:	784b      	ldrb	r3, [r1, #1]
10016f7a:	7043      	strb	r3, [r0, #1]
10016f7c:	788b      	ldrb	r3, [r1, #2]
10016f7e:	7083      	strb	r3, [r0, #2]
10016f80:	4660      	mov	r0, ip
10016f82:	4770      	bx	lr
	...

10016fc0 <strlen>:
10016fc0:	b430      	push	{r4, r5}
10016fc2:	f890 f000 	pld	[r0]
10016fc6:	f020 0107 	bic.w	r1, r0, #7
10016fca:	f06f 0c00 	mvn.w	ip, #0
10016fce:	f010 0407 	ands.w	r4, r0, #7
10016fd2:	f891 f020 	pld	[r1, #32]
10016fd6:	f040 8048 	bne.w	1001706a <strlen+0xaa>
10016fda:	f04f 0400 	mov.w	r4, #0
10016fde:	f06f 0007 	mvn.w	r0, #7
10016fe2:	e9d1 2300 	ldrd	r2, r3, [r1]
10016fe6:	f891 f040 	pld	[r1, #64]	@ 0x40
10016fea:	f100 0008 	add.w	r0, r0, #8
10016fee:	fa82 f24c 	uadd8	r2, r2, ip
10016ff2:	faa4 f28c 	sel	r2, r4, ip
10016ff6:	fa83 f34c 	uadd8	r3, r3, ip
10016ffa:	faa2 f38c 	sel	r3, r2, ip
10016ffe:	bb4b      	cbnz	r3, 10017054 <strlen+0x94>
10017000:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
10017004:	fa82 f24c 	uadd8	r2, r2, ip
10017008:	f100 0008 	add.w	r0, r0, #8
1001700c:	faa4 f28c 	sel	r2, r4, ip
10017010:	fa83 f34c 	uadd8	r3, r3, ip
10017014:	faa2 f38c 	sel	r3, r2, ip
10017018:	b9e3      	cbnz	r3, 10017054 <strlen+0x94>
1001701a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1001701e:	fa82 f24c 	uadd8	r2, r2, ip
10017022:	f100 0008 	add.w	r0, r0, #8
10017026:	faa4 f28c 	sel	r2, r4, ip
1001702a:	fa83 f34c 	uadd8	r3, r3, ip
1001702e:	faa2 f38c 	sel	r3, r2, ip
10017032:	b97b      	cbnz	r3, 10017054 <strlen+0x94>
10017034:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
10017038:	f101 0120 	add.w	r1, r1, #32
1001703c:	fa82 f24c 	uadd8	r2, r2, ip
10017040:	f100 0008 	add.w	r0, r0, #8
10017044:	faa4 f28c 	sel	r2, r4, ip
10017048:	fa83 f34c 	uadd8	r3, r3, ip
1001704c:	faa2 f38c 	sel	r3, r2, ip
10017050:	2b00      	cmp	r3, #0
10017052:	d0c6      	beq.n	10016fe2 <strlen+0x22>
10017054:	2a00      	cmp	r2, #0
10017056:	bf04      	itt	eq
10017058:	3004      	addeq	r0, #4
1001705a:	461a      	moveq	r2, r3
1001705c:	ba12      	rev	r2, r2
1001705e:	fab2 f282 	clz	r2, r2
10017062:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
10017066:	bc30      	pop	{r4, r5}
10017068:	4770      	bx	lr
1001706a:	e9d1 2300 	ldrd	r2, r3, [r1]
1001706e:	f004 0503 	and.w	r5, r4, #3
10017072:	f1c4 0000 	rsb	r0, r4, #0
10017076:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1001707a:	f014 0f04 	tst.w	r4, #4
1001707e:	f891 f040 	pld	[r1, #64]	@ 0x40
10017082:	fa0c f505 	lsl.w	r5, ip, r5
10017086:	ea62 0205 	orn	r2, r2, r5
1001708a:	bf1c      	itt	ne
1001708c:	ea63 0305 	ornne	r3, r3, r5
10017090:	4662      	movne	r2, ip
10017092:	f04f 0400 	mov.w	r4, #0
10017096:	e7aa      	b.n	10016fee <strlen+0x2e>

10017098 <_wcrtomb_r>:
10017098:	b570      	push	{r4, r5, r6, lr}
1001709a:	4605      	mov	r5, r0
1001709c:	b084      	sub	sp, #16
1001709e:	b15b      	cbz	r3, 100170b8 <_wcrtomb_r+0x20>
100170a0:	461c      	mov	r4, r3
100170a2:	4b0f      	ldr	r3, [pc, #60]	@ (100170e0 <_wcrtomb_r+0x48>)
100170a4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
100170a8:	4623      	mov	r3, r4
100170aa:	b169      	cbz	r1, 100170c8 <_wcrtomb_r+0x30>
100170ac:	4628      	mov	r0, r5
100170ae:	47b0      	blx	r6
100170b0:	1c43      	adds	r3, r0, #1
100170b2:	d00f      	beq.n	100170d4 <_wcrtomb_r+0x3c>
100170b4:	b004      	add	sp, #16
100170b6:	bd70      	pop	{r4, r5, r6, pc}
100170b8:	4b09      	ldr	r3, [pc, #36]	@ (100170e0 <_wcrtomb_r+0x48>)
100170ba:	f500 7482 	add.w	r4, r0, #260	@ 0x104
100170be:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
100170c2:	4623      	mov	r3, r4
100170c4:	2900      	cmp	r1, #0
100170c6:	d1f1      	bne.n	100170ac <_wcrtomb_r+0x14>
100170c8:	460a      	mov	r2, r1
100170ca:	4628      	mov	r0, r5
100170cc:	a901      	add	r1, sp, #4
100170ce:	47b0      	blx	r6
100170d0:	1c43      	adds	r3, r0, #1
100170d2:	d1ef      	bne.n	100170b4 <_wcrtomb_r+0x1c>
100170d4:	2200      	movs	r2, #0
100170d6:	238a      	movs	r3, #138	@ 0x8a
100170d8:	6022      	str	r2, [r4, #0]
100170da:	602b      	str	r3, [r5, #0]
100170dc:	b004      	add	sp, #16
100170de:	bd70      	pop	{r4, r5, r6, pc}
100170e0:	20000494 	.word	0x20000494

100170e4 <_wcsrtombs_r>:
100170e4:	b510      	push	{r4, lr}
100170e6:	b082      	sub	sp, #8
100170e8:	9c04      	ldr	r4, [sp, #16]
100170ea:	e9cd 3400 	strd	r3, r4, [sp]
100170ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100170f2:	f003 fd87 	bl	1001ac04 <_wcsnrtombs_r>
100170f6:	b002      	add	sp, #8
100170f8:	bd10      	pop	{r4, pc}
100170fa:	bf00      	nop

100170fc <frexp>:
100170fc:	f8df c064 	ldr.w	ip, [pc, #100]	@ 10017164 <frexp+0x68>
10017100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017102:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
10017106:	2700      	movs	r7, #0
10017108:	4563      	cmp	r3, ip
1001710a:	4604      	mov	r4, r0
1001710c:	460d      	mov	r5, r1
1001710e:	4616      	mov	r6, r2
10017110:	6017      	str	r7, [r2, #0]
10017112:	d822      	bhi.n	1001715a <frexp+0x5e>
10017114:	4684      	mov	ip, r0
10017116:	ea53 0c0c 	orrs.w	ip, r3, ip
1001711a:	d01e      	beq.n	1001715a <frexp+0x5e>
1001711c:	f8df c048 	ldr.w	ip, [pc, #72]	@ 10017168 <frexp+0x6c>
10017120:	ea01 0c0c 	and.w	ip, r1, ip
10017124:	460a      	mov	r2, r1
10017126:	f1bc 0f00 	cmp.w	ip, #0
1001712a:	d109      	bne.n	10017140 <frexp+0x44>
1001712c:	4b0c      	ldr	r3, [pc, #48]	@ (10017160 <frexp+0x64>)
1001712e:	2200      	movs	r2, #0
10017130:	f004 f88c 	bl	1001b24c <__aeabi_dmul>
10017134:	f06f 0735 	mvn.w	r7, #53	@ 0x35
10017138:	4604      	mov	r4, r0
1001713a:	460a      	mov	r2, r1
1001713c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
10017140:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
10017144:	151b      	asrs	r3, r3, #20
10017146:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
1001714a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
1001714e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
10017152:	443b      	add	r3, r7
10017154:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
10017158:	6033      	str	r3, [r6, #0]
1001715a:	4620      	mov	r0, r4
1001715c:	4629      	mov	r1, r5
1001715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10017160:	43500000 	.word	0x43500000
10017164:	7fefffff 	.word	0x7fefffff
10017168:	7ff00000 	.word	0x7ff00000

1001716c <register_fini>:
1001716c:	4b02      	ldr	r3, [pc, #8]	@ (10017178 <register_fini+0xc>)
1001716e:	b113      	cbz	r3, 10017176 <register_fini+0xa>
10017170:	4802      	ldr	r0, [pc, #8]	@ (1001717c <register_fini+0x10>)
10017172:	f000 b805 	b.w	10017180 <atexit>
10017176:	4770      	bx	lr
10017178:	00000000 	.word	0x00000000
1001717c:	1001aae1 	.word	0x1001aae1

10017180 <atexit>:
10017180:	2300      	movs	r3, #0
10017182:	4601      	mov	r1, r0
10017184:	461a      	mov	r2, r3
10017186:	4618      	mov	r0, r3
10017188:	f003 bd4e 	b.w	1001ac28 <__register_exitproc>

1001718c <quorem>:
1001718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10017190:	6903      	ldr	r3, [r0, #16]
10017192:	690c      	ldr	r4, [r1, #16]
10017194:	42a3      	cmp	r3, r4
10017196:	b083      	sub	sp, #12
10017198:	f2c0 808a 	blt.w	100172b0 <quorem+0x124>
1001719c:	3c01      	subs	r4, #1
1001719e:	f101 0514 	add.w	r5, r1, #20
100171a2:	f100 0814 	add.w	r8, r0, #20
100171a6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
100171aa:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
100171ae:	3301      	adds	r3, #1
100171b0:	429a      	cmp	r2, r3
100171b2:	468e      	mov	lr, r1
100171b4:	4681      	mov	r9, r0
100171b6:	ea4f 0184 	mov.w	r1, r4, lsl #2
100171ba:	eb05 0784 	add.w	r7, r5, r4, lsl #2
100171be:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
100171c2:	fbb2 f6f3 	udiv	r6, r2, r3
100171c6:	d33a      	bcc.n	1001723e <quorem+0xb2>
100171c8:	e9cd 1500 	strd	r1, r5, [sp]
100171cc:	2200      	movs	r2, #0
100171ce:	46ac      	mov	ip, r5
100171d0:	4640      	mov	r0, r8
100171d2:	4613      	mov	r3, r2
100171d4:	f85c 1b04 	ldr.w	r1, [ip], #4
100171d8:	6805      	ldr	r5, [r0, #0]
100171da:	fa1f fb81 	uxth.w	fp, r1
100171de:	fb06 220b 	mla	r2, r6, fp, r2
100171e2:	0c09      	lsrs	r1, r1, #16
100171e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
100171e8:	fb06 bb01 	mla	fp, r6, r1, fp
100171ec:	b292      	uxth	r2, r2
100171ee:	b2a9      	uxth	r1, r5
100171f0:	1a89      	subs	r1, r1, r2
100171f2:	4419      	add	r1, r3
100171f4:	fa1f f38b 	uxth.w	r3, fp
100171f8:	ebc3 4321 	rsb	r3, r3, r1, asr #16
100171fc:	eb03 4315 	add.w	r3, r3, r5, lsr #16
10017200:	b289      	uxth	r1, r1
10017202:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
10017206:	4567      	cmp	r7, ip
10017208:	f840 1b04 	str.w	r1, [r0], #4
1001720c:	ea4f 421b 	mov.w	r2, fp, lsr #16
10017210:	ea4f 4323 	mov.w	r3, r3, asr #16
10017214:	d2de      	bcs.n	100171d4 <quorem+0x48>
10017216:	e9dd 1500 	ldrd	r1, r5, [sp]
1001721a:	f858 3001 	ldr.w	r3, [r8, r1]
1001721e:	b973      	cbnz	r3, 1001723e <quorem+0xb2>
10017220:	f1aa 0a04 	sub.w	sl, sl, #4
10017224:	45d0      	cmp	r8, sl
10017226:	d304      	bcc.n	10017232 <quorem+0xa6>
10017228:	e007      	b.n	1001723a <quorem+0xae>
1001722a:	45d0      	cmp	r8, sl
1001722c:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
10017230:	d203      	bcs.n	1001723a <quorem+0xae>
10017232:	f85a 3904 	ldr.w	r3, [sl], #-4
10017236:	2b00      	cmp	r3, #0
10017238:	d0f7      	beq.n	1001722a <quorem+0x9e>
1001723a:	f8c9 4010 	str.w	r4, [r9, #16]
1001723e:	4671      	mov	r1, lr
10017240:	4648      	mov	r0, r9
10017242:	f003 f993 	bl	1001a56c <__mcmp>
10017246:	2800      	cmp	r0, #0
10017248:	db2e      	blt.n	100172a8 <quorem+0x11c>
1001724a:	4641      	mov	r1, r8
1001724c:	2200      	movs	r2, #0
1001724e:	f855 0b04 	ldr.w	r0, [r5], #4
10017252:	f8d1 c000 	ldr.w	ip, [r1]
10017256:	fa1f fe80 	uxth.w	lr, r0
1001725a:	fa1f f38c 	uxth.w	r3, ip
1001725e:	eba3 030e 	sub.w	r3, r3, lr
10017262:	4413      	add	r3, r2
10017264:	0c02      	lsrs	r2, r0, #16
10017266:	ebc2 4223 	rsb	r2, r2, r3, asr #16
1001726a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
1001726e:	b29b      	uxth	r3, r3
10017270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10017274:	42af      	cmp	r7, r5
10017276:	f841 3b04 	str.w	r3, [r1], #4
1001727a:	ea4f 4222 	mov.w	r2, r2, asr #16
1001727e:	d2e6      	bcs.n	1001724e <quorem+0xc2>
10017280:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
10017284:	eb08 0384 	add.w	r3, r8, r4, lsl #2
10017288:	b96a      	cbnz	r2, 100172a6 <quorem+0x11a>
1001728a:	3b04      	subs	r3, #4
1001728c:	4598      	cmp	r8, r3
1001728e:	d304      	bcc.n	1001729a <quorem+0x10e>
10017290:	e007      	b.n	100172a2 <quorem+0x116>
10017292:	4598      	cmp	r8, r3
10017294:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
10017298:	d203      	bcs.n	100172a2 <quorem+0x116>
1001729a:	f853 2904 	ldr.w	r2, [r3], #-4
1001729e:	2a00      	cmp	r2, #0
100172a0:	d0f7      	beq.n	10017292 <quorem+0x106>
100172a2:	f8c9 4010 	str.w	r4, [r9, #16]
100172a6:	3601      	adds	r6, #1
100172a8:	4630      	mov	r0, r6
100172aa:	b003      	add	sp, #12
100172ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100172b0:	2000      	movs	r0, #0
100172b2:	b003      	add	sp, #12
100172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

100172b8 <_dtoa_r>:
100172b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100172bc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
100172be:	b09d      	sub	sp, #116	@ 0x74
100172c0:	4616      	mov	r6, r2
100172c2:	461f      	mov	r7, r3
100172c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
100172c8:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
100172ca:	9002      	str	r0, [sp, #8]
100172cc:	b149      	cbz	r1, 100172e2 <_dtoa_r+0x2a>
100172ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
100172d0:	604a      	str	r2, [r1, #4]
100172d2:	2301      	movs	r3, #1
100172d4:	4093      	lsls	r3, r2
100172d6:	4604      	mov	r4, r0
100172d8:	608b      	str	r3, [r1, #8]
100172da:	f002 fee5 	bl	1001a0a8 <_Bfree>
100172de:	2300      	movs	r3, #0
100172e0:	63a3      	str	r3, [r4, #56]	@ 0x38
100172e2:	f1b7 0900 	subs.w	r9, r7, #0
100172e6:	bfb4      	ite	lt
100172e8:	2301      	movlt	r3, #1
100172ea:	2300      	movge	r3, #0
100172ec:	602b      	str	r3, [r5, #0]
100172ee:	4b76      	ldr	r3, [pc, #472]	@ (100174c8 <_dtoa_r+0x210>)
100172f0:	bfbc      	itt	lt
100172f2:	f029 4900 	biclt.w	r9, r9, #2147483648	@ 0x80000000
100172f6:	f8cd 9014 	strlt.w	r9, [sp, #20]
100172fa:	ea33 0309 	bics.w	r3, r3, r9
100172fe:	f000 80aa 	beq.w	10017456 <_dtoa_r+0x19e>
10017302:	ed9d 7b04 	vldr	d7, [sp, #16]
10017306:	2200      	movs	r2, #0
10017308:	ec51 0b17 	vmov	r0, r1, d7
1001730c:	2300      	movs	r3, #0
1001730e:	ed8d 7b06 	vstr	d7, [sp, #24]
10017312:	f004 fa03 	bl	1001b71c <__aeabi_dcmpeq>
10017316:	4680      	mov	r8, r0
10017318:	b168      	cbz	r0, 10017336 <_dtoa_r+0x7e>
1001731a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
1001731c:	2301      	movs	r3, #1
1001731e:	6013      	str	r3, [r2, #0]
10017320:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
10017322:	b113      	cbz	r3, 1001732a <_dtoa_r+0x72>
10017324:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
10017326:	4b69      	ldr	r3, [pc, #420]	@ (100174cc <_dtoa_r+0x214>)
10017328:	6013      	str	r3, [r2, #0]
1001732a:	4b69      	ldr	r3, [pc, #420]	@ (100174d0 <_dtoa_r+0x218>)
1001732c:	9303      	str	r3, [sp, #12]
1001732e:	9803      	ldr	r0, [sp, #12]
10017330:	b01d      	add	sp, #116	@ 0x74
10017332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10017336:	ab1a      	add	r3, sp, #104	@ 0x68
10017338:	9301      	str	r3, [sp, #4]
1001733a:	ab1b      	add	r3, sp, #108	@ 0x6c
1001733c:	9300      	str	r3, [sp, #0]
1001733e:	9802      	ldr	r0, [sp, #8]
10017340:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
10017344:	f003 f9e6 	bl	1001a714 <__d2b>
10017348:	ea5f 5519 	movs.w	r5, r9, lsr #20
1001734c:	4682      	mov	sl, r0
1001734e:	f040 8098 	bne.w	10017482 <_dtoa_r+0x1ca>
10017352:	e9dd 851a 	ldrd	r8, r5, [sp, #104]	@ 0x68
10017356:	4445      	add	r5, r8
10017358:	f205 4332 	addw	r3, r5, #1074	@ 0x432
1001735c:	2b20      	cmp	r3, #32
1001735e:	f340 8381 	ble.w	10017a64 <_dtoa_r+0x7ac>
10017362:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
10017366:	fa09 f903 	lsl.w	r9, r9, r3
1001736a:	f205 4312 	addw	r3, r5, #1042	@ 0x412
1001736e:	fa26 f303 	lsr.w	r3, r6, r3
10017372:	ea49 0003 	orr.w	r0, r9, r3
10017376:	f003 feef 	bl	1001b158 <__aeabi_ui2d>
1001737a:	2301      	movs	r3, #1
1001737c:	3d01      	subs	r5, #1
1001737e:	930f      	str	r3, [sp, #60]	@ 0x3c
10017380:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
10017384:	4b53      	ldr	r3, [pc, #332]	@ (100174d4 <_dtoa_r+0x21c>)
10017386:	2200      	movs	r2, #0
10017388:	f003 fda8 	bl	1001aedc <__aeabi_dsub>
1001738c:	a348      	add	r3, pc, #288	@ (adr r3, 100174b0 <_dtoa_r+0x1f8>)
1001738e:	e9d3 2300 	ldrd	r2, r3, [r3]
10017392:	f003 ff5b 	bl	1001b24c <__aeabi_dmul>
10017396:	a348      	add	r3, pc, #288	@ (adr r3, 100174b8 <_dtoa_r+0x200>)
10017398:	e9d3 2300 	ldrd	r2, r3, [r3]
1001739c:	f003 fda0 	bl	1001aee0 <__adddf3>
100173a0:	4606      	mov	r6, r0
100173a2:	4628      	mov	r0, r5
100173a4:	460f      	mov	r7, r1
100173a6:	f003 fee7 	bl	1001b178 <__aeabi_i2d>
100173aa:	a345      	add	r3, pc, #276	@ (adr r3, 100174c0 <_dtoa_r+0x208>)
100173ac:	e9d3 2300 	ldrd	r2, r3, [r3]
100173b0:	f003 ff4c 	bl	1001b24c <__aeabi_dmul>
100173b4:	4602      	mov	r2, r0
100173b6:	460b      	mov	r3, r1
100173b8:	4630      	mov	r0, r6
100173ba:	4639      	mov	r1, r7
100173bc:	f003 fd90 	bl	1001aee0 <__adddf3>
100173c0:	4606      	mov	r6, r0
100173c2:	460f      	mov	r7, r1
100173c4:	f004 f9f2 	bl	1001b7ac <__aeabi_d2iz>
100173c8:	2200      	movs	r2, #0
100173ca:	4683      	mov	fp, r0
100173cc:	2300      	movs	r3, #0
100173ce:	4630      	mov	r0, r6
100173d0:	4639      	mov	r1, r7
100173d2:	f004 f9ad 	bl	1001b730 <__aeabi_dcmplt>
100173d6:	2800      	cmp	r0, #0
100173d8:	f040 8318 	bne.w	10017a0c <_dtoa_r+0x754>
100173dc:	eba8 0805 	sub.w	r8, r8, r5
100173e0:	f1bb 0f16 	cmp.w	fp, #22
100173e4:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
100173e8:	f200 818a 	bhi.w	10017700 <_dtoa_r+0x448>
100173ec:	4d3a      	ldr	r5, [pc, #232]	@ (100174d8 <_dtoa_r+0x220>)
100173ee:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
100173f2:	e9d5 2300 	ldrd	r2, r3, [r5]
100173f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
100173fa:	f004 f999 	bl	1001b730 <__aeabi_dcmplt>
100173fe:	2800      	cmp	r0, #0
10017400:	d070      	beq.n	100174e4 <_dtoa_r+0x22c>
10017402:	2300      	movs	r3, #0
10017404:	2c00      	cmp	r4, #0
10017406:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
1001740a:	930e      	str	r3, [sp, #56]	@ 0x38
1001740c:	f2c0 817d 	blt.w	1001770a <_dtoa_r+0x452>
10017410:	2300      	movs	r3, #0
10017412:	9309      	str	r3, [sp, #36]	@ 0x24
10017414:	f1bb 0f00 	cmp.w	fp, #0
10017418:	da6a      	bge.n	100174f0 <_dtoa_r+0x238>
1001741a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001741c:	eba3 030b 	sub.w	r3, r3, fp
10017420:	9309      	str	r3, [sp, #36]	@ 0x24
10017422:	f1cb 0300 	rsb	r3, fp, #0
10017426:	e9cd b30c 	strd	fp, r3, [sp, #48]	@ 0x30
1001742a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
1001742c:	2b09      	cmp	r3, #9
1001742e:	f04f 0b00 	mov.w	fp, #0
10017432:	d865      	bhi.n	10017500 <_dtoa_r+0x248>
10017434:	2b05      	cmp	r3, #5
10017436:	f340 831a 	ble.w	10017a6e <_dtoa_r+0x7b6>
1001743a:	3b04      	subs	r3, #4
1001743c:	9326      	str	r3, [sp, #152]	@ 0x98
1001743e:	2500      	movs	r5, #0
10017440:	9b26      	ldr	r3, [sp, #152]	@ 0x98
10017442:	3b02      	subs	r3, #2
10017444:	2b03      	cmp	r3, #3
10017446:	f200 8621 	bhi.w	1001808c <_dtoa_r+0xdd4>
1001744a:	e8df f013 	tbh	[pc, r3, lsl #1]
1001744e:	045e      	.short	0x045e
10017450:	0452045b 	.word	0x0452045b
10017454:	0436      	.short	0x0436
10017456:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
10017458:	f3c9 0913 	ubfx	r9, r9, #0, #20
1001745c:	f242 730f 	movw	r3, #9999	@ 0x270f
10017460:	ea59 0906 	orrs.w	r9, r9, r6
10017464:	6013      	str	r3, [r2, #0]
10017466:	d11c      	bne.n	100174a2 <_dtoa_r+0x1ea>
10017468:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
1001746a:	2b00      	cmp	r3, #0
1001746c:	f000 8629 	beq.w	100180c2 <_dtoa_r+0xe0a>
10017470:	4b1a      	ldr	r3, [pc, #104]	@ (100174dc <_dtoa_r+0x224>)
10017472:	9303      	str	r3, [sp, #12]
10017474:	3308      	adds	r3, #8
10017476:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
10017478:	9803      	ldr	r0, [sp, #12]
1001747a:	6013      	str	r3, [r2, #0]
1001747c:	b01d      	add	sp, #116	@ 0x74
1001747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10017482:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
10017486:	f3c2 0313 	ubfx	r3, r2, #0, #20
1001748a:	4608      	mov	r0, r1
1001748c:	f043 517f 	orr.w	r1, r3, #1069547520	@ 0x3fc00000
10017490:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
10017494:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
10017498:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
1001749c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
100174a0:	e770      	b.n	10017384 <_dtoa_r+0xcc>
100174a2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
100174a4:	2b00      	cmp	r3, #0
100174a6:	f040 83e5 	bne.w	10017c74 <_dtoa_r+0x9bc>
100174aa:	4b0d      	ldr	r3, [pc, #52]	@ (100174e0 <_dtoa_r+0x228>)
100174ac:	9303      	str	r3, [sp, #12]
100174ae:	e73e      	b.n	1001732e <_dtoa_r+0x76>
100174b0:	636f4361 	.word	0x636f4361
100174b4:	3fd287a7 	.word	0x3fd287a7
100174b8:	8b60c8b3 	.word	0x8b60c8b3
100174bc:	3fc68a28 	.word	0x3fc68a28
100174c0:	509f79fb 	.word	0x509f79fb
100174c4:	3fd34413 	.word	0x3fd34413
100174c8:	7ff00000 	.word	0x7ff00000
100174cc:	1001bcbd 	.word	0x1001bcbd
100174d0:	1001bcbc 	.word	0x1001bcbc
100174d4:	3ff80000 	.word	0x3ff80000
100174d8:	10023d48 	.word	0x10023d48
100174dc:	10023c04 	.word	0x10023c04
100174e0:	10023c10 	.word	0x10023c10
100174e4:	f1b8 0f00 	cmp.w	r8, #0
100174e8:	f340 845e 	ble.w	10017da8 <_dtoa_r+0xaf0>
100174ec:	900e      	str	r0, [sp, #56]	@ 0x38
100174ee:	9009      	str	r0, [sp, #36]	@ 0x24
100174f0:	2300      	movs	r3, #0
100174f2:	930d      	str	r3, [sp, #52]	@ 0x34
100174f4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
100174f6:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
100174fa:	2b09      	cmp	r3, #9
100174fc:	445c      	add	r4, fp
100174fe:	d999      	bls.n	10017434 <_dtoa_r+0x17c>
10017500:	2300      	movs	r3, #0
10017502:	e9cd 3326 	strd	r3, r3, [sp, #152]	@ 0x98
10017506:	2501      	movs	r5, #1
10017508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001750c:	950a      	str	r5, [sp, #40]	@ 0x28
1001750e:	9308      	str	r3, [sp, #32]
10017510:	9b02      	ldr	r3, [sp, #8]
10017512:	2100      	movs	r1, #0
10017514:	63d9      	str	r1, [r3, #60]	@ 0x3c
10017516:	9b08      	ldr	r3, [sp, #32]
10017518:	9316      	str	r3, [sp, #88]	@ 0x58
1001751a:	9802      	ldr	r0, [sp, #8]
1001751c:	f002 fd9e 	bl	1001a05c <_Balloc>
10017520:	9003      	str	r0, [sp, #12]
10017522:	2800      	cmp	r0, #0
10017524:	f000 85bb 	beq.w	1001809e <_dtoa_r+0xde6>
10017528:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
1001752c:	639a      	str	r2, [r3, #56]	@ 0x38
1001752e:	9b08      	ldr	r3, [sp, #32]
10017530:	2b0e      	cmp	r3, #14
10017532:	f200 8114 	bhi.w	1001775e <_dtoa_r+0x4a6>
10017536:	2d00      	cmp	r5, #0
10017538:	f000 8111 	beq.w	1001775e <_dtoa_r+0x4a6>
1001753c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1001753e:	2a00      	cmp	r2, #0
10017540:	f340 8439 	ble.w	10017db6 <_dtoa_r+0xafe>
10017544:	4db1      	ldr	r5, [pc, #708]	@ (1001780c <_dtoa_r+0x554>)
10017546:	f002 030f 	and.w	r3, r2, #15
1001754a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
1001754e:	1115      	asrs	r5, r2, #4
10017550:	05d2      	lsls	r2, r2, #23
10017552:	e9d3 8900 	ldrd	r8, r9, [r3]
10017556:	f140 83f9 	bpl.w	10017d4c <_dtoa_r+0xa94>
1001755a:	4bad      	ldr	r3, [pc, #692]	@ (10017810 <_dtoa_r+0x558>)
1001755c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
10017560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
10017564:	f003 ff9c 	bl	1001b4a0 <__aeabi_ddiv>
10017568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
1001756c:	f005 050f 	and.w	r5, r5, #15
10017570:	2703      	movs	r7, #3
10017572:	b17d      	cbz	r5, 10017594 <_dtoa_r+0x2dc>
10017574:	4ea6      	ldr	r6, [pc, #664]	@ (10017810 <_dtoa_r+0x558>)
10017576:	07eb      	lsls	r3, r5, #31
10017578:	d508      	bpl.n	1001758c <_dtoa_r+0x2d4>
1001757a:	4640      	mov	r0, r8
1001757c:	4649      	mov	r1, r9
1001757e:	e9d6 2300 	ldrd	r2, r3, [r6]
10017582:	f003 fe63 	bl	1001b24c <__aeabi_dmul>
10017586:	3701      	adds	r7, #1
10017588:	4680      	mov	r8, r0
1001758a:	4689      	mov	r9, r1
1001758c:	106d      	asrs	r5, r5, #1
1001758e:	f106 0608 	add.w	r6, r6, #8
10017592:	d1f0      	bne.n	10017576 <_dtoa_r+0x2be>
10017594:	4642      	mov	r2, r8
10017596:	464b      	mov	r3, r9
10017598:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
1001759c:	f003 ff80 	bl	1001b4a0 <__aeabi_ddiv>
100175a0:	4680      	mov	r8, r0
100175a2:	4689      	mov	r9, r1
100175a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100175a6:	b143      	cbz	r3, 100175ba <_dtoa_r+0x302>
100175a8:	4b9a      	ldr	r3, [pc, #616]	@ (10017814 <_dtoa_r+0x55c>)
100175aa:	2200      	movs	r2, #0
100175ac:	4640      	mov	r0, r8
100175ae:	4649      	mov	r1, r9
100175b0:	f004 f8be 	bl	1001b730 <__aeabi_dcmplt>
100175b4:	2800      	cmp	r0, #0
100175b6:	f040 84f0 	bne.w	10017f9a <_dtoa_r+0xce2>
100175ba:	4638      	mov	r0, r7
100175bc:	f003 fddc 	bl	1001b178 <__aeabi_i2d>
100175c0:	4642      	mov	r2, r8
100175c2:	464b      	mov	r3, r9
100175c4:	f003 fe42 	bl	1001b24c <__aeabi_dmul>
100175c8:	4b93      	ldr	r3, [pc, #588]	@ (10017818 <_dtoa_r+0x560>)
100175ca:	2200      	movs	r2, #0
100175cc:	f003 fc88 	bl	1001aee0 <__adddf3>
100175d0:	9b08      	ldr	r3, [sp, #32]
100175d2:	4606      	mov	r6, r0
100175d4:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
100175d8:	2b00      	cmp	r3, #0
100175da:	f000 80a9 	beq.w	10017730 <_dtoa_r+0x478>
100175de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100175e0:	9317      	str	r3, [sp, #92]	@ 0x5c
100175e2:	9b08      	ldr	r3, [sp, #32]
100175e4:	9310      	str	r3, [sp, #64]	@ 0x40
100175e6:	9b03      	ldr	r3, [sp, #12]
100175e8:	4d88      	ldr	r5, [pc, #544]	@ (1001780c <_dtoa_r+0x554>)
100175ea:	4649      	mov	r1, r9
100175ec:	4640      	mov	r0, r8
100175ee:	e9cd 6712 	strd	r6, r7, [sp, #72]	@ 0x48
100175f2:	1c5e      	adds	r6, r3, #1
100175f4:	f004 f8da 	bl	1001b7ac <__aeabi_d2iz>
100175f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
100175fa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
100175fe:	ed13 7b02 	vldr	d7, [r3, #-8]
10017602:	4607      	mov	r7, r0
10017604:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
10017608:	f003 fdb6 	bl	1001b178 <__aeabi_i2d>
1001760c:	4602      	mov	r2, r0
1001760e:	460b      	mov	r3, r1
10017610:	4640      	mov	r0, r8
10017612:	4649      	mov	r1, r9
10017614:	f003 fc62 	bl	1001aedc <__aeabi_dsub>
10017618:	4689      	mov	r9, r1
1001761a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1001761c:	3730      	adds	r7, #48	@ 0x30
1001761e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
10017622:	4680      	mov	r8, r0
10017624:	b2ff      	uxtb	r7, r7
10017626:	2900      	cmp	r1, #0
10017628:	f000 8452 	beq.w	10017ed0 <_dtoa_r+0xc18>
1001762c:	497b      	ldr	r1, [pc, #492]	@ (1001781c <_dtoa_r+0x564>)
1001762e:	2000      	movs	r0, #0
10017630:	f003 ff36 	bl	1001b4a0 <__aeabi_ddiv>
10017634:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
10017638:	f003 fc50 	bl	1001aedc <__aeabi_dsub>
1001763c:	9d03      	ldr	r5, [sp, #12]
1001763e:	4602      	mov	r2, r0
10017640:	460b      	mov	r3, r1
10017642:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
10017646:	702f      	strb	r7, [r5, #0]
10017648:	4642      	mov	r2, r8
1001764a:	464b      	mov	r3, r9
1001764c:	f004 f88e 	bl	1001b76c <__aeabi_dcmpgt>
10017650:	2800      	cmp	r0, #0
10017652:	f040 8496 	bne.w	10017f82 <_dtoa_r+0xcca>
10017656:	e9cd b418 	strd	fp, r4, [sp, #96]	@ 0x60
1001765a:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
1001765e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
10017660:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	@ 0x48
10017664:	2700      	movs	r7, #0
10017666:	e02a      	b.n	100176be <_dtoa_r+0x406>
10017668:	3701      	adds	r7, #1
1001766a:	42af      	cmp	r7, r5
1001766c:	f280 84dd 	bge.w	1001802a <_dtoa_r+0xd72>
10017670:	4b6b      	ldr	r3, [pc, #428]	@ (10017820 <_dtoa_r+0x568>)
10017672:	4650      	mov	r0, sl
10017674:	4659      	mov	r1, fp
10017676:	2200      	movs	r2, #0
10017678:	f003 fde8 	bl	1001b24c <__aeabi_dmul>
1001767c:	4b68      	ldr	r3, [pc, #416]	@ (10017820 <_dtoa_r+0x568>)
1001767e:	2200      	movs	r2, #0
10017680:	4682      	mov	sl, r0
10017682:	468b      	mov	fp, r1
10017684:	4640      	mov	r0, r8
10017686:	4649      	mov	r1, r9
10017688:	f003 fde0 	bl	1001b24c <__aeabi_dmul>
1001768c:	4689      	mov	r9, r1
1001768e:	4680      	mov	r8, r0
10017690:	f004 f88c 	bl	1001b7ac <__aeabi_d2iz>
10017694:	4604      	mov	r4, r0
10017696:	f003 fd6f 	bl	1001b178 <__aeabi_i2d>
1001769a:	4602      	mov	r2, r0
1001769c:	460b      	mov	r3, r1
1001769e:	4640      	mov	r0, r8
100176a0:	4649      	mov	r1, r9
100176a2:	f003 fc1b 	bl	1001aedc <__aeabi_dsub>
100176a6:	3430      	adds	r4, #48	@ 0x30
100176a8:	f806 4b01 	strb.w	r4, [r6], #1
100176ac:	4652      	mov	r2, sl
100176ae:	465b      	mov	r3, fp
100176b0:	4680      	mov	r8, r0
100176b2:	4689      	mov	r9, r1
100176b4:	f004 f83c 	bl	1001b730 <__aeabi_dcmplt>
100176b8:	2800      	cmp	r0, #0
100176ba:	f040 84b3 	bne.w	10018024 <_dtoa_r+0xd6c>
100176be:	4642      	mov	r2, r8
100176c0:	464b      	mov	r3, r9
100176c2:	4954      	ldr	r1, [pc, #336]	@ (10017814 <_dtoa_r+0x55c>)
100176c4:	2000      	movs	r0, #0
100176c6:	f003 fc09 	bl	1001aedc <__aeabi_dsub>
100176ca:	4652      	mov	r2, sl
100176cc:	465b      	mov	r3, fp
100176ce:	f004 f82f 	bl	1001b730 <__aeabi_dcmplt>
100176d2:	2800      	cmp	r0, #0
100176d4:	d0c8      	beq.n	10017668 <_dtoa_r+0x3b0>
100176d6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
100176d8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
100176dc:	9a03      	ldr	r2, [sp, #12]
100176de:	4637      	mov	r7, r6
100176e0:	f103 0801 	add.w	r8, r3, #1
100176e4:	e002      	b.n	100176ec <_dtoa_r+0x434>
100176e6:	4297      	cmp	r7, r2
100176e8:	f000 847b 	beq.w	10017fe2 <_dtoa_r+0xd2a>
100176ec:	463e      	mov	r6, r7
100176ee:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
100176f2:	2b39      	cmp	r3, #57	@ 0x39
100176f4:	d0f7      	beq.n	100176e6 <_dtoa_r+0x42e>
100176f6:	3301      	adds	r3, #1
100176f8:	b2db      	uxtb	r3, r3
100176fa:	703b      	strb	r3, [r7, #0]
100176fc:	4645      	mov	r5, r8
100176fe:	e174      	b.n	100179ea <_dtoa_r+0x732>
10017700:	2301      	movs	r3, #1
10017702:	2c00      	cmp	r4, #0
10017704:	930e      	str	r3, [sp, #56]	@ 0x38
10017706:	f6bf ae83 	bge.w	10017410 <_dtoa_r+0x158>
1001770a:	f1c8 0301 	rsb	r3, r8, #1
1001770e:	9309      	str	r3, [sp, #36]	@ 0x24
10017710:	2400      	movs	r4, #0
10017712:	e67f      	b.n	10017414 <_dtoa_r+0x15c>
10017714:	4638      	mov	r0, r7
10017716:	f003 fd2f 	bl	1001b178 <__aeabi_i2d>
1001771a:	4642      	mov	r2, r8
1001771c:	464b      	mov	r3, r9
1001771e:	f003 fd95 	bl	1001b24c <__aeabi_dmul>
10017722:	4b3d      	ldr	r3, [pc, #244]	@ (10017818 <_dtoa_r+0x560>)
10017724:	2200      	movs	r2, #0
10017726:	f003 fbdb 	bl	1001aee0 <__adddf3>
1001772a:	4606      	mov	r6, r0
1001772c:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
10017730:	4b3c      	ldr	r3, [pc, #240]	@ (10017824 <_dtoa_r+0x56c>)
10017732:	4640      	mov	r0, r8
10017734:	4649      	mov	r1, r9
10017736:	2200      	movs	r2, #0
10017738:	f003 fbd0 	bl	1001aedc <__aeabi_dsub>
1001773c:	4632      	mov	r2, r6
1001773e:	463b      	mov	r3, r7
10017740:	4680      	mov	r8, r0
10017742:	4689      	mov	r9, r1
10017744:	f004 f812 	bl	1001b76c <__aeabi_dcmpgt>
10017748:	2800      	cmp	r0, #0
1001774a:	f040 8459 	bne.w	10018000 <_dtoa_r+0xd48>
1001774e:	4640      	mov	r0, r8
10017750:	4649      	mov	r1, r9
10017752:	4632      	mov	r2, r6
10017754:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
10017758:	f003 ffea 	bl	1001b730 <__aeabi_dcmplt>
1001775c:	bb28      	cbnz	r0, 100177aa <_dtoa_r+0x4f2>
1001775e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10017760:	2b00      	cmp	r3, #0
10017762:	f2c0 8091 	blt.w	10017888 <_dtoa_r+0x5d0>
10017766:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10017768:	2a0e      	cmp	r2, #14
1001776a:	f300 808d 	bgt.w	10017888 <_dtoa_r+0x5d0>
1001776e:	4d27      	ldr	r5, [pc, #156]	@ (1001780c <_dtoa_r+0x554>)
10017770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10017772:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
10017776:	ed95 7b00 	vldr	d7, [r5]
1001777a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
1001777c:	2b00      	cmp	r3, #0
1001777e:	ed8d 7b04 	vstr	d7, [sp, #16]
10017782:	da19      	bge.n	100177b8 <_dtoa_r+0x500>
10017784:	9b08      	ldr	r3, [sp, #32]
10017786:	2b00      	cmp	r3, #0
10017788:	dc16      	bgt.n	100177b8 <_dtoa_r+0x500>
1001778a:	d10e      	bne.n	100177aa <_dtoa_r+0x4f2>
1001778c:	4b25      	ldr	r3, [pc, #148]	@ (10017824 <_dtoa_r+0x56c>)
1001778e:	2200      	movs	r2, #0
10017790:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
10017794:	f003 fd5a 	bl	1001b24c <__aeabi_dmul>
10017798:	4602      	mov	r2, r0
1001779a:	460b      	mov	r3, r1
1001779c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
100177a0:	f003 ffd0 	bl	1001b744 <__aeabi_dcmple>
100177a4:	2800      	cmp	r0, #0
100177a6:	f000 842b 	beq.w	10018000 <_dtoa_r+0xd48>
100177aa:	f04f 0900 	mov.w	r9, #0
100177ae:	9e03      	ldr	r6, [sp, #12]
100177b0:	464f      	mov	r7, r9
100177b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
100177b4:	43dd      	mvns	r5, r3
100177b6:	e224      	b.n	10017c02 <_dtoa_r+0x94a>
100177b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
100177bc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
100177c0:	4622      	mov	r2, r4
100177c2:	462b      	mov	r3, r5
100177c4:	4640      	mov	r0, r8
100177c6:	4649      	mov	r1, r9
100177c8:	f003 fe6a 	bl	1001b4a0 <__aeabi_ddiv>
100177cc:	f003 ffee 	bl	1001b7ac <__aeabi_d2iz>
100177d0:	4606      	mov	r6, r0
100177d2:	f003 fcd1 	bl	1001b178 <__aeabi_i2d>
100177d6:	4622      	mov	r2, r4
100177d8:	462b      	mov	r3, r5
100177da:	f003 fd37 	bl	1001b24c <__aeabi_dmul>
100177de:	9f03      	ldr	r7, [sp, #12]
100177e0:	460b      	mov	r3, r1
100177e2:	4602      	mov	r2, r0
100177e4:	4649      	mov	r1, r9
100177e6:	4640      	mov	r0, r8
100177e8:	f003 fb78 	bl	1001aedc <__aeabi_dsub>
100177ec:	f106 0330 	add.w	r3, r6, #48	@ 0x30
100177f0:	f807 3b01 	strb.w	r3, [r7], #1
100177f4:	9b08      	ldr	r3, [sp, #32]
100177f6:	2b01      	cmp	r3, #1
100177f8:	f000 8311 	beq.w	10017e1e <_dtoa_r+0xb66>
100177fc:	2501      	movs	r5, #1
100177fe:	f8cd a018 	str.w	sl, [sp, #24]
10017802:	4699      	mov	r9, r3
10017804:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
10017808:	46a8      	mov	r8, r5
1001780a:	e02b      	b.n	10017864 <_dtoa_r+0x5ac>
1001780c:	10023d48 	.word	0x10023d48
10017810:	10023d20 	.word	0x10023d20
10017814:	3ff00000 	.word	0x3ff00000
10017818:	401c0000 	.word	0x401c0000
1001781c:	3fe00000 	.word	0x3fe00000
10017820:	40240000 	.word	0x40240000
10017824:	40140000 	.word	0x40140000
10017828:	4652      	mov	r2, sl
1001782a:	465b      	mov	r3, fp
1001782c:	4620      	mov	r0, r4
1001782e:	4629      	mov	r1, r5
10017830:	f003 fe36 	bl	1001b4a0 <__aeabi_ddiv>
10017834:	f003 ffba 	bl	1001b7ac <__aeabi_d2iz>
10017838:	4606      	mov	r6, r0
1001783a:	f003 fc9d 	bl	1001b178 <__aeabi_i2d>
1001783e:	4652      	mov	r2, sl
10017840:	465b      	mov	r3, fp
10017842:	f003 fd03 	bl	1001b24c <__aeabi_dmul>
10017846:	f108 0801 	add.w	r8, r8, #1
1001784a:	460b      	mov	r3, r1
1001784c:	4602      	mov	r2, r0
1001784e:	4629      	mov	r1, r5
10017850:	4620      	mov	r0, r4
10017852:	f003 fb43 	bl	1001aedc <__aeabi_dsub>
10017856:	f106 0330 	add.w	r3, r6, #48	@ 0x30
1001785a:	45c8      	cmp	r8, r9
1001785c:	f807 3b01 	strb.w	r3, [r7], #1
10017860:	f000 82db 	beq.w	10017e1a <_dtoa_r+0xb62>
10017864:	4bb9      	ldr	r3, [pc, #740]	@ (10017b4c <_dtoa_r+0x894>)
10017866:	2200      	movs	r2, #0
10017868:	f003 fcf0 	bl	1001b24c <__aeabi_dmul>
1001786c:	2200      	movs	r2, #0
1001786e:	2300      	movs	r3, #0
10017870:	4604      	mov	r4, r0
10017872:	460d      	mov	r5, r1
10017874:	f003 ff52 	bl	1001b71c <__aeabi_dcmpeq>
10017878:	2800      	cmp	r0, #0
1001787a:	d0d5      	beq.n	10017828 <_dtoa_r+0x570>
1001787c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1001787e:	f8dd a018 	ldr.w	sl, [sp, #24]
10017882:	3501      	adds	r5, #1
10017884:	463e      	mov	r6, r7
10017886:	e0b0      	b.n	100179ea <_dtoa_r+0x732>
10017888:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001788a:	2a00      	cmp	r2, #0
1001788c:	f040 80d2 	bne.w	10017a34 <_dtoa_r+0x77c>
10017890:	2300      	movs	r3, #0
10017892:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10017894:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10017896:	930a      	str	r3, [sp, #40]	@ 0x28
10017898:	461f      	mov	r7, r3
1001789a:	b156      	cbz	r6, 100178b2 <_dtoa_r+0x5fa>
1001789c:	2c00      	cmp	r4, #0
1001789e:	dd08      	ble.n	100178b2 <_dtoa_r+0x5fa>
100178a0:	42a6      	cmp	r6, r4
100178a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100178a4:	4633      	mov	r3, r6
100178a6:	bfa8      	it	ge
100178a8:	4623      	movge	r3, r4
100178aa:	1ad2      	subs	r2, r2, r3
100178ac:	9209      	str	r2, [sp, #36]	@ 0x24
100178ae:	1af6      	subs	r6, r6, r3
100178b0:	1ae4      	subs	r4, r4, r3
100178b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100178b4:	b153      	cbz	r3, 100178cc <_dtoa_r+0x614>
100178b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100178b8:	b113      	cbz	r3, 100178c0 <_dtoa_r+0x608>
100178ba:	2d00      	cmp	r5, #0
100178bc:	f040 82e8 	bne.w	10017e90 <_dtoa_r+0xbd8>
100178c0:	4651      	mov	r1, sl
100178c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100178c4:	9802      	ldr	r0, [sp, #8]
100178c6:	f002 fd7f 	bl	1001a3c8 <__pow5mult>
100178ca:	4682      	mov	sl, r0
100178cc:	9802      	ldr	r0, [sp, #8]
100178ce:	2101      	movs	r1, #1
100178d0:	f002 fc96 	bl	1001a200 <__i2b>
100178d4:	4681      	mov	r9, r0
100178d6:	f1bb 0f00 	cmp.w	fp, #0
100178da:	f040 81b6 	bne.w	10017c4a <_dtoa_r+0x992>
100178de:	9b26      	ldr	r3, [sp, #152]	@ 0x98
100178e0:	2b01      	cmp	r3, #1
100178e2:	f340 81cc 	ble.w	10017c7e <_dtoa_r+0x9c6>
100178e6:	2001      	movs	r0, #1
100178e8:	4420      	add	r0, r4
100178ea:	f010 001f 	ands.w	r0, r0, #31
100178ee:	f000 809a 	beq.w	10017a26 <_dtoa_r+0x76e>
100178f2:	f1c0 0320 	rsb	r3, r0, #32
100178f6:	2b04      	cmp	r3, #4
100178f8:	f340 81da 	ble.w	10017cb0 <_dtoa_r+0x9f8>
100178fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100178fe:	f1c0 001c 	rsb	r0, r0, #28
10017902:	4403      	add	r3, r0
10017904:	9309      	str	r3, [sp, #36]	@ 0x24
10017906:	4406      	add	r6, r0
10017908:	4404      	add	r4, r0
1001790a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001790c:	2b00      	cmp	r3, #0
1001790e:	dd05      	ble.n	1001791c <_dtoa_r+0x664>
10017910:	4651      	mov	r1, sl
10017912:	9802      	ldr	r0, [sp, #8]
10017914:	461a      	mov	r2, r3
10017916:	f002 fdb1 	bl	1001a47c <__lshift>
1001791a:	4682      	mov	sl, r0
1001791c:	2c00      	cmp	r4, #0
1001791e:	dd05      	ble.n	1001792c <_dtoa_r+0x674>
10017920:	4649      	mov	r1, r9
10017922:	9802      	ldr	r0, [sp, #8]
10017924:	4622      	mov	r2, r4
10017926:	f002 fda9 	bl	1001a47c <__lshift>
1001792a:	4681      	mov	r9, r0
1001792c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001792e:	2b00      	cmp	r3, #0
10017930:	f040 8170 	bne.w	10017c14 <_dtoa_r+0x95c>
10017934:	9b08      	ldr	r3, [sp, #32]
10017936:	2b00      	cmp	r3, #0
10017938:	f340 8148 	ble.w	10017bcc <_dtoa_r+0x914>
1001793c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001793e:	2b00      	cmp	r3, #0
10017940:	f040 80a4 	bne.w	10017a8c <_dtoa_r+0x7d4>
10017944:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10017946:	3501      	adds	r5, #1
10017948:	f8dd 800c 	ldr.w	r8, [sp, #12]
1001794c:	9c08      	ldr	r4, [sp, #32]
1001794e:	f8dd b008 	ldr.w	fp, [sp, #8]
10017952:	2601      	movs	r6, #1
10017954:	e007      	b.n	10017966 <_dtoa_r+0x6ae>
10017956:	4651      	mov	r1, sl
10017958:	2300      	movs	r3, #0
1001795a:	220a      	movs	r2, #10
1001795c:	4658      	mov	r0, fp
1001795e:	f002 fbad 	bl	1001a0bc <__multadd>
10017962:	3601      	adds	r6, #1
10017964:	4682      	mov	sl, r0
10017966:	4649      	mov	r1, r9
10017968:	4650      	mov	r0, sl
1001796a:	f7ff fc0f 	bl	1001718c <quorem>
1001796e:	42a6      	cmp	r6, r4
10017970:	f100 0330 	add.w	r3, r0, #48	@ 0x30
10017974:	f808 3b01 	strb.w	r3, [r8], #1
10017978:	dbed      	blt.n	10017956 <_dtoa_r+0x69e>
1001797a:	9a08      	ldr	r2, [sp, #32]
1001797c:	2a00      	cmp	r2, #0
1001797e:	bfc8      	it	gt
10017980:	4616      	movgt	r6, r2
10017982:	9a03      	ldr	r2, [sp, #12]
10017984:	bfd8      	it	le
10017986:	2601      	movle	r6, #1
10017988:	eb02 0b06 	add.w	fp, r2, r6
1001798c:	2400      	movs	r4, #0
1001798e:	4651      	mov	r1, sl
10017990:	2201      	movs	r2, #1
10017992:	9802      	ldr	r0, [sp, #8]
10017994:	9304      	str	r3, [sp, #16]
10017996:	f002 fd71 	bl	1001a47c <__lshift>
1001799a:	4649      	mov	r1, r9
1001799c:	4682      	mov	sl, r0
1001799e:	f002 fde5 	bl	1001a56c <__mcmp>
100179a2:	2800      	cmp	r0, #0
100179a4:	f340 81e3 	ble.w	10017d6e <_dtoa_r+0xab6>
100179a8:	9a03      	ldr	r2, [sp, #12]
100179aa:	e002      	b.n	100179b2 <_dtoa_r+0x6fa>
100179ac:	455a      	cmp	r2, fp
100179ae:	f000 81e9 	beq.w	10017d84 <_dtoa_r+0xacc>
100179b2:	465e      	mov	r6, fp
100179b4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
100179b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
100179bc:	2b39      	cmp	r3, #57	@ 0x39
100179be:	d0f5      	beq.n	100179ac <_dtoa_r+0x6f4>
100179c0:	3301      	adds	r3, #1
100179c2:	f88b 3000 	strb.w	r3, [fp]
100179c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
100179ca:	4649      	mov	r1, r9
100179cc:	4640      	mov	r0, r8
100179ce:	f002 fb6b 	bl	1001a0a8 <_Bfree>
100179d2:	b157      	cbz	r7, 100179ea <_dtoa_r+0x732>
100179d4:	b12c      	cbz	r4, 100179e2 <_dtoa_r+0x72a>
100179d6:	42bc      	cmp	r4, r7
100179d8:	d003      	beq.n	100179e2 <_dtoa_r+0x72a>
100179da:	4621      	mov	r1, r4
100179dc:	4640      	mov	r0, r8
100179de:	f002 fb63 	bl	1001a0a8 <_Bfree>
100179e2:	9802      	ldr	r0, [sp, #8]
100179e4:	4639      	mov	r1, r7
100179e6:	f002 fb5f 	bl	1001a0a8 <_Bfree>
100179ea:	9802      	ldr	r0, [sp, #8]
100179ec:	4651      	mov	r1, sl
100179ee:	f002 fb5b 	bl	1001a0a8 <_Bfree>
100179f2:	2300      	movs	r3, #0
100179f4:	7033      	strb	r3, [r6, #0]
100179f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
100179f8:	601d      	str	r5, [r3, #0]
100179fa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
100179fc:	2b00      	cmp	r3, #0
100179fe:	f43f ac96 	beq.w	1001732e <_dtoa_r+0x76>
10017a02:	9803      	ldr	r0, [sp, #12]
10017a04:	601e      	str	r6, [r3, #0]
10017a06:	b01d      	add	sp, #116	@ 0x74
10017a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10017a0c:	4658      	mov	r0, fp
10017a0e:	f003 fbb3 	bl	1001b178 <__aeabi_i2d>
10017a12:	4632      	mov	r2, r6
10017a14:	463b      	mov	r3, r7
10017a16:	f003 fe81 	bl	1001b71c <__aeabi_dcmpeq>
10017a1a:	2800      	cmp	r0, #0
10017a1c:	f47f acde 	bne.w	100173dc <_dtoa_r+0x124>
10017a20:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
10017a24:	e4da      	b.n	100173dc <_dtoa_r+0x124>
10017a26:	231c      	movs	r3, #28
10017a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10017a2a:	441a      	add	r2, r3
10017a2c:	9209      	str	r2, [sp, #36]	@ 0x24
10017a2e:	441e      	add	r6, r3
10017a30:	441c      	add	r4, r3
10017a32:	e76a      	b.n	1001790a <_dtoa_r+0x652>
10017a34:	9a26      	ldr	r2, [sp, #152]	@ 0x98
10017a36:	2a01      	cmp	r2, #1
10017a38:	f340 81a9 	ble.w	10017d8e <_dtoa_r+0xad6>
10017a3c:	9b08      	ldr	r3, [sp, #32]
10017a3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10017a40:	1e5d      	subs	r5, r3, #1
10017a42:	42aa      	cmp	r2, r5
10017a44:	f2c0 816b 	blt.w	10017d1e <_dtoa_r+0xa66>
10017a48:	2b00      	cmp	r3, #0
10017a4a:	eba2 0505 	sub.w	r5, r2, r5
10017a4e:	f280 82dd 	bge.w	1001800c <_dtoa_r+0xd54>
10017a52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
10017a56:	1a9e      	subs	r6, r3, r2
10017a58:	9802      	ldr	r0, [sp, #8]
10017a5a:	2101      	movs	r1, #1
10017a5c:	f002 fbd0 	bl	1001a200 <__i2b>
10017a60:	4607      	mov	r7, r0
10017a62:	e71a      	b.n	1001789a <_dtoa_r+0x5e2>
10017a64:	f1c3 0320 	rsb	r3, r3, #32
10017a68:	fa06 f003 	lsl.w	r0, r6, r3
10017a6c:	e483      	b.n	10017376 <_dtoa_r+0xbe>
10017a6e:	2501      	movs	r5, #1
10017a70:	e4e6      	b.n	10017440 <_dtoa_r+0x188>
10017a72:	4639      	mov	r1, r7
10017a74:	2300      	movs	r3, #0
10017a76:	9802      	ldr	r0, [sp, #8]
10017a78:	220a      	movs	r2, #10
10017a7a:	f002 fb1f 	bl	1001a0bc <__multadd>
10017a7e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
10017a80:	2b00      	cmp	r3, #0
10017a82:	4607      	mov	r7, r0
10017a84:	f340 82ef 	ble.w	10018066 <_dtoa_r+0xdae>
10017a88:	950c      	str	r5, [sp, #48]	@ 0x30
10017a8a:	9308      	str	r3, [sp, #32]
10017a8c:	2e00      	cmp	r6, #0
10017a8e:	f300 813f 	bgt.w	10017d10 <_dtoa_r+0xa58>
10017a92:	f1bb 0f00 	cmp.w	fp, #0
10017a96:	f040 81df 	bne.w	10017e58 <_dtoa_r+0xba0>
10017a9a:	46b8      	mov	r8, r7
10017a9c:	9e03      	ldr	r6, [sp, #12]
10017a9e:	9c08      	ldr	r4, [sp, #32]
10017aa0:	1e73      	subs	r3, r6, #1
10017aa2:	441c      	add	r4, r3
10017aa4:	9b04      	ldr	r3, [sp, #16]
10017aa6:	940a      	str	r4, [sp, #40]	@ 0x28
10017aa8:	f003 0301 	and.w	r3, r3, #1
10017aac:	9c02      	ldr	r4, [sp, #8]
10017aae:	930d      	str	r3, [sp, #52]	@ 0x34
10017ab0:	4649      	mov	r1, r9
10017ab2:	4650      	mov	r0, sl
10017ab4:	f7ff fb6a 	bl	1001718c <quorem>
10017ab8:	4639      	mov	r1, r7
10017aba:	4683      	mov	fp, r0
10017abc:	4650      	mov	r0, sl
10017abe:	f002 fd55 	bl	1001a56c <__mcmp>
10017ac2:	4642      	mov	r2, r8
10017ac4:	4649      	mov	r1, r9
10017ac6:	4605      	mov	r5, r0
10017ac8:	4620      	mov	r0, r4
10017aca:	f002 fd71 	bl	1001a5b0 <__mdiff>
10017ace:	68c2      	ldr	r2, [r0, #12]
10017ad0:	4601      	mov	r1, r0
10017ad2:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
10017ad6:	2a00      	cmp	r2, #0
10017ad8:	d13a      	bne.n	10017b50 <_dtoa_r+0x898>
10017ada:	e9cd 0308 	strd	r0, r3, [sp, #32]
10017ade:	4650      	mov	r0, sl
10017ae0:	f002 fd44 	bl	1001a56c <__mcmp>
10017ae4:	9908      	ldr	r1, [sp, #32]
10017ae6:	9006      	str	r0, [sp, #24]
10017ae8:	4620      	mov	r0, r4
10017aea:	f002 fadd 	bl	1001a0a8 <_Bfree>
10017aee:	9a06      	ldr	r2, [sp, #24]
10017af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017af2:	2a00      	cmp	r2, #0
10017af4:	d15a      	bne.n	10017bac <_dtoa_r+0x8f4>
10017af6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
10017af8:	b91a      	cbnz	r2, 10017b02 <_dtoa_r+0x84a>
10017afa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10017afc:	2a00      	cmp	r2, #0
10017afe:	f000 829a 	beq.w	10018036 <_dtoa_r+0xd7e>
10017b02:	2d00      	cmp	r5, #0
10017b04:	db45      	blt.n	10017b92 <_dtoa_r+0x8da>
10017b06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10017b08:	46b3      	mov	fp, r6
10017b0a:	42b2      	cmp	r2, r6
10017b0c:	f80b 3b01 	strb.w	r3, [fp], #1
10017b10:	f000 81b9 	beq.w	10017e86 <_dtoa_r+0xbce>
10017b14:	4651      	mov	r1, sl
10017b16:	2300      	movs	r3, #0
10017b18:	220a      	movs	r2, #10
10017b1a:	4620      	mov	r0, r4
10017b1c:	f002 face 	bl	1001a0bc <__multadd>
10017b20:	4547      	cmp	r7, r8
10017b22:	4682      	mov	sl, r0
10017b24:	4639      	mov	r1, r7
10017b26:	f04f 0300 	mov.w	r3, #0
10017b2a:	f04f 020a 	mov.w	r2, #10
10017b2e:	4620      	mov	r0, r4
10017b30:	d036      	beq.n	10017ba0 <_dtoa_r+0x8e8>
10017b32:	f002 fac3 	bl	1001a0bc <__multadd>
10017b36:	4641      	mov	r1, r8
10017b38:	4607      	mov	r7, r0
10017b3a:	2300      	movs	r3, #0
10017b3c:	220a      	movs	r2, #10
10017b3e:	4620      	mov	r0, r4
10017b40:	f002 fabc 	bl	1001a0bc <__multadd>
10017b44:	465e      	mov	r6, fp
10017b46:	4680      	mov	r8, r0
10017b48:	e7b2      	b.n	10017ab0 <_dtoa_r+0x7f8>
10017b4a:	bf00      	nop
10017b4c:	40240000 	.word	0x40240000
10017b50:	9802      	ldr	r0, [sp, #8]
10017b52:	9306      	str	r3, [sp, #24]
10017b54:	f002 faa8 	bl	1001a0a8 <_Bfree>
10017b58:	2d00      	cmp	r5, #0
10017b5a:	9b06      	ldr	r3, [sp, #24]
10017b5c:	db06      	blt.n	10017b6c <_dtoa_r+0x8b4>
10017b5e:	9a04      	ldr	r2, [sp, #16]
10017b60:	9926      	ldr	r1, [sp, #152]	@ 0x98
10017b62:	f002 0201 	and.w	r2, r2, #1
10017b66:	430d      	orrs	r5, r1
10017b68:	432a      	orrs	r2, r5
10017b6a:	d12a      	bne.n	10017bc2 <_dtoa_r+0x90a>
10017b6c:	4651      	mov	r1, sl
10017b6e:	2201      	movs	r2, #1
10017b70:	9802      	ldr	r0, [sp, #8]
10017b72:	9304      	str	r3, [sp, #16]
10017b74:	f002 fc82 	bl	1001a47c <__lshift>
10017b78:	4649      	mov	r1, r9
10017b7a:	4682      	mov	sl, r0
10017b7c:	f002 fcf6 	bl	1001a56c <__mcmp>
10017b80:	2800      	cmp	r0, #0
10017b82:	9b04      	ldr	r3, [sp, #16]
10017b84:	f340 80e8 	ble.w	10017d58 <_dtoa_r+0xaa0>
10017b88:	2b39      	cmp	r3, #57	@ 0x39
10017b8a:	f000 822f 	beq.w	10017fec <_dtoa_r+0xd34>
10017b8e:	f10b 0331 	add.w	r3, fp, #49	@ 0x31
10017b92:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10017b94:	f806 3b01 	strb.w	r3, [r6], #1
10017b98:	463c      	mov	r4, r7
10017b9a:	3501      	adds	r5, #1
10017b9c:	4647      	mov	r7, r8
10017b9e:	e712      	b.n	100179c6 <_dtoa_r+0x70e>
10017ba0:	f002 fa8c 	bl	1001a0bc <__multadd>
10017ba4:	465e      	mov	r6, fp
10017ba6:	4607      	mov	r7, r0
10017ba8:	4680      	mov	r8, r0
10017baa:	e781      	b.n	10017ab0 <_dtoa_r+0x7f8>
10017bac:	2d00      	cmp	r5, #0
10017bae:	f2c0 827d 	blt.w	100180ac <_dtoa_r+0xdf4>
10017bb2:	9926      	ldr	r1, [sp, #152]	@ 0x98
10017bb4:	430d      	orrs	r5, r1
10017bb6:	990d      	ldr	r1, [sp, #52]	@ 0x34
10017bb8:	430d      	orrs	r5, r1
10017bba:	f000 8277 	beq.w	100180ac <_dtoa_r+0xdf4>
10017bbe:	2a00      	cmp	r2, #0
10017bc0:	dda1      	ble.n	10017b06 <_dtoa_r+0x84e>
10017bc2:	2b39      	cmp	r3, #57	@ 0x39
10017bc4:	f000 8212 	beq.w	10017fec <_dtoa_r+0xd34>
10017bc8:	3301      	adds	r3, #1
10017bca:	e7e2      	b.n	10017b92 <_dtoa_r+0x8da>
10017bcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
10017bce:	2b02      	cmp	r3, #2
10017bd0:	f77f aeb4 	ble.w	1001793c <_dtoa_r+0x684>
10017bd4:	9b08      	ldr	r3, [sp, #32]
10017bd6:	2b00      	cmp	r3, #0
10017bd8:	f040 811d 	bne.w	10017e16 <_dtoa_r+0xb5e>
10017bdc:	4649      	mov	r1, r9
10017bde:	2205      	movs	r2, #5
10017be0:	9802      	ldr	r0, [sp, #8]
10017be2:	f002 fa6b 	bl	1001a0bc <__multadd>
10017be6:	4601      	mov	r1, r0
10017be8:	4681      	mov	r9, r0
10017bea:	4650      	mov	r0, sl
10017bec:	f002 fcbe 	bl	1001a56c <__mcmp>
10017bf0:	2800      	cmp	r0, #0
10017bf2:	f340 8110 	ble.w	10017e16 <_dtoa_r+0xb5e>
10017bf6:	9e03      	ldr	r6, [sp, #12]
10017bf8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10017bfa:	2331      	movs	r3, #49	@ 0x31
10017bfc:	f806 3b01 	strb.w	r3, [r6], #1
10017c00:	3501      	adds	r5, #1
10017c02:	9802      	ldr	r0, [sp, #8]
10017c04:	4649      	mov	r1, r9
10017c06:	3501      	adds	r5, #1
10017c08:	f002 fa4e 	bl	1001a0a8 <_Bfree>
10017c0c:	2f00      	cmp	r7, #0
10017c0e:	f47f aee8 	bne.w	100179e2 <_dtoa_r+0x72a>
10017c12:	e6ea      	b.n	100179ea <_dtoa_r+0x732>
10017c14:	4649      	mov	r1, r9
10017c16:	4650      	mov	r0, sl
10017c18:	f002 fca8 	bl	1001a56c <__mcmp>
10017c1c:	2800      	cmp	r0, #0
10017c1e:	f6bf ae89 	bge.w	10017934 <_dtoa_r+0x67c>
10017c22:	4651      	mov	r1, sl
10017c24:	2300      	movs	r3, #0
10017c26:	9802      	ldr	r0, [sp, #8]
10017c28:	220a      	movs	r2, #10
10017c2a:	f002 fa47 	bl	1001a0bc <__multadd>
10017c2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10017c30:	1e5d      	subs	r5, r3, #1
10017c32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017c34:	4682      	mov	sl, r0
10017c36:	2b00      	cmp	r3, #0
10017c38:	f47f af1b 	bne.w	10017a72 <_dtoa_r+0x7ba>
10017c3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
10017c3e:	2b00      	cmp	r3, #0
10017c40:	f340 81ff 	ble.w	10018042 <_dtoa_r+0xd8a>
10017c44:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10017c46:	9308      	str	r3, [sp, #32]
10017c48:	e67e      	b.n	10017948 <_dtoa_r+0x690>
10017c4a:	4601      	mov	r1, r0
10017c4c:	465a      	mov	r2, fp
10017c4e:	9802      	ldr	r0, [sp, #8]
10017c50:	f002 fbba 	bl	1001a3c8 <__pow5mult>
10017c54:	9b26      	ldr	r3, [sp, #152]	@ 0x98
10017c56:	2b01      	cmp	r3, #1
10017c58:	4681      	mov	r9, r0
10017c5a:	dd6c      	ble.n	10017d36 <_dtoa_r+0xa7e>
10017c5c:	f04f 0b00 	mov.w	fp, #0
10017c60:	f8d9 3010 	ldr.w	r3, [r9, #16]
10017c64:	eb09 0383 	add.w	r3, r9, r3, lsl #2
10017c68:	6918      	ldr	r0, [r3, #16]
10017c6a:	f002 fa77 	bl	1001a15c <__hi0bits>
10017c6e:	f1c0 0020 	rsb	r0, r0, #32
10017c72:	e639      	b.n	100178e8 <_dtoa_r+0x630>
10017c74:	4b92      	ldr	r3, [pc, #584]	@ (10017ec0 <_dtoa_r+0xc08>)
10017c76:	9303      	str	r3, [sp, #12]
10017c78:	3303      	adds	r3, #3
10017c7a:	f7ff bbfc 	b.w	10017476 <_dtoa_r+0x1be>
10017c7e:	9b04      	ldr	r3, [sp, #16]
10017c80:	2b00      	cmp	r3, #0
10017c82:	f47f ae30 	bne.w	100178e6 <_dtoa_r+0x62e>
10017c86:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
10017c8a:	f3c2 0313 	ubfx	r3, r2, #0, #20
10017c8e:	2b00      	cmp	r3, #0
10017c90:	f47f ae29 	bne.w	100178e6 <_dtoa_r+0x62e>
10017c94:	4b8b      	ldr	r3, [pc, #556]	@ (10017ec4 <_dtoa_r+0xc0c>)
10017c96:	4013      	ands	r3, r2
10017c98:	b123      	cbz	r3, 10017ca4 <_dtoa_r+0x9ec>
10017c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017c9c:	3301      	adds	r3, #1
10017c9e:	9309      	str	r3, [sp, #36]	@ 0x24
10017ca0:	3401      	adds	r4, #1
10017ca2:	2301      	movs	r3, #1
10017ca4:	f1bb 0f00 	cmp.w	fp, #0
10017ca8:	f040 81ae 	bne.w	10018008 <_dtoa_r+0xd50>
10017cac:	469b      	mov	fp, r3
10017cae:	e61a      	b.n	100178e6 <_dtoa_r+0x62e>
10017cb0:	f43f ae2b 	beq.w	1001790a <_dtoa_r+0x652>
10017cb4:	f1c0 033c 	rsb	r3, r0, #60	@ 0x3c
10017cb8:	e6b6      	b.n	10017a28 <_dtoa_r+0x770>
10017cba:	2301      	movs	r3, #1
10017cbc:	930a      	str	r3, [sp, #40]	@ 0x28
10017cbe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
10017cc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10017cc2:	4413      	add	r3, r2
10017cc4:	9316      	str	r3, [sp, #88]	@ 0x58
10017cc6:	3301      	adds	r3, #1
10017cc8:	2b01      	cmp	r3, #1
10017cca:	461e      	mov	r6, r3
10017ccc:	9308      	str	r3, [sp, #32]
10017cce:	bfb8      	it	lt
10017cd0:	2601      	movlt	r6, #1
10017cd2:	2e17      	cmp	r6, #23
10017cd4:	f340 81d5 	ble.w	10018082 <_dtoa_r+0xdca>
10017cd8:	2201      	movs	r2, #1
10017cda:	2304      	movs	r3, #4
10017cdc:	005b      	lsls	r3, r3, #1
10017cde:	f103 0014 	add.w	r0, r3, #20
10017ce2:	42b0      	cmp	r0, r6
10017ce4:	4611      	mov	r1, r2
10017ce6:	f102 0201 	add.w	r2, r2, #1
10017cea:	d9f7      	bls.n	10017cdc <_dtoa_r+0xa24>
10017cec:	9b02      	ldr	r3, [sp, #8]
10017cee:	63d9      	str	r1, [r3, #60]	@ 0x3c
10017cf0:	e413      	b.n	1001751a <_dtoa_r+0x262>
10017cf2:	2301      	movs	r3, #1
10017cf4:	930a      	str	r3, [sp, #40]	@ 0x28
10017cf6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
10017cf8:	2b00      	cmp	r3, #0
10017cfa:	dd33      	ble.n	10017d64 <_dtoa_r+0xaac>
10017cfc:	9316      	str	r3, [sp, #88]	@ 0x58
10017cfe:	9308      	str	r3, [sp, #32]
10017d00:	461e      	mov	r6, r3
10017d02:	e7e6      	b.n	10017cd2 <_dtoa_r+0xa1a>
10017d04:	2300      	movs	r3, #0
10017d06:	930a      	str	r3, [sp, #40]	@ 0x28
10017d08:	e7d9      	b.n	10017cbe <_dtoa_r+0xa06>
10017d0a:	2300      	movs	r3, #0
10017d0c:	930a      	str	r3, [sp, #40]	@ 0x28
10017d0e:	e7f2      	b.n	10017cf6 <_dtoa_r+0xa3e>
10017d10:	4639      	mov	r1, r7
10017d12:	9802      	ldr	r0, [sp, #8]
10017d14:	4632      	mov	r2, r6
10017d16:	f002 fbb1 	bl	1001a47c <__lshift>
10017d1a:	4607      	mov	r7, r0
10017d1c:	e6b9      	b.n	10017a92 <_dtoa_r+0x7da>
10017d1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10017d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10017d22:	950d      	str	r5, [sp, #52]	@ 0x34
10017d24:	1aeb      	subs	r3, r5, r3
10017d26:	449b      	add	fp, r3
10017d28:	9b08      	ldr	r3, [sp, #32]
10017d2a:	4616      	mov	r6, r2
10017d2c:	441a      	add	r2, r3
10017d2e:	441c      	add	r4, r3
10017d30:	9209      	str	r2, [sp, #36]	@ 0x24
10017d32:	2500      	movs	r5, #0
10017d34:	e690      	b.n	10017a58 <_dtoa_r+0x7a0>
10017d36:	9b04      	ldr	r3, [sp, #16]
10017d38:	2b00      	cmp	r3, #0
10017d3a:	d18f      	bne.n	10017c5c <_dtoa_r+0x9a4>
10017d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
10017d40:	f3c1 0313 	ubfx	r3, r1, #0, #20
10017d44:	460a      	mov	r2, r1
10017d46:	2b00      	cmp	r3, #0
10017d48:	d188      	bne.n	10017c5c <_dtoa_r+0x9a4>
10017d4a:	e7a3      	b.n	10017c94 <_dtoa_r+0x9dc>
10017d4c:	ed9d 7b06 	vldr	d7, [sp, #24]
10017d50:	2702      	movs	r7, #2
10017d52:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
10017d56:	e40c      	b.n	10017572 <_dtoa_r+0x2ba>
10017d58:	f47f af1b 	bne.w	10017b92 <_dtoa_r+0x8da>
10017d5c:	07da      	lsls	r2, r3, #31
10017d5e:	f57f af18 	bpl.w	10017b92 <_dtoa_r+0x8da>
10017d62:	e711      	b.n	10017b88 <_dtoa_r+0x8d0>
10017d64:	2301      	movs	r3, #1
10017d66:	9327      	str	r3, [sp, #156]	@ 0x9c
10017d68:	9308      	str	r3, [sp, #32]
10017d6a:	f7ff bbd1 	b.w	10017510 <_dtoa_r+0x258>
10017d6e:	d103      	bne.n	10017d78 <_dtoa_r+0xac0>
10017d70:	9b04      	ldr	r3, [sp, #16]
10017d72:	07db      	lsls	r3, r3, #31
10017d74:	f53f ae18 	bmi.w	100179a8 <_dtoa_r+0x6f0>
10017d78:	465e      	mov	r6, fp
10017d7a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
10017d7e:	2b30      	cmp	r3, #48	@ 0x30
10017d80:	d0fa      	beq.n	10017d78 <_dtoa_r+0xac0>
10017d82:	e620      	b.n	100179c6 <_dtoa_r+0x70e>
10017d84:	9a03      	ldr	r2, [sp, #12]
10017d86:	2331      	movs	r3, #49	@ 0x31
10017d88:	3501      	adds	r5, #1
10017d8a:	7013      	strb	r3, [r2, #0]
10017d8c:	e61b      	b.n	100179c6 <_dtoa_r+0x70e>
10017d8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10017d90:	2a00      	cmp	r2, #0
10017d92:	f000 80f9 	beq.w	10017f88 <_dtoa_r+0xcd0>
10017d96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
10017d9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10017d9c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10017d9e:	4616      	mov	r6, r2
10017da0:	441a      	add	r2, r3
10017da2:	441c      	add	r4, r3
10017da4:	9209      	str	r2, [sp, #36]	@ 0x24
10017da6:	e657      	b.n	10017a58 <_dtoa_r+0x7a0>
10017da8:	f1c8 0301 	rsb	r3, r8, #1
10017dac:	4604      	mov	r4, r0
10017dae:	9309      	str	r3, [sp, #36]	@ 0x24
10017db0:	900e      	str	r0, [sp, #56]	@ 0x38
10017db2:	f7ff bb9d 	b.w	100174f0 <_dtoa_r+0x238>
10017db6:	f000 80eb 	beq.w	10017f90 <_dtoa_r+0xcd8>
10017dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10017dbc:	4d42      	ldr	r5, [pc, #264]	@ (10017ec8 <_dtoa_r+0xc10>)
10017dbe:	425e      	negs	r6, r3
10017dc0:	f006 030f 	and.w	r3, r6, #15
10017dc4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
10017dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
10017dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
10017dd0:	f003 fa3c 	bl	1001b24c <__aeabi_dmul>
10017dd4:	1135      	asrs	r5, r6, #4
10017dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
10017dda:	f000 814d 	beq.w	10018078 <_dtoa_r+0xdc0>
10017dde:	4e3b      	ldr	r6, [pc, #236]	@ (10017ecc <_dtoa_r+0xc14>)
10017de0:	2300      	movs	r3, #0
10017de2:	2702      	movs	r7, #2
10017de4:	4680      	mov	r8, r0
10017de6:	4689      	mov	r9, r1
10017de8:	07e8      	lsls	r0, r5, #31
10017dea:	d509      	bpl.n	10017e00 <_dtoa_r+0xb48>
10017dec:	e9d6 2300 	ldrd	r2, r3, [r6]
10017df0:	4640      	mov	r0, r8
10017df2:	4649      	mov	r1, r9
10017df4:	f003 fa2a 	bl	1001b24c <__aeabi_dmul>
10017df8:	3701      	adds	r7, #1
10017dfa:	4680      	mov	r8, r0
10017dfc:	4689      	mov	r9, r1
10017dfe:	2301      	movs	r3, #1
10017e00:	106d      	asrs	r5, r5, #1
10017e02:	f106 0608 	add.w	r6, r6, #8
10017e06:	d1ef      	bne.n	10017de8 <_dtoa_r+0xb30>
10017e08:	2b00      	cmp	r3, #0
10017e0a:	f47f abcb 	bne.w	100175a4 <_dtoa_r+0x2ec>
10017e0e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
10017e12:	f7ff bbc7 	b.w	100175a4 <_dtoa_r+0x2ec>
10017e16:	9e03      	ldr	r6, [sp, #12]
10017e18:	e4cb      	b.n	100177b2 <_dtoa_r+0x4fa>
10017e1a:	f8dd a018 	ldr.w	sl, [sp, #24]
10017e1e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10017e20:	4602      	mov	r2, r0
10017e22:	460b      	mov	r3, r1
10017e24:	f003 f85c 	bl	1001aee0 <__adddf3>
10017e28:	4602      	mov	r2, r0
10017e2a:	460b      	mov	r3, r1
10017e2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
10017e30:	3501      	adds	r5, #1
10017e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
10017e36:	46a8      	mov	r8, r5
10017e38:	f003 fc98 	bl	1001b76c <__aeabi_dcmpgt>
10017e3c:	b940      	cbnz	r0, 10017e50 <_dtoa_r+0xb98>
10017e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
10017e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
10017e46:	f003 fc69 	bl	1001b71c <__aeabi_dcmpeq>
10017e4a:	b118      	cbz	r0, 10017e54 <_dtoa_r+0xb9c>
10017e4c:	07f1      	lsls	r1, r6, #31
10017e4e:	d501      	bpl.n	10017e54 <_dtoa_r+0xb9c>
10017e50:	9a03      	ldr	r2, [sp, #12]
10017e52:	e44b      	b.n	100176ec <_dtoa_r+0x434>
10017e54:	463e      	mov	r6, r7
10017e56:	e5c8      	b.n	100179ea <_dtoa_r+0x732>
10017e58:	6879      	ldr	r1, [r7, #4]
10017e5a:	9802      	ldr	r0, [sp, #8]
10017e5c:	f002 f8fe 	bl	1001a05c <_Balloc>
10017e60:	4605      	mov	r5, r0
10017e62:	2800      	cmp	r0, #0
10017e64:	f000 8126 	beq.w	100180b4 <_dtoa_r+0xdfc>
10017e68:	693b      	ldr	r3, [r7, #16]
10017e6a:	3302      	adds	r3, #2
10017e6c:	009a      	lsls	r2, r3, #2
10017e6e:	f107 010c 	add.w	r1, r7, #12
10017e72:	300c      	adds	r0, #12
10017e74:	f7fe ffec 	bl	10016e50 <memcpy>
10017e78:	9802      	ldr	r0, [sp, #8]
10017e7a:	4629      	mov	r1, r5
10017e7c:	2201      	movs	r2, #1
10017e7e:	f002 fafd 	bl	1001a47c <__lshift>
10017e82:	4680      	mov	r8, r0
10017e84:	e60a      	b.n	10017a9c <_dtoa_r+0x7e4>
10017e86:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10017e88:	463c      	mov	r4, r7
10017e8a:	3501      	adds	r5, #1
10017e8c:	4647      	mov	r7, r8
10017e8e:	e57e      	b.n	1001798e <_dtoa_r+0x6d6>
10017e90:	f8dd 8008 	ldr.w	r8, [sp, #8]
10017e94:	4639      	mov	r1, r7
10017e96:	462a      	mov	r2, r5
10017e98:	4640      	mov	r0, r8
10017e9a:	f002 fa95 	bl	1001a3c8 <__pow5mult>
10017e9e:	4652      	mov	r2, sl
10017ea0:	4601      	mov	r1, r0
10017ea2:	4607      	mov	r7, r0
10017ea4:	4640      	mov	r0, r8
10017ea6:	f002 f9d9 	bl	1001a25c <__multiply>
10017eaa:	4651      	mov	r1, sl
10017eac:	4682      	mov	sl, r0
10017eae:	4640      	mov	r0, r8
10017eb0:	f002 f8fa 	bl	1001a0a8 <_Bfree>
10017eb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10017eb6:	1b5b      	subs	r3, r3, r5
10017eb8:	930d      	str	r3, [sp, #52]	@ 0x34
10017eba:	f43f ad07 	beq.w	100178cc <_dtoa_r+0x614>
10017ebe:	e4ff      	b.n	100178c0 <_dtoa_r+0x608>
10017ec0:	10023c10 	.word	0x10023c10
10017ec4:	7ff00000 	.word	0x7ff00000
10017ec8:	10023d48 	.word	0x10023d48
10017ecc:	10023d20 	.word	0x10023d20
10017ed0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
10017ed4:	f003 f9ba 	bl	1001b24c <__aeabi_dmul>
10017ed8:	9b03      	ldr	r3, [sp, #12]
10017eda:	701f      	strb	r7, [r3, #0]
10017edc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10017ede:	2b01      	cmp	r3, #1
10017ee0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
10017ee4:	f000 80c6 	beq.w	10018074 <_dtoa_r+0xdbc>
10017ee8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
10017eea:	9b03      	ldr	r3, [sp, #12]
10017eec:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
10017ef0:	441f      	add	r7, r3
10017ef2:	4b7c      	ldr	r3, [pc, #496]	@ (100180e4 <_dtoa_r+0xe2c>)
10017ef4:	2200      	movs	r2, #0
10017ef6:	4640      	mov	r0, r8
10017ef8:	4649      	mov	r1, r9
10017efa:	f003 f9a7 	bl	1001b24c <__aeabi_dmul>
10017efe:	4689      	mov	r9, r1
10017f00:	4680      	mov	r8, r0
10017f02:	f003 fc53 	bl	1001b7ac <__aeabi_d2iz>
10017f06:	4683      	mov	fp, r0
10017f08:	f003 f936 	bl	1001b178 <__aeabi_i2d>
10017f0c:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
10017f10:	4602      	mov	r2, r0
10017f12:	460b      	mov	r3, r1
10017f14:	4640      	mov	r0, r8
10017f16:	4649      	mov	r1, r9
10017f18:	f002 ffe0 	bl	1001aedc <__aeabi_dsub>
10017f1c:	f806 bb01 	strb.w	fp, [r6], #1
10017f20:	42b7      	cmp	r7, r6
10017f22:	4680      	mov	r8, r0
10017f24:	4689      	mov	r9, r1
10017f26:	d1e4      	bne.n	10017ef2 <_dtoa_r+0xc3a>
10017f28:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
10017f2c:	4b6e      	ldr	r3, [pc, #440]	@ (100180e8 <_dtoa_r+0xe30>)
10017f2e:	2200      	movs	r2, #0
10017f30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
10017f34:	f002 ffd4 	bl	1001aee0 <__adddf3>
10017f38:	4602      	mov	r2, r0
10017f3a:	460b      	mov	r3, r1
10017f3c:	4640      	mov	r0, r8
10017f3e:	4649      	mov	r1, r9
10017f40:	f003 fc14 	bl	1001b76c <__aeabi_dcmpgt>
10017f44:	2800      	cmp	r0, #0
10017f46:	d167      	bne.n	10018018 <_dtoa_r+0xd60>
10017f48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
10017f4c:	4966      	ldr	r1, [pc, #408]	@ (100180e8 <_dtoa_r+0xe30>)
10017f4e:	2000      	movs	r0, #0
10017f50:	f002 ffc4 	bl	1001aedc <__aeabi_dsub>
10017f54:	4602      	mov	r2, r0
10017f56:	460b      	mov	r3, r1
10017f58:	4640      	mov	r0, r8
10017f5a:	4649      	mov	r1, r9
10017f5c:	f003 fbe8 	bl	1001b730 <__aeabi_dcmplt>
10017f60:	b948      	cbnz	r0, 10017f76 <_dtoa_r+0xcbe>
10017f62:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10017f64:	2b00      	cmp	r3, #0
10017f66:	f6ff ac93 	blt.w	10017890 <_dtoa_r+0x5d8>
10017f6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10017f6c:	2b0e      	cmp	r3, #14
10017f6e:	f73f ac8f 	bgt.w	10017890 <_dtoa_r+0x5d8>
10017f72:	f7ff bbfd 	b.w	10017770 <_dtoa_r+0x4b8>
10017f76:	463e      	mov	r6, r7
10017f78:	3f01      	subs	r7, #1
10017f7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
10017f7e:	2b30      	cmp	r3, #48	@ 0x30
10017f80:	d0f9      	beq.n	10017f76 <_dtoa_r+0xcbe>
10017f82:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
10017f84:	3501      	adds	r5, #1
10017f86:	e530      	b.n	100179ea <_dtoa_r+0x732>
10017f88:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
10017f8a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
10017f8e:	e704      	b.n	10017d9a <_dtoa_r+0xae2>
10017f90:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
10017f94:	2702      	movs	r7, #2
10017f96:	f7ff bb05 	b.w	100175a4 <_dtoa_r+0x2ec>
10017f9a:	9b08      	ldr	r3, [sp, #32]
10017f9c:	2b00      	cmp	r3, #0
10017f9e:	f43f abb9 	beq.w	10017714 <_dtoa_r+0x45c>
10017fa2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
10017fa4:	2b00      	cmp	r3, #0
10017fa6:	f77f abda 	ble.w	1001775e <_dtoa_r+0x4a6>
10017faa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10017fac:	9310      	str	r3, [sp, #64]	@ 0x40
10017fae:	3a01      	subs	r2, #1
10017fb0:	4b4c      	ldr	r3, [pc, #304]	@ (100180e4 <_dtoa_r+0xe2c>)
10017fb2:	9217      	str	r2, [sp, #92]	@ 0x5c
10017fb4:	4640      	mov	r0, r8
10017fb6:	2200      	movs	r2, #0
10017fb8:	4649      	mov	r1, r9
10017fba:	f003 f947 	bl	1001b24c <__aeabi_dmul>
10017fbe:	4680      	mov	r8, r0
10017fc0:	4689      	mov	r9, r1
10017fc2:	1c78      	adds	r0, r7, #1
10017fc4:	f003 f8d8 	bl	1001b178 <__aeabi_i2d>
10017fc8:	4642      	mov	r2, r8
10017fca:	464b      	mov	r3, r9
10017fcc:	f003 f93e 	bl	1001b24c <__aeabi_dmul>
10017fd0:	4b46      	ldr	r3, [pc, #280]	@ (100180ec <_dtoa_r+0xe34>)
10017fd2:	2200      	movs	r2, #0
10017fd4:	f002 ff84 	bl	1001aee0 <__adddf3>
10017fd8:	4606      	mov	r6, r0
10017fda:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
10017fde:	f7ff bb02 	b.w	100175e6 <_dtoa_r+0x32e>
10017fe2:	f108 0801 	add.w	r8, r8, #1
10017fe6:	2331      	movs	r3, #49	@ 0x31
10017fe8:	f7ff bb87 	b.w	100176fa <_dtoa_r+0x442>
10017fec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10017fee:	9a03      	ldr	r2, [sp, #12]
10017ff0:	46b3      	mov	fp, r6
10017ff2:	2339      	movs	r3, #57	@ 0x39
10017ff4:	463c      	mov	r4, r7
10017ff6:	f80b 3b01 	strb.w	r3, [fp], #1
10017ffa:	3501      	adds	r5, #1
10017ffc:	4647      	mov	r7, r8
10017ffe:	e4d8      	b.n	100179b2 <_dtoa_r+0x6fa>
10018000:	f04f 0900 	mov.w	r9, #0
10018004:	464f      	mov	r7, r9
10018006:	e5f6      	b.n	10017bf6 <_dtoa_r+0x93e>
10018008:	469b      	mov	fp, r3
1001800a:	e629      	b.n	10017c60 <_dtoa_r+0x9a8>
1001800c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001800e:	4616      	mov	r6, r2
10018010:	441a      	add	r2, r3
10018012:	441c      	add	r4, r3
10018014:	9209      	str	r2, [sp, #36]	@ 0x24
10018016:	e51f      	b.n	10017a58 <_dtoa_r+0x7a0>
10018018:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1001801a:	9a03      	ldr	r2, [sp, #12]
1001801c:	f103 0801 	add.w	r8, r3, #1
10018020:	f7ff bb64 	b.w	100176ec <_dtoa_r+0x434>
10018024:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
10018028:	e7ab      	b.n	10017f82 <_dtoa_r+0xcca>
1001802a:	e9dd b418 	ldrd	fp, r4, [sp, #96]	@ 0x60
1001802e:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
10018032:	f7ff bb94 	b.w	1001775e <_dtoa_r+0x4a6>
10018036:	2b39      	cmp	r3, #57	@ 0x39
10018038:	d0d8      	beq.n	10017fec <_dtoa_r+0xd34>
1001803a:	2d00      	cmp	r5, #0
1001803c:	f73f ada7 	bgt.w	10017b8e <_dtoa_r+0x8d6>
10018040:	e5a7      	b.n	10017b92 <_dtoa_r+0x8da>
10018042:	9b26      	ldr	r3, [sp, #152]	@ 0x98
10018044:	2b02      	cmp	r3, #2
10018046:	dc0a      	bgt.n	1001805e <_dtoa_r+0xda6>
10018048:	9b16      	ldr	r3, [sp, #88]	@ 0x58
1001804a:	9308      	str	r3, [sp, #32]
1001804c:	4649      	mov	r1, r9
1001804e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10018050:	f7ff f89c 	bl	1001718c <quorem>
10018054:	9a03      	ldr	r2, [sp, #12]
10018056:	f100 0330 	add.w	r3, r0, #48	@ 0x30
1001805a:	7013      	strb	r3, [r2, #0]
1001805c:	e48d      	b.n	1001797a <_dtoa_r+0x6c2>
1001805e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
10018060:	9308      	str	r3, [sp, #32]
10018062:	950c      	str	r5, [sp, #48]	@ 0x30
10018064:	e5b6      	b.n	10017bd4 <_dtoa_r+0x91c>
10018066:	9b26      	ldr	r3, [sp, #152]	@ 0x98
10018068:	2b02      	cmp	r3, #2
1001806a:	dcf8      	bgt.n	1001805e <_dtoa_r+0xda6>
1001806c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
1001806e:	950c      	str	r5, [sp, #48]	@ 0x30
10018070:	9308      	str	r3, [sp, #32]
10018072:	e50b      	b.n	10017a8c <_dtoa_r+0x7d4>
10018074:	4637      	mov	r7, r6
10018076:	e759      	b.n	10017f2c <_dtoa_r+0xc74>
10018078:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
1001807c:	2702      	movs	r7, #2
1001807e:	f7ff ba91 	b.w	100175a4 <_dtoa_r+0x2ec>
10018082:	9b02      	ldr	r3, [sp, #8]
10018084:	2100      	movs	r1, #0
10018086:	63d9      	str	r1, [r3, #60]	@ 0x3c
10018088:	f7ff ba47 	b.w	1001751a <_dtoa_r+0x262>
1001808c:	9b02      	ldr	r3, [sp, #8]
1001808e:	2500      	movs	r5, #0
10018090:	63dd      	str	r5, [r3, #60]	@ 0x3c
10018092:	4629      	mov	r1, r5
10018094:	4618      	mov	r0, r3
10018096:	f001 ffe1 	bl	1001a05c <_Balloc>
1001809a:	9003      	str	r0, [sp, #12]
1001809c:	b9a8      	cbnz	r0, 100180ca <_dtoa_r+0xe12>
1001809e:	4b14      	ldr	r3, [pc, #80]	@ (100180f0 <_dtoa_r+0xe38>)
100180a0:	4814      	ldr	r0, [pc, #80]	@ (100180f4 <_dtoa_r+0xe3c>)
100180a2:	2200      	movs	r2, #0
100180a4:	f240 11af 	movw	r1, #431	@ 0x1af
100180a8:	f002 fdfe 	bl	1001aca8 <__assert_func>
100180ac:	2a00      	cmp	r2, #0
100180ae:	f77f ad70 	ble.w	10017b92 <_dtoa_r+0x8da>
100180b2:	e55b      	b.n	10017b6c <_dtoa_r+0x8b4>
100180b4:	4b0e      	ldr	r3, [pc, #56]	@ (100180f0 <_dtoa_r+0xe38>)
100180b6:	480f      	ldr	r0, [pc, #60]	@ (100180f4 <_dtoa_r+0xe3c>)
100180b8:	462a      	mov	r2, r5
100180ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
100180be:	f002 fdf3 	bl	1001aca8 <__assert_func>
100180c2:	4b0d      	ldr	r3, [pc, #52]	@ (100180f8 <_dtoa_r+0xe40>)
100180c4:	9303      	str	r3, [sp, #12]
100180c6:	f7ff b932 	b.w	1001732e <_dtoa_r+0x76>
100180ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
100180ce:	639a      	str	r2, [r3, #56]	@ 0x38
100180d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100180d4:	2201      	movs	r2, #1
100180d6:	9527      	str	r5, [sp, #156]	@ 0x9c
100180d8:	9316      	str	r3, [sp, #88]	@ 0x58
100180da:	920a      	str	r2, [sp, #40]	@ 0x28
100180dc:	9308      	str	r3, [sp, #32]
100180de:	f7ff bb3e 	b.w	1001775e <_dtoa_r+0x4a6>
100180e2:	bf00      	nop
100180e4:	40240000 	.word	0x40240000
100180e8:	3fe00000 	.word	0x3fe00000
100180ec:	401c0000 	.word	0x401c0000
100180f0:	10023c14 	.word	0x10023c14
100180f4:	10023c28 	.word	0x10023c28
100180f8:	10023c04 	.word	0x10023c04

100180fc <_malloc_trim_r>:
100180fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10018100:	4606      	mov	r6, r0
10018102:	2008      	movs	r0, #8
10018104:	4689      	mov	r9, r1
10018106:	f7fe fe11 	bl	10016d2c <sysconf>
1001810a:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 100181b0 <_malloc_trim_r+0xb4>
1001810e:	4605      	mov	r5, r0
10018110:	4630      	mov	r0, r6
10018112:	f7fd fe75 	bl	10015e00 <__malloc_lock>
10018116:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001811a:	685f      	ldr	r7, [r3, #4]
1001811c:	f027 0703 	bic.w	r7, r7, #3
10018120:	f1a7 0411 	sub.w	r4, r7, #17
10018124:	eba4 0409 	sub.w	r4, r4, r9
10018128:	442c      	add	r4, r5
1001812a:	fbb4 f4f5 	udiv	r4, r4, r5
1001812e:	3c01      	subs	r4, #1
10018130:	fb05 f404 	mul.w	r4, r5, r4
10018134:	42a5      	cmp	r5, r4
10018136:	dc08      	bgt.n	1001814a <_malloc_trim_r+0x4e>
10018138:	2100      	movs	r1, #0
1001813a:	4630      	mov	r0, r6
1001813c:	f7fe fdde 	bl	10016cfc <_sbrk_r>
10018140:	f8d8 3008 	ldr.w	r3, [r8, #8]
10018144:	443b      	add	r3, r7
10018146:	4298      	cmp	r0, r3
10018148:	d005      	beq.n	10018156 <_malloc_trim_r+0x5a>
1001814a:	4630      	mov	r0, r6
1001814c:	f7fd fe5e 	bl	10015e0c <__malloc_unlock>
10018150:	2000      	movs	r0, #0
10018152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10018156:	4261      	negs	r1, r4
10018158:	4630      	mov	r0, r6
1001815a:	f7fe fdcf 	bl	10016cfc <_sbrk_r>
1001815e:	3001      	adds	r0, #1
10018160:	d00f      	beq.n	10018182 <_malloc_trim_r+0x86>
10018162:	4a11      	ldr	r2, [pc, #68]	@ (100181a8 <_malloc_trim_r+0xac>)
10018164:	f8d8 3008 	ldr.w	r3, [r8, #8]
10018168:	1b3f      	subs	r7, r7, r4
1001816a:	f047 0701 	orr.w	r7, r7, #1
1001816e:	605f      	str	r7, [r3, #4]
10018170:	6813      	ldr	r3, [r2, #0]
10018172:	4630      	mov	r0, r6
10018174:	1b1b      	subs	r3, r3, r4
10018176:	6013      	str	r3, [r2, #0]
10018178:	f7fd fe48 	bl	10015e0c <__malloc_unlock>
1001817c:	2001      	movs	r0, #1
1001817e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10018182:	2100      	movs	r1, #0
10018184:	4630      	mov	r0, r6
10018186:	f7fe fdb9 	bl	10016cfc <_sbrk_r>
1001818a:	f8d8 2008 	ldr.w	r2, [r8, #8]
1001818e:	1a83      	subs	r3, r0, r2
10018190:	2b0f      	cmp	r3, #15
10018192:	ddda      	ble.n	1001814a <_malloc_trim_r+0x4e>
10018194:	f043 0301 	orr.w	r3, r3, #1
10018198:	6053      	str	r3, [r2, #4]
1001819a:	4b04      	ldr	r3, [pc, #16]	@ (100181ac <_malloc_trim_r+0xb0>)
1001819c:	4902      	ldr	r1, [pc, #8]	@ (100181a8 <_malloc_trim_r+0xac>)
1001819e:	681b      	ldr	r3, [r3, #0]
100181a0:	1ac0      	subs	r0, r0, r3
100181a2:	6008      	str	r0, [r1, #0]
100181a4:	e7d1      	b.n	1001814a <_malloc_trim_r+0x4e>
100181a6:	bf00      	nop
100181a8:	20001584 	.word	0x20001584
100181ac:	20000078 	.word	0x20000078
100181b0:	20000080 	.word	0x20000080

100181b4 <_free_r>:
100181b4:	2900      	cmp	r1, #0
100181b6:	d07c      	beq.n	100182b2 <_free_r+0xfe>
100181b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100181bc:	460c      	mov	r4, r1
100181be:	4680      	mov	r8, r0
100181c0:	f7fd fe1e 	bl	10015e00 <__malloc_lock>
100181c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
100181c8:	4f76      	ldr	r7, [pc, #472]	@ (100183a4 <_free_r+0x1f0>)
100181ca:	f1a4 0508 	sub.w	r5, r4, #8
100181ce:	f023 0101 	bic.w	r1, r3, #1
100181d2:	1868      	adds	r0, r5, r1
100181d4:	68be      	ldr	r6, [r7, #8]
100181d6:	6842      	ldr	r2, [r0, #4]
100181d8:	4286      	cmp	r6, r0
100181da:	f022 0203 	bic.w	r2, r2, #3
100181de:	f000 8083 	beq.w	100182e8 <_free_r+0x134>
100181e2:	07de      	lsls	r6, r3, #31
100181e4:	6042      	str	r2, [r0, #4]
100181e6:	eb00 0c02 	add.w	ip, r0, r2
100181ea:	d433      	bmi.n	10018254 <_free_r+0xa0>
100181ec:	f854 4c08 	ldr.w	r4, [r4, #-8]
100181f0:	f8dc 3004 	ldr.w	r3, [ip, #4]
100181f4:	1b2d      	subs	r5, r5, r4
100181f6:	4421      	add	r1, r4
100181f8:	68ac      	ldr	r4, [r5, #8]
100181fa:	f107 0c08 	add.w	ip, r7, #8
100181fe:	4564      	cmp	r4, ip
10018200:	f003 0301 	and.w	r3, r3, #1
10018204:	d064      	beq.n	100182d0 <_free_r+0x11c>
10018206:	f8d5 e00c 	ldr.w	lr, [r5, #12]
1001820a:	f8c4 e00c 	str.w	lr, [r4, #12]
1001820e:	f8ce 4008 	str.w	r4, [lr, #8]
10018212:	2b00      	cmp	r3, #0
10018214:	f000 8081 	beq.w	1001831a <_free_r+0x166>
10018218:	f041 0301 	orr.w	r3, r1, #1
1001821c:	606b      	str	r3, [r5, #4]
1001821e:	6001      	str	r1, [r0, #0]
10018220:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
10018224:	d222      	bcs.n	1001826c <_free_r+0xb8>
10018226:	6878      	ldr	r0, [r7, #4]
10018228:	08cb      	lsrs	r3, r1, #3
1001822a:	2201      	movs	r2, #1
1001822c:	0949      	lsrs	r1, r1, #5
1001822e:	3301      	adds	r3, #1
10018230:	408a      	lsls	r2, r1
10018232:	4302      	orrs	r2, r0
10018234:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
10018238:	607a      	str	r2, [r7, #4]
1001823a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
1001823e:	3a08      	subs	r2, #8
10018240:	e9c5 1202 	strd	r1, r2, [r5, #8]
10018244:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
10018248:	60cd      	str	r5, [r1, #12]
1001824a:	4640      	mov	r0, r8
1001824c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10018250:	f7fd bddc 	b.w	10015e0c <__malloc_unlock>
10018254:	f8dc 3004 	ldr.w	r3, [ip, #4]
10018258:	07db      	lsls	r3, r3, #31
1001825a:	d52b      	bpl.n	100182b4 <_free_r+0x100>
1001825c:	f041 0301 	orr.w	r3, r1, #1
10018260:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
10018264:	f844 3c04 	str.w	r3, [r4, #-4]
10018268:	6001      	str	r1, [r0, #0]
1001826a:	d3dc      	bcc.n	10018226 <_free_r+0x72>
1001826c:	f5b1 6f20 	cmp.w	r1, #2560	@ 0xa00
10018270:	ea4f 2351 	mov.w	r3, r1, lsr #9
10018274:	d253      	bcs.n	1001831e <_free_r+0x16a>
10018276:	098b      	lsrs	r3, r1, #6
10018278:	f103 0039 	add.w	r0, r3, #57	@ 0x39
1001827c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
10018280:	00c3      	lsls	r3, r0, #3
10018282:	18f8      	adds	r0, r7, r3
10018284:	58fb      	ldr	r3, [r7, r3]
10018286:	3808      	subs	r0, #8
10018288:	4298      	cmp	r0, r3
1001828a:	d103      	bne.n	10018294 <_free_r+0xe0>
1001828c:	e063      	b.n	10018356 <_free_r+0x1a2>
1001828e:	689b      	ldr	r3, [r3, #8]
10018290:	4298      	cmp	r0, r3
10018292:	d004      	beq.n	1001829e <_free_r+0xea>
10018294:	685a      	ldr	r2, [r3, #4]
10018296:	f022 0203 	bic.w	r2, r2, #3
1001829a:	428a      	cmp	r2, r1
1001829c:	d8f7      	bhi.n	1001828e <_free_r+0xda>
1001829e:	68d8      	ldr	r0, [r3, #12]
100182a0:	e9c5 3002 	strd	r3, r0, [r5, #8]
100182a4:	6085      	str	r5, [r0, #8]
100182a6:	60dd      	str	r5, [r3, #12]
100182a8:	4640      	mov	r0, r8
100182aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100182ae:	f7fd bdad 	b.w	10015e0c <__malloc_unlock>
100182b2:	4770      	bx	lr
100182b4:	4411      	add	r1, r2
100182b6:	f107 0c08 	add.w	ip, r7, #8
100182ba:	6883      	ldr	r3, [r0, #8]
100182bc:	4563      	cmp	r3, ip
100182be:	d03f      	beq.n	10018340 <_free_r+0x18c>
100182c0:	68c2      	ldr	r2, [r0, #12]
100182c2:	60da      	str	r2, [r3, #12]
100182c4:	6093      	str	r3, [r2, #8]
100182c6:	f041 0301 	orr.w	r3, r1, #1
100182ca:	606b      	str	r3, [r5, #4]
100182cc:	5069      	str	r1, [r5, r1]
100182ce:	e7a7      	b.n	10018220 <_free_r+0x6c>
100182d0:	2b00      	cmp	r3, #0
100182d2:	d161      	bne.n	10018398 <_free_r+0x1e4>
100182d4:	440a      	add	r2, r1
100182d6:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
100182da:	60cb      	str	r3, [r1, #12]
100182dc:	6099      	str	r1, [r3, #8]
100182de:	f042 0301 	orr.w	r3, r2, #1
100182e2:	606b      	str	r3, [r5, #4]
100182e4:	50aa      	str	r2, [r5, r2]
100182e6:	e7b0      	b.n	1001824a <_free_r+0x96>
100182e8:	07db      	lsls	r3, r3, #31
100182ea:	440a      	add	r2, r1
100182ec:	d407      	bmi.n	100182fe <_free_r+0x14a>
100182ee:	f854 3c08 	ldr.w	r3, [r4, #-8]
100182f2:	1aed      	subs	r5, r5, r3
100182f4:	441a      	add	r2, r3
100182f6:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
100182fa:	60cb      	str	r3, [r1, #12]
100182fc:	6099      	str	r1, [r3, #8]
100182fe:	f042 0301 	orr.w	r3, r2, #1
10018302:	606b      	str	r3, [r5, #4]
10018304:	4b28      	ldr	r3, [pc, #160]	@ (100183a8 <_free_r+0x1f4>)
10018306:	60bd      	str	r5, [r7, #8]
10018308:	681b      	ldr	r3, [r3, #0]
1001830a:	4293      	cmp	r3, r2
1001830c:	d89d      	bhi.n	1001824a <_free_r+0x96>
1001830e:	4b27      	ldr	r3, [pc, #156]	@ (100183ac <_free_r+0x1f8>)
10018310:	4640      	mov	r0, r8
10018312:	6819      	ldr	r1, [r3, #0]
10018314:	f7ff fef2 	bl	100180fc <_malloc_trim_r>
10018318:	e797      	b.n	1001824a <_free_r+0x96>
1001831a:	4411      	add	r1, r2
1001831c:	e7cd      	b.n	100182ba <_free_r+0x106>
1001831e:	2b14      	cmp	r3, #20
10018320:	d908      	bls.n	10018334 <_free_r+0x180>
10018322:	2b54      	cmp	r3, #84	@ 0x54
10018324:	d81f      	bhi.n	10018366 <_free_r+0x1b2>
10018326:	0b0b      	lsrs	r3, r1, #12
10018328:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
1001832c:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
10018330:	00c3      	lsls	r3, r0, #3
10018332:	e7a6      	b.n	10018282 <_free_r+0xce>
10018334:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
10018338:	f103 025b 	add.w	r2, r3, #91	@ 0x5b
1001833c:	00c3      	lsls	r3, r0, #3
1001833e:	e7a0      	b.n	10018282 <_free_r+0xce>
10018340:	f041 0301 	orr.w	r3, r1, #1
10018344:	613d      	str	r5, [r7, #16]
10018346:	617d      	str	r5, [r7, #20]
10018348:	f8c5 c008 	str.w	ip, [r5, #8]
1001834c:	f8c5 c00c 	str.w	ip, [r5, #12]
10018350:	606b      	str	r3, [r5, #4]
10018352:	5069      	str	r1, [r5, r1]
10018354:	e779      	b.n	1001824a <_free_r+0x96>
10018356:	6879      	ldr	r1, [r7, #4]
10018358:	1092      	asrs	r2, r2, #2
1001835a:	2401      	movs	r4, #1
1001835c:	fa04 f202 	lsl.w	r2, r4, r2
10018360:	430a      	orrs	r2, r1
10018362:	607a      	str	r2, [r7, #4]
10018364:	e79c      	b.n	100182a0 <_free_r+0xec>
10018366:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
1001836a:	d806      	bhi.n	1001837a <_free_r+0x1c6>
1001836c:	0bcb      	lsrs	r3, r1, #15
1001836e:	f103 0078 	add.w	r0, r3, #120	@ 0x78
10018372:	f103 0277 	add.w	r2, r3, #119	@ 0x77
10018376:	00c3      	lsls	r3, r0, #3
10018378:	e783      	b.n	10018282 <_free_r+0xce>
1001837a:	f240 5254 	movw	r2, #1364	@ 0x554
1001837e:	4293      	cmp	r3, r2
10018380:	d806      	bhi.n	10018390 <_free_r+0x1dc>
10018382:	0c8b      	lsrs	r3, r1, #18
10018384:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
10018388:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
1001838c:	00c3      	lsls	r3, r0, #3
1001838e:	e778      	b.n	10018282 <_free_r+0xce>
10018390:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
10018394:	227e      	movs	r2, #126	@ 0x7e
10018396:	e774      	b.n	10018282 <_free_r+0xce>
10018398:	f041 0301 	orr.w	r3, r1, #1
1001839c:	606b      	str	r3, [r5, #4]
1001839e:	6001      	str	r1, [r0, #0]
100183a0:	e753      	b.n	1001824a <_free_r+0x96>
100183a2:	bf00      	nop
100183a4:	20000080 	.word	0x20000080
100183a8:	2000007c 	.word	0x2000007c
100183ac:	200015b4 	.word	0x200015b4

100183b0 <__ascii_mbtowc>:
100183b0:	b082      	sub	sp, #8
100183b2:	b149      	cbz	r1, 100183c8 <__ascii_mbtowc+0x18>
100183b4:	b15a      	cbz	r2, 100183ce <__ascii_mbtowc+0x1e>
100183b6:	b16b      	cbz	r3, 100183d4 <__ascii_mbtowc+0x24>
100183b8:	7813      	ldrb	r3, [r2, #0]
100183ba:	600b      	str	r3, [r1, #0]
100183bc:	7812      	ldrb	r2, [r2, #0]
100183be:	1e10      	subs	r0, r2, #0
100183c0:	bf18      	it	ne
100183c2:	2001      	movne	r0, #1
100183c4:	b002      	add	sp, #8
100183c6:	4770      	bx	lr
100183c8:	a901      	add	r1, sp, #4
100183ca:	2a00      	cmp	r2, #0
100183cc:	d1f3      	bne.n	100183b6 <__ascii_mbtowc+0x6>
100183ce:	4610      	mov	r0, r2
100183d0:	b002      	add	sp, #8
100183d2:	4770      	bx	lr
100183d4:	f06f 0001 	mvn.w	r0, #1
100183d8:	e7f4      	b.n	100183c4 <__ascii_mbtowc+0x14>
100183da:	bf00      	nop
100183dc:	0000      	movs	r0, r0
	...

100183e0 <_svfprintf_r>:
100183e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100183e4:	b0df      	sub	sp, #380	@ 0x17c
100183e6:	460c      	mov	r4, r1
100183e8:	9109      	str	r1, [sp, #36]	@ 0x24
100183ea:	4691      	mov	r9, r2
100183ec:	930d      	str	r3, [sp, #52]	@ 0x34
100183ee:	4683      	mov	fp, r0
100183f0:	f7fe fc80 	bl	10016cf4 <_localeconv_r>
100183f4:	6803      	ldr	r3, [r0, #0]
100183f6:	931a      	str	r3, [sp, #104]	@ 0x68
100183f8:	4618      	mov	r0, r3
100183fa:	f7fe fde1 	bl	10016fc0 <strlen>
100183fe:	2208      	movs	r2, #8
10018400:	9018      	str	r0, [sp, #96]	@ 0x60
10018402:	2100      	movs	r1, #0
10018404:	a82e      	add	r0, sp, #184	@ 0xb8
10018406:	f7fe fbe9 	bl	10016bdc <memset>
1001840a:	89a3      	ldrh	r3, [r4, #12]
1001840c:	061a      	lsls	r2, r3, #24
1001840e:	d503      	bpl.n	10018418 <_svfprintf_r+0x38>
10018410:	6923      	ldr	r3, [r4, #16]
10018412:	2b00      	cmp	r3, #0
10018414:	f000 8790 	beq.w	10019338 <_svfprintf_r+0xf58>
10018418:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 10018618 <_svfprintf_r+0x238>
1001841c:	2300      	movs	r3, #0
1001841e:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
10018422:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
10018426:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
1001842a:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
1001842e:	aa35      	add	r2, sp, #212	@ 0xd4
10018430:	9313      	str	r3, [sp, #76]	@ 0x4c
10018432:	9232      	str	r2, [sp, #200]	@ 0xc8
10018434:	4690      	mov	r8, r2
10018436:	9319      	str	r3, [sp, #100]	@ 0x64
10018438:	930a      	str	r3, [sp, #40]	@ 0x28
1001843a:	f8cd b01c 	str.w	fp, [sp, #28]
1001843e:	464d      	mov	r5, r9
10018440:	9f07      	ldr	r7, [sp, #28]
10018442:	462e      	mov	r6, r5
10018444:	4b76      	ldr	r3, [pc, #472]	@ (10018620 <_svfprintf_r+0x240>)
10018446:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
1001844a:	f7fe fc4d 	bl	10016ce8 <__locale_mb_cur_max>
1001844e:	4603      	mov	r3, r0
10018450:	a82e      	add	r0, sp, #184	@ 0xb8
10018452:	9000      	str	r0, [sp, #0]
10018454:	4632      	mov	r2, r6
10018456:	a92a      	add	r1, sp, #168	@ 0xa8
10018458:	4638      	mov	r0, r7
1001845a:	47a0      	blx	r4
1001845c:	2800      	cmp	r0, #0
1001845e:	f000 80a9 	beq.w	100185b4 <_svfprintf_r+0x1d4>
10018462:	f2c0 809f 	blt.w	100185a4 <_svfprintf_r+0x1c4>
10018466:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
10018468:	2a25      	cmp	r2, #37	@ 0x25
1001846a:	4603      	mov	r3, r0
1001846c:	d001      	beq.n	10018472 <_svfprintf_r+0x92>
1001846e:	441e      	add	r6, r3
10018470:	e7e8      	b.n	10018444 <_svfprintf_r+0x64>
10018472:	1b77      	subs	r7, r6, r5
10018474:	4604      	mov	r4, r0
10018476:	f040 80a0 	bne.w	100185ba <_svfprintf_r+0x1da>
1001847a:	2300      	movs	r3, #0
1001847c:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
10018480:	4699      	mov	r9, r3
10018482:	930b      	str	r3, [sp, #44]	@ 0x2c
10018484:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10018488:	7873      	ldrb	r3, [r6, #1]
1001848a:	9208      	str	r2, [sp, #32]
1001848c:	1c74      	adds	r4, r6, #1
1001848e:	3401      	adds	r4, #1
10018490:	f1a3 0220 	sub.w	r2, r3, #32
10018494:	2a5a      	cmp	r2, #90	@ 0x5a
10018496:	f200 80c5 	bhi.w	10018624 <_svfprintf_r+0x244>
1001849a:	e8df f012 	tbh	[pc, r2, lsl #1]
1001849e:	02ee      	.short	0x02ee
100184a0:	00c300c3 	.word	0x00c300c3
100184a4:	00c302ea 	.word	0x00c302ea
100184a8:	00c300c3 	.word	0x00c300c3
100184ac:	00c3006a 	.word	0x00c3006a
100184b0:	025100c3 	.word	0x025100c3
100184b4:	00c30260 	.word	0x00c30260
100184b8:	02fc025c 	.word	0x02fc025c
100184bc:	02f800c3 	.word	0x02f800c3
100184c0:	005b005b 	.word	0x005b005b
100184c4:	005b005b 	.word	0x005b005b
100184c8:	005b005b 	.word	0x005b005b
100184cc:	005b005b 	.word	0x005b005b
100184d0:	00c3005b 	.word	0x00c3005b
100184d4:	00c300c3 	.word	0x00c300c3
100184d8:	00c300c3 	.word	0x00c300c3
100184dc:	00c300c3 	.word	0x00c300c3
100184e0:	00c30144 	.word	0x00c30144
100184e4:	031601d0 	.word	0x031601d0
100184e8:	01440144 	.word	0x01440144
100184ec:	00c30144 	.word	0x00c30144
100184f0:	00c300c3 	.word	0x00c300c3
100184f4:	02e600c3 	.word	0x02e600c3
100184f8:	00c300c3 	.word	0x00c300c3
100184fc:	00c30265 	.word	0x00c30265
10018500:	00c300c3 	.word	0x00c300c3
10018504:	00c301fa 	.word	0x00c301fa
10018508:	00c302d3 	.word	0x00c302d3
1001850c:	070e00c3 	.word	0x070e00c3
10018510:	00c300c3 	.word	0x00c300c3
10018514:	00c300c3 	.word	0x00c300c3
10018518:	00c300c3 	.word	0x00c300c3
1001851c:	00c300c3 	.word	0x00c300c3
10018520:	00c30144 	.word	0x00c30144
10018524:	022c01d0 	.word	0x022c01d0
10018528:	01440144 	.word	0x01440144
1001852c:	02960144 	.word	0x02960144
10018530:	007f022c 	.word	0x007f022c
10018534:	02af00c3 	.word	0x02af00c3
10018538:	02a000c3 	.word	0x02a000c3
1001853c:	02c10703 	.word	0x02c10703
10018540:	00c3007f 	.word	0x00c3007f
10018544:	007d01fa 	.word	0x007d01fa
10018548:	00c30709 	.word	0x00c30709
1001854c:	073200c3 	.word	0x073200c3
10018550:	007d00c3 	.word	0x007d00c3
10018554:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10018558:	2100      	movs	r1, #0
1001855a:	f814 3b01 	ldrb.w	r3, [r4], #1
1001855e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
10018562:	eb02 0141 	add.w	r1, r2, r1, lsl #1
10018566:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001856a:	2a09      	cmp	r2, #9
1001856c:	d9f5      	bls.n	1001855a <_svfprintf_r+0x17a>
1001856e:	910b      	str	r1, [sp, #44]	@ 0x2c
10018570:	e78e      	b.n	10018490 <_svfprintf_r+0xb0>
10018572:	9f07      	ldr	r7, [sp, #28]
10018574:	4638      	mov	r0, r7
10018576:	f7fe fbbd 	bl	10016cf4 <_localeconv_r>
1001857a:	6843      	ldr	r3, [r0, #4]
1001857c:	931d      	str	r3, [sp, #116]	@ 0x74
1001857e:	4618      	mov	r0, r3
10018580:	f7fe fd1e 	bl	10016fc0 <strlen>
10018584:	901e      	str	r0, [sp, #120]	@ 0x78
10018586:	4606      	mov	r6, r0
10018588:	4638      	mov	r0, r7
1001858a:	f7fe fbb3 	bl	10016cf4 <_localeconv_r>
1001858e:	6883      	ldr	r3, [r0, #8]
10018590:	931b      	str	r3, [sp, #108]	@ 0x6c
10018592:	2e00      	cmp	r6, #0
10018594:	f040 861e 	bne.w	100191d4 <_svfprintf_r+0xdf4>
10018598:	7823      	ldrb	r3, [r4, #0]
1001859a:	e778      	b.n	1001848e <_svfprintf_r+0xae>
1001859c:	7823      	ldrb	r3, [r4, #0]
1001859e:	f049 0920 	orr.w	r9, r9, #32
100185a2:	e774      	b.n	1001848e <_svfprintf_r+0xae>
100185a4:	2208      	movs	r2, #8
100185a6:	2100      	movs	r1, #0
100185a8:	a82e      	add	r0, sp, #184	@ 0xb8
100185aa:	f7fe fb17 	bl	10016bdc <memset>
100185ae:	2301      	movs	r3, #1
100185b0:	441e      	add	r6, r3
100185b2:	e747      	b.n	10018444 <_svfprintf_r+0x64>
100185b4:	1b77      	subs	r7, r6, r5
100185b6:	4604      	mov	r4, r0
100185b8:	d011      	beq.n	100185de <_svfprintf_r+0x1fe>
100185ba:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
100185bc:	443b      	add	r3, r7
100185be:	9334      	str	r3, [sp, #208]	@ 0xd0
100185c0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100185c2:	3301      	adds	r3, #1
100185c4:	2b07      	cmp	r3, #7
100185c6:	e9c8 5700 	strd	r5, r7, [r8]
100185ca:	9333      	str	r3, [sp, #204]	@ 0xcc
100185cc:	dc18      	bgt.n	10018600 <_svfprintf_r+0x220>
100185ce:	f108 0808 	add.w	r8, r8, #8
100185d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100185d4:	443b      	add	r3, r7
100185d6:	930a      	str	r3, [sp, #40]	@ 0x28
100185d8:	2c00      	cmp	r4, #0
100185da:	f47f af4e 	bne.w	1001847a <_svfprintf_r+0x9a>
100185de:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
100185e0:	f8dd b01c 	ldr.w	fp, [sp, #28]
100185e4:	2b00      	cmp	r3, #0
100185e6:	f041 81f3 	bne.w	100199d0 <_svfprintf_r+0x15f0>
100185ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100185ec:	899b      	ldrh	r3, [r3, #12]
100185ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100185f2:	2b00      	cmp	r3, #0
100185f4:	f041 83c3 	bne.w	10019d7e <_svfprintf_r+0x199e>
100185f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
100185fa:	b05f      	add	sp, #380	@ 0x17c
100185fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018600:	9909      	ldr	r1, [sp, #36]	@ 0x24
10018602:	9807      	ldr	r0, [sp, #28]
10018604:	aa32      	add	r2, sp, #200	@ 0xc8
10018606:	f002 fb83 	bl	1001ad10 <__ssprint_r>
1001860a:	2800      	cmp	r0, #0
1001860c:	d1ed      	bne.n	100185ea <_svfprintf_r+0x20a>
1001860e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018612:	e7de      	b.n	100185d2 <_svfprintf_r+0x1f2>
10018614:	f3af 8000 	nop.w
	...
10018620:	20000494 	.word	0x20000494
10018624:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10018628:	2b00      	cmp	r3, #0
1001862a:	d0d8      	beq.n	100185de <_svfprintf_r+0x1fe>
1001862c:	2200      	movs	r2, #0
1001862e:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
10018632:	2301      	movs	r3, #1
10018634:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10018638:	9306      	str	r3, [sp, #24]
1001863a:	920c      	str	r2, [sp, #48]	@ 0x30
1001863c:	469b      	mov	fp, r3
1001863e:	9208      	str	r2, [sp, #32]
10018640:	9214      	str	r2, [sp, #80]	@ 0x50
10018642:	9210      	str	r2, [sp, #64]	@ 0x40
10018644:	9212      	str	r2, [sp, #72]	@ 0x48
10018646:	ad45      	add	r5, sp, #276	@ 0x114
10018648:	f019 0302 	ands.w	r3, r9, #2
1001864c:	d002      	beq.n	10018654 <_svfprintf_r+0x274>
1001864e:	9906      	ldr	r1, [sp, #24]
10018650:	3102      	adds	r1, #2
10018652:	9106      	str	r1, [sp, #24]
10018654:	f019 0784 	ands.w	r7, r9, #132	@ 0x84
10018658:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001865a:	d105      	bne.n	10018668 <_svfprintf_r+0x288>
1001865c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1001865e:	9806      	ldr	r0, [sp, #24]
10018660:	1a0e      	subs	r6, r1, r0
10018662:	2e00      	cmp	r6, #0
10018664:	f300 80aa 	bgt.w	100187bc <_svfprintf_r+0x3dc>
10018668:	b182      	cbz	r2, 1001868c <_svfprintf_r+0x2ac>
1001866a:	2201      	movs	r2, #1
1001866c:	f8c8 2004 	str.w	r2, [r8, #4]
10018670:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
10018672:	3201      	adds	r2, #1
10018674:	3401      	adds	r4, #1
10018676:	f10d 019f 	add.w	r1, sp, #159	@ 0x9f
1001867a:	2a07      	cmp	r2, #7
1001867c:	9434      	str	r4, [sp, #208]	@ 0xd0
1001867e:	9233      	str	r2, [sp, #204]	@ 0xcc
10018680:	f8c8 1000 	str.w	r1, [r8]
10018684:	f300 8405 	bgt.w	10018e92 <_svfprintf_r+0xab2>
10018688:	f108 0808 	add.w	r8, r8, #8
1001868c:	b183      	cbz	r3, 100186b0 <_svfprintf_r+0x2d0>
1001868e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018690:	aa28      	add	r2, sp, #160	@ 0xa0
10018692:	3301      	adds	r3, #1
10018694:	3402      	adds	r4, #2
10018696:	f8c8 2000 	str.w	r2, [r8]
1001869a:	2b07      	cmp	r3, #7
1001869c:	f04f 0202 	mov.w	r2, #2
100186a0:	9434      	str	r4, [sp, #208]	@ 0xd0
100186a2:	9333      	str	r3, [sp, #204]	@ 0xcc
100186a4:	f8c8 2004 	str.w	r2, [r8, #4]
100186a8:	f300 83e7 	bgt.w	10018e7a <_svfprintf_r+0xa9a>
100186ac:	f108 0808 	add.w	r8, r8, #8
100186b0:	2f80      	cmp	r7, #128	@ 0x80
100186b2:	f000 82c0 	beq.w	10018c36 <_svfprintf_r+0x856>
100186b6:	9b08      	ldr	r3, [sp, #32]
100186b8:	eba3 060b 	sub.w	r6, r3, fp
100186bc:	2e00      	cmp	r6, #0
100186be:	f300 82ff 	bgt.w	10018cc0 <_svfprintf_r+0x8e0>
100186c2:	f419 7f80 	tst.w	r9, #256	@ 0x100
100186c6:	f040 8219 	bne.w	10018afc <_svfprintf_r+0x71c>
100186ca:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100186cc:	f8c8 5000 	str.w	r5, [r8]
100186d0:	3301      	adds	r3, #1
100186d2:	445c      	add	r4, fp
100186d4:	2b07      	cmp	r3, #7
100186d6:	f8c8 b004 	str.w	fp, [r8, #4]
100186da:	9434      	str	r4, [sp, #208]	@ 0xd0
100186dc:	9333      	str	r3, [sp, #204]	@ 0xcc
100186de:	f300 836c 	bgt.w	10018dba <_svfprintf_r+0x9da>
100186e2:	f108 0808 	add.w	r8, r8, #8
100186e6:	f019 0f04 	tst.w	r9, #4
100186ea:	d005      	beq.n	100186f8 <_svfprintf_r+0x318>
100186ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100186ee:	9a06      	ldr	r2, [sp, #24]
100186f0:	1a9d      	subs	r5, r3, r2
100186f2:	2d00      	cmp	r5, #0
100186f4:	f300 83dc 	bgt.w	10018eb0 <_svfprintf_r+0xad0>
100186f8:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
100186fc:	9906      	ldr	r1, [sp, #24]
100186fe:	428a      	cmp	r2, r1
10018700:	bfac      	ite	ge
10018702:	189b      	addge	r3, r3, r2
10018704:	185b      	addlt	r3, r3, r1
10018706:	930a      	str	r3, [sp, #40]	@ 0x28
10018708:	2c00      	cmp	r4, #0
1001870a:	f040 8318 	bne.w	10018d3e <_svfprintf_r+0x95e>
1001870e:	2300      	movs	r3, #0
10018710:	9333      	str	r3, [sp, #204]	@ 0xcc
10018712:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10018714:	b11b      	cbz	r3, 1001871e <_svfprintf_r+0x33e>
10018716:	990c      	ldr	r1, [sp, #48]	@ 0x30
10018718:	9807      	ldr	r0, [sp, #28]
1001871a:	f7ff fd4b 	bl	100181b4 <_free_r>
1001871e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018722:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10018724:	e68c      	b.n	10018440 <_svfprintf_r+0x60>
10018726:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001872a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001872c:	3307      	adds	r3, #7
1001872e:	f023 0307 	bic.w	r3, r3, #7
10018732:	ecb3 7b02 	vldmia	r3!, {d7}
10018736:	ec57 6b17 	vmov	r6, r7, d7
1001873a:	930d      	str	r3, [sp, #52]	@ 0x34
1001873c:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
10018740:	9323      	str	r3, [sp, #140]	@ 0x8c
10018742:	ed8d 7a22 	vstr	s14, [sp, #136]	@ 0x88
10018746:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	@ 0x88
1001874a:	4bb1      	ldr	r3, [pc, #708]	@ (10018a10 <_svfprintf_r+0x630>)
1001874c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10018750:	4650      	mov	r0, sl
10018752:	4659      	mov	r1, fp
10018754:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
10018758:	f003 f812 	bl	1001b780 <__aeabi_dcmpun>
1001875c:	2800      	cmp	r0, #0
1001875e:	f040 8546 	bne.w	100191ee <_svfprintf_r+0xe0e>
10018762:	4bab      	ldr	r3, [pc, #684]	@ (10018a10 <_svfprintf_r+0x630>)
10018764:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10018768:	4650      	mov	r0, sl
1001876a:	4659      	mov	r1, fp
1001876c:	f002 ffea 	bl	1001b744 <__aeabi_dcmple>
10018770:	2800      	cmp	r0, #0
10018772:	f040 853c 	bne.w	100191ee <_svfprintf_r+0xe0e>
10018776:	2200      	movs	r2, #0
10018778:	2300      	movs	r3, #0
1001877a:	4630      	mov	r0, r6
1001877c:	4639      	mov	r1, r7
1001877e:	f002 ffd7 	bl	1001b730 <__aeabi_dcmplt>
10018782:	2800      	cmp	r0, #0
10018784:	f041 8051 	bne.w	1001982a <_svfprintf_r+0x144a>
10018788:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001878c:	4da1      	ldr	r5, [pc, #644]	@ (10018a14 <_svfprintf_r+0x634>)
1001878e:	4ba2      	ldr	r3, [pc, #648]	@ (10018a18 <_svfprintf_r+0x638>)
10018790:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
10018794:	990e      	ldr	r1, [sp, #56]	@ 0x38
10018796:	2947      	cmp	r1, #71	@ 0x47
10018798:	bfc8      	it	gt
1001879a:	461d      	movgt	r5, r3
1001879c:	2300      	movs	r3, #0
1001879e:	2103      	movs	r1, #3
100187a0:	930c      	str	r3, [sp, #48]	@ 0x30
100187a2:	9106      	str	r1, [sp, #24]
100187a4:	468b      	mov	fp, r1
100187a6:	9308      	str	r3, [sp, #32]
100187a8:	9314      	str	r3, [sp, #80]	@ 0x50
100187aa:	9310      	str	r3, [sp, #64]	@ 0x40
100187ac:	9312      	str	r3, [sp, #72]	@ 0x48
100187ae:	2a00      	cmp	r2, #0
100187b0:	f43f af4a 	beq.w	10018648 <_svfprintf_r+0x268>
100187b4:	9b06      	ldr	r3, [sp, #24]
100187b6:	3301      	adds	r3, #1
100187b8:	9306      	str	r3, [sp, #24]
100187ba:	e745      	b.n	10018648 <_svfprintf_r+0x268>
100187bc:	2e10      	cmp	r6, #16
100187be:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
100187c0:	f341 8276 	ble.w	10019cb0 <_svfprintf_r+0x18d0>
100187c4:	4895      	ldr	r0, [pc, #596]	@ (10018a1c <_svfprintf_r+0x63c>)
100187c6:	9521      	str	r5, [sp, #132]	@ 0x84
100187c8:	e9cd 371f 	strd	r3, r7, [sp, #124]	@ 0x7c
100187cc:	4621      	mov	r1, r4
100187ce:	9d09      	ldr	r5, [sp, #36]	@ 0x24
100187d0:	9c07      	ldr	r4, [sp, #28]
100187d2:	9015      	str	r0, [sp, #84]	@ 0x54
100187d4:	f04f 0a10 	mov.w	sl, #16
100187d8:	4607      	mov	r7, r0
100187da:	e004      	b.n	100187e6 <_svfprintf_r+0x406>
100187dc:	3e10      	subs	r6, #16
100187de:	2e10      	cmp	r6, #16
100187e0:	f108 0808 	add.w	r8, r8, #8
100187e4:	dd16      	ble.n	10018814 <_svfprintf_r+0x434>
100187e6:	3201      	adds	r2, #1
100187e8:	3110      	adds	r1, #16
100187ea:	2a07      	cmp	r2, #7
100187ec:	e9c8 7a00 	strd	r7, sl, [r8]
100187f0:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
100187f4:	ddf2      	ble.n	100187dc <_svfprintf_r+0x3fc>
100187f6:	aa32      	add	r2, sp, #200	@ 0xc8
100187f8:	4629      	mov	r1, r5
100187fa:	4620      	mov	r0, r4
100187fc:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018800:	f002 fa86 	bl	1001ad10 <__ssprint_r>
10018804:	2800      	cmp	r0, #0
10018806:	f040 86f0 	bne.w	100195ea <_svfprintf_r+0x120a>
1001880a:	3e10      	subs	r6, #16
1001880c:	2e10      	cmp	r6, #16
1001880e:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
10018812:	dce8      	bgt.n	100187e6 <_svfprintf_r+0x406>
10018814:	e9dd 371f 	ldrd	r3, r7, [sp, #124]	@ 0x7c
10018818:	9d21      	ldr	r5, [sp, #132]	@ 0x84
1001881a:	460c      	mov	r4, r1
1001881c:	3201      	adds	r2, #1
1001881e:	9915      	ldr	r1, [sp, #84]	@ 0x54
10018820:	f8c8 1000 	str.w	r1, [r8]
10018824:	4434      	add	r4, r6
10018826:	2a07      	cmp	r2, #7
10018828:	e9cd 2433 	strd	r2, r4, [sp, #204]	@ 0xcc
1001882c:	f8c8 6004 	str.w	r6, [r8, #4]
10018830:	f300 86ca 	bgt.w	100195c8 <_svfprintf_r+0x11e8>
10018834:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10018838:	f108 0808 	add.w	r8, r8, #8
1001883c:	e714      	b.n	10018668 <_svfprintf_r+0x288>
1001883e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10018840:	2b43      	cmp	r3, #67	@ 0x43
10018842:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10018846:	f102 0404 	add.w	r4, r2, #4
1001884a:	d003      	beq.n	10018854 <_svfprintf_r+0x474>
1001884c:	f019 0f10 	tst.w	r9, #16
10018850:	f000 855c 	beq.w	1001930c <_svfprintf_r+0xf2c>
10018854:	2208      	movs	r2, #8
10018856:	2100      	movs	r1, #0
10018858:	a830      	add	r0, sp, #192	@ 0xc0
1001885a:	f7fe f9bf 	bl	10016bdc <memset>
1001885e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10018860:	9807      	ldr	r0, [sp, #28]
10018862:	681a      	ldr	r2, [r3, #0]
10018864:	ad45      	add	r5, sp, #276	@ 0x114
10018866:	ab30      	add	r3, sp, #192	@ 0xc0
10018868:	4629      	mov	r1, r5
1001886a:	f7fe fc15 	bl	10017098 <_wcrtomb_r>
1001886e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
10018872:	4683      	mov	fp, r0
10018874:	f001 827e 	beq.w	10019d74 <_svfprintf_r+0x1994>
10018878:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
1001887c:	9306      	str	r3, [sp, #24]
1001887e:	2200      	movs	r2, #0
10018880:	940d      	str	r4, [sp, #52]	@ 0x34
10018882:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10018886:	920c      	str	r2, [sp, #48]	@ 0x30
10018888:	9208      	str	r2, [sp, #32]
1001888a:	9214      	str	r2, [sp, #80]	@ 0x50
1001888c:	9210      	str	r2, [sp, #64]	@ 0x40
1001888e:	9212      	str	r2, [sp, #72]	@ 0x48
10018890:	e6da      	b.n	10018648 <_svfprintf_r+0x268>
10018892:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10018894:	f856 5b04 	ldr.w	r5, [r6], #4
10018898:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001889c:	2300      	movs	r3, #0
1001889e:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
100188a2:	2d00      	cmp	r5, #0
100188a4:	f000 8557 	beq.w	10019356 <_svfprintf_r+0xf76>
100188a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100188aa:	2b53      	cmp	r3, #83	@ 0x53
100188ac:	f000 86b9 	beq.w	10019622 <_svfprintf_r+0x1242>
100188b0:	f019 0310 	ands.w	r3, r9, #16
100188b4:	9312      	str	r3, [sp, #72]	@ 0x48
100188b6:	f040 86b4 	bne.w	10019622 <_svfprintf_r+0x1242>
100188ba:	9b08      	ldr	r3, [sp, #32]
100188bc:	1c5a      	adds	r2, r3, #1
100188be:	f001 8092 	beq.w	100199e6 <_svfprintf_r+0x1606>
100188c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
100188c4:	461a      	mov	r2, r3
100188c6:	4628      	mov	r0, r5
100188c8:	f7fe fa72 	bl	10016db0 <memchr>
100188cc:	900c      	str	r0, [sp, #48]	@ 0x30
100188ce:	2800      	cmp	r0, #0
100188d0:	f001 82ed 	beq.w	10019eae <_svfprintf_r+0x1ace>
100188d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100188d6:	960d      	str	r6, [sp, #52]	@ 0x34
100188d8:	eba3 0b05 	sub.w	fp, r3, r5
100188dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
100188de:	9308      	str	r3, [sp, #32]
100188e0:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
100188e4:	9314      	str	r3, [sp, #80]	@ 0x50
100188e6:	9310      	str	r3, [sp, #64]	@ 0x40
100188e8:	930c      	str	r3, [sp, #48]	@ 0x30
100188ea:	2373      	movs	r3, #115	@ 0x73
100188ec:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100188f0:	9106      	str	r1, [sp, #24]
100188f2:	930e      	str	r3, [sp, #56]	@ 0x38
100188f4:	e75b      	b.n	100187ae <_svfprintf_r+0x3ce>
100188f6:	f019 0f20 	tst.w	r9, #32
100188fa:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100188fe:	f000 80ec 	beq.w	10018ada <_svfprintf_r+0x6fa>
10018902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10018904:	3307      	adds	r3, #7
10018906:	f023 0307 	bic.w	r3, r3, #7
1001890a:	461a      	mov	r2, r3
1001890c:	6859      	ldr	r1, [r3, #4]
1001890e:	f852 3b08 	ldr.w	r3, [r2], #8
10018912:	920d      	str	r2, [sp, #52]	@ 0x34
10018914:	460a      	mov	r2, r1
10018916:	2900      	cmp	r1, #0
10018918:	f2c0 8419 	blt.w	1001914e <_svfprintf_r+0xd6e>
1001891c:	9908      	ldr	r1, [sp, #32]
1001891e:	3101      	adds	r1, #1
10018920:	f000 829c 	beq.w	10018e5c <_svfprintf_r+0xa7c>
10018924:	ea53 0102 	orrs.w	r1, r3, r2
10018928:	f029 0480 	bic.w	r4, r9, #128	@ 0x80
1001892c:	f040 8297 	bne.w	10018e5e <_svfprintf_r+0xa7e>
10018930:	9a08      	ldr	r2, [sp, #32]
10018932:	2a00      	cmp	r2, #0
10018934:	f040 8298 	bne.w	10018e68 <_svfprintf_r+0xa88>
10018938:	46a1      	mov	r9, r4
1001893a:	4693      	mov	fp, r2
1001893c:	ad5e      	add	r5, sp, #376	@ 0x178
1001893e:	e151      	b.n	10018be4 <_svfprintf_r+0x804>
10018940:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10018942:	f853 2b04 	ldr.w	r2, [r3], #4
10018946:	920b      	str	r2, [sp, #44]	@ 0x2c
10018948:	2a00      	cmp	r2, #0
1001894a:	f280 8424 	bge.w	10019196 <_svfprintf_r+0xdb6>
1001894e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10018950:	930d      	str	r3, [sp, #52]	@ 0x34
10018952:	4252      	negs	r2, r2
10018954:	920b      	str	r2, [sp, #44]	@ 0x2c
10018956:	7823      	ldrb	r3, [r4, #0]
10018958:	f049 0904 	orr.w	r9, r9, #4
1001895c:	e597      	b.n	1001848e <_svfprintf_r+0xae>
1001895e:	232b      	movs	r3, #43	@ 0x2b
10018960:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
10018964:	7823      	ldrb	r3, [r4, #0]
10018966:	e592      	b.n	1001848e <_svfprintf_r+0xae>
10018968:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001896c:	f049 0910 	orr.w	r9, r9, #16
10018970:	f019 0220 	ands.w	r2, r9, #32
10018974:	f000 83b4 	beq.w	100190e0 <_svfprintf_r+0xd00>
10018978:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001897a:	3307      	adds	r3, #7
1001897c:	f023 0307 	bic.w	r3, r3, #7
10018980:	4619      	mov	r1, r3
10018982:	685a      	ldr	r2, [r3, #4]
10018984:	f851 3b08 	ldr.w	r3, [r1], #8
10018988:	910d      	str	r1, [sp, #52]	@ 0x34
1001898a:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
1001898e:	2100      	movs	r1, #0
10018990:	2000      	movs	r0, #0
10018992:	9d08      	ldr	r5, [sp, #32]
10018994:	f88d 009f 	strb.w	r0, [sp, #159]	@ 0x9f
10018998:	1c6f      	adds	r7, r5, #1
1001899a:	f000 810c 	beq.w	10018bb6 <_svfprintf_r+0x7d6>
1001899e:	ea53 0002 	orrs.w	r0, r3, r2
100189a2:	f024 0980 	bic.w	r9, r4, #128	@ 0x80
100189a6:	f040 8105 	bne.w	10018bb4 <_svfprintf_r+0x7d4>
100189aa:	2d00      	cmp	r5, #0
100189ac:	f040 8627 	bne.w	100195fe <_svfprintf_r+0x121e>
100189b0:	2900      	cmp	r1, #0
100189b2:	f040 83c8 	bne.w	10019146 <_svfprintf_r+0xd66>
100189b6:	f014 0b01 	ands.w	fp, r4, #1
100189ba:	f000 83f0 	beq.w	1001919e <_svfprintf_r+0xdbe>
100189be:	2330      	movs	r3, #48	@ 0x30
100189c0:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
100189c4:	f20d 1577 	addw	r5, sp, #375	@ 0x177
100189c8:	e10c      	b.n	10018be4 <_svfprintf_r+0x804>
100189ca:	7823      	ldrb	r3, [r4, #0]
100189cc:	2b68      	cmp	r3, #104	@ 0x68
100189ce:	bf03      	ittte	eq
100189d0:	7863      	ldrbeq	r3, [r4, #1]
100189d2:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
100189d6:	3401      	addeq	r4, #1
100189d8:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
100189dc:	e557      	b.n	1001848e <_svfprintf_r+0xae>
100189de:	f019 0f20 	tst.w	r9, #32
100189e2:	940f      	str	r4, [sp, #60]	@ 0x3c
100189e4:	f000 83e5 	beq.w	100191b2 <_svfprintf_r+0xdd2>
100189e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100189ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100189ec:	681b      	ldr	r3, [r3, #0]
100189ee:	601a      	str	r2, [r3, #0]
100189f0:	17d2      	asrs	r2, r2, #31
100189f2:	605a      	str	r2, [r3, #4]
100189f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100189f6:	3304      	adds	r3, #4
100189f8:	930d      	str	r3, [sp, #52]	@ 0x34
100189fa:	e692      	b.n	10018722 <_svfprintf_r+0x342>
100189fc:	7823      	ldrb	r3, [r4, #0]
100189fe:	2b6c      	cmp	r3, #108	@ 0x6c
10018a00:	bf03      	ittte	eq
10018a02:	7863      	ldrbeq	r3, [r4, #1]
10018a04:	f049 0920 	orreq.w	r9, r9, #32
10018a08:	3401      	addeq	r4, #1
10018a0a:	f049 0910 	orrne.w	r9, r9, #16
10018a0e:	e53e      	b.n	1001848e <_svfprintf_r+0xae>
10018a10:	7fefffff 	.word	0x7fefffff
10018a14:	10023a38 	.word	0x10023a38
10018a18:	10023a3c 	.word	0x10023a3c
10018a1c:	10023c9c 	.word	0x10023c9c
10018a20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10018a22:	940f      	str	r4, [sp, #60]	@ 0x3c
10018a24:	f852 3b04 	ldr.w	r3, [r2], #4
10018a28:	920d      	str	r2, [sp, #52]	@ 0x34
10018a2a:	f647 0230 	movw	r2, #30768	@ 0x7830
10018a2e:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
10018a32:	2078      	movs	r0, #120	@ 0x78
10018a34:	4aa8      	ldr	r2, [pc, #672]	@ (10018cd8 <_svfprintf_r+0x8f8>)
10018a36:	9219      	str	r2, [sp, #100]	@ 0x64
10018a38:	f049 0402 	orr.w	r4, r9, #2
10018a3c:	2200      	movs	r2, #0
10018a3e:	2102      	movs	r1, #2
10018a40:	900e      	str	r0, [sp, #56]	@ 0x38
10018a42:	e7a5      	b.n	10018990 <_svfprintf_r+0x5b0>
10018a44:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10018a48:	f049 0410 	orr.w	r4, r9, #16
10018a4c:	f014 0220 	ands.w	r2, r4, #32
10018a50:	f000 8355 	beq.w	100190fe <_svfprintf_r+0xd1e>
10018a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10018a56:	3307      	adds	r3, #7
10018a58:	f023 0307 	bic.w	r3, r3, #7
10018a5c:	4619      	mov	r1, r3
10018a5e:	685a      	ldr	r2, [r3, #4]
10018a60:	f851 3b08 	ldr.w	r3, [r1], #8
10018a64:	910d      	str	r1, [sp, #52]	@ 0x34
10018a66:	2101      	movs	r1, #1
10018a68:	e792      	b.n	10018990 <_svfprintf_r+0x5b0>
10018a6a:	7823      	ldrb	r3, [r4, #0]
10018a6c:	f049 0908 	orr.w	r9, r9, #8
10018a70:	e50d      	b.n	1001848e <_svfprintf_r+0xae>
10018a72:	7823      	ldrb	r3, [r4, #0]
10018a74:	f049 0901 	orr.w	r9, r9, #1
10018a78:	e509      	b.n	1001848e <_svfprintf_r+0xae>
10018a7a:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10018a7e:	7823      	ldrb	r3, [r4, #0]
10018a80:	2a00      	cmp	r2, #0
10018a82:	f47f ad04 	bne.w	1001848e <_svfprintf_r+0xae>
10018a86:	2220      	movs	r2, #32
10018a88:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10018a8c:	e4ff      	b.n	1001848e <_svfprintf_r+0xae>
10018a8e:	7823      	ldrb	r3, [r4, #0]
10018a90:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
10018a94:	e4fb      	b.n	1001848e <_svfprintf_r+0xae>
10018a96:	4621      	mov	r1, r4
10018a98:	f811 3b01 	ldrb.w	r3, [r1], #1
10018a9c:	2b2a      	cmp	r3, #42	@ 0x2a
10018a9e:	f001 8229 	beq.w	10019ef4 <_svfprintf_r+0x1b14>
10018aa2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10018aa6:	2a09      	cmp	r2, #9
10018aa8:	460c      	mov	r4, r1
10018aaa:	bf98      	it	ls
10018aac:	2100      	movls	r1, #0
10018aae:	f201 8130 	bhi.w	10019d12 <_svfprintf_r+0x1932>
10018ab2:	f814 3b01 	ldrb.w	r3, [r4], #1
10018ab6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
10018aba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
10018abe:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10018ac2:	2a09      	cmp	r2, #9
10018ac4:	d9f5      	bls.n	10018ab2 <_svfprintf_r+0x6d2>
10018ac6:	9108      	str	r1, [sp, #32]
10018ac8:	e4e2      	b.n	10018490 <_svfprintf_r+0xb0>
10018aca:	f049 0910 	orr.w	r9, r9, #16
10018ace:	f019 0f20 	tst.w	r9, #32
10018ad2:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10018ad6:	f47f af14 	bne.w	10018902 <_svfprintf_r+0x522>
10018ada:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10018adc:	f019 0f10 	tst.w	r9, #16
10018ae0:	f852 3b04 	ldr.w	r3, [r2], #4
10018ae4:	920d      	str	r2, [sp, #52]	@ 0x34
10018ae6:	f040 8360 	bne.w	100191aa <_svfprintf_r+0xdca>
10018aea:	f019 0f40 	tst.w	r9, #64	@ 0x40
10018aee:	f000 8358 	beq.w	100191a2 <_svfprintf_r+0xdc2>
10018af2:	f343 32c0 	sbfx	r2, r3, #15, #1
10018af6:	4611      	mov	r1, r2
10018af8:	b21b      	sxth	r3, r3
10018afa:	e70c      	b.n	10018916 <_svfprintf_r+0x536>
10018afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10018afe:	2b65      	cmp	r3, #101	@ 0x65
10018b00:	f340 8166 	ble.w	10018dd0 <_svfprintf_r+0x9f0>
10018b04:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10018b08:	2200      	movs	r2, #0
10018b0a:	2300      	movs	r3, #0
10018b0c:	f002 fe06 	bl	1001b71c <__aeabi_dcmpeq>
10018b10:	2800      	cmp	r0, #0
10018b12:	f000 8211 	beq.w	10018f38 <_svfprintf_r+0xb58>
10018b16:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018b18:	4a70      	ldr	r2, [pc, #448]	@ (10018cdc <_svfprintf_r+0x8fc>)
10018b1a:	f8c8 2000 	str.w	r2, [r8]
10018b1e:	3301      	adds	r3, #1
10018b20:	3401      	adds	r4, #1
10018b22:	2201      	movs	r2, #1
10018b24:	2b07      	cmp	r3, #7
10018b26:	9434      	str	r4, [sp, #208]	@ 0xd0
10018b28:	9333      	str	r3, [sp, #204]	@ 0xcc
10018b2a:	f8c8 2004 	str.w	r2, [r8, #4]
10018b2e:	f300 856b 	bgt.w	10019608 <_svfprintf_r+0x1228>
10018b32:	f108 0808 	add.w	r8, r8, #8
10018b36:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
10018b38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10018b3a:	4293      	cmp	r3, r2
10018b3c:	f280 8326 	bge.w	1001918c <_svfprintf_r+0xdac>
10018b40:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10018b42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
10018b44:	441c      	add	r4, r3
10018b46:	e9c8 2300 	strd	r2, r3, [r8]
10018b4a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018b4c:	9434      	str	r4, [sp, #208]	@ 0xd0
10018b4e:	3301      	adds	r3, #1
10018b50:	2b07      	cmp	r3, #7
10018b52:	9333      	str	r3, [sp, #204]	@ 0xcc
10018b54:	f300 83e4 	bgt.w	10019320 <_svfprintf_r+0xf40>
10018b58:	f108 0808 	add.w	r8, r8, #8
10018b5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10018b5e:	1e5d      	subs	r5, r3, #1
10018b60:	2d00      	cmp	r5, #0
10018b62:	f77f adc0 	ble.w	100186e6 <_svfprintf_r+0x306>
10018b66:	2d10      	cmp	r5, #16
10018b68:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018b6a:	f340 85ad 	ble.w	100196c8 <_svfprintf_r+0x12e8>
10018b6e:	4f5c      	ldr	r7, [pc, #368]	@ (10018ce0 <_svfprintf_r+0x900>)
10018b70:	f8dd b01c 	ldr.w	fp, [sp, #28]
10018b74:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
10018b78:	9715      	str	r7, [sp, #84]	@ 0x54
10018b7a:	2610      	movs	r6, #16
10018b7c:	e005      	b.n	10018b8a <_svfprintf_r+0x7aa>
10018b7e:	f108 0808 	add.w	r8, r8, #8
10018b82:	3d10      	subs	r5, #16
10018b84:	2d10      	cmp	r5, #16
10018b86:	f340 85a1 	ble.w	100196cc <_svfprintf_r+0x12ec>
10018b8a:	3301      	adds	r3, #1
10018b8c:	3410      	adds	r4, #16
10018b8e:	2b07      	cmp	r3, #7
10018b90:	e9c8 7600 	strd	r7, r6, [r8]
10018b94:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10018b98:	ddf1      	ble.n	10018b7e <_svfprintf_r+0x79e>
10018b9a:	aa32      	add	r2, sp, #200	@ 0xc8
10018b9c:	4651      	mov	r1, sl
10018b9e:	4658      	mov	r0, fp
10018ba0:	f002 f8b6 	bl	1001ad10 <__ssprint_r>
10018ba4:	2800      	cmp	r0, #0
10018ba6:	f040 82c0 	bne.w	1001912a <_svfprintf_r+0xd4a>
10018baa:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10018bae:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018bb2:	e7e6      	b.n	10018b82 <_svfprintf_r+0x7a2>
10018bb4:	464c      	mov	r4, r9
10018bb6:	2901      	cmp	r1, #1
10018bb8:	f000 8151 	beq.w	10018e5e <_svfprintf_r+0xa7e>
10018bbc:	2902      	cmp	r1, #2
10018bbe:	ad5e      	add	r5, sp, #376	@ 0x178
10018bc0:	d11e      	bne.n	10018c00 <_svfprintf_r+0x820>
10018bc2:	9819      	ldr	r0, [sp, #100]	@ 0x64
10018bc4:	f003 010f 	and.w	r1, r3, #15
10018bc8:	091b      	lsrs	r3, r3, #4
10018bca:	5c41      	ldrb	r1, [r0, r1]
10018bcc:	f805 1d01 	strb.w	r1, [r5, #-1]!
10018bd0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
10018bd4:	0912      	lsrs	r2, r2, #4
10018bd6:	ea53 0102 	orrs.w	r1, r3, r2
10018bda:	d1f3      	bne.n	10018bc4 <_svfprintf_r+0x7e4>
10018bdc:	ab5e      	add	r3, sp, #376	@ 0x178
10018bde:	46a1      	mov	r9, r4
10018be0:	eba3 0b05 	sub.w	fp, r3, r5
10018be4:	9908      	ldr	r1, [sp, #32]
10018be6:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10018bea:	4559      	cmp	r1, fp
10018bec:	f04f 0300 	mov.w	r3, #0
10018bf0:	bfb8      	it	lt
10018bf2:	4659      	movlt	r1, fp
10018bf4:	930c      	str	r3, [sp, #48]	@ 0x30
10018bf6:	9106      	str	r1, [sp, #24]
10018bf8:	9314      	str	r3, [sp, #80]	@ 0x50
10018bfa:	9310      	str	r3, [sp, #64]	@ 0x40
10018bfc:	9312      	str	r3, [sp, #72]	@ 0x48
10018bfe:	e5d6      	b.n	100187ae <_svfprintf_r+0x3ce>
10018c00:	f003 0107 	and.w	r1, r3, #7
10018c04:	08db      	lsrs	r3, r3, #3
10018c06:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
10018c0a:	08d2      	lsrs	r2, r2, #3
10018c0c:	3130      	adds	r1, #48	@ 0x30
10018c0e:	ea53 0602 	orrs.w	r6, r3, r2
10018c12:	4628      	mov	r0, r5
10018c14:	f805 1d01 	strb.w	r1, [r5, #-1]!
10018c18:	d1f2      	bne.n	10018c00 <_svfprintf_r+0x820>
10018c1a:	07e6      	lsls	r6, r4, #31
10018c1c:	d5de      	bpl.n	10018bdc <_svfprintf_r+0x7fc>
10018c1e:	2930      	cmp	r1, #48	@ 0x30
10018c20:	d0dc      	beq.n	10018bdc <_svfprintf_r+0x7fc>
10018c22:	2330      	movs	r3, #48	@ 0x30
10018c24:	3802      	subs	r0, #2
10018c26:	f805 3c01 	strb.w	r3, [r5, #-1]
10018c2a:	ab5e      	add	r3, sp, #376	@ 0x178
10018c2c:	46a1      	mov	r9, r4
10018c2e:	eba3 0b00 	sub.w	fp, r3, r0
10018c32:	4605      	mov	r5, r0
10018c34:	e7d6      	b.n	10018be4 <_svfprintf_r+0x804>
10018c36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10018c38:	9a06      	ldr	r2, [sp, #24]
10018c3a:	1a9e      	subs	r6, r3, r2
10018c3c:	2e00      	cmp	r6, #0
10018c3e:	f77f ad3a 	ble.w	100186b6 <_svfprintf_r+0x2d6>
10018c42:	2e10      	cmp	r6, #16
10018c44:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018c46:	f341 809f 	ble.w	10019d88 <_svfprintf_r+0x19a8>
10018c4a:	4825      	ldr	r0, [pc, #148]	@ (10018ce0 <_svfprintf_r+0x900>)
10018c4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
10018c50:	9015      	str	r0, [sp, #84]	@ 0x54
10018c52:	4621      	mov	r1, r4
10018c54:	2710      	movs	r7, #16
10018c56:	461a      	mov	r2, r3
10018c58:	4604      	mov	r4, r0
10018c5a:	e004      	b.n	10018c66 <_svfprintf_r+0x886>
10018c5c:	3e10      	subs	r6, #16
10018c5e:	2e10      	cmp	r6, #16
10018c60:	f108 0808 	add.w	r8, r8, #8
10018c64:	dd16      	ble.n	10018c94 <_svfprintf_r+0x8b4>
10018c66:	3201      	adds	r2, #1
10018c68:	3110      	adds	r1, #16
10018c6a:	2a07      	cmp	r2, #7
10018c6c:	e9c8 4700 	strd	r4, r7, [r8]
10018c70:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
10018c74:	ddf2      	ble.n	10018c5c <_svfprintf_r+0x87c>
10018c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
10018c78:	aa32      	add	r2, sp, #200	@ 0xc8
10018c7a:	4650      	mov	r0, sl
10018c7c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018c80:	f002 f846 	bl	1001ad10 <__ssprint_r>
10018c84:	2800      	cmp	r0, #0
10018c86:	f040 84b2 	bne.w	100195ee <_svfprintf_r+0x120e>
10018c8a:	3e10      	subs	r6, #16
10018c8c:	2e10      	cmp	r6, #16
10018c8e:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
10018c92:	dce8      	bgt.n	10018c66 <_svfprintf_r+0x886>
10018c94:	460c      	mov	r4, r1
10018c96:	4613      	mov	r3, r2
10018c98:	3301      	adds	r3, #1
10018c9a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10018c9c:	f8c8 2000 	str.w	r2, [r8]
10018ca0:	4434      	add	r4, r6
10018ca2:	2b07      	cmp	r3, #7
10018ca4:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10018ca8:	f8c8 6004 	str.w	r6, [r8, #4]
10018cac:	f300 851c 	bgt.w	100196e8 <_svfprintf_r+0x1308>
10018cb0:	9b08      	ldr	r3, [sp, #32]
10018cb2:	eba3 060b 	sub.w	r6, r3, fp
10018cb6:	2e00      	cmp	r6, #0
10018cb8:	f108 0808 	add.w	r8, r8, #8
10018cbc:	f77f ad01 	ble.w	100186c2 <_svfprintf_r+0x2e2>
10018cc0:	4a07      	ldr	r2, [pc, #28]	@ (10018ce0 <_svfprintf_r+0x900>)
10018cc2:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018cc4:	9215      	str	r2, [sp, #84]	@ 0x54
10018cc6:	2e10      	cmp	r6, #16
10018cc8:	dd2a      	ble.n	10018d20 <_svfprintf_r+0x940>
10018cca:	4622      	mov	r2, r4
10018ccc:	9f07      	ldr	r7, [sp, #28]
10018cce:	9c09      	ldr	r4, [sp, #36]	@ 0x24
10018cd0:	f04f 0a10 	mov.w	sl, #16
10018cd4:	e00b      	b.n	10018cee <_svfprintf_r+0x90e>
10018cd6:	bf00      	nop
10018cd8:	10023a48 	.word	0x10023a48
10018cdc:	1001bcbc 	.word	0x1001bcbc
10018ce0:	10023c8c 	.word	0x10023c8c
10018ce4:	3e10      	subs	r6, #16
10018ce6:	2e10      	cmp	r6, #16
10018ce8:	f108 0808 	add.w	r8, r8, #8
10018cec:	dd17      	ble.n	10018d1e <_svfprintf_r+0x93e>
10018cee:	3301      	adds	r3, #1
10018cf0:	498e      	ldr	r1, [pc, #568]	@ (10018f2c <_svfprintf_r+0xb4c>)
10018cf2:	3210      	adds	r2, #16
10018cf4:	2b07      	cmp	r3, #7
10018cf6:	e9c8 1a00 	strd	r1, sl, [r8]
10018cfa:	e9cd 3233 	strd	r3, r2, [sp, #204]	@ 0xcc
10018cfe:	ddf1      	ble.n	10018ce4 <_svfprintf_r+0x904>
10018d00:	aa32      	add	r2, sp, #200	@ 0xc8
10018d02:	4621      	mov	r1, r4
10018d04:	4638      	mov	r0, r7
10018d06:	f002 f803 	bl	1001ad10 <__ssprint_r>
10018d0a:	2800      	cmp	r0, #0
10018d0c:	f040 820c 	bne.w	10019128 <_svfprintf_r+0xd48>
10018d10:	3e10      	subs	r6, #16
10018d12:	2e10      	cmp	r6, #16
10018d14:	e9dd 3233 	ldrd	r3, r2, [sp, #204]	@ 0xcc
10018d18:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018d1c:	dce7      	bgt.n	10018cee <_svfprintf_r+0x90e>
10018d1e:	4614      	mov	r4, r2
10018d20:	3301      	adds	r3, #1
10018d22:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10018d24:	f8c8 2000 	str.w	r2, [r8]
10018d28:	4434      	add	r4, r6
10018d2a:	2b07      	cmp	r3, #7
10018d2c:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10018d30:	f8c8 6004 	str.w	r6, [r8, #4]
10018d34:	f300 81c7 	bgt.w	100190c6 <_svfprintf_r+0xce6>
10018d38:	f108 0808 	add.w	r8, r8, #8
10018d3c:	e4c1      	b.n	100186c2 <_svfprintf_r+0x2e2>
10018d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
10018d40:	9807      	ldr	r0, [sp, #28]
10018d42:	aa32      	add	r2, sp, #200	@ 0xc8
10018d44:	f001 ffe4 	bl	1001ad10 <__ssprint_r>
10018d48:	2800      	cmp	r0, #0
10018d4a:	f43f ace0 	beq.w	1001870e <_svfprintf_r+0x32e>
10018d4e:	f8dd b01c 	ldr.w	fp, [sp, #28]
10018d52:	e1ea      	b.n	1001912a <_svfprintf_r+0xd4a>
10018d54:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018d56:	4976      	ldr	r1, [pc, #472]	@ (10018f30 <_svfprintf_r+0xb50>)
10018d58:	f8c8 1000 	str.w	r1, [r8]
10018d5c:	3301      	adds	r3, #1
10018d5e:	3401      	adds	r4, #1
10018d60:	2101      	movs	r1, #1
10018d62:	2b07      	cmp	r3, #7
10018d64:	9434      	str	r4, [sp, #208]	@ 0xd0
10018d66:	9333      	str	r3, [sp, #204]	@ 0xcc
10018d68:	f8c8 1004 	str.w	r1, [r8, #4]
10018d6c:	f300 8573 	bgt.w	10019856 <_svfprintf_r+0x1476>
10018d70:	f108 0808 	add.w	r8, r8, #8
10018d74:	2a00      	cmp	r2, #0
10018d76:	f040 84e5 	bne.w	10019744 <_svfprintf_r+0x1364>
10018d7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10018d7c:	f009 0301 	and.w	r3, r9, #1
10018d80:	4313      	orrs	r3, r2
10018d82:	f43f acb0 	beq.w	100186e6 <_svfprintf_r+0x306>
10018d86:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10018d88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
10018d8a:	441c      	add	r4, r3
10018d8c:	e9c8 2300 	strd	r2, r3, [r8]
10018d90:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018d92:	9434      	str	r4, [sp, #208]	@ 0xd0
10018d94:	3301      	adds	r3, #1
10018d96:	2b07      	cmp	r3, #7
10018d98:	9333      	str	r3, [sp, #204]	@ 0xcc
10018d9a:	f300 8643 	bgt.w	10019a24 <_svfprintf_r+0x1644>
10018d9e:	f108 0808 	add.w	r8, r8, #8
10018da2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10018da4:	f8c8 5000 	str.w	r5, [r8]
10018da8:	3301      	adds	r3, #1
10018daa:	4414      	add	r4, r2
10018dac:	2b07      	cmp	r3, #7
10018dae:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10018db2:	f8c8 2004 	str.w	r2, [r8, #4]
10018db6:	f77f ac94 	ble.w	100186e2 <_svfprintf_r+0x302>
10018dba:	9909      	ldr	r1, [sp, #36]	@ 0x24
10018dbc:	9807      	ldr	r0, [sp, #28]
10018dbe:	aa32      	add	r2, sp, #200	@ 0xc8
10018dc0:	f001 ffa6 	bl	1001ad10 <__ssprint_r>
10018dc4:	2800      	cmp	r0, #0
10018dc6:	d1c2      	bne.n	10018d4e <_svfprintf_r+0x96e>
10018dc8:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10018dca:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018dce:	e48a      	b.n	100186e6 <_svfprintf_r+0x306>
10018dd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10018dd2:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
10018dd4:	2b01      	cmp	r3, #1
10018dd6:	f104 0401 	add.w	r4, r4, #1
10018dda:	f106 0601 	add.w	r6, r6, #1
10018dde:	f108 0708 	add.w	r7, r8, #8
10018de2:	f340 8129 	ble.w	10019038 <_svfprintf_r+0xc58>
10018de6:	2301      	movs	r3, #1
10018de8:	2e07      	cmp	r6, #7
10018dea:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10018dee:	f8c8 5000 	str.w	r5, [r8]
10018df2:	f8c8 3004 	str.w	r3, [r8, #4]
10018df6:	f300 81b1 	bgt.w	1001915c <_svfprintf_r+0xd7c>
10018dfa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10018dfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
10018dfe:	3601      	adds	r6, #1
10018e00:	441c      	add	r4, r3
10018e02:	2e07      	cmp	r6, #7
10018e04:	e9c7 2300 	strd	r2, r3, [r7]
10018e08:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10018e0c:	f300 81b2 	bgt.w	10019174 <_svfprintf_r+0xd94>
10018e10:	3708      	adds	r7, #8
10018e12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10018e14:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10018e18:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
10018e1c:	2200      	movs	r2, #0
10018e1e:	2300      	movs	r3, #0
10018e20:	f002 fc7c 	bl	1001b71c <__aeabi_dcmpeq>
10018e24:	2800      	cmp	r0, #0
10018e26:	f040 8121 	bne.w	1001906c <_svfprintf_r+0xc8c>
10018e2a:	3601      	adds	r6, #1
10018e2c:	3501      	adds	r5, #1
10018e2e:	4444      	add	r4, r8
10018e30:	2e07      	cmp	r6, #7
10018e32:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10018e36:	603d      	str	r5, [r7, #0]
10018e38:	f8c7 8004 	str.w	r8, [r7, #4]
10018e3c:	f300 810a 	bgt.w	10019054 <_svfprintf_r+0xc74>
10018e40:	3708      	adds	r7, #8
10018e42:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10018e44:	607b      	str	r3, [r7, #4]
10018e46:	3601      	adds	r6, #1
10018e48:	441c      	add	r4, r3
10018e4a:	2e07      	cmp	r6, #7
10018e4c:	ab2c      	add	r3, sp, #176	@ 0xb0
10018e4e:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10018e52:	603b      	str	r3, [r7, #0]
10018e54:	dcb1      	bgt.n	10018dba <_svfprintf_r+0x9da>
10018e56:	f107 0808 	add.w	r8, r7, #8
10018e5a:	e444      	b.n	100186e6 <_svfprintf_r+0x306>
10018e5c:	464c      	mov	r4, r9
10018e5e:	2b0a      	cmp	r3, #10
10018e60:	f172 0100 	sbcs.w	r1, r2, #0
10018e64:	f080 8353 	bcs.w	1001950e <_svfprintf_r+0x112e>
10018e68:	3330      	adds	r3, #48	@ 0x30
10018e6a:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
10018e6e:	46a1      	mov	r9, r4
10018e70:	f04f 0b01 	mov.w	fp, #1
10018e74:	f20d 1577 	addw	r5, sp, #375	@ 0x177
10018e78:	e6b4      	b.n	10018be4 <_svfprintf_r+0x804>
10018e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
10018e7c:	9807      	ldr	r0, [sp, #28]
10018e7e:	aa32      	add	r2, sp, #200	@ 0xc8
10018e80:	f001 ff46 	bl	1001ad10 <__ssprint_r>
10018e84:	2800      	cmp	r0, #0
10018e86:	f47f af62 	bne.w	10018d4e <_svfprintf_r+0x96e>
10018e8a:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10018e8c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018e90:	e40e      	b.n	100186b0 <_svfprintf_r+0x2d0>
10018e92:	9909      	ldr	r1, [sp, #36]	@ 0x24
10018e94:	9807      	ldr	r0, [sp, #28]
10018e96:	9315      	str	r3, [sp, #84]	@ 0x54
10018e98:	aa32      	add	r2, sp, #200	@ 0xc8
10018e9a:	f001 ff39 	bl	1001ad10 <__ssprint_r>
10018e9e:	2800      	cmp	r0, #0
10018ea0:	f47f af55 	bne.w	10018d4e <_svfprintf_r+0x96e>
10018ea4:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10018ea6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10018ea8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018eac:	f7ff bbee 	b.w	1001868c <_svfprintf_r+0x2ac>
10018eb0:	2d10      	cmp	r5, #16
10018eb2:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018eb4:	f340 8731 	ble.w	10019d1a <_svfprintf_r+0x193a>
10018eb8:	4f1e      	ldr	r7, [pc, #120]	@ (10018f34 <_svfprintf_r+0xb54>)
10018eba:	f8dd 901c 	ldr.w	r9, [sp, #28]
10018ebe:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
10018ec2:	9715      	str	r7, [sp, #84]	@ 0x54
10018ec4:	2610      	movs	r6, #16
10018ec6:	e004      	b.n	10018ed2 <_svfprintf_r+0xaf2>
10018ec8:	3d10      	subs	r5, #16
10018eca:	2d10      	cmp	r5, #16
10018ecc:	f108 0808 	add.w	r8, r8, #8
10018ed0:	dd16      	ble.n	10018f00 <_svfprintf_r+0xb20>
10018ed2:	3301      	adds	r3, #1
10018ed4:	3410      	adds	r4, #16
10018ed6:	2b07      	cmp	r3, #7
10018ed8:	e9c8 7600 	strd	r7, r6, [r8]
10018edc:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10018ee0:	ddf2      	ble.n	10018ec8 <_svfprintf_r+0xae8>
10018ee2:	aa32      	add	r2, sp, #200	@ 0xc8
10018ee4:	4651      	mov	r1, sl
10018ee6:	4648      	mov	r0, r9
10018ee8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10018eec:	f001 ff10 	bl	1001ad10 <__ssprint_r>
10018ef0:	2800      	cmp	r0, #0
10018ef2:	f040 83e7 	bne.w	100196c4 <_svfprintf_r+0x12e4>
10018ef6:	3d10      	subs	r5, #16
10018ef8:	2d10      	cmp	r5, #16
10018efa:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10018efe:	dce8      	bgt.n	10018ed2 <_svfprintf_r+0xaf2>
10018f00:	3301      	adds	r3, #1
10018f02:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10018f04:	442c      	add	r4, r5
10018f06:	2b07      	cmp	r3, #7
10018f08:	e9c8 2500 	strd	r2, r5, [r8]
10018f0c:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10018f10:	f77f abf2 	ble.w	100186f8 <_svfprintf_r+0x318>
10018f14:	9909      	ldr	r1, [sp, #36]	@ 0x24
10018f16:	9807      	ldr	r0, [sp, #28]
10018f18:	aa32      	add	r2, sp, #200	@ 0xc8
10018f1a:	f001 fef9 	bl	1001ad10 <__ssprint_r>
10018f1e:	2800      	cmp	r0, #0
10018f20:	f47f af15 	bne.w	10018d4e <_svfprintf_r+0x96e>
10018f24:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10018f26:	f7ff bbe7 	b.w	100186f8 <_svfprintf_r+0x318>
10018f2a:	bf00      	nop
10018f2c:	10023c8c 	.word	0x10023c8c
10018f30:	1001bcbc 	.word	0x1001bcbc
10018f34:	10023c9c 	.word	0x10023c9c
10018f38:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10018f3a:	2a00      	cmp	r2, #0
10018f3c:	f77f af0a 	ble.w	10018d54 <_svfprintf_r+0x974>
10018f40:	e9dd 7312 	ldrd	r7, r3, [sp, #72]	@ 0x48
10018f44:	429f      	cmp	r7, r3
10018f46:	bfa8      	it	ge
10018f48:	461f      	movge	r7, r3
10018f4a:	2f00      	cmp	r7, #0
10018f4c:	eb05 0b03 	add.w	fp, r5, r3
10018f50:	dd0b      	ble.n	10018f6a <_svfprintf_r+0xb8a>
10018f52:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018f54:	3301      	adds	r3, #1
10018f56:	443c      	add	r4, r7
10018f58:	2b07      	cmp	r3, #7
10018f5a:	e9c8 5700 	strd	r5, r7, [r8]
10018f5e:	9434      	str	r4, [sp, #208]	@ 0xd0
10018f60:	9333      	str	r3, [sp, #204]	@ 0xcc
10018f62:	f300 8640 	bgt.w	10019be6 <_svfprintf_r+0x1806>
10018f66:	f108 0808 	add.w	r8, r8, #8
10018f6a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10018f6c:	2f00      	cmp	r7, #0
10018f6e:	bfa8      	it	ge
10018f70:	1bf6      	subge	r6, r6, r7
10018f72:	2e00      	cmp	r6, #0
10018f74:	f300 8200 	bgt.w	10019378 <_svfprintf_r+0xf98>
10018f78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10018f7a:	f419 6f80 	tst.w	r9, #1024	@ 0x400
10018f7e:	442b      	add	r3, r5
10018f80:	469a      	mov	sl, r3
10018f82:	f040 8221 	bne.w	100193c8 <_svfprintf_r+0xfe8>
10018f86:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10018f88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10018f8a:	429d      	cmp	r5, r3
10018f8c:	db03      	blt.n	10018f96 <_svfprintf_r+0xbb6>
10018f8e:	f019 0f01 	tst.w	r9, #1
10018f92:	f000 846e 	beq.w	10019872 <_svfprintf_r+0x1492>
10018f96:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10018f98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
10018f9a:	441c      	add	r4, r3
10018f9c:	e9c8 2300 	strd	r2, r3, [r8]
10018fa0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018fa2:	9434      	str	r4, [sp, #208]	@ 0xd0
10018fa4:	3301      	adds	r3, #1
10018fa6:	2b07      	cmp	r3, #7
10018fa8:	9333      	str	r3, [sp, #204]	@ 0xcc
10018faa:	f300 8673 	bgt.w	10019c94 <_svfprintf_r+0x18b4>
10018fae:	f108 0808 	add.w	r8, r8, #8
10018fb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10018fb4:	ebab 060a 	sub.w	r6, fp, sl
10018fb8:	1b5d      	subs	r5, r3, r5
10018fba:	42ae      	cmp	r6, r5
10018fbc:	bfa8      	it	ge
10018fbe:	462e      	movge	r6, r5
10018fc0:	2e00      	cmp	r6, #0
10018fc2:	dd0d      	ble.n	10018fe0 <_svfprintf_r+0xc00>
10018fc4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018fc6:	f8c8 a000 	str.w	sl, [r8]
10018fca:	3301      	adds	r3, #1
10018fcc:	4434      	add	r4, r6
10018fce:	2b07      	cmp	r3, #7
10018fd0:	f8c8 6004 	str.w	r6, [r8, #4]
10018fd4:	9434      	str	r4, [sp, #208]	@ 0xd0
10018fd6:	9333      	str	r3, [sp, #204]	@ 0xcc
10018fd8:	f300 866e 	bgt.w	10019cb8 <_svfprintf_r+0x18d8>
10018fdc:	f108 0808 	add.w	r8, r8, #8
10018fe0:	2e00      	cmp	r6, #0
10018fe2:	bfa8      	it	ge
10018fe4:	1bad      	subge	r5, r5, r6
10018fe6:	2d00      	cmp	r5, #0
10018fe8:	f77f ab7d 	ble.w	100186e6 <_svfprintf_r+0x306>
10018fec:	2d10      	cmp	r5, #16
10018fee:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10018ff0:	f340 836a 	ble.w	100196c8 <_svfprintf_r+0x12e8>
10018ff4:	4fad      	ldr	r7, [pc, #692]	@ (100192ac <_svfprintf_r+0xecc>)
10018ff6:	f8dd b01c 	ldr.w	fp, [sp, #28]
10018ffa:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
10018ffe:	9715      	str	r7, [sp, #84]	@ 0x54
10019000:	2610      	movs	r6, #16
10019002:	e005      	b.n	10019010 <_svfprintf_r+0xc30>
10019004:	f108 0808 	add.w	r8, r8, #8
10019008:	3d10      	subs	r5, #16
1001900a:	2d10      	cmp	r5, #16
1001900c:	f340 835e 	ble.w	100196cc <_svfprintf_r+0x12ec>
10019010:	3301      	adds	r3, #1
10019012:	3410      	adds	r4, #16
10019014:	2b07      	cmp	r3, #7
10019016:	e9c8 7600 	strd	r7, r6, [r8]
1001901a:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001901e:	ddf1      	ble.n	10019004 <_svfprintf_r+0xc24>
10019020:	aa32      	add	r2, sp, #200	@ 0xc8
10019022:	4651      	mov	r1, sl
10019024:	4658      	mov	r0, fp
10019026:	f001 fe73 	bl	1001ad10 <__ssprint_r>
1001902a:	2800      	cmp	r0, #0
1001902c:	d17d      	bne.n	1001912a <_svfprintf_r+0xd4a>
1001902e:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10019032:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019036:	e7e7      	b.n	10019008 <_svfprintf_r+0xc28>
10019038:	f019 0f01 	tst.w	r9, #1
1001903c:	f47f aed3 	bne.w	10018de6 <_svfprintf_r+0xa06>
10019040:	2301      	movs	r3, #1
10019042:	2e07      	cmp	r6, #7
10019044:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10019048:	f8c8 5000 	str.w	r5, [r8]
1001904c:	f8c8 3004 	str.w	r3, [r8, #4]
10019050:	f77f aef7 	ble.w	10018e42 <_svfprintf_r+0xa62>
10019054:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019056:	9807      	ldr	r0, [sp, #28]
10019058:	aa32      	add	r2, sp, #200	@ 0xc8
1001905a:	f001 fe59 	bl	1001ad10 <__ssprint_r>
1001905e:	2800      	cmp	r0, #0
10019060:	f47f ae75 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019064:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10019068:	af35      	add	r7, sp, #212	@ 0xd4
1001906a:	e6ea      	b.n	10018e42 <_svfprintf_r+0xa62>
1001906c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001906e:	2b01      	cmp	r3, #1
10019070:	f77f aee7 	ble.w	10018e42 <_svfprintf_r+0xa62>
10019074:	2b11      	cmp	r3, #17
10019076:	4b8d      	ldr	r3, [pc, #564]	@ (100192ac <_svfprintf_r+0xecc>)
10019078:	9315      	str	r3, [sp, #84]	@ 0x54
1001907a:	f340 8357 	ble.w	1001972c <_svfprintf_r+0x134c>
1001907e:	f8cd 9020 	str.w	r9, [sp, #32]
10019082:	f8dd a01c 	ldr.w	sl, [sp, #28]
10019086:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
1001908a:	2510      	movs	r5, #16
1001908c:	4699      	mov	r9, r3
1001908e:	e006      	b.n	1001909e <_svfprintf_r+0xcbe>
10019090:	3708      	adds	r7, #8
10019092:	f1a8 0810 	sub.w	r8, r8, #16
10019096:	f1b8 0f10 	cmp.w	r8, #16
1001909a:	f340 8345 	ble.w	10019728 <_svfprintf_r+0x1348>
1001909e:	3601      	adds	r6, #1
100190a0:	3410      	adds	r4, #16
100190a2:	2e07      	cmp	r6, #7
100190a4:	e9c7 9500 	strd	r9, r5, [r7]
100190a8:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
100190ac:	ddf0      	ble.n	10019090 <_svfprintf_r+0xcb0>
100190ae:	aa32      	add	r2, sp, #200	@ 0xc8
100190b0:	4659      	mov	r1, fp
100190b2:	4650      	mov	r0, sl
100190b4:	f001 fe2c 	bl	1001ad10 <__ssprint_r>
100190b8:	2800      	cmp	r0, #0
100190ba:	f040 8298 	bne.w	100195ee <_svfprintf_r+0x120e>
100190be:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
100190c2:	af35      	add	r7, sp, #212	@ 0xd4
100190c4:	e7e5      	b.n	10019092 <_svfprintf_r+0xcb2>
100190c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
100190c8:	9807      	ldr	r0, [sp, #28]
100190ca:	aa32      	add	r2, sp, #200	@ 0xc8
100190cc:	f001 fe20 	bl	1001ad10 <__ssprint_r>
100190d0:	2800      	cmp	r0, #0
100190d2:	f47f ae3c 	bne.w	10018d4e <_svfprintf_r+0x96e>
100190d6:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100190d8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100190dc:	f7ff baf1 	b.w	100186c2 <_svfprintf_r+0x2e2>
100190e0:	990d      	ldr	r1, [sp, #52]	@ 0x34
100190e2:	f851 3b04 	ldr.w	r3, [r1], #4
100190e6:	910d      	str	r1, [sp, #52]	@ 0x34
100190e8:	f019 0110 	ands.w	r1, r9, #16
100190ec:	f47f ac4d 	bne.w	1001898a <_svfprintf_r+0x5aa>
100190f0:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
100190f4:	f000 8362 	beq.w	100197bc <_svfprintf_r+0x13dc>
100190f8:	b29b      	uxth	r3, r3
100190fa:	460a      	mov	r2, r1
100190fc:	e445      	b.n	1001898a <_svfprintf_r+0x5aa>
100190fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
10019100:	f851 3b04 	ldr.w	r3, [r1], #4
10019104:	910d      	str	r1, [sp, #52]	@ 0x34
10019106:	f014 0110 	ands.w	r1, r4, #16
1001910a:	d10b      	bne.n	10019124 <_svfprintf_r+0xd44>
1001910c:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
10019110:	d003      	beq.n	1001911a <_svfprintf_r+0xd3a>
10019112:	460a      	mov	r2, r1
10019114:	b29b      	uxth	r3, r3
10019116:	2101      	movs	r1, #1
10019118:	e43a      	b.n	10018990 <_svfprintf_r+0x5b0>
1001911a:	f414 7200 	ands.w	r2, r4, #512	@ 0x200
1001911e:	bf1c      	itt	ne
10019120:	b2db      	uxtbne	r3, r3
10019122:	4602      	movne	r2, r0
10019124:	2101      	movs	r1, #1
10019126:	e433      	b.n	10018990 <_svfprintf_r+0x5b0>
10019128:	46bb      	mov	fp, r7
1001912a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001912c:	2b00      	cmp	r3, #0
1001912e:	f43f aa5c 	beq.w	100185ea <_svfprintf_r+0x20a>
10019132:	990c      	ldr	r1, [sp, #48]	@ 0x30
10019134:	4658      	mov	r0, fp
10019136:	f7ff f83d 	bl	100181b4 <_free_r>
1001913a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001913c:	899b      	ldrh	r3, [r3, #12]
1001913e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10019142:	f7ff ba56 	b.w	100185f2 <_svfprintf_r+0x212>
10019146:	f8dd b020 	ldr.w	fp, [sp, #32]
1001914a:	ad5e      	add	r5, sp, #376	@ 0x178
1001914c:	e54a      	b.n	10018be4 <_svfprintf_r+0x804>
1001914e:	425b      	negs	r3, r3
10019150:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
10019154:	464c      	mov	r4, r9
10019156:	202d      	movs	r0, #45	@ 0x2d
10019158:	2101      	movs	r1, #1
1001915a:	e41a      	b.n	10018992 <_svfprintf_r+0x5b2>
1001915c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001915e:	9807      	ldr	r0, [sp, #28]
10019160:	aa32      	add	r2, sp, #200	@ 0xc8
10019162:	f001 fdd5 	bl	1001ad10 <__ssprint_r>
10019166:	2800      	cmp	r0, #0
10019168:	f47f adf1 	bne.w	10018d4e <_svfprintf_r+0x96e>
1001916c:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10019170:	af35      	add	r7, sp, #212	@ 0xd4
10019172:	e642      	b.n	10018dfa <_svfprintf_r+0xa1a>
10019174:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019176:	9807      	ldr	r0, [sp, #28]
10019178:	aa32      	add	r2, sp, #200	@ 0xc8
1001917a:	f001 fdc9 	bl	1001ad10 <__ssprint_r>
1001917e:	2800      	cmp	r0, #0
10019180:	f47f ade5 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019184:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10019188:	af35      	add	r7, sp, #212	@ 0xd4
1001918a:	e642      	b.n	10018e12 <_svfprintf_r+0xa32>
1001918c:	f019 0f01 	tst.w	r9, #1
10019190:	f43f aaa9 	beq.w	100186e6 <_svfprintf_r+0x306>
10019194:	e4d4      	b.n	10018b40 <_svfprintf_r+0x760>
10019196:	930d      	str	r3, [sp, #52]	@ 0x34
10019198:	7823      	ldrb	r3, [r4, #0]
1001919a:	f7ff b978 	b.w	1001848e <_svfprintf_r+0xae>
1001919e:	ad5e      	add	r5, sp, #376	@ 0x178
100191a0:	e520      	b.n	10018be4 <_svfprintf_r+0x804>
100191a2:	f419 7f00 	tst.w	r9, #512	@ 0x200
100191a6:	f040 8373 	bne.w	10019890 <_svfprintf_r+0x14b0>
100191aa:	17da      	asrs	r2, r3, #31
100191ac:	4611      	mov	r1, r2
100191ae:	f7ff bbb2 	b.w	10018916 <_svfprintf_r+0x536>
100191b2:	f019 0f10 	tst.w	r9, #16
100191b6:	f040 82b1 	bne.w	1001971c <_svfprintf_r+0x133c>
100191ba:	f019 0f40 	tst.w	r9, #64	@ 0x40
100191be:	f040 8361 	bne.w	10019884 <_svfprintf_r+0x14a4>
100191c2:	f419 7f00 	tst.w	r9, #512	@ 0x200
100191c6:	f000 82a9 	beq.w	1001971c <_svfprintf_r+0x133c>
100191ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100191cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100191ce:	681b      	ldr	r3, [r3, #0]
100191d0:	701a      	strb	r2, [r3, #0]
100191d2:	e40f      	b.n	100189f4 <_svfprintf_r+0x614>
100191d4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
100191d6:	7823      	ldrb	r3, [r4, #0]
100191d8:	2a00      	cmp	r2, #0
100191da:	f43f a958 	beq.w	1001848e <_svfprintf_r+0xae>
100191de:	7812      	ldrb	r2, [r2, #0]
100191e0:	2a00      	cmp	r2, #0
100191e2:	f43f a954 	beq.w	1001848e <_svfprintf_r+0xae>
100191e6:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
100191ea:	f7ff b950 	b.w	1001848e <_svfprintf_r+0xae>
100191ee:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
100191f2:	4602      	mov	r2, r0
100191f4:	460b      	mov	r3, r1
100191f6:	f002 fac3 	bl	1001b780 <__aeabi_dcmpun>
100191fa:	2800      	cmp	r0, #0
100191fc:	f040 860d 	bne.w	10019e1a <_svfprintf_r+0x1a3a>
10019200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10019202:	2b61      	cmp	r3, #97	@ 0x61
10019204:	f000 8504 	beq.w	10019c10 <_svfprintf_r+0x1830>
10019208:	2b41      	cmp	r3, #65	@ 0x41
1001920a:	f000 8580 	beq.w	10019d0e <_svfprintf_r+0x192e>
1001920e:	9b08      	ldr	r3, [sp, #32]
10019210:	3301      	adds	r3, #1
10019212:	f000 8415 	beq.w	10019a40 <_svfprintf_r+0x1660>
10019216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10019218:	f023 0320 	bic.w	r3, r3, #32
1001921c:	2b47      	cmp	r3, #71	@ 0x47
1001921e:	d104      	bne.n	1001922a <_svfprintf_r+0xe4a>
10019220:	9b08      	ldr	r3, [sp, #32]
10019222:	2b00      	cmp	r3, #0
10019224:	bf08      	it	eq
10019226:	2301      	moveq	r3, #1
10019228:	9308      	str	r3, [sp, #32]
1001922a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001922e:	f449 7280 	orr.w	r2, r9, #256	@ 0x100
10019232:	2900      	cmp	r1, #0
10019234:	9215      	str	r2, [sp, #84]	@ 0x54
10019236:	f8cd 9018 	str.w	r9, [sp, #24]
1001923a:	f04f 0300 	mov.w	r3, #0
1001923e:	f2c0 851f 	blt.w	10019c80 <_svfprintf_r+0x18a0>
10019242:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
10019246:	931f      	str	r3, [sp, #124]	@ 0x7c
10019248:	930c      	str	r3, [sp, #48]	@ 0x30
1001924a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001924c:	3b41      	subs	r3, #65	@ 0x41
1001924e:	2b25      	cmp	r3, #37	@ 0x25
10019250:	f200 8326 	bhi.w	100198a0 <_svfprintf_r+0x14c0>
10019254:	e8df f013 	tbh	[pc, r3, lsl #1]
10019258:	032403ff 	.word	0x032403ff
1001925c:	03240324 	.word	0x03240324
10019260:	03fc03f8 	.word	0x03fc03f8
10019264:	03240324 	.word	0x03240324
10019268:	03240324 	.word	0x03240324
1001926c:	03240324 	.word	0x03240324
10019270:	03240324 	.word	0x03240324
10019274:	03240324 	.word	0x03240324
10019278:	03240324 	.word	0x03240324
1001927c:	03240324 	.word	0x03240324
10019280:	03240324 	.word	0x03240324
10019284:	03240324 	.word	0x03240324
10019288:	03240324 	.word	0x03240324
1001928c:	03240324 	.word	0x03240324
10019290:	03240324 	.word	0x03240324
10019294:	03240324 	.word	0x03240324
10019298:	03240324 	.word	0x03240324
1001929c:	03240324 	.word	0x03240324
100192a0:	03fc03f8 	.word	0x03fc03f8
100192a4:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100192a8:	f7ff bb62 	b.w	10018970 <_svfprintf_r+0x590>
100192ac:	10023c8c 	.word	0x10023c8c
100192b0:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100192b4:	464c      	mov	r4, r9
100192b6:	f7ff bbc9 	b.w	10018a4c <_svfprintf_r+0x66c>
100192ba:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100192be:	4bbd      	ldr	r3, [pc, #756]	@ (100195b4 <_svfprintf_r+0x11d4>)
100192c0:	9319      	str	r3, [sp, #100]	@ 0x64
100192c2:	f019 0220 	ands.w	r2, r9, #32
100192c6:	f000 8108 	beq.w	100194da <_svfprintf_r+0x10fa>
100192ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100192cc:	3307      	adds	r3, #7
100192ce:	f023 0307 	bic.w	r3, r3, #7
100192d2:	4619      	mov	r1, r3
100192d4:	685a      	ldr	r2, [r3, #4]
100192d6:	f851 3b08 	ldr.w	r3, [r1], #8
100192da:	910d      	str	r1, [sp, #52]	@ 0x34
100192dc:	f019 0f01 	tst.w	r9, #1
100192e0:	d00a      	beq.n	100192f8 <_svfprintf_r+0xf18>
100192e2:	ea53 0102 	orrs.w	r1, r3, r2
100192e6:	d007      	beq.n	100192f8 <_svfprintf_r+0xf18>
100192e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
100192ea:	f88d 10a1 	strb.w	r1, [sp, #161]	@ 0xa1
100192ee:	2130      	movs	r1, #48	@ 0x30
100192f0:	f049 0902 	orr.w	r9, r9, #2
100192f4:	f88d 10a0 	strb.w	r1, [sp, #160]	@ 0xa0
100192f8:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
100192fc:	2102      	movs	r1, #2
100192fe:	f7ff bb47 	b.w	10018990 <_svfprintf_r+0x5b0>
10019302:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10019306:	4bac      	ldr	r3, [pc, #688]	@ (100195b8 <_svfprintf_r+0x11d8>)
10019308:	9319      	str	r3, [sp, #100]	@ 0x64
1001930a:	e7da      	b.n	100192c2 <_svfprintf_r+0xee2>
1001930c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001930e:	681b      	ldr	r3, [r3, #0]
10019310:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
10019314:	2301      	movs	r3, #1
10019316:	9306      	str	r3, [sp, #24]
10019318:	469b      	mov	fp, r3
1001931a:	ad45      	add	r5, sp, #276	@ 0x114
1001931c:	f7ff baaf 	b.w	1001887e <_svfprintf_r+0x49e>
10019320:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019322:	9807      	ldr	r0, [sp, #28]
10019324:	aa32      	add	r2, sp, #200	@ 0xc8
10019326:	f001 fcf3 	bl	1001ad10 <__ssprint_r>
1001932a:	2800      	cmp	r0, #0
1001932c:	f47f ad0f 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019330:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10019332:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019336:	e411      	b.n	10018b5c <_svfprintf_r+0x77c>
10019338:	2140      	movs	r1, #64	@ 0x40
1001933a:	4658      	mov	r0, fp
1001933c:	f7f9 fbce 	bl	10012adc <_malloc_r>
10019340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10019342:	6018      	str	r0, [r3, #0]
10019344:	6118      	str	r0, [r3, #16]
10019346:	2800      	cmp	r0, #0
10019348:	f000 8610 	beq.w	10019f6c <_svfprintf_r+0x1b8c>
1001934c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001934e:	2340      	movs	r3, #64	@ 0x40
10019350:	6153      	str	r3, [r2, #20]
10019352:	f7ff b861 	b.w	10018418 <_svfprintf_r+0x38>
10019356:	9b08      	ldr	r3, [sp, #32]
10019358:	950c      	str	r5, [sp, #48]	@ 0x30
1001935a:	2b06      	cmp	r3, #6
1001935c:	4629      	mov	r1, r5
1001935e:	bf28      	it	cs
10019360:	2306      	movcs	r3, #6
10019362:	9508      	str	r5, [sp, #32]
10019364:	462a      	mov	r2, r5
10019366:	9306      	str	r3, [sp, #24]
10019368:	4d94      	ldr	r5, [pc, #592]	@ (100195bc <_svfprintf_r+0x11dc>)
1001936a:	960d      	str	r6, [sp, #52]	@ 0x34
1001936c:	469b      	mov	fp, r3
1001936e:	9114      	str	r1, [sp, #80]	@ 0x50
10019370:	9110      	str	r1, [sp, #64]	@ 0x40
10019372:	9112      	str	r1, [sp, #72]	@ 0x48
10019374:	f7ff ba1b 	b.w	100187ae <_svfprintf_r+0x3ce>
10019378:	2e10      	cmp	r6, #16
1001937a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001937c:	f340 85e7 	ble.w	10019f4e <_svfprintf_r+0x1b6e>
10019380:	488f      	ldr	r0, [pc, #572]	@ (100195c0 <_svfprintf_r+0x11e0>)
10019382:	f8dd a01c 	ldr.w	sl, [sp, #28]
10019386:	9015      	str	r0, [sp, #84]	@ 0x54
10019388:	4642      	mov	r2, r8
1001938a:	4621      	mov	r1, r4
1001938c:	46a8      	mov	r8, r5
1001938e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
10019390:	2710      	movs	r7, #16
10019392:	4605      	mov	r5, r0
10019394:	e004      	b.n	100193a0 <_svfprintf_r+0xfc0>
10019396:	3208      	adds	r2, #8
10019398:	3e10      	subs	r6, #16
1001939a:	2e10      	cmp	r6, #16
1001939c:	f340 8223 	ble.w	100197e6 <_svfprintf_r+0x1406>
100193a0:	3301      	adds	r3, #1
100193a2:	3110      	adds	r1, #16
100193a4:	2b07      	cmp	r3, #7
100193a6:	e9c2 5700 	strd	r5, r7, [r2]
100193aa:	e9cd 3133 	strd	r3, r1, [sp, #204]	@ 0xcc
100193ae:	ddf2      	ble.n	10019396 <_svfprintf_r+0xfb6>
100193b0:	aa32      	add	r2, sp, #200	@ 0xc8
100193b2:	4621      	mov	r1, r4
100193b4:	4650      	mov	r0, sl
100193b6:	f001 fcab 	bl	1001ad10 <__ssprint_r>
100193ba:	2800      	cmp	r0, #0
100193bc:	f040 8117 	bne.w	100195ee <_svfprintf_r+0x120e>
100193c0:	e9dd 3133 	ldrd	r3, r1, [sp, #204]	@ 0xcc
100193c4:	aa35      	add	r2, sp, #212	@ 0xd4
100193c6:	e7e7      	b.n	10019398 <_svfprintf_r+0xfb8>
100193c8:	4621      	mov	r1, r4
100193ca:	461c      	mov	r4, r3
100193cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100193ce:	f8cd b020 	str.w	fp, [sp, #32]
100193d2:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
100193d6:	4642      	mov	r2, r8
100193d8:	4f79      	ldr	r7, [pc, #484]	@ (100195c0 <_svfprintf_r+0x11e0>)
100193da:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
100193de:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
100193e2:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
100193e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
100193ea:	b383      	cbz	r3, 1001944e <_svfprintf_r+0x106e>
100193ec:	f1b9 0f00 	cmp.w	r9, #0
100193f0:	f000 80ff 	beq.w	100195f2 <_svfprintf_r+0x1212>
100193f4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
100193f8:	9833      	ldr	r0, [sp, #204]	@ 0xcc
100193fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100193fc:	3001      	adds	r0, #1
100193fe:	4441      	add	r1, r8
10019400:	2807      	cmp	r0, #7
10019402:	e9c2 3800 	strd	r3, r8, [r2]
10019406:	9134      	str	r1, [sp, #208]	@ 0xd0
10019408:	9033      	str	r0, [sp, #204]	@ 0xcc
1001940a:	dc75      	bgt.n	100194f8 <_svfprintf_r+0x1118>
1001940c:	3208      	adds	r2, #8
1001940e:	9b08      	ldr	r3, [sp, #32]
10019410:	f89a 0000 	ldrb.w	r0, [sl]
10019414:	1b1e      	subs	r6, r3, r4
10019416:	4286      	cmp	r6, r0
10019418:	bfa8      	it	ge
1001941a:	4606      	movge	r6, r0
1001941c:	2e00      	cmp	r6, #0
1001941e:	dd0c      	ble.n	1001943a <_svfprintf_r+0x105a>
10019420:	9833      	ldr	r0, [sp, #204]	@ 0xcc
10019422:	3001      	adds	r0, #1
10019424:	4431      	add	r1, r6
10019426:	2807      	cmp	r0, #7
10019428:	e9c2 4600 	strd	r4, r6, [r2]
1001942c:	9134      	str	r1, [sp, #208]	@ 0xd0
1001942e:	9033      	str	r0, [sp, #204]	@ 0xcc
10019430:	f300 8167 	bgt.w	10019702 <_svfprintf_r+0x1322>
10019434:	f89a 0000 	ldrb.w	r0, [sl]
10019438:	3208      	adds	r2, #8
1001943a:	2e00      	cmp	r6, #0
1001943c:	bfac      	ite	ge
1001943e:	1b85      	subge	r5, r0, r6
10019440:	4605      	movlt	r5, r0
10019442:	2d00      	cmp	r5, #0
10019444:	dc13      	bgt.n	1001946e <_svfprintf_r+0x108e>
10019446:	4404      	add	r4, r0
10019448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001944a:	2b00      	cmp	r3, #0
1001944c:	d1ce      	bne.n	100193ec <_svfprintf_r+0x100c>
1001944e:	f1b9 0f00 	cmp.w	r9, #0
10019452:	d1cf      	bne.n	100193f4 <_svfprintf_r+0x1014>
10019454:	f8dd b020 	ldr.w	fp, [sp, #32]
10019458:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
1001945c:	46a2      	mov	sl, r4
1001945e:	45da      	cmp	sl, fp
10019460:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
10019464:	4690      	mov	r8, r2
10019466:	460c      	mov	r4, r1
10019468:	bf28      	it	cs
1001946a:	46da      	movcs	sl, fp
1001946c:	e58b      	b.n	10018f86 <_svfprintf_r+0xba6>
1001946e:	2d10      	cmp	r5, #16
10019470:	9833      	ldr	r0, [sp, #204]	@ 0xcc
10019472:	f340 853c 	ble.w	10019eee <_svfprintf_r+0x1b0e>
10019476:	4623      	mov	r3, r4
10019478:	463e      	mov	r6, r7
1001947a:	462c      	mov	r4, r5
1001947c:	461d      	mov	r5, r3
1001947e:	e004      	b.n	1001948a <_svfprintf_r+0x10aa>
10019480:	3c10      	subs	r4, #16
10019482:	2c10      	cmp	r4, #16
10019484:	f102 0208 	add.w	r2, r2, #8
10019488:	dd16      	ble.n	100194b8 <_svfprintf_r+0x10d8>
1001948a:	3001      	adds	r0, #1
1001948c:	3110      	adds	r1, #16
1001948e:	2310      	movs	r3, #16
10019490:	2807      	cmp	r0, #7
10019492:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
10019496:	6017      	str	r7, [r2, #0]
10019498:	6053      	str	r3, [r2, #4]
1001949a:	ddf1      	ble.n	10019480 <_svfprintf_r+0x10a0>
1001949c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001949e:	aa32      	add	r2, sp, #200	@ 0xc8
100194a0:	4658      	mov	r0, fp
100194a2:	f001 fc35 	bl	1001ad10 <__ssprint_r>
100194a6:	2800      	cmp	r0, #0
100194a8:	f47f ae3f 	bne.w	1001912a <_svfprintf_r+0xd4a>
100194ac:	3c10      	subs	r4, #16
100194ae:	2c10      	cmp	r4, #16
100194b0:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
100194b4:	aa35      	add	r2, sp, #212	@ 0xd4
100194b6:	dce8      	bgt.n	1001948a <_svfprintf_r+0x10aa>
100194b8:	462b      	mov	r3, r5
100194ba:	4625      	mov	r5, r4
100194bc:	461c      	mov	r4, r3
100194be:	3001      	adds	r0, #1
100194c0:	4429      	add	r1, r5
100194c2:	2807      	cmp	r0, #7
100194c4:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
100194c8:	6016      	str	r6, [r2, #0]
100194ca:	6055      	str	r5, [r2, #4]
100194cc:	f300 837d 	bgt.w	10019bca <_svfprintf_r+0x17ea>
100194d0:	f89a 0000 	ldrb.w	r0, [sl]
100194d4:	3208      	adds	r2, #8
100194d6:	4404      	add	r4, r0
100194d8:	e7b6      	b.n	10019448 <_svfprintf_r+0x1068>
100194da:	990d      	ldr	r1, [sp, #52]	@ 0x34
100194dc:	f851 3b04 	ldr.w	r3, [r1], #4
100194e0:	910d      	str	r1, [sp, #52]	@ 0x34
100194e2:	f019 0110 	ands.w	r1, r9, #16
100194e6:	f47f aef9 	bne.w	100192dc <_svfprintf_r+0xefc>
100194ea:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
100194ee:	f000 815f 	beq.w	100197b0 <_svfprintf_r+0x13d0>
100194f2:	b29b      	uxth	r3, r3
100194f4:	460a      	mov	r2, r1
100194f6:	e6f1      	b.n	100192dc <_svfprintf_r+0xefc>
100194f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
100194fa:	aa32      	add	r2, sp, #200	@ 0xc8
100194fc:	4658      	mov	r0, fp
100194fe:	f001 fc07 	bl	1001ad10 <__ssprint_r>
10019502:	2800      	cmp	r0, #0
10019504:	f47f ae11 	bne.w	1001912a <_svfprintf_r+0xd4a>
10019508:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001950a:	aa35      	add	r2, sp, #212	@ 0xd4
1001950c:	e77f      	b.n	1001940e <_svfprintf_r+0x102e>
1001950e:	f404 6b80 	and.w	fp, r4, #1024	@ 0x400
10019512:	2100      	movs	r1, #0
10019514:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
10019518:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 100195c4 <_svfprintf_r+0x11e4>
1001951c:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
10019520:	9406      	str	r4, [sp, #24]
10019522:	ad5e      	add	r5, sp, #376	@ 0x178
10019524:	f04f 3acc 	mov.w	sl, #3435973836	@ 0xcccccccc
10019528:	2705      	movs	r7, #5
1001952a:	468c      	mov	ip, r1
1001952c:	465e      	mov	r6, fp
1001952e:	e005      	b.n	1001953c <_svfprintf_r+0x115c>
10019530:	2b0a      	cmp	r3, #10
10019532:	f172 0200 	sbcs.w	r2, r2, #0
10019536:	d333      	bcc.n	100195a0 <_svfprintf_r+0x11c0>
10019538:	465b      	mov	r3, fp
1001953a:	4622      	mov	r2, r4
1001953c:	1899      	adds	r1, r3, r2
1001953e:	f141 0100 	adc.w	r1, r1, #0
10019542:	fba9 0401 	umull	r0, r4, r9, r1
10019546:	f024 0003 	bic.w	r0, r4, #3
1001954a:	eb00 0094 	add.w	r0, r0, r4, lsr #2
1001954e:	1a09      	subs	r1, r1, r0
10019550:	1a58      	subs	r0, r3, r1
10019552:	f162 0e00 	sbc.w	lr, r2, #0
10019556:	fb0a f400 	mul.w	r4, sl, r0
1001955a:	fba0 b009 	umull	fp, r0, r0, r9
1001955e:	fb09 440e 	mla	r4, r9, lr, r4
10019562:	f00b 0e01 	and.w	lr, fp, #1
10019566:	4404      	add	r4, r0
10019568:	fbae 0e07 	umull	r0, lr, lr, r7
1001956c:	1840      	adds	r0, r0, r1
1001956e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
10019572:	3030      	adds	r0, #48	@ 0x30
10019574:	f805 0c01 	strb.w	r0, [r5, #-1]
10019578:	ea4b 7bc4 	orr.w	fp, fp, r4, lsl #31
1001957c:	f10c 0c01 	add.w	ip, ip, #1
10019580:	3d01      	subs	r5, #1
10019582:	0864      	lsrs	r4, r4, #1
10019584:	2e00      	cmp	r6, #0
10019586:	d0d3      	beq.n	10019530 <_svfprintf_r+0x1150>
10019588:	f898 1000 	ldrb.w	r1, [r8]
1001958c:	458c      	cmp	ip, r1
1001958e:	d1cf      	bne.n	10019530 <_svfprintf_r+0x1150>
10019590:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
10019594:	d0cc      	beq.n	10019530 <_svfprintf_r+0x1150>
10019596:	2b0a      	cmp	r3, #10
10019598:	f172 0200 	sbcs.w	r2, r2, #0
1001959c:	f080 8136 	bcs.w	1001980c <_svfprintf_r+0x142c>
100195a0:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
100195a4:	9c06      	ldr	r4, [sp, #24]
100195a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
100195aa:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
100195ae:	f7ff bb15 	b.w	10018bdc <_svfprintf_r+0x7fc>
100195b2:	bf00      	nop
100195b4:	10023a5c 	.word	0x10023a5c
100195b8:	10023a48 	.word	0x10023a48
100195bc:	10023a70 	.word	0x10023a70
100195c0:	10023c8c 	.word	0x10023c8c
100195c4:	cccccccd 	.word	0xcccccccd
100195c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
100195ca:	9807      	ldr	r0, [sp, #28]
100195cc:	9315      	str	r3, [sp, #84]	@ 0x54
100195ce:	aa32      	add	r2, sp, #200	@ 0xc8
100195d0:	f001 fb9e 	bl	1001ad10 <__ssprint_r>
100195d4:	2800      	cmp	r0, #0
100195d6:	f47f abba 	bne.w	10018d4e <_svfprintf_r+0x96e>
100195da:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100195de:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100195e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
100195e2:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100195e6:	f7ff b83f 	b.w	10018668 <_svfprintf_r+0x288>
100195ea:	46a3      	mov	fp, r4
100195ec:	e59d      	b.n	1001912a <_svfprintf_r+0xd4a>
100195ee:	46d3      	mov	fp, sl
100195f0:	e59b      	b.n	1001912a <_svfprintf_r+0xd4a>
100195f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100195f4:	3b01      	subs	r3, #1
100195f6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
100195fa:	9310      	str	r3, [sp, #64]	@ 0x40
100195fc:	e6fc      	b.n	100193f8 <_svfprintf_r+0x1018>
100195fe:	2901      	cmp	r1, #1
10019600:	464c      	mov	r4, r9
10019602:	f47f aadb 	bne.w	10018bbc <_svfprintf_r+0x7dc>
10019606:	e42f      	b.n	10018e68 <_svfprintf_r+0xa88>
10019608:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001960a:	9807      	ldr	r0, [sp, #28]
1001960c:	aa32      	add	r2, sp, #200	@ 0xc8
1001960e:	f001 fb7f 	bl	1001ad10 <__ssprint_r>
10019612:	2800      	cmp	r0, #0
10019614:	f47f ab9b 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019618:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001961a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001961e:	f7ff ba8a 	b.w	10018b36 <_svfprintf_r+0x756>
10019622:	af30      	add	r7, sp, #192	@ 0xc0
10019624:	2208      	movs	r2, #8
10019626:	2100      	movs	r1, #0
10019628:	4638      	mov	r0, r7
1001962a:	952b      	str	r5, [sp, #172]	@ 0xac
1001962c:	f7fd fad6 	bl	10016bdc <memset>
10019630:	9b08      	ldr	r3, [sp, #32]
10019632:	1c58      	adds	r0, r3, #1
10019634:	f000 80c9 	beq.w	100197ca <_svfprintf_r+0x13ea>
10019638:	2400      	movs	r4, #0
1001963a:	f8cd 9018 	str.w	r9, [sp, #24]
1001963e:	46a3      	mov	fp, r4
10019640:	f8dd 901c 	ldr.w	r9, [sp, #28]
10019644:	469a      	mov	sl, r3
10019646:	e00c      	b.n	10019662 <_svfprintf_r+0x1282>
10019648:	a945      	add	r1, sp, #276	@ 0x114
1001964a:	4648      	mov	r0, r9
1001964c:	f7fd fd24 	bl	10017098 <_wcrtomb_r>
10019650:	1c41      	adds	r1, r0, #1
10019652:	4458      	add	r0, fp
10019654:	f000 838e 	beq.w	10019d74 <_svfprintf_r+0x1994>
10019658:	4550      	cmp	r0, sl
1001965a:	dc08      	bgt.n	1001966e <_svfprintf_r+0x128e>
1001965c:	f000 8441 	beq.w	10019ee2 <_svfprintf_r+0x1b02>
10019660:	4683      	mov	fp, r0
10019662:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
10019664:	5912      	ldr	r2, [r2, r4]
10019666:	463b      	mov	r3, r7
10019668:	3404      	adds	r4, #4
1001966a:	2a00      	cmp	r2, #0
1001966c:	d1ec      	bne.n	10019648 <_svfprintf_r+0x1268>
1001966e:	f8dd 9018 	ldr.w	r9, [sp, #24]
10019672:	f1bb 0f00 	cmp.w	fp, #0
10019676:	f000 80dd 	beq.w	10019834 <_svfprintf_r+0x1454>
1001967a:	f1bb 0f63 	cmp.w	fp, #99	@ 0x63
1001967e:	f300 81b9 	bgt.w	100199f4 <_svfprintf_r+0x1614>
10019682:	2300      	movs	r3, #0
10019684:	930c      	str	r3, [sp, #48]	@ 0x30
10019686:	ad45      	add	r5, sp, #276	@ 0x114
10019688:	2208      	movs	r2, #8
1001968a:	2100      	movs	r1, #0
1001968c:	4638      	mov	r0, r7
1001968e:	f7fd faa5 	bl	10016bdc <memset>
10019692:	9807      	ldr	r0, [sp, #28]
10019694:	9700      	str	r7, [sp, #0]
10019696:	465b      	mov	r3, fp
10019698:	aa2b      	add	r2, sp, #172	@ 0xac
1001969a:	4629      	mov	r1, r5
1001969c:	f7fd fd22 	bl	100170e4 <_wcsrtombs_r>
100196a0:	4583      	cmp	fp, r0
100196a2:	f040 845a 	bne.w	10019f5a <_svfprintf_r+0x1b7a>
100196a6:	2300      	movs	r3, #0
100196a8:	f805 300b 	strb.w	r3, [r5, fp]
100196ac:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
100196b0:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100196b4:	960d      	str	r6, [sp, #52]	@ 0x34
100196b6:	9308      	str	r3, [sp, #32]
100196b8:	9106      	str	r1, [sp, #24]
100196ba:	9314      	str	r3, [sp, #80]	@ 0x50
100196bc:	9310      	str	r3, [sp, #64]	@ 0x40
100196be:	9312      	str	r3, [sp, #72]	@ 0x48
100196c0:	f7ff b875 	b.w	100187ae <_svfprintf_r+0x3ce>
100196c4:	46cb      	mov	fp, r9
100196c6:	e530      	b.n	1001912a <_svfprintf_r+0xd4a>
100196c8:	4a74      	ldr	r2, [pc, #464]	@ (1001989c <_svfprintf_r+0x14bc>)
100196ca:	9215      	str	r2, [sp, #84]	@ 0x54
100196cc:	3301      	adds	r3, #1
100196ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100196d0:	f8c8 2000 	str.w	r2, [r8]
100196d4:	442c      	add	r4, r5
100196d6:	2b07      	cmp	r3, #7
100196d8:	f8c8 5004 	str.w	r5, [r8, #4]
100196dc:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100196e0:	f77e afff 	ble.w	100186e2 <_svfprintf_r+0x302>
100196e4:	f7ff bb69 	b.w	10018dba <_svfprintf_r+0x9da>
100196e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
100196ea:	9807      	ldr	r0, [sp, #28]
100196ec:	aa32      	add	r2, sp, #200	@ 0xc8
100196ee:	f001 fb0f 	bl	1001ad10 <__ssprint_r>
100196f2:	2800      	cmp	r0, #0
100196f4:	f47f ab2b 	bne.w	10018d4e <_svfprintf_r+0x96e>
100196f8:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100196fa:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100196fe:	f7fe bfda 	b.w	100186b6 <_svfprintf_r+0x2d6>
10019702:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019704:	aa32      	add	r2, sp, #200	@ 0xc8
10019706:	4658      	mov	r0, fp
10019708:	f001 fb02 	bl	1001ad10 <__ssprint_r>
1001970c:	2800      	cmp	r0, #0
1001970e:	f47f ad0c 	bne.w	1001912a <_svfprintf_r+0xd4a>
10019712:	f89a 0000 	ldrb.w	r0, [sl]
10019716:	9934      	ldr	r1, [sp, #208]	@ 0xd0
10019718:	aa35      	add	r2, sp, #212	@ 0xd4
1001971a:	e68e      	b.n	1001943a <_svfprintf_r+0x105a>
1001971c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001971e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10019720:	681b      	ldr	r3, [r3, #0]
10019722:	601a      	str	r2, [r3, #0]
10019724:	f7ff b966 	b.w	100189f4 <_svfprintf_r+0x614>
10019728:	f8dd 9020 	ldr.w	r9, [sp, #32]
1001972c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001972e:	603b      	str	r3, [r7, #0]
10019730:	3601      	adds	r6, #1
10019732:	4444      	add	r4, r8
10019734:	2e07      	cmp	r6, #7
10019736:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001973a:	f8c7 8004 	str.w	r8, [r7, #4]
1001973e:	f77f ab7f 	ble.w	10018e40 <_svfprintf_r+0xa60>
10019742:	e487      	b.n	10019054 <_svfprintf_r+0xc74>
10019744:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10019746:	991a      	ldr	r1, [sp, #104]	@ 0x68
10019748:	441c      	add	r4, r3
1001974a:	e9c8 1300 	strd	r1, r3, [r8]
1001974e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10019750:	9434      	str	r4, [sp, #208]	@ 0xd0
10019752:	3301      	adds	r3, #1
10019754:	2b07      	cmp	r3, #7
10019756:	9333      	str	r3, [sp, #204]	@ 0xcc
10019758:	f300 8164 	bgt.w	10019a24 <_svfprintf_r+0x1644>
1001975c:	f108 0808 	add.w	r8, r8, #8
10019760:	2a00      	cmp	r2, #0
10019762:	f6bf ab1e 	bge.w	10018da2 <_svfprintf_r+0x9c2>
10019766:	4256      	negs	r6, r2
10019768:	3210      	adds	r2, #16
1001976a:	4a4c      	ldr	r2, [pc, #304]	@ (1001989c <_svfprintf_r+0x14bc>)
1001976c:	9215      	str	r2, [sp, #84]	@ 0x54
1001976e:	f280 82e7 	bge.w	10019d40 <_svfprintf_r+0x1960>
10019772:	46aa      	mov	sl, r5
10019774:	2710      	movs	r7, #16
10019776:	4615      	mov	r5, r2
10019778:	e005      	b.n	10019786 <_svfprintf_r+0x13a6>
1001977a:	f108 0808 	add.w	r8, r8, #8
1001977e:	3e10      	subs	r6, #16
10019780:	2e10      	cmp	r6, #16
10019782:	f340 82dc 	ble.w	10019d3e <_svfprintf_r+0x195e>
10019786:	3301      	adds	r3, #1
10019788:	3410      	adds	r4, #16
1001978a:	2b07      	cmp	r3, #7
1001978c:	e9c8 5700 	strd	r5, r7, [r8]
10019790:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10019794:	ddf1      	ble.n	1001977a <_svfprintf_r+0x139a>
10019796:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019798:	9807      	ldr	r0, [sp, #28]
1001979a:	aa32      	add	r2, sp, #200	@ 0xc8
1001979c:	f001 fab8 	bl	1001ad10 <__ssprint_r>
100197a0:	2800      	cmp	r0, #0
100197a2:	f47f aad4 	bne.w	10018d4e <_svfprintf_r+0x96e>
100197a6:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
100197aa:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100197ae:	e7e6      	b.n	1001977e <_svfprintf_r+0x139e>
100197b0:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
100197b4:	bf1c      	itt	ne
100197b6:	b2db      	uxtbne	r3, r3
100197b8:	4602      	movne	r2, r0
100197ba:	e58f      	b.n	100192dc <_svfprintf_r+0xefc>
100197bc:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
100197c0:	bf1c      	itt	ne
100197c2:	b2db      	uxtbne	r3, r3
100197c4:	4602      	movne	r2, r0
100197c6:	f7ff b8e0 	b.w	1001898a <_svfprintf_r+0x5aa>
100197ca:	2300      	movs	r3, #0
100197cc:	9807      	ldr	r0, [sp, #28]
100197ce:	9700      	str	r7, [sp, #0]
100197d0:	aa2b      	add	r2, sp, #172	@ 0xac
100197d2:	4619      	mov	r1, r3
100197d4:	f7fd fc86 	bl	100170e4 <_wcsrtombs_r>
100197d8:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
100197dc:	4683      	mov	fp, r0
100197de:	f000 82c9 	beq.w	10019d74 <_svfprintf_r+0x1994>
100197e2:	952b      	str	r5, [sp, #172]	@ 0xac
100197e4:	e745      	b.n	10019672 <_svfprintf_r+0x1292>
100197e6:	4645      	mov	r5, r8
100197e8:	460c      	mov	r4, r1
100197ea:	4690      	mov	r8, r2
100197ec:	3301      	adds	r3, #1
100197ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100197f0:	f8c8 2000 	str.w	r2, [r8]
100197f4:	4434      	add	r4, r6
100197f6:	2b07      	cmp	r3, #7
100197f8:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100197fc:	f8c8 6004 	str.w	r6, [r8, #4]
10019800:	f300 8103 	bgt.w	10019a0a <_svfprintf_r+0x162a>
10019804:	f108 0808 	add.w	r8, r8, #8
10019808:	f7ff bbb6 	b.w	10018f78 <_svfprintf_r+0xb98>
1001980c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
1001980e:	991d      	ldr	r1, [sp, #116]	@ 0x74
10019810:	1aed      	subs	r5, r5, r3
10019812:	461a      	mov	r2, r3
10019814:	4628      	mov	r0, r5
10019816:	f7fd fa33 	bl	10016c80 <strncpy>
1001981a:	f898 3001 	ldrb.w	r3, [r8, #1]
1001981e:	b10b      	cbz	r3, 10019824 <_svfprintf_r+0x1444>
10019820:	f108 0801 	add.w	r8, r8, #1
10019824:	f04f 0c00 	mov.w	ip, #0
10019828:	e686      	b.n	10019538 <_svfprintf_r+0x1158>
1001982a:	222d      	movs	r2, #45	@ 0x2d
1001982c:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10019830:	f7fe bfac 	b.w	1001878c <_svfprintf_r+0x3ac>
10019834:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10019838:	960d      	str	r6, [sp, #52]	@ 0x34
1001983a:	f8cd b018 	str.w	fp, [sp, #24]
1001983e:	f8cd b020 	str.w	fp, [sp, #32]
10019842:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
10019846:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
1001984a:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
1001984e:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
10019852:	f7fe bfac 	b.w	100187ae <_svfprintf_r+0x3ce>
10019856:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019858:	9807      	ldr	r0, [sp, #28]
1001985a:	aa32      	add	r2, sp, #200	@ 0xc8
1001985c:	f001 fa58 	bl	1001ad10 <__ssprint_r>
10019860:	2800      	cmp	r0, #0
10019862:	f47f aa74 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019866:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10019868:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001986a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001986e:	f7ff ba81 	b.w	10018d74 <_svfprintf_r+0x994>
10019872:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10019874:	ebab 060a 	sub.w	r6, fp, sl
10019878:	1b5d      	subs	r5, r3, r5
1001987a:	42ae      	cmp	r6, r5
1001987c:	bfa8      	it	ge
1001987e:	462e      	movge	r6, r5
10019880:	f7ff bbae 	b.w	10018fe0 <_svfprintf_r+0xc00>
10019884:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10019886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10019888:	681b      	ldr	r3, [r3, #0]
1001988a:	801a      	strh	r2, [r3, #0]
1001988c:	f7ff b8b2 	b.w	100189f4 <_svfprintf_r+0x614>
10019890:	f343 12c0 	sbfx	r2, r3, #7, #1
10019894:	4611      	mov	r1, r2
10019896:	b25b      	sxtb	r3, r3
10019898:	f7ff b83d 	b.w	10018916 <_svfprintf_r+0x536>
1001989c:	10023c8c 	.word	0x10023c8c
100198a0:	9e08      	ldr	r6, [sp, #32]
100198a2:	2302      	movs	r3, #2
100198a4:	e9cd 3600 	strd	r3, r6, [sp]
100198a8:	ab30      	add	r3, sp, #192	@ 0xc0
100198aa:	9304      	str	r3, [sp, #16]
100198ac:	ab2b      	add	r3, sp, #172	@ 0xac
100198ae:	9303      	str	r3, [sp, #12]
100198b0:	ab29      	add	r3, sp, #164	@ 0xa4
100198b2:	9302      	str	r3, [sp, #8]
100198b4:	9807      	ldr	r0, [sp, #28]
100198b6:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
100198ba:	f7fd fcfd 	bl	100172b8 <_dtoa_r>
100198be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100198c0:	2b67      	cmp	r3, #103	@ 0x67
100198c2:	4605      	mov	r5, r0
100198c4:	f000 813b 	beq.w	10019b3e <_svfprintf_r+0x175e>
100198c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100198ca:	2b47      	cmp	r3, #71	@ 0x47
100198cc:	f000 8137 	beq.w	10019b3e <_svfprintf_r+0x175e>
100198d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100198d2:	f023 0720 	bic.w	r7, r3, #32
100198d6:	2f46      	cmp	r7, #70	@ 0x46
100198d8:	eb00 0406 	add.w	r4, r0, r6
100198dc:	d105      	bne.n	100198ea <_svfprintf_r+0x150a>
100198de:	7803      	ldrb	r3, [r0, #0]
100198e0:	2b30      	cmp	r3, #48	@ 0x30
100198e2:	f000 82f1 	beq.w	10019ec8 <_svfprintf_r+0x1ae8>
100198e6:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
100198e8:	4434      	add	r4, r6
100198ea:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
100198ee:	2200      	movs	r2, #0
100198f0:	2300      	movs	r3, #0
100198f2:	f001 ff13 	bl	1001b71c <__aeabi_dcmpeq>
100198f6:	2800      	cmp	r0, #0
100198f8:	f000 813f 	beq.w	10019b7a <_svfprintf_r+0x179a>
100198fc:	4623      	mov	r3, r4
100198fe:	1b5b      	subs	r3, r3, r5
10019900:	9313      	str	r3, [sp, #76]	@ 0x4c
10019902:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10019904:	9212      	str	r2, [sp, #72]	@ 0x48
10019906:	2f47      	cmp	r7, #71	@ 0x47
10019908:	f000 8121 	beq.w	10019b4e <_svfprintf_r+0x176e>
1001990c:	2f46      	cmp	r7, #70	@ 0x46
1001990e:	f000 81e3 	beq.w	10019cd8 <_svfprintf_r+0x18f8>
10019912:	990e      	ldr	r1, [sp, #56]	@ 0x38
10019914:	1e53      	subs	r3, r2, #1
10019916:	2961      	cmp	r1, #97	@ 0x61
10019918:	9329      	str	r3, [sp, #164]	@ 0xa4
1001991a:	f000 8316 	beq.w	10019f4a <_svfprintf_r+0x1b6a>
1001991e:	2941      	cmp	r1, #65	@ 0x41
10019920:	f040 8120 	bne.w	10019b64 <_svfprintf_r+0x1784>
10019924:	2150      	movs	r1, #80	@ 0x50
10019926:	2001      	movs	r0, #1
10019928:	2b00      	cmp	r3, #0
1001992a:	bfb6      	itet	lt
1001992c:	f1c2 0301 	rsblt	r3, r2, #1
10019930:	222b      	movge	r2, #43	@ 0x2b
10019932:	222d      	movlt	r2, #45	@ 0x2d
10019934:	2b09      	cmp	r3, #9
10019936:	f88d 10b0 	strb.w	r1, [sp, #176]	@ 0xb0
1001993a:	f88d 20b1 	strb.w	r2, [sp, #177]	@ 0xb1
1001993e:	f340 8227 	ble.w	10019d90 <_svfprintf_r+0x19b0>
10019942:	f10d 04c7 	add.w	r4, sp, #199	@ 0xc7
10019946:	4eae      	ldr	r6, [pc, #696]	@ (10019c00 <_svfprintf_r+0x1820>)
10019948:	4622      	mov	r2, r4
1001994a:	4610      	mov	r0, r2
1001994c:	fba6 1203 	umull	r1, r2, r6, r3
10019950:	08d2      	lsrs	r2, r2, #3
10019952:	eb02 0182 	add.w	r1, r2, r2, lsl #2
10019956:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
1001995a:	3130      	adds	r1, #48	@ 0x30
1001995c:	f800 1c01 	strb.w	r1, [r0, #-1]
10019960:	4619      	mov	r1, r3
10019962:	2963      	cmp	r1, #99	@ 0x63
10019964:	4613      	mov	r3, r2
10019966:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
1001996a:	dcee      	bgt.n	1001994a <_svfprintf_r+0x156a>
1001996c:	3330      	adds	r3, #48	@ 0x30
1001996e:	f802 3c01 	strb.w	r3, [r2, #-1]
10019972:	1e83      	subs	r3, r0, #2
10019974:	42a3      	cmp	r3, r4
10019976:	f080 82ed 	bcs.w	10019f54 <_svfprintf_r+0x1b74>
1001997a:	f10d 02b1 	add.w	r2, sp, #177	@ 0xb1
1001997e:	f813 1b01 	ldrb.w	r1, [r3], #1
10019982:	f802 1f01 	strb.w	r1, [r2, #1]!
10019986:	42a3      	cmp	r3, r4
10019988:	d1f9      	bne.n	1001997e <_svfprintf_r+0x159e>
1001998a:	ab5e      	add	r3, sp, #376	@ 0x178
1001998c:	1a18      	subs	r0, r3, r0
1001998e:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
10019992:	931c      	str	r3, [sp, #112]	@ 0x70
10019994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10019996:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
10019998:	2b01      	cmp	r3, #1
1001999a:	eb03 0b02 	add.w	fp, r3, r2
1001999e:	f340 822a 	ble.w	10019df6 <_svfprintf_r+0x1a16>
100199a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
100199a4:	449b      	add	fp, r3
100199a6:	9b06      	ldr	r3, [sp, #24]
100199a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
100199ac:	f443 7980 	orr.w	r9, r3, #256	@ 0x100
100199b0:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
100199b4:	2300      	movs	r3, #0
100199b6:	9314      	str	r3, [sp, #80]	@ 0x50
100199b8:	9206      	str	r2, [sp, #24]
100199ba:	9310      	str	r3, [sp, #64]	@ 0x40
100199bc:	9312      	str	r3, [sp, #72]	@ 0x48
100199be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
100199c0:	2b00      	cmp	r3, #0
100199c2:	f040 80d3 	bne.w	10019b6c <_svfprintf_r+0x178c>
100199c6:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100199ca:	9308      	str	r3, [sp, #32]
100199cc:	f7fe beef 	b.w	100187ae <_svfprintf_r+0x3ce>
100199d0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
100199d2:	aa32      	add	r2, sp, #200	@ 0xc8
100199d4:	4621      	mov	r1, r4
100199d6:	4658      	mov	r0, fp
100199d8:	f001 f99a 	bl	1001ad10 <__ssprint_r>
100199dc:	89a3      	ldrh	r3, [r4, #12]
100199de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100199e2:	f7fe be06 	b.w	100185f2 <_svfprintf_r+0x212>
100199e6:	4628      	mov	r0, r5
100199e8:	960d      	str	r6, [sp, #52]	@ 0x34
100199ea:	f7fd fae9 	bl	10016fc0 <strlen>
100199ee:	4683      	mov	fp, r0
100199f0:	f7fe bf74 	b.w	100188dc <_svfprintf_r+0x4fc>
100199f4:	9807      	ldr	r0, [sp, #28]
100199f6:	f10b 0101 	add.w	r1, fp, #1
100199fa:	f7f9 f86f 	bl	10012adc <_malloc_r>
100199fe:	4605      	mov	r5, r0
10019a00:	2800      	cmp	r0, #0
10019a02:	f000 81b7 	beq.w	10019d74 <_svfprintf_r+0x1994>
10019a06:	900c      	str	r0, [sp, #48]	@ 0x30
10019a08:	e63e      	b.n	10019688 <_svfprintf_r+0x12a8>
10019a0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019a0c:	9807      	ldr	r0, [sp, #28]
10019a0e:	aa32      	add	r2, sp, #200	@ 0xc8
10019a10:	f001 f97e 	bl	1001ad10 <__ssprint_r>
10019a14:	2800      	cmp	r0, #0
10019a16:	f47f a99a 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019a1a:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10019a1c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019a20:	f7ff baaa 	b.w	10018f78 <_svfprintf_r+0xb98>
10019a24:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019a26:	9807      	ldr	r0, [sp, #28]
10019a28:	aa32      	add	r2, sp, #200	@ 0xc8
10019a2a:	f001 f971 	bl	1001ad10 <__ssprint_r>
10019a2e:	2800      	cmp	r0, #0
10019a30:	f47f a98d 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019a34:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10019a38:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10019a3a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019a3e:	e68f      	b.n	10019760 <_svfprintf_r+0x1380>
10019a40:	2306      	movs	r3, #6
10019a42:	9308      	str	r3, [sp, #32]
10019a44:	f7ff bbf1 	b.w	1001922a <_svfprintf_r+0xe4a>
10019a48:	9b08      	ldr	r3, [sp, #32]
10019a4a:	1c5e      	adds	r6, r3, #1
10019a4c:	2302      	movs	r3, #2
10019a4e:	e729      	b.n	100198a4 <_svfprintf_r+0x14c4>
10019a50:	9e08      	ldr	r6, [sp, #32]
10019a52:	2303      	movs	r3, #3
10019a54:	e726      	b.n	100198a4 <_svfprintf_r+0x14c4>
10019a56:	aa29      	add	r2, sp, #164	@ 0xa4
10019a58:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10019a5c:	f7fd fb4e 	bl	100170fc <frexp>
10019a60:	2200      	movs	r2, #0
10019a62:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
10019a66:	f001 fbf1 	bl	1001b24c <__aeabi_dmul>
10019a6a:	4602      	mov	r2, r0
10019a6c:	460b      	mov	r3, r1
10019a6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
10019a72:	2200      	movs	r2, #0
10019a74:	2300      	movs	r3, #0
10019a76:	f001 fe51 	bl	1001b71c <__aeabi_dcmpeq>
10019a7a:	2800      	cmp	r0, #0
10019a7c:	f040 81c0 	bne.w	10019e00 <_svfprintf_r+0x1a20>
10019a80:	4b60      	ldr	r3, [pc, #384]	@ (10019c04 <_svfprintf_r+0x1824>)
10019a82:	9312      	str	r3, [sp, #72]	@ 0x48
10019a84:	9b08      	ldr	r3, [sp, #32]
10019a86:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
10019a8a:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
10019a8e:	462e      	mov	r6, r5
10019a90:	9514      	str	r5, [sp, #80]	@ 0x50
10019a92:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10019a96:	464d      	mov	r5, r9
10019a98:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
10019a9c:	e005      	b.n	10019aaa <_svfprintf_r+0x16ca>
10019a9e:	2200      	movs	r2, #0
10019aa0:	2300      	movs	r3, #0
10019aa2:	f001 fe3b 	bl	1001b71c <__aeabi_dcmpeq>
10019aa6:	b9f0      	cbnz	r0, 10019ae6 <_svfprintf_r+0x1706>
10019aa8:	463d      	mov	r5, r7
10019aaa:	4b57      	ldr	r3, [pc, #348]	@ (10019c08 <_svfprintf_r+0x1828>)
10019aac:	2200      	movs	r2, #0
10019aae:	4640      	mov	r0, r8
10019ab0:	4649      	mov	r1, r9
10019ab2:	f001 fbcb 	bl	1001b24c <__aeabi_dmul>
10019ab6:	4689      	mov	r9, r1
10019ab8:	4680      	mov	r8, r0
10019aba:	f001 fe77 	bl	1001b7ac <__aeabi_d2iz>
10019abe:	4604      	mov	r4, r0
10019ac0:	f001 fb5a 	bl	1001b178 <__aeabi_i2d>
10019ac4:	460b      	mov	r3, r1
10019ac6:	4602      	mov	r2, r0
10019ac8:	4649      	mov	r1, r9
10019aca:	4640      	mov	r0, r8
10019acc:	f001 fa06 	bl	1001aedc <__aeabi_dsub>
10019ad0:	f81b 3004 	ldrb.w	r3, [fp, r4]
10019ad4:	46b2      	mov	sl, r6
10019ad6:	f806 3b01 	strb.w	r3, [r6], #1
10019ada:	1c6b      	adds	r3, r5, #1
10019adc:	f105 37ff 	add.w	r7, r5, #4294967295	@ 0xffffffff
10019ae0:	4680      	mov	r8, r0
10019ae2:	4689      	mov	r9, r1
10019ae4:	d1db      	bne.n	10019a9e <_svfprintf_r+0x16be>
10019ae6:	46cb      	mov	fp, r9
10019ae8:	4657      	mov	r7, sl
10019aea:	46c2      	mov	sl, r8
10019aec:	4b47      	ldr	r3, [pc, #284]	@ (10019c0c <_svfprintf_r+0x182c>)
10019aee:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
10019af2:	2200      	movs	r2, #0
10019af4:	4650      	mov	r0, sl
10019af6:	4659      	mov	r1, fp
10019af8:	46a9      	mov	r9, r5
10019afa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10019afc:	f001 fe36 	bl	1001b76c <__aeabi_dcmpgt>
10019b00:	2800      	cmp	r0, #0
10019b02:	f040 8153 	bne.w	10019dac <_svfprintf_r+0x19cc>
10019b06:	4b41      	ldr	r3, [pc, #260]	@ (10019c0c <_svfprintf_r+0x182c>)
10019b08:	4650      	mov	r0, sl
10019b0a:	4659      	mov	r1, fp
10019b0c:	2200      	movs	r2, #0
10019b0e:	f001 fe05 	bl	1001b71c <__aeabi_dcmpeq>
10019b12:	b110      	cbz	r0, 10019b1a <_svfprintf_r+0x173a>
10019b14:	07e2      	lsls	r2, r4, #31
10019b16:	f100 8149 	bmi.w	10019dac <_svfprintf_r+0x19cc>
10019b1a:	f1b9 0f00 	cmp.w	r9, #0
10019b1e:	f2c0 815f 	blt.w	10019de0 <_svfprintf_r+0x1a00>
10019b22:	f109 0301 	add.w	r3, r9, #1
10019b26:	4433      	add	r3, r6
10019b28:	2230      	movs	r2, #48	@ 0x30
10019b2a:	f806 2b01 	strb.w	r2, [r6], #1
10019b2e:	42b3      	cmp	r3, r6
10019b30:	d1fb      	bne.n	10019b2a <_svfprintf_r+0x174a>
10019b32:	1b5b      	subs	r3, r3, r5
10019b34:	9313      	str	r3, [sp, #76]	@ 0x4c
10019b36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10019b38:	f023 0720 	bic.w	r7, r3, #32
10019b3c:	e6e1      	b.n	10019902 <_svfprintf_r+0x1522>
10019b3e:	9b06      	ldr	r3, [sp, #24]
10019b40:	07db      	lsls	r3, r3, #31
10019b42:	f100 80f9 	bmi.w	10019d38 <_svfprintf_r+0x1958>
10019b46:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10019b48:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10019b4a:	1b5b      	subs	r3, r3, r5
10019b4c:	9313      	str	r3, [sp, #76]	@ 0x4c
10019b4e:	1cd3      	adds	r3, r2, #3
10019b50:	9212      	str	r2, [sp, #72]	@ 0x48
10019b52:	db02      	blt.n	10019b5a <_svfprintf_r+0x177a>
10019b54:	9b08      	ldr	r3, [sp, #32]
10019b56:	4293      	cmp	r3, r2
10019b58:	da1b      	bge.n	10019b92 <_svfprintf_r+0x17b2>
10019b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10019b5c:	3b02      	subs	r3, #2
10019b5e:	930e      	str	r3, [sp, #56]	@ 0x38
10019b60:	1e53      	subs	r3, r2, #1
10019b62:	9329      	str	r3, [sp, #164]	@ 0xa4
10019b64:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
10019b68:	2000      	movs	r0, #0
10019b6a:	e6dd      	b.n	10019928 <_svfprintf_r+0x1548>
10019b6c:	222d      	movs	r2, #45	@ 0x2d
10019b6e:	2300      	movs	r3, #0
10019b70:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10019b74:	9308      	str	r3, [sp, #32]
10019b76:	f7fe be1d 	b.w	100187b4 <_svfprintf_r+0x3d4>
10019b7a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10019b7c:	42a3      	cmp	r3, r4
10019b7e:	f4bf aebe 	bcs.w	100198fe <_svfprintf_r+0x151e>
10019b82:	2130      	movs	r1, #48	@ 0x30
10019b84:	1c5a      	adds	r2, r3, #1
10019b86:	9230      	str	r2, [sp, #192]	@ 0xc0
10019b88:	7019      	strb	r1, [r3, #0]
10019b8a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10019b8c:	429c      	cmp	r4, r3
10019b8e:	d8f9      	bhi.n	10019b84 <_svfprintf_r+0x17a4>
10019b90:	e6b5      	b.n	100198fe <_svfprintf_r+0x151e>
10019b92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10019b94:	428a      	cmp	r2, r1
10019b96:	f2c0 80c4 	blt.w	10019d22 <_svfprintf_r+0x1942>
10019b9a:	9b06      	ldr	r3, [sp, #24]
10019b9c:	07de      	lsls	r6, r3, #31
10019b9e:	f140 8184 	bpl.w	10019eaa <_svfprintf_r+0x1aca>
10019ba2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10019ba4:	eb02 0b03 	add.w	fp, r2, r3
10019ba8:	9b06      	ldr	r3, [sp, #24]
10019baa:	055c      	lsls	r4, r3, #21
10019bac:	d502      	bpl.n	10019bb4 <_svfprintf_r+0x17d4>
10019bae:	2a00      	cmp	r2, #0
10019bb0:	f300 814d 	bgt.w	10019e4e <_svfprintf_r+0x1a6e>
10019bb4:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10019bb8:	9306      	str	r3, [sp, #24]
10019bba:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10019bbe:	2367      	movs	r3, #103	@ 0x67
10019bc0:	930e      	str	r3, [sp, #56]	@ 0x38
10019bc2:	2300      	movs	r3, #0
10019bc4:	9314      	str	r3, [sp, #80]	@ 0x50
10019bc6:	9310      	str	r3, [sp, #64]	@ 0x40
10019bc8:	e6f9      	b.n	100199be <_svfprintf_r+0x15de>
10019bca:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019bcc:	aa32      	add	r2, sp, #200	@ 0xc8
10019bce:	4658      	mov	r0, fp
10019bd0:	f001 f89e 	bl	1001ad10 <__ssprint_r>
10019bd4:	2800      	cmp	r0, #0
10019bd6:	f47f aaa8 	bne.w	1001912a <_svfprintf_r+0xd4a>
10019bda:	f89a 0000 	ldrb.w	r0, [sl]
10019bde:	9934      	ldr	r1, [sp, #208]	@ 0xd0
10019be0:	aa35      	add	r2, sp, #212	@ 0xd4
10019be2:	4404      	add	r4, r0
10019be4:	e430      	b.n	10019448 <_svfprintf_r+0x1068>
10019be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019be8:	9807      	ldr	r0, [sp, #28]
10019bea:	aa32      	add	r2, sp, #200	@ 0xc8
10019bec:	f001 f890 	bl	1001ad10 <__ssprint_r>
10019bf0:	2800      	cmp	r0, #0
10019bf2:	f47f a8ac 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019bf6:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10019bf8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019bfc:	f7ff b9b5 	b.w	10018f6a <_svfprintf_r+0xb8a>
10019c00:	cccccccd 	.word	0xcccccccd
10019c04:	10023a5c 	.word	0x10023a5c
10019c08:	40300000 	.word	0x40300000
10019c0c:	3fe00000 	.word	0x3fe00000
10019c10:	2378      	movs	r3, #120	@ 0x78
10019c12:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
10019c16:	2330      	movs	r3, #48	@ 0x30
10019c18:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
10019c1c:	f049 0302 	orr.w	r3, r9, #2
10019c20:	9306      	str	r3, [sp, #24]
10019c22:	9b08      	ldr	r3, [sp, #32]
10019c24:	2b63      	cmp	r3, #99	@ 0x63
10019c26:	f300 80dd 	bgt.w	10019de4 <_svfprintf_r+0x1a04>
10019c2a:	2300      	movs	r3, #0
10019c2c:	930c      	str	r3, [sp, #48]	@ 0x30
10019c2e:	ad45      	add	r5, sp, #276	@ 0x114
10019c30:	f449 7381 	orr.w	r3, r9, #258	@ 0x102
10019c34:	9315      	str	r3, [sp, #84]	@ 0x54
10019c36:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
10019c38:	2b00      	cmp	r3, #0
10019c3a:	db22      	blt.n	10019c82 <_svfprintf_r+0x18a2>
10019c3c:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
10019c40:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
10019c44:	2300      	movs	r3, #0
10019c46:	931f      	str	r3, [sp, #124]	@ 0x7c
10019c48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10019c4a:	2b61      	cmp	r3, #97	@ 0x61
10019c4c:	f47f aafd 	bne.w	1001924a <_svfprintf_r+0xe6a>
10019c50:	aa29      	add	r2, sp, #164	@ 0xa4
10019c52:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10019c56:	f7fd fa51 	bl	100170fc <frexp>
10019c5a:	2200      	movs	r2, #0
10019c5c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
10019c60:	f001 faf4 	bl	1001b24c <__aeabi_dmul>
10019c64:	4602      	mov	r2, r0
10019c66:	460b      	mov	r3, r1
10019c68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
10019c6c:	2200      	movs	r2, #0
10019c6e:	2300      	movs	r3, #0
10019c70:	f001 fd54 	bl	1001b71c <__aeabi_dcmpeq>
10019c74:	2800      	cmp	r0, #0
10019c76:	f040 80c3 	bne.w	10019e00 <_svfprintf_r+0x1a20>
10019c7a:	4ba8      	ldr	r3, [pc, #672]	@ (10019f1c <_svfprintf_r+0x1b3c>)
10019c7c:	9312      	str	r3, [sp, #72]	@ 0x48
10019c7e:	e701      	b.n	10019a84 <_svfprintf_r+0x16a4>
10019c80:	930c      	str	r3, [sp, #48]	@ 0x30
10019c82:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	@ 0x58
10019c86:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
10019c8a:	9325      	str	r3, [sp, #148]	@ 0x94
10019c8c:	232d      	movs	r3, #45	@ 0x2d
10019c8e:	9124      	str	r1, [sp, #144]	@ 0x90
10019c90:	931f      	str	r3, [sp, #124]	@ 0x7c
10019c92:	e7d9      	b.n	10019c48 <_svfprintf_r+0x1868>
10019c94:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019c96:	9807      	ldr	r0, [sp, #28]
10019c98:	aa32      	add	r2, sp, #200	@ 0xc8
10019c9a:	f001 f839 	bl	1001ad10 <__ssprint_r>
10019c9e:	2800      	cmp	r0, #0
10019ca0:	f47f a855 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019ca4:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10019ca6:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10019ca8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019cac:	f7ff b981 	b.w	10018fb2 <_svfprintf_r+0xbd2>
10019cb0:	499b      	ldr	r1, [pc, #620]	@ (10019f20 <_svfprintf_r+0x1b40>)
10019cb2:	9115      	str	r1, [sp, #84]	@ 0x54
10019cb4:	f7fe bdb2 	b.w	1001881c <_svfprintf_r+0x43c>
10019cb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019cba:	9807      	ldr	r0, [sp, #28]
10019cbc:	aa32      	add	r2, sp, #200	@ 0xc8
10019cbe:	f001 f827 	bl	1001ad10 <__ssprint_r>
10019cc2:	2800      	cmp	r0, #0
10019cc4:	f47f a843 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019cc8:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10019cca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10019ccc:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10019cce:	1b5d      	subs	r5, r3, r5
10019cd0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019cd4:	f7ff b984 	b.w	10018fe0 <_svfprintf_r+0xc00>
10019cd8:	9b06      	ldr	r3, [sp, #24]
10019cda:	9912      	ldr	r1, [sp, #72]	@ 0x48
10019cdc:	9a08      	ldr	r2, [sp, #32]
10019cde:	f003 0301 	and.w	r3, r3, #1
10019ce2:	2900      	cmp	r1, #0
10019ce4:	ea43 0302 	orr.w	r3, r3, r2
10019ce8:	f340 810f 	ble.w	10019f0a <_svfprintf_r+0x1b2a>
10019cec:	2b00      	cmp	r3, #0
10019cee:	f040 80d5 	bne.w	10019e9c <_svfprintf_r+0x1abc>
10019cf2:	2366      	movs	r3, #102	@ 0x66
10019cf4:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10019cf8:	930e      	str	r3, [sp, #56]	@ 0x38
10019cfa:	9b06      	ldr	r3, [sp, #24]
10019cfc:	055a      	lsls	r2, r3, #21
10019cfe:	f100 80a8 	bmi.w	10019e52 <_svfprintf_r+0x1a72>
10019d02:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10019d06:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10019d0a:	9306      	str	r3, [sp, #24]
10019d0c:	e759      	b.n	10019bc2 <_svfprintf_r+0x17e2>
10019d0e:	2358      	movs	r3, #88	@ 0x58
10019d10:	e77f      	b.n	10019c12 <_svfprintf_r+0x1832>
10019d12:	2200      	movs	r2, #0
10019d14:	9208      	str	r2, [sp, #32]
10019d16:	f7fe bbbb 	b.w	10018490 <_svfprintf_r+0xb0>
10019d1a:	4a81      	ldr	r2, [pc, #516]	@ (10019f20 <_svfprintf_r+0x1b40>)
10019d1c:	9215      	str	r2, [sp, #84]	@ 0x54
10019d1e:	f7ff b8ef 	b.w	10018f00 <_svfprintf_r+0xb20>
10019d22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10019d24:	9a18      	ldr	r2, [sp, #96]	@ 0x60
10019d26:	eb03 0b02 	add.w	fp, r3, r2
10019d2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10019d2c:	2b00      	cmp	r3, #0
10019d2e:	f340 8083 	ble.w	10019e38 <_svfprintf_r+0x1a58>
10019d32:	2367      	movs	r3, #103	@ 0x67
10019d34:	930e      	str	r3, [sp, #56]	@ 0x38
10019d36:	e7e0      	b.n	10019cfa <_svfprintf_r+0x191a>
10019d38:	19ac      	adds	r4, r5, r6
10019d3a:	2747      	movs	r7, #71	@ 0x47
10019d3c:	e5d5      	b.n	100198ea <_svfprintf_r+0x150a>
10019d3e:	4655      	mov	r5, sl
10019d40:	3301      	adds	r3, #1
10019d42:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10019d44:	f8c8 2000 	str.w	r2, [r8]
10019d48:	4434      	add	r4, r6
10019d4a:	2b07      	cmp	r3, #7
10019d4c:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10019d50:	f8c8 6004 	str.w	r6, [r8, #4]
10019d54:	f77f a823 	ble.w	10018d9e <_svfprintf_r+0x9be>
10019d58:	9909      	ldr	r1, [sp, #36]	@ 0x24
10019d5a:	9807      	ldr	r0, [sp, #28]
10019d5c:	aa32      	add	r2, sp, #200	@ 0xc8
10019d5e:	f000 ffd7 	bl	1001ad10 <__ssprint_r>
10019d62:	2800      	cmp	r0, #0
10019d64:	f47e aff3 	bne.w	10018d4e <_svfprintf_r+0x96e>
10019d68:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10019d6c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10019d70:	f7ff b817 	b.w	10018da2 <_svfprintf_r+0x9c2>
10019d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10019d76:	8993      	ldrh	r3, [r2, #12]
10019d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10019d7c:	8193      	strh	r3, [r2, #12]
10019d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10019d82:	930a      	str	r3, [sp, #40]	@ 0x28
10019d84:	f7fe bc38 	b.w	100185f8 <_svfprintf_r+0x218>
10019d88:	4a66      	ldr	r2, [pc, #408]	@ (10019f24 <_svfprintf_r+0x1b44>)
10019d8a:	9215      	str	r2, [sp, #84]	@ 0x54
10019d8c:	f7fe bf84 	b.w	10018c98 <_svfprintf_r+0x8b8>
10019d90:	2800      	cmp	r0, #0
10019d92:	d13f      	bne.n	10019e14 <_svfprintf_r+0x1a34>
10019d94:	2230      	movs	r2, #48	@ 0x30
10019d96:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
10019d9a:	f10d 02b3 	add.w	r2, sp, #179	@ 0xb3
10019d9e:	3330      	adds	r3, #48	@ 0x30
10019da0:	f802 3b01 	strb.w	r3, [r2], #1
10019da4:	ab2c      	add	r3, sp, #176	@ 0xb0
10019da6:	1ad3      	subs	r3, r2, r3
10019da8:	931c      	str	r3, [sp, #112]	@ 0x70
10019daa:	e5f3      	b.n	10019994 <_svfprintf_r+0x15b4>
10019dac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10019dae:	9730      	str	r7, [sp, #192]	@ 0xc0
10019db0:	7bd9      	ldrb	r1, [r3, #15]
10019db2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
10019db6:	428a      	cmp	r2, r1
10019db8:	4633      	mov	r3, r6
10019dba:	d109      	bne.n	10019dd0 <_svfprintf_r+0x19f0>
10019dbc:	2030      	movs	r0, #48	@ 0x30
10019dbe:	f803 0c01 	strb.w	r0, [r3, #-1]
10019dc2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10019dc4:	1e5a      	subs	r2, r3, #1
10019dc6:	9230      	str	r2, [sp, #192]	@ 0xc0
10019dc8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
10019dcc:	4291      	cmp	r1, r2
10019dce:	d0f6      	beq.n	10019dbe <_svfprintf_r+0x19de>
10019dd0:	2a39      	cmp	r2, #57	@ 0x39
10019dd2:	bf0b      	itete	eq
10019dd4:	9a12      	ldreq	r2, [sp, #72]	@ 0x48
10019dd6:	3201      	addne	r2, #1
10019dd8:	7a92      	ldrbeq	r2, [r2, #10]
10019dda:	b2d2      	uxtbne	r2, r2
10019ddc:	f803 2c01 	strb.w	r2, [r3, #-1]
10019de0:	4633      	mov	r3, r6
10019de2:	e6a6      	b.n	10019b32 <_svfprintf_r+0x1752>
10019de4:	9807      	ldr	r0, [sp, #28]
10019de6:	1c59      	adds	r1, r3, #1
10019de8:	f7f8 fe78 	bl	10012adc <_malloc_r>
10019dec:	4605      	mov	r5, r0
10019dee:	2800      	cmp	r0, #0
10019df0:	d0c0      	beq.n	10019d74 <_svfprintf_r+0x1994>
10019df2:	900c      	str	r0, [sp, #48]	@ 0x30
10019df4:	e71c      	b.n	10019c30 <_svfprintf_r+0x1850>
10019df6:	9b06      	ldr	r3, [sp, #24]
10019df8:	07df      	lsls	r7, r3, #31
10019dfa:	f57f add4 	bpl.w	100199a6 <_svfprintf_r+0x15c6>
10019dfe:	e5d0      	b.n	100199a2 <_svfprintf_r+0x15c2>
10019e00:	4b49      	ldr	r3, [pc, #292]	@ (10019f28 <_svfprintf_r+0x1b48>)
10019e02:	4a46      	ldr	r2, [pc, #280]	@ (10019f1c <_svfprintf_r+0x1b3c>)
10019e04:	990e      	ldr	r1, [sp, #56]	@ 0x38
10019e06:	2961      	cmp	r1, #97	@ 0x61
10019e08:	bf18      	it	ne
10019e0a:	461a      	movne	r2, r3
10019e0c:	2301      	movs	r3, #1
10019e0e:	9212      	str	r2, [sp, #72]	@ 0x48
10019e10:	9329      	str	r3, [sp, #164]	@ 0xa4
10019e12:	e637      	b.n	10019a84 <_svfprintf_r+0x16a4>
10019e14:	f10d 02b2 	add.w	r2, sp, #178	@ 0xb2
10019e18:	e7c1      	b.n	10019d9e <_svfprintf_r+0x19be>
10019e1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
10019e1c:	4d43      	ldr	r5, [pc, #268]	@ (10019f2c <_svfprintf_r+0x1b4c>)
10019e1e:	2b00      	cmp	r3, #0
10019e20:	bfb4      	ite	lt
10019e22:	222d      	movlt	r2, #45	@ 0x2d
10019e24:	f89d 209f 	ldrbge.w	r2, [sp, #159]	@ 0x9f
10019e28:	4b41      	ldr	r3, [pc, #260]	@ (10019f30 <_svfprintf_r+0x1b50>)
10019e2a:	bfb8      	it	lt
10019e2c:	f88d 209f 	strblt.w	r2, [sp, #159]	@ 0x9f
10019e30:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
10019e34:	f7fe bcae 	b.w	10018794 <_svfprintf_r+0x3b4>
10019e38:	f1c3 0301 	rsb	r3, r3, #1
10019e3c:	449b      	add	fp, r3
10019e3e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10019e42:	9306      	str	r3, [sp, #24]
10019e44:	2367      	movs	r3, #103	@ 0x67
10019e46:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10019e4a:	930e      	str	r3, [sp, #56]	@ 0x38
10019e4c:	e6b9      	b.n	10019bc2 <_svfprintf_r+0x17e2>
10019e4e:	2367      	movs	r3, #103	@ 0x67
10019e50:	930e      	str	r3, [sp, #56]	@ 0x38
10019e52:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10019e54:	780b      	ldrb	r3, [r1, #0]
10019e56:	2bff      	cmp	r3, #255	@ 0xff
10019e58:	f000 808c 	beq.w	10019f74 <_svfprintf_r+0x1b94>
10019e5c:	2400      	movs	r4, #0
10019e5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10019e60:	4620      	mov	r0, r4
10019e62:	e003      	b.n	10019e6c <_svfprintf_r+0x1a8c>
10019e64:	3001      	adds	r0, #1
10019e66:	3101      	adds	r1, #1
10019e68:	2bff      	cmp	r3, #255	@ 0xff
10019e6a:	d008      	beq.n	10019e7e <_svfprintf_r+0x1a9e>
10019e6c:	4293      	cmp	r3, r2
10019e6e:	da06      	bge.n	10019e7e <_svfprintf_r+0x1a9e>
10019e70:	1ad2      	subs	r2, r2, r3
10019e72:	784b      	ldrb	r3, [r1, #1]
10019e74:	2b00      	cmp	r3, #0
10019e76:	d1f5      	bne.n	10019e64 <_svfprintf_r+0x1a84>
10019e78:	780b      	ldrb	r3, [r1, #0]
10019e7a:	3401      	adds	r4, #1
10019e7c:	e7f4      	b.n	10019e68 <_svfprintf_r+0x1a88>
10019e7e:	911b      	str	r1, [sp, #108]	@ 0x6c
10019e80:	9010      	str	r0, [sp, #64]	@ 0x40
10019e82:	9414      	str	r4, [sp, #80]	@ 0x50
10019e84:	9212      	str	r2, [sp, #72]	@ 0x48
10019e86:	e9dd 3914 	ldrd	r3, r9, [sp, #80]	@ 0x50
10019e8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10019e8c:	4413      	add	r3, r2
10019e8e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
10019e90:	fb02 bb03 	mla	fp, r2, r3, fp
10019e94:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10019e98:	9306      	str	r3, [sp, #24]
10019e9a:	e590      	b.n	100199be <_svfprintf_r+0x15de>
10019e9c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10019e9e:	18cf      	adds	r7, r1, r3
10019ea0:	443a      	add	r2, r7
10019ea2:	2366      	movs	r3, #102	@ 0x66
10019ea4:	4693      	mov	fp, r2
10019ea6:	930e      	str	r3, [sp, #56]	@ 0x38
10019ea8:	e727      	b.n	10019cfa <_svfprintf_r+0x191a>
10019eaa:	4693      	mov	fp, r2
10019eac:	e67c      	b.n	10019ba8 <_svfprintf_r+0x17c8>
10019eae:	9b08      	ldr	r3, [sp, #32]
10019eb0:	9306      	str	r3, [sp, #24]
10019eb2:	469b      	mov	fp, r3
10019eb4:	2373      	movs	r3, #115	@ 0x73
10019eb6:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10019eba:	960d      	str	r6, [sp, #52]	@ 0x34
10019ebc:	9008      	str	r0, [sp, #32]
10019ebe:	9014      	str	r0, [sp, #80]	@ 0x50
10019ec0:	9010      	str	r0, [sp, #64]	@ 0x40
10019ec2:	930e      	str	r3, [sp, #56]	@ 0x38
10019ec4:	f7fe bc73 	b.w	100187ae <_svfprintf_r+0x3ce>
10019ec8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10019ecc:	2200      	movs	r2, #0
10019ece:	2300      	movs	r3, #0
10019ed0:	f001 fc24 	bl	1001b71c <__aeabi_dcmpeq>
10019ed4:	2800      	cmp	r0, #0
10019ed6:	f47f ad06 	bne.w	100198e6 <_svfprintf_r+0x1506>
10019eda:	f1c6 0601 	rsb	r6, r6, #1
10019ede:	9629      	str	r6, [sp, #164]	@ 0xa4
10019ee0:	e502      	b.n	100198e8 <_svfprintf_r+0x1508>
10019ee2:	f8dd 9018 	ldr.w	r9, [sp, #24]
10019ee6:	f8dd b020 	ldr.w	fp, [sp, #32]
10019eea:	f7ff bbc2 	b.w	10019672 <_svfprintf_r+0x1292>
10019eee:	4e0d      	ldr	r6, [pc, #52]	@ (10019f24 <_svfprintf_r+0x1b44>)
10019ef0:	f7ff bae5 	b.w	100194be <_svfprintf_r+0x10de>
10019ef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10019ef6:	7863      	ldrb	r3, [r4, #1]
10019ef8:	460c      	mov	r4, r1
10019efa:	f852 1b04 	ldr.w	r1, [r2], #4
10019efe:	920d      	str	r2, [sp, #52]	@ 0x34
10019f00:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
10019f04:	9108      	str	r1, [sp, #32]
10019f06:	f7fe bac2 	b.w	1001848e <_svfprintf_r+0xae>
10019f0a:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10019f0e:	b98b      	cbnz	r3, 10019f34 <_svfprintf_r+0x1b54>
10019f10:	2301      	movs	r3, #1
10019f12:	2266      	movs	r2, #102	@ 0x66
10019f14:	9306      	str	r3, [sp, #24]
10019f16:	920e      	str	r2, [sp, #56]	@ 0x38
10019f18:	469b      	mov	fp, r3
10019f1a:	e652      	b.n	10019bc2 <_svfprintf_r+0x17e2>
10019f1c:	10023a48 	.word	0x10023a48
10019f20:	10023c9c 	.word	0x10023c9c
10019f24:	10023c8c 	.word	0x10023c8c
10019f28:	10023a5c 	.word	0x10023a5c
10019f2c:	10023a40 	.word	0x10023a40
10019f30:	10023a44 	.word	0x10023a44
10019f34:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10019f36:	1c5f      	adds	r7, r3, #1
10019f38:	9b08      	ldr	r3, [sp, #32]
10019f3a:	443b      	add	r3, r7
10019f3c:	469b      	mov	fp, r3
10019f3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10019f42:	9306      	str	r3, [sp, #24]
10019f44:	2366      	movs	r3, #102	@ 0x66
10019f46:	930e      	str	r3, [sp, #56]	@ 0x38
10019f48:	e63b      	b.n	10019bc2 <_svfprintf_r+0x17e2>
10019f4a:	2170      	movs	r1, #112	@ 0x70
10019f4c:	e4eb      	b.n	10019926 <_svfprintf_r+0x1546>
10019f4e:	4a0b      	ldr	r2, [pc, #44]	@ (10019f7c <_svfprintf_r+0x1b9c>)
10019f50:	9215      	str	r2, [sp, #84]	@ 0x54
10019f52:	e44b      	b.n	100197ec <_svfprintf_r+0x140c>
10019f54:	2302      	movs	r3, #2
10019f56:	931c      	str	r3, [sp, #112]	@ 0x70
10019f58:	e51c      	b.n	10019994 <_svfprintf_r+0x15b4>
10019f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10019f5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
10019f60:	8993      	ldrh	r3, [r2, #12]
10019f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10019f66:	8193      	strh	r3, [r2, #12]
10019f68:	f7ff b8df 	b.w	1001912a <_svfprintf_r+0xd4a>
10019f6c:	230c      	movs	r3, #12
10019f6e:	f8cb 3000 	str.w	r3, [fp]
10019f72:	e704      	b.n	10019d7e <_svfprintf_r+0x199e>
10019f74:	2300      	movs	r3, #0
10019f76:	9314      	str	r3, [sp, #80]	@ 0x50
10019f78:	9310      	str	r3, [sp, #64]	@ 0x40
10019f7a:	e784      	b.n	10019e86 <_svfprintf_r+0x1aa6>
10019f7c:	10023c8c 	.word	0x10023c8c

10019f80 <__smakebuf_r>:
10019f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10019f84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
10019f88:	460c      	mov	r4, r1
10019f8a:	0799      	lsls	r1, r3, #30
10019f8c:	b096      	sub	sp, #88	@ 0x58
10019f8e:	d508      	bpl.n	10019fa2 <__smakebuf_r+0x22>
10019f90:	f104 0343 	add.w	r3, r4, #67	@ 0x43
10019f94:	2201      	movs	r2, #1
10019f96:	e9c4 3204 	strd	r3, r2, [r4, #16]
10019f9a:	6023      	str	r3, [r4, #0]
10019f9c:	b016      	add	sp, #88	@ 0x58
10019f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10019fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10019fa6:	2900      	cmp	r1, #0
10019fa8:	4606      	mov	r6, r0
10019faa:	db26      	blt.n	10019ffa <__smakebuf_r+0x7a>
10019fac:	466a      	mov	r2, sp
10019fae:	f000 fd2d 	bl	1001aa0c <_fstat_r>
10019fb2:	2800      	cmp	r0, #0
10019fb4:	db1f      	blt.n	10019ff6 <__smakebuf_r+0x76>
10019fb6:	9d01      	ldr	r5, [sp, #4]
10019fb8:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
10019fbc:	f5a5 5500 	sub.w	r5, r5, #8192	@ 0x2000
10019fc0:	fab5 f585 	clz	r5, r5
10019fc4:	f44f 6880 	mov.w	r8, #1024	@ 0x400
10019fc8:	096d      	lsrs	r5, r5, #5
10019fca:	f44f 6700 	mov.w	r7, #2048	@ 0x800
10019fce:	4641      	mov	r1, r8
10019fd0:	4630      	mov	r0, r6
10019fd2:	f7f8 fd83 	bl	10012adc <_malloc_r>
10019fd6:	b1e8      	cbz	r0, 1001a014 <__smakebuf_r+0x94>
10019fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019fdc:	f8c4 8014 	str.w	r8, [r4, #20]
10019fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10019fe4:	6020      	str	r0, [r4, #0]
10019fe6:	6120      	str	r0, [r4, #16]
10019fe8:	81a3      	strh	r3, [r4, #12]
10019fea:	bb3d      	cbnz	r5, 1001a03c <__smakebuf_r+0xbc>
10019fec:	433b      	orrs	r3, r7
10019fee:	81a3      	strh	r3, [r4, #12]
10019ff0:	b016      	add	sp, #88	@ 0x58
10019ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10019ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019ffa:	f013 0580 	ands.w	r5, r3, #128	@ 0x80
10019ffe:	d019      	beq.n	1001a034 <__smakebuf_r+0xb4>
1001a000:	f04f 0840 	mov.w	r8, #64	@ 0x40
1001a004:	2500      	movs	r5, #0
1001a006:	4641      	mov	r1, r8
1001a008:	4630      	mov	r0, r6
1001a00a:	462f      	mov	r7, r5
1001a00c:	f7f8 fd66 	bl	10012adc <_malloc_r>
1001a010:	2800      	cmp	r0, #0
1001a012:	d1e1      	bne.n	10019fd8 <__smakebuf_r+0x58>
1001a014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001a018:	059a      	lsls	r2, r3, #22
1001a01a:	d4bf      	bmi.n	10019f9c <__smakebuf_r+0x1c>
1001a01c:	f023 0303 	bic.w	r3, r3, #3
1001a020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1001a024:	f043 0302 	orr.w	r3, r3, #2
1001a028:	2101      	movs	r1, #1
1001a02a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1001a02e:	81a3      	strh	r3, [r4, #12]
1001a030:	6022      	str	r2, [r4, #0]
1001a032:	e7b3      	b.n	10019f9c <__smakebuf_r+0x1c>
1001a034:	f44f 6880 	mov.w	r8, #1024	@ 0x400
1001a038:	462f      	mov	r7, r5
1001a03a:	e7c8      	b.n	10019fce <__smakebuf_r+0x4e>
1001a03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001a040:	4630      	mov	r0, r6
1001a042:	f000 fcf9 	bl	1001aa38 <_isatty_r>
1001a046:	b910      	cbnz	r0, 1001a04e <__smakebuf_r+0xce>
1001a048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001a04c:	e7ce      	b.n	10019fec <__smakebuf_r+0x6c>
1001a04e:	89a3      	ldrh	r3, [r4, #12]
1001a050:	f023 0303 	bic.w	r3, r3, #3
1001a054:	f043 0301 	orr.w	r3, r3, #1
1001a058:	b21b      	sxth	r3, r3
1001a05a:	e7c7      	b.n	10019fec <__smakebuf_r+0x6c>

1001a05c <_Balloc>:
1001a05c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001a05e:	b570      	push	{r4, r5, r6, lr}
1001a060:	4605      	mov	r5, r0
1001a062:	460c      	mov	r4, r1
1001a064:	b14b      	cbz	r3, 1001a07a <_Balloc+0x1e>
1001a066:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1001a06a:	b180      	cbz	r0, 1001a08e <_Balloc+0x32>
1001a06c:	6802      	ldr	r2, [r0, #0]
1001a06e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1001a072:	2300      	movs	r3, #0
1001a074:	60c3      	str	r3, [r0, #12]
1001a076:	6103      	str	r3, [r0, #16]
1001a078:	bd70      	pop	{r4, r5, r6, pc}
1001a07a:	2221      	movs	r2, #33	@ 0x21
1001a07c:	2104      	movs	r1, #4
1001a07e:	f7f8 fce7 	bl	10012a50 <_calloc_r>
1001a082:	4603      	mov	r3, r0
1001a084:	6468      	str	r0, [r5, #68]	@ 0x44
1001a086:	2800      	cmp	r0, #0
1001a088:	d1ed      	bne.n	1001a066 <_Balloc+0xa>
1001a08a:	2000      	movs	r0, #0
1001a08c:	bd70      	pop	{r4, r5, r6, pc}
1001a08e:	2101      	movs	r1, #1
1001a090:	fa01 f604 	lsl.w	r6, r1, r4
1001a094:	1d72      	adds	r2, r6, #5
1001a096:	0092      	lsls	r2, r2, #2
1001a098:	4628      	mov	r0, r5
1001a09a:	f7f8 fcd9 	bl	10012a50 <_calloc_r>
1001a09e:	2800      	cmp	r0, #0
1001a0a0:	d0f3      	beq.n	1001a08a <_Balloc+0x2e>
1001a0a2:	e9c0 4601 	strd	r4, r6, [r0, #4]
1001a0a6:	e7e4      	b.n	1001a072 <_Balloc+0x16>

1001a0a8 <_Bfree>:
1001a0a8:	b131      	cbz	r1, 1001a0b8 <_Bfree+0x10>
1001a0aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001a0ac:	684a      	ldr	r2, [r1, #4]
1001a0ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1001a0b2:	6008      	str	r0, [r1, #0]
1001a0b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1001a0b8:	4770      	bx	lr
1001a0ba:	bf00      	nop

1001a0bc <__multadd>:
1001a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001a0c0:	690d      	ldr	r5, [r1, #16]
1001a0c2:	4607      	mov	r7, r0
1001a0c4:	460e      	mov	r6, r1
1001a0c6:	461c      	mov	r4, r3
1001a0c8:	f101 0e14 	add.w	lr, r1, #20
1001a0cc:	2000      	movs	r0, #0
1001a0ce:	f8de 1000 	ldr.w	r1, [lr]
1001a0d2:	b28b      	uxth	r3, r1
1001a0d4:	fb02 4303 	mla	r3, r2, r3, r4
1001a0d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001a0dc:	0c09      	lsrs	r1, r1, #16
1001a0de:	fb02 cc01 	mla	ip, r2, r1, ip
1001a0e2:	3001      	adds	r0, #1
1001a0e4:	b29b      	uxth	r3, r3
1001a0e6:	eb03 430c 	add.w	r3, r3, ip, lsl #16
1001a0ea:	4285      	cmp	r5, r0
1001a0ec:	f84e 3b04 	str.w	r3, [lr], #4
1001a0f0:	ea4f 441c 	mov.w	r4, ip, lsr #16
1001a0f4:	dceb      	bgt.n	1001a0ce <__multadd+0x12>
1001a0f6:	b13c      	cbz	r4, 1001a108 <__multadd+0x4c>
1001a0f8:	68b3      	ldr	r3, [r6, #8]
1001a0fa:	42ab      	cmp	r3, r5
1001a0fc:	dd07      	ble.n	1001a10e <__multadd+0x52>
1001a0fe:	eb06 0385 	add.w	r3, r6, r5, lsl #2
1001a102:	3501      	adds	r5, #1
1001a104:	615c      	str	r4, [r3, #20]
1001a106:	6135      	str	r5, [r6, #16]
1001a108:	4630      	mov	r0, r6
1001a10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001a10e:	6871      	ldr	r1, [r6, #4]
1001a110:	4638      	mov	r0, r7
1001a112:	3101      	adds	r1, #1
1001a114:	f7ff ffa2 	bl	1001a05c <_Balloc>
1001a118:	4680      	mov	r8, r0
1001a11a:	b1a8      	cbz	r0, 1001a148 <__multadd+0x8c>
1001a11c:	6932      	ldr	r2, [r6, #16]
1001a11e:	3202      	adds	r2, #2
1001a120:	f106 010c 	add.w	r1, r6, #12
1001a124:	0092      	lsls	r2, r2, #2
1001a126:	300c      	adds	r0, #12
1001a128:	f7fc fe92 	bl	10016e50 <memcpy>
1001a12c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001a12e:	6872      	ldr	r2, [r6, #4]
1001a130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1001a134:	6031      	str	r1, [r6, #0]
1001a136:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1001a13a:	4646      	mov	r6, r8
1001a13c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
1001a140:	3501      	adds	r5, #1
1001a142:	615c      	str	r4, [r3, #20]
1001a144:	6135      	str	r5, [r6, #16]
1001a146:	e7df      	b.n	1001a108 <__multadd+0x4c>
1001a148:	4b02      	ldr	r3, [pc, #8]	@ (1001a154 <__multadd+0x98>)
1001a14a:	4803      	ldr	r0, [pc, #12]	@ (1001a158 <__multadd+0x9c>)
1001a14c:	4642      	mov	r2, r8
1001a14e:	21ba      	movs	r1, #186	@ 0xba
1001a150:	f000 fdaa 	bl	1001aca8 <__assert_func>
1001a154:	10023c14 	.word	0x10023c14
1001a158:	10023cac 	.word	0x10023cac

1001a15c <__hi0bits>:
1001a15c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
1001a160:	4603      	mov	r3, r0
1001a162:	bf36      	itet	cc
1001a164:	0403      	lslcc	r3, r0, #16
1001a166:	2000      	movcs	r0, #0
1001a168:	2010      	movcc	r0, #16
1001a16a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
1001a16e:	bf3c      	itt	cc
1001a170:	021b      	lslcc	r3, r3, #8
1001a172:	3008      	addcc	r0, #8
1001a174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
1001a178:	bf3c      	itt	cc
1001a17a:	011b      	lslcc	r3, r3, #4
1001a17c:	3004      	addcc	r0, #4
1001a17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
1001a182:	d303      	bcc.n	1001a18c <__hi0bits+0x30>
1001a184:	2b00      	cmp	r3, #0
1001a186:	db06      	blt.n	1001a196 <__hi0bits+0x3a>
1001a188:	3001      	adds	r0, #1
1001a18a:	4770      	bx	lr
1001a18c:	009b      	lsls	r3, r3, #2
1001a18e:	d403      	bmi.n	1001a198 <__hi0bits+0x3c>
1001a190:	005b      	lsls	r3, r3, #1
1001a192:	d403      	bmi.n	1001a19c <__hi0bits+0x40>
1001a194:	2020      	movs	r0, #32
1001a196:	4770      	bx	lr
1001a198:	3002      	adds	r0, #2
1001a19a:	4770      	bx	lr
1001a19c:	3003      	adds	r0, #3
1001a19e:	4770      	bx	lr

1001a1a0 <__lo0bits>:
1001a1a0:	6803      	ldr	r3, [r0, #0]
1001a1a2:	f013 0207 	ands.w	r2, r3, #7
1001a1a6:	4601      	mov	r1, r0
1001a1a8:	d007      	beq.n	1001a1ba <__lo0bits+0x1a>
1001a1aa:	07da      	lsls	r2, r3, #31
1001a1ac:	d41f      	bmi.n	1001a1ee <__lo0bits+0x4e>
1001a1ae:	0798      	lsls	r0, r3, #30
1001a1b0:	d521      	bpl.n	1001a1f6 <__lo0bits+0x56>
1001a1b2:	085b      	lsrs	r3, r3, #1
1001a1b4:	600b      	str	r3, [r1, #0]
1001a1b6:	2001      	movs	r0, #1
1001a1b8:	4770      	bx	lr
1001a1ba:	b298      	uxth	r0, r3
1001a1bc:	b1a0      	cbz	r0, 1001a1e8 <__lo0bits+0x48>
1001a1be:	4610      	mov	r0, r2
1001a1c0:	b2da      	uxtb	r2, r3
1001a1c2:	b90a      	cbnz	r2, 1001a1c8 <__lo0bits+0x28>
1001a1c4:	3008      	adds	r0, #8
1001a1c6:	0a1b      	lsrs	r3, r3, #8
1001a1c8:	071a      	lsls	r2, r3, #28
1001a1ca:	bf04      	itt	eq
1001a1cc:	091b      	lsreq	r3, r3, #4
1001a1ce:	3004      	addeq	r0, #4
1001a1d0:	079a      	lsls	r2, r3, #30
1001a1d2:	bf04      	itt	eq
1001a1d4:	089b      	lsreq	r3, r3, #2
1001a1d6:	3002      	addeq	r0, #2
1001a1d8:	07da      	lsls	r2, r3, #31
1001a1da:	d403      	bmi.n	1001a1e4 <__lo0bits+0x44>
1001a1dc:	085b      	lsrs	r3, r3, #1
1001a1de:	f100 0001 	add.w	r0, r0, #1
1001a1e2:	d006      	beq.n	1001a1f2 <__lo0bits+0x52>
1001a1e4:	600b      	str	r3, [r1, #0]
1001a1e6:	4770      	bx	lr
1001a1e8:	0c1b      	lsrs	r3, r3, #16
1001a1ea:	2010      	movs	r0, #16
1001a1ec:	e7e8      	b.n	1001a1c0 <__lo0bits+0x20>
1001a1ee:	2000      	movs	r0, #0
1001a1f0:	4770      	bx	lr
1001a1f2:	2020      	movs	r0, #32
1001a1f4:	4770      	bx	lr
1001a1f6:	089b      	lsrs	r3, r3, #2
1001a1f8:	600b      	str	r3, [r1, #0]
1001a1fa:	2002      	movs	r0, #2
1001a1fc:	4770      	bx	lr
1001a1fe:	bf00      	nop

1001a200 <__i2b>:
1001a200:	b538      	push	{r3, r4, r5, lr}
1001a202:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001a204:	4604      	mov	r4, r0
1001a206:	460d      	mov	r5, r1
1001a208:	b14b      	cbz	r3, 1001a21e <__i2b+0x1e>
1001a20a:	6858      	ldr	r0, [r3, #4]
1001a20c:	b1b0      	cbz	r0, 1001a23c <__i2b+0x3c>
1001a20e:	6802      	ldr	r2, [r0, #0]
1001a210:	605a      	str	r2, [r3, #4]
1001a212:	2200      	movs	r2, #0
1001a214:	2301      	movs	r3, #1
1001a216:	6145      	str	r5, [r0, #20]
1001a218:	60c2      	str	r2, [r0, #12]
1001a21a:	6103      	str	r3, [r0, #16]
1001a21c:	bd38      	pop	{r3, r4, r5, pc}
1001a21e:	2221      	movs	r2, #33	@ 0x21
1001a220:	2104      	movs	r1, #4
1001a222:	f7f8 fc15 	bl	10012a50 <_calloc_r>
1001a226:	4603      	mov	r3, r0
1001a228:	6460      	str	r0, [r4, #68]	@ 0x44
1001a22a:	2800      	cmp	r0, #0
1001a22c:	d1ed      	bne.n	1001a20a <__i2b+0xa>
1001a22e:	4b09      	ldr	r3, [pc, #36]	@ (1001a254 <__i2b+0x54>)
1001a230:	4809      	ldr	r0, [pc, #36]	@ (1001a258 <__i2b+0x58>)
1001a232:	2200      	movs	r2, #0
1001a234:	f240 1145 	movw	r1, #325	@ 0x145
1001a238:	f000 fd36 	bl	1001aca8 <__assert_func>
1001a23c:	221c      	movs	r2, #28
1001a23e:	2101      	movs	r1, #1
1001a240:	4620      	mov	r0, r4
1001a242:	f7f8 fc05 	bl	10012a50 <_calloc_r>
1001a246:	2800      	cmp	r0, #0
1001a248:	d0f1      	beq.n	1001a22e <__i2b+0x2e>
1001a24a:	2201      	movs	r2, #1
1001a24c:	2302      	movs	r3, #2
1001a24e:	6042      	str	r2, [r0, #4]
1001a250:	6083      	str	r3, [r0, #8]
1001a252:	e7de      	b.n	1001a212 <__i2b+0x12>
1001a254:	10023c14 	.word	0x10023c14
1001a258:	10023cac 	.word	0x10023cac

1001a25c <__multiply>:
1001a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001a260:	f8d1 8010 	ldr.w	r8, [r1, #16]
1001a264:	6915      	ldr	r5, [r2, #16]
1001a266:	45a8      	cmp	r8, r5
1001a268:	b085      	sub	sp, #20
1001a26a:	460e      	mov	r6, r1
1001a26c:	4692      	mov	sl, r2
1001a26e:	db05      	blt.n	1001a27c <__multiply+0x20>
1001a270:	462a      	mov	r2, r5
1001a272:	4653      	mov	r3, sl
1001a274:	4645      	mov	r5, r8
1001a276:	468a      	mov	sl, r1
1001a278:	4690      	mov	r8, r2
1001a27a:	461e      	mov	r6, r3
1001a27c:	f8da 3008 	ldr.w	r3, [sl, #8]
1001a280:	f8da 1004 	ldr.w	r1, [sl, #4]
1001a284:	eb05 0408 	add.w	r4, r5, r8
1001a288:	42a3      	cmp	r3, r4
1001a28a:	bfb8      	it	lt
1001a28c:	3101      	addlt	r1, #1
1001a28e:	f7ff fee5 	bl	1001a05c <_Balloc>
1001a292:	4684      	mov	ip, r0
1001a294:	2800      	cmp	r0, #0
1001a296:	f000 808b 	beq.w	1001a3b0 <__multiply+0x154>
1001a29a:	f100 0714 	add.w	r7, r0, #20
1001a29e:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
1001a2a2:	4577      	cmp	r7, lr
1001a2a4:	d205      	bcs.n	1001a2b2 <__multiply+0x56>
1001a2a6:	463b      	mov	r3, r7
1001a2a8:	2200      	movs	r2, #0
1001a2aa:	f843 2b04 	str.w	r2, [r3], #4
1001a2ae:	459e      	cmp	lr, r3
1001a2b0:	d8fb      	bhi.n	1001a2aa <__multiply+0x4e>
1001a2b2:	3614      	adds	r6, #20
1001a2b4:	eb06 0888 	add.w	r8, r6, r8, lsl #2
1001a2b8:	f10a 0914 	add.w	r9, sl, #20
1001a2bc:	4546      	cmp	r6, r8
1001a2be:	eb09 0585 	add.w	r5, r9, r5, lsl #2
1001a2c2:	d266      	bcs.n	1001a392 <__multiply+0x136>
1001a2c4:	eba5 030a 	sub.w	r3, r5, sl
1001a2c8:	3b15      	subs	r3, #21
1001a2ca:	f023 0303 	bic.w	r3, r3, #3
1001a2ce:	f10a 0a15 	add.w	sl, sl, #21
1001a2d2:	3304      	adds	r3, #4
1001a2d4:	4555      	cmp	r5, sl
1001a2d6:	bf2c      	ite	cs
1001a2d8:	469b      	movcs	fp, r3
1001a2da:	f04f 0b04 	movcc.w	fp, #4
1001a2de:	f8cd e008 	str.w	lr, [sp, #8]
1001a2e2:	9403      	str	r4, [sp, #12]
1001a2e4:	46ae      	mov	lr, r5
1001a2e6:	46e2      	mov	sl, ip
1001a2e8:	e005      	b.n	1001a2f6 <__multiply+0x9a>
1001a2ea:	0c09      	lsrs	r1, r1, #16
1001a2ec:	d12a      	bne.n	1001a344 <__multiply+0xe8>
1001a2ee:	45b0      	cmp	r8, r6
1001a2f0:	f107 0704 	add.w	r7, r7, #4
1001a2f4:	d94a      	bls.n	1001a38c <__multiply+0x130>
1001a2f6:	f856 1b04 	ldr.w	r1, [r6], #4
1001a2fa:	b28d      	uxth	r5, r1
1001a2fc:	2d00      	cmp	r5, #0
1001a2fe:	d0f4      	beq.n	1001a2ea <__multiply+0x8e>
1001a300:	46cc      	mov	ip, r9
1001a302:	463c      	mov	r4, r7
1001a304:	2300      	movs	r3, #0
1001a306:	9601      	str	r6, [sp, #4]
1001a308:	f85c 0b04 	ldr.w	r0, [ip], #4
1001a30c:	6821      	ldr	r1, [r4, #0]
1001a30e:	b286      	uxth	r6, r0
1001a310:	b28a      	uxth	r2, r1
1001a312:	0c00      	lsrs	r0, r0, #16
1001a314:	fb05 2206 	mla	r2, r5, r6, r2
1001a318:	0c09      	lsrs	r1, r1, #16
1001a31a:	441a      	add	r2, r3
1001a31c:	fb05 1100 	mla	r1, r5, r0, r1
1001a320:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1001a324:	b292      	uxth	r2, r2
1001a326:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
1001a32a:	45e6      	cmp	lr, ip
1001a32c:	f844 2b04 	str.w	r2, [r4], #4
1001a330:	ea4f 4311 	mov.w	r3, r1, lsr #16
1001a334:	d8e8      	bhi.n	1001a308 <__multiply+0xac>
1001a336:	9e01      	ldr	r6, [sp, #4]
1001a338:	f847 300b 	str.w	r3, [r7, fp]
1001a33c:	f856 1c04 	ldr.w	r1, [r6, #-4]
1001a340:	0c09      	lsrs	r1, r1, #16
1001a342:	d0d4      	beq.n	1001a2ee <__multiply+0x92>
1001a344:	683b      	ldr	r3, [r7, #0]
1001a346:	2200      	movs	r2, #0
1001a348:	4648      	mov	r0, r9
1001a34a:	461d      	mov	r5, r3
1001a34c:	463c      	mov	r4, r7
1001a34e:	4694      	mov	ip, r2
1001a350:	8802      	ldrh	r2, [r0, #0]
1001a352:	fb01 c202 	mla	r2, r1, r2, ip
1001a356:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1001a35a:	b29b      	uxth	r3, r3
1001a35c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1001a360:	f844 3b04 	str.w	r3, [r4], #4
1001a364:	f850 3b04 	ldr.w	r3, [r0], #4
1001a368:	6825      	ldr	r5, [r4, #0]
1001a36a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001a36e:	b2ab      	uxth	r3, r5
1001a370:	fb01 330c 	mla	r3, r1, ip, r3
1001a374:	eb03 4312 	add.w	r3, r3, r2, lsr #16
1001a378:	4586      	cmp	lr, r0
1001a37a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001a37e:	d8e7      	bhi.n	1001a350 <__multiply+0xf4>
1001a380:	45b0      	cmp	r8, r6
1001a382:	f847 300b 	str.w	r3, [r7, fp]
1001a386:	f107 0704 	add.w	r7, r7, #4
1001a38a:	d8b4      	bhi.n	1001a2f6 <__multiply+0x9a>
1001a38c:	e9dd e402 	ldrd	lr, r4, [sp, #8]
1001a390:	46d4      	mov	ip, sl
1001a392:	2c00      	cmp	r4, #0
1001a394:	dc02      	bgt.n	1001a39c <__multiply+0x140>
1001a396:	e005      	b.n	1001a3a4 <__multiply+0x148>
1001a398:	3c01      	subs	r4, #1
1001a39a:	d003      	beq.n	1001a3a4 <__multiply+0x148>
1001a39c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1001a3a0:	2b00      	cmp	r3, #0
1001a3a2:	d0f9      	beq.n	1001a398 <__multiply+0x13c>
1001a3a4:	4660      	mov	r0, ip
1001a3a6:	f8cc 4010 	str.w	r4, [ip, #16]
1001a3aa:	b005      	add	sp, #20
1001a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a3b0:	4b03      	ldr	r3, [pc, #12]	@ (1001a3c0 <__multiply+0x164>)
1001a3b2:	4804      	ldr	r0, [pc, #16]	@ (1001a3c4 <__multiply+0x168>)
1001a3b4:	4662      	mov	r2, ip
1001a3b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
1001a3ba:	f000 fc75 	bl	1001aca8 <__assert_func>
1001a3be:	bf00      	nop
1001a3c0:	10023c14 	.word	0x10023c14
1001a3c4:	10023cac 	.word	0x10023cac

1001a3c8 <__pow5mult>:
1001a3c8:	f012 0303 	ands.w	r3, r2, #3
1001a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001a3d0:	4614      	mov	r4, r2
1001a3d2:	4607      	mov	r7, r0
1001a3d4:	d12c      	bne.n	1001a430 <__pow5mult+0x68>
1001a3d6:	460d      	mov	r5, r1
1001a3d8:	10a4      	asrs	r4, r4, #2
1001a3da:	d01c      	beq.n	1001a416 <__pow5mult+0x4e>
1001a3dc:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
1001a3de:	b386      	cbz	r6, 1001a442 <__pow5mult+0x7a>
1001a3e0:	07e3      	lsls	r3, r4, #31
1001a3e2:	f04f 0800 	mov.w	r8, #0
1001a3e6:	d406      	bmi.n	1001a3f6 <__pow5mult+0x2e>
1001a3e8:	1064      	asrs	r4, r4, #1
1001a3ea:	d014      	beq.n	1001a416 <__pow5mult+0x4e>
1001a3ec:	6830      	ldr	r0, [r6, #0]
1001a3ee:	b1a8      	cbz	r0, 1001a41c <__pow5mult+0x54>
1001a3f0:	4606      	mov	r6, r0
1001a3f2:	07e3      	lsls	r3, r4, #31
1001a3f4:	d5f8      	bpl.n	1001a3e8 <__pow5mult+0x20>
1001a3f6:	4632      	mov	r2, r6
1001a3f8:	4629      	mov	r1, r5
1001a3fa:	4638      	mov	r0, r7
1001a3fc:	f7ff ff2e 	bl	1001a25c <__multiply>
1001a400:	b135      	cbz	r5, 1001a410 <__pow5mult+0x48>
1001a402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001a404:	6869      	ldr	r1, [r5, #4]
1001a406:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
1001a40a:	602a      	str	r2, [r5, #0]
1001a40c:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
1001a410:	1064      	asrs	r4, r4, #1
1001a412:	4605      	mov	r5, r0
1001a414:	d1ea      	bne.n	1001a3ec <__pow5mult+0x24>
1001a416:	4628      	mov	r0, r5
1001a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001a41c:	4632      	mov	r2, r6
1001a41e:	4631      	mov	r1, r6
1001a420:	4638      	mov	r0, r7
1001a422:	f7ff ff1b 	bl	1001a25c <__multiply>
1001a426:	6030      	str	r0, [r6, #0]
1001a428:	f8c0 8000 	str.w	r8, [r0]
1001a42c:	4606      	mov	r6, r0
1001a42e:	e7e0      	b.n	1001a3f2 <__pow5mult+0x2a>
1001a430:	3b01      	subs	r3, #1
1001a432:	4a0f      	ldr	r2, [pc, #60]	@ (1001a470 <__pow5mult+0xa8>)
1001a434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1001a438:	2300      	movs	r3, #0
1001a43a:	f7ff fe3f 	bl	1001a0bc <__multadd>
1001a43e:	4605      	mov	r5, r0
1001a440:	e7ca      	b.n	1001a3d8 <__pow5mult+0x10>
1001a442:	2101      	movs	r1, #1
1001a444:	4638      	mov	r0, r7
1001a446:	f7ff fe09 	bl	1001a05c <_Balloc>
1001a44a:	4606      	mov	r6, r0
1001a44c:	b140      	cbz	r0, 1001a460 <__pow5mult+0x98>
1001a44e:	2301      	movs	r3, #1
1001a450:	f240 2271 	movw	r2, #625	@ 0x271
1001a454:	e9c0 3204 	strd	r3, r2, [r0, #16]
1001a458:	2300      	movs	r3, #0
1001a45a:	6438      	str	r0, [r7, #64]	@ 0x40
1001a45c:	6003      	str	r3, [r0, #0]
1001a45e:	e7bf      	b.n	1001a3e0 <__pow5mult+0x18>
1001a460:	4b04      	ldr	r3, [pc, #16]	@ (1001a474 <__pow5mult+0xac>)
1001a462:	4805      	ldr	r0, [pc, #20]	@ (1001a478 <__pow5mult+0xb0>)
1001a464:	4632      	mov	r2, r6
1001a466:	f240 1145 	movw	r1, #325	@ 0x145
1001a46a:	f000 fc1d 	bl	1001aca8 <__assert_func>
1001a46e:	bf00      	nop
1001a470:	10023d10 	.word	0x10023d10
1001a474:	10023c14 	.word	0x10023c14
1001a478:	10023cac 	.word	0x10023cac

1001a47c <__lshift>:
1001a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1001a480:	460c      	mov	r4, r1
1001a482:	4690      	mov	r8, r2
1001a484:	6927      	ldr	r7, [r4, #16]
1001a486:	68a3      	ldr	r3, [r4, #8]
1001a488:	6849      	ldr	r1, [r1, #4]
1001a48a:	eb07 1762 	add.w	r7, r7, r2, asr #5
1001a48e:	1c7d      	adds	r5, r7, #1
1001a490:	429d      	cmp	r5, r3
1001a492:	4606      	mov	r6, r0
1001a494:	ea4f 1962 	mov.w	r9, r2, asr #5
1001a498:	dd04      	ble.n	1001a4a4 <__lshift+0x28>
1001a49a:	005b      	lsls	r3, r3, #1
1001a49c:	429d      	cmp	r5, r3
1001a49e:	f101 0101 	add.w	r1, r1, #1
1001a4a2:	dcfa      	bgt.n	1001a49a <__lshift+0x1e>
1001a4a4:	4630      	mov	r0, r6
1001a4a6:	f7ff fdd9 	bl	1001a05c <_Balloc>
1001a4aa:	4684      	mov	ip, r0
1001a4ac:	2800      	cmp	r0, #0
1001a4ae:	d051      	beq.n	1001a554 <__lshift+0xd8>
1001a4b0:	f1b9 0f00 	cmp.w	r9, #0
1001a4b4:	f100 0014 	add.w	r0, r0, #20
1001a4b8:	dd0e      	ble.n	1001a4d8 <__lshift+0x5c>
1001a4ba:	f109 0205 	add.w	r2, r9, #5
1001a4be:	ea4f 0e82 	mov.w	lr, r2, lsl #2
1001a4c2:	4603      	mov	r3, r0
1001a4c4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
1001a4c8:	2100      	movs	r1, #0
1001a4ca:	f843 1b04 	str.w	r1, [r3], #4
1001a4ce:	4293      	cmp	r3, r2
1001a4d0:	d1fb      	bne.n	1001a4ca <__lshift+0x4e>
1001a4d2:	f1ae 0314 	sub.w	r3, lr, #20
1001a4d6:	4418      	add	r0, r3
1001a4d8:	6921      	ldr	r1, [r4, #16]
1001a4da:	f104 0314 	add.w	r3, r4, #20
1001a4de:	f018 081f 	ands.w	r8, r8, #31
1001a4e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1001a4e6:	d02d      	beq.n	1001a544 <__lshift+0xc8>
1001a4e8:	f1c8 0920 	rsb	r9, r8, #32
1001a4ec:	4686      	mov	lr, r0
1001a4ee:	f04f 0a00 	mov.w	sl, #0
1001a4f2:	681a      	ldr	r2, [r3, #0]
1001a4f4:	fa02 f208 	lsl.w	r2, r2, r8
1001a4f8:	ea42 020a 	orr.w	r2, r2, sl
1001a4fc:	f84e 2b04 	str.w	r2, [lr], #4
1001a500:	f853 2b04 	ldr.w	r2, [r3], #4
1001a504:	4299      	cmp	r1, r3
1001a506:	fa22 fa09 	lsr.w	sl, r2, r9
1001a50a:	d8f2      	bhi.n	1001a4f2 <__lshift+0x76>
1001a50c:	1b0b      	subs	r3, r1, r4
1001a50e:	3b15      	subs	r3, #21
1001a510:	f023 0303 	bic.w	r3, r3, #3
1001a514:	3304      	adds	r3, #4
1001a516:	f104 0215 	add.w	r2, r4, #21
1001a51a:	4291      	cmp	r1, r2
1001a51c:	bf38      	it	cc
1001a51e:	2304      	movcc	r3, #4
1001a520:	f840 a003 	str.w	sl, [r0, r3]
1001a524:	f1ba 0f00 	cmp.w	sl, #0
1001a528:	d100      	bne.n	1001a52c <__lshift+0xb0>
1001a52a:	463d      	mov	r5, r7
1001a52c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
1001a52e:	6862      	ldr	r2, [r4, #4]
1001a530:	f8cc 5010 	str.w	r5, [ip, #16]
1001a534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1001a538:	6021      	str	r1, [r4, #0]
1001a53a:	4660      	mov	r0, ip
1001a53c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
1001a540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1001a544:	3804      	subs	r0, #4
1001a546:	f853 2b04 	ldr.w	r2, [r3], #4
1001a54a:	f840 2f04 	str.w	r2, [r0, #4]!
1001a54e:	4299      	cmp	r1, r3
1001a550:	d8f9      	bhi.n	1001a546 <__lshift+0xca>
1001a552:	e7ea      	b.n	1001a52a <__lshift+0xae>
1001a554:	4b03      	ldr	r3, [pc, #12]	@ (1001a564 <__lshift+0xe8>)
1001a556:	4804      	ldr	r0, [pc, #16]	@ (1001a568 <__lshift+0xec>)
1001a558:	4662      	mov	r2, ip
1001a55a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
1001a55e:	f000 fba3 	bl	1001aca8 <__assert_func>
1001a562:	bf00      	nop
1001a564:	10023c14 	.word	0x10023c14
1001a568:	10023cac 	.word	0x10023cac

1001a56c <__mcmp>:
1001a56c:	690b      	ldr	r3, [r1, #16]
1001a56e:	4684      	mov	ip, r0
1001a570:	6900      	ldr	r0, [r0, #16]
1001a572:	1ac0      	subs	r0, r0, r3
1001a574:	d116      	bne.n	1001a5a4 <__mcmp+0x38>
1001a576:	f10c 0c14 	add.w	ip, ip, #20
1001a57a:	3114      	adds	r1, #20
1001a57c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
1001a580:	b410      	push	{r4}
1001a582:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1001a586:	e001      	b.n	1001a58c <__mcmp+0x20>
1001a588:	4594      	cmp	ip, r2
1001a58a:	d208      	bcs.n	1001a59e <__mcmp+0x32>
1001a58c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
1001a590:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1001a594:	428c      	cmp	r4, r1
1001a596:	d0f7      	beq.n	1001a588 <__mcmp+0x1c>
1001a598:	d205      	bcs.n	1001a5a6 <__mcmp+0x3a>
1001a59a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001a59e:	f85d 4b04 	ldr.w	r4, [sp], #4
1001a5a2:	4770      	bx	lr
1001a5a4:	4770      	bx	lr
1001a5a6:	2001      	movs	r0, #1
1001a5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
1001a5ac:	4770      	bx	lr
1001a5ae:	bf00      	nop

1001a5b0 <__mdiff>:
1001a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001a5b4:	6913      	ldr	r3, [r2, #16]
1001a5b6:	690f      	ldr	r7, [r1, #16]
1001a5b8:	1aff      	subs	r7, r7, r3
1001a5ba:	2f00      	cmp	r7, #0
1001a5bc:	b083      	sub	sp, #12
1001a5be:	460d      	mov	r5, r1
1001a5c0:	4690      	mov	r8, r2
1001a5c2:	d115      	bne.n	1001a5f0 <__mdiff+0x40>
1001a5c4:	f101 0614 	add.w	r6, r1, #20
1001a5c8:	3214      	adds	r2, #20
1001a5ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
1001a5ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1001a5d2:	e001      	b.n	1001a5d8 <__mdiff+0x28>
1001a5d4:	429e      	cmp	r6, r3
1001a5d6:	d276      	bcs.n	1001a6c6 <__mdiff+0x116>
1001a5d8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1001a5dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
1001a5e0:	428c      	cmp	r4, r1
1001a5e2:	d0f7      	beq.n	1001a5d4 <__mdiff+0x24>
1001a5e4:	d206      	bcs.n	1001a5f4 <__mdiff+0x44>
1001a5e6:	462b      	mov	r3, r5
1001a5e8:	2701      	movs	r7, #1
1001a5ea:	4645      	mov	r5, r8
1001a5ec:	4698      	mov	r8, r3
1001a5ee:	e001      	b.n	1001a5f4 <__mdiff+0x44>
1001a5f0:	dbf9      	blt.n	1001a5e6 <__mdiff+0x36>
1001a5f2:	2700      	movs	r7, #0
1001a5f4:	6869      	ldr	r1, [r5, #4]
1001a5f6:	f7ff fd31 	bl	1001a05c <_Balloc>
1001a5fa:	4681      	mov	r9, r0
1001a5fc:	2800      	cmp	r0, #0
1001a5fe:	d076      	beq.n	1001a6ee <__mdiff+0x13e>
1001a600:	692e      	ldr	r6, [r5, #16]
1001a602:	60c7      	str	r7, [r0, #12]
1001a604:	f8d8 0010 	ldr.w	r0, [r8, #16]
1001a608:	f105 0b14 	add.w	fp, r5, #20
1001a60c:	f108 0e14 	add.w	lr, r8, #20
1001a610:	f109 0a14 	add.w	sl, r9, #20
1001a614:	f105 0110 	add.w	r1, r5, #16
1001a618:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
1001a61c:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
1001a620:	4657      	mov	r7, sl
1001a622:	f04f 0c00 	mov.w	ip, #0
1001a626:	f8cd b004 	str.w	fp, [sp, #4]
1001a62a:	f85e 4b04 	ldr.w	r4, [lr], #4
1001a62e:	f851 5f04 	ldr.w	r5, [r1, #4]!
1001a632:	fa1f fb84 	uxth.w	fp, r4
1001a636:	b2ab      	uxth	r3, r5
1001a638:	eba3 030b 	sub.w	r3, r3, fp
1001a63c:	0c24      	lsrs	r4, r4, #16
1001a63e:	4463      	add	r3, ip
1001a640:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
1001a644:	eb04 4423 	add.w	r4, r4, r3, asr #16
1001a648:	b29b      	uxth	r3, r3
1001a64a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1001a64e:	4570      	cmp	r0, lr
1001a650:	f847 3b04 	str.w	r3, [r7], #4
1001a654:	ea4f 4c24 	mov.w	ip, r4, asr #16
1001a658:	d8e7      	bhi.n	1001a62a <__mdiff+0x7a>
1001a65a:	eba0 0108 	sub.w	r1, r0, r8
1001a65e:	3915      	subs	r1, #21
1001a660:	0889      	lsrs	r1, r1, #2
1001a662:	1c4c      	adds	r4, r1, #1
1001a664:	f8dd b004 	ldr.w	fp, [sp, #4]
1001a668:	f108 0815 	add.w	r8, r8, #21
1001a66c:	00a4      	lsls	r4, r4, #2
1001a66e:	4540      	cmp	r0, r8
1001a670:	bf38      	it	cc
1001a672:	2404      	movcc	r4, #4
1001a674:	eb0b 0504 	add.w	r5, fp, r4
1001a678:	42aa      	cmp	r2, r5
1001a67a:	4454      	add	r4, sl
1001a67c:	d930      	bls.n	1001a6e0 <__mdiff+0x130>
1001a67e:	4627      	mov	r7, r4
1001a680:	4628      	mov	r0, r5
1001a682:	f850 3b04 	ldr.w	r3, [r0], #4
1001a686:	fa1c fe83 	uxtah	lr, ip, r3
1001a68a:	0c19      	lsrs	r1, r3, #16
1001a68c:	4463      	add	r3, ip
1001a68e:	eb01 412e 	add.w	r1, r1, lr, asr #16
1001a692:	b29b      	uxth	r3, r3
1001a694:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1001a698:	4282      	cmp	r2, r0
1001a69a:	f847 3b04 	str.w	r3, [r7], #4
1001a69e:	ea4f 4c21 	mov.w	ip, r1, asr #16
1001a6a2:	d8ee      	bhi.n	1001a682 <__mdiff+0xd2>
1001a6a4:	3a01      	subs	r2, #1
1001a6a6:	1b52      	subs	r2, r2, r5
1001a6a8:	f022 0203 	bic.w	r2, r2, #3
1001a6ac:	4414      	add	r4, r2
1001a6ae:	b923      	cbnz	r3, 1001a6ba <__mdiff+0x10a>
1001a6b0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
1001a6b4:	3e01      	subs	r6, #1
1001a6b6:	2b00      	cmp	r3, #0
1001a6b8:	d0fa      	beq.n	1001a6b0 <__mdiff+0x100>
1001a6ba:	4648      	mov	r0, r9
1001a6bc:	f8c9 6010 	str.w	r6, [r9, #16]
1001a6c0:	b003      	add	sp, #12
1001a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a6c6:	2100      	movs	r1, #0
1001a6c8:	f7ff fcc8 	bl	1001a05c <_Balloc>
1001a6cc:	4681      	mov	r9, r0
1001a6ce:	b1a8      	cbz	r0, 1001a6fc <__mdiff+0x14c>
1001a6d0:	2201      	movs	r2, #1
1001a6d2:	2300      	movs	r3, #0
1001a6d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
1001a6d8:	4648      	mov	r0, r9
1001a6da:	b003      	add	sp, #12
1001a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a6e0:	0089      	lsls	r1, r1, #2
1001a6e2:	4540      	cmp	r0, r8
1001a6e4:	bf38      	it	cc
1001a6e6:	2100      	movcc	r1, #0
1001a6e8:	eb0a 0401 	add.w	r4, sl, r1
1001a6ec:	e7df      	b.n	1001a6ae <__mdiff+0xfe>
1001a6ee:	4b07      	ldr	r3, [pc, #28]	@ (1001a70c <__mdiff+0x15c>)
1001a6f0:	4807      	ldr	r0, [pc, #28]	@ (1001a710 <__mdiff+0x160>)
1001a6f2:	464a      	mov	r2, r9
1001a6f4:	f240 2145 	movw	r1, #581	@ 0x245
1001a6f8:	f000 fad6 	bl	1001aca8 <__assert_func>
1001a6fc:	4b03      	ldr	r3, [pc, #12]	@ (1001a70c <__mdiff+0x15c>)
1001a6fe:	4804      	ldr	r0, [pc, #16]	@ (1001a710 <__mdiff+0x160>)
1001a700:	464a      	mov	r2, r9
1001a702:	f240 2137 	movw	r1, #567	@ 0x237
1001a706:	f000 facf 	bl	1001aca8 <__assert_func>
1001a70a:	bf00      	nop
1001a70c:	10023c14 	.word	0x10023c14
1001a710:	10023cac 	.word	0x10023cac

1001a714 <__d2b>:
1001a714:	b5f0      	push	{r4, r5, r6, r7, lr}
1001a716:	2101      	movs	r1, #1
1001a718:	b083      	sub	sp, #12
1001a71a:	4616      	mov	r6, r2
1001a71c:	461f      	mov	r7, r3
1001a71e:	f7ff fc9d 	bl	1001a05c <_Balloc>
1001a722:	4605      	mov	r5, r0
1001a724:	2800      	cmp	r0, #0
1001a726:	d047      	beq.n	1001a7b8 <__d2b+0xa4>
1001a728:	f3c7 540a 	ubfx	r4, r7, #20, #11
1001a72c:	f3c7 0313 	ubfx	r3, r7, #0, #20
1001a730:	b10c      	cbz	r4, 1001a736 <__d2b+0x22>
1001a732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1001a736:	2e00      	cmp	r6, #0
1001a738:	9301      	str	r3, [sp, #4]
1001a73a:	d114      	bne.n	1001a766 <__d2b+0x52>
1001a73c:	a801      	add	r0, sp, #4
1001a73e:	f7ff fd2f 	bl	1001a1a0 <__lo0bits>
1001a742:	9b01      	ldr	r3, [sp, #4]
1001a744:	616b      	str	r3, [r5, #20]
1001a746:	2201      	movs	r2, #1
1001a748:	3020      	adds	r0, #32
1001a74a:	612a      	str	r2, [r5, #16]
1001a74c:	b314      	cbz	r4, 1001a794 <__d2b+0x80>
1001a74e:	9b08      	ldr	r3, [sp, #32]
1001a750:	f2a4 4433 	subw	r4, r4, #1075	@ 0x433
1001a754:	4404      	add	r4, r0
1001a756:	601c      	str	r4, [r3, #0]
1001a758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001a75a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
1001a75e:	6018      	str	r0, [r3, #0]
1001a760:	4628      	mov	r0, r5
1001a762:	b003      	add	sp, #12
1001a764:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001a766:	4668      	mov	r0, sp
1001a768:	9600      	str	r6, [sp, #0]
1001a76a:	f7ff fd19 	bl	1001a1a0 <__lo0bits>
1001a76e:	9b01      	ldr	r3, [sp, #4]
1001a770:	b300      	cbz	r0, 1001a7b4 <__d2b+0xa0>
1001a772:	9900      	ldr	r1, [sp, #0]
1001a774:	f1c0 0220 	rsb	r2, r0, #32
1001a778:	fa03 f202 	lsl.w	r2, r3, r2
1001a77c:	40c3      	lsrs	r3, r0
1001a77e:	9301      	str	r3, [sp, #4]
1001a780:	430a      	orrs	r2, r1
1001a782:	2b00      	cmp	r3, #0
1001a784:	e9c5 2305 	strd	r2, r3, [r5, #20]
1001a788:	bf0c      	ite	eq
1001a78a:	2201      	moveq	r2, #1
1001a78c:	2202      	movne	r2, #2
1001a78e:	612a      	str	r2, [r5, #16]
1001a790:	2c00      	cmp	r4, #0
1001a792:	d1dc      	bne.n	1001a74e <__d2b+0x3a>
1001a794:	eb05 0182 	add.w	r1, r5, r2, lsl #2
1001a798:	f2a0 4332 	subw	r3, r0, #1074	@ 0x432
1001a79c:	6908      	ldr	r0, [r1, #16]
1001a79e:	9908      	ldr	r1, [sp, #32]
1001a7a0:	600b      	str	r3, [r1, #0]
1001a7a2:	f7ff fcdb 	bl	1001a15c <__hi0bits>
1001a7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001a7a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
1001a7ac:	6018      	str	r0, [r3, #0]
1001a7ae:	4628      	mov	r0, r5
1001a7b0:	b003      	add	sp, #12
1001a7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001a7b4:	9a00      	ldr	r2, [sp, #0]
1001a7b6:	e7e4      	b.n	1001a782 <__d2b+0x6e>
1001a7b8:	4b03      	ldr	r3, [pc, #12]	@ (1001a7c8 <__d2b+0xb4>)
1001a7ba:	4804      	ldr	r0, [pc, #16]	@ (1001a7cc <__d2b+0xb8>)
1001a7bc:	462a      	mov	r2, r5
1001a7be:	f240 310f 	movw	r1, #783	@ 0x30f
1001a7c2:	f000 fa71 	bl	1001aca8 <__assert_func>
1001a7c6:	bf00      	nop
1001a7c8:	10023c14 	.word	0x10023c14
1001a7cc:	10023cac 	.word	0x10023cac

1001a7d0 <_fclose_r>:
1001a7d0:	b570      	push	{r4, r5, r6, lr}
1001a7d2:	2900      	cmp	r1, #0
1001a7d4:	d03f      	beq.n	1001a856 <_fclose_r+0x86>
1001a7d6:	4605      	mov	r5, r0
1001a7d8:	460c      	mov	r4, r1
1001a7da:	b110      	cbz	r0, 1001a7e2 <_fclose_r+0x12>
1001a7dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001a7de:	2b00      	cmp	r3, #0
1001a7e0:	d03c      	beq.n	1001a85c <_fclose_r+0x8c>
1001a7e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001a7e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1001a7e8:	07de      	lsls	r6, r3, #31
1001a7ea:	d432      	bmi.n	1001a852 <_fclose_r+0x82>
1001a7ec:	0590      	lsls	r0, r2, #22
1001a7ee:	d538      	bpl.n	1001a862 <_fclose_r+0x92>
1001a7f0:	4621      	mov	r1, r4
1001a7f2:	4628      	mov	r0, r5
1001a7f4:	f7fb fd12 	bl	1001621c <__sflush_r>
1001a7f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
1001a7fa:	4606      	mov	r6, r0
1001a7fc:	b133      	cbz	r3, 1001a80c <_fclose_r+0x3c>
1001a7fe:	69e1      	ldr	r1, [r4, #28]
1001a800:	4628      	mov	r0, r5
1001a802:	4798      	blx	r3
1001a804:	2800      	cmp	r0, #0
1001a806:	bfb8      	it	lt
1001a808:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
1001a80c:	89a3      	ldrh	r3, [r4, #12]
1001a80e:	061a      	lsls	r2, r3, #24
1001a810:	d439      	bmi.n	1001a886 <_fclose_r+0xb6>
1001a812:	6b21      	ldr	r1, [r4, #48]	@ 0x30
1001a814:	b141      	cbz	r1, 1001a828 <_fclose_r+0x58>
1001a816:	f104 0340 	add.w	r3, r4, #64	@ 0x40
1001a81a:	4299      	cmp	r1, r3
1001a81c:	d002      	beq.n	1001a824 <_fclose_r+0x54>
1001a81e:	4628      	mov	r0, r5
1001a820:	f7fd fcc8 	bl	100181b4 <_free_r>
1001a824:	2300      	movs	r3, #0
1001a826:	6323      	str	r3, [r4, #48]	@ 0x30
1001a828:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1001a82a:	b121      	cbz	r1, 1001a836 <_fclose_r+0x66>
1001a82c:	4628      	mov	r0, r5
1001a82e:	f7fd fcc1 	bl	100181b4 <_free_r>
1001a832:	2300      	movs	r3, #0
1001a834:	6463      	str	r3, [r4, #68]	@ 0x44
1001a836:	f7fb fed3 	bl	100165e0 <__sfp_lock_acquire>
1001a83a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001a83c:	2200      	movs	r2, #0
1001a83e:	07db      	lsls	r3, r3, #31
1001a840:	81a2      	strh	r2, [r4, #12]
1001a842:	d51c      	bpl.n	1001a87e <_fclose_r+0xae>
1001a844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001a846:	f7fc faa9 	bl	10016d9c <__retarget_lock_close_recursive>
1001a84a:	f7fb fecf 	bl	100165ec <__sfp_lock_release>
1001a84e:	4630      	mov	r0, r6
1001a850:	bd70      	pop	{r4, r5, r6, pc}
1001a852:	2a00      	cmp	r2, #0
1001a854:	d1cc      	bne.n	1001a7f0 <_fclose_r+0x20>
1001a856:	2600      	movs	r6, #0
1001a858:	4630      	mov	r0, r6
1001a85a:	bd70      	pop	{r4, r5, r6, pc}
1001a85c:	f7fb fea2 	bl	100165a4 <__sinit>
1001a860:	e7bf      	b.n	1001a7e2 <_fclose_r+0x12>
1001a862:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001a864:	f7fc fa9c 	bl	10016da0 <__retarget_lock_acquire_recursive>
1001a868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001a86c:	2b00      	cmp	r3, #0
1001a86e:	d1bf      	bne.n	1001a7f0 <_fclose_r+0x20>
1001a870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001a872:	07d9      	lsls	r1, r3, #31
1001a874:	d4ef      	bmi.n	1001a856 <_fclose_r+0x86>
1001a876:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001a878:	f7fc fa94 	bl	10016da4 <__retarget_lock_release_recursive>
1001a87c:	e7eb      	b.n	1001a856 <_fclose_r+0x86>
1001a87e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001a880:	f7fc fa90 	bl	10016da4 <__retarget_lock_release_recursive>
1001a884:	e7de      	b.n	1001a844 <_fclose_r+0x74>
1001a886:	6921      	ldr	r1, [r4, #16]
1001a888:	4628      	mov	r0, r5
1001a88a:	f7fd fc93 	bl	100181b4 <_free_r>
1001a88e:	e7c0      	b.n	1001a812 <_fclose_r+0x42>

1001a890 <__sread>:
1001a890:	b510      	push	{r4, lr}
1001a892:	460c      	mov	r4, r1
1001a894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1001a898:	f000 f8f6 	bl	1001aa88 <_read_r>
1001a89c:	2800      	cmp	r0, #0
1001a89e:	db03      	blt.n	1001a8a8 <__sread+0x18>
1001a8a0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
1001a8a2:	4403      	add	r3, r0
1001a8a4:	6523      	str	r3, [r4, #80]	@ 0x50
1001a8a6:	bd10      	pop	{r4, pc}
1001a8a8:	89a3      	ldrh	r3, [r4, #12]
1001a8aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1001a8ae:	81a3      	strh	r3, [r4, #12]
1001a8b0:	bd10      	pop	{r4, pc}
1001a8b2:	bf00      	nop

1001a8b4 <__swrite>:
1001a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001a8b8:	460c      	mov	r4, r1
1001a8ba:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
1001a8be:	461f      	mov	r7, r3
1001a8c0:	05cb      	lsls	r3, r1, #23
1001a8c2:	4605      	mov	r5, r0
1001a8c4:	4616      	mov	r6, r2
1001a8c6:	d40b      	bmi.n	1001a8e0 <__swrite+0x2c>
1001a8c8:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
1001a8cc:	81a1      	strh	r1, [r4, #12]
1001a8ce:	463b      	mov	r3, r7
1001a8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001a8d4:	4632      	mov	r2, r6
1001a8d6:	4628      	mov	r0, r5
1001a8d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1001a8dc:	f000 b8ea 	b.w	1001aab4 <_write_r>
1001a8e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001a8e4:	2302      	movs	r3, #2
1001a8e6:	2200      	movs	r2, #0
1001a8e8:	f000 f8b8 	bl	1001aa5c <_lseek_r>
1001a8ec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
1001a8f0:	e7ea      	b.n	1001a8c8 <__swrite+0x14>
1001a8f2:	bf00      	nop

1001a8f4 <__sseek>:
1001a8f4:	b510      	push	{r4, lr}
1001a8f6:	460c      	mov	r4, r1
1001a8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1001a8fc:	f000 f8ae 	bl	1001aa5c <_lseek_r>
1001a900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001a904:	1c42      	adds	r2, r0, #1
1001a906:	bf0e      	itee	eq
1001a908:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
1001a90c:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
1001a910:	6520      	strne	r0, [r4, #80]	@ 0x50
1001a912:	81a3      	strh	r3, [r4, #12]
1001a914:	bd10      	pop	{r4, pc}
1001a916:	bf00      	nop

1001a918 <__sclose>:
1001a918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1001a91c:	f000 b864 	b.w	1001a9e8 <_close_r>

1001a920 <__ascii_wctomb>:
1001a920:	b149      	cbz	r1, 1001a936 <__ascii_wctomb+0x16>
1001a922:	2aff      	cmp	r2, #255	@ 0xff
1001a924:	d802      	bhi.n	1001a92c <__ascii_wctomb+0xc>
1001a926:	700a      	strb	r2, [r1, #0]
1001a928:	2001      	movs	r0, #1
1001a92a:	4770      	bx	lr
1001a92c:	238a      	movs	r3, #138	@ 0x8a
1001a92e:	6003      	str	r3, [r0, #0]
1001a930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001a934:	4770      	bx	lr
1001a936:	4608      	mov	r0, r1
1001a938:	4770      	bx	lr
1001a93a:	bf00      	nop

1001a93c <__swbuf_r>:
1001a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001a93e:	460d      	mov	r5, r1
1001a940:	4614      	mov	r4, r2
1001a942:	4606      	mov	r6, r0
1001a944:	b110      	cbz	r0, 1001a94c <__swbuf_r+0x10>
1001a946:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001a948:	2b00      	cmp	r3, #0
1001a94a:	d04a      	beq.n	1001a9e2 <__swbuf_r+0xa6>
1001a94c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1001a950:	69a3      	ldr	r3, [r4, #24]
1001a952:	60a3      	str	r3, [r4, #8]
1001a954:	0710      	lsls	r0, r2, #28
1001a956:	d51b      	bpl.n	1001a990 <__swbuf_r+0x54>
1001a958:	6923      	ldr	r3, [r4, #16]
1001a95a:	b1cb      	cbz	r3, 1001a990 <__swbuf_r+0x54>
1001a95c:	b2ed      	uxtb	r5, r5
1001a95e:	0491      	lsls	r1, r2, #18
1001a960:	462f      	mov	r7, r5
1001a962:	d521      	bpl.n	1001a9a8 <__swbuf_r+0x6c>
1001a964:	6822      	ldr	r2, [r4, #0]
1001a966:	6961      	ldr	r1, [r4, #20]
1001a968:	1ad3      	subs	r3, r2, r3
1001a96a:	4299      	cmp	r1, r3
1001a96c:	dd28      	ble.n	1001a9c0 <__swbuf_r+0x84>
1001a96e:	3301      	adds	r3, #1
1001a970:	68a1      	ldr	r1, [r4, #8]
1001a972:	3901      	subs	r1, #1
1001a974:	60a1      	str	r1, [r4, #8]
1001a976:	1c51      	adds	r1, r2, #1
1001a978:	6021      	str	r1, [r4, #0]
1001a97a:	7015      	strb	r5, [r2, #0]
1001a97c:	6962      	ldr	r2, [r4, #20]
1001a97e:	429a      	cmp	r2, r3
1001a980:	d026      	beq.n	1001a9d0 <__swbuf_r+0x94>
1001a982:	89a3      	ldrh	r3, [r4, #12]
1001a984:	07db      	lsls	r3, r3, #31
1001a986:	d501      	bpl.n	1001a98c <__swbuf_r+0x50>
1001a988:	2d0a      	cmp	r5, #10
1001a98a:	d021      	beq.n	1001a9d0 <__swbuf_r+0x94>
1001a98c:	4638      	mov	r0, r7
1001a98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001a990:	4621      	mov	r1, r4
1001a992:	4630      	mov	r0, r6
1001a994:	f7fb ffd4 	bl	10016940 <__swsetup_r>
1001a998:	bb00      	cbnz	r0, 1001a9dc <__swbuf_r+0xa0>
1001a99a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1001a99e:	6923      	ldr	r3, [r4, #16]
1001a9a0:	b2ed      	uxtb	r5, r5
1001a9a2:	0491      	lsls	r1, r2, #18
1001a9a4:	462f      	mov	r7, r5
1001a9a6:	d4dd      	bmi.n	1001a964 <__swbuf_r+0x28>
1001a9a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
1001a9ac:	81a2      	strh	r2, [r4, #12]
1001a9ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1001a9b0:	6961      	ldr	r1, [r4, #20]
1001a9b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
1001a9b6:	6662      	str	r2, [r4, #100]	@ 0x64
1001a9b8:	6822      	ldr	r2, [r4, #0]
1001a9ba:	1ad3      	subs	r3, r2, r3
1001a9bc:	4299      	cmp	r1, r3
1001a9be:	dcd6      	bgt.n	1001a96e <__swbuf_r+0x32>
1001a9c0:	4621      	mov	r1, r4
1001a9c2:	4630      	mov	r0, r6
1001a9c4:	f7fb fcc6 	bl	10016354 <_fflush_r>
1001a9c8:	b940      	cbnz	r0, 1001a9dc <__swbuf_r+0xa0>
1001a9ca:	6822      	ldr	r2, [r4, #0]
1001a9cc:	2301      	movs	r3, #1
1001a9ce:	e7cf      	b.n	1001a970 <__swbuf_r+0x34>
1001a9d0:	4621      	mov	r1, r4
1001a9d2:	4630      	mov	r0, r6
1001a9d4:	f7fb fcbe 	bl	10016354 <_fflush_r>
1001a9d8:	2800      	cmp	r0, #0
1001a9da:	d0d7      	beq.n	1001a98c <__swbuf_r+0x50>
1001a9dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
1001a9e0:	e7d4      	b.n	1001a98c <__swbuf_r+0x50>
1001a9e2:	f7fb fddf 	bl	100165a4 <__sinit>
1001a9e6:	e7b1      	b.n	1001a94c <__swbuf_r+0x10>

1001a9e8 <_close_r>:
1001a9e8:	b538      	push	{r3, r4, r5, lr}
1001a9ea:	4d07      	ldr	r5, [pc, #28]	@ (1001aa08 <_close_r+0x20>)
1001a9ec:	2200      	movs	r2, #0
1001a9ee:	4604      	mov	r4, r0
1001a9f0:	4608      	mov	r0, r1
1001a9f2:	602a      	str	r2, [r5, #0]
1001a9f4:	f7f6 f85e 	bl	10010ab4 <_close>
1001a9f8:	1c43      	adds	r3, r0, #1
1001a9fa:	d000      	beq.n	1001a9fe <_close_r+0x16>
1001a9fc:	bd38      	pop	{r3, r4, r5, pc}
1001a9fe:	682b      	ldr	r3, [r5, #0]
1001aa00:	2b00      	cmp	r3, #0
1001aa02:	d0fb      	beq.n	1001a9fc <_close_r+0x14>
1001aa04:	6023      	str	r3, [r4, #0]
1001aa06:	bd38      	pop	{r3, r4, r5, pc}
1001aa08:	20001704 	.word	0x20001704

1001aa0c <_fstat_r>:
1001aa0c:	b570      	push	{r4, r5, r6, lr}
1001aa0e:	460c      	mov	r4, r1
1001aa10:	4d08      	ldr	r5, [pc, #32]	@ (1001aa34 <_fstat_r+0x28>)
1001aa12:	4603      	mov	r3, r0
1001aa14:	2600      	movs	r6, #0
1001aa16:	4620      	mov	r0, r4
1001aa18:	4611      	mov	r1, r2
1001aa1a:	461c      	mov	r4, r3
1001aa1c:	602e      	str	r6, [r5, #0]
1001aa1e:	f7f6 f855 	bl	10010acc <_fstat>
1001aa22:	1c43      	adds	r3, r0, #1
1001aa24:	d000      	beq.n	1001aa28 <_fstat_r+0x1c>
1001aa26:	bd70      	pop	{r4, r5, r6, pc}
1001aa28:	682b      	ldr	r3, [r5, #0]
1001aa2a:	2b00      	cmp	r3, #0
1001aa2c:	d0fb      	beq.n	1001aa26 <_fstat_r+0x1a>
1001aa2e:	6023      	str	r3, [r4, #0]
1001aa30:	bd70      	pop	{r4, r5, r6, pc}
1001aa32:	bf00      	nop
1001aa34:	20001704 	.word	0x20001704

1001aa38 <_isatty_r>:
1001aa38:	b538      	push	{r3, r4, r5, lr}
1001aa3a:	4d07      	ldr	r5, [pc, #28]	@ (1001aa58 <_isatty_r+0x20>)
1001aa3c:	2200      	movs	r2, #0
1001aa3e:	4604      	mov	r4, r0
1001aa40:	4608      	mov	r0, r1
1001aa42:	602a      	str	r2, [r5, #0]
1001aa44:	f7f6 f83a 	bl	10010abc <_isatty>
1001aa48:	1c43      	adds	r3, r0, #1
1001aa4a:	d000      	beq.n	1001aa4e <_isatty_r+0x16>
1001aa4c:	bd38      	pop	{r3, r4, r5, pc}
1001aa4e:	682b      	ldr	r3, [r5, #0]
1001aa50:	2b00      	cmp	r3, #0
1001aa52:	d0fb      	beq.n	1001aa4c <_isatty_r+0x14>
1001aa54:	6023      	str	r3, [r4, #0]
1001aa56:	bd38      	pop	{r3, r4, r5, pc}
1001aa58:	20001704 	.word	0x20001704

1001aa5c <_lseek_r>:
1001aa5c:	b538      	push	{r3, r4, r5, lr}
1001aa5e:	460c      	mov	r4, r1
1001aa60:	4d08      	ldr	r5, [pc, #32]	@ (1001aa84 <_lseek_r+0x28>)
1001aa62:	4684      	mov	ip, r0
1001aa64:	4611      	mov	r1, r2
1001aa66:	4620      	mov	r0, r4
1001aa68:	461a      	mov	r2, r3
1001aa6a:	2300      	movs	r3, #0
1001aa6c:	602b      	str	r3, [r5, #0]
1001aa6e:	4664      	mov	r4, ip
1001aa70:	f7f6 f828 	bl	10010ac4 <_lseek>
1001aa74:	1c43      	adds	r3, r0, #1
1001aa76:	d000      	beq.n	1001aa7a <_lseek_r+0x1e>
1001aa78:	bd38      	pop	{r3, r4, r5, pc}
1001aa7a:	682b      	ldr	r3, [r5, #0]
1001aa7c:	2b00      	cmp	r3, #0
1001aa7e:	d0fb      	beq.n	1001aa78 <_lseek_r+0x1c>
1001aa80:	6023      	str	r3, [r4, #0]
1001aa82:	bd38      	pop	{r3, r4, r5, pc}
1001aa84:	20001704 	.word	0x20001704

1001aa88 <_read_r>:
1001aa88:	b538      	push	{r3, r4, r5, lr}
1001aa8a:	460c      	mov	r4, r1
1001aa8c:	4d08      	ldr	r5, [pc, #32]	@ (1001aab0 <_read_r+0x28>)
1001aa8e:	4684      	mov	ip, r0
1001aa90:	4611      	mov	r1, r2
1001aa92:	4620      	mov	r0, r4
1001aa94:	461a      	mov	r2, r3
1001aa96:	2300      	movs	r3, #0
1001aa98:	602b      	str	r3, [r5, #0]
1001aa9a:	4664      	mov	r4, ip
1001aa9c:	f7f6 f81a 	bl	10010ad4 <_read>
1001aaa0:	1c43      	adds	r3, r0, #1
1001aaa2:	d000      	beq.n	1001aaa6 <_read_r+0x1e>
1001aaa4:	bd38      	pop	{r3, r4, r5, pc}
1001aaa6:	682b      	ldr	r3, [r5, #0]
1001aaa8:	2b00      	cmp	r3, #0
1001aaaa:	d0fb      	beq.n	1001aaa4 <_read_r+0x1c>
1001aaac:	6023      	str	r3, [r4, #0]
1001aaae:	bd38      	pop	{r3, r4, r5, pc}
1001aab0:	20001704 	.word	0x20001704

1001aab4 <_write_r>:
1001aab4:	b538      	push	{r3, r4, r5, lr}
1001aab6:	460c      	mov	r4, r1
1001aab8:	4d08      	ldr	r5, [pc, #32]	@ (1001aadc <_write_r+0x28>)
1001aaba:	4684      	mov	ip, r0
1001aabc:	4611      	mov	r1, r2
1001aabe:	4620      	mov	r0, r4
1001aac0:	461a      	mov	r2, r3
1001aac2:	2300      	movs	r3, #0
1001aac4:	602b      	str	r3, [r5, #0]
1001aac6:	4664      	mov	r4, ip
1001aac8:	f7f6 f82c 	bl	10010b24 <_write>
1001aacc:	1c43      	adds	r3, r0, #1
1001aace:	d000      	beq.n	1001aad2 <_write_r+0x1e>
1001aad0:	bd38      	pop	{r3, r4, r5, pc}
1001aad2:	682b      	ldr	r3, [r5, #0]
1001aad4:	2b00      	cmp	r3, #0
1001aad6:	d0fb      	beq.n	1001aad0 <_write_r+0x1c>
1001aad8:	6023      	str	r3, [r4, #0]
1001aada:	bd38      	pop	{r3, r4, r5, pc}
1001aadc:	20001704 	.word	0x20001704

1001aae0 <__libc_fini_array>:
1001aae0:	b538      	push	{r3, r4, r5, lr}
1001aae2:	4d07      	ldr	r5, [pc, #28]	@ (1001ab00 <__libc_fini_array+0x20>)
1001aae4:	4c07      	ldr	r4, [pc, #28]	@ (1001ab04 <__libc_fini_array+0x24>)
1001aae6:	1b2c      	subs	r4, r5, r4
1001aae8:	10a4      	asrs	r4, r4, #2
1001aaea:	d005      	beq.n	1001aaf8 <__libc_fini_array+0x18>
1001aaec:	3c01      	subs	r4, #1
1001aaee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1001aaf2:	4798      	blx	r3
1001aaf4:	2c00      	cmp	r4, #0
1001aaf6:	d1f9      	bne.n	1001aaec <__libc_fini_array+0xc>
1001aaf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1001aafc:	f009 b9ae 	b.w	10023e5c <_fini>
1001ab00:	20000738 	.word	0x20000738
1001ab04:	20000734 	.word	0x20000734

1001ab08 <_wcsnrtombs_l>:
1001ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001ab0c:	b08b      	sub	sp, #44	@ 0x2c
1001ab0e:	e9dd 7a15 	ldrd	r7, sl, [sp, #84]	@ 0x54
1001ab12:	4686      	mov	lr, r0
1001ab14:	461e      	mov	r6, r3
1001ab16:	2f00      	cmp	r7, #0
1001ab18:	d05a      	beq.n	1001abd0 <_wcsnrtombs_l+0xc8>
1001ab1a:	6815      	ldr	r5, [r2, #0]
1001ab1c:	2900      	cmp	r1, #0
1001ab1e:	d05c      	beq.n	1001abda <_wcsnrtombs_l+0xd2>
1001ab20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1001ab22:	2b00      	cmp	r3, #0
1001ab24:	d069      	beq.n	1001abfa <_wcsnrtombs_l+0xf2>
1001ab26:	1e74      	subs	r4, r6, #1
1001ab28:	b34e      	cbz	r6, 1001ab7e <_wcsnrtombs_l+0x76>
1001ab2a:	3d04      	subs	r5, #4
1001ab2c:	e9cd 5e01 	strd	r5, lr, [sp, #4]
1001ab30:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
1001ab34:	9104      	str	r1, [sp, #16]
1001ab36:	2600      	movs	r6, #0
1001ab38:	9103      	str	r1, [sp, #12]
1001ab3a:	9205      	str	r2, [sp, #20]
1001ab3c:	e00b      	b.n	1001ab56 <_wcsnrtombs_l+0x4e>
1001ab3e:	9b03      	ldr	r3, [sp, #12]
1001ab40:	bb0b      	cbnz	r3, 1001ab86 <_wcsnrtombs_l+0x7e>
1001ab42:	9b01      	ldr	r3, [sp, #4]
1001ab44:	6818      	ldr	r0, [r3, #0]
1001ab46:	2800      	cmp	r0, #0
1001ab48:	d036      	beq.n	1001abb8 <_wcsnrtombs_l+0xb0>
1001ab4a:	45dc      	cmp	ip, fp
1001ab4c:	d257      	bcs.n	1001abfe <_wcsnrtombs_l+0xf6>
1001ab4e:	3c01      	subs	r4, #1
1001ab50:	1c63      	adds	r3, r4, #1
1001ab52:	4666      	mov	r6, ip
1001ab54:	d013      	beq.n	1001ab7e <_wcsnrtombs_l+0x76>
1001ab56:	9b01      	ldr	r3, [sp, #4]
1001ab58:	9802      	ldr	r0, [sp, #8]
1001ab5a:	f853 2f04 	ldr.w	r2, [r3, #4]!
1001ab5e:	9301      	str	r3, [sp, #4]
1001ab60:	f8da 50e0 	ldr.w	r5, [sl, #224]	@ 0xe0
1001ab64:	463b      	mov	r3, r7
1001ab66:	a907      	add	r1, sp, #28
1001ab68:	e9d7 9800 	ldrd	r9, r8, [r7]
1001ab6c:	47a8      	blx	r5
1001ab6e:	1c42      	adds	r2, r0, #1
1001ab70:	d037      	beq.n	1001abe2 <_wcsnrtombs_l+0xda>
1001ab72:	eb00 0c06 	add.w	ip, r0, r6
1001ab76:	45dc      	cmp	ip, fp
1001ab78:	d9e1      	bls.n	1001ab3e <_wcsnrtombs_l+0x36>
1001ab7a:	e9c7 9800 	strd	r9, r8, [r7]
1001ab7e:	4630      	mov	r0, r6
1001ab80:	b00b      	add	sp, #44	@ 0x2c
1001ab82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001ab86:	2800      	cmp	r0, #0
1001ab88:	dd0e      	ble.n	1001aba8 <_wcsnrtombs_l+0xa0>
1001ab8a:	9b04      	ldr	r3, [sp, #16]
1001ab8c:	9d01      	ldr	r5, [sp, #4]
1001ab8e:	4418      	add	r0, r3
1001ab90:	1e5a      	subs	r2, r3, #1
1001ab92:	a907      	add	r1, sp, #28
1001ab94:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
1001ab98:	f811 3b01 	ldrb.w	r3, [r1], #1
1001ab9c:	f802 3f01 	strb.w	r3, [r2, #1]!
1001aba0:	4596      	cmp	lr, r2
1001aba2:	d1f9      	bne.n	1001ab98 <_wcsnrtombs_l+0x90>
1001aba4:	9501      	str	r5, [sp, #4]
1001aba6:	9004      	str	r0, [sp, #16]
1001aba8:	9b05      	ldr	r3, [sp, #20]
1001abaa:	681a      	ldr	r2, [r3, #0]
1001abac:	3204      	adds	r2, #4
1001abae:	601a      	str	r2, [r3, #0]
1001abb0:	9b01      	ldr	r3, [sp, #4]
1001abb2:	6818      	ldr	r0, [r3, #0]
1001abb4:	2800      	cmp	r0, #0
1001abb6:	d1c8      	bne.n	1001ab4a <_wcsnrtombs_l+0x42>
1001abb8:	9903      	ldr	r1, [sp, #12]
1001abba:	9a05      	ldr	r2, [sp, #20]
1001abbc:	b101      	cbz	r1, 1001abc0 <_wcsnrtombs_l+0xb8>
1001abbe:	6010      	str	r0, [r2, #0]
1001abc0:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
1001abc4:	2200      	movs	r2, #0
1001abc6:	4630      	mov	r0, r6
1001abc8:	603a      	str	r2, [r7, #0]
1001abca:	b00b      	add	sp, #44	@ 0x2c
1001abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001abd0:	6815      	ldr	r5, [r2, #0]
1001abd2:	f500 7786 	add.w	r7, r0, #268	@ 0x10c
1001abd6:	2900      	cmp	r1, #0
1001abd8:	d1a2      	bne.n	1001ab20 <_wcsnrtombs_l+0x18>
1001abda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001abde:	9314      	str	r3, [sp, #80]	@ 0x50
1001abe0:	e7a1      	b.n	1001ab26 <_wcsnrtombs_l+0x1e>
1001abe2:	f8dd e008 	ldr.w	lr, [sp, #8]
1001abe6:	4606      	mov	r6, r0
1001abe8:	218a      	movs	r1, #138	@ 0x8a
1001abea:	2200      	movs	r2, #0
1001abec:	4630      	mov	r0, r6
1001abee:	f8ce 1000 	str.w	r1, [lr]
1001abf2:	603a      	str	r2, [r7, #0]
1001abf4:	b00b      	add	sp, #44	@ 0x2c
1001abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001abfa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
1001abfc:	e7bf      	b.n	1001ab7e <_wcsnrtombs_l+0x76>
1001abfe:	4666      	mov	r6, ip
1001ac00:	e7bd      	b.n	1001ab7e <_wcsnrtombs_l+0x76>
1001ac02:	bf00      	nop

1001ac04 <_wcsnrtombs_r>:
1001ac04:	b510      	push	{r4, lr}
1001ac06:	b084      	sub	sp, #16
1001ac08:	4c05      	ldr	r4, [pc, #20]	@ (1001ac20 <_wcsnrtombs_r+0x1c>)
1001ac0a:	9806      	ldr	r0, [sp, #24]
1001ac0c:	9000      	str	r0, [sp, #0]
1001ac0e:	9807      	ldr	r0, [sp, #28]
1001ac10:	9001      	str	r0, [sp, #4]
1001ac12:	4804      	ldr	r0, [pc, #16]	@ (1001ac24 <_wcsnrtombs_r+0x20>)
1001ac14:	6800      	ldr	r0, [r0, #0]
1001ac16:	9402      	str	r4, [sp, #8]
1001ac18:	f7ff ff76 	bl	1001ab08 <_wcsnrtombs_l>
1001ac1c:	b004      	add	sp, #16
1001ac1e:	bd10      	pop	{r4, pc}
1001ac20:	20000494 	.word	0x20000494
1001ac24:	20000600 	.word	0x20000600

1001ac28 <__register_exitproc>:
1001ac28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001ac2c:	4d1b      	ldr	r5, [pc, #108]	@ (1001ac9c <__register_exitproc+0x74>)
1001ac2e:	4606      	mov	r6, r0
1001ac30:	6828      	ldr	r0, [r5, #0]
1001ac32:	4698      	mov	r8, r3
1001ac34:	460f      	mov	r7, r1
1001ac36:	4691      	mov	r9, r2
1001ac38:	f7fc f8b2 	bl	10016da0 <__retarget_lock_acquire_recursive>
1001ac3c:	4b18      	ldr	r3, [pc, #96]	@ (1001aca0 <__register_exitproc+0x78>)
1001ac3e:	681c      	ldr	r4, [r3, #0]
1001ac40:	b31c      	cbz	r4, 1001ac8a <__register_exitproc+0x62>
1001ac42:	6828      	ldr	r0, [r5, #0]
1001ac44:	6865      	ldr	r5, [r4, #4]
1001ac46:	2d1f      	cmp	r5, #31
1001ac48:	dc22      	bgt.n	1001ac90 <__register_exitproc+0x68>
1001ac4a:	b94e      	cbnz	r6, 1001ac60 <__register_exitproc+0x38>
1001ac4c:	1c6b      	adds	r3, r5, #1
1001ac4e:	3502      	adds	r5, #2
1001ac50:	6063      	str	r3, [r4, #4]
1001ac52:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
1001ac56:	f7fc f8a5 	bl	10016da4 <__retarget_lock_release_recursive>
1001ac5a:	2000      	movs	r0, #0
1001ac5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001ac60:	eb04 0185 	add.w	r1, r4, r5, lsl #2
1001ac64:	2301      	movs	r3, #1
1001ac66:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
1001ac6a:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
1001ac6e:	40ab      	lsls	r3, r5
1001ac70:	431a      	orrs	r2, r3
1001ac72:	2e02      	cmp	r6, #2
1001ac74:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
1001ac78:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
1001ac7c:	d1e6      	bne.n	1001ac4c <__register_exitproc+0x24>
1001ac7e:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
1001ac82:	431a      	orrs	r2, r3
1001ac84:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
1001ac88:	e7e0      	b.n	1001ac4c <__register_exitproc+0x24>
1001ac8a:	4c06      	ldr	r4, [pc, #24]	@ (1001aca4 <__register_exitproc+0x7c>)
1001ac8c:	601c      	str	r4, [r3, #0]
1001ac8e:	e7d8      	b.n	1001ac42 <__register_exitproc+0x1a>
1001ac90:	f7fc f888 	bl	10016da4 <__retarget_lock_release_recursive>
1001ac94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001ac98:	e7e0      	b.n	1001ac5c <__register_exitproc+0x34>
1001ac9a:	bf00      	nop
1001ac9c:	20000728 	.word	0x20000728
1001aca0:	20001700 	.word	0x20001700
1001aca4:	20001708 	.word	0x20001708

1001aca8 <__assert_func>:
1001aca8:	b500      	push	{lr}
1001acaa:	4c0b      	ldr	r4, [pc, #44]	@ (1001acd8 <__assert_func+0x30>)
1001acac:	6825      	ldr	r5, [r4, #0]
1001acae:	4614      	mov	r4, r2
1001acb0:	68ee      	ldr	r6, [r5, #12]
1001acb2:	461a      	mov	r2, r3
1001acb4:	b085      	sub	sp, #20
1001acb6:	4603      	mov	r3, r0
1001acb8:	460d      	mov	r5, r1
1001acba:	b14c      	cbz	r4, 1001acd0 <__assert_func+0x28>
1001acbc:	4907      	ldr	r1, [pc, #28]	@ (1001acdc <__assert_func+0x34>)
1001acbe:	9500      	str	r5, [sp, #0]
1001acc0:	e9cd 1401 	strd	r1, r4, [sp, #4]
1001acc4:	4630      	mov	r0, r6
1001acc6:	4906      	ldr	r1, [pc, #24]	@ (1001ace0 <__assert_func+0x38>)
1001acc8:	f000 f80e 	bl	1001ace8 <fiprintf>
1001accc:	f000 f8a4 	bl	1001ae18 <abort>
1001acd0:	4904      	ldr	r1, [pc, #16]	@ (1001ace4 <__assert_func+0x3c>)
1001acd2:	460c      	mov	r4, r1
1001acd4:	e7f3      	b.n	1001acbe <__assert_func+0x16>
1001acd6:	bf00      	nop
1001acd8:	20000600 	.word	0x20000600
1001acdc:	10023e10 	.word	0x10023e10
1001ace0:	10023e20 	.word	0x10023e20
1001ace4:	100238b4 	.word	0x100238b4

1001ace8 <fiprintf>:
1001ace8:	b40e      	push	{r1, r2, r3}
1001acea:	b510      	push	{r4, lr}
1001acec:	b083      	sub	sp, #12
1001acee:	ab05      	add	r3, sp, #20
1001acf0:	4c06      	ldr	r4, [pc, #24]	@ (1001ad0c <fiprintf+0x24>)
1001acf2:	f853 2b04 	ldr.w	r2, [r3], #4
1001acf6:	9301      	str	r3, [sp, #4]
1001acf8:	4601      	mov	r1, r0
1001acfa:	6820      	ldr	r0, [r4, #0]
1001acfc:	f7fa f86c 	bl	10014dd8 <_vfiprintf_r>
1001ad00:	b003      	add	sp, #12
1001ad02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1001ad06:	b003      	add	sp, #12
1001ad08:	4770      	bx	lr
1001ad0a:	bf00      	nop
1001ad0c:	20000600 	.word	0x20000600

1001ad10 <__ssprint_r>:
1001ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001ad14:	6893      	ldr	r3, [r2, #8]
1001ad16:	6817      	ldr	r7, [r2, #0]
1001ad18:	b083      	sub	sp, #12
1001ad1a:	4692      	mov	sl, r2
1001ad1c:	2b00      	cmp	r3, #0
1001ad1e:	d074      	beq.n	1001ae0a <__ssprint_r+0xfa>
1001ad20:	f04f 0b00 	mov.w	fp, #0
1001ad24:	688b      	ldr	r3, [r1, #8]
1001ad26:	680a      	ldr	r2, [r1, #0]
1001ad28:	4681      	mov	r9, r0
1001ad2a:	460c      	mov	r4, r1
1001ad2c:	465d      	mov	r5, fp
1001ad2e:	e045      	b.n	1001adbc <__ssprint_r+0xac>
1001ad30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001ad34:	f413 6f90 	tst.w	r3, #1152	@ 0x480
1001ad38:	d02c      	beq.n	1001ad94 <__ssprint_r+0x84>
1001ad3a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1001ad3e:	1a16      	subs	r6, r2, r0
1001ad40:	eb01 0241 	add.w	r2, r1, r1, lsl #1
1001ad44:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1001ad48:	1c71      	adds	r1, r6, #1
1001ad4a:	1052      	asrs	r2, r2, #1
1001ad4c:	4429      	add	r1, r5
1001ad4e:	4291      	cmp	r1, r2
1001ad50:	bf92      	itee	ls
1001ad52:	4690      	movls	r8, r2
1001ad54:	4688      	movhi	r8, r1
1001ad56:	460a      	movhi	r2, r1
1001ad58:	055b      	lsls	r3, r3, #21
1001ad5a:	d539      	bpl.n	1001add0 <__ssprint_r+0xc0>
1001ad5c:	4611      	mov	r1, r2
1001ad5e:	4648      	mov	r0, r9
1001ad60:	f7f7 febc 	bl	10012adc <_malloc_r>
1001ad64:	9001      	str	r0, [sp, #4]
1001ad66:	2800      	cmp	r0, #0
1001ad68:	d03d      	beq.n	1001ade6 <__ssprint_r+0xd6>
1001ad6a:	4632      	mov	r2, r6
1001ad6c:	6921      	ldr	r1, [r4, #16]
1001ad6e:	f7fc f86f 	bl	10016e50 <memcpy>
1001ad72:	89a2      	ldrh	r2, [r4, #12]
1001ad74:	9b01      	ldr	r3, [sp, #4]
1001ad76:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
1001ad7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
1001ad7e:	81a2      	strh	r2, [r4, #12]
1001ad80:	1998      	adds	r0, r3, r6
1001ad82:	eba8 0606 	sub.w	r6, r8, r6
1001ad86:	60a6      	str	r6, [r4, #8]
1001ad88:	f8c4 8014 	str.w	r8, [r4, #20]
1001ad8c:	6123      	str	r3, [r4, #16]
1001ad8e:	6020      	str	r0, [r4, #0]
1001ad90:	46a8      	mov	r8, r5
1001ad92:	462e      	mov	r6, r5
1001ad94:	4632      	mov	r2, r6
1001ad96:	4659      	mov	r1, fp
1001ad98:	f7fb fea0 	bl	10016adc <memmove>
1001ad9c:	f8da 1008 	ldr.w	r1, [sl, #8]
1001ada0:	68a3      	ldr	r3, [r4, #8]
1001ada2:	6822      	ldr	r2, [r4, #0]
1001ada4:	eba3 0308 	sub.w	r3, r3, r8
1001ada8:	4432      	add	r2, r6
1001adaa:	1b49      	subs	r1, r1, r5
1001adac:	60a3      	str	r3, [r4, #8]
1001adae:	6022      	str	r2, [r4, #0]
1001adb0:	f8ca 1008 	str.w	r1, [sl, #8]
1001adb4:	b349      	cbz	r1, 1001ae0a <__ssprint_r+0xfa>
1001adb6:	e9d7 b500 	ldrd	fp, r5, [r7]
1001adba:	3708      	adds	r7, #8
1001adbc:	4698      	mov	r8, r3
1001adbe:	4610      	mov	r0, r2
1001adc0:	2d00      	cmp	r5, #0
1001adc2:	d0f8      	beq.n	1001adb6 <__ssprint_r+0xa6>
1001adc4:	429d      	cmp	r5, r3
1001adc6:	461e      	mov	r6, r3
1001adc8:	d2b2      	bcs.n	1001ad30 <__ssprint_r+0x20>
1001adca:	46a8      	mov	r8, r5
1001adcc:	462e      	mov	r6, r5
1001adce:	e7e1      	b.n	1001ad94 <__ssprint_r+0x84>
1001add0:	4601      	mov	r1, r0
1001add2:	4648      	mov	r0, r9
1001add4:	f7fb f880 	bl	10015ed8 <_realloc_r>
1001add8:	4603      	mov	r3, r0
1001adda:	2800      	cmp	r0, #0
1001addc:	d1d0      	bne.n	1001ad80 <__ssprint_r+0x70>
1001adde:	6921      	ldr	r1, [r4, #16]
1001ade0:	4648      	mov	r0, r9
1001ade2:	f7fd f9e7 	bl	100181b4 <_free_r>
1001ade6:	89a3      	ldrh	r3, [r4, #12]
1001ade8:	220c      	movs	r2, #12
1001adea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001adee:	f8c9 2000 	str.w	r2, [r9]
1001adf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001adf6:	81a3      	strh	r3, [r4, #12]
1001adf8:	2200      	movs	r2, #0
1001adfa:	2300      	movs	r3, #0
1001adfc:	f8ca 2008 	str.w	r2, [sl, #8]
1001ae00:	f8ca 3004 	str.w	r3, [sl, #4]
1001ae04:	b003      	add	sp, #12
1001ae06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001ae0a:	2000      	movs	r0, #0
1001ae0c:	2300      	movs	r3, #0
1001ae0e:	f8ca 3004 	str.w	r3, [sl, #4]
1001ae12:	b003      	add	sp, #12
1001ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1001ae18 <abort>:
1001ae18:	b508      	push	{r3, lr}
1001ae1a:	2006      	movs	r0, #6
1001ae1c:	f000 f804 	bl	1001ae28 <raise>
1001ae20:	2001      	movs	r0, #1
1001ae22:	f000 f855 	bl	1001aed0 <_exit>
1001ae26:	bf00      	nop

1001ae28 <raise>:
1001ae28:	b538      	push	{r3, r4, r5, lr}
1001ae2a:	4b14      	ldr	r3, [pc, #80]	@ (1001ae7c <raise+0x54>)
1001ae2c:	281f      	cmp	r0, #31
1001ae2e:	681d      	ldr	r5, [r3, #0]
1001ae30:	d81e      	bhi.n	1001ae70 <raise+0x48>
1001ae32:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
1001ae36:	4604      	mov	r4, r0
1001ae38:	b162      	cbz	r2, 1001ae54 <raise+0x2c>
1001ae3a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
1001ae3e:	b14b      	cbz	r3, 1001ae54 <raise+0x2c>
1001ae40:	2b01      	cmp	r3, #1
1001ae42:	d005      	beq.n	1001ae50 <raise+0x28>
1001ae44:	1c59      	adds	r1, r3, #1
1001ae46:	d00f      	beq.n	1001ae68 <raise+0x40>
1001ae48:	2100      	movs	r1, #0
1001ae4a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
1001ae4e:	4798      	blx	r3
1001ae50:	2000      	movs	r0, #0
1001ae52:	bd38      	pop	{r3, r4, r5, pc}
1001ae54:	4628      	mov	r0, r5
1001ae56:	f000 f829 	bl	1001aeac <_getpid_r>
1001ae5a:	4622      	mov	r2, r4
1001ae5c:	4601      	mov	r1, r0
1001ae5e:	4628      	mov	r0, r5
1001ae60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1001ae64:	f000 b80c 	b.w	1001ae80 <_kill_r>
1001ae68:	2316      	movs	r3, #22
1001ae6a:	602b      	str	r3, [r5, #0]
1001ae6c:	2001      	movs	r0, #1
1001ae6e:	bd38      	pop	{r3, r4, r5, pc}
1001ae70:	2316      	movs	r3, #22
1001ae72:	602b      	str	r3, [r5, #0]
1001ae74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001ae78:	bd38      	pop	{r3, r4, r5, pc}
1001ae7a:	bf00      	nop
1001ae7c:	20000600 	.word	0x20000600

1001ae80 <_kill_r>:
1001ae80:	b570      	push	{r4, r5, r6, lr}
1001ae82:	460c      	mov	r4, r1
1001ae84:	4d08      	ldr	r5, [pc, #32]	@ (1001aea8 <_kill_r+0x28>)
1001ae86:	4603      	mov	r3, r0
1001ae88:	2600      	movs	r6, #0
1001ae8a:	4620      	mov	r0, r4
1001ae8c:	4611      	mov	r1, r2
1001ae8e:	461c      	mov	r4, r3
1001ae90:	602e      	str	r6, [r5, #0]
1001ae92:	f000 f815 	bl	1001aec0 <_kill>
1001ae96:	1c43      	adds	r3, r0, #1
1001ae98:	d000      	beq.n	1001ae9c <_kill_r+0x1c>
1001ae9a:	bd70      	pop	{r4, r5, r6, pc}
1001ae9c:	682b      	ldr	r3, [r5, #0]
1001ae9e:	2b00      	cmp	r3, #0
1001aea0:	d0fb      	beq.n	1001ae9a <_kill_r+0x1a>
1001aea2:	6023      	str	r3, [r4, #0]
1001aea4:	bd70      	pop	{r4, r5, r6, pc}
1001aea6:	bf00      	nop
1001aea8:	20001704 	.word	0x20001704

1001aeac <_getpid_r>:
1001aeac:	f000 b800 	b.w	1001aeb0 <_getpid>

1001aeb0 <_getpid>:
1001aeb0:	4b02      	ldr	r3, [pc, #8]	@ (1001aebc <_getpid+0xc>)
1001aeb2:	2258      	movs	r2, #88	@ 0x58
1001aeb4:	601a      	str	r2, [r3, #0]
1001aeb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001aeba:	4770      	bx	lr
1001aebc:	20001704 	.word	0x20001704

1001aec0 <_kill>:
1001aec0:	4b02      	ldr	r3, [pc, #8]	@ (1001aecc <_kill+0xc>)
1001aec2:	2258      	movs	r2, #88	@ 0x58
1001aec4:	601a      	str	r2, [r3, #0]
1001aec6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001aeca:	4770      	bx	lr
1001aecc:	20001704 	.word	0x20001704

1001aed0 <_exit>:
1001aed0:	e7fe      	b.n	1001aed0 <_exit>
1001aed2:	bf00      	nop

1001aed4 <__aeabi_drsub>:
1001aed4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
1001aed8:	e002      	b.n	1001aee0 <__adddf3>
1001aeda:	bf00      	nop

1001aedc <__aeabi_dsub>:
1001aedc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

1001aee0 <__adddf3>:
1001aee0:	b530      	push	{r4, r5, lr}
1001aee2:	ea4f 0441 	mov.w	r4, r1, lsl #1
1001aee6:	ea4f 0543 	mov.w	r5, r3, lsl #1
1001aeea:	ea94 0f05 	teq	r4, r5
1001aeee:	bf08      	it	eq
1001aef0:	ea90 0f02 	teqeq	r0, r2
1001aef4:	bf1f      	itttt	ne
1001aef6:	ea54 0c00 	orrsne.w	ip, r4, r0
1001aefa:	ea55 0c02 	orrsne.w	ip, r5, r2
1001aefe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1001af02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1001af06:	f000 80e2 	beq.w	1001b0ce <__adddf3+0x1ee>
1001af0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1001af0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1001af12:	bfb8      	it	lt
1001af14:	426d      	neglt	r5, r5
1001af16:	dd0c      	ble.n	1001af32 <__adddf3+0x52>
1001af18:	442c      	add	r4, r5
1001af1a:	ea80 0202 	eor.w	r2, r0, r2
1001af1e:	ea81 0303 	eor.w	r3, r1, r3
1001af22:	ea82 0000 	eor.w	r0, r2, r0
1001af26:	ea83 0101 	eor.w	r1, r3, r1
1001af2a:	ea80 0202 	eor.w	r2, r0, r2
1001af2e:	ea81 0303 	eor.w	r3, r1, r3
1001af32:	2d36      	cmp	r5, #54	@ 0x36
1001af34:	bf88      	it	hi
1001af36:	bd30      	pophi	{r4, r5, pc}
1001af38:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
1001af3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1001af40:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
1001af44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1001af48:	d002      	beq.n	1001af50 <__adddf3+0x70>
1001af4a:	4240      	negs	r0, r0
1001af4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1001af50:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
1001af54:	ea4f 3303 	mov.w	r3, r3, lsl #12
1001af58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1001af5c:	d002      	beq.n	1001af64 <__adddf3+0x84>
1001af5e:	4252      	negs	r2, r2
1001af60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1001af64:	ea94 0f05 	teq	r4, r5
1001af68:	f000 80a7 	beq.w	1001b0ba <__adddf3+0x1da>
1001af6c:	f1a4 0401 	sub.w	r4, r4, #1
1001af70:	f1d5 0e20 	rsbs	lr, r5, #32
1001af74:	db0d      	blt.n	1001af92 <__adddf3+0xb2>
1001af76:	fa02 fc0e 	lsl.w	ip, r2, lr
1001af7a:	fa22 f205 	lsr.w	r2, r2, r5
1001af7e:	1880      	adds	r0, r0, r2
1001af80:	f141 0100 	adc.w	r1, r1, #0
1001af84:	fa03 f20e 	lsl.w	r2, r3, lr
1001af88:	1880      	adds	r0, r0, r2
1001af8a:	fa43 f305 	asr.w	r3, r3, r5
1001af8e:	4159      	adcs	r1, r3
1001af90:	e00e      	b.n	1001afb0 <__adddf3+0xd0>
1001af92:	f1a5 0520 	sub.w	r5, r5, #32
1001af96:	f10e 0e20 	add.w	lr, lr, #32
1001af9a:	2a01      	cmp	r2, #1
1001af9c:	fa03 fc0e 	lsl.w	ip, r3, lr
1001afa0:	bf28      	it	cs
1001afa2:	f04c 0c02 	orrcs.w	ip, ip, #2
1001afa6:	fa43 f305 	asr.w	r3, r3, r5
1001afaa:	18c0      	adds	r0, r0, r3
1001afac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1001afb0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
1001afb4:	d507      	bpl.n	1001afc6 <__adddf3+0xe6>
1001afb6:	f04f 0e00 	mov.w	lr, #0
1001afba:	f1dc 0c00 	rsbs	ip, ip, #0
1001afbe:	eb7e 0000 	sbcs.w	r0, lr, r0
1001afc2:	eb6e 0101 	sbc.w	r1, lr, r1
1001afc6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
1001afca:	d31b      	bcc.n	1001b004 <__adddf3+0x124>
1001afcc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
1001afd0:	d30c      	bcc.n	1001afec <__adddf3+0x10c>
1001afd2:	0849      	lsrs	r1, r1, #1
1001afd4:	ea5f 0030 	movs.w	r0, r0, rrx
1001afd8:	ea4f 0c3c 	mov.w	ip, ip, rrx
1001afdc:	f104 0401 	add.w	r4, r4, #1
1001afe0:	ea4f 5244 	mov.w	r2, r4, lsl #21
1001afe4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
1001afe8:	f080 809a 	bcs.w	1001b120 <__adddf3+0x240>
1001afec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
1001aff0:	bf08      	it	eq
1001aff2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1001aff6:	f150 0000 	adcs.w	r0, r0, #0
1001affa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1001affe:	ea41 0105 	orr.w	r1, r1, r5
1001b002:	bd30      	pop	{r4, r5, pc}
1001b004:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1001b008:	4140      	adcs	r0, r0
1001b00a:	eb41 0101 	adc.w	r1, r1, r1
1001b00e:	3c01      	subs	r4, #1
1001b010:	bf28      	it	cs
1001b012:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
1001b016:	d2e9      	bcs.n	1001afec <__adddf3+0x10c>
1001b018:	f091 0f00 	teq	r1, #0
1001b01c:	bf04      	itt	eq
1001b01e:	4601      	moveq	r1, r0
1001b020:	2000      	moveq	r0, #0
1001b022:	fab1 f381 	clz	r3, r1
1001b026:	bf08      	it	eq
1001b028:	3320      	addeq	r3, #32
1001b02a:	f1a3 030b 	sub.w	r3, r3, #11
1001b02e:	f1b3 0220 	subs.w	r2, r3, #32
1001b032:	da0c      	bge.n	1001b04e <__adddf3+0x16e>
1001b034:	320c      	adds	r2, #12
1001b036:	dd08      	ble.n	1001b04a <__adddf3+0x16a>
1001b038:	f102 0c14 	add.w	ip, r2, #20
1001b03c:	f1c2 020c 	rsb	r2, r2, #12
1001b040:	fa01 f00c 	lsl.w	r0, r1, ip
1001b044:	fa21 f102 	lsr.w	r1, r1, r2
1001b048:	e00c      	b.n	1001b064 <__adddf3+0x184>
1001b04a:	f102 0214 	add.w	r2, r2, #20
1001b04e:	bfd8      	it	le
1001b050:	f1c2 0c20 	rsble	ip, r2, #32
1001b054:	fa01 f102 	lsl.w	r1, r1, r2
1001b058:	fa20 fc0c 	lsr.w	ip, r0, ip
1001b05c:	bfdc      	itt	le
1001b05e:	ea41 010c 	orrle.w	r1, r1, ip
1001b062:	4090      	lslle	r0, r2
1001b064:	1ae4      	subs	r4, r4, r3
1001b066:	bfa2      	ittt	ge
1001b068:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1001b06c:	4329      	orrge	r1, r5
1001b06e:	bd30      	popge	{r4, r5, pc}
1001b070:	ea6f 0404 	mvn.w	r4, r4
1001b074:	3c1f      	subs	r4, #31
1001b076:	da1c      	bge.n	1001b0b2 <__adddf3+0x1d2>
1001b078:	340c      	adds	r4, #12
1001b07a:	dc0e      	bgt.n	1001b09a <__adddf3+0x1ba>
1001b07c:	f104 0414 	add.w	r4, r4, #20
1001b080:	f1c4 0220 	rsb	r2, r4, #32
1001b084:	fa20 f004 	lsr.w	r0, r0, r4
1001b088:	fa01 f302 	lsl.w	r3, r1, r2
1001b08c:	ea40 0003 	orr.w	r0, r0, r3
1001b090:	fa21 f304 	lsr.w	r3, r1, r4
1001b094:	ea45 0103 	orr.w	r1, r5, r3
1001b098:	bd30      	pop	{r4, r5, pc}
1001b09a:	f1c4 040c 	rsb	r4, r4, #12
1001b09e:	f1c4 0220 	rsb	r2, r4, #32
1001b0a2:	fa20 f002 	lsr.w	r0, r0, r2
1001b0a6:	fa01 f304 	lsl.w	r3, r1, r4
1001b0aa:	ea40 0003 	orr.w	r0, r0, r3
1001b0ae:	4629      	mov	r1, r5
1001b0b0:	bd30      	pop	{r4, r5, pc}
1001b0b2:	fa21 f004 	lsr.w	r0, r1, r4
1001b0b6:	4629      	mov	r1, r5
1001b0b8:	bd30      	pop	{r4, r5, pc}
1001b0ba:	f094 0f00 	teq	r4, #0
1001b0be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
1001b0c2:	bf06      	itte	eq
1001b0c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
1001b0c8:	3401      	addeq	r4, #1
1001b0ca:	3d01      	subne	r5, #1
1001b0cc:	e74e      	b.n	1001af6c <__adddf3+0x8c>
1001b0ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1001b0d2:	bf18      	it	ne
1001b0d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1001b0d8:	d029      	beq.n	1001b12e <__adddf3+0x24e>
1001b0da:	ea94 0f05 	teq	r4, r5
1001b0de:	bf08      	it	eq
1001b0e0:	ea90 0f02 	teqeq	r0, r2
1001b0e4:	d005      	beq.n	1001b0f2 <__adddf3+0x212>
1001b0e6:	ea54 0c00 	orrs.w	ip, r4, r0
1001b0ea:	bf04      	itt	eq
1001b0ec:	4619      	moveq	r1, r3
1001b0ee:	4610      	moveq	r0, r2
1001b0f0:	bd30      	pop	{r4, r5, pc}
1001b0f2:	ea91 0f03 	teq	r1, r3
1001b0f6:	bf1e      	ittt	ne
1001b0f8:	2100      	movne	r1, #0
1001b0fa:	2000      	movne	r0, #0
1001b0fc:	bd30      	popne	{r4, r5, pc}
1001b0fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1001b102:	d105      	bne.n	1001b110 <__adddf3+0x230>
1001b104:	0040      	lsls	r0, r0, #1
1001b106:	4149      	adcs	r1, r1
1001b108:	bf28      	it	cs
1001b10a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
1001b10e:	bd30      	pop	{r4, r5, pc}
1001b110:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
1001b114:	bf3c      	itt	cc
1001b116:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
1001b11a:	bd30      	popcc	{r4, r5, pc}
1001b11c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
1001b120:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
1001b124:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
1001b128:	f04f 0000 	mov.w	r0, #0
1001b12c:	bd30      	pop	{r4, r5, pc}
1001b12e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1001b132:	bf1a      	itte	ne
1001b134:	4619      	movne	r1, r3
1001b136:	4610      	movne	r0, r2
1001b138:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1001b13c:	bf1c      	itt	ne
1001b13e:	460b      	movne	r3, r1
1001b140:	4602      	movne	r2, r0
1001b142:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1001b146:	bf06      	itte	eq
1001b148:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1001b14c:	ea91 0f03 	teqeq	r1, r3
1001b150:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
1001b154:	bd30      	pop	{r4, r5, pc}
1001b156:	bf00      	nop

1001b158 <__aeabi_ui2d>:
1001b158:	f090 0f00 	teq	r0, #0
1001b15c:	bf04      	itt	eq
1001b15e:	2100      	moveq	r1, #0
1001b160:	4770      	bxeq	lr
1001b162:	b530      	push	{r4, r5, lr}
1001b164:	f44f 6480 	mov.w	r4, #1024	@ 0x400
1001b168:	f104 0432 	add.w	r4, r4, #50	@ 0x32
1001b16c:	f04f 0500 	mov.w	r5, #0
1001b170:	f04f 0100 	mov.w	r1, #0
1001b174:	e750      	b.n	1001b018 <__adddf3+0x138>
1001b176:	bf00      	nop

1001b178 <__aeabi_i2d>:
1001b178:	f090 0f00 	teq	r0, #0
1001b17c:	bf04      	itt	eq
1001b17e:	2100      	moveq	r1, #0
1001b180:	4770      	bxeq	lr
1001b182:	b530      	push	{r4, r5, lr}
1001b184:	f44f 6480 	mov.w	r4, #1024	@ 0x400
1001b188:	f104 0432 	add.w	r4, r4, #50	@ 0x32
1001b18c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
1001b190:	bf48      	it	mi
1001b192:	4240      	negmi	r0, r0
1001b194:	f04f 0100 	mov.w	r1, #0
1001b198:	e73e      	b.n	1001b018 <__adddf3+0x138>
1001b19a:	bf00      	nop

1001b19c <__aeabi_f2d>:
1001b19c:	0042      	lsls	r2, r0, #1
1001b19e:	ea4f 01e2 	mov.w	r1, r2, asr #3
1001b1a2:	ea4f 0131 	mov.w	r1, r1, rrx
1001b1a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
1001b1aa:	bf1f      	itttt	ne
1001b1ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
1001b1b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
1001b1b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
1001b1b8:	4770      	bxne	lr
1001b1ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
1001b1be:	bf08      	it	eq
1001b1c0:	4770      	bxeq	lr
1001b1c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
1001b1c6:	bf04      	itt	eq
1001b1c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
1001b1cc:	4770      	bxeq	lr
1001b1ce:	b530      	push	{r4, r5, lr}
1001b1d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
1001b1d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
1001b1d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
1001b1dc:	e71c      	b.n	1001b018 <__adddf3+0x138>
1001b1de:	bf00      	nop

1001b1e0 <__aeabi_ul2d>:
1001b1e0:	ea50 0201 	orrs.w	r2, r0, r1
1001b1e4:	bf08      	it	eq
1001b1e6:	4770      	bxeq	lr
1001b1e8:	b530      	push	{r4, r5, lr}
1001b1ea:	f04f 0500 	mov.w	r5, #0
1001b1ee:	e00a      	b.n	1001b206 <__aeabi_l2d+0x16>

1001b1f0 <__aeabi_l2d>:
1001b1f0:	ea50 0201 	orrs.w	r2, r0, r1
1001b1f4:	bf08      	it	eq
1001b1f6:	4770      	bxeq	lr
1001b1f8:	b530      	push	{r4, r5, lr}
1001b1fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
1001b1fe:	d502      	bpl.n	1001b206 <__aeabi_l2d+0x16>
1001b200:	4240      	negs	r0, r0
1001b202:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1001b206:	f44f 6480 	mov.w	r4, #1024	@ 0x400
1001b20a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
1001b20e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1001b212:	f43f aed8 	beq.w	1001afc6 <__adddf3+0xe6>
1001b216:	f04f 0203 	mov.w	r2, #3
1001b21a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1001b21e:	bf18      	it	ne
1001b220:	3203      	addne	r2, #3
1001b222:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1001b226:	bf18      	it	ne
1001b228:	3203      	addne	r2, #3
1001b22a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1001b22e:	f1c2 0320 	rsb	r3, r2, #32
1001b232:	fa00 fc03 	lsl.w	ip, r0, r3
1001b236:	fa20 f002 	lsr.w	r0, r0, r2
1001b23a:	fa01 fe03 	lsl.w	lr, r1, r3
1001b23e:	ea40 000e 	orr.w	r0, r0, lr
1001b242:	fa21 f102 	lsr.w	r1, r1, r2
1001b246:	4414      	add	r4, r2
1001b248:	e6bd      	b.n	1001afc6 <__adddf3+0xe6>
1001b24a:	bf00      	nop

1001b24c <__aeabi_dmul>:
1001b24c:	b570      	push	{r4, r5, r6, lr}
1001b24e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
1001b252:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
1001b256:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1001b25a:	bf1d      	ittte	ne
1001b25c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1001b260:	ea94 0f0c 	teqne	r4, ip
1001b264:	ea95 0f0c 	teqne	r5, ip
1001b268:	f000 f8de 	bleq	1001b428 <__aeabi_dmul+0x1dc>
1001b26c:	442c      	add	r4, r5
1001b26e:	ea81 0603 	eor.w	r6, r1, r3
1001b272:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1001b276:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1001b27a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1001b27e:	bf18      	it	ne
1001b280:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1001b284:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
1001b288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1001b28c:	d038      	beq.n	1001b300 <__aeabi_dmul+0xb4>
1001b28e:	fba0 ce02 	umull	ip, lr, r0, r2
1001b292:	f04f 0500 	mov.w	r5, #0
1001b296:	fbe1 e502 	umlal	lr, r5, r1, r2
1001b29a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
1001b29e:	fbe0 e503 	umlal	lr, r5, r0, r3
1001b2a2:	f04f 0600 	mov.w	r6, #0
1001b2a6:	fbe1 5603 	umlal	r5, r6, r1, r3
1001b2aa:	f09c 0f00 	teq	ip, #0
1001b2ae:	bf18      	it	ne
1001b2b0:	f04e 0e01 	orrne.w	lr, lr, #1
1001b2b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
1001b2b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
1001b2bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
1001b2c0:	d204      	bcs.n	1001b2cc <__aeabi_dmul+0x80>
1001b2c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1001b2c6:	416d      	adcs	r5, r5
1001b2c8:	eb46 0606 	adc.w	r6, r6, r6
1001b2cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1001b2d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1001b2d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1001b2d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1001b2dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1001b2e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
1001b2e4:	bf88      	it	hi
1001b2e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
1001b2ea:	d81e      	bhi.n	1001b32a <__aeabi_dmul+0xde>
1001b2ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
1001b2f0:	bf08      	it	eq
1001b2f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1001b2f6:	f150 0000 	adcs.w	r0, r0, #0
1001b2fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1001b2fe:	bd70      	pop	{r4, r5, r6, pc}
1001b300:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
1001b304:	ea46 0101 	orr.w	r1, r6, r1
1001b308:	ea40 0002 	orr.w	r0, r0, r2
1001b30c:	ea81 0103 	eor.w	r1, r1, r3
1001b310:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1001b314:	bfc2      	ittt	gt
1001b316:	ebd4 050c 	rsbsgt	r5, r4, ip
1001b31a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1001b31e:	bd70      	popgt	{r4, r5, r6, pc}
1001b320:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
1001b324:	f04f 0e00 	mov.w	lr, #0
1001b328:	3c01      	subs	r4, #1
1001b32a:	f300 80ab 	bgt.w	1001b484 <__aeabi_dmul+0x238>
1001b32e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
1001b332:	bfde      	ittt	le
1001b334:	2000      	movle	r0, #0
1001b336:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
1001b33a:	bd70      	pople	{r4, r5, r6, pc}
1001b33c:	f1c4 0400 	rsb	r4, r4, #0
1001b340:	3c20      	subs	r4, #32
1001b342:	da35      	bge.n	1001b3b0 <__aeabi_dmul+0x164>
1001b344:	340c      	adds	r4, #12
1001b346:	dc1b      	bgt.n	1001b380 <__aeabi_dmul+0x134>
1001b348:	f104 0414 	add.w	r4, r4, #20
1001b34c:	f1c4 0520 	rsb	r5, r4, #32
1001b350:	fa00 f305 	lsl.w	r3, r0, r5
1001b354:	fa20 f004 	lsr.w	r0, r0, r4
1001b358:	fa01 f205 	lsl.w	r2, r1, r5
1001b35c:	ea40 0002 	orr.w	r0, r0, r2
1001b360:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
1001b364:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
1001b368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1001b36c:	fa21 f604 	lsr.w	r6, r1, r4
1001b370:	eb42 0106 	adc.w	r1, r2, r6
1001b374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1001b378:	bf08      	it	eq
1001b37a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1001b37e:	bd70      	pop	{r4, r5, r6, pc}
1001b380:	f1c4 040c 	rsb	r4, r4, #12
1001b384:	f1c4 0520 	rsb	r5, r4, #32
1001b388:	fa00 f304 	lsl.w	r3, r0, r4
1001b38c:	fa20 f005 	lsr.w	r0, r0, r5
1001b390:	fa01 f204 	lsl.w	r2, r1, r4
1001b394:	ea40 0002 	orr.w	r0, r0, r2
1001b398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
1001b39c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1001b3a0:	f141 0100 	adc.w	r1, r1, #0
1001b3a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1001b3a8:	bf08      	it	eq
1001b3aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1001b3ae:	bd70      	pop	{r4, r5, r6, pc}
1001b3b0:	f1c4 0520 	rsb	r5, r4, #32
1001b3b4:	fa00 f205 	lsl.w	r2, r0, r5
1001b3b8:	ea4e 0e02 	orr.w	lr, lr, r2
1001b3bc:	fa20 f304 	lsr.w	r3, r0, r4
1001b3c0:	fa01 f205 	lsl.w	r2, r1, r5
1001b3c4:	ea43 0302 	orr.w	r3, r3, r2
1001b3c8:	fa21 f004 	lsr.w	r0, r1, r4
1001b3cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
1001b3d0:	fa21 f204 	lsr.w	r2, r1, r4
1001b3d4:	ea20 0002 	bic.w	r0, r0, r2
1001b3d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1001b3dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1001b3e0:	bf08      	it	eq
1001b3e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1001b3e6:	bd70      	pop	{r4, r5, r6, pc}
1001b3e8:	f094 0f00 	teq	r4, #0
1001b3ec:	d10f      	bne.n	1001b40e <__aeabi_dmul+0x1c2>
1001b3ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
1001b3f2:	0040      	lsls	r0, r0, #1
1001b3f4:	eb41 0101 	adc.w	r1, r1, r1
1001b3f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
1001b3fc:	bf08      	it	eq
1001b3fe:	3c01      	subeq	r4, #1
1001b400:	d0f7      	beq.n	1001b3f2 <__aeabi_dmul+0x1a6>
1001b402:	ea41 0106 	orr.w	r1, r1, r6
1001b406:	f095 0f00 	teq	r5, #0
1001b40a:	bf18      	it	ne
1001b40c:	4770      	bxne	lr
1001b40e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
1001b412:	0052      	lsls	r2, r2, #1
1001b414:	eb43 0303 	adc.w	r3, r3, r3
1001b418:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
1001b41c:	bf08      	it	eq
1001b41e:	3d01      	subeq	r5, #1
1001b420:	d0f7      	beq.n	1001b412 <__aeabi_dmul+0x1c6>
1001b422:	ea43 0306 	orr.w	r3, r3, r6
1001b426:	4770      	bx	lr
1001b428:	ea94 0f0c 	teq	r4, ip
1001b42c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1001b430:	bf18      	it	ne
1001b432:	ea95 0f0c 	teqne	r5, ip
1001b436:	d00c      	beq.n	1001b452 <__aeabi_dmul+0x206>
1001b438:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1001b43c:	bf18      	it	ne
1001b43e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1001b442:	d1d1      	bne.n	1001b3e8 <__aeabi_dmul+0x19c>
1001b444:	ea81 0103 	eor.w	r1, r1, r3
1001b448:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
1001b44c:	f04f 0000 	mov.w	r0, #0
1001b450:	bd70      	pop	{r4, r5, r6, pc}
1001b452:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1001b456:	bf06      	itte	eq
1001b458:	4610      	moveq	r0, r2
1001b45a:	4619      	moveq	r1, r3
1001b45c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1001b460:	d019      	beq.n	1001b496 <__aeabi_dmul+0x24a>
1001b462:	ea94 0f0c 	teq	r4, ip
1001b466:	d102      	bne.n	1001b46e <__aeabi_dmul+0x222>
1001b468:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1001b46c:	d113      	bne.n	1001b496 <__aeabi_dmul+0x24a>
1001b46e:	ea95 0f0c 	teq	r5, ip
1001b472:	d105      	bne.n	1001b480 <__aeabi_dmul+0x234>
1001b474:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1001b478:	bf1c      	itt	ne
1001b47a:	4610      	movne	r0, r2
1001b47c:	4619      	movne	r1, r3
1001b47e:	d10a      	bne.n	1001b496 <__aeabi_dmul+0x24a>
1001b480:	ea81 0103 	eor.w	r1, r1, r3
1001b484:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
1001b488:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
1001b48c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
1001b490:	f04f 0000 	mov.w	r0, #0
1001b494:	bd70      	pop	{r4, r5, r6, pc}
1001b496:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
1001b49a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
1001b49e:	bd70      	pop	{r4, r5, r6, pc}

1001b4a0 <__aeabi_ddiv>:
1001b4a0:	b570      	push	{r4, r5, r6, lr}
1001b4a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
1001b4a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
1001b4aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1001b4ae:	bf1d      	ittte	ne
1001b4b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1001b4b4:	ea94 0f0c 	teqne	r4, ip
1001b4b8:	ea95 0f0c 	teqne	r5, ip
1001b4bc:	f000 f8a7 	bleq	1001b60e <__aeabi_ddiv+0x16e>
1001b4c0:	eba4 0405 	sub.w	r4, r4, r5
1001b4c4:	ea81 0e03 	eor.w	lr, r1, r3
1001b4c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1001b4cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
1001b4d0:	f000 8088 	beq.w	1001b5e4 <__aeabi_ddiv+0x144>
1001b4d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1001b4d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
1001b4dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1001b4e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1001b4e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
1001b4e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1001b4ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1001b4f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
1001b4f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
1001b4f8:	429d      	cmp	r5, r3
1001b4fa:	bf08      	it	eq
1001b4fc:	4296      	cmpeq	r6, r2
1001b4fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
1001b502:	f504 7440 	add.w	r4, r4, #768	@ 0x300
1001b506:	d202      	bcs.n	1001b50e <__aeabi_ddiv+0x6e>
1001b508:	085b      	lsrs	r3, r3, #1
1001b50a:	ea4f 0232 	mov.w	r2, r2, rrx
1001b50e:	1ab6      	subs	r6, r6, r2
1001b510:	eb65 0503 	sbc.w	r5, r5, r3
1001b514:	085b      	lsrs	r3, r3, #1
1001b516:	ea4f 0232 	mov.w	r2, r2, rrx
1001b51a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
1001b51e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
1001b522:	ebb6 0e02 	subs.w	lr, r6, r2
1001b526:	eb75 0e03 	sbcs.w	lr, r5, r3
1001b52a:	bf22      	ittt	cs
1001b52c:	1ab6      	subcs	r6, r6, r2
1001b52e:	4675      	movcs	r5, lr
1001b530:	ea40 000c 	orrcs.w	r0, r0, ip
1001b534:	085b      	lsrs	r3, r3, #1
1001b536:	ea4f 0232 	mov.w	r2, r2, rrx
1001b53a:	ebb6 0e02 	subs.w	lr, r6, r2
1001b53e:	eb75 0e03 	sbcs.w	lr, r5, r3
1001b542:	bf22      	ittt	cs
1001b544:	1ab6      	subcs	r6, r6, r2
1001b546:	4675      	movcs	r5, lr
1001b548:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1001b54c:	085b      	lsrs	r3, r3, #1
1001b54e:	ea4f 0232 	mov.w	r2, r2, rrx
1001b552:	ebb6 0e02 	subs.w	lr, r6, r2
1001b556:	eb75 0e03 	sbcs.w	lr, r5, r3
1001b55a:	bf22      	ittt	cs
1001b55c:	1ab6      	subcs	r6, r6, r2
1001b55e:	4675      	movcs	r5, lr
1001b560:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1001b564:	085b      	lsrs	r3, r3, #1
1001b566:	ea4f 0232 	mov.w	r2, r2, rrx
1001b56a:	ebb6 0e02 	subs.w	lr, r6, r2
1001b56e:	eb75 0e03 	sbcs.w	lr, r5, r3
1001b572:	bf22      	ittt	cs
1001b574:	1ab6      	subcs	r6, r6, r2
1001b576:	4675      	movcs	r5, lr
1001b578:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1001b57c:	ea55 0e06 	orrs.w	lr, r5, r6
1001b580:	d018      	beq.n	1001b5b4 <__aeabi_ddiv+0x114>
1001b582:	ea4f 1505 	mov.w	r5, r5, lsl #4
1001b586:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1001b58a:	ea4f 1606 	mov.w	r6, r6, lsl #4
1001b58e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1001b592:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1001b596:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1001b59a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1001b59e:	d1c0      	bne.n	1001b522 <__aeabi_ddiv+0x82>
1001b5a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
1001b5a4:	d10b      	bne.n	1001b5be <__aeabi_ddiv+0x11e>
1001b5a6:	ea41 0100 	orr.w	r1, r1, r0
1001b5aa:	f04f 0000 	mov.w	r0, #0
1001b5ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
1001b5b2:	e7b6      	b.n	1001b522 <__aeabi_ddiv+0x82>
1001b5b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
1001b5b8:	bf04      	itt	eq
1001b5ba:	4301      	orreq	r1, r0
1001b5bc:	2000      	moveq	r0, #0
1001b5be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
1001b5c2:	bf88      	it	hi
1001b5c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
1001b5c8:	f63f aeaf 	bhi.w	1001b32a <__aeabi_dmul+0xde>
1001b5cc:	ebb5 0c03 	subs.w	ip, r5, r3
1001b5d0:	bf04      	itt	eq
1001b5d2:	ebb6 0c02 	subseq.w	ip, r6, r2
1001b5d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1001b5da:	f150 0000 	adcs.w	r0, r0, #0
1001b5de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1001b5e2:	bd70      	pop	{r4, r5, r6, pc}
1001b5e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
1001b5e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1001b5ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1001b5f0:	bfc2      	ittt	gt
1001b5f2:	ebd4 050c 	rsbsgt	r5, r4, ip
1001b5f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1001b5fa:	bd70      	popgt	{r4, r5, r6, pc}
1001b5fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
1001b600:	f04f 0e00 	mov.w	lr, #0
1001b604:	3c01      	subs	r4, #1
1001b606:	e690      	b.n	1001b32a <__aeabi_dmul+0xde>
1001b608:	ea45 0e06 	orr.w	lr, r5, r6
1001b60c:	e68d      	b.n	1001b32a <__aeabi_dmul+0xde>
1001b60e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1001b612:	ea94 0f0c 	teq	r4, ip
1001b616:	bf08      	it	eq
1001b618:	ea95 0f0c 	teqeq	r5, ip
1001b61c:	f43f af3b 	beq.w	1001b496 <__aeabi_dmul+0x24a>
1001b620:	ea94 0f0c 	teq	r4, ip
1001b624:	d10a      	bne.n	1001b63c <__aeabi_ddiv+0x19c>
1001b626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1001b62a:	f47f af34 	bne.w	1001b496 <__aeabi_dmul+0x24a>
1001b62e:	ea95 0f0c 	teq	r5, ip
1001b632:	f47f af25 	bne.w	1001b480 <__aeabi_dmul+0x234>
1001b636:	4610      	mov	r0, r2
1001b638:	4619      	mov	r1, r3
1001b63a:	e72c      	b.n	1001b496 <__aeabi_dmul+0x24a>
1001b63c:	ea95 0f0c 	teq	r5, ip
1001b640:	d106      	bne.n	1001b650 <__aeabi_ddiv+0x1b0>
1001b642:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1001b646:	f43f aefd 	beq.w	1001b444 <__aeabi_dmul+0x1f8>
1001b64a:	4610      	mov	r0, r2
1001b64c:	4619      	mov	r1, r3
1001b64e:	e722      	b.n	1001b496 <__aeabi_dmul+0x24a>
1001b650:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1001b654:	bf18      	it	ne
1001b656:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1001b65a:	f47f aec5 	bne.w	1001b3e8 <__aeabi_dmul+0x19c>
1001b65e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1001b662:	f47f af0d 	bne.w	1001b480 <__aeabi_dmul+0x234>
1001b666:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1001b66a:	f47f aeeb 	bne.w	1001b444 <__aeabi_dmul+0x1f8>
1001b66e:	e712      	b.n	1001b496 <__aeabi_dmul+0x24a>

1001b670 <__gedf2>:
1001b670:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
1001b674:	e006      	b.n	1001b684 <__cmpdf2+0x4>
1001b676:	bf00      	nop

1001b678 <__ledf2>:
1001b678:	f04f 0c01 	mov.w	ip, #1
1001b67c:	e002      	b.n	1001b684 <__cmpdf2+0x4>
1001b67e:	bf00      	nop

1001b680 <__cmpdf2>:
1001b680:	f04f 0c01 	mov.w	ip, #1
1001b684:	f84d cd04 	str.w	ip, [sp, #-4]!
1001b688:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1001b68c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1001b690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1001b694:	bf18      	it	ne
1001b696:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1001b69a:	d01b      	beq.n	1001b6d4 <__cmpdf2+0x54>
1001b69c:	b001      	add	sp, #4
1001b69e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1001b6a2:	bf0c      	ite	eq
1001b6a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1001b6a8:	ea91 0f03 	teqne	r1, r3
1001b6ac:	bf02      	ittt	eq
1001b6ae:	ea90 0f02 	teqeq	r0, r2
1001b6b2:	2000      	moveq	r0, #0
1001b6b4:	4770      	bxeq	lr
1001b6b6:	f110 0f00 	cmn.w	r0, #0
1001b6ba:	ea91 0f03 	teq	r1, r3
1001b6be:	bf58      	it	pl
1001b6c0:	4299      	cmppl	r1, r3
1001b6c2:	bf08      	it	eq
1001b6c4:	4290      	cmpeq	r0, r2
1001b6c6:	bf2c      	ite	cs
1001b6c8:	17d8      	asrcs	r0, r3, #31
1001b6ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1001b6ce:	f040 0001 	orr.w	r0, r0, #1
1001b6d2:	4770      	bx	lr
1001b6d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1001b6d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1001b6dc:	d102      	bne.n	1001b6e4 <__cmpdf2+0x64>
1001b6de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1001b6e2:	d107      	bne.n	1001b6f4 <__cmpdf2+0x74>
1001b6e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1001b6e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1001b6ec:	d1d6      	bne.n	1001b69c <__cmpdf2+0x1c>
1001b6ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1001b6f2:	d0d3      	beq.n	1001b69c <__cmpdf2+0x1c>
1001b6f4:	f85d 0b04 	ldr.w	r0, [sp], #4
1001b6f8:	4770      	bx	lr
1001b6fa:	bf00      	nop

1001b6fc <__aeabi_cdrcmple>:
1001b6fc:	4684      	mov	ip, r0
1001b6fe:	4610      	mov	r0, r2
1001b700:	4662      	mov	r2, ip
1001b702:	468c      	mov	ip, r1
1001b704:	4619      	mov	r1, r3
1001b706:	4663      	mov	r3, ip
1001b708:	e000      	b.n	1001b70c <__aeabi_cdcmpeq>
1001b70a:	bf00      	nop

1001b70c <__aeabi_cdcmpeq>:
1001b70c:	b501      	push	{r0, lr}
1001b70e:	f7ff ffb7 	bl	1001b680 <__cmpdf2>
1001b712:	2800      	cmp	r0, #0
1001b714:	bf48      	it	mi
1001b716:	f110 0f00 	cmnmi.w	r0, #0
1001b71a:	bd01      	pop	{r0, pc}

1001b71c <__aeabi_dcmpeq>:
1001b71c:	f84d ed08 	str.w	lr, [sp, #-8]!
1001b720:	f7ff fff4 	bl	1001b70c <__aeabi_cdcmpeq>
1001b724:	bf0c      	ite	eq
1001b726:	2001      	moveq	r0, #1
1001b728:	2000      	movne	r0, #0
1001b72a:	f85d fb08 	ldr.w	pc, [sp], #8
1001b72e:	bf00      	nop

1001b730 <__aeabi_dcmplt>:
1001b730:	f84d ed08 	str.w	lr, [sp, #-8]!
1001b734:	f7ff ffea 	bl	1001b70c <__aeabi_cdcmpeq>
1001b738:	bf34      	ite	cc
1001b73a:	2001      	movcc	r0, #1
1001b73c:	2000      	movcs	r0, #0
1001b73e:	f85d fb08 	ldr.w	pc, [sp], #8
1001b742:	bf00      	nop

1001b744 <__aeabi_dcmple>:
1001b744:	f84d ed08 	str.w	lr, [sp, #-8]!
1001b748:	f7ff ffe0 	bl	1001b70c <__aeabi_cdcmpeq>
1001b74c:	bf94      	ite	ls
1001b74e:	2001      	movls	r0, #1
1001b750:	2000      	movhi	r0, #0
1001b752:	f85d fb08 	ldr.w	pc, [sp], #8
1001b756:	bf00      	nop

1001b758 <__aeabi_dcmpge>:
1001b758:	f84d ed08 	str.w	lr, [sp, #-8]!
1001b75c:	f7ff ffce 	bl	1001b6fc <__aeabi_cdrcmple>
1001b760:	bf94      	ite	ls
1001b762:	2001      	movls	r0, #1
1001b764:	2000      	movhi	r0, #0
1001b766:	f85d fb08 	ldr.w	pc, [sp], #8
1001b76a:	bf00      	nop

1001b76c <__aeabi_dcmpgt>:
1001b76c:	f84d ed08 	str.w	lr, [sp, #-8]!
1001b770:	f7ff ffc4 	bl	1001b6fc <__aeabi_cdrcmple>
1001b774:	bf34      	ite	cc
1001b776:	2001      	movcc	r0, #1
1001b778:	2000      	movcs	r0, #0
1001b77a:	f85d fb08 	ldr.w	pc, [sp], #8
1001b77e:	bf00      	nop

1001b780 <__aeabi_dcmpun>:
1001b780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1001b784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1001b788:	d102      	bne.n	1001b790 <__aeabi_dcmpun+0x10>
1001b78a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1001b78e:	d10a      	bne.n	1001b7a6 <__aeabi_dcmpun+0x26>
1001b790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1001b794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1001b798:	d102      	bne.n	1001b7a0 <__aeabi_dcmpun+0x20>
1001b79a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1001b79e:	d102      	bne.n	1001b7a6 <__aeabi_dcmpun+0x26>
1001b7a0:	f04f 0000 	mov.w	r0, #0
1001b7a4:	4770      	bx	lr
1001b7a6:	f04f 0001 	mov.w	r0, #1
1001b7aa:	4770      	bx	lr

1001b7ac <__aeabi_d2iz>:
1001b7ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
1001b7b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
1001b7b4:	d215      	bcs.n	1001b7e2 <__aeabi_d2iz+0x36>
1001b7b6:	d511      	bpl.n	1001b7dc <__aeabi_d2iz+0x30>
1001b7b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
1001b7bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1001b7c0:	d912      	bls.n	1001b7e8 <__aeabi_d2iz+0x3c>
1001b7c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1001b7c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
1001b7ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1001b7ce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
1001b7d2:	fa23 f002 	lsr.w	r0, r3, r2
1001b7d6:	bf18      	it	ne
1001b7d8:	4240      	negne	r0, r0
1001b7da:	4770      	bx	lr
1001b7dc:	f04f 0000 	mov.w	r0, #0
1001b7e0:	4770      	bx	lr
1001b7e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1001b7e6:	d105      	bne.n	1001b7f4 <__aeabi_d2iz+0x48>
1001b7e8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
1001b7ec:	bf08      	it	eq
1001b7ee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
1001b7f2:	4770      	bx	lr
1001b7f4:	f04f 0000 	mov.w	r0, #0
1001b7f8:	4770      	bx	lr
1001b7fa:	bf00      	nop

1001b7fc <__aeabi_uldivmod>:
1001b7fc:	b953      	cbnz	r3, 1001b814 <__aeabi_uldivmod+0x18>
1001b7fe:	b94a      	cbnz	r2, 1001b814 <__aeabi_uldivmod+0x18>
1001b800:	2900      	cmp	r1, #0
1001b802:	bf08      	it	eq
1001b804:	2800      	cmpeq	r0, #0
1001b806:	bf1c      	itt	ne
1001b808:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
1001b80c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
1001b810:	f000 b96a 	b.w	1001bae8 <__aeabi_idiv0>
1001b814:	f1ad 0c08 	sub.w	ip, sp, #8
1001b818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1001b81c:	f000 f806 	bl	1001b82c <__udivmoddi4>
1001b820:	f8dd e004 	ldr.w	lr, [sp, #4]
1001b824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1001b828:	b004      	add	sp, #16
1001b82a:	4770      	bx	lr

1001b82c <__udivmoddi4>:
1001b82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1001b830:	9d08      	ldr	r5, [sp, #32]
1001b832:	460c      	mov	r4, r1
1001b834:	2b00      	cmp	r3, #0
1001b836:	d14e      	bne.n	1001b8d6 <__udivmoddi4+0xaa>
1001b838:	4694      	mov	ip, r2
1001b83a:	458c      	cmp	ip, r1
1001b83c:	4686      	mov	lr, r0
1001b83e:	fab2 f282 	clz	r2, r2
1001b842:	d962      	bls.n	1001b90a <__udivmoddi4+0xde>
1001b844:	b14a      	cbz	r2, 1001b85a <__udivmoddi4+0x2e>
1001b846:	f1c2 0320 	rsb	r3, r2, #32
1001b84a:	4091      	lsls	r1, r2
1001b84c:	fa20 f303 	lsr.w	r3, r0, r3
1001b850:	fa0c fc02 	lsl.w	ip, ip, r2
1001b854:	4319      	orrs	r1, r3
1001b856:	fa00 fe02 	lsl.w	lr, r0, r2
1001b85a:	ea4f 471c 	mov.w	r7, ip, lsr #16
1001b85e:	fa1f f68c 	uxth.w	r6, ip
1001b862:	fbb1 f4f7 	udiv	r4, r1, r7
1001b866:	ea4f 431e 	mov.w	r3, lr, lsr #16
1001b86a:	fb07 1114 	mls	r1, r7, r4, r1
1001b86e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1001b872:	fb04 f106 	mul.w	r1, r4, r6
1001b876:	4299      	cmp	r1, r3
1001b878:	d90a      	bls.n	1001b890 <__udivmoddi4+0x64>
1001b87a:	eb1c 0303 	adds.w	r3, ip, r3
1001b87e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
1001b882:	f080 8112 	bcs.w	1001baaa <__udivmoddi4+0x27e>
1001b886:	4299      	cmp	r1, r3
1001b888:	f240 810f 	bls.w	1001baaa <__udivmoddi4+0x27e>
1001b88c:	3c02      	subs	r4, #2
1001b88e:	4463      	add	r3, ip
1001b890:	1a59      	subs	r1, r3, r1
1001b892:	fa1f f38e 	uxth.w	r3, lr
1001b896:	fbb1 f0f7 	udiv	r0, r1, r7
1001b89a:	fb07 1110 	mls	r1, r7, r0, r1
1001b89e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1001b8a2:	fb00 f606 	mul.w	r6, r0, r6
1001b8a6:	429e      	cmp	r6, r3
1001b8a8:	d90a      	bls.n	1001b8c0 <__udivmoddi4+0x94>
1001b8aa:	eb1c 0303 	adds.w	r3, ip, r3
1001b8ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
1001b8b2:	f080 80fc 	bcs.w	1001baae <__udivmoddi4+0x282>
1001b8b6:	429e      	cmp	r6, r3
1001b8b8:	f240 80f9 	bls.w	1001baae <__udivmoddi4+0x282>
1001b8bc:	4463      	add	r3, ip
1001b8be:	3802      	subs	r0, #2
1001b8c0:	1b9b      	subs	r3, r3, r6
1001b8c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
1001b8c6:	2100      	movs	r1, #0
1001b8c8:	b11d      	cbz	r5, 1001b8d2 <__udivmoddi4+0xa6>
1001b8ca:	40d3      	lsrs	r3, r2
1001b8cc:	2200      	movs	r2, #0
1001b8ce:	e9c5 3200 	strd	r3, r2, [r5]
1001b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1001b8d6:	428b      	cmp	r3, r1
1001b8d8:	d905      	bls.n	1001b8e6 <__udivmoddi4+0xba>
1001b8da:	b10d      	cbz	r5, 1001b8e0 <__udivmoddi4+0xb4>
1001b8dc:	e9c5 0100 	strd	r0, r1, [r5]
1001b8e0:	2100      	movs	r1, #0
1001b8e2:	4608      	mov	r0, r1
1001b8e4:	e7f5      	b.n	1001b8d2 <__udivmoddi4+0xa6>
1001b8e6:	fab3 f183 	clz	r1, r3
1001b8ea:	2900      	cmp	r1, #0
1001b8ec:	d146      	bne.n	1001b97c <__udivmoddi4+0x150>
1001b8ee:	42a3      	cmp	r3, r4
1001b8f0:	d302      	bcc.n	1001b8f8 <__udivmoddi4+0xcc>
1001b8f2:	4290      	cmp	r0, r2
1001b8f4:	f0c0 80f0 	bcc.w	1001bad8 <__udivmoddi4+0x2ac>
1001b8f8:	1a86      	subs	r6, r0, r2
1001b8fa:	eb64 0303 	sbc.w	r3, r4, r3
1001b8fe:	2001      	movs	r0, #1
1001b900:	2d00      	cmp	r5, #0
1001b902:	d0e6      	beq.n	1001b8d2 <__udivmoddi4+0xa6>
1001b904:	e9c5 6300 	strd	r6, r3, [r5]
1001b908:	e7e3      	b.n	1001b8d2 <__udivmoddi4+0xa6>
1001b90a:	2a00      	cmp	r2, #0
1001b90c:	f040 8090 	bne.w	1001ba30 <__udivmoddi4+0x204>
1001b910:	eba1 040c 	sub.w	r4, r1, ip
1001b914:	ea4f 481c 	mov.w	r8, ip, lsr #16
1001b918:	fa1f f78c 	uxth.w	r7, ip
1001b91c:	2101      	movs	r1, #1
1001b91e:	fbb4 f6f8 	udiv	r6, r4, r8
1001b922:	ea4f 431e 	mov.w	r3, lr, lsr #16
1001b926:	fb08 4416 	mls	r4, r8, r6, r4
1001b92a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1001b92e:	fb07 f006 	mul.w	r0, r7, r6
1001b932:	4298      	cmp	r0, r3
1001b934:	d908      	bls.n	1001b948 <__udivmoddi4+0x11c>
1001b936:	eb1c 0303 	adds.w	r3, ip, r3
1001b93a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
1001b93e:	d202      	bcs.n	1001b946 <__udivmoddi4+0x11a>
1001b940:	4298      	cmp	r0, r3
1001b942:	f200 80cd 	bhi.w	1001bae0 <__udivmoddi4+0x2b4>
1001b946:	4626      	mov	r6, r4
1001b948:	1a1c      	subs	r4, r3, r0
1001b94a:	fa1f f38e 	uxth.w	r3, lr
1001b94e:	fbb4 f0f8 	udiv	r0, r4, r8
1001b952:	fb08 4410 	mls	r4, r8, r0, r4
1001b956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1001b95a:	fb00 f707 	mul.w	r7, r0, r7
1001b95e:	429f      	cmp	r7, r3
1001b960:	d908      	bls.n	1001b974 <__udivmoddi4+0x148>
1001b962:	eb1c 0303 	adds.w	r3, ip, r3
1001b966:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
1001b96a:	d202      	bcs.n	1001b972 <__udivmoddi4+0x146>
1001b96c:	429f      	cmp	r7, r3
1001b96e:	f200 80b0 	bhi.w	1001bad2 <__udivmoddi4+0x2a6>
1001b972:	4620      	mov	r0, r4
1001b974:	1bdb      	subs	r3, r3, r7
1001b976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1001b97a:	e7a5      	b.n	1001b8c8 <__udivmoddi4+0x9c>
1001b97c:	f1c1 0620 	rsb	r6, r1, #32
1001b980:	408b      	lsls	r3, r1
1001b982:	fa22 f706 	lsr.w	r7, r2, r6
1001b986:	431f      	orrs	r7, r3
1001b988:	fa20 fc06 	lsr.w	ip, r0, r6
1001b98c:	fa04 f301 	lsl.w	r3, r4, r1
1001b990:	ea43 030c 	orr.w	r3, r3, ip
1001b994:	40f4      	lsrs	r4, r6
1001b996:	fa00 f801 	lsl.w	r8, r0, r1
1001b99a:	0c38      	lsrs	r0, r7, #16
1001b99c:	ea4f 4913 	mov.w	r9, r3, lsr #16
1001b9a0:	fbb4 fef0 	udiv	lr, r4, r0
1001b9a4:	fa1f fc87 	uxth.w	ip, r7
1001b9a8:	fb00 441e 	mls	r4, r0, lr, r4
1001b9ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
1001b9b0:	fb0e f90c 	mul.w	r9, lr, ip
1001b9b4:	45a1      	cmp	r9, r4
1001b9b6:	fa02 f201 	lsl.w	r2, r2, r1
1001b9ba:	d90a      	bls.n	1001b9d2 <__udivmoddi4+0x1a6>
1001b9bc:	193c      	adds	r4, r7, r4
1001b9be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
1001b9c2:	f080 8084 	bcs.w	1001bace <__udivmoddi4+0x2a2>
1001b9c6:	45a1      	cmp	r9, r4
1001b9c8:	f240 8081 	bls.w	1001bace <__udivmoddi4+0x2a2>
1001b9cc:	f1ae 0e02 	sub.w	lr, lr, #2
1001b9d0:	443c      	add	r4, r7
1001b9d2:	eba4 0409 	sub.w	r4, r4, r9
1001b9d6:	fa1f f983 	uxth.w	r9, r3
1001b9da:	fbb4 f3f0 	udiv	r3, r4, r0
1001b9de:	fb00 4413 	mls	r4, r0, r3, r4
1001b9e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
1001b9e6:	fb03 fc0c 	mul.w	ip, r3, ip
1001b9ea:	45a4      	cmp	ip, r4
1001b9ec:	d907      	bls.n	1001b9fe <__udivmoddi4+0x1d2>
1001b9ee:	193c      	adds	r4, r7, r4
1001b9f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
1001b9f4:	d267      	bcs.n	1001bac6 <__udivmoddi4+0x29a>
1001b9f6:	45a4      	cmp	ip, r4
1001b9f8:	d965      	bls.n	1001bac6 <__udivmoddi4+0x29a>
1001b9fa:	3b02      	subs	r3, #2
1001b9fc:	443c      	add	r4, r7
1001b9fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
1001ba02:	fba0 9302 	umull	r9, r3, r0, r2
1001ba06:	eba4 040c 	sub.w	r4, r4, ip
1001ba0a:	429c      	cmp	r4, r3
1001ba0c:	46ce      	mov	lr, r9
1001ba0e:	469c      	mov	ip, r3
1001ba10:	d351      	bcc.n	1001bab6 <__udivmoddi4+0x28a>
1001ba12:	d04e      	beq.n	1001bab2 <__udivmoddi4+0x286>
1001ba14:	b155      	cbz	r5, 1001ba2c <__udivmoddi4+0x200>
1001ba16:	ebb8 030e 	subs.w	r3, r8, lr
1001ba1a:	eb64 040c 	sbc.w	r4, r4, ip
1001ba1e:	fa04 f606 	lsl.w	r6, r4, r6
1001ba22:	40cb      	lsrs	r3, r1
1001ba24:	431e      	orrs	r6, r3
1001ba26:	40cc      	lsrs	r4, r1
1001ba28:	e9c5 6400 	strd	r6, r4, [r5]
1001ba2c:	2100      	movs	r1, #0
1001ba2e:	e750      	b.n	1001b8d2 <__udivmoddi4+0xa6>
1001ba30:	f1c2 0320 	rsb	r3, r2, #32
1001ba34:	fa20 f103 	lsr.w	r1, r0, r3
1001ba38:	fa0c fc02 	lsl.w	ip, ip, r2
1001ba3c:	fa24 f303 	lsr.w	r3, r4, r3
1001ba40:	4094      	lsls	r4, r2
1001ba42:	430c      	orrs	r4, r1
1001ba44:	ea4f 481c 	mov.w	r8, ip, lsr #16
1001ba48:	fa00 fe02 	lsl.w	lr, r0, r2
1001ba4c:	fa1f f78c 	uxth.w	r7, ip
1001ba50:	fbb3 f0f8 	udiv	r0, r3, r8
1001ba54:	fb08 3110 	mls	r1, r8, r0, r3
1001ba58:	0c23      	lsrs	r3, r4, #16
1001ba5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1001ba5e:	fb00 f107 	mul.w	r1, r0, r7
1001ba62:	4299      	cmp	r1, r3
1001ba64:	d908      	bls.n	1001ba78 <__udivmoddi4+0x24c>
1001ba66:	eb1c 0303 	adds.w	r3, ip, r3
1001ba6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
1001ba6e:	d22c      	bcs.n	1001baca <__udivmoddi4+0x29e>
1001ba70:	4299      	cmp	r1, r3
1001ba72:	d92a      	bls.n	1001baca <__udivmoddi4+0x29e>
1001ba74:	3802      	subs	r0, #2
1001ba76:	4463      	add	r3, ip
1001ba78:	1a5b      	subs	r3, r3, r1
1001ba7a:	b2a4      	uxth	r4, r4
1001ba7c:	fbb3 f1f8 	udiv	r1, r3, r8
1001ba80:	fb08 3311 	mls	r3, r8, r1, r3
1001ba84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1001ba88:	fb01 f307 	mul.w	r3, r1, r7
1001ba8c:	42a3      	cmp	r3, r4
1001ba8e:	d908      	bls.n	1001baa2 <__udivmoddi4+0x276>
1001ba90:	eb1c 0404 	adds.w	r4, ip, r4
1001ba94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
1001ba98:	d213      	bcs.n	1001bac2 <__udivmoddi4+0x296>
1001ba9a:	42a3      	cmp	r3, r4
1001ba9c:	d911      	bls.n	1001bac2 <__udivmoddi4+0x296>
1001ba9e:	3902      	subs	r1, #2
1001baa0:	4464      	add	r4, ip
1001baa2:	1ae4      	subs	r4, r4, r3
1001baa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1001baa8:	e739      	b.n	1001b91e <__udivmoddi4+0xf2>
1001baaa:	4604      	mov	r4, r0
1001baac:	e6f0      	b.n	1001b890 <__udivmoddi4+0x64>
1001baae:	4608      	mov	r0, r1
1001bab0:	e706      	b.n	1001b8c0 <__udivmoddi4+0x94>
1001bab2:	45c8      	cmp	r8, r9
1001bab4:	d2ae      	bcs.n	1001ba14 <__udivmoddi4+0x1e8>
1001bab6:	ebb9 0e02 	subs.w	lr, r9, r2
1001baba:	eb63 0c07 	sbc.w	ip, r3, r7
1001babe:	3801      	subs	r0, #1
1001bac0:	e7a8      	b.n	1001ba14 <__udivmoddi4+0x1e8>
1001bac2:	4631      	mov	r1, r6
1001bac4:	e7ed      	b.n	1001baa2 <__udivmoddi4+0x276>
1001bac6:	4603      	mov	r3, r0
1001bac8:	e799      	b.n	1001b9fe <__udivmoddi4+0x1d2>
1001baca:	4630      	mov	r0, r6
1001bacc:	e7d4      	b.n	1001ba78 <__udivmoddi4+0x24c>
1001bace:	46d6      	mov	lr, sl
1001bad0:	e77f      	b.n	1001b9d2 <__udivmoddi4+0x1a6>
1001bad2:	4463      	add	r3, ip
1001bad4:	3802      	subs	r0, #2
1001bad6:	e74d      	b.n	1001b974 <__udivmoddi4+0x148>
1001bad8:	4606      	mov	r6, r0
1001bada:	4623      	mov	r3, r4
1001badc:	4608      	mov	r0, r1
1001bade:	e70f      	b.n	1001b900 <__udivmoddi4+0xd4>
1001bae0:	3e02      	subs	r6, #2
1001bae2:	4463      	add	r3, ip
1001bae4:	e730      	b.n	1001b948 <__udivmoddi4+0x11c>
1001bae6:	bf00      	nop

1001bae8 <__aeabi_idiv0>:
1001bae8:	4770      	bx	lr
1001baea:	bf00      	nop
1001baec:	72652525 	.word	0x72652525
1001baf0:	3a726f72 	.word	0x3a726f72
1001baf4:	00000020 	.word	0x00000020
1001baf8:	706d6f43 	.word	0x706d6f43
1001bafc:	6e656e6f 	.word	0x6e656e6f
1001bb00:	74612074 	.word	0x74612074
1001bb04:	706d6574 	.word	0x706d6574
1001bb08:	676e6974 	.word	0x676e6974
1001bb0c:	206f7420 	.word	0x206f7420
1001bb10:	74696e69 	.word	0x74696e69
1001bb14:	65746169 	.word	0x65746169
1001bb18:	6d6f6320 	.word	0x6d6f6320
1001bb1c:	696e756d 	.word	0x696e756d
1001bb20:	69746163 	.word	0x69746163
1001bb24:	77206e6f 	.word	0x77206e6f
1001bb28:	20687469 	.word	0x20687469
1001bb2c:	66205041 	.word	0x66205041
1001bb30:	74737269 	.word	0x74737269
1001bb34:	00000021 	.word	0x00000021
1001bb38:	00002525 	.word	0x00002525
1001bb3c:	7373654d 	.word	0x7373654d
1001bb40:	20656761 	.word	0x20656761
1001bb44:	206f6f74 	.word	0x206f6f74
1001bb48:	676e6f6c 	.word	0x676e6f6c
1001bb4c:	00000000 	.word	0x00000000
1001bb50:	4f525245 	.word	0x4f525245
1001bb54:	50203a52 	.word	0x50203a52
1001bb58:	6e65746f 	.word	0x6e65746f
1001bb5c:	6c616974 	.word	0x6c616974
1001bb60:	70655220 	.word	0x70655220
1001bb64:	6579616c 	.word	0x6579616c
1001bb68:	61502064 	.word	0x61502064
1001bb6c:	74656b63 	.word	0x74656b63
1001bb70:	00000021 	.word	0x00000021
1001bb74:	65642525 	.word	0x65642525
1001bb78:	3a677562 	.word	0x3a677562
1001bb7c:	00000020 	.word	0x00000020
1001bb80:	6769724f 	.word	0x6769724f
1001bb84:	6c616e69 	.word	0x6c616e69
1001bb88:	73656d20 	.word	0x73656d20
1001bb8c:	65676173 	.word	0x65676173
1001bb90:	0000203a 	.word	0x0000203a
1001bb94:	2d2d2d2d 	.word	0x2d2d2d2d
1001bb98:	2d2d2d2d 	.word	0x2d2d2d2d
1001bb9c:	2d2d2d2d 	.word	0x2d2d2d2d
1001bba0:	2d2d2d2d 	.word	0x2d2d2d2d
1001bba4:	2d2d2d2d 	.word	0x2d2d2d2d
1001bba8:	2d2d2d2d 	.word	0x2d2d2d2d
1001bbac:	2d2d2d2d 	.word	0x2d2d2d2d
1001bbb0:	2d2d2d2d 	.word	0x2d2d2d2d
1001bbb4:	2d2d2d2d 	.word	0x2d2d2d2d
1001bbb8:	2d2d2d2d 	.word	0x2d2d2d2d
1001bbbc:	00000000 	.word	0x00000000
1001bbc0:	61766e49 	.word	0x61766e49
1001bbc4:	2064696c 	.word	0x2064696c
1001bbc8:	6b636170 	.word	0x6b636170
1001bbcc:	72207465 	.word	0x72207465
1001bbd0:	69656365 	.word	0x69656365
1001bbd4:	20646576 	.word	0x20646576
1001bbd8:	74616874 	.word	0x74616874
1001bbdc:	6e616320 	.word	0x6e616320
1001bbe0:	20746f6e 	.word	0x20746f6e
1001bbe4:	61206562 	.word	0x61206562
1001bbe8:	65687475 	.word	0x65687475
1001bbec:	6369746e 	.word	0x6369746e
1001bbf0:	64657461 	.word	0x64657461
1001bbf4:	0000002e 	.word	0x0000002e
1001bbf8:	706d6f43 	.word	0x706d6f43
1001bbfc:	6e656e6f 	.word	0x6e656e6f
1001bc00:	6f622074 	.word	0x6f622074
1001bc04:	0000746f 	.word	0x0000746f
1001bc08:	302f3330 	.word	0x302f3330
1001bc0c:	35302f34 	.word	0x35302f34
1001bc10:	00000000 	.word	0x00000000
1001bc14:	00656f44 	.word	0x00656f44
1001bc18:	3e434f4c 	.word	0x3e434f4c
1001bc1c:	440a7325 	.word	0x440a7325
1001bc20:	3e455441 	.word	0x3e455441
1001bc24:	430a7325 	.word	0x430a7325
1001bc28:	3e545355 	.word	0x3e545355
1001bc2c:	000a7325 	.word	0x000a7325
1001bc30:	6e686f4a 	.word	0x6e686f4a
1001bc34:	00000000 	.word	0x00000000
1001bc38:	6f727245 	.word	0x6f727245
1001bc3c:	55203a72 	.word	0x55203a72
1001bc40:	6365726e 	.word	0x6365726e
1001bc44:	696e676f 	.word	0x696e676f
1001bc48:	2064657a 	.word	0x2064657a
1001bc4c:	6d6d6f63 	.word	0x6d6d6f63
1001bc50:	20646e61 	.word	0x20646e61
1001bc54:	65636572 	.word	0x65636572
1001bc58:	64657669 	.word	0x64657669
1001bc5c:	0a642520 	.word	0x0a642520
1001bc60:	00000000 	.word	0x00000000
1001bc64:	61766e49 	.word	0x61766e49
1001bc68:	2064696c 	.word	0x2064696c
1001bc6c:	706d6f43 	.word	0x706d6f43
1001bc70:	6e656e6f 	.word	0x6e656e6f
1001bc74:	61482074 	.word	0x61482074
1001bc78:	61776472 	.word	0x61776472
1001bc7c:	44206572 	.word	0x44206572
1001bc80:	63697665 	.word	0x63697665
1001bc84:	4e203a65 	.word	0x4e203a65
1001bc88:	4d20746f 	.word	0x4d20746f
1001bc8c:	38375841 	.word	0x38375841
1001bc90:	00303030 	.word	0x00303030
1001bc94:	696c6156 	.word	0x696c6156
1001bc98:	6f432064 	.word	0x6f432064
1001bc9c:	6e6f706d 	.word	0x6e6f706d
1001bca0:	20746e65 	.word	0x20746e65
1001bca4:	64726148 	.word	0x64726148
1001bca8:	65726177 	.word	0x65726177
1001bcac:	76654420 	.word	0x76654420
1001bcb0:	3a656369 	.word	0x3a656369
1001bcb4:	58414d20 	.word	0x58414d20
1001bcb8:	30303837 	.word	0x30303837
1001bcbc:	00000030 	.word	0x00000030

1001bcc0 <pced_zero>:
1001bcc0:	00000001 00000000 00000000 00000000     ................
	...
1001bce8:	00000001 00000000 00000000 00000000     ................
	...

1001bd38 <ed_zero>:
	...
1001bd60:	00000001 00000000 00000000 00000000     ................
	...
1001bdb0:	00000001 00000000 00000000 00000000     ................
	...

1001bdd8 <ed_lookup>:
1001bdd8:	0340913e 000e4175 03d673a2 002e8a05     >.@.uA...s......
1001bde8:	03f4e67c 008f8a09 00c21a34 004cf4b8     |.......4.....L.
1001bdf8:	01298f81 0113f4be 018c3b85 0124f1bd     ..)......;....$.
1001be08:	01c325f7 0037dc60 033e4cb7 003d42c2     .%..`.7..L>..B=.
1001be18:	01a44c32 014ca4e1 03a33d4b 001f3e74     2L....L.K=..t>..
1001be28:	037aaa68 00448161 0093d579 011e6556     h.z.a.D.y...Ve..
1001be38:	009b67a0 0143598c 01bee5ee 00b50b43     .g...YC.....C...
1001be48:	0289f0c6 01bc45ed 02b4d5a8 00695810     .....E.......Xi.
1001be58:	019ed153 00627305 023cae04 016e37aa     S....sb...<..7n.
1001be68:	0311b5d8 00aabc13 02669c92 01aed656     ..........f.V...
1001be78:	033c71d7 0139ff24 02b6b244 00b3d07f     .q<.$.9.D.......
1001be88:	027d1a76 01d60702 034d32f0 01c5cb54     v.}......2M.T...
1001be98:	03fa87d2 01643018 019b7a5f 00aa2ce9     .....0d._z...,..
1001bea8:	01ef087f 00eaecd6 00db05af 013d6a31     ............1j=.
1001beb8:	03d04205 016e6a01 0313ea50 01c06bd6     .B...jn.P....k..
1001bec8:	00fcd265 0047fa29 034faacc 01ef2e0d     e...).G...O.....
1001bed8:	00ef4d4f 014bd6bd 00f98d10 014c5026     OM....K.....&PL.
1001bee8:	007555bd 00aae456 00ee9730 016c2a13     .Uu.V...0....*l.
1001bef8:	017155e4 01874432 00096a10 01016732     .Uq.2D...j..2g..
1001bf08:	01a8014f 011e9823 01b9a80f 01e85938     O...#.......8Y..
1001bf18:	01d0d889 01a4cfc3 034c4295 0110e1ae     .........BL.....
1001bf28:	0162508c 00f2db4c 0072a2c6 0098da2e     .Pb.L.....r.....
1001bf38:	02f12b9b 0168a09a 016818bf 01814281     .+....h...h..B..
1001bf48:	035532bf 018ab307 00c9fa25 00a05073     .2U.....%...sP..
1001bf58:	0071e683 0093587d 00c7445a 009e4cfd     ..q.}X..ZD...L..
1001bf68:	02fc099f 00d46e63 00a7050e 01a3efe9     ....cn..........
1001bf78:	019d971b 010a9265 02469efd 00e4f946     ....e.....F.F...
1001bf88:	00321e58 01a03a44 0076ff09 00fefa71     X.2.D:....v.q...
1001bf98:	002e4b42 002bdae6 01ba78e5 002b4494     BK....+..x...D+.
1001bfa8:	01ee7c88 01c56bbb 03f63553 01fe7432     .|...k..S5..2t..
1001bfb8:	0047d6ba 0060b0e9 0136eff2 008a5939     ..G...`...6.9Y..
1001bfc8:	03540053 0064a087 02788e5c 00be7c67     S.T...d.\.x.g|..
1001bfd8:	033eb1b5 005529f9 00a5bb33 00af1102     ..>..)U.3.......
1001bfe8:	01a05442 001e3af7 02354123 00bfec44     BT...:..#A5.D...
1001bff8:	01f5862d 00dd7ba3 03146e20 00a51733     -....{.. n..3...
1001c008:	012a8285 00f6fc60 023f9797 003e85ee     ..*.`.....?...>.
1001c018:	009c3820 01bda72d 01b3858d 00d35683      8..-........V..
1001c028:	0296b3bb 010eaaf9 037d8ca4 0001ad9e     ..........}.....
1001c038:	00e72933 00213e91 015d6f8a 004553b9     3)...>!..o]..SE.
1001c048:	002e7390 01109761 001ae417 00e2d931     .s..a.......1...
1001c058:	03157131 013bbadd 01f10741 00480645     1q....;.A...E.H.
1001c068:	026c9c56 0059a736 02db346d 0117b00c     V.l.6.Y.m4......
1001c078:	036a2cc3 014795ee 02ea4b71 010c99c0     .,j...G.qK......
1001c088:	036030b5 001a0d0d 02f9c380 003bc144     .0`.........D.;.
1001c098:	02512584 003c6a7c 01a9f0d6 0042e3a4     .%Q.|j<.......B.
1001c0a8:	023221b1 01cb26aa 0074f74d 0099ddd1     .!2..&..M.t.....
1001c0b8:	01b28085 00192c3a 013b27c9 00fc13bd     ....:,...';.....
1001c0c8:	01d2e531 0075bb75 004ea3bf 00973425     1...u.u...N.%4..
1001c0d8:	001a4d63 01d59cee 01d1c0d4 00542e49     cM..........I.T.
1001c0e8:	01294114 004fce36 029283c9 01186fa9     .A).6.O......o..
1001c0f8:	01b8b3a2 00db7200 00935e30 003829f5     .....r..0^...)8.
1001c108:	02cc0d7d 0077adf3 0220dd2c 0014ea53     }.....w.,. .S...
1001c118:	01c6a0f9 01ea7eec 039234d9 01d77b7c     .....~...4..|{..
1001c128:	031f3c54 00070daa 0258f5da 003c23fb     T<........X..#<.
1001c138:	03a0d637 00386584 021320e0 00ea4092     7....e8.. ...@..
1001c148:	00dd3e8f 01d65981 02058b36 01bf1443     .>...Y..6...C...
1001c158:	01b2cc0d 00d9c323 01ce332f 00a5f626     ....#.../3..&...
1001c168:	02061bce 0024579d 01a2911a 007d7672     .....W$.....rv}.
1001c178:	00fafcf8 01c45e65 02e28dc5 00b62a32     ....e^......2*..
1001c188:	02090c87 01d2ac6c 01c2ecc4 009a41f1     ....l........A..
1001c198:	01aa515e 00d8d512 00475dab 00f85e34     ^Q.......]G.4^..
1001c1a8:	02a19712 0142d1c4 020ff4ad 00b730a1     ......B......0..
1001c1b8:	02f03d31 00c35db5 032f9c1d 01374398     1=...]..../..C7.
1001c1c8:	0222a5d9 00b3b449 014742da 00637a58     ..".I....BG.Xzc.
1001c1d8:	03dbb5d4 01e72a5b 009a00ee 01b74df5     ....[*.......M..
1001c1e8:	0106e4c7 011105c8 03ed2d88 0004946b     .........-..k...
1001c1f8:	03ed4f5a 014d3f26 01cf5234 0176168e     ZO..&?M.4R....v.
1001c208:	0112e864 00431a5c 01be5fde 00f109df     d...\.C.._......
1001c218:	03d44c92 0168cd6b 0099753e 00304590     .L..k.h.>u...E0.
1001c228:	006fe423 01c121c0 02bed66f 00979872     #.o..!..o...r...
1001c238:	0358c805 018aa820 0048e194 011bd102     ..X. .....H.....
1001c248:	01a8f52b 0111eddc 0269d31d 00ddee8c     +.........i.....
1001c258:	02f55080 000efe6e 00586604 00f84a33     .P..n....fX.3J..
1001c268:	028fc7e2 0165a2cb 01bd61cf 001268f5     ......e..a...h..
1001c278:	031ef6e6 00459416 0234586e 0159b5e1     ......E.nX4...Y.
1001c288:	00c10834 01e927e7 008a22c6 00ad44de     4....'..."...D..
1001c298:	02f2395b 017fd2db 02f607bf 00bb2396     [9...........#..
1001c2a8:	00a5ecc3 00ce5d6f 025a2fd0 0150a171     ....o].../Z.q.P.
1001c2b8:	00f87420 015798b3 01b19044 011aee58      t....W.D...X...
1001c2c8:	01712039 00454d01 0334793b 0053ee97     9 q..ME.;y4...S.
1001c2d8:	0185f7d4 01d1859a 000ae79a 00264e40     ............@N&.
1001c2e8:	0164f97a 0161131e 01f95b3d 004d85f8     z.d...a.=[....M.
1001c2f8:	02a83fc5 00520a73 03dd95c2 00dee125     .?..s.R.....%...
1001c308:	02b4ffe8 01855275 01b1d138 0085e88b     ....uR..8.......
1001c318:	022eb09e 002e73c1 01e5f758 00bf671c     .....s..X....g..
1001c328:	0271ecb8 01c2cbd3 02fc643c 01ca0523     ..q.....<d..#...
1001c338:	03995b76 001d4f80 02ab6767 016fd7ec     v[...O..gg....o.
1001c348:	004535d7 0017f0ef 02afdedd 002ceb94     .5E...........,.
1001c358:	0219e497 006769d9 00d2558e 01be8195     .....ig..U......
1001c368:	025e41d4 01e08674 0075c651 00dcdd9d     .A^.t...Q.u.....
1001c378:	00d1add9 00a67f50 0204e5f7 017cb7a6     ....P.........|.
1001c388:	02cc1c59 01f03bae 01f8290a 0133286c     Y....;...)..l(3.
1001c398:	02c3b18f 007efa95 00246590 002572c5     ......~..e$..r%.
1001c3a8:	02a6ac68 0000b60a 03bc4851 0110bc60     h.......QH..`...
1001c3b8:	000a0644 019193c7 01730907 01afd641     D.........s.A...
1001c3c8:	01415b8a 01de3c78 00efc1f4 01bdd61d     .[A.x<..........
1001c3d8:	0019027f 00a29a50 016bdc4d 014acdea     ....P...M.k...J.
1001c3e8:	0367a635 00094873 029d5294 01fb82c2     5.g.sH...R......
1001c3f8:	034cca27 00e07efa 023e639d 01e107ce     '.L..~...c>.....
1001c408:	00c3445f 019dba8c 03e71382 00fe8029     _D..........)...
1001c418:	032f5ee4 0119c81d 0359d622 018cb03c     .^/.....".Y.<...
1001c428:	03a3e252 00ac824a 00112680 0198895f     R...J....&.._...
1001c438:	019f7cd6 00005d4f 023ddb34 0048cb65     .|..O]..4.=.e.H.
1001c448:	030b078d 00d5a4b9 00777a1f 0091f285     .........zw.....
1001c458:	03e8fcd0 01b6d55a 02fa048e 004ad7f8     ....Z.........J.
1001c468:	02fce34d 003ef125 037dae3e 015d6f9a     M...%.>.>.}..o].
1001c478:	01cee609 0128c561 023930ff 000dfa40     ....a.(..09.@...
1001c488:	0396fb12 01d26ddb 016f1e92 00df09ab     .....m....o.....
1001c498:	01227be5 011a825c 012d9b4c 011c8bc3     .{".\...L.-.....
1001c4a8:	004ee03a 00f71188 0020796c 01bdfa4f     :.N.....ly .O...
1001c4b8:	02a6ae05 00bd812b 039323eb 018df724     ....+....#..$...
1001c4c8:	03048d47 00ff6b66 00045af7 002a2c35     G...fk...Z..5,*.
1001c4d8:	00f01e02 003f3b04 01fe1e44 01562992     .....;?.D....)V.
1001c4e8:	02efcc89 01118d6b 0087f2ba 007fd0d2     ....k...........
1001c4f8:	020e2d44 003e6048 03183c51 012406a9     D-..H`>.Q<....$.
1001c508:	00244e45 00b4a771 03c147be 01a49ec6     EN$.q....G......
1001c518:	00ac0839 000c214d 00033f41 01214d99     9...M!..A?...M!.
1001c528:	0166feab 0104dde4 001af8f0 006dd523     ..f.........#.m.
1001c538:	03368116 01e12314 03383de9 0006d939     ..6..#...=8.9...
1001c548:	00587c8f 00427eec 03b726d1 0106ee21     .|X..~B..&..!...
1001c558:	004346be 001f511d 0164a81d 00a0ada9     .FC..Q....d.....
1001c568:	0075236b 013b603e 01450c50 01beef87     k#u.>`;.P.E.....
1001c578:	0012fcdb 013adca3 006691ae 00d3165f     ......:...f._...
1001c588:	02990fc4 01e8542d 01922274 014afae7     ....-T..t"....J.
1001c598:	0164861a 01c3bb5c 0070c6a9 002a1c78     ..d.\.....p.x.*.
1001c5a8:	03bc8989 006d6652 004c0660 01d2deea     ....Rfm.`.L.....
1001c5b8:	01cdaeb8 01d59e3c 00d6f10c 008c81ac     ....<...........
1001c5c8:	00f2685d 00fb9cc0 027dd6b7 00957927     ]h........}.'y..
1001c5d8:	03d59eba 00e30858 02005845 00e187ca     ....X...EX......
1001c5e8:	00cbaec9 00b84793 02297912 004e055d     .....G...y).].N.
1001c5f8:	001e7518 009e51e1 00dae87f 00cb1ce2     .u...Q..........
1001c608:	03971be9 01052b74 032f0ef1 00061420     ....t+..../. ...
1001c618:	022cfb89 01f51f1a 02f0d6e0 00b40523     ..,.........#...
1001c628:	01e787fb 00d48aa3 0274f9d2 00bb8157     ..........t.W...
1001c638:	02310813 01900e3d 00d34c9e 005233d6     ..1.=....L...3R.
1001c648:	0134f027 0124bd9e 015528d4 01f7b420     '.4...$..(U. ...
1001c658:	011a6612 01611854 00de1544 017a8b94     .f..T.a.D.....z.
1001c668:	01ebd5db 00ffcbe8 02e4756d 01cbdf66     ........mu..f...
1001c678:	010ffc4a 01dc479a 015b0d16 0160a88d     J....G....[...`.
1001c688:	0085b6b4 003733fa 02d4eaea 009e3fae     .....37......?..
1001c698:	00933966 009a07e3 01931635 00e10148     f9......5...H...
1001c6a8:	02308652 019d3c52 00a94890 00ef6722     R.0.R<...H.."g..
1001c6b8:	002fe9c6 01041374 0124422a 00afd784     ../.t...*B$.....
1001c6c8:	0356ae56 019cc519 0287e830 0052b666     V.V.....0...f.R.
1001c6d8:	01b080fd 007ab299 000afaf5 00b218ec     ......z.........
1001c6e8:	03096ab8 005381b6 01e6b024 00486722     .j....S.$..."gH.
1001c6f8:	0086a2db 009e2af5 02609520 00902ca4     .....*.. .`..,..
1001c708:	0248efca 000596d6 00846a76 00291d28     ..H.....vj..(.).
1001c718:	03981e32 0026697b 004bbfe6 00aa2b8f     2...{i&...K..+..
1001c728:	0314832c 01170d2b 019bffec 01646d9f     ,...+........md.
1001c738:	00b49bfa 01c34720 01914625 00f55f9f     .... G..%F..._..
1001c748:	0165e545 00f01c88 0019e04f 01796e4e     E.e.....O...Nny.
1001c758:	007ca8f7 00f780bb 0318b55d 006cdc67     ..|.....]...g.l.
1001c768:	0083d337 01d50c63 03919797 009f05ed     7...c...........
1001c778:	00089b61 00516c21 00670301 01226d3e     a...!lQ...g.>m".
1001c788:	02eb92ef 00840b4e 010c3a46 01a308b5     ....N...F:......
1001c798:	0385894e 010baa24 0355f38c 01d7e7af     N...$.....U.....
1001c7a8:	03a496cb 0127d7ee 025bcfd4 01268422     ......'...[.".&.
1001c7b8:	027d6612 0185e323 03710375 007c0d1c     .f}.#...u.q...|.
1001c7c8:	014a6098 01ce9258 02dcbfa6 015812a1     .`J.X.........X.
1001c7d8:	029c572e 0158a307 00e822ab 01662c42     .W....X.."..B,f.
1001c7e8:	0229361a 015763eb 01a97b28 002b7234     .6)..cW.({..4r+.
1001c7f8:	00288675 001a869b 001764b6 0034751f     u.(......d...u4.
1001c808:	016a2e51 0007020c 01c95045 00acf6d1     Q.j.....EP......
1001c818:	018d300c 0058d3e0 009fe274 0082627a     .0....X.t...zb..
1001c828:	022dcc7f 01ddff4e 03124932 01652a7e     ..-.N...2I..~*e.
1001c838:	00ca15f0 0007e3a0 00ec3269 01c5344f     ........i2..O4..
1001c848:	01d0ca67 00100fb4 01eaec2e 0109e2e1     g...............
1001c858:	017be2ce 003bd659 01588770 01cbf45a     ..{.Y.;.p.X.Z...
1001c868:	01260b30 00ba6c81 010f7059 01cc2e65     0.&..l..Yp..e...
1001c878:	034ec552 00cb4d61 01f1b929 007cc123     R.N.aM..)...#.|.
1001c888:	03179b23 00c035ce 01a37d0b 01b99ef9     #....5...}......
1001c898:	00308303 016f5d15 00b24cc2 00b4654a     ..0..]o..L..Je..
1001c8a8:	00302ff3 012b19ae 01fdad51 01c07236     ./0...+.Q...6r..
1001c8b8:	005b3727 01b06cd7 0007380a 004ce9e0     '7[..l...8....L.
1001c8c8:	01e7792a 0124c845 03b930b8 0115ee6e     *y..E.$..0..n...
1001c8d8:	03193226 01a3d762 031ed456 010593a3     &2..b...V.......
1001c8e8:	0123067f 016edf6c 02ca62be 007d19f1     ..#.l.n..b....}.
1001c8f8:	025dc12c 00b108ca 0013b087 01d54770     ,.].........pG..
1001c908:	01b03bcd 001a4304 02d58f0e 01d03729     .;...C......)7..
1001c918:	02cfce4e 003b81d4 0116fbe9 01983760     N.....;.....`7..
1001c928:	030fffeb 015459c4 0085955c 0071a0ae     .....YT.\.....q.
1001c938:	03a963ea 00587497 0078433c 00a315c1     .c...tX.<Cx.....
1001c948:	0073a463 0076140a 02ded49c 01d9079f     c.s...v.........
1001c958:	014cf571 007b3b75 0256c2b0 00b00fd4     q.L.u;{...V.....
1001c968:	0353a47d 01c61d5e 030f2f21 01867862     }.S.^...!/..bx..
1001c978:	00c1ec04 017ef7f9 001ebb92 0175e632     ......~.....2.u.
1001c988:	03dbd96b 01a651a2 00dafecf 01cbd1bd     k....Q..........
1001c998:	02def7a3 00a523fe 01f3bc04 0047b37f     .....#........G.
1001c9a8:	03feed25 00f0ba63 02473905 01494866     %...c....9G.fHI.
1001c9b8:	02a91948 014f799a 02599b1b 00117e06     H....yO...Y..~..
1001c9c8:	01214193 00fdea2f 0012331a 01c75369     .A!./....3..iS..
1001c9d8:	00e6c4a2 00a4f871 025112e1 0184d2e4     ....q.....Q.....
1001c9e8:	03b406ed 01aee50a 01c0dde2 001c3111     .............1..
1001c9f8:	02c4d7a3 01047608 0047f032 016d8171     .....v..2.G.q.m.
1001ca08:	00c47c89 01601648 01f9972c 006491dc     .|..H.`.,.....d.
1001ca18:	039fc040 00e2ef77 0092b281 007dc000     @...w.........}.
1001ca28:	00ea8aeb 00929db7 00e7f04c 007fb1bc     ........L.......
1001ca38:	012c477d 00f3af1a 0219a95e 001de61a     }G,.....^.......
1001ca48:	01778b0f 01baaaa8 034cc5ab 00bc4bfb     ..w.......L..K..
1001ca58:	03c0c740 0148acb7 0080e148 01fa064d     @.....H.H...M...
1001ca68:	004341b9 00cff668 038a20bc 00f218d9     .AC.h.... ......
1001ca78:	02518a43 017981ec 00df1818 00c763db     C.Q...y......c..
1001ca88:	03144b16 007e1b12 00d73e9d 00e61d6e     .K....~..>..n...
1001ca98:	01ffa7b3 00befc36 02b6ccdd 01419eb2     ....6.........A.
1001caa8:	0196cf14 0110c729 00801405 0005769f     ....)........v..
1001cab8:	038f10b5 000f26db 02934017 000d1a48     .....&...@..H...
1001cac8:	0139e457 00807ccc 00039d51 009fdac2     W.9..|..Q.......
1001cad8:	0000dfaa 01200be0 0062c525 0025a4a8     ...... .%.b...%.
1001cae8:	01075817 006ebaa4 00862460 00e5f2ea     .X....n.`$......
1001caf8:	005959b2 004c24fc 032ec618 006f4d4b     .YY..$L.....KMo.
1001cb08:	0388ea86 001d5e26 03ea48b9 01874445     ....&^...H..ED..
1001cb18:	020766e6 008ce74c 001379e7 0170fef2     .f..L....y....p.
1001cb28:	015e2f02 0106ef09 02998650 01a8fdd5     ./^.....P.......
1001cb38:	00e07c42 004a5ff5 022c1e1c 01dc6d00     B|..._J...,..m..
1001cb48:	013a2fa7 01766194 01e11b0f 018fcea6     ./:..av.........
1001cb58:	03d6b26d 00a283b3 01e18d8f 014eda0d     m.............N.
1001cb68:	01219971 00cc6862 034f80c6 019bd17e     q.!.bh....O.~...
1001cb78:	02b9fea2 00f30e3b 0270db1f 0041d91c     ....;.....p...A.
1001cb88:	02740dc8 01c43c7a 02b83bdf 00c459f1     ..t.z<...;...Y..
1001cb98:	017572af 004bcea7 0153c4ca 0043403a     .ru...K...S.:@C.
1001cba8:	016f2f8a 0180f7c4 02e0e088 00cf709d     ./o..........p..
1001cbb8:	01ff649a 006b2586 024b1068 00ce1094     .d...%k.h.K.....
1001cbc8:	0130fe45 01df74e7 0141a0d0 006250c8     E.0..t....A..Pb.
1001cbd8:	02b8c225 00223f93 0341f08b 018490d8     %....?"...A.....
1001cbe8:	034e898d 015076e1 03841b33 018b603e     ..N..vP.3...>`..
1001cbf8:	0027fa97 000f9bbc 029633e8 01e80f27     ..'......3..'...
1001cc08:	0309e5ef 011baf88 022d2638 00d278c6     ........8&-..x..
1001cc18:	03a6b16c 0004de9f 02777edc 01a06ba4     l........~w..k..
1001cc28:	01f8dc51 0088aff1 03178d90 00548aa8     Q.............T.
1001cc38:	01614938 000bd4da 01a20587 00d5b96b     8Ia.........k...
1001cc48:	036bf902 0046f227 0019c8db 000d9d19     ..k.'.F.........
1001cc58:	03505243 0117f9c3 020c0b8c 001d69a5     CRP..........i..
1001cc68:	01e41b49 01b77871 016da341 010b8fd4     I...qx..A.m.....
1001cc78:	01a8e79e 005a80ff 023a0e39 010a3458     ......Z.9.:.X4..
1001cc88:	00951491 00924832 01944c5e 0041fb18     ....2H..^L....A.
1001cc98:	0017c01f 01c9d4b8 01a2e97a 0048adf7     ........z.....H.
1001cca8:	02db57a2 0059867d 01a308fd 01d29100     .W..}.Y.........
1001ccb8:	01558109 001bb52e 02a08867 01d1bc7d     ..U.....g...}...
1001ccc8:	006f2321 0118dbd7 02d60bd3 00760564     !#o.........d.v.
1001ccd8:	020dac5f 01a1d5a9 038aec26 01575d5e     _.......&...^]W.
1001cce8:	005f80bd 00ce0f7d 009f96a6 019e0fe3     .._.}...........
1001ccf8:	03789ecd 00808d29 0385c5e8 016da7de     ..x.).........m.
1001cd08:	035650ec 005e8b45 01bfc19e 01330f9b     .PV.E.^.......3.
1001cd18:	0073be0e 01cf874e 011b0af8 00e97db5     ..s.N........}..
1001cd28:	0178b252 00836d9c 022c0eda 01cea8f6     R.x..m....,.....
1001cd38:	001c70d3 01e41170 01251059 006cdec5     .p..p...Y.%...l.
1001cd48:	0353cffe 01f35a08 0087fab6 006916f6     ..S..Z........i.
1001cd58:	036dc17c 0195d201 00aa11a8 016e6000     |.m..........`n.
1001cd68:	01080974 01287b32 0063bdc0 00a0e322     t...2{(...c."...
1001cd78:	00acf4f3 0173581a 007a74cc 00c1e6bf     .....Xs..tz.....
1001cd88:	010b64b4 016025d9 009c4e99 011feaeb     .d...%`..N......
1001cd98:	03b2b2cd 00fbc094 02465030 00ec33d2     ........0PF..3..
1001cda8:	02f57a2d 0008ae2b 03e925ad 00ab419d     -z..+....%...A..
1001cdb8:	03d7457a 01025059 02606a82 008772e2     zE..YP...j`..r..
1001cdc8:	009d9fc8 000111a3 00796b8c 0176a155     .........ky.U.v.
1001cdd8:	00950025 00ee2f9c 01a6a609 01b5624b     %..../......Kb..
1001cde8:	00194a31 002f0f42 027731ba 01403eaf     1J..B./..1w..>@.
1001cdf8:	03113351 01f314f0 02080d81 01f3d97f     Q3..............
1001ce08:	02011ba1 00f17659 03f6c6f6 01761036     ....Yv......6.v.
1001ce18:	009fe18b 018e034c 00b8ee0d 0135cf0b     ....L.........5.
1001ce28:	01bac0b6 01ae20ab 01dd4cbe 00dbaaf7     ..... ...L......
1001ce38:	0232ac19 00e909d8 027084fa 0090cb22     ..2.......p."...
1001ce48:	00a8a968 011efdcf 02262867 0058e45d     h.......g(&.].X.
1001ce58:	038010ce 017a37d3 00ea16de 007fc5df     .....7z.........
1001ce68:	03447ecb 00305cb6 01b7a77f 00fe3141     .~D..\0.....A1..
1001ce78:	017f3f10 01aa15fe 027fe03a 013f3015     .?......:....0?.
1001ce88:	02824e1a 001dc327 01b5b5fd 00766691     .N..'........fv.
1001ce98:	032499ec 0148d9d3 02182613 003e3e89     ..$...H..&...>>.
1001cea8:	00048c98 0163dce6 03d41500 00e7c993     ......c.........
1001ceb8:	03e7e29c 014d05f6 027394f5 01515ce0     ......M...s..\Q.
1001cec8:	02f650dd 01597ba9 008dc749 0108141d     .P...{Y.I.......
1001ced8:	03468889 005c4b5c 02097be1 00d2aaff     ..F.\K\..{......
1001cee8:	03253a33 010eff00 0291b7f3 00a6f1ff     3:%.............
1001cef8:	00844a16 0029d879 0272c35f 01971884     .J..y.)._.r.....
1001cf08:	023193dd 00e27e33 00177ce5 00b5092e     ..1.3~...|......
1001cf18:	013440cd 001cfe83 00d49e97 004e4083     .@4..........@N.
1001cf28:	00ab19ce 008be600 029ef8cb 008da28f     ................
1001cf38:	00e2ac0b 01152a82 038fa700 0124248f     .....*.......$$.
1001cf48:	02a4582f 00dcaaa7 00d64762 004fd05b     /X......bG..[.O.
1001cf58:	026efdac 00a7f766 01282840 01f1a52a     ..n.f...@((.*...
1001cf68:	02e44b3a 01bdf37b 03b25cc3 01568c81     :K..{....\....V.
1001cf78:	0138598c 0105c693 01c94c8c 01d62aa6     .Y8......L...*..
1001cf88:	0300ff44 017d8005 008c01bd 01da5392     D.....}......S..
1001cf98:	0148eed6 00357f7a 03a574bd 01420853     ..H.z.5..t..S.B.
1001cfa8:	02d6fe4b 009a454f 02f89840 01ca88eb     K...OE..@.......
1001cfb8:	0299699c 0014af94 03132316 00e9797b     .i.......#..{y..
1001cfc8:	02c6faba 008be583 03d003d6 00856ed4     .............n..
1001cfd8:	012ca8c3 0045e79e 02c840a2 00683a5a     ..,...E..@..Z:h.
1001cfe8:	02bb3ab6 0088e4f8 024c86cb 00e9dd62     .:........L.b...
1001cff8:	03ae5076 00447da4 0294ca90 00f8efea     vP...}D.........
1001d008:	0076b887 01115e65 02464879 00928244     ..v.e^..yHF.D...
1001d018:	01f8de7f 01767f45 0163727f 010234db     ....E.v..rc..4..
1001d028:	02a66062 017ebe3d 01a8de6b 00aee24b     b`..=.~.k...K...
1001d038:	00c7e2e6 01da753c 0114f8fb 00ccbcd6     ....<u..........
1001d048:	02d7521e 01134abb 02c2a7e4 01421974     .R...J......t.B.
1001d058:	0238ea40 009c16d4 025d3b97 011b1c2c     @.8......;].,...
1001d068:	03a47eb9 00ef061f 0286c20c 01c0457a     .~..........zE..
1001d078:	0224ada8 005b6236 02662adf 00660188     ..$.6b[..*f...f.
1001d088:	00195a9d 01407aef 00e906fb 01143607     .Z...z@......6..
1001d098:	02205275 00eda869 01d06dcf 00ba09e4     uR .i....m......
1001d0a8:	02a93c87 008f5cb2 0368aaf4 017c2dea     .<...\....h..-|.
1001d0b8:	00ba6345 00b78975 00ae743f 01362587     Ec..u...?t...%6.
1001d0c8:	007dba0e 01af70e3 03e1b463 01f4ed29     ..}..p..c...)...
1001d0d8:	02e2adf3 002112f7 039663ab 0132eb49     ......!..c..I.2.
1001d0e8:	00d71fcd 00640928 015f101a 0057d944     ....(.d..._.D.W.
1001d0f8:	03149708 013a6419 01cba5af 00467634     .....d:.....4vF.
1001d108:	02fe2007 01f5fef3 026b2801 01c79a89     . .......(k.....
1001d118:	03e2df5d 0026ab9c 0219b1a3 0103762c     ].....&.....,v..
1001d128:	0117de0d 0151bed1 01e87b75 0165d50d     ......Q.u{....e.
1001d138:	03c29094 0117717c 00b579af 00d15488     ....|q...y...T..
1001d148:	031e068a 001c3058 030e9b21 009af018     ....X0..!.......
1001d158:	016dcd8d 013e7346 027b3768 00a5f61a     ..m.Fs>.h7{.....
1001d168:	034c6332 0120d68b 03434160 001c0c17     2cL... .`AC.....
1001d178:	014e56ae 0060f740 004387a0 01f33742     .VN.@.`...C.B7..
1001d188:	01260417 01908b1b 0017bb94 0084a412     ..&.............
1001d198:	02b854f5 0168c677 0060da7d 01ea7538     .T..w.h.}.`.8u..
1001d1a8:	02d61d0c 010a2f43 0360cc93 01210619     ....C/....`...!.
1001d1b8:	01533361 01d0d599 0336b801 000bda18     a3S.......6.....
1001d1c8:	02f64331 01489511 0048190c 00d64f2a     1C....H...H.*O..
1001d1d8:	02849aa7 00c62697 0359b242 01ab2ec7     .....&..B.Y.....
1001d1e8:	0353630c 01fdbbd1 012a2da9 007cd18a     .cS......-*...|.
1001d1f8:	008da2d6 009ce60c 035ed413 00e34a10     ..........^..J..
1001d208:	01992858 010193c6 02f543cd 01da03ef     X(.......C......
1001d218:	03d58d3c 006ab760 02ebe8c3 009a565e     <...`.j.....^V..
1001d228:	02702453 00439302 037bd734 0136abe8     S$p...C.4.{...6.
1001d238:	003e8961 0127daf7 00ecdae6 007fbff7     a.>...'.........
1001d248:	005492c3 015cb0a5 02cd30be 01f1d175     ..T...\..0..u...
1001d258:	01df78ef 009f1dd5 03937fa3 005dda0c     .x............].
1001d268:	02441855 01501445 018c05bc 01fe6152     U.D.E.P.....Ra..
1001d278:	030be117 0073a227 00510709 00dbdaa5     ....'.s...Q.....
1001d288:	020016b4 01fc921c 01e1cf91 006087b4     ..............`.
1001d298:	0070a31f 01db0bb1 03bf6363 01855483     ..p.....cc...T..
1001d2a8:	0374da6a 002e7a6f 00201169 013fa0c2     j.t.oz..i. ...?.
1001d2b8:	0127de43 005cfdd8 03cd69b1 00c3c994     C.'...\..i......
1001d2c8:	02c10c85 00324e2a 01797141 0106d93b     ....*N2.Aqy.;...
1001d2d8:	01185e6d 006fac70 00600f07 007b5524     m^..p.o...`.$U{.
1001d2e8:	03159647 00bc49cf 02e01e11 007f1f22     G....I......"...
1001d2f8:	0173e8e7 00825355 03f549d2 01728f2e     ..s.US...I....r.
1001d308:	00c54143 013e483b 02ad85b6 0176795c     CA..;H>.....\yv.
1001d318:	01a70bc0 0022f5d5 005ce609 01278ea2     ......"...\...'.
1001d328:	001b5ad6 00596162 00d34f5e 00f09d5a     .Z..baY.^O..Z...
1001d338:	017edc5f 00e2b066 0351b13b 01ad45e9     _.~.f...;.Q..E..
1001d348:	00b180cc 0033f4dc 01d1f41a 014dde49     ......3.....I.M.
1001d358:	026008a2 00d39595 01cbfe9e 008b7f36     ..`.........6...
1001d368:	030d0cd9 00f4b830 006671bb 00fd65da     ....0....qf..e..
1001d378:	02b63999 002a961f 0192c619 0038f1ed     .9....*.......8.
1001d388:	0005448c 01aca45b 003be0a1 01166d04     .D..[.....;..m..
1001d398:	032d2add 016692cf 00bb8eeb 01f5cd32     .*-...f.....2...
1001d3a8:	02594a09 008e4f2f 03824cde 003fa61d     .JY./O...L....?.
1001d3b8:	02ba913b 00cd3442 0181cfdb 0011736d     ;...B4......ms..
1001d3c8:	013a8f36 0178f815 001effb2 0142ecc1     6.:...x.......B.
1001d3d8:	0307ff00 0130c0fc 03b28c85 008ef585     ......0.........
1001d3e8:	037d5a61 01b9cbb9 03174dde 006a5cbf     aZ}......M...\j.
1001d3f8:	0373c60f 00f898d8 0378b2ab 003586e3     ..s.......x...5.
1001d408:	01d94500 0100d603 0192653f 01237ddf     .E......?e...}#.
1001d418:	03b349ea 00e2a7f8 010aafe1 003aa261     .I..........a.:.
1001d428:	01ab706a 0105ac54 01c136b0 0035fbfa     jp..T....6....5.
1001d438:	01640ad5 006ac722 02f41f97 0157e0ab     ..d.".j.......W.
1001d448:	0317ed0d 011a55fc 0374277e 006468ab     .....U..~'t..hd.
1001d458:	013c1431 01bdd2f1 01bbd9c2 00710397     1.<...........q.
1001d468:	00ae5c97 01b23ee7 00e1b7da 01211717     .\...>........!.
1001d478:	0050b5cc 01f8b839 03460efb 018ad0d3     ..P.9.....F.....
1001d488:	00fad3fc 00a531b0 037b4c0f 01a0da24     .....1...L{.$...
1001d498:	0110875b 01727e0a 03e00545 008df9f6     [....~r.E.......
1001d4a8:	0301b430 015d7b59 03a20026 0134f85f     0...Y{].&..._.4.
1001d4b8:	008c4253 01e47f22 01078ac1 00bc6ea6     SB.."........n..
1001d4c8:	019b1115 01c6be9a 0153b61d 019be6ce     ..........S.....
1001d4d8:	003cccb9 01557d0a 031960e7 01f759fe     ..<..}U..`...Y..
1001d4e8:	01affed4 0051c1e8 029c2b1c 0008450b     ......Q..+...E..
1001d4f8:	033b50d6 008f0711 01e21d48 00f9d9c7     .P;.....H.......
1001d508:	0147a1e8 00c9be95 025fafd9 01439370     ..G......._.p.C.
1001d518:	03c78f89 0001cc7e 00f81880 0031c612     ....~.........1.
1001d528:	00233c86 0112f676 02fe5830 01ba15e3     .<#.v...0X......
1001d538:	017041b5 010116db 03347e15 013135bc     .Ap......~4..51.
1001d548:	017d1fc9 01fb33f0 0382831e 01328a01     ..}..3........2.
1001d558:	01b1d7d6 01ee0cdf 033895fb 01445b7b     ..........8.{[D.
1001d568:	02aa7e47 0064ff76 008f1970 01377f26     G~..v.d.p...&.7.
1001d578:	02a365e1 013d85cf 01ae4588 019176be     .e....=..E...v..
1001d588:	03db623b 01f50dd8 000a88f9 00e2fe54     ;b..........T...
1001d598:	03e8876f 00b24f0d 00c583fa 00d0c68a     o....O..........
1001d5a8:	028bd879 01241276 007ac11c 012d2a10     y...v.$...z..*-.
1001d5b8:	01ebf0d4 01a9bee6 020855eb 01b06ed5     .........U...n..
1001d5c8:	0213ad48 01c7c49f 00905aec 0171acc1     H........Z....q.
1001d5d8:	02889bc7 00dd5ae3 014a3189 01d7dda4     .....Z...1J.....
1001d5e8:	02e423c6 0048ad6d 03f1ddd6 00879437     .#..m.H.....7...
1001d5f8:	024e75c0 01cf5d8c 0095418e 01621215     .uN..]...A....b.
1001d608:	01f42c5e 004dbf6a 0305bdd1 0137ec68     ^,..j.M.....h.7.
1001d618:	01811f29 00ecffc1 003cd92e 01bb588a     ).........<..X..
1001d628:	03ec52e1 01974550 0110be8d 0008860d     .R..PE..........
1001d638:	02ad2d14 01d98e17 0306095e 000653e2     .-......^....S..
1001d648:	02823b62 00211e3d 01d37308 018061a2     b;..=.!..s...a..
1001d658:	0217b806 01a81c73 03307a7f 009c4050     ....s....z0.P@..
1001d668:	008bf3ab 00f623ed 02c18f7a 00927ad3     .....#..z....z..
1001d678:	01ff295f 004d8457 001fd404 004e1f11     _)..W.M.......N.
1001d688:	03978af8 00f0f461 008276ba 01ebf872     ....a....v..r...
1001d698:	01c8ad68 01477ca0 01a4245d 019241af     h....|G.]$...A..
1001d6a8:	02aaf1ed 00c5c6c9 03564ca8 01cc6425     .........LV.%d..
1001d6b8:	00233525 006113af 03fdeee1 00875150     %5#...a.....PQ..
1001d6c8:	02ff1bd2 006b49ea 0073cf08 00887f52     .....Ik...s.R...
1001d6d8:	028a47d1 016df62c 009e34c1 00b0bb85     .G..,.m..4......
1001d6e8:	029afc53 01ddbd58 00fc49a9 007d3a94     S...X....I...:}.
1001d6f8:	02334424 01b14529 02156341 008813ce     $D3.)E..Ac......
1001d708:	0065a464 014dd050 03edcf83 010f030e     d.e.P.M.........
1001d718:	006ea620 01555f9c 016fb924 01236a96      .n.._U.$.o..j#.
1001d728:	00a59cc7 00a39997 01940dd9 005971c5     .............qY.
1001d738:	02a11c95 001e17ce 03e38469 015ee635     ........i...5.^.
1001d748:	03ccad84 019db75b 004c9793 01875772     ....[.....L.rW..
1001d758:	0040c29e 011f7a0c 026507e7 006277ac     ..@..z....e..wb.
1001d768:	02dc479a 013539be 03a0e8a7 016320df     .G...95...... c.
1001d778:	02fc9058 005a2165 0003619f 019bdab5     X...e!Z..a......
1001d788:	007772ef 0135d66a 0173bea4 01e15b98     .rw.j.5...s..[..
1001d798:	032c6a57 00713dcf 005fa0bb 0093ef4c     Wj,..=q..._.L...
1001d7a8:	0075a1cf 0102a633 020a7533 01e33848     ..u.3...3u..H8..
1001d7b8:	00e1c197 01885e84 00d1bf64 01e56b20     .....^..d... k..
1001d7c8:	007c3484 019c1bbf 01ec366d 01a61e0e     .4|.....m6......
1001d7d8:	01cf7f26 001cc7e5 02bce4bc 00eb9d63     &...........c...
1001d7e8:	01b7daf6 01c1166b 01b42bb3 0076d264     ....k....+..d.v.
1001d7f8:	03994372 011a5816 015c9a58 018c78dc     rC...X..X.\..x..
1001d808:	03cf728f 01fa73fb 0048ce21 017f858a     .r...s..!.H.....
1001d818:	0194961a 004853f8 01a9e9cb 00386b8e     .....SH......k8.
1001d828:	0126f9f7 0150f22d 0067e91d 00465260     ..&.-.P...g.`RF.
1001d838:	006fc917 011e2751 017cb208 00614b57     ..o.Q'....|.WKa.
1001d848:	025ce50f 018343ef 02e37b75 01687891     ..\..C..u{...xh.
1001d858:	01ffd590 0146bb81 003677da 00ad1301     ......F..w6.....
1001d868:	034eb78e 0121eac1 028ce343 0074ced7     ..N...!.C.....t.
1001d878:	03eb1b46 004f9067 025de6a4 009c87d5     F...g.O...].....
1001d888:	02f2bb9a 018314bb 03fd8bf1 01626f0e     .............ob.
1001d898:	02a3416b 01be4f9a 02c1ae48 013028f5     kA...O..H....(0.
1001d8a8:	020b586a 015561c9 0312ccfc 0042f270     jX...aU.....p.B.
1001d8b8:	00ae6d11 00f1709f 01956e05 00daa524     .m...p...n..$...
1001d8c8:	01131da6 00492eb2 02202b5d 00edbdf7     ......I.]+ .....
1001d8d8:	008d9b66 01c35dc9 02c2a05b 00ba12cf     f....]..[.......
1001d8e8:	003c1551 01a768bc 0261a67b 008e85d1     Q.<..h..{.a.....
1001d8f8:	0289f238 00826f28 013a976f 018dd56f     8...(o..o.:.o...
1001d908:	02d10853 01e80f8a 02ad36ab 0084f731     S........6..1...
1001d918:	00d5bdd6 0069b890 00f8fedf 01f093ff     ......i.........
1001d928:	0048bc16 00363307 03f1acb7 01c40625     ..H..36.....%...
1001d938:	037b07b8 00f60b2d 017769f5 01a1020f     ..{.-....iw.....
1001d948:	032dce07 014aca11 01737c52 009d8dd4     ..-...J.R|s.....
1001d958:	02b419a9 0100b4db 0014a052 01f3bda3     ........R.......
1001d968:	03c2d139 003c4956 0031186a 00dcf9f5     9...VI<.j.1.....
1001d978:	00a7ad16 01c30b76 036fec0e 00651427     ....v.....o.'.e.
1001d988:	0231acac 014a3632 03b8b9fa 01e09b5c     ..1.26J.....\...
1001d998:	01e0f9b3 0092b2e6 02363948 00b83eb1     ........H96..>..
1001d9a8:	00ed7e13 01259f6e 002f523a 0056bbb4     .~..n.%.:R/...V.
1001d9b8:	01d094bc 01852564 00c17006 019cbc81     ....d%...p......
1001d9c8:	03816a53 00cae184 0048cd64 01fdefb9     Sj......d.H.....
1001d9d8:	00da0f3c 013843c4 01ab20e9 00e4db2e     <....C8.. ......
1001d9e8:	03ea6cd0 01e83f13 01c735a4 0105e485     .l...?...5......
1001d9f8:	03dced2a 002539f5 038e118e 001a3e9c     *....9%......>..
1001da08:	025fee2b 0106d902 01f019d4 01aedc27     +._.........'...
1001da18:	0230cd99 01c00d12 006bcd34 018cee4a     ..0.....4.k.J...
1001da28:	02db9c95 01b2acee 02dfbdfa 01d38e1f     ................
1001da38:	018a0fd9 0050c4f1 0262241c 00c7ea15     ......P..$b.....
1001da48:	023622f4 009b108b 0205b5f0 003cc19a     ."6...........<.
1001da58:	030480a6 01389123 00dbf095 00913378     ....#.8.....x3..
1001da68:	012a9952 0092ec8c 02de67c3 003b45cc     R.*......g...E;.
1001da78:	01291635 00c230da 00f2d250 00cfbcd2     5.)..0..P.......
1001da88:	02a1a1bb 000111d7 0071e188 003fb8fa     ..........q...?.
1001da98:	01f85c6b 00030abd 00f2883f 001827d3     k\......?....'..
1001daa8:	01a1ca13 01ba1bad 02efccd1 01a2d128     ............(...
1001dab8:	039ffeb5 003474ab 02621edf 00a2a84c     .....t4...b.L...
1001dac8:	00af353b 010ac913 00c2e08a 019ac193     ;5..............
1001dad8:	020cbdd3 01aec800 01718531 005ab35e     ........1.q.^.Z.
1001dae8:	019b1d3d 01dcabcb 008b4e5b 01b52191     =.......[N...!..
1001daf8:	018d18a8 00b39637 03503c8b 006127d9     ....7....<P..'a.
1001db08:	036b9302 0048f83b 0087b6ad 0071b15e     ..k.;.H.....^.q.
1001db18:	03d7592b 016afc87 0253867a 0142f504     +Y....j.z.S...B.
1001db28:	01273151 00e002dc 00b18161 00593b4d     Q1'.....a...M;Y.
1001db38:	012fe69a 01b65306 02a2690f 0151d488     ../..S...i....Q.
1001db48:	0186b8b3 01a4de27 01fb69dc 007d70ef     ....'....i...p}.
1001db58:	0061073f 01e3683f 012bc66a 00574a39     ?.a.?h..j.+.9JW.
1001db68:	0351cb7e 00c38780 00b11f8c 00c28bdd     ~.Q.............
1001db78:	00d7de03 00e74483 02b256b1 00b4977b     .....D...V..{...
1001db88:	000c3a94 01e03c5a 00fcd453 00a8d74f     .:..Z<..S...O...
1001db98:	01c7ddf8 00017973 0078ac24 01bba220     ....sy..$.x. ...
1001dba8:	03316b38 00152a92 01267cb8 0011a346     8k1..*...|&.F...
1001dbb8:	01b5fbf9 00e3372a 002ca1e2 006eec17     ....*7....,...n.
1001dbc8:	018e9533 00ec055d 026ab7da 004d1842     3...].....j.B.M.
1001dbd8:	01f6b0fe 00e3b1e3 02a36a22 004f2baf     ........"j...+O.
1001dbe8:	014e5f6a 017af1b9 003d0eb8 00ca0124     j_N...z...=.$...
1001dbf8:	03a2b20d 00840bf6 03d1f515 009979dd     .............y..
1001dc08:	001e39a5 003c7d53 01522646 00bc06e5     .9..S}<.F&R.....
1001dc18:	039dde6d 013f7636 00ba97cc 019521e3     m...6v?......!..
1001dc28:	015ce6a1 01b90141 01a532d3 0140928d     ..\.A....2....@.
1001dc38:	00daf29d 007da415 017a8bd5 00574743     ......}...z.CGW.
1001dc48:	01b29ecb 002b5c97 034e2457 0099ec60     .....\+.W$N.`...
1001dc58:	0378bb88 01ab8670 02d9d512 01d15ed7     ..x.p........^..
1001dc68:	003d05fb 00ca035e 03b71a03 012bbf3f     ..=.^.......?.+.
1001dc78:	03056f85 01ef0326 03faffd8 01473faf     .o..&........?G.
1001dc88:	014df549 0112aefa 03e33121 01fb2ef5     I.M.....!1......
1001dc98:	01302399 013d9d7d 0015171e 014d8d81     .#0.}.=.......M.
1001dca8:	01077865 008c4cc2 0334afbc 00945110     ex...L....4..Q..
1001dcb8:	013756e8 00ac30e1 032a2a86 002f32ed     .V7..0...**..2/.
1001dcc8:	02b1a9c8 01a58bfa 03b9a30b 01ab28a3     .............(..
1001dcd8:	021b9f98 015b6df2 017018dd 00e7d612     .....m[...p.....
1001dce8:	02b59d6b 010093c2 00fe1296 01579314     k.............W.
1001dcf8:	03efc30d 0017f744 0380e5ee 007031b0     ....D........1p.
1001dd08:	03fb62a8 00f84778 029108f3 0199e3f5     .b..xG..........
1001dd18:	036863c2 01be8c58 027e42b0 0042b969     .ch.X....B~.i.B.
1001dd28:	001fda31 009eaefc 01e64fbc 00e029ee     1........O...)..
1001dd38:	0108ead4 00b50b88 00dfd29b 0144c565     ............e.D.
1001dd48:	018d52fe 00e989fa 01855661 00455010     .R......aV...PE.
1001dd58:	009f8384 00645d74 008b8d2d 019dac98     ....t]d.-.......
1001dd68:	03537593 005ec343 00c9842e 005898f0     .uS.C.^.......X.
1001dd78:	024539a4 012ae09f 0343d73a 018dc376     .9E...*.:.C.v...
1001dd88:	0279b423 01082fce 005b2b47 002e9947     #.y../..G+[.G...
1001dd98:	03701027 016188d8 0219c6db 003135b0     '.p...a......51.
1001dda8:	038658de 003c0f7f 03a9c0cf 01d174bf     .X....<......t..
1001ddb8:	03c9c8bd 0096878a 03b037ea 0041323c     .........7..<2A.
1001ddc8:	03a96c98 010155db 00e3876f 00ba1aa2     .l...U..o.......
1001ddd8:	02b960cf 006b88f3 01d34e6a 01b7d5c8     .`....k.jN......
1001dde8:	027a0c06 013ccbdd 02c76e20 00756afa     ..z...<. n...ju.
1001ddf8:	0104e1e4 01073a78 0254c1dc 001b856f     ....x:....T.o...
1001de08:	0132994a 009761c6 03560b6e 01ae758e     J.2..a..n.V..u..
1001de18:	00c8d472 00b7ca05 020aa4ed 003eefb8     r.............>.
1001de28:	021278ec 01637b61 0266c55c 01cde4fc     .x..a{c.\.f.....
1001de38:	01c93b02 002e622a 032325db 0026c3a8     .;..*b...%#...&.
1001de48:	01c17c5e 00df2b9c 0285485f 00bfce77     ^|...+.._H..w...
1001de58:	02c2c9a8 00d6ea2d 033185bf 0077a962     ....-.....1.b.w.
1001de68:	0123bbbe 012d1573 004883f8 017b0670     ..#.s.-...H.p.{.
1001de78:	02b531d5 0022e9a5 03efc57a 014fbbb0     .1....".z.....O.
1001de88:	01022efd 00bea7fa 00138154 01a671cb     ........T....q..
1001de98:	02bd1ff8 01ca9d47 034947cf 004818ce     ....G....GI...H.
1001dea8:	01610042 01261e24 035d0172 01e7675f     B.a.$.&.r.]._g..
1001deb8:	013b9ec4 00f0a4c0 0339caca 0030ae17     ..;.......9...0.
1001dec8:	019b4d59 00d74c2a 0112100a 014c51d2     YM..*L.......QL.
1001ded8:	03c0d057 016bf37d 03788ded 01ea79c6     W...}.k...x..y..
1001dee8:	033b0c88 017bdc23 023cb393 001d0cef     ..;.#.{...<.....
1001def8:	00e997f4 00513017 02347fef 012582e2     .....0Q...4...%.
1001df08:	015d74f7 0076847c 01c0fead 0153eb06     .t].|.v.......S.
1001df18:	01e7af6d 00b61cfb 03373409 008c5910     m........47..Y..
1001df28:	003b22af 0177a554 03eae2df 01a64806     .";.T.w......H..
1001df38:	01ff737a 00f6d612 014707fa 00b9dcd9     zs........G.....
1001df48:	025df981 0080b853 003eb54c 00ba80af     ..].S...L.>.....
1001df58:	02883564 00e21d6c 013ae9dd 004a6314     d5..l.....:..cJ.
1001df68:	00a01600 00150d86 034c23c1 00af7d25     .........#L.%}..
1001df78:	00d261bd 012cee72 02a9bc28 009aba2c     .a..r.,.(...,...
1001df88:	00165c51 00c1a084 0362d079 012c510c     Q\......y.b..Q,.
1001df98:	026e1f7a 012df1ed 01efd998 012fa861     z.n...-.....a./.
1001dfa8:	011055f8 013eaf1c 0036fe38 007ee7de     .U....>.8.6...~.
1001dfb8:	02752da6 0160bd11 00529ccb 01153a47     .-u...`...R.G:..
1001dfc8:	02bf72cf 00932631 00c3d89a 00121965     .r..1&......e...
1001dfd8:	03d7fa3c 01eb84e8 018eaf66 005c0e10     <.......f.....\.
1001dfe8:	00324ce4 005ef4c8 017898c6 01452244     .L2...^...x.D"E.
1001dff8:	02a0410b 005a1364 0378c5a7 01b93643     .A..d.Z...x.C6..
1001e008:	00bcda28 0030a871 031f0447 0171f41b     (...q.0.G.....q.
1001e018:	000b3a49 01f6dc3e 02c89a78 01b2d28f     I:..>...x.......
1001e028:	0181397d 010efa2b 011c6f64 01f1562f     }9..+...do../V..
1001e038:	01bd6945 0120521a 01a45db8 01edf0e4     Ei...R ..]......
1001e048:	0035b641 015cc5ab 01e9096a 019078c7     A.5...\.j....x..
1001e058:	030a314d 0169aa6c 0396463d 01054934     M1..l.i.=F..4I..
1001e068:	009e1a1d 00561ad1 004aed8a 00bc5fa4     ......V...J.._..
1001e078:	021d3c8e 01f874a1 00a0afba 00101297     .<...t..........
1001e088:	02a743d6 01d001c2 03dd1183 005ad932     .C..........2.Z.
1001e098:	0332eb43 008fd2de 018235b3 00c66ae9     C.2......5...j..
1001e0a8:	03dcadd9 0118e56f 02416fd1 012786ca     ....o....oA...'.
1001e0b8:	03316c57 01471a82 02d71bdc 015d6967     Wl1...G.....gi].
1001e0c8:	021fec1e 01d30086 016e7f8e 00e549d4     ..........n..I..
1001e0d8:	025d9a9c 01f6cb46 0385422f 01e68802     ..].F.../B......
1001e0e8:	0271dd16 00d56fea 025f78aa 0002ddfa     ..q..o...x_.....
1001e0f8:	029e822d 01d95e68 01c02a17 01a39f92     -...h^...*......
1001e108:	006fe8b6 0115e54d 008f3546 00224c1b     ..o.M...F5...L".
1001e118:	032f88f6 01b627da 01c9e05b 010e8e13     ../..'..[.......
1001e128:	02b434f2 012d44d4 001c2667 004c9ef4     .4...D-.g&....L.
1001e138:	0360c8a1 010d35ce 009443ba 00f836aa     ..`..5...C...6..
1001e148:	03b2a277 000b1452 03f1b645 00f576a2     w...R...E....v..
1001e158:	016a6d09 01f7b5aa 03ee2f4d 01b0d253     .mj.....M/..S...
1001e168:	008b6bd4 000b2627 00961548 00458248     .k..'&..H...H.E.
1001e178:	01dacfaa 01459a4a 0331f689 0064209a     ....J.E...1.. d.
1001e188:	03694a7d 013d5559 03b1e522 01c17d3d     }Ji.YU=."...=}..
1001e198:	01bc5698 00d47849 029b4dcd 0015858d     .V..Ix...M......
1001e1a8:	02ac6f47 013b2ae1 01d700b2 00f18021     Go...*;.....!...
1001e1b8:	010dfcea 00084fb8 03491e6e 00bd8df5     .....O..n.I.....
1001e1c8:	02f67bbe 0126d186 012c3a96 01d6455c     .{....&..:,.\E..
1001e1d8:	03580c0d 01a699fb 0370cffc 01534e3b     ..X.......p.;NS.
1001e1e8:	006e7ce2 01fc60b4 030168ec 0123992a     .|n..`...h..*.#.
1001e1f8:	00a86f4f 00a8af6e 032d6929 01cd0eda     Oo..n...)i-.....
1001e208:	028ce9a3 0076012a 00c343e9 019f52b2     ....*.v..C...R..
1001e218:	02217522 0152dca3 031b0128 01a6a425     "u!...R.(...%...
1001e228:	02a963a3 0146903c 0012a6bf 0042fa6b     .c..<.F.....k.B.
1001e238:	003241c5 0112b301 037a5777 015aeed3     .A2.....wWz...Z.
1001e248:	027c238f 00a48c18 022cd7fb 016b4684     .#|.......,..Fk.
1001e258:	0250e364 0037a95b 00312ad7 0155b472     d.P.[.7..*1.r.U.
1001e268:	008d3982 01d038c3 034682fd 01f0ad1f     .9...8....F.....
1001e278:	00c7dc1c 0173646e 00f9e583 01dfe9e4     ....nds.........
1001e288:	02d1d824 01d1b1b1 011be821 0019d5ac     $.......!.......
1001e298:	027bb03e 0118851f 003ebfe0 0099465d     >.{.......>.]F..
1001e2a8:	01682ab5 01e0bf16 038cc8c7 0025eaf8     .*h...........%.
1001e2b8:	02a52da4 007261df 03a86189 00acdee0     .-...ar..a......
1001e2c8:	01310da5 01ccebd2 021c04fb 0097a045     ..1.........E...
1001e2d8:	0234bee8 015df852 01a73b0a 009a2b18     ..4.R.]..;...+..
1001e2e8:	00bebe1c 0081bc8d 03cbebe8 016d00e9     ..............m.
1001e2f8:	009f4135 01e8583c 0296fd78 0183e9fb     5A..<X..x.......
1001e308:	014dd72b 01b3afaf 0042329f 00d03079     +.M......2B.y0..
1001e318:	03d1a93f 00c8d1ff 012cbbe0 0052a249     ?.........,.I.R.
1001e328:	038fb009 01c14c12 01296ec6 01474d53     .....L...n).SMG.
1001e338:	023b16c7 01f2fd69 03cf0c14 00bd42ec     ..;.i........B..
1001e348:	01cac65a 007face1 00ca1635 0084e638     Z.......5...8...
1001e358:	002b33f3 0141628e 0016913e 005d6a46     .3+..bA.>...Fj].
1001e368:	016b8ae8 013db36e 01da81d2 005cd1f2     ..k.n.=.......\.
1001e378:	01d95a23 016a8fb6 00b75601 002abe6d     #Z....j..V..m.*.
1001e388:	01ae44f3 009ae46d 017ab1c8 01b7a023     .D..m.....z.#...
1001e398:	035530b0 01a9da59 004e98f7 006efeca     .0U.Y.....N...n.
1001e3a8:	03d96561 01ddfa71 0006ccac 00a3963c     ae..q.......<...
1001e3b8:	032cac49 01506eee 02994cec 00f98ca0     I.,..nP..L......
1001e3c8:	00e5e895 01281f85 000df999 0104b2e6     ......(.........
1001e3d8:	00ee29dc 0179e376 028c575d 005c77fd     .)..v.y.]W...w\.
1001e3e8:	02f6ef49 00805774 0391d313 00fc2eb0     I...tW..........
1001e3f8:	0077a49b 00d63371 0202e481 00f3223f     ..w.q3......?"..
1001e408:	03f4e36b 01c86aad 01469953 00102332     k....j..S.F.2#..
1001e418:	02d84afa 0142bdeb 01f65be5 01f78045     .J....B..[..E...
1001e428:	01364dc9 01090b08 00a66098 01add6d9     .M6......`......
1001e438:	0102c085 0000cf00 016baebd 0064868c     ..........k...d.
1001e448:	03b870fc 008bdfb7 0277b128 015a7bb5     .p......(.w..{Z.
1001e458:	00b0a5af 00c24df7 0078ea1b 01d600e7     .....M....x.....
1001e468:	001e273a 0191637d 01f3c18b 00ab66b6     :'..}c.......f..
1001e478:	00339aeb 017b058e 0159a83b 015c0ed9     ..3...{.;.Y...\.
1001e488:	0105d612 00fea7d3 02ca062c 01ec1277     ........,...w...
1001e498:	01444483 00f8de8d 03d27b99 01987f6d     .DD......{..m...
1001e4a8:	01d621e4 00c5dd87 00026189 01cc8f0c     .!.......a......
1001e4b8:	00bc2950 01824f73 01e0706d 00e6a161     P)..sO..mp..a...
1001e4c8:	032663fe 00c59f39 00db4297 018f453b     .c&.9....B..;E..
1001e4d8:	00f970b8 012f8877 0084827a 015f47a8     .p..w./.z....G_.
1001e4e8:	0084034b 01bbaf98 030a8d7b 01b3c07d     K.......{...}...
1001e4f8:	00c6670a 002d0695 01bb55db 01b212e6     .g....-..U......
1001e508:	0098b647 01b8c603 0128b071 00adb9e8     G.......q.(.....
1001e518:	01755dcf 016c9d44 02930565 00216130     .]u.D.l.e...0a!.
1001e528:	026f4159 01a31ef6 01ddd97b 00d8fa66     YAo.....{...f...
1001e538:	01ee1fc4 0010f04d 0119f2d5 00a84726     ....M.......&G..
1001e548:	025dbacd 018cd330 03b400da 00a57685     ..].0........v..
1001e558:	038693a0 0123ba6d 024baec6 00123738     ....m.#...K.87..
1001e568:	01ec05e3 00add5e5 01da6dc9 00efe931     .........m..1...
1001e578:	019e371e 006ab219 01bc6f9b 008c7e5e     .7....j..o..^~..
1001e588:	002af3c6 007792f3 01a3eb86 0187f104     ..*...w.........
1001e598:	02c12ec0 014fb466 02b804e0 008276f1     ....f.O......v..
1001e5a8:	01b08792 001e6fea 02300df4 000e9476     .....o....0.v...
1001e5b8:	03561c72 0119ed4a 0210e590 01356480     r.V.J........d5.
1001e5c8:	02789685 00329da7 03684817 000e31df     ..x...2..Hh..1..
1001e5d8:	02d54245 007b6028 032a5e79 01c3bfb1     EB..(`{.y^*.....
1001e5e8:	002a822d 01085475 02d631e8 006d7aed     -.*.uT...1...zm.
1001e5f8:	01594706 007bd3ec 03167bec 0197b996     .GY...{..{......
1001e608:	01b850a9 0014b686 01656429 00102199     .P......)de..!..
1001e618:	016f9a4c 01eace56 02a4a0bf 015d7ba4     L.o.V........{].
1001e628:	02182fcf 00202422 03b7ba98 0014ca44     ./.."$ .....D...
1001e638:	00c385c3 00f733de 015eaba9 01a000b7     .....3....^.....
1001e648:	0112cd3f 010f539c 02a4d801 01af1142     ?....S......B...
1001e658:	033b0ba8 013d299d 030ebc48 018906c2     ..;..)=.H.......
1001e668:	031d9315 01036713 03e382f5 00802879     .....g......y(..
1001e678:	02f93ac5 016e59fa 02580a31 00d82b32     .:...Yn.1.X.2+..
1001e688:	01c6f262 007197f5 01c2ecab 01c71fc5     b.....q.........
1001e698:	012651e4 00143b29 013f0c9c 00c6b791     .Q&.);....?.....
1001e6a8:	03737868 00f7fb81 03a7d411 01847b3d     hxs.........={..
1001e6b8:	00bd64f6 0098df9b 0021c58f 012c3b9b     .d........!..;,.
1001e6c8:	00e668ea 010e5d98 0292f2f5 01f0a9d5     .h...]..........
1001e6d8:	026c66ef 00eca79f 00bcda9a 01cae996     .fl.............
1001e6e8:	01fa131a 01854702 01f05d96 0157037f     .....G...]....W.
1001e6f8:	01cf475e 010155a7 037498bb 00171709     ^G...U....t.....
1001e708:	015dc389 00616236 03a800f0 007fbc93     ..].6ba.........
1001e718:	02a73196 0194fec6 008306fa 0181febb     .1..............
1001e728:	003e5254 013a17b2 000584fd 0027d5a4     TR>...:.......'.
1001e738:	0292fc86 01513524 00976b86 00abfd4c     ....$5Q..k..L...
1001e748:	00c0845a 00361692 023642e0 01e5bae5     Z.....6..B6.....
1001e758:	00c4b626 0182fb94 026c8340 00a0017f     &.......@.l.....
1001e768:	00528688 01eea7cd 03b42d5d 00a12883     ..R.....]-...(..
1001e778:	01706ffe 00d94b36 01dde6b3 01bf5eeb     .op.6K.......^..
1001e788:	0130f316 01cb91ca 0381084f 01482325     ..0.....O...%#H.
1001e798:	01dc24d2 00591a28 02c540a8 01efde02     .$..(.Y..@......
1001e7a8:	02d75301 00699fb3 00c2733a 016a74ba     .S....i.:s...tj.
1001e7b8:	032a7627 00fd8d74 00de00fe 0032fb2b     'v*.t.......+.2.
1001e7c8:	01eaa936 00d04450 02f3cb94 00870790     6...PD..........
1001e7d8:	0000fe06 007fb9fc 03dbf7e5 00c17680     .............v..
1001e7e8:	01b7aeca 0048a1a6 02936bc9 004a88ec     ......H..k....J.
1001e7f8:	016ae6e9 00a86f69 011ee040 0003e501     ..j.io..@.......
1001e808:	03d330b2 015ac8f0 0360d1a6 00dd8238     .0....Z...`.8...
1001e818:	03c8722e 0042b83c 0218b637 0021b66d     .r..<.B.7...m.!.
1001e828:	03e8beab 001f5e71 03af9753 01e4eec1     ....q^..S.......
1001e838:	00d4fafd 0079edbb 0160fb43 000b1ec5     ......y.C.`.....
1001e848:	00cc5fb7 008a59cd 0125dd40 011edfff     ._...Y..@.%.....
1001e858:	0008dd12 00fee72f 005370ff 01d70f76     ..../....pS.v...
1001e868:	022819ac 011fc1bf 039215ed 0176c1aa     ..(...........v.
1001e878:	0235ea64 0070d482 00cba34a 0094e9af     d.5...p.J.......
1001e888:	0033701a 0109c1c1 00f9870e 0082e396     .p3.............
1001e898:	01db00cc 00cdf218 0375d0ee 0070f415     ..........u...p.
1001e8a8:	016bc059 001bd008 030fd9b5 00e895e6     Y.k.............
1001e8b8:	007eec8c 01c70990 02b54f0b 01cab692     ..~......O......
1001e8c8:	03b66d12 00e1d430 0022e51a 01bc5025     .m..0.....".%P..
1001e8d8:	02ce2d25 01e15aef 032f031c 004ce029     %-...Z..../.).L.
1001e8e8:	00a7f3ba 010f8420 007d3304 0018878b     .... ....3}.....
1001e8f8:	0259838d 00183320 035b95f3 000e34fc     ..Y. 3....[..4..
1001e908:	0243a923 01581e30 03241bb2 00b78ca4     #.C.0.X...$.....
1001e918:	0097bd3a 00001f58 00dbf0f3 0185e5ac     :...X...........
1001e928:	0032d6f5 01cf0be7 01537ebe 01aaa3b4     ..2......~S.....
1001e938:	011838f4 01d3a4b2 01ca1002 01763962     .8..........b9v.
1001e948:	0042a94b 01c76542 01c7d817 011ac479     K.B.Be......y...
1001e958:	02cb4f0d 0151e2ef 030a1c5d 01f0c152     .O....Q.]...R...
1001e968:	0383c1cb 00560f5d 01a27ae1 01a8bbd7     ....].V..z......
1001e978:	002e9d9d 00a2ab38 0165f0e8 0009167a     ....8.....e.z...
1001e988:	03150933 01ee1934 02e81ed8 0094a97c     3...4.......|...
1001e998:	009d28c7 00d1c133 00b1f200 00f7b966     .(..3.......f...
1001e9a8:	00746d9e 005b8726 0095afdf 010142dc     .mt.&.[......B..
1001e9b8:	00e83c55 01256019 0066e80d 00250994     U<...`%...f...%.
1001e9c8:	018d61a5 002983e4 03f30fde 001112fd     .a....).........
1001e9d8:	01ed3c06 0071036a 00bd843b 001e705c     .<..j.q.;...\p..
1001e9e8:	00fa6fff 01bb3919 00a460a0 00f3102f     .o...9...`../...
1001e9f8:	02fb8d0c 01b8ea42 00a11228 016006af     ....B...(.....`.
1001ea08:	0234ac9f 01b7b017 00d5d056 01b35430     ..4.....V...0T..
1001ea18:	02e779ba 016dd81a 026bdda1 01c3ef48     .y....m...k.H...
1001ea28:	03391ff9 01598794 017317b8 019da303     ..9...Y...s.....
1001ea38:	0155c1b3 0189797c 03723296 013ccbdb     ..U.|y...2r...<.
1001ea48:	0105efce 016b2600 025eee36 005e9845     .....&k.6.^.E.^.
1001ea58:	014ddcd5 01451178 03144951 000ad2ce     ..M.x.E.QI......
1001ea68:	03966aea 015a225d 02399ffd 006385db     .j..]"Z...9...c.
1001ea78:	02b4938b 00b91717 031e3929 004c61bc     ........)9...aL.
1001ea88:	03bea455 0051eaca 02253126 007c903c     U.....Q.&1%.<.|.
1001ea98:	02314e89 0030f7a7 00fca45f 0087a969     .N1...0._...i...
1001eaa8:	0086e4fd 004ba640 03dfbb2e 0125acdf     ....@.K.......%.
1001eab8:	015f3e21 00f090e7 027e6a4d 005b983f     !>_.....Mj~.?.[.
1001eac8:	009b621d 0135fbe2 0305d3e9 01decb8f     .b....5.........
1001ead8:	002ec4de 01ea7167 0279652d 01fa7c27     ....gq..-ey.'|..
1001eae8:	02f22d86 01a8f908 03836c8b 00aba38e     .-.......l......
1001eaf8:	03c7ad32 018ede57 02ddb0a4 0018e704     2...W...........
1001eb08:	00cd7ab3 01860124 0297467c 00fce460     .z..$...|F..`...
1001eb18:	021781ac 01d15a2f 0152e095 001e8654     ..../Z....R.T...
1001eb28:	009e5fc8 01a3c08e 00877506 00167c6f     ._.......u..o|..
1001eb38:	02410cec 01412643 00feaee2 0026f5f4     ..A.C&A.......&.
1001eb48:	03d032f0 00fa3fa0 0170a294 00c56e41     .2...?....p.An..
1001eb58:	00a925f1 01833842 0253c909 01bbfd84     .%..B8....S.....
1001eb68:	022d70b0 0000fbc3 0397fac4 01d6e8ed     .p-.............
1001eb78:	00efd13c 0013237a 02e6210e 00719f01     <...z#...!....q.
1001eb88:	037f146a 0060cde3 02aed289 0190d4b3     j.....`.........
1001eb98:	019a6258 008b5822 00cdd196 0076f01c     Xb.."X........v.
1001eba8:	01534c47 005b63ec 0183fa2a 01401260     GLS..c[.*...`.@.
1001ebb8:	0023de75 01cbd671 03b87779 00241341     u.#.q...yw..A.$.
1001ebc8:	01ba919c 0187f537 01b55699 01f63a64     ....7....V..d:..
1001ebd8:	033cc76c 0186cc51 01e631d6 01c0e58c     l.<.Q....1......
1001ebe8:	03fbc1dd 010f8850 00f940b9 008b5992     ....P....@...Y..
1001ebf8:	01873e86 0065e968 001a54bc 0081f931     .>..h.e..T..1...
1001ec08:	034bd6d0 014d82ce 00ebaf72 018902ab     ..K...M.r.......
1001ec18:	03a295a0 011d2716 024b5f06 00de51be     .....'..._K..Q..
1001ec28:	035a51f1 01c9316a 009dd3f3 01958cde     .QZ.j1..........
1001ec38:	0238db40 015af6bc 013533eb 00ae78fd     @.8...Z..35..x..
1001ec48:	03a806c5 00ab75c9 00ce15a3 015a5572     .....u......rUZ.
1001ec58:	030a290e 006313c1 02d83741 007492a1     .)....c.A7....t.
1001ec68:	019d3bb2 0034db30 00d72262 01bb111c     .;..0.4.b"......
1001ec78:	0018a9ae 01a14f5c 01c2c8eb 00ea8f93     ....\O..........
1001ec88:	0107e1e5 000ea8c5 03d4ce1f 011d923f     ............?...
1001ec98:	01839e9d 0182a564 038117ab 0109357c     ....d.......|5..
1001eca8:	0112c10e 010b311a 01c9aeb4 010ec987     .....1..........
1001ecb8:	00bb79bb 00c78662 02b3bcab 01ee0bd1     .y..b...........
1001ecc8:	02827b41 003dea33 02177130 01785605     A{..3.=.0q...Vx.
1001ecd8:	00f5b276 00c98157 00951364 004f62db     v...W...d....bO.
1001ece8:	028f632a 0130005f 0253f9c4 014f9567     *c.._.0...S.g.O.
1001ecf8:	02886eea 012c8051 02242940 000ad357     .n..Q.,.@)$.W...
1001ed08:	00d18df2 005572ca 00a11694 0030c367     .....rU.....g.0.
1001ed18:	03ab3119 00824389 027a49b6 00821893     .1...C...Iz.....
1001ed28:	009ae5d3 009e9b20 030db188 01baf347     .... .......G...
1001ed38:	037d1174 01d33ad2 00df4f5c 01f5585a     t.}..:..\O..ZX..
1001ed48:	036fd18a 002fde45 034ff60a 00b2d9c5     ..o.E./...O.....
1001ed58:	003d6954 0109c2b1 015659a5 00bb5336     Ti=......YV.6S..
1001ed68:	037528f9 01d7036c 012c9234 00b32f3f     .(u.l...4.,.?/..
1001ed78:	0203d8c2 0088540d 010be1d0 01b37e4e     .....T......N~..
1001ed88:	007e2b3d 00239467 02a50881 0094f0f4     =+~.g.#.........
1001ed98:	008e333d 0086d051 0373890f 01ec77d2     =3..Q.....s..w..
1001eda8:	03b2a224 00bcb82c 022c1c92 00315aa8     $...,.....,..Z1.
1001edb8:	01f1b278 017f7b0e 01c7f106 013242bd     x....{.......B2.
1001edc8:	02658fc5 0187f3bc 03f8f58c 01888601     ..e.............
1001edd8:	013a8be5 00fea4a0 038d5572 01b6a630     ..:.....rU..0...
1001ede8:	0154468f 0007b655 005d352e 01a1a609     .FT.U....5].....
1001edf8:	0218187a 0057614a 019afb76 009c36ed     z...JaW.v....6..
1001ee08:	03cf92ab 01f6c482 01714087 0039e897     .........@q...9.
1001ee18:	0073daf0 011b3d31 02c4e5f9 01497b67     ..s.1=......g{I.
1001ee28:	0260684c 0008b481 00397b68 01e5cadc     Lh`.....h{9.....
1001ee38:	00d3f965 01e80e56 00d14eb5 00a4e1ef     e...V....N......
1001ee48:	01498140 011ba9fc 010a8427 01c1c95a     @.I.....'...Z...
1001ee58:	01f079fb 0029ceba 0061c62b 00b76491     .y....).+.a..d..
1001ee68:	0250d8cc 004196ab 03200d57 01114977     ..P...A.W. .wI..
1001ee78:	00e94385 00b5fe53 0170ecb7 01834030     .C..S.....p.0@..
1001ee88:	03f3d8f0 00e2c140 0264f1ce 01a68663     ....@.....d.c...
1001ee98:	011a78bc 00acb836 02ccf20c 00e64284     .x..6........B..
1001eea8:	011f2622 005070b8 02a53320 0037f3be     "&...pP. 3....7.
1001eeb8:	0292493a 01cda79a 00c5caed 00510d37     :I..........7.Q.
1001eec8:	03667c20 00b1e427 011fb576 0186a0e7      |f.'...v.......
1001eed8:	00cabb76 013c8e00 03bd267f 0096c9a5     v.....<..&......
1001eee8:	03986864 01cffec4 00f713ac 00ca0aee     dh..............
1001eef8:	00f297ef 01273b5e 03661def 019a5c09     ....^;'...f..\..
1001ef08:	03db54e4 005081a0 009dd197 002f4789     .T....P......G/.
1001ef18:	0020568f 0002f2c6 018830d4 00baac5c     .V ......0..\...
1001ef28:	016997e6 00e5bf60 02bf508a 0182d8ef     ..i.`....P......
1001ef38:	01cc5ad0 01aedbf0 0191669d 014cb235     .Z.......f..5.L.
1001ef48:	01a86c33 006bde53 006d24d3 00383a76     3l..S.k..$m.v:8.
1001ef58:	00161d08 00c7a0ed 02062b4f 0031c4a7     ........O+....1.
1001ef68:	015b12fd 00794990 0127923d 0118683f     ..[..Iy.=.'.?h..
1001ef78:	0270a5b7 0062eb7d 0362d550 01573c7a     ..p.}.b.P.b.z<W.
1001ef88:	01c23d58 00440419 00338b0f 016a84a4     X=....D...3...j.
1001ef98:	022e7421 00c55fa7 0017d489 003a9c48     !t..._......H.:.
1001efa8:	02457089 019a6995 01f58c52 01ad78df     .pE..i..R....x..
1001efb8:	0186c60e 00ef3cce 035ceae7 0113ee20     .....<....\. ...
1001efc8:	018e71a4 002677b0 02a62ba0 00695bee     .q...w&..+...[i.
1001efd8:	009dc9ec 019ad417 02e35287 01dd3be1     .........R...;..
1001efe8:	00c0955e 01347651 01d72b20 014b930e     ^...Qv4. +....K.
1001eff8:	02799c58 004f120d 02b3e1b9 00975196     X.y...O......Q..
1001f008:	03ec2847 003e3f89 03f04f06 00b5b9b6     G(...?>..O......
1001f018:	001b3276 00c0e33f 013a637b 019be032     v2..?...{c:.2...
1001f028:	018bd080 013eda97 0108589b 0162b8d2     ......>..X....b.
1001f038:	037baf13 00e55365 017441dc 0104fa96     ..{.eS...At.....
1001f048:	03dc8e5b 0142f721 02dfe111 014de0db     [...!.B.......M.
1001f058:	017b2c0d 00af808d 00c8d4f8 01b73b96     .,{..........;..
1001f068:	001d6192 00b5cc96 004725fd 00775591     .a.......%G..Uw.
1001f078:	0362127d 011ffe0c 0382b1f4 00238e6b     }.b.........k.#.
1001f088:	02f27dab 01220c8b 00a2a1a4 0065cdce     .}....".......e.
1001f098:	012219f7 00399164 00bac89a 01f98002     ..".d.9.........
1001f0a8:	007c1852 008f570e 01f533a8 01e7977c     R.|..W...3..|...
1001f0b8:	01c5f0cf 00b9be7c 00f63a30 00e8e914     ....|...0:......
1001f0c8:	00394627 01cbcc76 00a200f1 001ef4a5     'F9.v...........
1001f0d8:	00e274c6 01996f80 01b6368b 010f7a3c     .t...o...6..<z..
1001f0e8:	01393a9a 00c63236 02fffe19 011740ca     .:9.62.......@..
1001f0f8:	036cde4e 004bf926 00327cf1 008598ef     N.l.&.K..|2.....
1001f108:	0069f1dd 00629793 0279a1d5 008931f1     ..i...b...y..1..
1001f118:	031dd398 01a78a6a 03c76bac 00c1a16c     ....j....k..l...
1001f128:	03f24859 015973cd 028efef9 015ecab0     YH...sY.......^.
1001f138:	00325950 01426907 02f925e9 001bb729     PY2..iB..%..)...
1001f148:	03e677b8 01a320d8 01e4fbcf 01833e89     .w... .......>..
1001f158:	0209404e 0071305d 02328a11 0016ffc0     N@..]0q...2.....
1001f168:	03cae00b 0084dc08 01eb26c6 00568d66     .........&..f.V.
1001f178:	01512b3c 001a1c88 020824e9 0094f2ce     <+Q......$......
1001f188:	003fa2a4 01e02e33 01c512e4 00683743     ..?.3.......C7h.
1001f198:	035fcd10 0042252f 013f9c37 014a5240     .._./%B.7.?.@RJ.
1001f1a8:	024735c7 007d43ee 00dee01a 015d89df     .5G..C}.......].
1001f1b8:	034f305f 00e2af08 03c103de 01e8a02e     _0O.............
1001f1c8:	02695dfe 00e62a0d 01528a1a 00f42bd0     .]i..*....R..+..
1001f1d8:	0326271b 017fd061 0389db9d 01820305     .'&.a...........
1001f1e8:	031ea731 012f9f3b 029d8080 00bd035d     1...;./.....]...
1001f1f8:	0044a603 00d7df53 01c25a96 0041a80f     ..D.S....Z....A.
1001f208:	03b69540 00d1fa04 021c3cbb 01da1930     @........<..0...
1001f218:	03cd74a8 00781276 0393749c 016d3583     .t..v.x..t...5m.
1001f228:	00ca0a0c 00a7536e 033353d0 0142abcc     ....nS...S3...B.
1001f238:	013cbb35 012d6698 00e19a76 0088f7f0     5.<..f-.v.......
1001f248:	03b2c564 01df478a 011052cb 012ace29     d....G...R..).*.
1001f258:	0368d593 010ac959 01427b4f 00ba2116     ..h.Y...O{B..!..
1001f268:	02630701 000ace1d 0005eae5 00d21e35     ..c.........5...
1001f278:	02dc088a 00a73746 03ddc09c 01f47bd7     ....F7.......{..
1001f288:	03b9dad9 01efbaba 03a0acfb 001634c2     .............4..
1001f298:	02b5ae90 017364ba 03b04ed2 00c1071a     .....ds..N......
1001f2a8:	0156e148 00bcbe76 0165c1fe 01acf9ab     H.V.v.....e.....
1001f2b8:	02b79e5d 016c025c 034c5daf 014f6348     ]...\.l..]L.HcO.
1001f2c8:	02814049 00412ef5 00f1ed67 003f4c5a     I@....A.g...ZL?.
1001f2d8:	03784a3e 006ec379 00b20477 00d2f2de     >Jx.y.n.w.......
1001f2e8:	022e2182 0029289b 017092a7 016fa331     .!...()...p.1.o.
1001f2f8:	027ff163 016697f5 02d0352b 00ea663a     c.....f.+5..:f..
1001f308:	03a4af9a 0020f257 0001266f 01beb6ff     ....W. .o&......
1001f318:	020fb072 00813ca8 00ebb079 010ecf4c     r....<..y...L...
1001f328:	01c61902 00d5eb29 01d62455 016d5c31     ....)...U$..1\m.
1001f338:	021e18c7 00c3eca7 017c2791 0095c3ec     .........'|.....
1001f348:	00b61575 008d9fcb 004d87df 01b0e6b0     u.........M.....
1001f358:	03d7e5bd 01b52562 038a1532 0159bd18     ....b%..2.....Y.
1001f368:	02a53030 00f72d97 03b8245a 01aa5542     00...-..Z$..BU..
1001f378:	021a2325 01447c82 03239bee 00a4c935     %#...|D...#.5...
1001f388:	037516c4 00cd0f30 011de018 0090717e     ..u.0.......~q..
1001f398:	00de6caa 0005ca50 0267451b 018116cb     .l..P....Eg.....
1001f3a8:	023efcb3 015b01d1 03fe6e91 001ca2da     ..>...[..n......
1001f3b8:	01d5fcdf 0021083b 0362fa4a 01c82ae0     ....;.!.J.b..*..
1001f3c8:	03cdd9bf 00a710d1 015f8463 0039e62b     ........c._.+.9.
1001f3d8:	03cb0bfe 013fbc62 02fbc176 0036694f     ....b.?.v...Oi6.
1001f3e8:	00f410ce 0030d381 00d0a06b 00d13b70     ......0.k...p;..
1001f3f8:	02d84d6d 01b91521 033863f5 01138bb2     mM..!....c8.....
1001f408:	03321db8 00135953 01bdb5d5 017045b7     ..2.SY.......Ep.
1001f418:	03a5abcf 01b46d2e 00a5537a 0134a292     .....m..zS....4.
1001f428:	03040b99 015ae396 02618991 0129e93c     ......Z...a.<.).
1001f438:	03b15f95 01c60097 0371fe94 01a35ae0     ._........q..Z..
1001f448:	00f7d97c 00e01112 02784280 010919bf     |........Bx.....
1001f458:	00cddd31 0046d431 03372a4b 00eca46b     1...1.F.K*7.k...
1001f468:	00fe4498 01838c0a 024f6a09 00899ef2     .D.......jO.....
1001f478:	0242b243 01c67bb0 00223e0e 012a58c5     C.B..{...>"..X*.
1001f488:	00a4ffd6 0009d102 02db34dd 01f4e0ab     .........4......
1001f498:	01ce385d 0102b3f2 01a45b1e 018a2ee6     ]8.......[......
1001f4a8:	00dce6bc 013d2f39 02242584 01f396b8     ....9/=..%$.....
1001f4b8:	0153d4e3 00b497ac 009ba9c9 00ea3cf4     ..S..........<..
1001f4c8:	0104eb8e 003cda43 014b71c0 01cff374     ....C.<..qK.t...
1001f4d8:	009d0b6f 00985bb1 0062e61c 007e5761     o....[....b.aW~.
1001f4e8:	039159c6 006b4fa6 01a04df9 01e6e91d     .Y...Ok..M......
1001f4f8:	02561595 00c10b3b 009bac41 019c1e51     ..V.;...A...Q...
1001f508:	0221484f 016de711 02156b8d 01841a7c     OH!...m..k..|...
1001f518:	033b10af 003ac995 00c9a9ce 00e279d0     ..;...:......y..
1001f528:	00dcb9ce 012ceb8d 0215ac9f 011f1a46     ......,.....F...
1001f538:	025d400c 00c6381b 01f83eb1 00f108b6     .@]..8...>......
1001f548:	039465a6 0185514d 030eac28 015e3d95     .e..MQ..(....=^.
1001f558:	039c3937 01913c8c 03956c2c 019b91ed     79...<..,l......
1001f568:	021f55d0 00d20cbf 025d6263 00971097     .U......cb].....
1001f578:	01d7de6e 0181a9bc 006107e7 013c7031     n.........a.1p<.
1001f588:	00fbe5d8 008a6c77 027b1327 00eb3182     ....wl..'.{..1..
1001f598:	00915484 0194e682 03d2f773 0087dd30     .T......s...0...
1001f5a8:	0108bd3a 00092e23 03054151 01b99e33     :...#...QA..3...
1001f5b8:	032e747c 010d8c49 02ac5cd1 00471792     |t..I....\....G.
1001f5c8:	00bb4a19 0136f505 01f1dbb8 01e4c212     .J....6.........
1001f5d8:	0066caf0 00ca7169 004feb9b 01b20915     ..f.iq....O.....
1001f5e8:	00ef019b 003d94c8 02fde0c6 01b46c72     ......=.....rl..
1001f5f8:	02303a90 0118b1da 013cff9b 00f2939a     .:0.......<.....
1001f608:	005786fd 00e54b35 03dec330 0132af1e     ..W.5K..0.....2.
1001f618:	009c0a2e 01a58902 00e70473 0001d7f2     ........s.......
1001f628:	031d2313 004fa12a 01f6953b 00b042fb     .#..*.O.;....B..
1001f638:	030321c8 018e6e4f 0378d289 01de23cf     .!..On....x..#..
1001f648:	01b3f811 01650a02 03f8c29c 0165cc9d     ......e.......e.
1001f658:	03c5fe67 00043e4e 0165acb2 01fb9260     g...N>....e.`...
1001f668:	0111a1c3 014238e4 02912f7a 00a40483     .....8B.z/......
1001f678:	00acae43 0072fd19 01576157 0054dcfa     C.....r.WaW...T.
1001f688:	03c85b60 003b7d24 019b5a68 01205616     `[..$};.hZ...V .
1001f698:	0041d5d9 007f5d6f 03a95d3c 00b67f07     ..A.o]..<]......
1001f6a8:	020eba11 01f689fc 023019d4 0100ee4b     ..........0.K...
1001f6b8:	00764113 01f134a1 0306acec 01ffbfaf     .Av..4..........
1001f6c8:	02824100 00e6bede 03e7fd65 006d2391     .A......e....#m.
1001f6d8:	014d1dfa 00130031 03465cf8 008be062     ..M.1....\F.b...
1001f6e8:	01ff09b8 00d0a407 01c683cd 00c7d657     ............W...
1001f6f8:	005fd682 00de95dd 02ab2617 00d56ec4     .._......&...n..
1001f708:	0093bbf4 0199331d 021874e3 00cf651d     .....3...t...e..
1001f718:	0396f613 0005e785 01e2867d 0062414d     ........}...MAb.
1001f728:	032182ec 003e6e04 028c7318 0076b1d6     ..!..n>..s....v.
1001f738:	01423460 00ed9e75 03b6400e 01ae3f2d     `4B.u....@..-?..
1001f748:	03be5f9d 01b1cde0 038e052a 01d463ab     ._......*....c..
1001f758:	037f6c32 00167106 02531491 01e7a1c1     2l...q....S.....
1001f768:	003cb582 01b1d1d9 02d494e4 00b88302     ..<.............
1001f778:	01bbb175 011f0e1c 01ec4f48 0114e5dc     u.......HO......
1001f788:	03adca28 01ee4c62 03e016c5 01c3c66b     (...bL......k...
1001f798:	01608d23 013b9eec 00576469 0002e26e     #.`...;.idW.n...
1001f7a8:	005066b0 01975432 03361f7c 01859d14     .fP.2T..|.6.....
1001f7b8:	018bb312 001ae8e0 03aa7522 01abfca6     ........"u......
1001f7c8:	02ce8d48 0023fa80 00deead0 01775d9a     H.....#......]w.
1001f7d8:	03a47049 01025b42 03219114 0189d665     Ip..B[....!.e...
1001f7e8:	0267e6ae 00a6f6a2 0274f75d 011ce0a6     ..g.....].t.....
1001f7f8:	0279c418 00b69d51 01be105a 00c5930c     ..y.Q...Z.......
1001f808:	0398ef5f 0047eb0a 03779256 00d686ab     _.....G.V.w.....
1001f818:	00c4833c 0081e1a1 013902c9 0054ceab     <.........9...T.
1001f828:	0311e47b 0077781a 01930b77 01e12fb4     {....xw.w..../..
1001f838:	02b9c867 007202a4 00d44e4d 01b19a2d     g.....r.MN..-...
1001f848:	0278820c 0033c85e 03d2e769 01940939     ..x.^.3.i...9...
1001f858:	03dda82a 008eed7b 0232d3c6 0067f52d     *...{.....2.-.g.
1001f868:	0054f8a4 01d04698 019dc86d 01674cae     ..T..F..m....Lg.
1001f878:	0222a9ac 01ab01d7 00113371 00c2e488     ..".....q3......
1001f888:	0238966e 009ff669 034fb813 01f04d95     n.8.i.....O..M..
1001f898:	00b175b4 00b94f46 00204af3 00cf9c95     .u..FO...J .....
1001f8a8:	01a1c4c5 00ef35f5 02f65d0f 0131f08a     .....5...]....1.
1001f8b8:	032458c3 007b26a1 00a2509b 01a93500     .X$..&{..P...5..
1001f8c8:	0056971c 00105e44 026e075c 01957561     ..V.D^..\.n.au..
1001f8d8:	03e64df8 008c0afc 025c7cd6 00eb7622     .M.......|\."v..
1001f8e8:	0235dcf2 0055dc2d 03f79571 0167b360     ..5.-.U.q...`.g.
1001f8f8:	000b7fbd 00b6d187 0181345f 01ce90aa     ........_4......
1001f908:	03ccc879 009264a7 01393046 00a63516     y....d..F09..5..
1001f918:	033d90b8 00c2ffb2 023df8d6 00f66e3a     ..=.......=.:n..
1001f928:	02511579 00e403a5 031a406a 0186e844     y.Q.....j@..D...
1001f938:	02959029 00283c45 03b1347a 0165d3f5     )...E<(.z4....e.
1001f948:	0008edad 00783307 00ad1f13 019cef7e     .....3x.....~...
1001f958:	00cbbd8e 015880c4 0134d643 0064d0d2     ......X.C.4...d.
1001f968:	005eaa51 00352891 02e76fe0 01f41c22     Q.^..(5..o.."...
1001f978:	02c3c7e1 00e611ed 02a4d9d9 00dd9da8     ................
1001f988:	03e285d6 01ad7d1d 00326cc8 013b647b     .....}...l2.{d;.
1001f998:	0103a3fd 01b594dd 023988d5 0189b4dd     ..........9.....
1001f9a8:	033658ce 01fb211b 01a22ec7 01a3cfc7     .X6..!..........
1001f9b8:	01a2736b 01bb600e 004c3c75 00989fb8     ks...`..u<L.....
1001f9c8:	0247e7d1 01baa429 023399b9 01b6abdc     ..G.).....3.....
1001f9d8:	033dbe47 009d58ba 00170be7 00a475ed     G.=..X.......u..
1001f9e8:	03dfa8e1 01747299 01f298a2 00aa2018     .....rt...... ..
1001f9f8:	0271627d 004c13a7 00ad8ea2 00c12feb     }bq...L....../..
1001fa08:	01108b07 0140a45f 00a6dd0f 0010c5db     ...._.@.........
1001fa18:	032c1d84 01754563 0258eb3b 00ad5127     ..,.cEu.;.X.'Q..
1001fa28:	02dc9cfe 0005349a 03a16f13 01fc5a46     .....4...o..FZ..
1001fa38:	00f06eac 0179c60a 03f0fffc 00d27b41     .n....y.....A{..
1001fa48:	02d7c2dd 0111a378 0019469e 00cd57a5     ....x....F...W..
1001fa58:	00ea8a37 00611eee 00cf9b71 007f9962     7.....a.q...b...
1001fa68:	02db6b22 01ac7274 02ffb44b 01b339f1     "k..tr..K....9..
1001fa78:	006307ce 00b631be 01850973 018a1ae8     ..c..1..s.......
1001fa88:	008444d4 017a772c 003362b2 006a5a95     .D..,wz..b3..Zj.
1001fa98:	03e63247 01769909 02ac22ca 0131a237     G2....v.."..7.1.
1001faa8:	03ff0352 01bddd70 02e419bb 0159580f     R...p........XY.
1001fab8:	02c61c46 01951115 03fe79f2 0163ca6a     F........y..j.c.
1001fac8:	01e73e68 01b3eae3 02d4bd21 00f9bbf3     h>......!.......
1001fad8:	01500dbe 00015982 00ad85df 01c6de09     ..P..Y..........
1001fae8:	004a7f41 015dd8a7 010ecdf6 00992fdc     A.J...]....../..
1001faf8:	0127896b 01c23161 02c53394 010b3ab9     k.'.a1...3...:..
1001fb08:	01e82b6a 010e06c8 024185b4 01abe4dc     j+........A.....
1001fb18:	01c6a888 00009142 012e6644 009a5aac     ....B...Df...Z..
1001fb28:	034b80d8 0033289f 011b119e 0031f07c     ..K..(3.....|.1.
1001fb38:	03b0caec 01c07c96 00616ced 002c3e39     .....|...la.9>,.
1001fb48:	010fb875 0074f12d 03dc0198 00bca59c     u...-.t.........
1001fb58:	01830ffa 017d2c3c 03fbdc40 00b8324a     ....<,}.@...J2..
1001fb68:	00bec113 003db65f 037c93a3 0133a5fe     ...._.=...|...3.
1001fb78:	0211281b 004e60d6 02da9156 01ca241e     .(...`N.V....$..
1001fb88:	00050955 01c8296f 03805a35 01c250e6     U...o)..5Z...P..
1001fb98:	017f8187 01bb1215 03a13a2c 00229346     ........,:..F.".
1001fba8:	020bf9ae 001d8d22 03b144ef 003a6e72     ...."....D..rn:.
1001fbb8:	035720ad 00b523fe 01a1df77 015edfc8     . W..#..w.....^.
1001fbc8:	03ba0645 015543bf 0098a931 017b1a90     E....CU.1.....{.
1001fbd8:	02b3f337 00884413 01b1beee 01a6f557     7....D......W...
1001fbe8:	03f731bd 01b85391 03270eac 0068d791     .1...S....'...h.
1001fbf8:	0078df8e 019bc895 0191cfd3 00d9b510     ..x.............
1001fc08:	02bc8c14 0105d0fc 018773c7 01e5ac2b     .........s..+...
1001fc18:	00bb689b 00a7fb97 00178734 00489997     .h......4.....H.
1001fc28:	026bc593 01059e93 02f62700 00e74a1d     ..k......'...J..
1001fc38:	011d6c87 000073b3 01747675 01fc0684     .l...s..uvt.....
1001fc48:	01a18190 008d4369 03e22552 01e4e2ed     ....iC..R%......
1001fc58:	00ce8fee 0189997e 02c59857 00a74406     ....~...W....D..
1001fc68:	03a59ffc 01364eee 03373f17 005ede25     .....N6..?7.%.^.
1001fc78:	030cb7ed 00d2cccd 0281d6cc 01647ba1     .............{d.
1001fc88:	00ea79b8 00e76c2d 03380842 00808883     .y..-l..B.8.....
1001fc98:	0242e0ac 00bc9dae 02e2dfe6 0045dbf1     ..B...........E.
1001fca8:	039c619b 01db3416 00901695 01a5952c     .a...4......,...
1001fcb8:	00b77f27 01e94dc4 03d28175 01e687a9     '....M..u.......
1001fcc8:	00c677d5 0023f0e9 01770eb8 0038a252     .w....#...w.R.8.
1001fcd8:	00147b72 015567a2 0263ef30 00d7879b     r{...gU.0.c.....
1001fce8:	02a7ff6f 00d6c426 014f2690 007da8f9     o...&....&O...}.
1001fcf8:	030734ea 01306674 039acc14 01b188b2     .4..tf0.........
1001fd08:	01030216 01598295 019f11fb 001a3c46     ......Y.....F<..
1001fd18:	00116b90 013cbeb4 00ae4e54 01ac9065     .k....<.TN..e...
1001fd28:	01ed8897 0088c2bf 017d5071 008d0498     ........qP}.....
1001fd38:	0335969b 00f574c3 024972ef 01115212     ..5..t...rI..R..
1001fd48:	033bb638 0136476d 038112c5 0157e094     8.;.mG6.......W.
1001fd58:	039815de 01b61689 00cd9cf9 01d02dec     .............-..
1001fd68:	01f2944e 00d14665 03ea7d7c 00bf3427     N...eF..|}..'4..
1001fd78:	039ed22a 00a5849a 012a05b2 01285c40     *.........*.@\(.
1001fd88:	034d5523 0076e4b1 02604289 0042e272     #UM...v..B`.r.B.
1001fd98:	0318289c 0051d265 03e4c7ab 00292299     .(..e.Q......").
1001fda8:	004bafe3 00c3ef15 015fe58a 0031c04c     ..K......._.L.1.
1001fdb8:	01577b75 0082e1e3 0245f06e 00506f96     u{W.....n.E..oP.
1001fdc8:	03ecaea7 016b6ce2 0341f2bb 00ff51b6     .....lk...A..Q..
1001fdd8:	03b5ce39 01b5222e 019ef0d4 005f4b47     9...."......GK_.
1001fde8:	033f3e6a 00abc601 020d24fe 00ceba90     j>?......$......
1001fdf8:	03f4ff94 00a60022 01db961e 00d4e45c     ....".......\...
1001fe08:	023cc65c 01c8853d 0307a693 00dfd014     \.<.=...........
1001fe18:	00f2b69c 00b9799b 02ae9c53 01761099     .....y..S.....v.
1001fe28:	01e853b9 01793adf 0058171c 017f7d23     .S...:y...X.#}..
1001fe38:	003b29c9 016dee7d 01eea3b3 00527a8c     .);.}.m......zR.
1001fe48:	03581609 012f9dc4 00395e98 00b61e58     ..X.../..^9.X...
1001fe58:	0055a154 007c92b2 029505aa 01820ca3     T.U...|.........
1001fe68:	001dc49a 008860a1 011d2307 00fb25a2     .....`...#...%..
1001fe78:	03f22e03 00bcd8ff 01e2ae39 0002e9ce     ........9.......
1001fe88:	008790d6 01a63797 005beb25 009a2e15     .....7..%.[.....
1001fe98:	0396fedf 01b49922 011db07c 011e622b     ...."...|...+b..
1001fea8:	03e67ad7 000ca0e8 0288bb26 0109bd7a     .z......&...z...
1001feb8:	037f75c8 00cc24b9 00d819e7 00694e50     .u...$......PNi.
1001fec8:	03818613 0044cb93 027d518d 01c8a5f7     ......D..Q}.....
1001fed8:	020cb939 010771ef 02100904 006c5b19     9....q.......[l.
1001fee8:	00cbc66d 00289308 03e48681 0128ba7b     m.....(.....{.(.
1001fef8:	02846271 001784a5 019c495a 00bbaccb     qb......ZI......
1001ff08:	032f9750 01e7895d 033bbf23 01b5d1e0     P./.]...#.;.....
1001ff18:	02d5d749 01b37605 01c13698 00e70032     I....v...6..2...
1001ff28:	002c4550 01eef209 003b35b7 01668184     PE,......5;...f.
1001ff38:	02f32033 01c8df92 02b3537a 01c99086     3 ......zS......
1001ff48:	0138258c 01e33c97 01489d68 019ae38c     .%8..<..h.H.....
1001ff58:	0210e2b5 015ce15f 02aa1472 004efa05     ...._.\.r.....N.
1001ff68:	03ad4bf8 01065934 0076b3ff 0001ad48     .K..4Y....v.H...
1001ff78:	0195781c 0033f867 021c453c 00c4b318     .x..g.3.<E......
1001ff88:	02da077c 00516b39 039ce9b8 00244afb     |...9kQ......J$.
1001ff98:	0043bc76 01355f8d 01ce082d 00df85ae     v.C.._5.-.......
1001ffa8:	03853eb9 00620bd5 00d01fc5 01f4a7ab     .>....b.........
1001ffb8:	01b5e715 00b9da96 0161a9f7 01f78ba5     ..........a.....
1001ffc8:	02a55ecb 00353d2d 03733bce 01faec2e     .^..-=5..;s.....
1001ffd8:	01200549 01ee9a81 00e22069 013dbb79     I. .....i ..y.=.
1001ffe8:	02f1a602 01acaa42 02e61e97 00fd3f26     ....B.......&?..
1001fff8:	03fa2d24 00ef01fa 015cd4a0 00edd12d     $-........\.-...
10020008:	025721f3 01c954ec 029d12d3 017f63d3     .!W..T.......c..
10020018:	03b2d80a 00fcc916 00f36efd 00397dc8     .........n...}9.
10020028:	0360c06d 00ee7333 03f37926 002138c8     m.`.3s..&y...8!.
10020038:	008276c2 0119604b 021062d9 00efac8a     .v..K`...b......
10020048:	0382c9a8 01a9c18e 01c197ed 002968d7     .............h).
10020058:	02a53def 00f20301 02b1cb16 0016ccb0     .=..............
10020068:	024da8fd 0017b334 01f07918 01602eff     ..M.4....y....`.
10020078:	02873c6a 01f9cd61 0377f93e 01d33b77     j<..a...>.w.w;..
10020088:	0237b471 00ed555a 02d58195 01290b1e     q.7.ZU........).
10020098:	02799eff 0172199f 00c850a1 000b979d     ..y...r..P......
100200a8:	014e869a 00fc36d8 00856730 00c5dc69     ..N..6..0g..i...
100200b8:	014dd482 00314938 0096c656 00a0d15d     ..M.8I1.V...]...
100200c8:	03b6cd45 002b5af3 00b02414 00dd747a     E....Z+..$..zt..
100200d8:	0127a733 013f01e7 01bf2f7f 004e2c22     3.'...?../..",N.
100200e8:	0134ea39 012816ff 00925ef5 0080e453     9.4...(..^..S...
100200f8:	03e04e3c 01d25fff 00ecaf98 0049159f     <N..._........I.
10020108:	0086c50d 0122d103 00ca3b86 004e64a7     ......"..;...dN.
10020118:	004cdf2f 003e3cb9 017ba6b2 01a10c84     /.L..<>...{.....
10020128:	002bae3c 009045c3 02c473b4 006ae182     <.+..E...s....j.
10020138:	0086a7ff 0170089f 03c24477 01c6c4af     ......p.wD......
10020148:	03a83075 0001a95c 0166c870 00fe184a     u0..\...p.f.J...
10020158:	002a0dde 0083325e 0070aab3 0197538c     ..*.^2....p..S..
10020168:	01547736 01ef238c 01432d98 0027afec     6wT..#...-C...'.
10020178:	03679736 01412a9d 02048d13 003f3e8d     6.g..*A......>?.
10020188:	03bbb383 019b9c4c 00a45676 0192d0aa     ....L...vV......
10020198:	039a85cf 013a9b93 02e878a1 009bd5fb     ......:..x......
100201a8:	0287efb1 00cb3555 022f6195 011123d7     ....U5...a/..#..
100201b8:	01460345 015a2467 00ad1a27 000d30b8     E.F.g$Z.'....0..
100201c8:	03d9dba3 01010650 03ebcc96 003bae90     ....P.........;.
100201d8:	0395f878 00e13754 0235d272 0077ccc6     x...T7..r.5...w.
100201e8:	014af70e 0081fb3f 01976843 00508287     ..J.?...Ch....P.
100201f8:	026caadd 005dd0e8 02f9c964 01232455     ..l...].d...U$#.
10020208:	011e9ad0 01fbc9e3 02a7bd01 00033963     ............c9..
10020218:	0029800d 004b64c5 0337594f 019de674     ..)..dK.OY7.t...
10020228:	008f6018 000591d5 0178f145 015ff395     .`......E.x..._.
10020238:	00142a71 00024883 0314359a 006d3e48     q*...H...5..H>m.
10020248:	01150951 01042762 012d47cb 00896f4b     Q...b'...G-.Ko..
10020258:	00e73bea 015f3020 01721fcb 01b5c41d     .;.. 0_...r.....
10020268:	02a7f132 008e6d5c 009866b1 01cc0c29     2...\m...f..)...
10020278:	010b2679 00910afa 00947dcf 01def4f6     y&.......}......
10020288:	01552028 007ed570 0156f9a2 017fc647     ( U.p.~...V.G...
10020298:	002d9068 01b50ceb 00a47033 01cafe4c     h.-.....3p..L...
100202a8:	00a20ead 0193eb3d 02b9402a 00d97de8     ....=...*@...}..
100202b8:	02a758f3 00083149 02d8dbbc 000d3e27     .X..I1......'>..
100202c8:	008d8ef3 01cee3e5 0323caab 01e1b074     ..........#.t...
100202d8:	01266e51 010ef52a 00615313 000aab31     Qn&.*....Sa.1...
100202e8:	0042cc89 007bd67c 0176dd26 00ec7092     ..B.|.{.&.v..p..
100202f8:	00b16272 00c75997 0070c557 00a195b9     rb...Y..W.p.....
10020308:	00a5602c 0114b3f8 007877df 003de819     ,`.......wx...=.
10020318:	0393f0d4 01387303 02ef1190 01fb11c9     .....s8.........
10020328:	03f512f8 00ef7562 03b304b8 0133edf5     ....bu........3.
10020338:	009b75fe 010f5b2e 03900e56 00cce356     .u...[..V...V...
10020348:	01531a53 00e34c9f 01d51b9f 006c9718     S.S..L........l.
10020358:	02b39075 0052d188 0389ef12 01a670a5     u.....R......p..
10020368:	0321bc50 018efab8 00adbb35 00c970d0     P.!.....5....p..
10020378:	01e42bf6 0158b868 03c434d3 016c7532     .+..h.X..4..2ul.
10020388:	000a9f26 00c98573 019cb6df 015dc46e     &...s.......n.].
10020398:	00e93c38 0169a705 00a4c599 01ba2260     8<....i.....`"..
100203a8:	01258592 00be63dc 010f9e56 0129d32d     ..%..c..V...-.).
100203b8:	02640192 014c7470 016c7fd2 00300f67     ..d.ptL...l.g.0.
100203c8:	016610c1 015f3345 009d806a 00e9ab89     ..f.E3_.j.......
100203d8:	0354a701 00ab9113 02fbc5c2 01854e5e     ..T.........^N..
100203e8:	03f3f8fb 01835de0 03c486ba 00aa99d7     .....]..........
100203f8:	029e7614 0076018b 01907c5a 00b6a16a     .v....v.Z|..j...
10020408:	01ec4caf 01ac8dc8 00683aa2 0134b4e9     .L.......:h...4.
10020418:	030efdef 01fe71a1 028aef25 00a62e33     .....q..%...3...
10020428:	03f70cb2 009e54fb 020ec552 0153c8ab     .....T..R.....S.
10020438:	012e2724 00a7cf6a 0022bd18 0090b283     $'..j.....".....
10020448:	0004d5ce 00d2e2a1 022165de 009cba82     .........e!.....
10020458:	033ed06f 01a05e7b 00feac1e 0138ae70     o.>.{^......p.8.
10020468:	031b63bb 00fb8a42 01803a7d 01ae989c     .c..B...}:......
10020478:	03693335 01bb2d60 03dfb84d 00fb1daf     53i.`-..M.......
10020488:	0356a04f 00b22573 01d54d52 018d5452     O.V.s%..RM..RT..
10020498:	01d465e1 01c758af 0378df80 00f30a34     .e...X....x.4...
100204a8:	00968ca6 01c8507d 03db6d0d 0101da5a     ....}P...m..Z...
100204b8:	022ffcfb 01749c6c 017f3172 01d357cc     ../.l.t.r1...W..
100204c8:	01f75ef5 016d76ac 00beb9a5 0078b583     .^...vm.......x.
100204d8:	035dfe57 0149f085 038ff51f 0167a28a     W.]...I.......g.
100204e8:	021262b2 0070ccd8 03d9ca81 01f95519     .b....p......U..
100204f8:	0186f50d 01a9594c 00e62df1 01ac623b     ....LY...-..;b..
10020508:	02844971 01319b4d 00547e9d 012baf31     qI..M.1..~T.1.+.
10020518:	036d01c9 0001c6c9 018e025e 002c3624     ..m.....^...$6,.
10020528:	039ee2eb 01d6fba9 00094db8 00f24a61     .........M..aJ..
10020538:	0395a3db 017623ef 0354b610 0023679c     .....#v...T..g#.
10020548:	036dc168 009add42 0201acc9 0058a207     h.m.B.........X.
10020558:	031d01a5 01e59b7c 01dc9a1d 005cef67     ....|.......g.\.
10020568:	025872df 0003c7bf 0318256a 0176a1c8     .rX.....j%....v.
10020578:	01635960 01673ae0 0293c764 00633cdd     `Yc..:g.d....<c.
10020588:	013b19ea 001b8734 03166f23 002b545b     ..;.4...#o..[T+.
10020598:	0157c81a 0098fd5b 004638ca 004d088e     ..W.[....8F...M.
100205a8:	01af0a50 004cc7fc 03526e16 00c20180     P.....L..nR.....
100205b8:	025b0353 00ebd8a7 0088e8e5 00813c68     S.[.........h<..
100205c8:	00eea82e 0043bf27 002fa34b 0162618f     ....'.C.K./..ab.
100205d8:	01a8d837 01fce9a8 013d800b 01910e57     7.........=.W...
100205e8:	01bedefc 00ae480f 0256a355 012c6339     .....H..U.V.9c,.
100205f8:	02bc182c 000fcd19 02d2e513 00c343f7     ,............C..
10020608:	021233b3 005346bc 01b39c0b 00778662     .3...FS.....b.w.
10020618:	006f6f9e 01499a77 028c3fc7 010d0d2c     .oo.w.I..?..,...
10020628:	0202c099 002a4850 00b84750 0125c79a     ....PH*.PG....%.
10020638:	0379f396 014b3325 028255c8 00fa412b     ..y.%3K..U..+A..
10020648:	02f39339 013b2b91 00351c58 01185421     9....+;.X.5.!T..
10020658:	02b9a02e 0006702b 0195d792 0068b01a     ....+p........h.
10020668:	01571c44 019932ec 02fa80b2 01bfc1cd     D.W..2..........
10020678:	02895ca5 00ef2834 005d62a4 000c6f0f     .\..4(...b]..o..
10020688:	034c081e 01f67f83 0067f22c 010fb545     ..L.....,.g.E...
10020698:	001ed109 0079b303 01dae8f1 0158c77b     ......y.....{.X.
100206a8:	02cc01bf 0023ada7 012df38d 016d3224     ......#...-.$2m.
100206b8:	03c2f20e 017a9fe2 02caafaf 00483945     ......z.....E9H.
100206c8:	0038df28 013aa2d0 01cad202 015182bc     (.8...:.......Q.
100206d8:	01d0655d 002d2467 0118c14c 01f11a5f     ]e..g$-.L..._...
100206e8:	00bba2a4 008c7224 030542ca 00933824     ....$r...B..$8..
100206f8:	0106c106 00243d7f 021e43fd 01aaec40     .....=$..C..@...
10020708:	02d711a0 008caf3e 00047f37 00e9704f     ....>...7...Op..
10020718:	0028a06d 0107538f 01f30b85 01e8557f     m.(..S.......U..
10020728:	01d487f9 0071b1b9 034bdc5a 0092f844     ......q.Z.K.D...
10020738:	00326f32 0050165c 027324f4 015264a2     2o2.\.P..$s..dR.
10020748:	03ee1a2e 018ca9d8 03bd5e4d 01be92ff     ........M^......
10020758:	02ba4792 017f4d69 01e99de8 01ed5787     .G..iM.......W..
10020768:	01ec0dcf 01246d9b 03ea32a7 016c4f71     .....m$..2..qOl.
10020778:	0373131e 0063f0b6 038f57e3 01f8d947     ..s...c..W..G...
10020788:	015fa965 00959581 010c85ee 0023cce3     e._...........#.
10020798:	00da64a1 0012a3b4 01096ebe 017b3f11     .d.......n...?{.
100207a8:	03b488b2 017b7ba4 0251bc8f 016cf046     .....{{...Q.F.l.
100207b8:	030b7018 0133dae2 011a73bd 00ea0866     .p....3..s..f...
100207c8:	018f5870 000ef990 02ac9ef0 00777063     pX..........cpw.
100207d8:	02998dc2 01533827 002eb078 014c352a     ....'8S.x...*5L.
100207e8:	01f94825 010d8c38 026b4009 0134655a     %H..8....@k.Ze4.
100207f8:	01f8b5e0 0084ff8b 001191e6 001738e9     .............8..
10020808:	03f10177 0197a9d4 009abf9e 005cd15b     w...........[.\.
10020818:	01100dad 01e24805 0095fecb 00cfb850     .....H......P...
10020828:	027a0964 01ab6575 0200cbfb 0036cf9f     d.z.ue........6.
10020838:	02096363 01bf0fb8 016d67ac 01fb0dae     cc.......gm.....
10020848:	020758b1 01443b1a 03022109 003b61f7     .X...;D..!...a;.
10020858:	01921e1a 000a93b0 0324b8a2 0189668e     ..........$..f..
10020868:	00170b9c 00622d7d 02e15deb 01a07037     ....}-b..]..7p..
10020878:	01f37445 0137f999 01112780 00f450f1     Et....7..'...P..
10020888:	01cf795f 001858bc 02fe5eb9 00c93772     _y...X...^..r7..
10020898:	00463218 00063578 0092428e 01f9e2e4     .2F.x5...B......
100208a8:	01dec067 00db44ad 01154557 0149e45e     g....D..WE..^.I.
100208b8:	0341424d 00e7e3c1 0357923d 01179bac     MBA.....=.W.....
100208c8:	02db746f 010b26d7 0085ba82 00bbd45e     ot...&......^...
100208d8:	0058aedc 01e5d3a3 003488c6 01dd5f82     ..X.......4.._..
100208e8:	02e7bc8b 0180718a 02ecab74 0114dc30     .....q..t...0...
100208f8:	03ab143a 00bc6de3 005b2f51 01affecc     :....m..Q/[.....
10020908:	02d712dd 016c44ac 034fe4e2 00d5dd25     .....Dl...O.%...
10020918:	0296e3a3 0012be1e 010bb3a0 015e5a0a     .............Z^.
10020928:	0220e101 00ae10c2 0188fee3 00692787     .. ..........'i.
10020938:	03ce4d96 00e2eed1 0284d437 007c39ee     .M......7....9|.
10020948:	035dc2aa 01f710f8 007dd9c3 01999962     ..].......}.b...
10020958:	026ab0b2 018a5d82 03243e6c 012079b1     ..j..]..l>$..y .
10020968:	0046fc77 0025f8dc 016758cc 01fbdc80     w.F...%..Xg.....
10020978:	033e9718 000a9709 03b28b4f 00caf277     ..>.....O...w...
10020988:	00d5db1a 01237d3e 036c028f 015321e5     ....>}#...l..!S.
10020998:	01d82d50 00113ee0 0107e3d9 01c6316a     P-...>......j1..
100209a8:	006b383b 00ee7263 015eccdc 0001bb49     ;8k.cr....^.I...
100209b8:	00229a59 01a5d94e 03f9c30d 01fde608     Y.".N...........
100209c8:	03b513e8 01348e68 011b1066 00a5c8fd     ....h.4.f.......
100209d8:	0304d9c3 0190bd33 02a09b7a 01368256     ....3...z...V.6.
100209e8:	033d784d 0029380d 00f587ba 0107fc1a     Mx=..8).........
100209f8:	011bcd53 00700286 00209e25 01ed5be7     S.....p.%. ..[..
10020a08:	03ccaabe 00de0797 0031c06d 0192a6c1     ........m.1.....
10020a18:	037d2919 00f5a856 0046a5d6 0106a9d4     .)}.V.....F.....
10020a28:	02c2d3da 01a45d47 036721c4 008d8e2a     ....G]...!g.*...
10020a38:	00ace183 001c69f4 0087ba0b 01cb6ab2     .....i.......j..
10020a48:	005dda60 002dfd2b 000498a4 00ef768b     `.].+.-......v..
10020a58:	02180160 01d399ea 03146ea7 00b0ef31     `........n..1...
10020a68:	00e14431 010d5488 02283981 00384d8a     1D...T...9(..M8.
10020a78:	00359654 009d5f36 02b10d90 00ba735e     T.5.6_......^s..
10020a88:	03761775 01f1a6f3 00e8295f 0035fac1     u.v....._)....5.
10020a98:	026fa0fe 01297a87 00436c60 011798d7     ..o..z).`lC.....
10020aa8:	00d4d18b 00a3bd2a 03322aca 01bd6a69     ....*....*2.ij..
10020ab8:	0341c6c5 0040030b 03737174 000867f7     ..A...@.tqs..g..
10020ac8:	03127de7 00c51c9f 0123b81e 01f949df     .}........#..I..
10020ad8:	022e147a 01253886 03d944be 00753ae8     z....8%..D...:u.
10020ae8:	01f3dce5 000403c5 02367825 01869c03     ........%x6.....
10020af8:	02ab3d23 016488a4 000ee8d3 000aae5a     #=....d.....Z...
10020b08:	01e50d9a 0122a177 00493df4 00707dcd     ....w."..=I..}p.
10020b18:	00866889 011ef6d9 008f8eec 01669f41     .h..........A.f.
10020b28:	00bea46b 01ad75db 000cd994 01d55b3b     k....u......;[..
10020b38:	03b7510a 017ae680 0191cb71 0142b477     .Q....z.q...w.B.
10020b48:	00b48a47 006a95e0 03685277 002b8ccf     G.....j.wRh...+.
10020b58:	02782522 005045c7 02da7c1f 01a01b49     "%x..EP..|..I...
10020b68:	03c79ab9 00fcc746 019f5168 0027c811     ....F...hQ....'.
10020b78:	01c03dd3 005bee1a 03b60962 018665cc     .=....[.b....e..
10020b88:	00266511 01a6c55f 0093f1ca 0191d03e     .e&._.......>...
10020b98:	00fbf684 000ea902 00b8f70d 00fe078e     ................
10020ba8:	02d9affe 0043f31f 00e96ff2 0109232c     ......C..o..,#..
10020bb8:	015172e2 010c4704 00bf6925 01327507     .rQ..G..%i...u2.
10020bc8:	00104f50 0141443f 0317c824 00dfcd57     PO..?DA.$...W...
10020bd8:	0334815b 001eba14 01d2e48f 01f8eaf7     [.4.............
10020be8:	021f45e5 0187baaf 0134cded 002b4f8b     .E........4..O+.
10020bf8:	036e249d 0103f14c 01fb2de1 00ce198e     .$n.L....-......
10020c08:	01d17b78 01eefe1c 037e8004 01d7de5a     x{........~.Z...
10020c18:	00bf0fa1 0049f056 029879a2 005f108b     ....V.I..y...._.
10020c28:	02c8fec3 00a29651 02912b77 014eaccb     ....Q...w+....N.
10020c38:	009fe0a5 01ed1368 03d07ef4 00d53be1     ....h....~...;..
10020c48:	0251b974 00a3f12b 03d2dbd4 009ba26f     t.Q.+.......o...
10020c58:	007665cf 013848a8 003405c3 01f2ac48     .ev..H8...4.H...
10020c68:	039d167d 013b6091 00c5d975 00ed4898     }....`;.u....H..
10020c78:	02171fdc 01e75a0d 0140d4bb 01f6653c     .....Z....@.<e..
10020c88:	00561854 006db101 01205392 00c0b64b     T.V...m..S .K...
10020c98:	00a4283d 00f068af 03bb2f02 008d0c31     =(...h.../..1...
10020ca8:	03b58bc2 0068fa86 03de5c61 01c995d8     ......h.a\......
10020cb8:	0376f1ca 0043974e 00e0f177 011bedb9     ..v.N.C.w.......
10020cc8:	015265b7 014d25eb 001386fc 007af6e8     .eR..%M.......z.
10020cd8:	00b36a3c 000c0bc3 01eb426d 003b717d     <j......mB..}q;.
10020ce8:	03da8e67 00eff594 02c82a8a 0161254f     g........*..O%a.
10020cf8:	03a7707b 01578a23 03931d81 014e57f0     {p..#.W......WN.
10020d08:	011361cb 0116d1b1 014f7fa1 000aafcc     .a........O.....
10020d18:	028a1528 00e47467 03895fc7 01a8be84     (...gt..._......
10020d28:	01eaa591 002763b7 0236dcb7 0085defe     .....c'...6.....
10020d38:	027fe3e4 01537762 01c619d3 00b3b310     ....bwS.........
10020d48:	02ac4d91 010e9958 00a7bdd9 013be96b     .M..X.......k.;.
10020d58:	02f32122 0170702b 0279db8f 0006ef3e     "!..+pp...y.>...
10020d68:	033666e1 00f612fa 01812204 00832487     .f6......"...$..
10020d78:	013b32ce 00b7610f 0387d8ab 012b9864     .2;..a......d.+.
10020d88:	0344a32e 00fdaa94 000f11bb 01a5a0da     ..D.............
10020d98:	01f623aa 00130d60 0075cba5 01c06bd6     .#..`.....u..k..
10020da8:	01b17bf3 00680364 005bfb83 005f9126     .{..d.h...[.&._.
10020db8:	0226cc22 01538cb1 03f38118 0025904b     ".&...S.....K.%.
10020dc8:	021a246a 01ac9075 03e5ba43 01d5a16a     j$..u...C...j...
10020dd8:	0361f2b2 01824cfa 012a4dd2 01464ffa     ..a..L...M*..OF.
10020de8:	0150f43e 00f66569 013a883d 00d55bee     >.P.ie..=.:..[..
10020df8:	03623b0e 004d54a6 01d1d518 0036f5eb     .;b..TM.......6.
10020e08:	03e2231e 00467e08 025e7de2 0114759b     .#...~F..}^..u..
10020e18:	0170f838 014030e6 01a65ca3 01e6d6e0     8.p..0@..\......
10020e28:	022e83fe 01c5af38 00b83eb8 00cf404c     ....8....>..L@..
10020e38:	02d0afac 00254aae 02d31b8a 00c27d93     .....J%......}..
10020e48:	0051590a 0165cba8 008f7811 012b0837     .YQ...e..x..7.+.
10020e58:	01f501fa 00a5626a 026a6b4a 01360434     ....jb..Jkj.4.6.
10020e68:	0196b259 017b7803 015905f3 013dfa72     Y....x{...Y.r.=.
10020e78:	0381302e 01d2ef15 0381ec4c 01cc4d6e     .0......L...nM..
10020e88:	0361483c 01fbd9c6 00ccd729 01c99185     <Ha.....).......
10020e98:	0192e638 00c664eb 015299fe 00110f4d     8....d....R.M...
10020ea8:	015aee39 00e6df5f 022f34ec 01a49466     9.Z._....4/.f...
10020eb8:	0124cf78 01b91012 004a144a 00650bbb     x.$.....J.J...e.
10020ec8:	02234992 0114c66b 03d24fb5 00886751     .I#.k....O..Qg..
10020ed8:	00b06cf6 013c1122 02724a12 014eaaa7     .l..".<..Jr...N.
10020ee8:	0314ef9c 00a82994 03f927c2 01e4dffd     .....)...'......
10020ef8:	00c6a5b6 0030be85 036dd07c 0155af76     ......0.|.m.v.U.
10020f08:	0179d108 01bdab30 018647c2 0133db88     ..y.0....G....3.
10020f18:	001c793a 0186b34f 038779e6 0162d1ad     :y..O....y....b.
10020f28:	00be7af2 00cda6ab 003074d4 01426c1d     .z.......t0..lB.
10020f38:	01b6dea1 0015770e 028d5bb6 00489f30     .....w...[..0.H.
10020f48:	03f57623 01e3ba6f 001f893a 00a32c89     #v..o...:....,..
10020f58:	023c6772 0096d507 03710aa2 004868c1     rg<.......q..hH.
10020f68:	03034a97 00d757a7 0385bc9b 004981a5     .J...W........I.
10020f78:	03854ff0 0151d3b1 02a348ca 00a5a8c0     .O....Q..H......
10020f88:	02c7a40e 00ccff1d 037483c9 005c4fb1     ..........t..O\.
10020f98:	02d5facb 01bdc15c 0222ff81 0097bcd3     ....\.....".....
10020fa8:	03141188 01536513 00a6ced3 0149eee5     .....eS.......I.
10020fb8:	015b482e 01664aa6 03002ac7 01e371c1     .H[..Jf..*...q..
10020fc8:	00d01741 0164d8e5 001aef17 013ee90a     A.....d.......>.
10020fd8:	01b20a7a 01ae241a 0270220d 00a81058     z....$..."p.X...
10020fe8:	0369d025 01d7c922 02656a27 0072ef05     %.i."...'je...r.
10020ff8:	02e26728 016e7ff5 003aa73e 008ef084     (g....n.>.:.....
10021008:	01c7db77 00bea32d 002aa810 01c639a6     w...-.....*..9..
10021018:	001a1a1b 00e7a57e 03646cfb 0179e53c     ....~....ld.<.y.
10021028:	008a7639 0011cf4c 03589e05 019e4980     9v..L.....X..I..
10021038:	0092595d 009236e6 00ad2d08 0001a94f     ]Y...6...-..O...
10021048:	00f7ba73 00834054 03fde043 0040bdce     s...T@..C.....@.
10021058:	035745c6 002e6adf 00d21d63 0172bc3e     .EW..j..c...>.r.
10021068:	0008ea2b 01f7afa9 03896d16 0027b6e4     +........m....'.
10021078:	025ea5c0 00d965f4 01511c9a 0136b82d     ..^..e....Q.-.6.
10021088:	03e0d456 01495fff 01eb2180 01504234     V...._I..!..4BP.
10021098:	039baefa 0025b303 025da4ea 00fdaf5c     ......%...].\...
100210a8:	006058ac 01635ec4 020bee69 00f37e34     .X`..^c.i...4~..
100210b8:	0365015e 0002932d 037c7cc9 00da0c8c     ^.e.-....||.....
100210c8:	019da60d 01edfb30 015c690d 008dcf1a     ....0....i\.....
100210d8:	020dcf18 01303214 037494b9 00e12bd2     .....20...t..+..
100210e8:	02a22225 012ad2a3 03601743 0108d6b5     %"....*.C.`.....
100210f8:	037cfa9b 01929469 00ca0db5 00a73d1c     ..|.i........=..
10021108:	020898d9 012d82db 01ffe6c7 01574137     ......-.....7AW.
10021118:	0261bf5c 000efb71 038975f5 0032c341     \.a.q....u..A.2.
10021128:	02530c4b 00a48c4f 0124a509 00e36ee4     K.S.O.....$..n..
10021138:	015a11f1 00d43419 030cdf06 0039f38a     ..Z..4........9.
10021148:	008c85a3 01190eb1 0335b892 01a1e309     ..........5.....
10021158:	03f4d877 00e94d48 018bee9d 00e9413b     w...HM......;A..
10021168:	01d8fb46 0199b829 014b70f9 01bfb7f6     F...)....pK.....
10021178:	0345bfd4 008e0fe5 03c4c301 012fab89     ..E.........../.
10021188:	016a3f3f 01d6a910 0138aece 01854958     ??j.......8.XI..
10021198:	0070cb0d 00fd9392 016d6557 0185522c     ..p.....Wem.,R..
100211a8:	033596f3 01e8985d 03275d3a 01dc9357     ..5.]...:]'.W...
100211b8:	010d514d 01fc2f20 02f4136f 001ae909     MQ.. /..o.......
100211c8:	0206b720 00f2bf01 02359cda 01463c28      .........5.(<F.
100211d8:	006feca7 017eb979 03cf8eed 00347e36     ..o.y.~.....6~4.
100211e8:	037213a0 01276b5c 01d31075 01d177b9     ..r.\k'.u....w..
100211f8:	027fdbe2 01ec6957 03176ea1 016ea623     ....Wi...n..#.n.
10021208:	03ddec5a 0074ea41 02d081dc 01a4cc4f     Z...A.t.....O...
10021218:	02901742 016c28d9 00a4ca7e 010321cb     B....(l.~....!..
10021228:	00009e01 01bc6025 004a31bf 0000046d     ....%`...1J.m...
10021238:	03c66c0c 01e81b0f 01ba47fb 00726eb0     .l.......G...nr.
10021248:	0175038e 008e4d71 01c59c13 00fc2f5c     ..u.qM......\/..
10021258:	0116e835 00eb1236 020aa75c 0187da5a     5...6...\...Z...
10021268:	03ad42ca 00e2c295 0306fdc9 007966ad     .B...........fy.
10021278:	006ebfcd 0004c235 022d2851 018f6622     ..n.5...Q(-."f..
10021288:	03bd232e 0081d4eb 02d06002 01c7eec7     .#.......`......
10021298:	03a4af3a 00e72b91 0334d9c2 000cdf02     :....+....4.....
100212a8:	02b2368a 00cfeb54 01e41e16 019271b1     .6..T........q..
100212b8:	02e6aa80 018199fb 002be190 0105e746     ..........+.F...
100212c8:	027e6979 0194f655 029a256d 005b03d0     yi~.U...m%....[.
100212d8:	0022cfe8 01323431 035971a5 01d82d09     ..".142..qY..-..
100212e8:	001cad3d 00f6a56f 035b7376 003c547f     =...o...vs[..T<.
100212f8:	00cb90a7 00f30d57 003e9131 01a510e4     ....W...1.>.....
10021308:	02f9dd36 005bd2b1 02e29253 00ba9244     6.....[.S...D...
10021318:	0268d25d 00ad190f 0026bae7 018c7abd     ].h.......&..z..
10021328:	0266fe9f 00410436 00b4d67d 009360b7     ..f.6.A.}....`..
10021338:	0217752d 00f9bf83 02cbb08f 0136b787     -u............6.
10021348:	00b1ea91 01566592 03700de8 005d6e68     .....eV...p.hn].
10021358:	00aa48fb 01df17c0 01ca0317 00e45de1     .H...........]..
10021368:	02c79399 0016aa6c 03f665f8 010c7cb1     ....l....e...|..
10021378:	018f7b19 0098d121 02295ac0 017d0f52     .{..!....Z).R.}.
10021388:	0052acd4 0090a9d7 00220d10 0164d120     ..R.......". .d.
10021398:	01f91253 01ec11c5 00f6ae43 016f4a2b     S.......C...+Jo.
100213a8:	0356907d 005beae3 0218d5f2 01eb2c44     }.V...[.....D,..
100213b8:	0023b4db 0107f808 035c2f65 0166cdef     ..#.....e/\...f.
100213c8:	00e6bac6 01b0a031 0361766e 00eb68ec     ....1...nva..h..
100213d8:	025c3b4f 010bf944 014aac22 00447613     O;\.D...".J..vD.
100213e8:	03a57cde 012342b3 01abe671 01c9b91f     .|...B#.q.......
100213f8:	0346f6c1 00bb1179 03c74686 01960394     ..F.y....F......
10021408:	00673f74 017b6841 011336d3 00588d06     t?g.Ah{..6....X.
10021418:	02267ff6 012677bd 0108773c 01dba160     ..&..w&.<w..`...
10021428:	01ddcb29 01a4f2b1 000a9ff4 0000c474     )...........t...
10021438:	02cd5d05 00b37f7f 03f38640 00673587     .]......@....5g.
10021448:	00b41ba9 001831b1 00a7366f 01d73dc3     .....1..o6...=..
10021458:	016c011e 00462a3c 03a203b9 012895c1     ..l.<*F.......(.
10021468:	03f6ed6a 01d9a294 02142556 00c0ee8b     j.......V%......
10021478:	00c10909 00e20161 000a261d 013f8800     ....a....&....?.
10021488:	02d248e4 015c8625 01181bae 019545ff     .H..%.\......E..
10021498:	0076816d 00f95dcb 0240898a 00064625     m.v..]....@.%F..
100214a8:	00de7499 007b4aa1 034f63c1 015e3b75     .t...J{..cO.u;^.
100214b8:	01d0da4e 01542468 03c1050b 013daff1     N...h$T.......=.
100214c8:	012ea9be 019393b3 028bbe70 001fac7c     ........p...|...
100214d8:	02fc4b03 000f24d6 012b0c3d 009db192     .K...$..=.+.....
100214e8:	00bf932e 0026ff10 011f330b 01623a3c     ......&..3..<:b.
100214f8:	014dc26e 00f45b9a 0190288c 00fb0aad     n.M..[...(......
10021508:	00d87bb9 00349ef9 035db434 015b09c8     .{....4.4.]...[.
10021518:	02a62d37 01cb9b83 006ee839 0159d334     7-......9.n.4.Y.
10021528:	01a200fc 00b75709 0232d1cb 004e826b     .....W....2.k.N.
10021538:	005ab4e4 00fa07ae 003cae1f 001eab29     ..Z.......<.)...
10021548:	03526374 018bc175 02c6adba 00386fd9     tcR.u........o8.
10021558:	012c887e 00f57a5e 01abbc55 00c65c93     ~.,.^z..U....\..
10021568:	00680800 00ae5f1e 0134e6dd 01ebf7f7     ..h.._....4.....
10021578:	0335ae88 01cc1522 03a8b8ee 015468f2     ..5."........hT.
10021588:	03e2d886 00ed908a 019689bc 018c3850     ............P8..
10021598:	03a7a955 01194ec1 03b411db 00c10d10     U....N..........
100215a8:	01d6e334 00c252e8 03e3300b 01b849a9     4....R...0...I..
100215b8:	02fcfbc5 0022702b 03836583 00bba847     ....+p"..e..G...
100215c8:	037d8784 01616889 03d48962 0097e08c     ..}..ha.b.......
100215d8:	00aff431 01af63c1 019a6312 013e41ff     1....c...c...A>.
100215e8:	0337d29b 0103f4f1 00950ef9 01d9589e     ..7..........X..
100215f8:	011fc8c0 00f3d675 02de4718 01e82835     ....u....G..5(..
10021608:	026fb74b 01570e8f 03884fd5 00d4c4d7     K.o...W..O......
10021618:	028c1b84 00fd0582 0286cf9d 001ce8fa     ................
10021628:	03fb9c2e 01b838aa 00ea33ee 01838a8e     .....8...3......
10021638:	01f3fe18 00c2c90a 004b613f 00a2efd2     ........?aK.....
10021648:	03136c7c 004bd71b 0237de4c 003fb6e8     |l....K.L.7...?.
10021658:	02bfab44 01de6f33 034d6909 00ebaa4f     D...3o...iM.O...
10021668:	0358188f 0079e72c 02f7e3f1 010db0fb     ..X.,.y.........
10021678:	021f0026 01fff4f0 020a2da9 00f9defc     &........-......
10021688:	008472de 01062fff 01b3a3b3 01975e54     .r.../......T^..
10021698:	01e08181 0054f63d 03db2efd 00214cee     ....=.T......L!.
100216a8:	02129431 004525e5 02168643 005e9b8d     1....%E.C.....^.
100216b8:	02d39d1f 011e2ad4 0252d159 01a934e4     .....*..Y.R..4..
100216c8:	0100ecd4 01e438d6 03977786 00c1c96f     .....8...w..o...
100216d8:	0235a053 00429705 0011a212 005b61e9     S.5...B......a[.
100216e8:	02066215 015f9690 00983677 006862d1     .b...._.w6...bh.
100216f8:	021e6f8f 00f994b7 002ed8eb 0194caf8     .o..............
10021708:	00165f38 00a3e1f2 014e0583 013578b5     8_........N..x5.
10021718:	033f5f74 00b975ec 03887ebf 00e9778f     t_?..u...~...w..
10021728:	016139b7 01bbc92f 0177a5a6 007e642d     .9a./.....w.-d~.
10021738:	03e8f7d6 0113ab46 0331f466 015d6753     ....F...f.1.Sg].
10021748:	01f47943 000de052 032b4f29 01a7cef8     Cy..R...)O+.....
10021758:	021534d6 011620bf 017983d6 004d175d     .4... ....y.].M.
10021768:	0234cccd 0088bd50 018adbb4 005e128f     ..4.P.........^.
10021778:	028c2bcc 00dbafbb 038f626f 01a23f96     .+......ob...?..
10021788:	003c6fe4 01264a65 02545b15 010d1c1c     .o<.eJ&..[T.....
10021798:	02d7e7c5 00c89af3 00ed89df 000e84d3     ................
100217a8:	03ce405f 01f73e10 024732c0 00359212     _@...>...2G...5.
100217b8:	02532d92 01ee52b1 0354850f 015dc6e1     .-S..R....T...].
100217c8:	031461c8 01237677 03e73271 019ce5a1     .a..wv#.q2......
100217d8:	005675a6 0008050e 013d1def 018557ed     .uV.......=..W..
100217e8:	0289927c 00dfa8cb 00f5a82e 0016699a     |............i..
100217f8:	03a1d4dc 0118456a 000c1ac0 01732772     ....jE......r's.
10021808:	0086d4cd 01a0d9c5 025e8173 01dbd7c6     ........s.^.....
10021818:	01f9df4a 01b574fd 0368d7e7 01f682e3     J....t....h.....
10021828:	03b5da76 01c654f0 03d37a81 0199088c     v....T...z......
10021838:	0076b1bd 00b25960 023010ff 01696079     ..v.`Y....0.y`i.
10021848:	03e83674 01697e21 00a13d11 00c073dc     t6..!~i..=...s..
10021858:	021891ec 00a9a86e 033f3ae0 00bca47e     ....n....:?.~...
10021868:	014bea52 00869ee0 016e44d1 00d9a6d9     R.K......Dn.....
10021878:	00a643b9 018a34e8 000c93d2 00073619     .C...4.......6..
10021888:	02d70f2c 002dec32 018144be 00e1936a     ,...2.-..D..j...
10021898:	022d5d1c 010f8deb 01a6e133 018fc1bb     .]-.....3.......
100218a8:	0358070f 008ccd09 019cc075 00263811     ..X.....u....8&.
100218b8:	016c7c1b 0137d7ab 00d4fd5e 01a8879b     .|l...7.^.......
100218c8:	0046e65f 0185c28c 02a49e38 01500691     _.F.....8.....P.
100218d8:	0161c4a8 0082b755 01de9e46 01eaed3b     ..a.U...F...;...
100218e8:	031a195f 0161afe7 0299b2e3 004a4499     _.....a......DJ.
100218f8:	02603de8 003b8468 01c74c21 0182b0bd     .=`.h.;.!L......
10021908:	02196808 0166c64a 007001e8 0114dc6c     .h..J.f...p.l...
10021918:	02f8790b 00c22357 02fcb4db 00e30849     .y..W#......I...
10021928:	0149e3c3 01a16eb8 01a4e930 002f3580     ..I..n..0....5/.
10021938:	03790e52 003abec0 0348042f 0155704d     R.y...:./.H.MpU.
10021948:	014232c0 0134105d 00866907 01486d0c     .2B.].4..i...mH.
10021958:	00fb9c39 00cc2390 0275a02c 00c26b31     9....#..,.u.1k..
10021968:	0375ae1d 00201783 01860a28 01193316     ..u... .(....3..
10021978:	03b00bef 0092396d 01ef8f75 0176659d     ....m9..u....ev.
10021988:	004c5435 0112b8cd 03a543ee 00a26e6e     5TL......C..nn..
10021998:	0228539e 00ead64b 03cdd83a 019360aa     .S(.K...:....`..
100219a8:	0172e327 00f1e3b0 01b7f946 018b5488     '.r.....F....T..
100219b8:	00d0936d 010a6706 03418a49 01645060     m....g..I.A.`Pd.
100219c8:	0321aed5 014a8631 0282976d 00ac546e     ..!.1.J.m...nT..
100219d8:	024bc754 01703bf7 02f77a3c 0175098e     T.K..;p.<z....u.
100219e8:	0289aeb0 008ff748 037eb9ec 01f7193d     ....H.....~.=...
100219f8:	0338402c 0006f4a0 01383922 0053ca69     ,@8....."98.i.S.
10021a08:	01b2d7f5 005fb709 02081bee 00dccda9     ......_.........
10021a18:	0087e5c3 01ed4c62 011a5be1 0127db52     ....bL...[..R.'.
10021a28:	01c7bee0 0179c8d9 0171217f 00ff01d1     ......y..!q.....
10021a38:	032b6aeb 00e834a6 00dde59d 00191e33     .j+..4......3...
10021a48:	011bddfa 01579341 00c47b4e 01dfc441     ....A.W.N{..A...
10021a58:	0308b33e 00ce418b 0257cfb2 012efcf9     >....A....W.....
10021a68:	016e5967 019ebdfd 039ed68f 0136f59f     gYn...........6.
10021a78:	015cb734 01c2c815 01112c4c 0044f155     4.\.....L,..U.D.
10021a88:	03f9b7ca 01d4d440 019a2108 00503b47     ....@....!..G;P.
10021a98:	033bc2af 0009488c 00f4a064 0038d0e6     ..;..H..d.....8.
10021aa8:	02cebde8 0148b64f 01e0f6cf 00093c11     ....O.H......<..
10021ab8:	0026cfa1 005b6d8d 03d30fd8 006e4e87     ..&..m[......Nn.
10021ac8:	0368a362 01795014 024b1928 00c2c24f     b.h..Py.(.K.O...
10021ad8:	02c80312 00739f9f 01f78f84 01395d6f     ......s.....o]9.
10021ae8:	010bed39 0187de86 016ca379 01be2b7b     9.......y.l.{+..
10021af8:	01b7b29a 00048f7f 02523c68 010d10d5     ........h<R.....
10021b08:	0121ee5f 01e6949e 033e817e 01d2ff32     _.!.....~.>.2...
10021b18:	02ec8d3d 01e0379c 009ae7bc 00a15142     =....7......BQ..
10021b28:	01a0c15c 0078e3fa 00e2377b 004811b8     \.....x.{7....H.
10021b38:	020aa885 019c8715 03671928 003aca2f     ........(.g./.:.
10021b48:	00f42772 01fabcc0 00354ce3 01515462     r'.......L5.bTQ.
10021b58:	023dcbac 01373292 00bfebcb 00f4c534     ..=..27.....4...
10021b68:	02d32b58 0077bf1a 035195a7 00ef86bb     X+....w...Q.....
10021b78:	02bdb5eb 01bc8bd8 00523049 00e5da2e     ........I0R.....
10021b88:	00fbfdbd 010ce532 01bf8dd2 0119f480     ....2...........
10021b98:	00ef4fad 01a4669d 011452bf 0167b518     .O...f...R....g.
10021ba8:	00ea09ef 01a47b01 0300e984 00f2f2c9     .....{..........
10021bb8:	00f5ba3c 01c710f1 027ae7a9 01bd2f55     <.........z.U/..
10021bc8:	0317b783 0196b224 00fd8932 001f4ec8     ....$...2....N..
10021bd8:	00326916 00003c82 025ba384 00bbe716     .i2..<....[.....
10021be8:	029e74cd 015b7dbe 00cf56df 01e72579     .t...}[..V..y%..
10021bf8:	03c609e2 01ef990e 02d9e878 0052704a     ........x...JpR.
10021c08:	02390c5f 0169d632 01462495 01c9c436     _.9.2.i..$F.6...
10021c18:	02007456 0096abea 00eaa31b 00b487ca     Vt..............
10021c28:	02005fd0 005d9c7a 004b3eb7 00b6eb89     ._..z.]..>K.....
10021c38:	0161dc94 002462c7 020cd19c 0034d409     ..a..b$.......4.
10021c48:	0237b4d9 01e8aad3 035414d7 0087fa9c     ..7.......T.....
10021c58:	027f639d 0029ce00 03ffe1cc 01d28bd5     .c....).........
10021c68:	03087301 006f0c1c 00019c34 01fb15fd     .s....o.4.......
10021c78:	021fa524 00d3820b 0235126a 009a6329     $.......j.5.)c..
10021c88:	02b0ba78 014c620c 03f17cec 01bc92e7     x....bL..|......
10021c98:	00e060c7 00291fcc 000dc8d0 0160e115     .`....).......`.
10021ca8:	00c49cae 007ed0f7 023dd90e 015c0bd7     ......~...=...\.
10021cb8:	0270c5c7 00c72692 0278fc24 004da96a     ..p..&..$.x.j.M.
10021cc8:	039f7b01 00664bce 00c4afa3 00f0012c     .{...Kf.....,...
10021cd8:	02f4b82b 0051ab01 009e7355 012d4036     +.....Q.Us..6@-.
10021ce8:	00728a12 00cd4787 01932fe3 0042e7da     ..r..G.../....B.
10021cf8:	001cd1fd 01ad0ff4 0297c544 01d752d1     ........D....R..
10021d08:	03f7f8f4 0046f87f 0057f7e1 0046785a     ......F...W.ZxF.
10021d18:	005cf5d5 00e2850d 0105b52f 0169a35c     ..\...../...\.i.
10021d28:	02760ef3 01d0960f 033216b8 01cf7055     ..v.......2.Up..
10021d38:	01d7714a 012b923f 0213e103 013e17e2     Jq..?.+.......>.
10021d48:	02d6ff0d 01cd082c 02851e06 013db2e7     ....,.........=.
10021d58:	031895e5 009e3111 023d64e4 01fbf373     .....1...d=.s...
10021d68:	015c4b4c 0193db51 02fea34b 00f6d58c     LK\.Q...K.......
10021d78:	035dd9d8 01bb8afd 0334be8d 01b1cb3a     ..].......4.:...
10021d88:	00345ec7 019e7273 016898a4 01e2637e     .^4.sr....h.~c..
10021d98:	01f49d75 0010c86b 029825d5 00642c60     u...k....%..`,d.
10021da8:	013225c9 0039f4d4 03b7abae 00704af8     .%2...9......Jp.
10021db8:	001e9ca6 0161ddde 02495df2 016465fa     ......a..]I..ed.
10021dc8:	00e55aae 00580679 025d209c 01d3f17c     .Z..y.X.. ].|...
10021dd8:	039ded0d 01159aa4 0316e0b7 019818f9     ................
10021de8:	001f4d70 0117abf7 0045d72b 01006160     pM......+.E.`a..
10021df8:	00ca2d30 01167978 01308bea 01222dc6     0-..xy....0..-".
10021e08:	011b32b5 015bd283 0080362d 01697baf     .2....[.-6...{i.
10021e18:	03ccb1ed 01918933 0072b6c1 0095eae0     ....3.....r.....
10021e28:	01676f0a 000481c9 004e8eee 01280634     .og.......N.4.(.
10021e38:	02a5d56d 00fdcf3b 024e8dc6 01eff442     m...;.....N.B...
10021e48:	026736f4 01f2264d 02f95c01 0157aefa     .6g.M&...\....W.
10021e58:	00903f8a 011b6c18 01126621 00981622     .?...l..!f.."...
10021e68:	0360ff04 01c129a0 00de8b3e 00f3b30f     ..`..)..>.......
10021e78:	030f64ff 00873551 01953989 01aaf063     .d..Q5...9..c...
10021e88:	02e4e615 0152b430 0276e542 00638f31     ....0.R.B.v.1.c.
10021e98:	0195a990 00981e76 017908b2 00129f08     ....v.....y.....
10021ea8:	03e6655a 00771d80 010b2444 0037b7e8     Ze....w.D$....7.
10021eb8:	002b522a 00d9f56e 003d7dc7 0034fd2e     *R+.n....}=...4.
10021ec8:	00dbc58d 00c19fd3 02697937 008114b6     ........7yi.....
10021ed8:	03aa77a9 018bb2ca 01152b3d 015e5498     .w......=+...T^.
10021ee8:	02fa3cbd 01e876ee 012588d5 016b4c71     .<...v....%.qLk.
10021ef8:	0164685c 0117ce90 019a966d 00b967e4     \hd.....m....g..
10021f08:	03b62874 01ca0dab 0094b240 002bcf08     t(......@.....+.
10021f18:	017f357a 0030a14a 0280d6e3 01f30b55     z5..J.0.....U...
10021f28:	01075663 018644f5 023231da 018b4d86     cV...D...12..M..
10021f38:	004e01b8 0194a100 03e91d60 019594ce     ..N.....`.......
10021f48:	0000a89f 01ab805b 02131c05 00f76f0a     ....[........o..
10021f58:	025ec54b 0103fe73 0261b35b 015c6178     K.^.s...[.a.xa\.
10021f68:	000e70a9 00f89515 0003e3f8 006d6050     .p..........P`m.
10021f78:	014ac04b 01e25a0c 0396bb14 0095e889     K.J..Z..........
10021f88:	03443e75 01bcd83e 0220eaea 01a0391c     u>D.>..... ..9..
10021f98:	01f10c18 00bf3ca9 038d8320 017b9fec     .....<.. .....{.
10021fa8:	01446a8e 017f72d0 02ff2a71 014a1a49     .jD..r..q*..I.J.
10021fb8:	0296b3f6 003c8c78 03c84693 01a128d5     ....x.<..F...(..
10021fc8:	03c9bca0 0187418c 03db2566 01124d7f     .....A..f%...M..
10021fd8:	01176c6e 004bc05b 0316f5ae 013eec03     nl..[.K.......>.
10021fe8:	0199402a 00feade3 01847aed 01ba597f     *@.......z...Y..
10021ff8:	00fc73df 00ca2f3e 02ff95b4 00ed3781     .s..>/.......7..
10022008:	03ba11a5 00c2a909 03da6d9c 017b8c6f     .........m..o.{.
10022018:	02df8067 016c8eb0 0280527b 00ae54fb     g.....l.{R...T..
10022028:	01b1b35a 0157d6f3 03a23c66 010e82cf     Z.....W.f<......
10022038:	008b820a 01db81ce 039dd95d 01e6e6ee     ........].......
10022048:	023126c2 00d5501a 00727d76 01434646     .&1..P..v}r.FFC.
10022058:	03498e0e 01b97a82 023214f2 0028ed81     ..I..z....2...(.
10022068:	018c9fd2 014197c5 029f7374 005f6ba3     ......A.ts...k_.
10022078:	0102da33 01c67dd8 0280ca8b 01445f0a     3....}......._D.
10022088:	025d0936 010699ad 0060accb 006ea045     6.].......`.E.n.
10022098:	00429954 005a7ec3 01ecee10 0166bb76     T.B..~Z.....v.f.
100220a8:	03851802 00e645ba 015cc538 015e45d5     .....E..8.\..E^.
100220b8:	01e58a4f 00e607ce 01230a93 00e29d56     O.........#.V...
100220c8:	028ba31f 014b0737 00745a3d 00a93cb5     ....7.K.=Zt..<..
100220d8:	02d4a28a 001fa750 03705acd 00e37020     ....P....Zp. p..
100220e8:	01e66fde 0177e95b 01075908 00016202     .o..[.w..Y...b..
100220f8:	03854a94 01b4f632 0170b1e3 016cbd3a     .J..2.....p.:.l.
10022108:	02edcbc1 00c3d114 01759740 0149e0b1     ........@.u...I.
10022118:	03d990ad 014fcce5 03e84d15 00ea4e71     ......O..M..qN..
10022128:	027e39e0 008d3108 01a593f2 018cb668     .9~..1......h...
10022138:	0007cba6 00dac56e 021afed7 00fde2a7     ....n...........
10022148:	00608f1f 0029670b 02cb81b7 014af763     ..`..g).....c.J.
10022158:	00847ed4 002c93d2 010c84a7 007f447b     .~....,.....{D..
10022168:	012757e1 00086cfb 018fc1c6 01cf8779     .W'..l......y...
10022178:	004616ab 01744432 0328af64 00e969f7     ..F.2Dt.d.(..i..
10022188:	011beac7 00b52f94 019e5b9b 01af6936     ...../...[..6i..
10022198:	02914e01 005f9a65 027fcf80 01ec7c33     .N..e._.....3|..
100221a8:	00475481 00d3f3dd 009767ca 01f8131e     .TG......g......
100221b8:	00cfb832 0059c6ca 02e1c537 01f95fa8     2.....Y.7...._..
100221c8:	03444141 007eeabb 0164dfa6 00f4ef70     AAD...~...d.p...
100221d8:	00cfaa98 00c76ade 025e54b7 0138c85b     .....j...T^.[.8.
100221e8:	0173b689 0092608e 00e48885 00961261     ..s..`......a...
100221f8:	0042fb37 0004668c 00c2177d 00b6273a     7.B..f..}...:'..
10022208:	02182cf4 01b344ae 019a7697 0082a2b0     .,...D...v......
10022218:	02cc72d9 014e7eac 031ede20 015b0223     .r...~N. ...#.[.
10022228:	00a86e17 014f4444 025f466d 01905bad     .n..DDO.mF_..[..
10022238:	035fce20 01072988 0299bb12 0170ff22      ._..)......".p.
10022248:	02b99108 00259d31 00f38f02 00d7eb09     ....1.%.........
10022258:	0197ab03 01f5d718 02a42fa7 00cf92f0     ........./......
10022268:	00b48145 0071f344 02483590 000e2dfa     E...D.q..5H..-..
10022278:	01316ff8 01be0866 01a9f3e9 0017553c     .o1.f.......<U..
10022288:	00bd274a 00ef3174 00d2d5ad 016ca12e     J'..t1........l.
10022298:	0025969e 01b978c4 03e593fb 0118bd61     ..%..x......a...
100222a8:	03ce362d 00f652e9 012667b7 00cc3e6d     -6...R...g&.m>..
100222b8:	00e0f00a 01751692 00789a8d 0023d445     ......u...x.E.#.
100222c8:	03066222 013ec398 0347e660 004c3d65     "b....>.`.G.e=L.
100222d8:	03ecd41a 001061a3 00923bc6 00c417a3     .....a...;......
100222e8:	003d1838 00c162b5 017663d0 0103ff79     8.=..b...cv.y...
100222f8:	00c20647 01c51175 00170f7c 00994f9a     G...u...|....O..
10022308:	03c55ed6 019337b8 024efe3d 0099527e     .^...7..=.N.~R..
10022318:	026bf9d6 01569187 00b02e83 01e3bbbd     ..k...V.........
10022328:	008c16cf 0074d3d9 02ba5132 001ffa8a     ......t.2Q......
10022338:	01c6401e 00649b87 033f666e 01a1526b     .@....d.nf?.kR..
10022348:	01d4bb68 00278a50 035dff3c 00ba0c47     h...P.'.<.].G...
10022358:	011ffbd2 0190a7be 02132ce3 00e8437f     .........,...C..
10022368:	0217cea0 01d3a2ba 003fbc0f 0031d0fe     ..........?...1.
10022378:	00bf5455 01f2c0f1 01917e98 01a2a2ea     UT.......~......
10022388:	01d861e5 007e8740 01599832 0015651f     .a..@.~.2.Y..e..
10022398:	02a41990 00d1bf8a 0079195b 00059320     ........[.y. ...
100223a8:	037bba27 01e6733e 03c6a75c 01dcd58e     '.{.>s..\.......
100223b8:	01df94ab 012b0034 01bd271b 00ee8840     ....4.+..'..@...
100223c8:	00b9c4af 01d5e262 01f49f7e 003cafe2     ....b...~.....<.
100223d8:	018ee9a0 01cff3b4 03139cb3 007a4218     .............Bz.
100223e8:	03d9a0d6 013e2d01 02924f69 01638932     .....->.iO..2.c.
100223f8:	03e76456 01e891ae 0301b864 007d09ad     Vd......d.....}.
10022408:	01911c01 00499310 0184bdf9 01c0bd11     ......I.........
10022418:	03c68ede 010f1447 02ed35f9 00120b0e     ....G....5......
10022428:	0271d31b 01386bd4 01a12552 018d7224     ..q..k8.R%..$r..
10022438:	038ede2f 009abaf4 02ddae05 019b723e     /...........>r..
10022448:	01a03786 00871f50 01b3fa7e 002ddaec     .7..P...~.....-.
10022458:	0392939b 00307e5f 016dc117 005ea225     ...._~0...m.%.^.
10022468:	02f99dc7 01bb8017 02b231cc 012aa45c     .........1..\.*.
10022478:	01eb772a 01edb758 00f33d92 01707a14     *w..X....=...zp.
10022488:	02b9f6f5 007b0466 01e663e9 01fc5bdb     ....f.{..c...[..
10022498:	0316dec6 01e9f5b2 00eaf1d2 01c0fa6f     ............o...
100224a8:	0301d2c7 002afe6a 03630ae6 00e200a1     ....j.*...c.....
100224b8:	005beddb 00cbb281 025f32d0 015fd0cd     ..[......2_..._.
100224c8:	0259bff6 014fea6d 00885455 01323a65     ..Y.m.O.UT..e:2.
100224d8:	029cad82 01332d76 0210e975 00d65af1     ....v-3.u....Z..
100224e8:	01db9f5e 01ea0303 025c4c61 00e6364f     ^.......aL\.O6..
100224f8:	03e248f3 00f459cc 014be389 0038adf8     .H...Y....K...8.
10022508:	02f6784a 010b0376 03c67850 01627a87     Jx..v...Px...zb.
10022518:	01ddf191 014ec26d 02e7e3f2 01df1834     ....m.N.....4...
10022528:	01763870 01018414 00ecd2aa 019ef138     p8v.........8...
10022538:	031373b9 00aee507 01002c30 01a67272     .s......0,..rr..
10022548:	0146f1cc 01a9c8d6 032fbe60 01ae672e     ..F.....`./..g..
10022558:	02485c62 01b4e975 02e923c0 0120e519     b\H.u....#.... .
10022568:	00c6fcdd 01472bcc 0274e00a 00e9d09d     .....+G...t.....
10022578:	037e74c1 01850bd3 018c3a15 013324cc     .t~......:...$3.
10022588:	002b1ee7 01b546eb 0292383f 015412a8     ..+..F..?8....T.
10022598:	00ac54c7 00be6686 0261ee6f 00e628e5     .T...f..o.a..(..
100225a8:	0240cde3 00e10cc7 00de19a6 01334571     ..@.........qE3.
100225b8:	00189f8e 004ab8a7 030d01cf 01b032c7     ......J......2..
100225c8:	02f5d533 0061d1a7 003747bf 009c4e22     3.....a..G7."N..
100225d8:	013a90e8 00bd4ab9 02958eba 017f453f     ..:..J......?E..
100225e8:	0045ab2c 010b77ca 013276bb 018853ff     ,.E..w...v2..S..
100225f8:	001a5246 0002e346 0179eb20 009a29b5     FR..F... .y..)..
10022608:	02e58647 0024ffc9 0393cb8e 00bf97af     G.....$.........
10022618:	02cbe788 0089b6a2 02fb7ea1 004220e8     .........~... B.
10022628:	0042cf44 00251c1e 0160725d 01f75cfe     D.B...%.]r`..\..
10022638:	00059829 01493f9a 007cb621 0196dd79     )....?I.!.|.y...
10022648:	01d5cc19 0057ac29 03929d5a 0014826c     ....).W.Z...l...
10022658:	03c86b47 00bd66f2 0117135f 011f50a6     Gk...f.._....P..
10022668:	007af070 00fab3e8 02b46e44 0077aad1     p.z.....Dn....w.
10022678:	03a46cdf 01e94fce 02e2e51a 015162d0     .l...O.......bQ.
10022688:	0291c301 0075582d 00e3ce08 01fd6ebf     ....-Xu......n..
10022698:	0214806c 01335585 0170b188 011622d8     l....U3...p.."..
100226a8:	03d01082 00aa9578 0007444f 0064b983     ....x...OD....d.
100226b8:	03a21daa 016ba210 010b1538 01b5c864     ......k.8...d...
100226c8:	01a6417e 00cc86a5 00a8a768 004fa401     ~A......h.....O.
100226d8:	032fcedb 01621160 030c6e73 004d735f     ../.`.b.sn.._sM.
100226e8:	03e8e35b 014ffef7 0206e55b 008bc657     [.....O.[...W...
100226f8:	00814bce 01ce4dfa 013b877f 01803246     .K...M....;.F2..
10022708:	020d7765 008706e2 03b38ea2 00de649f     ew...........d..
10022718:	01dbe01b 01c35d9e 00898de9 017d1810     .....]........}.
10022728:	017bf48d 00dc458a 01069720 0116a783     ..{..E.. .......
10022738:	02a744ec 0096bdc6 038aaba3 0106bc32     .D..........2...
10022748:	02891d5e 00b3e293 03110f67 00ff61c1     ^.......g....a..
10022758:	02a92db2 009be1c5 03753027 00736a86     .-......'0u..js.
10022768:	00b52661 01412f96 02e58252 008126f5     a&.../A.R....&..
10022778:	03d06ba2 01521f85 032d6596 00e1ca80     .k....R..e-.....
10022788:	009348e0 01978a30 02ce40c2 009edaec     .H..0....@......
10022798:	02891d6a 01e9bdfc 029aef49 007f635a     j.......I...Zc..
100227a8:	03216fa1 01f2d9ed 03c3b982 019ebfd4     .o!.............
100227b8:	00da9628 0083a984 01fc5459 018046ab     (.......YT...F..
100227c8:	0395f83c 01e49b73 020e2bec 010b8944     <...s....+..D...
100227d8:	01f1fa15 018f7a5b 00f3f9cc 013c1ad4     ....[z........<.
100227e8:	01b0b62f 01bf1730 02cbf890 01b43200     /...0........2..
100227f8:	01554c7b 00506ffb 03ef4263 01b6ed99     {LU..oP.cB......
10022808:	02857edc 0163cc49 03779340 01a73862     .~..I.c.@.w.b8..
10022818:	029879cb 01d54a2c 02125a3d 01e6a3f4     .y..,J..=Z......
10022828:	03746ab8 009f2352 0302210c 003e224f     .jt.R#...!..O">.
10022838:	03ae5710 005565ac 039179a2 01ce748f     .W...eU..y...t..
10022848:	03b9e8c4 018cbeb6 03fe0c48 01f2148a     ........H.......
10022858:	03ef5aa9 01bb4260 0287b5f4 003488dd     .Z..`B........4.
10022868:	025124ca 01cc459f 00bbe13f 005ece3a     .$Q..E..?...:.^.
10022878:	002f9056 00f556e5 01be913f 00270525     V./..V..?...%.'.
10022888:	001afb6d 00ea9389 023305f5 004e2fca     m.........3../N.
10022898:	00d86598 007d1749 012160fe 0149d2eb     .e..I.}..`!...I.
100228a8:	0158d12a 006d8107 02e4687a 00cbf2a9     *.X...m.zh......
100228b8:	017d9af5 015ba371 03be4f78 016cef85     ..}.q.[.xO....l.
100228c8:	00f82f4b 00efe4a3 000a6f11 014b9558     K/.......o..X.K.
100228d8:	00efebd6 01189fa7 0387ccdf 01e91cc9     ................
100228e8:	007f0640 0047909f 005f8c64 000d964e     @.....G.d._.N...
100228f8:	01766bfb 017d3ab6 036c2600 01d1bd8c     .kv..:}..&l.....
10022908:	036c971c 00bcd16a 0263e7e9 0194ca1b     ..l.j.....c.....
10022918:	038a23ad 0144186d 00b54501 0052666b     .#..m.D..E..kfR.
10022928:	0007ed66 01ed245c 0384b064 017ed72a     f...\$..d...*.~.
10022938:	038285b0 00944f9d 0125e043 0115ce0c     .....O..C.%.....
10022948:	016e223d 01af68ed 036f844f 0048ae8d     ="n..h..O.o...H.
10022958:	0153a2dd 0106ca37 0387ea86 00defa17     ..S.7...........
10022968:	02a85e41 01d2f8f4 02c96ca6 006fa1fe     A^.......l....o.
10022978:	00fe08cd 00740d88 02b4e554 008cb368     ......t.T...h...
10022988:	030ff840 00108ae8 027b43f5 01d479d9     @........C{..y..
10022998:	01da5f3e 018985d5 0352b68e 000b1c2f     >_........R./...
100229a8:	010b2fbb 01fb12d7 00595450 00803a44     ./......PTY.D:..
100229b8:	0105715e 01d0815c 02530f60 00bc1c08     ^q..\...`.S.....
100229c8:	00a409ef 0098cd3c 018d72e1 014cafd1     ....<....r....L.
100229d8:	0396b59c 0103e5b9 016f9da3 008bbde7     ..........o.....
100229e8:	03beca77 01406ad9 023feb43 01ac1a5f     w....j@.C.?._...
100229f8:	0362a3c0 003c12b7 008bb6d9 01783b6d     ..b...<.....m;x.
10022a08:	00fbc003 01f0d2a9 025cac24 01f5d393     ........$.\.....
10022a18:	003441b2 00730dfd 00c7324f 01d59697     .A4...s.O2......
10022a28:	01244a11 00072835 03418713 0045ac19     .J$.5(....A...E.
10022a38:	0055edae 00295f63 00103803 01b1a027     ..U.c_)..8..'...
10022a48:	01ceaeb9 0195bc72 00ad5aec 01c0c72b     ....r....Z..+...
10022a58:	00716c57 004c2334 03941942 010704dc     Wlq.4#L.B.......
10022a68:	0372f196 00e8d1bd 02da6ac8 015444b8     ..r......j...DT.
10022a78:	023dba5a 018d8f42 03a6f40c 00c67262     Z.=.B.......br..
10022a88:	03a36ec7 00ba12c0 01f6ef7c 0016446e     .n......|...nD..
10022a98:	01df0ebb 00e660fd 01959826 007a8962     .....`..&...b.z.
10022aa8:	0303cdd6 01b398e1 00898505 018c459e     .............E..
10022ab8:	039aa270 01acf3b3 012eeaef 006b3cd4     p............<k.
10022ac8:	01692a69 0098e60e 00830507 019a688d     i*i..........h..
10022ad8:	000603d4 01a2e483 011c64b2 01557be7     .........d...{U.
10022ae8:	0373bd08 01dc2e8e 03e186d4 00451d7d     ..s.........}.E.
10022af8:	01892bbc 000946f2 03ffcc5a 0093aae6     .+...F..Z.......
10022b08:	02133817 019d7d37 031782fc 011480da     .8..7}..........
10022b18:	007681c5 000b656c 019205b2 0164073e     ..v.le......>.d.
10022b28:	025eecb4 00a41a1b 0370164c 004f6677     ..^.....L.p.wfO.
10022b38:	03dab31d 01fdb64e 01bfd425 007ceb29     ....N...%...).|.
10022b48:	001c9760 00be9487 0227f9cd 01886033     `.........'.3`..
10022b58:	03882cd3 0183d142 01e5c0ca 00d7b0c8     .,..B...........
10022b68:	03f44029 004eb8cd 013f2da7 010023a0     )@....N..-?..#..
10022b78:	038e0c3a 019009cb 01e55eda 00701b7a     :........^..z.p.
10022b88:	033ec4e2 01deb5a8 0011d321 01c5f177     ..>.....!...w...
10022b98:	019823e4 01284515 00a1e2b1 00c1b394     .#...E(.........
10022ba8:	01fec2db 0133ce28 036d69aa 014ad03f     ....(.3..im.?.J.
10022bb8:	01377ffa 00c6e202 00d14c2c 014d9897     ..7.....,L....M.
10022bc8:	012e17d1 0145abc9 00e7d32b 01e025be     ......E.+....%..
10022bd8:	01fa5ce7 00aa9943 00f19415 015245aa     .\..C........ER.
10022be8:	03e71278 0003725b 00e63eb8 0157c9e1     x...[r...>....W.
10022bf8:	03a26091 00dcf2b4 02c9f57c 0118d360     .`......|...`...
10022c08:	00a6d652 0109249a 007f2ff7 018cdb5a     R....$.../..Z...
10022c18:	0226d9a0 013f93d3 01945441 000103cf     ..&...?.AT......
10022c28:	01ddbbad 01aa3ee2 01d97e37 01e30d75     .....>..7~..u...
10022c38:	00ef2cb2 019b8d9d 0053dd8f 00d0d1eb     .,........S.....
10022c48:	01a5112a 008551fb 015986d3 017a4e7f     *....Q....Y..Nz.
10022c58:	03019bdf 004a8851 03d09cb2 013119b9     ....Q.J.......1.
10022c68:	01d203dd 01be96e5 0334a254 018d5428     ........T.4.(T..
10022c78:	0169cf37 01f5bb6d 01dc2ca0 01806529     7.i.m....,..)e..
10022c88:	005e10a6 016bd65d 02004875 01ea3d4f     ..^.].k.uH..O=..
10022c98:	007daf78 00fba98b 02547b49 0096115c     x.}.....I{T.\...
10022ca8:	011c1377 01d71620 03cc171b 0134f18d     w... .........4.
10022cb8:	007d34e3 00cf4c1d 02faa7d7 00e6a4ae     .4}..L..........
10022cc8:	0293274e 0131c4f9 026eb3a4 01bb46de     N'....1...n..F..
10022cd8:	017d8e15 018ab39a 012ab075 0099ae0a     ..}.....u.*.....
10022ce8:	00665c9c 01a10da8 002f3f27 008d7a08     .\f.....'?/..z..
10022cf8:	02b61780 011327cb 031d7003 018c2416     .....'...p...$..
10022d08:	0274ead1 013f3234 0368ab78 005edb9f     ..t.42?.x.h...^.
10022d18:	0020107c 01b4c5fa 012ca3ca 00242057     |. .......,.W $.
10022d28:	031499a1 000ffc7a 0050e319 008e583c     ....z.....P.<X..
10022d38:	01c91611 014dcd9a 020e5257 00052ae6     ......M.WR...*..
10022d48:	027f8ba5 00264e55 02423c82 012d1eca     ....UN&..<B...-.
10022d58:	017ac42d 01a235f9 02678f87 0072d2d6     -.z..5....g...r.
10022d68:	014afc6c 01301ace 03f636cc 0124c6d2     l.J...0..6....$.
10022d78:	00322378 01cad834 02818b25 009449f1     x#2.4...%....I..
10022d88:	038de743 00cc2f29 02a007e7 012a98a8     C...)/........*.
10022d98:	00f62d6e 0187838e 03cc4782 000be223     n-.......G..#...
10022da8:	03f21c00 01d58ae0 02d82ef6 00b703f4     ................
10022db8:	0119744e 01bfe104 00e49305 00b1583a     Nt..........:X..
10022dc8:	03e5a57a 01c953fb 0160a7df 019eb8b1     z....S....`.....
10022dd8:	01b369f1 00f0c6f8 00948aee 01219342     .i..........B.!.
10022de8:	038df61e 01748dd0 001f7067 00aca158     ......t.gp..X...
10022df8:	02e6d753 00976f2e 0134262d 00cc2d84     S....o..-&4..-..
10022e08:	01cb4272 002f24fe 0373182d 00fe3e76     rB...$/.-.s.v>..
10022e18:	02bae1c4 00ac8d7a 0329551a 00b76fe1     ....z....U)..o..
10022e28:	0097e7d5 01073b04 026d808a 018675e8     .....;....m..u..
10022e38:	02adbef2 00f0ecf0 02ec7f52 01a1df27     ........R...'...
10022e48:	03e1b66d 00efae7a 0191f287 009ad133     m...z.......3...
10022e58:	03387475 001211e3 01678a3e 01a4e5f6     ut8.....>.g.....
10022e68:	02c976f3 019f2055 0189226c 00bad355     .v..U ..l"..U...
10022e78:	02c1c10a 00b1c279 02730383 01fca4d8     ....y.....s.....
10022e88:	01459c36 01ff5e54 012d49e7 01d41314     6.E.T^...I-.....
10022e98:	023bc55f 0021fb5f 0149c726 01f7ac40     _.;._.!.&.I.@...
10022ea8:	0366ee7a 00abdaa1 01a1d96c 0022aa9e     z.f.....l.....".
10022eb8:	019b2fb0 010be4b5 00009c07 005d4b10     ./...........K].
10022ec8:	01ff62ce 00239a3a 03c130ad 01540292     .b..:.#..0....T.
10022ed8:	02938695 0049e85e 0234e36d 000a89be     ....^.I.m.4.....
10022ee8:	021ecc28 0161344b 007eeba3 00bc7cfe     (...K4a...~..|..
10022ef8:	02b8f2f9 01427542 007be5e5 006e2ac9     ....BuB...{..*n.
10022f08:	02b2e486 01766cb9 039a1339 013ea951     .....lv.9...Q.>.
10022f18:	01738f71 0132c4ef 0115b64a 01231d79     q.s...2.J...y.#.
10022f28:	02071ef0 01d6da54 02965406 01751b50     ....T....T..P.u.
10022f38:	02989f9f 01dd1841 013c0ae2 0066878d     ....A.....<...f.
10022f48:	02fa05c3 011d582e 03cc2fa3 0106372a     .....X.../..*7..
10022f58:	02cf8682 00d66473 014b8c60 0090dc6a     ....sd..`.K.j...
10022f68:	011c20c3 010551ac 0196bdbd 005cb375     . ...Q......u.\.
10022f78:	03881684 001cc777 024f8115 004109b5     ....w.....O...A.
10022f88:	00a9a3da 01c693f6 0190266a 01cdaf4e     ........j&..N...
10022f98:	0334b3b4 00cb5424 00ae70aa 005b040b     ..4.$T...p....[.
10022fa8:	011bf445 005c8375 03af9821 016b998b     E...u.\.!.....k.
10022fb8:	022b87fa 01048a56 017ed6e9 0066e23d     ..+.V.....~.=.f.
10022fc8:	0104a339 01336fc6 014e4f2c 010ad273     9....o3.,ON.s...
10022fd8:	031909d9 01c68b9d 02bb52d2 0053854f     .........R..O.S.
10022fe8:	0293eac6 01549878 019b65cc 0019099d     ....x.T..e......
10022ff8:	02116a48 0100996b 00bae5bc 01b008c1     Hj..k...........
10023008:	00d195ad 001d82ee 01e6818a 018685f3     ................
10023018:	00108827 014f6b4d 015c55b6 00caccb1     '...MkO..U\.....
10023028:	039347a3 00be4597 01bc33ac 01acd2fa     .G...E...3......
10023038:	0278c0b2 01cbd90e 004f9e7b 00f79170     ..x.....{.O.p...
10023048:	0130fa5c 01c1b5a3 028e2f24 01a5bd8f     \.0.....$/......
10023058:	00f0922d 00804b06 0171f2d3 011a5959     -....K....q.YY..
10023068:	026f423f 002a9873 031b27a1 00fe5035     ?Bo.s.*..'..5P..
10023078:	0173d16a 00617c67 0362e6dd 0006e71e     j.s.g|a...b.....
10023088:	02c89d29 00d57956 00ec7101 00fa2d05     )...Vy...q...-..
10023098:	00520c90 00e76c1f 0377efe1 01bd07a6     ..R..l....w.....
100230a8:	0384e4ba 0022bd6d 001f2533 01267722     ....m.".3%.."w&.
100230b8:	0076c506 00d3bc99 02741497 013441f4     ..v.......t..A4.
100230c8:	016efdb3 00d1b12f 031163a1 00cade75     ..n./....c..u...
100230d8:	01cc2c4b 00c534a2 02f1bc4e 008d1438     K,...4..N...8...
100230e8:	012f92f4 003364ce 02946b7d 004dc31a     ../..d3.}k....M.
100230f8:	015afd98 01908f07 01fcb36a 017e367b     ..Z.....j...{6~.
10023108:	00bf3990 0079ba37 008af30a 01e5d3cd     .9..7.y.........
10023118:	02f19c7c 01b99c93 03bc13e2 0120297b     |...........{) .
10023128:	01622071 0079c2c0 01f8a16a 007c58ed     q b...y.j....X|.
10023138:	001ad417 015aabcd 01d830f7 01e6258d     ......Z..0...%..
10023148:	0200cb7b 011ea89d 02ce221f 00533910     {........"...9S.
10023158:	032516cc 00626029 01b86677 001cbe03     ..%.)`b.wf......
10023168:	03da526e 01c0ccc7 007691c8 0092cc75     nR........v.u...
10023178:	0015f8c3 0107bb70 03ef854a 01f3e349     ....p...J...I...
10023188:	004693f9 00a278d6 03b309a7 00129e15     ..F..x..........
10023198:	01d14dda 01516d61 00d43a0f 01c9d7a8     .M..amQ..:......
100231a8:	01d7ccf7 01a044df 02b79a38 0079e72e     .....D..8.....y.
100231b8:	0089a66a 008a8851 00332ba5 003d8be7     j...Q....+3...=.
100231c8:	03b321e1 01393438 03d2ac40 01d147f8     .!..849.@....G..
100231d8:	00eea98d 0199bd9e 0267fead 000e2161     ..........g.a!..
100231e8:	03e64c8d 01348b70 023b5f39 01196275     .L..p.4.9_;.ub..
100231f8:	01ec3f96 01fabe5e 0172b9a8 013afa05     .?..^.....r...:.
10023208:	0161694a 0086dfd7 01a36371 00703e80     Jia.....qc...>p.
10023218:	02943dff 01812d88 02741a58 0072267d     .=...-..X.t.}&r.
10023228:	02f232fb 01808678 02a7f9cb 00d7eba4     .2..x...........
10023238:	00f3b1ca 003e8d85 00936a50 000ac3a3     ......>.Pj......
10023248:	00b6cd21 01ae0ed6 03e72680 00dfb634     !........&..4...
10023258:	039f2a62 00280df6 01b1d2bc 01001506     b*....(.........
10023268:	01be82f0 00ffaf6e 01921400 0179d225     ....n.......%.y.
10023278:	00822706 0154fa8e 00cfc88c 01685f09     .'....T......_h.
10023288:	00aef40a 007ee886 02c8f53e 0125123e     ......~.>...>.%.
10023298:	02e8356a 00d3dd31 0207dba2 002b5e01     j5..1........^+.
100232a8:	02b63eb6 01c84e9f 00aa8c86 00e4b8eb     .>...N..........
100232b8:	027b0194 0195c10f 01efe9e7 017046d5     ..{..........Fp.
100232c8:	02a074fb 01dcdef1 00e355cc 003ab907     .t.......U....:.
100232d8:	013ff776 01b14d74 028a35af 014d3a4f     v.?.tM...5..O:M.
100232e8:	0102c997 0022c43f 00b81e05 009ab0ab     ....?.".........
100232f8:	00ce3b79 00276326 024d50ac 009785ff     y;..&c'..PM.....
10023308:	0204f676 0026f5c7 01f2a145 0096b210     v.....&.E.......
10023318:	00823871 00691fab 036c581a 006a2a30     q8....i..Xl.0*j.
10023328:	0042a9fb 00955d45 02f121a7 01dffd5d     ..B.E]...!..]...
10023338:	00fc722b 01397e6c 030d28c8 011be526     +r..l~9..(..&...
10023348:	0117ef26 01337997 00f89698 01aeea0a     &....y3.........
10023358:	00fe3901 006f19a4 035abc5a 00c504cb     .9....o.Z.Z.....
10023368:	0132d528 018460d4 02b48a57 017c92e3     (.2..`..W.....|.
10023378:	00f7f6b7 01567541 03eb54d5 00e0de2c     ....AuV..T..,...
10023388:	038f94ee 01352aa9 0075a74d 012800ba     .....*5.M.u...(.
10023398:	0367b17c 0042e144 015807e3 0006ac4b     |.g.D.B...X.K...
100233a8:	02d266fd 002479fd 03037389 00d8183b     .f...y$..s..;...
100233b8:	001d1286 0061e23b 00478eb0 00a1d107     ....;.a...G.....
100233c8:	023354bd 0048fa9a 01e32d96 01462410     .T3...H..-...$F.
100233d8:	03090231 0016c18a 02e7b78f 003245d9     1............E2.
100233e8:	01a138ec 002a83d5 022c918a 0128e587     .8....*...,...(.
100233f8:	00e6bba0 010ef83e 00614e3b 01a3f7ff     ....>...;Na.....
10023408:	035b3be0 013a476a 01212ff0 00ec7532     .;[.jG:../!.2u..
10023418:	023fb1db 00b35af3 03233f1e 01f5913c     ..?..Z...?#.<...
10023428:	0202c064 0071a7e7 01266898 00dab979     d.....q..h&.y...
10023438:	02d38b79 0023f076 02d9bd41 01a2b3ba     y...v.#.A.......
10023448:	03d7c210 013243bc 00818716 0125bd68     .....C2.....h.%.
10023458:	00c239b8 01e73e23 006cf8db 00b2e70c     .9..#>....l.....
10023468:	015b508f 01655d83 00aa6397 006ff841     .P[..]e..c..A.o.
10023478:	03996c25 0045253f 023e5800 01909458     %l..?%E..X>.X...
10023488:	01e044be 003527f1 03edcb29 01c27e90     .D...'5.)....~..
10023498:	01022790 00b2faff 02ec1105 002e208a     .'........... ..
100234a8:	0226bccc 013473f4 024971be 01456cbe     ..&..s4..qI..lE.
100234b8:	01f54515 00b2cb17 03fd2aca 00976318     .E.......*...c..
100234c8:	01dffd61 0131734a 0348af05 00cbb03a     a...Js1...H.:...
100234d8:	01f9b77c 0063e4e4 02cf0c81 01c3c0a7     |.....c.........
100234e8:	02ed3e33 00c1eccb 003ce8c2 019d22ac     3>........<.."..
100234f8:	02b810bc 015f0366 0224e98c 010b1928     ....f._...$.(...
10023508:	00a6c314 002df576 0210b0b9 00abea97     ....v.-.........
10023518:	0355254d 01877820 01e3c28d 003ad61f     M%U. x........:.
10023528:	037dbbd5 013c2ee7 022a74bd 0113b296     ..}...<..t*.....
10023538:	0395d543 01120c9e 01e3a4ba 000519a0     C...............
10023548:	01c34e0c 00e1c52b 02298e30 013c9bc3     .N..+...0.)...<.
10023558:	0112c7de 009c8891 01c5342e 0124abd2     .........4....$.
10023568:	035a0357 008d9737 03ffbb60 00c84e29     W.Z.7...`...)N..
10023578:	014646fe 00a87df4 018a44cc 0046d77c     .FF..}...D..|.F.
10023588:	02a975fc 00eee290 006b17ef 01bcb56d     .u........k.m...
10023598:	023170e5 01edaa48 03e3b7e6 0014dc4f     .p1.H.......O...
100235a8:	017f6bc2 0065cd7f 02c84266 00e43410     .k....e.fB...4..
100235b8:	028fdc75 007bf8ca 03ae1238 01a497b9     u.....{.8.......
100235c8:	01d0e832 012be4a0 01191df8 003fbe44     2.....+.....D.?.

100235d8 <con_2d>:
100235d8:	02b2f159 01a6e509 022add7a 00d4141d     Y.......z.*.....
100235e8:	00038052 00f3d130 03407977 019ce331     R...0...wy@.1...
100235f8:	01c56dff 00901b67                       .m..g...

10023600 <K>:
10023600:	d76aa478 e8c7b756 242070db c1bdceee     x.j.V....p $....
10023610:	f57c0faf 4787c62a a8304613 fd469501     ..|.*..G.F0...F.
10023620:	698098d8 8b44f7af ffff5bb1 895cd7be     ...i..D..[....\.
10023630:	6b901122 fd987193 a679438e 49b40821     "..k.q...Cy.!..I
10023640:	f61e2562 c040b340 265e5a51 e9b6c7aa     b%..@.@.QZ^&....
10023650:	d62f105d 02441453 d8a1e681 e7d3fbc8     ]./.S.D.........
10023660:	21e1cde6 c33707d6 f4d50d87 455a14ed     ...!..7.......ZE
10023670:	a9e3e905 fcefa3f8 676f02d9 8d2a4c8a     ..........og.L*.
10023680:	fffa3942 8771f681 6d9d6122 fde5380c     B9....q."a.m.8..
10023690:	a4beea44 4bdecfa9 f6bb4b60 bebfbc70     D......K`K..p...
100236a0:	289b7ec6 eaa127fa d4ef3085 04881d05     .~.(.'...0......
100236b0:	d9d4d039 e6db99e5 1fa27cf8 c4ac5665     9........|..eV..
100236c0:	f4292244 432aff97 ab9423a7 fc93a039     D")...*C.#..9...
100236d0:	655b59c3 8f0ccc92 ffeff47d 85845dd1     .Y[e....}....]..
100236e0:	6fa87e4f fe2ce6e0 a3014314 4e0811a1     O~.o..,..C.....N
100236f0:	f7537e82 bd3af235 2ad7d2bb eb86d391     .~S.5.:....*....

10023700 <S>:
10023700:	00000007 0000000c 00000011 00000016     ................
10023710:	00000007 0000000c 00000011 00000016     ................
10023720:	00000007 0000000c 00000011 00000016     ................
10023730:	00000007 0000000c 00000011 00000016     ................
10023740:	00000005 00000009 0000000e 00000014     ................
10023750:	00000005 00000009 0000000e 00000014     ................
10023760:	00000005 00000009 0000000e 00000014     ................
10023770:	00000005 00000009 0000000e 00000014     ................
10023780:	00000004 0000000b 00000010 00000017     ................
10023790:	00000004 0000000b 00000010 00000017     ................
100237a0:	00000004 0000000b 00000010 00000017     ................
100237b0:	00000004 0000000b 00000010 00000017     ................
100237c0:	00000006 0000000a 0000000f 00000015     ................
100237d0:	00000006 0000000a 0000000f 00000015     ................
100237e0:	00000006 0000000a 0000000f 00000015     ................
100237f0:	00000006 0000000a 0000000f 00000015     ................

10023800 <con_off>:
10023800:	00d9e920 015bed68 021d5c7f 024dc32e      ...h.[..\....M.
10023810:	03e190b9 02222221 00888888 02222222     ....!"".....""".
10023820:	00888888 00022222                       ....""..

10023828 <con_mu>:
10023828:	00131b39 0168c28b 027ed9ce 00218ca6     9.....h...~...!.
10023838:	0106215d 03fffac8 03ffffff 03ffffff     ]!..............
10023848:	03ffffff 03ffffff 000000ff              ............

10023854 <con_m>:
10023854:	00f5d3ed 0098c697 01cd6581 037a8bde     .........e....z.
10023864:	0014def9 00000000 00000000 00000000     ................
10023874:	00000000 00040000 00000000 6c696146     ............Fail
10023884:	74206465 6e69206f 61697469 657a696c     ed to initialize
10023894:	43324920 0000002e 5f43584d 45535341      I2C....MXC_ASSE
100238a4:	25205452 25232073 28203a64 0a297325     RT %s #%d: (%s).
100238b4:	00000000 6573552f 6b2f7372 7a72696d     ..../Users/kmirz
100238c4:	65442f61 6f746b73 694d2f70 2f657274     a/Desktop/Mitre/
100238d4:	74667554 43652d73 30324654 6d2f3432     Tufts-eCTF2024/m
100238e4:	2f6b6473 7262694c 65697261 6f422f73     sdk/Libraries/Bo
100238f4:	73647261 58414d2f 30303837 54462f30     ards/MAX78000/FT
10023904:	525f5248 2f417665 72756f53 622f6563     HR_RevA/Source/b
10023914:	6472616f 0000632e 4c494146 00000000     oard.c..FAIL....

10023924 <num_leds>:
10023924:	00000003                                ....

10023928 <led_pin>:
10023928:	40080400 00000001 00010001 40080400     ...@...........@
10023938:	00000002 00010001 40080400 00000004     ...........@....
10023948:	00010001                                ....

1002394c <num_pbs>:
1002394c:	00000002                                ....

10023950 <pb_pin>:
10023950:	40008000 00000004 00010100 40009000     ...@...........@
10023960:	00000080 00010100 6573552f 6b2f7372     ......../Users/k
10023970:	7a72696d 65442f61 6f746b73 694d2f70     mirza/Desktop/Mi
10023980:	2f657274 74667554 43652d73 30324654     tre/Tufts-eCTF20
10023990:	6d2f3432 2f6b6473 7262694c 65697261     24/msdk/Librarie
100239a0:	694d2f73 72446373 72657669 454c2f73     s/MiscDrivers/LE
100239b0:	656c2f44 00632e64 20786469 756e203c     D/led.c.idx < nu
100239c0:	656c5f6d 00007364                       m_leds..

100239c8 <gpio_cfg_uart3>:
100239c8:	40080400 000000c0 00000003              ...@........

100239d4 <gpio_cfg_uart2>:
100239d4:	40009000 00000003 00000002              ...@........

100239e0 <gpio_cfg_uart1>:
100239e0:	40008000 00003000 00000002              ...@.0......

100239ec <gpio_cfg_uart0>:
100239ec:	40008000 00000003 00000002              ...@........

100239f8 <gpio_cfg_i2c2>:
100239f8:	40008000 c0000000 00000002              ...@........

10023a04 <gpio_cfg_i2c1>:
10023a04:	40008000 00030000 00000002              ...@........

10023a10 <gpio_cfg_i2c0>:
10023a10:	40008000 00000c00 00000002              ...@........

10023a1c <gpio_cfg_extclk>:
10023a1c:	40008000 00000008 00000002              ...@........

10023a28 <CSWTCH.16>:
10023a28:	40008000 40009000 40080400 40080600     ...@...@...@...@
10023a38:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
10023a48:	33323130 37363534 62613938 66656463     0123456789abcdef
10023a58:	00000000 33323130 37363534 42413938     ....0123456789AB
10023a68:	46454443 00000000 6c756e28 0000296c     CDEF....(null)..

10023a78 <zeroes.0>:
10023a78:	30303030 30303030 30303030 30303030     0000000000000000

10023a88 <blanks.1>:
10023a88:	20202020 20202020 20202020 20202020                     

10023a98 <zeroes.0>:
10023a98:	30303030 30303030 30303030 30303030     0000000000000000

10023aa8 <blanks.1>:
10023aa8:	20202020 20202020 20202020 20202020                     
10023ab8:	0000000a 435f434c 414c4c4f 00004554     ....LC_COLLATE..
10023ac8:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
10023ad8:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
10023ae8:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
10023af8:	41535345 00534547                       ESSAGES.

10023b00 <_ctype_>:
10023b00:	20202000 20202020 28282020 20282828     .         ((((( 
10023b10:	20202020 20202020 20202020 20202020                     
10023b20:	10108820 10101010 10101010 10101010      ...............
10023b30:	04040410 04040404 10040404 10101010     ................
10023b40:	41411010 41414141 01010101 01010101     ..AAAAAA........
10023b50:	01010101 01010101 01010101 10101010     ................
10023b60:	42421010 42424242 02020202 02020202     ..BBBBBB........
10023b70:	02020202 02020202 02020202 10101010     ................
10023b80:	00000020 00000000 00000000 00000000      ...............
	...
10023c04:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
10023c14:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
10023c24:	00000000 6c6f562f 73656d75 7461642f     ..../Volumes/dat
10023c34:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
10023c44:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
10023c54:	72612f6e 32312d6d 6372732f 77656e2f     n/arm-12/src/new
10023c64:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
10023c74:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
10023c84:	632e616f 00000000                       oa.c....

10023c8c <zeroes.0>:
10023c8c:	30303030 30303030 30303030 30303030     0000000000000000

10023c9c <blanks.1>:
10023c9c:	20202020 20202020 20202020 20202020                     
10023cac:	6c6f562f 73656d75 7461642f 656a2f61     /Volumes/data/je
10023cbc:	6e696b6e 6f772f73 70736b72 2f656361     nkins/workspace/
10023ccc:	2d554e47 6c6f6f74 69616863 72612f6e     GNU-toolchain/ar
10023cdc:	32312d6d 6372732f 77656e2f 2d62696c     m-12/src/newlib-
10023cec:	77677963 6e2f6e69 696c7765 696c2f62     cygwin/newlib/li
10023cfc:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
10023d0c:	00000063                                c...

10023d10 <p05.0>:
10023d10:	00000005 00000019 0000007d 00000000     ........}.......

10023d20 <__mprec_bigtens>:
10023d20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
10023d30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
10023d40:	7f73bf3c 75154fdd                       <.s..O.u

10023d48 <__mprec_tens>:
10023d48:	00000000 3ff00000 00000000 40240000     .......?......$@
10023d58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
10023d68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
10023d78:	00000000 412e8480 00000000 416312d0     .......A......cA
10023d88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
10023d98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
10023da8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
10023db8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
10023dc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
10023dd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
10023de8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
10023df8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
10023e08:	79d99db4 44ea7843 7566202c 6974636e     ...yCx.D, functi
10023e18:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
10023e28:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
10023e38:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
10023e48:	25732564 00000a73                       d%s%s...

10023e50 <_init>:
10023e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10023e52:	bf00      	nop
10023e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
10023e56:	bc08      	pop	{r3}
10023e58:	469e      	mov	lr, r3
10023e5a:	4770      	bx	lr

10023e5c <_fini>:
10023e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10023e5e:	bf00      	nop
10023e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
10023e62:	bc08      	pop	{r3}
10023e64:	469e      	mov	lr, r3
10023e66:	4770      	bx	lr

10023e68 <__EH_FRAME_BEGIN__>:
10023e68:	0010 0000 0000 0000 7a01 0052 7c02 010e     .........zR..|..
10023e78:	0c1b 000d 0038 0000 0018 0000 2f2c ffff     ....8.......,/..
10023e88:	009e 0000 5100 100e 0484 0385 0286 0187     .....Q..........
10023e98:	c75b c5c6 0ec4 4c00 420a 0a0b 0b42 100e     [......L.B..B...
10023ea8:	0484 0385 0286 0187 c751 c5c6 0ec4 0000     ........Q.......
10023eb8:	0010 0000 0000 0000 7a01 0052 7c02 010e     .........zR..|..
10023ec8:	0c1b 000d 0014 0000 0018 0000 2f7c ffff     ............|/..
10023ed8:	0134 0000 0200 0a71 0b43 0000 0010 0000     4.....q.C.......
10023ee8:	0000 0000 7a01 0052 7c02 010e 0c1b 000d     .....zR..|......
10023ef8:	001c 0000 0018 0000 30c0 ffff 00d8 0000     .........0......
10023f08:	4100 080e 0185 0284 4902 4a0a c4c5 0b41     .A.......I.J..A.

10023f18 <__FRAME_END__>:
10023f18:	0000 0000                                   ....

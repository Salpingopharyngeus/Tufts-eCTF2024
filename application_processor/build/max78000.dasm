
/Users/kmirza/Desktop/Mitre/Tufts-eCTF2024/application_processor/build/max78000.elf:     file format elf32-littlearm


Disassembly of section .text:

1000e000 <__isr_vector>:
1000e000:	20020000 	.word	0x20020000
1000e004:	10013535 	.word	0x10013535
1000e008:	100133dd 	.word	0x100133dd
1000e00c:	10013573 	.word	0x10013573
1000e010:	10013575 	.word	0x10013575
1000e014:	10013577 	.word	0x10013577
1000e018:	10013579 	.word	0x10013579
	...
1000e02c:	1001357b 	.word	0x1001357b
1000e030:	1001357d 	.word	0x1001357d
1000e034:	00000000 	.word	0x00000000
1000e038:	1001357f 	.word	0x1001357f
1000e03c:	10013581 	.word	0x10013581
1000e040:	10013585 	.word	0x10013585
1000e044:	10013587 	.word	0x10013587
1000e048:	10013589 	.word	0x10013589
1000e04c:	1001358b 	.word	0x1001358b
1000e050:	1001358d 	.word	0x1001358d
1000e054:	1001358f 	.word	0x1001358f
1000e058:	10013591 	.word	0x10013591
1000e05c:	10013593 	.word	0x10013593
1000e060:	10013595 	.word	0x10013595
1000e064:	10013597 	.word	0x10013597
1000e068:	10013599 	.word	0x10013599
1000e06c:	1001359b 	.word	0x1001359b
1000e070:	1001359d 	.word	0x1001359d
1000e074:	1001359f 	.word	0x1001359f
1000e078:	100135a1 	.word	0x100135a1
1000e07c:	100135a3 	.word	0x100135a3
1000e080:	100135a5 	.word	0x100135a5
1000e084:	100135a7 	.word	0x100135a7
1000e088:	100135a9 	.word	0x100135a9
1000e08c:	100135ab 	.word	0x100135ab
1000e090:	100135ad 	.word	0x100135ad
1000e094:	100135af 	.word	0x100135af
1000e098:	100135b1 	.word	0x100135b1
1000e09c:	100135b3 	.word	0x100135b3
1000e0a0:	10013379 	.word	0x10013379
1000e0a4:	1001337f 	.word	0x1001337f
1000e0a8:	100135b9 	.word	0x100135b9
1000e0ac:	100135bb 	.word	0x100135bb
1000e0b0:	1001018d 	.word	0x1001018d
1000e0b4:	100135bf 	.word	0x100135bf
1000e0b8:	100135c1 	.word	0x100135c1
1000e0bc:	100135c3 	.word	0x100135c3
1000e0c0:	100135c5 	.word	0x100135c5
1000e0c4:	100135c7 	.word	0x100135c7
1000e0c8:	100135c9 	.word	0x100135c9
1000e0cc:	100135cb 	.word	0x100135cb
1000e0d0:	100135cd 	.word	0x100135cd
1000e0d4:	100135cf 	.word	0x100135cf
1000e0d8:	100135d1 	.word	0x100135d1
1000e0dc:	100135d3 	.word	0x100135d3
1000e0e0:	100135d5 	.word	0x100135d5
1000e0e4:	100135d7 	.word	0x100135d7
1000e0e8:	100135d9 	.word	0x100135d9
1000e0ec:	100135db 	.word	0x100135db
1000e0f0:	100135dd 	.word	0x100135dd
1000e0f4:	100135df 	.word	0x100135df
1000e0f8:	100135e1 	.word	0x100135e1
1000e0fc:	100135e3 	.word	0x100135e3
1000e100:	100135e5 	.word	0x100135e5
1000e104:	100135e7 	.word	0x100135e7
1000e108:	100135e9 	.word	0x100135e9
1000e10c:	100135eb 	.word	0x100135eb
1000e110:	100135ed 	.word	0x100135ed
1000e114:	100135ef 	.word	0x100135ef
1000e118:	100135f1 	.word	0x100135f1
1000e11c:	100135f3 	.word	0x100135f3
1000e120:	100135f5 	.word	0x100135f5
1000e124:	100135f7 	.word	0x100135f7
1000e128:	100135f9 	.word	0x100135f9
1000e12c:	100135fb 	.word	0x100135fb
1000e130:	100135fd 	.word	0x100135fd
1000e134:	100135ff 	.word	0x100135ff
1000e138:	10013601 	.word	0x10013601
1000e13c:	10013603 	.word	0x10013603
1000e140:	10013605 	.word	0x10013605
1000e144:	10013607 	.word	0x10013607
1000e148:	10013609 	.word	0x10013609
1000e14c:	1001360b 	.word	0x1001360b
1000e150:	1001360d 	.word	0x1001360d
1000e154:	1001360f 	.word	0x1001360f
1000e158:	10013611 	.word	0x10013611
1000e15c:	10013613 	.word	0x10013613
1000e160:	10013615 	.word	0x10013615
1000e164:	10013617 	.word	0x10013617
1000e168:	10013619 	.word	0x10013619
1000e16c:	1001361b 	.word	0x1001361b
1000e170:	1001361d 	.word	0x1001361d
1000e174:	1001361f 	.word	0x1001361f
1000e178:	10013621 	.word	0x10013621
1000e17c:	10013623 	.word	0x10013623
1000e180:	10013625 	.word	0x10013625
1000e184:	10013627 	.word	0x10013627
1000e188:	10013629 	.word	0x10013629
1000e18c:	1001362b 	.word	0x1001362b
1000e190:	1001362d 	.word	0x1001362d
1000e194:	1001362f 	.word	0x1001362f
1000e198:	10013631 	.word	0x10013631
1000e19c:	10013633 	.word	0x10013633
1000e1a0:	10013635 	.word	0x10013635
1000e1a4:	10013637 	.word	0x10013637
1000e1a8:	10013639 	.word	0x10013639
1000e1ac:	1001363b 	.word	0x1001363b
1000e1b0:	1001363d 	.word	0x1001363d
1000e1b4:	1001363f 	.word	0x1001363f
1000e1b8:	10013641 	.word	0x10013641
1000e1bc:	10013643 	.word	0x10013643
1000e1c0:	10013645 	.word	0x10013645
1000e1c4:	10013647 	.word	0x10013647
1000e1c8:	10013649 	.word	0x10013649
1000e1cc:	1001364b 	.word	0x1001364b
1000e1d0:	1001364d 	.word	0x1001364d
1000e1d4:	1001364f 	.word	0x1001364f
1000e1d8:	10013651 	.word	0x10013651
1000e1dc:	10013653 	.word	0x10013653
	...

1000e200 <firmware_startup>:
1000e200:	4800      	ldr	r0, [pc, #0]	@ (1000e204 <firmware_startup+0x4>)
1000e202:	4780      	blx	r0
1000e204:	10013535 	.word	0x10013535

1000e208 <deregister_tm_clones>:
1000e208:	4803      	ldr	r0, [pc, #12]	@ (1000e218 <deregister_tm_clones+0x10>)
1000e20a:	4b04      	ldr	r3, [pc, #16]	@ (1000e21c <deregister_tm_clones+0x14>)
1000e20c:	4283      	cmp	r3, r0
1000e20e:	d002      	beq.n	1000e216 <deregister_tm_clones+0xe>
1000e210:	4b03      	ldr	r3, [pc, #12]	@ (1000e220 <deregister_tm_clones+0x18>)
1000e212:	b103      	cbz	r3, 1000e216 <deregister_tm_clones+0xe>
1000e214:	4718      	bx	r3
1000e216:	4770      	bx	lr
1000e218:	20000adc 	.word	0x20000adc
1000e21c:	20000adc 	.word	0x20000adc
1000e220:	00000000 	.word	0x00000000

1000e224 <register_tm_clones>:
1000e224:	4805      	ldr	r0, [pc, #20]	@ (1000e23c <register_tm_clones+0x18>)
1000e226:	4b06      	ldr	r3, [pc, #24]	@ (1000e240 <register_tm_clones+0x1c>)
1000e228:	1a1b      	subs	r3, r3, r0
1000e22a:	0fd9      	lsrs	r1, r3, #31
1000e22c:	eb01 01a3 	add.w	r1, r1, r3, asr #2
1000e230:	1049      	asrs	r1, r1, #1
1000e232:	d002      	beq.n	1000e23a <register_tm_clones+0x16>
1000e234:	4b03      	ldr	r3, [pc, #12]	@ (1000e244 <register_tm_clones+0x20>)
1000e236:	b103      	cbz	r3, 1000e23a <register_tm_clones+0x16>
1000e238:	4718      	bx	r3
1000e23a:	4770      	bx	lr
1000e23c:	20000adc 	.word	0x20000adc
1000e240:	20000adc 	.word	0x20000adc
1000e244:	00000000 	.word	0x00000000

1000e248 <__do_global_dtors_aux>:
1000e248:	b510      	push	{r4, lr}
1000e24a:	4c06      	ldr	r4, [pc, #24]	@ (1000e264 <__do_global_dtors_aux+0x1c>)
1000e24c:	7823      	ldrb	r3, [r4, #0]
1000e24e:	b943      	cbnz	r3, 1000e262 <__do_global_dtors_aux+0x1a>
1000e250:	f7ff ffda 	bl	1000e208 <deregister_tm_clones>
1000e254:	4b04      	ldr	r3, [pc, #16]	@ (1000e268 <__do_global_dtors_aux+0x20>)
1000e256:	b113      	cbz	r3, 1000e25e <__do_global_dtors_aux+0x16>
1000e258:	4804      	ldr	r0, [pc, #16]	@ (1000e26c <__do_global_dtors_aux+0x24>)
1000e25a:	f3af 8000 	nop.w
1000e25e:	2301      	movs	r3, #1
1000e260:	7023      	strb	r3, [r4, #0]
1000e262:	bd10      	pop	{r4, pc}
1000e264:	20000c00 	.word	0x20000c00
1000e268:	00000000 	.word	0x00000000
1000e26c:	10033250 	.word	0x10033250

1000e270 <frame_dummy>:
1000e270:	b508      	push	{r3, lr}
1000e272:	4b05      	ldr	r3, [pc, #20]	@ (1000e288 <frame_dummy+0x18>)
1000e274:	b11b      	cbz	r3, 1000e27e <frame_dummy+0xe>
1000e276:	4905      	ldr	r1, [pc, #20]	@ (1000e28c <frame_dummy+0x1c>)
1000e278:	4805      	ldr	r0, [pc, #20]	@ (1000e290 <frame_dummy+0x20>)
1000e27a:	f3af 8000 	nop.w
1000e27e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1000e282:	f7ff bfcf 	b.w	1000e224 <register_tm_clones>
1000e286:	bf00      	nop
1000e288:	00000000 	.word	0x00000000
1000e28c:	20000c04 	.word	0x20000c04
1000e290:	10033250 	.word	0x10033250

1000e294 <BF_encode>:

	return 0;
}

static void BF_encode(char *dst, const BF_word *src, int size)
{
1000e294:	b570      	push	{r4, r5, r6, lr}
	unsigned char *dptr = (unsigned char *)dst;
	unsigned int c1, c2;

	do {
		c1 = *sptr++;
		*dptr++ = BF_itoa64[c1 >> 2];
1000e296:	4d17      	ldr	r5, [pc, #92]	@ (1000e2f4 <BF_encode+0x60>)
	const unsigned char *end = sptr + size;
1000e298:	440a      	add	r2, r1
		c1 = *sptr++;
1000e29a:	460b      	mov	r3, r1
1000e29c:	f813 4b01 	ldrb.w	r4, [r3], #1
		*dptr++ = BF_itoa64[c1 >> 2];
1000e2a0:	08a6      	lsrs	r6, r4, #2
		c1 = (c1 & 0x03) << 4;
		if (sptr >= end) {
1000e2a2:	429a      	cmp	r2, r3
		*dptr++ = BF_itoa64[c1 >> 2];
1000e2a4:	5dae      	ldrb	r6, [r5, r6]
1000e2a6:	7006      	strb	r6, [r0, #0]
		c1 = (c1 & 0x03) << 4;
1000e2a8:	ea4f 1404 	mov.w	r4, r4, lsl #4
1000e2ac:	f004 0430 	and.w	r4, r4, #48	@ 0x30
		if (sptr >= end) {
1000e2b0:	d802      	bhi.n	1000e2b8 <BF_encode+0x24>
			*dptr++ = BF_itoa64[c1];
1000e2b2:	5d2b      	ldrb	r3, [r5, r4]
1000e2b4:	7043      	strb	r3, [r0, #1]
		c2 = *sptr++;
		c1 |= c2 >> 6;
		*dptr++ = BF_itoa64[c1];
		*dptr++ = BF_itoa64[c2 & 0x3f];
	} while (sptr < end);
}
1000e2b6:	bd70      	pop	{r4, r5, r6, pc}
		c2 = *sptr++;
1000e2b8:	784b      	ldrb	r3, [r1, #1]
		c1 |= c2 >> 4;
1000e2ba:	ea44 1413 	orr.w	r4, r4, r3, lsr #4
		c1 = (c2 & 0x0f) << 2;
1000e2be:	009b      	lsls	r3, r3, #2
		*dptr++ = BF_itoa64[c1];
1000e2c0:	5d2c      	ldrb	r4, [r5, r4]
1000e2c2:	7044      	strb	r4, [r0, #1]
		if (sptr >= end) {
1000e2c4:	1c8c      	adds	r4, r1, #2
1000e2c6:	42a2      	cmp	r2, r4
		c1 = (c2 & 0x0f) << 2;
1000e2c8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
		if (sptr >= end) {
1000e2cc:	d802      	bhi.n	1000e2d4 <BF_encode+0x40>
			*dptr++ = BF_itoa64[c1];
1000e2ce:	5ceb      	ldrb	r3, [r5, r3]
1000e2d0:	7083      	strb	r3, [r0, #2]
			break;
1000e2d2:	e7f0      	b.n	1000e2b6 <BF_encode+0x22>
		c2 = *sptr++;
1000e2d4:	788c      	ldrb	r4, [r1, #2]
		c1 |= c2 >> 6;
1000e2d6:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
		*dptr++ = BF_itoa64[c2 & 0x3f];
1000e2da:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
		*dptr++ = BF_itoa64[c1];
1000e2de:	5ceb      	ldrb	r3, [r5, r3]
1000e2e0:	7083      	strb	r3, [r0, #2]
		c2 = *sptr++;
1000e2e2:	3103      	adds	r1, #3
		*dptr++ = BF_itoa64[c2 & 0x3f];
1000e2e4:	3004      	adds	r0, #4
1000e2e6:	5d2b      	ldrb	r3, [r5, r4]
1000e2e8:	f800 3c01 	strb.w	r3, [r0, #-1]
	} while (sptr < end);
1000e2ec:	428a      	cmp	r2, r1
1000e2ee:	d8d4      	bhi.n	1000e29a <BF_encode+0x6>
1000e2f0:	e7e1      	b.n	1000e2b6 <BF_encode+0x22>
1000e2f2:	bf00      	nop
1000e2f4:	10022e22 	.word	0x10022e22

1000e2f8 <BF_set_key>:
	} while (ptr < &data.ctx.S[3][0xFF]);
#endif

static void BF_set_key(const char *key, BF_key expanded, BF_key initial,
    unsigned char flags)
{
1000e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e2fc:	b085      	sub	sp, #20
 * Prefix "$2a$": bug = 0, safety = 0x10000
 * Prefix "$2b$": bug = 0, safety = 0
 * Prefix "$2x$": bug = 1, safety = 0
 * Prefix "$2y$": bug = 0, safety = 0
 */
	bug = (unsigned int)flags & 1;
1000e2fe:	f003 0901 	and.w	r9, r3, #1
	safety = ((BF_word)flags & 2) << 15;
1000e302:	03db      	lsls	r3, r3, #15
{
1000e304:	4688      	mov	r8, r1
	safety = ((BF_word)flags & 2) << 15;
1000e306:	9301      	str	r3, [sp, #4]
			else
				ptr++;
		}
		diff |= tmp[0] ^ tmp[1]; /* Non-zero on any differences */

		expanded[i] = tmp[bug];
1000e308:	a904      	add	r1, sp, #16
	sign = diff = 0;
1000e30a:	2300      	movs	r3, #0
1000e30c:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 1000e39c <BF_set_key+0xa4>
	const char *ptr = key;
1000e310:	4605      	mov	r5, r0
	sign = diff = 0;
1000e312:	469e      	mov	lr, r3
	for (i = 0; i < BF_N + 2; i++) {
1000e314:	469c      	mov	ip, r3
		expanded[i] = tmp[bug];
1000e316:	eb01 0989 	add.w	r9, r1, r9, lsl #2
	for (i = 0; i < BF_N + 2; i++) {
1000e31a:	2400      	movs	r4, #0
1000e31c:	4626      	mov	r6, r4
		for (j = 0; j < 4; j++) {
1000e31e:	4627      	mov	r7, r4
			tmp[0] |= (unsigned char)*ptr; /* correct */
1000e320:	7829      	ldrb	r1, [r5, #0]
			tmp[1] |= (BF_word_signed)(signed char)*ptr; /* bug */
1000e322:	fa4f fb81 	sxtb.w	fp, r1
			tmp[0] |= (unsigned char)*ptr; /* correct */
1000e326:	ea41 2606 	orr.w	r6, r1, r6, lsl #8
			tmp[1] |= (BF_word_signed)(signed char)*ptr; /* bug */
1000e32a:	ea4b 2404 	orr.w	r4, fp, r4, lsl #8
			if (j)
1000e32e:	b91f      	cbnz	r7, 1000e338 <BF_set_key+0x40>
			if (!*ptr)
1000e330:	b389      	cbz	r1, 1000e396 <BF_set_key+0x9e>
				ptr++;
1000e332:	3501      	adds	r5, #1
		for (j = 0; j < 4; j++) {
1000e334:	2701      	movs	r7, #1
1000e336:	e7f3      	b.n	1000e320 <BF_set_key+0x28>
				sign |= tmp[1] & 0x80;
1000e338:	f004 0b80 	and.w	fp, r4, #128	@ 0x80
1000e33c:	ea4e 0e0b 	orr.w	lr, lr, fp
			if (!*ptr)
1000e340:	b339      	cbz	r1, 1000e392 <BF_set_key+0x9a>
				ptr++;
1000e342:	3501      	adds	r5, #1
		for (j = 0; j < 4; j++) {
1000e344:	3701      	adds	r7, #1
1000e346:	2f04      	cmp	r7, #4
1000e348:	d1ea      	bne.n	1000e320 <BF_set_key+0x28>
1000e34a:	e9cd 6402 	strd	r6, r4, [sp, #8]
		diff |= tmp[0] ^ tmp[1]; /* Non-zero on any differences */
1000e34e:	4066      	eors	r6, r4
		expanded[i] = tmp[bug];
1000e350:	f859 4c08 	ldr.w	r4, [r9, #-8]
1000e354:	f848 402c 	str.w	r4, [r8, ip, lsl #2]
		initial[i] = BF_init_state.P[i] ^ tmp[bug];
1000e358:	f85a 1f04 	ldr.w	r1, [sl, #4]!
1000e35c:	4061      	eors	r1, r4
1000e35e:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
	for (i = 0; i < BF_N + 2; i++) {
1000e362:	f10c 0c01 	add.w	ip, ip, #1
1000e366:	f1bc 0f12 	cmp.w	ip, #18
		diff |= tmp[0] ^ tmp[1]; /* Non-zero on any differences */
1000e36a:	ea43 0306 	orr.w	r3, r3, r6
	for (i = 0; i < BF_N + 2; i++) {
1000e36e:	d1d4      	bne.n	1000e31a <BF_set_key+0x22>
 * collision between the correctly computed hash for this password and a set of
 * passwords that could be supplied to the buggy algorithm.  Our safety measure
 * is meant to protect from such many-buggy to one-correct collisions, by
 * deviating from the correct algorithm in such cases.  Let's check for this.
 */
	diff |= diff >> 16; /* still zero iff exact match */
1000e370:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
	diff &= 0xffff; /* ditto */
1000e374:	b29b      	uxth	r3, r3
 * It is crucial that we don't do the same to the expanded key used in the main
 * Eksblowfish loop.  By doing it to only one of these two, we deviate from a
 * state that could be directly specified by a password to the buggy algorithm
 * (and to the fully correct one as well, but that's a side-effect).
 */
	initial[0] ^= sign;
1000e376:	9901      	ldr	r1, [sp, #4]
	sign &= ~diff & safety; /* action needed? */
1000e378:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
1000e37c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
	initial[0] ^= sign;
1000e380:	400b      	ands	r3, r1
1000e382:	6811      	ldr	r1, [r2, #0]
1000e384:	ea03 234e 	and.w	r3, r3, lr, lsl #9
1000e388:	4059      	eors	r1, r3
1000e38a:	6011      	str	r1, [r2, #0]
}
1000e38c:	b005      	add	sp, #20
1000e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ptr = key;
1000e392:	4605      	mov	r5, r0
1000e394:	e7d6      	b.n	1000e344 <BF_set_key+0x4c>
1000e396:	4605      	mov	r5, r0
1000e398:	e7cc      	b.n	1000e334 <BF_set_key+0x3c>
1000e39a:	bf00      	nop
1000e39c:	10023e60 	.word	0x10023e60

1000e3a0 <BF_swap>:
static void BF_swap(BF_word *x, int count)
1000e3a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
		tmp = *x;
1000e3a4:	6803      	ldr	r3, [r0, #0]
1000e3a6:	ba1b      	rev	r3, r3
		*x++ = ((tmp & 0x00FF00FF) << 8) | ((tmp >> 8) & 0x00FF00FF);
1000e3a8:	f840 3b04 	str.w	r3, [r0], #4
	} while (--count);
1000e3ac:	4281      	cmp	r1, r0
1000e3ae:	d1f9      	bne.n	1000e3a4 <BF_swap+0x4>
}
1000e3b0:	4770      	bx	lr
	...

1000e3b4 <BF_crypt>:
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0};

static char *BF_crypt(const char *key, const char *setting,
	char *output, int size,
	BF_word min)
{
1000e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e3b8:	f5ad 5d88 	sub.w	sp, sp, #4352	@ 0x1100
1000e3bc:	b081      	sub	sp, #4
	BF_word tmp1, tmp2, tmp3, tmp4;
	BF_word *ptr;
	BF_word count;
	int i;

	if (size < 7 + 22 + 31 + 1) {
1000e3be:	2b3c      	cmp	r3, #60	@ 0x3c
{
1000e3c0:	4604      	mov	r4, r0
1000e3c2:	9101      	str	r1, [sp, #4]
1000e3c4:	9203      	str	r2, [sp, #12]
	if (size < 7 + 22 + 31 + 1) {
1000e3c6:	dc0b      	bgt.n	1000e3e0 <BF_crypt+0x2c>
		__set_errno(ERANGE);
1000e3c8:	f00b fc70 	bl	10019cac <__errno>
1000e3cc:	2322      	movs	r3, #34	@ 0x22
	    setting[3] != '$' ||
	    setting[4] < '0' || setting[4] > '3' ||
	    setting[5] < '0' || setting[5] > '9' ||
	    (setting[4] == '3' && setting[5] > '1') ||
	    setting[6] != '$') {
		__set_errno(EINVAL);
1000e3ce:	6003      	str	r3, [r0, #0]
		return NULL;
1000e3d0:	2300      	movs	r3, #0
1000e3d2:	9303      	str	r3, [sp, #12]
	BF_swap(data.binary.output, 6);
	BF_encode(&output[7 + 22], data.binary.output, 23);
	output[7 + 22 + 31] = '\0';

	return output;
}
1000e3d4:	9803      	ldr	r0, [sp, #12]
1000e3d6:	f50d 5d88 	add.w	sp, sp, #4352	@ 0x1100
1000e3da:	b001      	add	sp, #4
1000e3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (setting[0] != '$' ||
1000e3e0:	9b01      	ldr	r3, [sp, #4]
1000e3e2:	781b      	ldrb	r3, [r3, #0]
1000e3e4:	2b24      	cmp	r3, #36	@ 0x24
1000e3e6:	d128      	bne.n	1000e43a <BF_crypt+0x86>
1000e3e8:	9b01      	ldr	r3, [sp, #4]
1000e3ea:	785b      	ldrb	r3, [r3, #1]
1000e3ec:	2b32      	cmp	r3, #50	@ 0x32
1000e3ee:	d124      	bne.n	1000e43a <BF_crypt+0x86>
	    setting[2] < 'a' || setting[2] > 'z' ||
1000e3f0:	9b01      	ldr	r3, [sp, #4]
1000e3f2:	789b      	ldrb	r3, [r3, #2]
	    setting[1] != '2' ||
1000e3f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
1000e3f8:	2a19      	cmp	r2, #25
1000e3fa:	d81e      	bhi.n	1000e43a <BF_crypt+0x86>
	    !flags_by_subtype[(unsigned int)(unsigned char)setting[2] - 'a'] ||
1000e3fc:	4d11      	ldr	r5, [pc, #68]	@ (1000e444 <BF_crypt+0x90>)
1000e3fe:	442b      	add	r3, r5
	    setting[2] < 'a' || setting[2] > 'z' ||
1000e400:	f813 3c61 	ldrb.w	r3, [r3, #-97]
1000e404:	b1cb      	cbz	r3, 1000e43a <BF_crypt+0x86>
	    !flags_by_subtype[(unsigned int)(unsigned char)setting[2] - 'a'] ||
1000e406:	9b01      	ldr	r3, [sp, #4]
1000e408:	78db      	ldrb	r3, [r3, #3]
1000e40a:	2b24      	cmp	r3, #36	@ 0x24
1000e40c:	d115      	bne.n	1000e43a <BF_crypt+0x86>
	    setting[4] < '0' || setting[4] > '3' ||
1000e40e:	9b01      	ldr	r3, [sp, #4]
1000e410:	7918      	ldrb	r0, [r3, #4]
	    setting[3] != '$' ||
1000e412:	f1a0 0230 	sub.w	r2, r0, #48	@ 0x30
1000e416:	b2d3      	uxtb	r3, r2
1000e418:	2b03      	cmp	r3, #3
1000e41a:	d80e      	bhi.n	1000e43a <BF_crypt+0x86>
	    setting[5] < '0' || setting[5] > '9' ||
1000e41c:	9b01      	ldr	r3, [sp, #4]
1000e41e:	7959      	ldrb	r1, [r3, #5]
	    setting[4] < '0' || setting[4] > '3' ||
1000e420:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
1000e424:	b2de      	uxtb	r6, r3
1000e426:	2e09      	cmp	r6, #9
1000e428:	d807      	bhi.n	1000e43a <BF_crypt+0x86>
	    setting[5] < '0' || setting[5] > '9' ||
1000e42a:	2833      	cmp	r0, #51	@ 0x33
1000e42c:	d101      	bne.n	1000e432 <BF_crypt+0x7e>
	    (setting[4] == '3' && setting[5] > '1') ||
1000e42e:	2931      	cmp	r1, #49	@ 0x31
1000e430:	d803      	bhi.n	1000e43a <BF_crypt+0x86>
1000e432:	9901      	ldr	r1, [sp, #4]
1000e434:	7989      	ldrb	r1, [r1, #6]
1000e436:	2924      	cmp	r1, #36	@ 0x24
1000e438:	d006      	beq.n	1000e448 <BF_crypt+0x94>
		__set_errno(EINVAL);
1000e43a:	f00b fc37 	bl	10019cac <__errno>
1000e43e:	2316      	movs	r3, #22
1000e440:	e7c5      	b.n	1000e3ce <BF_crypt+0x1a>
1000e442:	bf00      	nop
1000e444:	10022da8 	.word	0x10022da8
	count = (BF_word)1 << ((setting[4] - '0') * 10 + (setting[5] - '0'));
1000e448:	210a      	movs	r1, #10
1000e44a:	fb01 3302 	mla	r3, r1, r2, r3
1000e44e:	2201      	movs	r2, #1
1000e450:	fa02 f303 	lsl.w	r3, r2, r3
1000e454:	9305      	str	r3, [sp, #20]
	if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {
1000e456:	f50d 5389 	add.w	r3, sp, #4384	@ 0x1120
1000e45a:	3308      	adds	r3, #8
1000e45c:	9a05      	ldr	r2, [sp, #20]
1000e45e:	681b      	ldr	r3, [r3, #0]
1000e460:	429a      	cmp	r2, r3
1000e462:	d3ea      	bcc.n	1000e43a <BF_crypt+0x86>
	const unsigned char *sptr = (const unsigned char *)src;
1000e464:	9b01      	ldr	r3, [sp, #4]
		BF_safe_atoi64(c1, *sptr++);
1000e466:	4824      	ldr	r0, [pc, #144]	@ (1000e4f8 <BF_crypt+0x144>)
1000e468:	f50d 5287 	add.w	r2, sp, #4320	@ 0x10e0
1000e46c:	330b      	adds	r3, #11
1000e46e:	320b      	adds	r2, #11
	if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {
1000e470:	2606      	movs	r6, #6
		BF_safe_atoi64(c1, *sptr++);
1000e472:	f813 1c04 	ldrb.w	r1, [r3, #-4]
1000e476:	3920      	subs	r1, #32
1000e478:	295f      	cmp	r1, #95	@ 0x5f
1000e47a:	d8de      	bhi.n	1000e43a <BF_crypt+0x86>
1000e47c:	5c47      	ldrb	r7, [r0, r1]
1000e47e:	2f3f      	cmp	r7, #63	@ 0x3f
1000e480:	d8db      	bhi.n	1000e43a <BF_crypt+0x86>
		BF_safe_atoi64(c2, *sptr++);
1000e482:	f813 1c03 	ldrb.w	r1, [r3, #-3]
1000e486:	3920      	subs	r1, #32
1000e488:	295f      	cmp	r1, #95	@ 0x5f
1000e48a:	d8d6      	bhi.n	1000e43a <BF_crypt+0x86>
1000e48c:	f810 c001 	ldrb.w	ip, [r0, r1]
1000e490:	f1bc 0f3f 	cmp.w	ip, #63	@ 0x3f
1000e494:	d8d1      	bhi.n	1000e43a <BF_crypt+0x86>
		*dptr++ = (c1 << 2) | ((c2 & 0x30) >> 4);
1000e496:	ea4f 111c 	mov.w	r1, ip, lsr #4
1000e49a:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
		if (dptr >= end) break;
1000e49e:	2e01      	cmp	r6, #1
		*dptr++ = (c1 << 2) | ((c2 & 0x30) >> 4);
1000e4a0:	f802 1c03 	strb.w	r1, [r2, #-3]
		if (dptr >= end) break;
1000e4a4:	f041 830c 	bne.w	1000fac0 <BF_crypt+0x170c>
	BF_swap(data.binary.salt, 4);
1000e4a8:	f50d 5086 	add.w	r0, sp, #4288	@ 0x10c0
1000e4ac:	3018      	adds	r0, #24
1000e4ae:	2104      	movs	r1, #4
1000e4b0:	3010      	adds	r0, #16
1000e4b2:	f7ff ff75 	bl	1000e3a0 <BF_swap>
	    flags_by_subtype[(unsigned int)(unsigned char)setting[2] - 'a']);
1000e4b6:	9b01      	ldr	r3, [sp, #4]
1000e4b8:	789b      	ldrb	r3, [r3, #2]
1000e4ba:	442b      	add	r3, r5
	BF_set_key(key, data.expanded_key, data.ctx.P,
1000e4bc:	aa18      	add	r2, sp, #96	@ 0x60
1000e4be:	f813 3c61 	ldrb.w	r3, [r3, #-97]
1000e4c2:	f602 72f8 	addw	r2, r2, #4088	@ 0xff8
1000e4c6:	4620      	mov	r0, r4
1000e4c8:	f50d 5185 	add.w	r1, sp, #4256	@ 0x10a0
	memcpy(data.ctx.S, BF_init_state.S, sizeof(data.ctx.S));
1000e4cc:	ac40      	add	r4, sp, #256	@ 0x100
	BF_set_key(key, data.expanded_key, data.ctx.P,
1000e4ce:	9204      	str	r2, [sp, #16]
1000e4d0:	f7ff ff12 	bl	1000e2f8 <BF_set_key>
	memcpy(data.ctx.S, BF_init_state.S, sizeof(data.ctx.S));
1000e4d4:	4909      	ldr	r1, [pc, #36]	@ (1000e4fc <BF_crypt+0x148>)
1000e4d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
1000e4da:	f1a4 00a8 	sub.w	r0, r4, #168	@ 0xa8
1000e4de:	f00b fdef 	bl	1001a0c0 <memcpy>
	for (i = 0; i < BF_N + 2; i += 2) {
1000e4e2:	2600      	movs	r6, #0
	memcpy(data.ctx.S, BF_init_state.S, sizeof(data.ctx.S));
1000e4e4:	9f04      	ldr	r7, [sp, #16]
	L = R = 0;
1000e4e6:	46b6      	mov	lr, r6
1000e4e8:	46b0      	mov	r8, r6
		BF_ENCRYPT;
1000e4ea:	f60d 4358 	addw	r3, sp, #3160	@ 0xc58
1000e4ee:	f60d 0258 	addw	r2, sp, #2136	@ 0x858
1000e4f2:	f50d 618b 	add.w	r1, sp, #1112	@ 0x458
1000e4f6:	e003      	b.n	1000e500 <BF_crypt+0x14c>
1000e4f8:	10022dc2 	.word	0x10022dc2
1000e4fc:	10022e64 	.word	0x10022e64
		L ^= data.binary.salt[i & 2];
1000e500:	f006 0c02 	and.w	ip, r6, #2
1000e504:	eb04 008c 	add.w	r0, r4, ip, lsl #2
		BF_ENCRYPT;
1000e508:	f8d4 5f58 	ldr.w	r5, [r4, #3928]	@ 0xf58
1000e50c:	f8d0 0fe8 	ldr.w	r0, [r0, #4072]	@ 0xfe8
1000e510:	4068      	eors	r0, r5
1000e512:	ea80 0008 	eor.w	r0, r0, r8
1000e516:	ea4f 3b90 	mov.w	fp, r0, lsr #14
1000e51a:	0d85      	lsrs	r5, r0, #22
1000e51c:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
1000e520:	ea4f 1a90 	mov.w	sl, r0, lsr #6
1000e524:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000e528:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e52c:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e530:	f851 b00b 	ldr.w	fp, [r1, fp]
1000e534:	f859 5005 	ldr.w	r5, [r9, r5]
1000e538:	f852 a00a 	ldr.w	sl, [r2, sl]
		R ^= data.binary.salt[(i & 2) + 1];
1000e53c:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
		BF_ENCRYPT;
1000e540:	ea4f 0880 	mov.w	r8, r0, lsl #2
1000e544:	445d      	add	r5, fp
1000e546:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e54a:	ea85 0a0a 	eor.w	sl, r5, sl
1000e54e:	f8dc 5fec 	ldr.w	r5, [ip, #4076]	@ 0xfec
1000e552:	f8d4 cf5c 	ldr.w	ip, [r4, #3932]	@ 0xf5c
1000e556:	ea85 0c0c 	eor.w	ip, r5, ip
1000e55a:	f853 5008 	ldr.w	r5, [r3, r8]
1000e55e:	44aa      	add	sl, r5
1000e560:	ea8c 0c0a 	eor.w	ip, ip, sl
1000e564:	ea8c 0c0e 	eor.w	ip, ip, lr
1000e568:	ea4f 3a9c 	mov.w	sl, ip, lsr #14
1000e56c:	ea4f 559c 	mov.w	r5, ip, lsr #22
1000e570:	ea4f 189c 	mov.w	r8, ip, lsr #6
1000e574:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e578:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e57c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e580:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e584:	f859 5005 	ldr.w	r5, [r9, r5]
1000e588:	f852 8008 	ldr.w	r8, [r2, r8]
1000e58c:	4455      	add	r5, sl
1000e58e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
1000e592:	ea85 0808 	eor.w	r8, r5, r8
1000e596:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e59a:	f8d4 5f60 	ldr.w	r5, [r4, #3936]	@ 0xf60
1000e59e:	4045      	eors	r5, r0
1000e5a0:	f853 000e 	ldr.w	r0, [r3, lr]
1000e5a4:	4440      	add	r0, r8
1000e5a6:	4068      	eors	r0, r5
1000e5a8:	ea4f 3a90 	mov.w	sl, r0, lsr #14
1000e5ac:	0d85      	lsrs	r5, r0, #22
1000e5ae:	ea4f 1e90 	mov.w	lr, r0, lsr #6
1000e5b2:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e5b6:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e5ba:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e5be:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e5c2:	f859 5005 	ldr.w	r5, [r9, r5]
1000e5c6:	f852 e00e 	ldr.w	lr, [r2, lr]
1000e5ca:	4455      	add	r5, sl
1000e5cc:	ea4f 0880 	mov.w	r8, r0, lsl #2
1000e5d0:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e5d4:	ea85 0e0e 	eor.w	lr, r5, lr
1000e5d8:	f8d4 5f64 	ldr.w	r5, [r4, #3940]	@ 0xf64
1000e5dc:	ea8c 0c05 	eor.w	ip, ip, r5
1000e5e0:	f853 5008 	ldr.w	r5, [r3, r8]
1000e5e4:	44ae      	add	lr, r5
1000e5e6:	ea8e 0e0c 	eor.w	lr, lr, ip
1000e5ea:	ea4f 3a9e 	mov.w	sl, lr, lsr #14
1000e5ee:	ea4f 559e 	mov.w	r5, lr, lsr #22
1000e5f2:	ea4f 1c9e 	mov.w	ip, lr, lsr #6
1000e5f6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e5fa:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e5fe:	f40c 7c7f 	and.w	ip, ip, #1020	@ 0x3fc
1000e602:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e606:	f859 5005 	ldr.w	r5, [r9, r5]
1000e60a:	f852 c00c 	ldr.w	ip, [r2, ip]
1000e60e:	4455      	add	r5, sl
1000e610:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000e614:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e618:	ea85 0c0c 	eor.w	ip, r5, ip
1000e61c:	f8d4 5f68 	ldr.w	r5, [r4, #3944]	@ 0xf68
1000e620:	4068      	eors	r0, r5
1000e622:	f853 5008 	ldr.w	r5, [r3, r8]
1000e626:	44ac      	add	ip, r5
1000e628:	ea8c 0c00 	eor.w	ip, ip, r0
1000e62c:	ea4f 3a9c 	mov.w	sl, ip, lsr #14
1000e630:	ea4f 509c 	mov.w	r0, ip, lsr #22
1000e634:	ea4f 159c 	mov.w	r5, ip, lsr #6
1000e638:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e63c:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e640:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e644:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e648:	f859 0000 	ldr.w	r0, [r9, r0]
1000e64c:	5955      	ldr	r5, [r2, r5]
1000e64e:	4450      	add	r0, sl
1000e650:	ea4f 088c 	mov.w	r8, ip, lsl #2
1000e654:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e658:	4045      	eors	r5, r0
1000e65a:	f8d4 0f6c 	ldr.w	r0, [r4, #3948]	@ 0xf6c
1000e65e:	ea8e 0e00 	eor.w	lr, lr, r0
1000e662:	f853 0008 	ldr.w	r0, [r3, r8]
1000e666:	4405      	add	r5, r0
1000e668:	ea85 050e 	eor.w	r5, r5, lr
1000e66c:	ea4f 3a95 	mov.w	sl, r5, lsr #14
1000e670:	0da8      	lsrs	r0, r5, #22
1000e672:	ea4f 1e95 	mov.w	lr, r5, lsr #6
1000e676:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e67a:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e67e:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e682:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e686:	f859 0000 	ldr.w	r0, [r9, r0]
1000e68a:	f852 e00e 	ldr.w	lr, [r2, lr]
1000e68e:	4450      	add	r0, sl
1000e690:	ea4f 0885 	mov.w	r8, r5, lsl #2
1000e694:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e698:	ea80 0e0e 	eor.w	lr, r0, lr
1000e69c:	f8d4 0f70 	ldr.w	r0, [r4, #3952]	@ 0xf70
1000e6a0:	ea8c 0c00 	eor.w	ip, ip, r0
1000e6a4:	f853 0008 	ldr.w	r0, [r3, r8]
1000e6a8:	4486      	add	lr, r0
1000e6aa:	ea8e 0e0c 	eor.w	lr, lr, ip
1000e6ae:	ea4f 3a9e 	mov.w	sl, lr, lsr #14
1000e6b2:	ea4f 509e 	mov.w	r0, lr, lsr #22
1000e6b6:	ea4f 1c9e 	mov.w	ip, lr, lsr #6
1000e6ba:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e6be:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e6c2:	f40c 7c7f 	and.w	ip, ip, #1020	@ 0x3fc
1000e6c6:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e6ca:	f859 0000 	ldr.w	r0, [r9, r0]
1000e6ce:	f852 c00c 	ldr.w	ip, [r2, ip]
1000e6d2:	4450      	add	r0, sl
1000e6d4:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000e6d8:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e6dc:	ea80 0c0c 	eor.w	ip, r0, ip
1000e6e0:	f8d4 0f74 	ldr.w	r0, [r4, #3956]	@ 0xf74
1000e6e4:	4045      	eors	r5, r0
1000e6e6:	f853 0008 	ldr.w	r0, [r3, r8]
1000e6ea:	4484      	add	ip, r0
1000e6ec:	ea8c 0c05 	eor.w	ip, ip, r5
1000e6f0:	ea4f 3a9c 	mov.w	sl, ip, lsr #14
1000e6f4:	ea4f 509c 	mov.w	r0, ip, lsr #22
1000e6f8:	ea4f 159c 	mov.w	r5, ip, lsr #6
1000e6fc:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e700:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e704:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e708:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e70c:	f859 0000 	ldr.w	r0, [r9, r0]
1000e710:	5955      	ldr	r5, [r2, r5]
1000e712:	4450      	add	r0, sl
1000e714:	ea4f 088c 	mov.w	r8, ip, lsl #2
1000e718:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e71c:	4045      	eors	r5, r0
1000e71e:	f8d4 0f78 	ldr.w	r0, [r4, #3960]	@ 0xf78
1000e722:	ea8e 0e00 	eor.w	lr, lr, r0
1000e726:	f853 0008 	ldr.w	r0, [r3, r8]
1000e72a:	4405      	add	r5, r0
1000e72c:	ea85 050e 	eor.w	r5, r5, lr
1000e730:	ea4f 3a95 	mov.w	sl, r5, lsr #14
1000e734:	0da8      	lsrs	r0, r5, #22
1000e736:	ea4f 1e95 	mov.w	lr, r5, lsr #6
1000e73a:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e73e:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e742:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e746:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e74a:	f859 0000 	ldr.w	r0, [r9, r0]
1000e74e:	f852 e00e 	ldr.w	lr, [r2, lr]
1000e752:	4450      	add	r0, sl
1000e754:	ea4f 0885 	mov.w	r8, r5, lsl #2
1000e758:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e75c:	ea80 0e0e 	eor.w	lr, r0, lr
1000e760:	f8d4 0f7c 	ldr.w	r0, [r4, #3964]	@ 0xf7c
1000e764:	ea8c 0c00 	eor.w	ip, ip, r0
1000e768:	f853 0008 	ldr.w	r0, [r3, r8]
1000e76c:	4486      	add	lr, r0
1000e76e:	ea8e 0e0c 	eor.w	lr, lr, ip
1000e772:	ea4f 3a9e 	mov.w	sl, lr, lsr #14
1000e776:	ea4f 509e 	mov.w	r0, lr, lsr #22
1000e77a:	ea4f 1c9e 	mov.w	ip, lr, lsr #6
1000e77e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e782:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e786:	f40c 7c7f 	and.w	ip, ip, #1020	@ 0x3fc
1000e78a:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e78e:	f859 0000 	ldr.w	r0, [r9, r0]
1000e792:	f852 c00c 	ldr.w	ip, [r2, ip]
1000e796:	4450      	add	r0, sl
1000e798:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000e79c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e7a0:	ea80 0c0c 	eor.w	ip, r0, ip
1000e7a4:	f8d4 0f80 	ldr.w	r0, [r4, #3968]	@ 0xf80
1000e7a8:	4045      	eors	r5, r0
1000e7aa:	f853 0008 	ldr.w	r0, [r3, r8]
1000e7ae:	4484      	add	ip, r0
1000e7b0:	ea8c 0c05 	eor.w	ip, ip, r5
1000e7b4:	ea4f 3a9c 	mov.w	sl, ip, lsr #14
1000e7b8:	ea4f 509c 	mov.w	r0, ip, lsr #22
1000e7bc:	ea4f 159c 	mov.w	r5, ip, lsr #6
1000e7c0:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e7c4:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e7c8:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e7cc:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e7d0:	f859 0000 	ldr.w	r0, [r9, r0]
1000e7d4:	5955      	ldr	r5, [r2, r5]
1000e7d6:	4450      	add	r0, sl
1000e7d8:	ea4f 088c 	mov.w	r8, ip, lsl #2
1000e7dc:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e7e0:	4045      	eors	r5, r0
1000e7e2:	f8d4 0f84 	ldr.w	r0, [r4, #3972]	@ 0xf84
1000e7e6:	ea8e 0e00 	eor.w	lr, lr, r0
1000e7ea:	f853 0008 	ldr.w	r0, [r3, r8]
1000e7ee:	4405      	add	r5, r0
1000e7f0:	ea85 050e 	eor.w	r5, r5, lr
1000e7f4:	ea4f 3a95 	mov.w	sl, r5, lsr #14
1000e7f8:	0da8      	lsrs	r0, r5, #22
1000e7fa:	ea4f 1e95 	mov.w	lr, r5, lsr #6
1000e7fe:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e802:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e806:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e80a:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e80e:	f859 0000 	ldr.w	r0, [r9, r0]
1000e812:	f852 e00e 	ldr.w	lr, [r2, lr]
1000e816:	4450      	add	r0, sl
1000e818:	ea4f 0885 	mov.w	r8, r5, lsl #2
1000e81c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e820:	ea80 0e0e 	eor.w	lr, r0, lr
1000e824:	f8d4 0f88 	ldr.w	r0, [r4, #3976]	@ 0xf88
1000e828:	ea8c 0c00 	eor.w	ip, ip, r0
1000e82c:	f853 0008 	ldr.w	r0, [r3, r8]
1000e830:	4486      	add	lr, r0
1000e832:	ea8e 0e0c 	eor.w	lr, lr, ip
1000e836:	ea4f 3a9e 	mov.w	sl, lr, lsr #14
1000e83a:	ea4f 509e 	mov.w	r0, lr, lsr #22
1000e83e:	ea4f 1c9e 	mov.w	ip, lr, lsr #6
1000e842:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e846:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e84a:	f40c 7c7f 	and.w	ip, ip, #1020	@ 0x3fc
1000e84e:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e852:	f859 0000 	ldr.w	r0, [r9, r0]
1000e856:	f852 c00c 	ldr.w	ip, [r2, ip]
1000e85a:	4450      	add	r0, sl
1000e85c:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000e860:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e864:	ea80 0c0c 	eor.w	ip, r0, ip
1000e868:	f8d4 0f8c 	ldr.w	r0, [r4, #3980]	@ 0xf8c
1000e86c:	4045      	eors	r5, r0
1000e86e:	f853 0008 	ldr.w	r0, [r3, r8]
1000e872:	4484      	add	ip, r0
1000e874:	ea8c 0c05 	eor.w	ip, ip, r5
1000e878:	ea4f 3a9c 	mov.w	sl, ip, lsr #14
1000e87c:	ea4f 509c 	mov.w	r0, ip, lsr #22
1000e880:	ea4f 159c 	mov.w	r5, ip, lsr #6
1000e884:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e888:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e88c:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000e890:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e894:	f859 0000 	ldr.w	r0, [r9, r0]
1000e898:	5955      	ldr	r5, [r2, r5]
1000e89a:	4450      	add	r0, sl
1000e89c:	ea4f 088c 	mov.w	r8, ip, lsl #2
1000e8a0:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e8a4:	4045      	eors	r5, r0
1000e8a6:	f8d4 0f90 	ldr.w	r0, [r4, #3984]	@ 0xf90
1000e8aa:	ea8e 0e00 	eor.w	lr, lr, r0
1000e8ae:	f853 0008 	ldr.w	r0, [r3, r8]
1000e8b2:	4405      	add	r5, r0
1000e8b4:	ea85 050e 	eor.w	r5, r5, lr
1000e8b8:	ea4f 3895 	mov.w	r8, r5, lsr #14
1000e8bc:	0da8      	lsrs	r0, r5, #22
1000e8be:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e8c2:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e8c6:	ea4f 1a95 	mov.w	sl, r5, lsr #6
1000e8ca:	f851 8008 	ldr.w	r8, [r1, r8]
1000e8ce:	f859 0000 	ldr.w	r0, [r9, r0]
1000e8d2:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e8d6:	4440      	add	r0, r8
1000e8d8:	f852 800a 	ldr.w	r8, [r2, sl]
1000e8dc:	ea4f 0e85 	mov.w	lr, r5, lsl #2
1000e8e0:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e8e4:	ea80 0808 	eor.w	r8, r0, r8
1000e8e8:	f8d4 0f94 	ldr.w	r0, [r4, #3988]	@ 0xf94
1000e8ec:	ea8c 0c00 	eor.w	ip, ip, r0
1000e8f0:	f853 000e 	ldr.w	r0, [r3, lr]
1000e8f4:	4480      	add	r8, r0
1000e8f6:	ea88 080c 	eor.w	r8, r8, ip
1000e8fa:	ea4f 3a98 	mov.w	sl, r8, lsr #14
1000e8fe:	ea4f 5098 	mov.w	r0, r8, lsr #22
1000e902:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000e906:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000e90a:	f400 707f 	and.w	r0, r0, #1020	@ 0x3fc
1000e90e:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e912:	f851 a00a 	ldr.w	sl, [r1, sl]
1000e916:	f859 0000 	ldr.w	r0, [r9, r0]
1000e91a:	f852 e00e 	ldr.w	lr, [r2, lr]
1000e91e:	ea4f 0c88 	mov.w	ip, r8, lsl #2
1000e922:	4450      	add	r0, sl
1000e924:	ea80 0e0e 	eor.w	lr, r0, lr
1000e928:	f40c 7c7f 	and.w	ip, ip, #1020	@ 0x3fc
1000e92c:	f8d4 0f98 	ldr.w	r0, [r4, #3992]	@ 0xf98
1000e930:	4045      	eors	r5, r0
1000e932:	f853 000c 	ldr.w	r0, [r3, ip]
1000e936:	4486      	add	lr, r0
1000e938:	f8d4 0f9c 	ldr.w	r0, [r4, #3996]	@ 0xf9c
	for (i = 0; i < BF_N + 2; i += 2) {
1000e93c:	3602      	adds	r6, #2
		BF_ENCRYPT;
1000e93e:	ea8e 0e05 	eor.w	lr, lr, r5
1000e942:	ea88 0800 	eor.w	r8, r8, r0
	for (i = 0; i < BF_N + 2; i += 2) {
1000e946:	2e12      	cmp	r6, #18
		data.ctx.P[i + 1] = R;
1000e948:	e9c7 8e00 	strd	r8, lr, [r7]
	for (i = 0; i < BF_N + 2; i += 2) {
1000e94c:	f107 0708 	add.w	r7, r7, #8
1000e950:	f47f add6 	bne.w	1000e500 <BF_crypt+0x14c>
1000e954:	f44f 7c80 	mov.w	ip, #256	@ 0x100
	ptr = data.ctx.S[0];
1000e958:	f8cd 9008 	str.w	r9, [sp, #8]
		L ^= data.binary.salt[(BF_N + 2) & 3];
1000e95c:	eb0d 030c 	add.w	r3, sp, ip
		BF_ENCRYPT;
1000e960:	4648      	mov	r0, r9
1000e962:	f60d 4258 	addw	r2, sp, #3160	@ 0xc58
1000e966:	f60d 0158 	addw	r1, sp, #2136	@ 0x858
1000e96a:	f50d 648b 	add.w	r4, sp, #1112	@ 0x458
1000e96e:	f8d3 7f58 	ldr.w	r7, [r3, #3928]	@ 0xf58
1000e972:	f8d3 6ff0 	ldr.w	r6, [r3, #4080]	@ 0xff0
1000e976:	407e      	eors	r6, r7
1000e978:	ea86 0a08 	eor.w	sl, r6, r8
1000e97c:	ea4f 3b9a 	mov.w	fp, sl, lsr #14
1000e980:	ea4f 569a 	mov.w	r6, sl, lsr #22
1000e984:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000e988:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000e98c:	ea4f 179a 	mov.w	r7, sl, lsr #6
1000e990:	5986      	ldr	r6, [r0, r6]
1000e992:	f854 b00b 	ldr.w	fp, [r4, fp]
1000e996:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000e99a:	44b3      	add	fp, r6
1000e99c:	59ce      	ldr	r6, [r1, r7]
1000e99e:	f8d3 7ff4 	ldr.w	r7, [r3, #4084]	@ 0xff4
1000e9a2:	ea4f 088a 	mov.w	r8, sl, lsl #2
1000e9a6:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000e9aa:	ea8b 0b06 	eor.w	fp, fp, r6
1000e9ae:	f8d3 6f5c 	ldr.w	r6, [r3, #3932]	@ 0xf5c
1000e9b2:	407e      	eors	r6, r7
1000e9b4:	f852 7008 	ldr.w	r7, [r2, r8]
1000e9b8:	44bb      	add	fp, r7
1000e9ba:	ea86 060b 	eor.w	r6, r6, fp
1000e9be:	ea86 080e 	eor.w	r8, r6, lr
1000e9c2:	ea4f 3e98 	mov.w	lr, r8, lsr #14
1000e9c6:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000e9ca:	ea4f 1798 	mov.w	r7, r8, lsr #6
1000e9ce:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000e9d2:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000e9d6:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000e9da:	f854 e00e 	ldr.w	lr, [r4, lr]
1000e9de:	5986      	ldr	r6, [r0, r6]
1000e9e0:	59cf      	ldr	r7, [r1, r7]
1000e9e2:	ea4f 0b88 	mov.w	fp, r8, lsl #2
1000e9e6:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000e9ea:	4476      	add	r6, lr
1000e9ec:	ea86 0e07 	eor.w	lr, r6, r7
1000e9f0:	f852 600b 	ldr.w	r6, [r2, fp]
1000e9f4:	f8d3 7f60 	ldr.w	r7, [r3, #3936]	@ 0xf60
1000e9f8:	44b6      	add	lr, r6
1000e9fa:	ea8a 0a07 	eor.w	sl, sl, r7
1000e9fe:	ea8e 0e0a 	eor.w	lr, lr, sl
1000ea02:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000ea06:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000ea0a:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000ea0e:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ea12:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ea16:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000ea1a:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ea1e:	5986      	ldr	r6, [r0, r6]
1000ea20:	59cf      	ldr	r7, [r1, r7]
1000ea22:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000ea26:	445e      	add	r6, fp
1000ea28:	ea86 0b07 	eor.w	fp, r6, r7
1000ea2c:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ea30:	f8d3 7f64 	ldr.w	r7, [r3, #3940]	@ 0xf64
1000ea34:	ea88 0807 	eor.w	r8, r8, r7
1000ea38:	f852 700a 	ldr.w	r7, [r2, sl]
1000ea3c:	445f      	add	r7, fp
1000ea3e:	ea87 0708 	eor.w	r7, r7, r8
1000ea42:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000ea46:	0dbe      	lsrs	r6, r7, #22
1000ea48:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000ea4c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ea50:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ea54:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ea58:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ea5c:	5986      	ldr	r6, [r0, r6]
1000ea5e:	f851 8008 	ldr.w	r8, [r1, r8]
1000ea62:	445e      	add	r6, fp
1000ea64:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000ea68:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ea6c:	ea86 0808 	eor.w	r8, r6, r8
1000ea70:	f8d3 6f68 	ldr.w	r6, [r3, #3944]	@ 0xf68
1000ea74:	ea8e 0e06 	eor.w	lr, lr, r6
1000ea78:	f852 600a 	ldr.w	r6, [r2, sl]
1000ea7c:	44b0      	add	r8, r6
1000ea7e:	ea88 080e 	eor.w	r8, r8, lr
1000ea82:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000ea86:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000ea8a:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000ea8e:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ea92:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ea96:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000ea9a:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ea9e:	5986      	ldr	r6, [r0, r6]
1000eaa0:	f851 e00e 	ldr.w	lr, [r1, lr]
1000eaa4:	445e      	add	r6, fp
1000eaa6:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000eaaa:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000eaae:	ea86 0e0e 	eor.w	lr, r6, lr
1000eab2:	f8d3 6f6c 	ldr.w	r6, [r3, #3948]	@ 0xf6c
1000eab6:	4077      	eors	r7, r6
1000eab8:	f852 600a 	ldr.w	r6, [r2, sl]
1000eabc:	44b6      	add	lr, r6
1000eabe:	ea8e 0e07 	eor.w	lr, lr, r7
1000eac2:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000eac6:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000eaca:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000eace:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ead2:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ead6:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000eada:	f854 b00b 	ldr.w	fp, [r4, fp]
1000eade:	5986      	ldr	r6, [r0, r6]
1000eae0:	59cf      	ldr	r7, [r1, r7]
1000eae2:	445e      	add	r6, fp
1000eae4:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000eae8:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000eaec:	4077      	eors	r7, r6
1000eaee:	f8d3 6f70 	ldr.w	r6, [r3, #3952]	@ 0xf70
1000eaf2:	ea88 0806 	eor.w	r8, r8, r6
1000eaf6:	f852 600a 	ldr.w	r6, [r2, sl]
1000eafa:	4437      	add	r7, r6
1000eafc:	ea87 0708 	eor.w	r7, r7, r8
1000eb00:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000eb04:	0dbe      	lsrs	r6, r7, #22
1000eb06:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000eb0a:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000eb0e:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000eb12:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000eb16:	f854 b00b 	ldr.w	fp, [r4, fp]
1000eb1a:	5986      	ldr	r6, [r0, r6]
1000eb1c:	f851 8008 	ldr.w	r8, [r1, r8]
1000eb20:	445e      	add	r6, fp
1000eb22:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000eb26:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000eb2a:	ea86 0808 	eor.w	r8, r6, r8
1000eb2e:	f8d3 6f74 	ldr.w	r6, [r3, #3956]	@ 0xf74
1000eb32:	ea8e 0e06 	eor.w	lr, lr, r6
1000eb36:	f852 600a 	ldr.w	r6, [r2, sl]
1000eb3a:	44b0      	add	r8, r6
1000eb3c:	ea88 080e 	eor.w	r8, r8, lr
1000eb40:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000eb44:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000eb48:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000eb4c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000eb50:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000eb54:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000eb58:	f854 b00b 	ldr.w	fp, [r4, fp]
1000eb5c:	5986      	ldr	r6, [r0, r6]
1000eb5e:	f851 e00e 	ldr.w	lr, [r1, lr]
1000eb62:	445e      	add	r6, fp
1000eb64:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000eb68:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000eb6c:	ea86 0e0e 	eor.w	lr, r6, lr
1000eb70:	f8d3 6f78 	ldr.w	r6, [r3, #3960]	@ 0xf78
1000eb74:	4077      	eors	r7, r6
1000eb76:	f852 600a 	ldr.w	r6, [r2, sl]
1000eb7a:	44b6      	add	lr, r6
1000eb7c:	ea8e 0e07 	eor.w	lr, lr, r7
1000eb80:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000eb84:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000eb88:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000eb8c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000eb90:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000eb94:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000eb98:	f854 b00b 	ldr.w	fp, [r4, fp]
1000eb9c:	5986      	ldr	r6, [r0, r6]
1000eb9e:	59cf      	ldr	r7, [r1, r7]
1000eba0:	445e      	add	r6, fp
1000eba2:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000eba6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ebaa:	4077      	eors	r7, r6
1000ebac:	f8d3 6f7c 	ldr.w	r6, [r3, #3964]	@ 0xf7c
1000ebb0:	ea88 0806 	eor.w	r8, r8, r6
1000ebb4:	f852 600a 	ldr.w	r6, [r2, sl]
1000ebb8:	4437      	add	r7, r6
1000ebba:	ea87 0708 	eor.w	r7, r7, r8
1000ebbe:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000ebc2:	0dbe      	lsrs	r6, r7, #22
1000ebc4:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000ebc8:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ebcc:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ebd0:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ebd4:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ebd8:	5986      	ldr	r6, [r0, r6]
1000ebda:	f851 8008 	ldr.w	r8, [r1, r8]
1000ebde:	445e      	add	r6, fp
1000ebe0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000ebe4:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ebe8:	ea86 0808 	eor.w	r8, r6, r8
1000ebec:	f8d3 6f80 	ldr.w	r6, [r3, #3968]	@ 0xf80
1000ebf0:	ea8e 0e06 	eor.w	lr, lr, r6
1000ebf4:	f852 600a 	ldr.w	r6, [r2, sl]
1000ebf8:	44b0      	add	r8, r6
1000ebfa:	ea88 080e 	eor.w	r8, r8, lr
1000ebfe:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000ec02:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000ec06:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000ec0a:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ec0e:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ec12:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000ec16:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ec1a:	5986      	ldr	r6, [r0, r6]
1000ec1c:	f851 e00e 	ldr.w	lr, [r1, lr]
1000ec20:	445e      	add	r6, fp
1000ec22:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000ec26:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ec2a:	ea86 0e0e 	eor.w	lr, r6, lr
1000ec2e:	f8d3 6f84 	ldr.w	r6, [r3, #3972]	@ 0xf84
1000ec32:	4077      	eors	r7, r6
1000ec34:	f852 600a 	ldr.w	r6, [r2, sl]
1000ec38:	44b6      	add	lr, r6
1000ec3a:	ea8e 0e07 	eor.w	lr, lr, r7
1000ec3e:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000ec42:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000ec46:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000ec4a:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ec4e:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ec52:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000ec56:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ec5a:	5986      	ldr	r6, [r0, r6]
1000ec5c:	59cf      	ldr	r7, [r1, r7]
1000ec5e:	445e      	add	r6, fp
1000ec60:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000ec64:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ec68:	4077      	eors	r7, r6
1000ec6a:	f8d3 6f88 	ldr.w	r6, [r3, #3976]	@ 0xf88
1000ec6e:	ea88 0806 	eor.w	r8, r8, r6
1000ec72:	f852 600a 	ldr.w	r6, [r2, sl]
1000ec76:	4437      	add	r7, r6
1000ec78:	ea87 0708 	eor.w	r7, r7, r8
1000ec7c:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000ec80:	0dbe      	lsrs	r6, r7, #22
1000ec82:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000ec86:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ec8a:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ec8e:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ec92:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ec96:	5986      	ldr	r6, [r0, r6]
1000ec98:	f851 8008 	ldr.w	r8, [r1, r8]
1000ec9c:	445e      	add	r6, fp
1000ec9e:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000eca2:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000eca6:	ea86 0808 	eor.w	r8, r6, r8
1000ecaa:	f8d3 6f8c 	ldr.w	r6, [r3, #3980]	@ 0xf8c
1000ecae:	ea8e 0e06 	eor.w	lr, lr, r6
1000ecb2:	f852 600a 	ldr.w	r6, [r2, sl]
1000ecb6:	44b0      	add	r8, r6
1000ecb8:	ea88 080e 	eor.w	r8, r8, lr
1000ecbc:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000ecc0:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000ecc4:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000ecc8:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000eccc:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ecd0:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000ecd4:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ecd8:	5986      	ldr	r6, [r0, r6]
1000ecda:	f851 e00e 	ldr.w	lr, [r1, lr]
1000ecde:	445e      	add	r6, fp
1000ece0:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000ece4:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ece8:	ea86 0e0e 	eor.w	lr, r6, lr
1000ecec:	f8d3 6f90 	ldr.w	r6, [r3, #3984]	@ 0xf90
1000ecf0:	4077      	eors	r7, r6
1000ecf2:	f852 600a 	ldr.w	r6, [r2, sl]
1000ecf6:	44b6      	add	lr, r6
1000ecf8:	ea8e 0e07 	eor.w	lr, lr, r7
1000ecfc:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000ed00:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000ed04:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000ed08:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ed0c:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ed10:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000ed14:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ed18:	5986      	ldr	r6, [r0, r6]
1000ed1a:	59cf      	ldr	r7, [r1, r7]
1000ed1c:	445e      	add	r6, fp
1000ed1e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000ed22:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ed26:	4077      	eors	r7, r6
1000ed28:	f8d3 6f94 	ldr.w	r6, [r3, #3988]	@ 0xf94
1000ed2c:	ea88 0806 	eor.w	r8, r8, r6
1000ed30:	f852 600a 	ldr.w	r6, [r2, sl]
1000ed34:	4437      	add	r7, r6
1000ed36:	ea87 0708 	eor.w	r7, r7, r8
1000ed3a:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000ed3e:	0dbe      	lsrs	r6, r7, #22
1000ed40:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000ed44:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ed48:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ed4c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ed50:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ed54:	5986      	ldr	r6, [r0, r6]
1000ed56:	f851 8008 	ldr.w	r8, [r1, r8]
1000ed5a:	445e      	add	r6, fp
1000ed5c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000ed60:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ed64:	ea86 0808 	eor.w	r8, r6, r8
1000ed68:	f8d3 6f98 	ldr.w	r6, [r3, #3992]	@ 0xf98
1000ed6c:	ea8e 0e06 	eor.w	lr, lr, r6
1000ed70:	f852 600a 	ldr.w	r6, [r2, sl]
1000ed74:	44b0      	add	r8, r6
1000ed76:	f8d3 6f9c 	ldr.w	r6, [r3, #3996]	@ 0xf9c
1000ed7a:	ea87 0506 	eor.w	r5, r7, r6
		*(ptr - 4) = L;
1000ed7e:	9e02      	ldr	r6, [sp, #8]
1000ed80:	f846 5b10 	str.w	r5, [r6], #16
		BF_ENCRYPT;
1000ed84:	ea88 080e 	eor.w	r8, r8, lr
		*(ptr - 3) = R;
1000ed88:	f846 8c0c 	str.w	r8, [r6, #-12]
		BF_ENCRYPT;
1000ed8c:	f8d3 7f58 	ldr.w	r7, [r3, #3928]	@ 0xf58
		*(ptr - 4) = L;
1000ed90:	9602      	str	r6, [sp, #8]
		BF_ENCRYPT;
1000ed92:	f8d3 6fe8 	ldr.w	r6, [r3, #4072]	@ 0xfe8
1000ed96:	407e      	eors	r6, r7
1000ed98:	406e      	eors	r6, r5
1000ed9a:	ea4f 3e96 	mov.w	lr, r6, lsr #14
1000ed9e:	0db7      	lsrs	r7, r6, #22
1000eda0:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000eda4:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000eda8:	ea4f 1b96 	mov.w	fp, r6, lsr #6
1000edac:	59c7      	ldr	r7, [r0, r7]
1000edae:	f854 e00e 	ldr.w	lr, [r4, lr]
1000edb2:	f8d3 5f5c 	ldr.w	r5, [r3, #3932]	@ 0xf5c
1000edb6:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000edba:	44be      	add	lr, r7
1000edbc:	f851 700b 	ldr.w	r7, [r1, fp]
1000edc0:	ea4f 0a86 	mov.w	sl, r6, lsl #2
1000edc4:	ea8e 0e07 	eor.w	lr, lr, r7
1000edc8:	f8d3 7fec 	ldr.w	r7, [r3, #4076]	@ 0xfec
1000edcc:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000edd0:	406f      	eors	r7, r5
1000edd2:	ea87 0708 	eor.w	r7, r7, r8
1000edd6:	f852 800a 	ldr.w	r8, [r2, sl]
1000edda:	44c6      	add	lr, r8
1000eddc:	ea8e 0e07 	eor.w	lr, lr, r7
1000ede0:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000ede4:	ea4f 579e 	mov.w	r7, lr, lsr #22
1000ede8:	ea4f 1a9e 	mov.w	sl, lr, lsr #6
1000edec:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000edf0:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000edf4:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000edf8:	f854 b00b 	ldr.w	fp, [r4, fp]
1000edfc:	59c7      	ldr	r7, [r0, r7]
1000edfe:	f851 a00a 	ldr.w	sl, [r1, sl]
1000ee02:	445f      	add	r7, fp
1000ee04:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000ee08:	ea87 0a0a 	eor.w	sl, r7, sl
1000ee0c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ee10:	f8d3 7f60 	ldr.w	r7, [r3, #3936]	@ 0xf60
1000ee14:	407e      	eors	r6, r7
1000ee16:	f852 7008 	ldr.w	r7, [r2, r8]
1000ee1a:	4457      	add	r7, sl
1000ee1c:	4077      	eors	r7, r6
1000ee1e:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000ee22:	0dbe      	lsrs	r6, r7, #22
1000ee24:	ea4f 1a97 	mov.w	sl, r7, lsr #6
1000ee28:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ee2c:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ee30:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ee34:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ee38:	5986      	ldr	r6, [r0, r6]
1000ee3a:	f851 a00a 	ldr.w	sl, [r1, sl]
1000ee3e:	445e      	add	r6, fp
1000ee40:	ea4f 0887 	mov.w	r8, r7, lsl #2
1000ee44:	ea86 0a0a 	eor.w	sl, r6, sl
1000ee48:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ee4c:	f8d3 6f64 	ldr.w	r6, [r3, #3940]	@ 0xf64
1000ee50:	ea8e 0606 	eor.w	r6, lr, r6
1000ee54:	f852 e008 	ldr.w	lr, [r2, r8]
1000ee58:	44d6      	add	lr, sl
1000ee5a:	ea8e 0e06 	eor.w	lr, lr, r6
1000ee5e:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000ee62:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000ee66:	ea4f 1a9e 	mov.w	sl, lr, lsr #6
1000ee6a:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ee6e:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ee72:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ee76:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ee7a:	5986      	ldr	r6, [r0, r6]
1000ee7c:	f851 a00a 	ldr.w	sl, [r1, sl]
1000ee80:	445e      	add	r6, fp
1000ee82:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000ee86:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ee8a:	ea86 0a0a 	eor.w	sl, r6, sl
1000ee8e:	f8d3 6f68 	ldr.w	r6, [r3, #3944]	@ 0xf68
1000ee92:	4077      	eors	r7, r6
1000ee94:	f852 6008 	ldr.w	r6, [r2, r8]
1000ee98:	44b2      	add	sl, r6
1000ee9a:	ea8a 0a07 	eor.w	sl, sl, r7
1000ee9e:	ea4f 3b9a 	mov.w	fp, sl, lsr #14
1000eea2:	ea4f 569a 	mov.w	r6, sl, lsr #22
1000eea6:	ea4f 179a 	mov.w	r7, sl, lsr #6
1000eeaa:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000eeae:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000eeb2:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000eeb6:	f854 b00b 	ldr.w	fp, [r4, fp]
1000eeba:	5986      	ldr	r6, [r0, r6]
1000eebc:	59cf      	ldr	r7, [r1, r7]
1000eebe:	445e      	add	r6, fp
1000eec0:	ea4f 088a 	mov.w	r8, sl, lsl #2
1000eec4:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000eec8:	4077      	eors	r7, r6
1000eeca:	f8d3 6f6c 	ldr.w	r6, [r3, #3948]	@ 0xf6c
1000eece:	ea8e 0e06 	eor.w	lr, lr, r6
1000eed2:	f852 6008 	ldr.w	r6, [r2, r8]
1000eed6:	4437      	add	r7, r6
1000eed8:	ea87 070e 	eor.w	r7, r7, lr
1000eedc:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000eee0:	0dbe      	lsrs	r6, r7, #22
1000eee2:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000eee6:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000eeea:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000eeee:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000eef2:	f854 b00b 	ldr.w	fp, [r4, fp]
1000eef6:	5986      	ldr	r6, [r0, r6]
1000eef8:	f851 8008 	ldr.w	r8, [r1, r8]
1000eefc:	445e      	add	r6, fp
1000eefe:	ea4f 0e87 	mov.w	lr, r7, lsl #2
1000ef02:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000ef06:	ea86 0808 	eor.w	r8, r6, r8
1000ef0a:	f8d3 6f70 	ldr.w	r6, [r3, #3952]	@ 0xf70
1000ef0e:	ea8a 0a06 	eor.w	sl, sl, r6
1000ef12:	f852 600e 	ldr.w	r6, [r2, lr]
1000ef16:	44b0      	add	r8, r6
1000ef18:	ea88 080a 	eor.w	r8, r8, sl
1000ef1c:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000ef20:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000ef24:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000ef28:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ef2c:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ef30:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000ef34:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ef38:	5986      	ldr	r6, [r0, r6]
1000ef3a:	f851 e00e 	ldr.w	lr, [r1, lr]
1000ef3e:	445e      	add	r6, fp
1000ef40:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000ef44:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ef48:	ea86 0e0e 	eor.w	lr, r6, lr
1000ef4c:	f8d3 6f74 	ldr.w	r6, [r3, #3956]	@ 0xf74
1000ef50:	4077      	eors	r7, r6
1000ef52:	f852 600a 	ldr.w	r6, [r2, sl]
1000ef56:	44b6      	add	lr, r6
1000ef58:	ea8e 0e07 	eor.w	lr, lr, r7
1000ef5c:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000ef60:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000ef64:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000ef68:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ef6c:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000ef70:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000ef74:	f854 b00b 	ldr.w	fp, [r4, fp]
1000ef78:	5986      	ldr	r6, [r0, r6]
1000ef7a:	59cf      	ldr	r7, [r1, r7]
1000ef7c:	445e      	add	r6, fp
1000ef7e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000ef82:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ef86:	4077      	eors	r7, r6
1000ef88:	f8d3 6f78 	ldr.w	r6, [r3, #3960]	@ 0xf78
1000ef8c:	ea88 0806 	eor.w	r8, r8, r6
1000ef90:	f852 600a 	ldr.w	r6, [r2, sl]
1000ef94:	4437      	add	r7, r6
1000ef96:	ea87 0708 	eor.w	r7, r7, r8
1000ef9a:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000ef9e:	0dbe      	lsrs	r6, r7, #22
1000efa0:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000efa4:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000efa8:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000efac:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000efb0:	f854 b00b 	ldr.w	fp, [r4, fp]
1000efb4:	5986      	ldr	r6, [r0, r6]
1000efb6:	f851 8008 	ldr.w	r8, [r1, r8]
1000efba:	445e      	add	r6, fp
1000efbc:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000efc0:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000efc4:	ea86 0808 	eor.w	r8, r6, r8
1000efc8:	f8d3 6f7c 	ldr.w	r6, [r3, #3964]	@ 0xf7c
1000efcc:	ea8e 0e06 	eor.w	lr, lr, r6
1000efd0:	f852 600a 	ldr.w	r6, [r2, sl]
1000efd4:	44b0      	add	r8, r6
1000efd6:	ea88 080e 	eor.w	r8, r8, lr
1000efda:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000efde:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000efe2:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000efe6:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000efea:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000efee:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000eff2:	f854 b00b 	ldr.w	fp, [r4, fp]
1000eff6:	5986      	ldr	r6, [r0, r6]
1000eff8:	f851 e00e 	ldr.w	lr, [r1, lr]
1000effc:	445e      	add	r6, fp
1000effe:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f002:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f006:	ea86 0e0e 	eor.w	lr, r6, lr
1000f00a:	f8d3 6f80 	ldr.w	r6, [r3, #3968]	@ 0xf80
1000f00e:	4077      	eors	r7, r6
1000f010:	f852 600a 	ldr.w	r6, [r2, sl]
1000f014:	44b6      	add	lr, r6
1000f016:	ea8e 0e07 	eor.w	lr, lr, r7
1000f01a:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f01e:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000f022:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000f026:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f02a:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f02e:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000f032:	f854 b00b 	ldr.w	fp, [r4, fp]
1000f036:	5986      	ldr	r6, [r0, r6]
1000f038:	59cf      	ldr	r7, [r1, r7]
1000f03a:	445e      	add	r6, fp
1000f03c:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f040:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f044:	4077      	eors	r7, r6
1000f046:	f8d3 6f84 	ldr.w	r6, [r3, #3972]	@ 0xf84
1000f04a:	ea88 0806 	eor.w	r8, r8, r6
1000f04e:	f852 600a 	ldr.w	r6, [r2, sl]
1000f052:	4437      	add	r7, r6
1000f054:	ea87 0708 	eor.w	r7, r7, r8
1000f058:	ea4f 3b97 	mov.w	fp, r7, lsr #14
1000f05c:	0dbe      	lsrs	r6, r7, #22
1000f05e:	ea4f 1897 	mov.w	r8, r7, lsr #6
1000f062:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f066:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f06a:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f06e:	f854 b00b 	ldr.w	fp, [r4, fp]
1000f072:	5986      	ldr	r6, [r0, r6]
1000f074:	f851 8008 	ldr.w	r8, [r1, r8]
1000f078:	445e      	add	r6, fp
1000f07a:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000f07e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f082:	ea86 0808 	eor.w	r8, r6, r8
1000f086:	f8d3 6f88 	ldr.w	r6, [r3, #3976]	@ 0xf88
1000f08a:	ea8e 0e06 	eor.w	lr, lr, r6
1000f08e:	f852 600a 	ldr.w	r6, [r2, sl]
1000f092:	44b0      	add	r8, r6
1000f094:	ea88 080e 	eor.w	r8, r8, lr
1000f098:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f09c:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000f0a0:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f0a4:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f0a8:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f0ac:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f0b0:	f854 b00b 	ldr.w	fp, [r4, fp]
1000f0b4:	5986      	ldr	r6, [r0, r6]
1000f0b6:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f0ba:	445e      	add	r6, fp
1000f0bc:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f0c0:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f0c4:	ea86 0e0e 	eor.w	lr, r6, lr
1000f0c8:	f8d3 6f8c 	ldr.w	r6, [r3, #3980]	@ 0xf8c
1000f0cc:	4077      	eors	r7, r6
1000f0ce:	f852 600a 	ldr.w	r6, [r2, sl]
1000f0d2:	44b6      	add	lr, r6
1000f0d4:	ea8e 0e07 	eor.w	lr, lr, r7
1000f0d8:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f0dc:	ea4f 569e 	mov.w	r6, lr, lsr #22
1000f0e0:	ea4f 179e 	mov.w	r7, lr, lsr #6
1000f0e4:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f0e8:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f0ec:	f407 777f 	and.w	r7, r7, #1020	@ 0x3fc
1000f0f0:	f854 b00b 	ldr.w	fp, [r4, fp]
1000f0f4:	5986      	ldr	r6, [r0, r6]
1000f0f6:	59cf      	ldr	r7, [r1, r7]
1000f0f8:	445e      	add	r6, fp
1000f0fa:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f0fe:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f102:	4077      	eors	r7, r6
1000f104:	f8d3 6f90 	ldr.w	r6, [r3, #3984]	@ 0xf90
1000f108:	ea88 0806 	eor.w	r8, r8, r6
1000f10c:	f852 600a 	ldr.w	r6, [r2, sl]
		*(ptr - 2) = L;
1000f110:	9d02      	ldr	r5, [sp, #8]
		BF_ENCRYPT;
1000f112:	4437      	add	r7, r6
1000f114:	ea87 0708 	eor.w	r7, r7, r8
1000f118:	ea4f 3897 	mov.w	r8, r7, lsr #14
1000f11c:	0dbe      	lsrs	r6, r7, #22
1000f11e:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f122:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f126:	ea4f 1b97 	mov.w	fp, r7, lsr #6
1000f12a:	f854 8008 	ldr.w	r8, [r4, r8]
1000f12e:	5986      	ldr	r6, [r0, r6]
1000f130:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f134:	4446      	add	r6, r8
1000f136:	f851 800b 	ldr.w	r8, [r1, fp]
1000f13a:	ea4f 0a87 	mov.w	sl, r7, lsl #2
1000f13e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f142:	ea86 0808 	eor.w	r8, r6, r8
1000f146:	f8d3 6f94 	ldr.w	r6, [r3, #3988]	@ 0xf94
1000f14a:	ea8e 0e06 	eor.w	lr, lr, r6
1000f14e:	f852 600a 	ldr.w	r6, [r2, sl]
1000f152:	44b0      	add	r8, r6
1000f154:	ea88 080e 	eor.w	r8, r8, lr
1000f158:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f15c:	ea4f 5698 	mov.w	r6, r8, lsr #22
1000f160:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f164:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f168:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f16c:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f170:	f854 b00b 	ldr.w	fp, [r4, fp]
1000f174:	5986      	ldr	r6, [r0, r6]
1000f176:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f17a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f17e:	445e      	add	r6, fp
1000f180:	ea86 0e0e 	eor.w	lr, r6, lr
1000f184:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f188:	f8d3 6f98 	ldr.w	r6, [r3, #3992]	@ 0xf98
1000f18c:	4077      	eors	r7, r6
1000f18e:	f852 600a 	ldr.w	r6, [r2, sl]
1000f192:	44b6      	add	lr, r6
1000f194:	f8d3 6f9c 	ldr.w	r6, [r3, #3996]	@ 0xf9c
1000f198:	ea8e 0e07 	eor.w	lr, lr, r7
1000f19c:	ea88 0806 	eor.w	r8, r8, r6
	} while (ptr < &data.ctx.S[3][0xFF]);
1000f1a0:	f1bc 0c01 	subs.w	ip, ip, #1
		*(ptr - 1) = R;
1000f1a4:	e945 8e02 	strd	r8, lr, [r5, #-8]
	} while (ptr < &data.ctx.S[3][0xFF]);
1000f1a8:	f47f abe1 	bne.w	1000e96e <BF_crypt+0x5ba>
			BF_body();
1000f1ac:	ab40      	add	r3, sp, #256	@ 0x100
1000f1ae:	f60d 4258 	addw	r2, sp, #3160	@ 0xc58
1000f1b2:	f60d 0158 	addw	r1, sp, #2136	@ 0x858
	ptr = data.ctx.S[0];
1000f1b6:	9d04      	ldr	r5, [sp, #16]
		for (i = 0; i < BF_N + 2; i += 2) {
1000f1b8:	2600      	movs	r6, #0
			data.ctx.P[i] ^= data.expanded_key[i];
1000f1ba:	6828      	ldr	r0, [r5, #0]
1000f1bc:	6cac      	ldr	r4, [r5, #72]	@ 0x48
1000f1be:	4060      	eors	r0, r4
1000f1c0:	6028      	str	r0, [r5, #0]
			data.ctx.P[i + 1] ^= data.expanded_key[i + 1];
1000f1c2:	6cec      	ldr	r4, [r5, #76]	@ 0x4c
1000f1c4:	6868      	ldr	r0, [r5, #4]
		for (i = 0; i < BF_N + 2; i += 2) {
1000f1c6:	3602      	adds	r6, #2
			data.ctx.P[i + 1] ^= data.expanded_key[i + 1];
1000f1c8:	4060      	eors	r0, r4
		for (i = 0; i < BF_N + 2; i += 2) {
1000f1ca:	2e12      	cmp	r6, #18
			data.ctx.P[i + 1] ^= data.expanded_key[i + 1];
1000f1cc:	6068      	str	r0, [r5, #4]
		for (i = 0; i < BF_N + 2; i += 2) {
1000f1ce:	f105 0508 	add.w	r5, r5, #8
1000f1d2:	d1f2      	bne.n	1000f1ba <BF_crypt+0xe06>
1000f1d4:	f04f 0c02 	mov.w	ip, #2
			BF_body();
1000f1d8:	f50d 608b 	add.w	r0, sp, #1112	@ 0x458
1000f1dc:	2400      	movs	r4, #0
1000f1de:	f50d 5782 	add.w	r7, sp, #4160	@ 0x1040
1000f1e2:	4626      	mov	r6, r4
1000f1e4:	2509      	movs	r5, #9
1000f1e6:	3718      	adds	r7, #24
1000f1e8:	f8d3 ef58 	ldr.w	lr, [r3, #3928]	@ 0xf58
1000f1ec:	ea86 0e0e 	eor.w	lr, r6, lr
1000f1f0:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f1f4:	ea4f 589e 	mov.w	r8, lr, lsr #22
1000f1f8:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
1000f1fc:	ea4f 1a9e 	mov.w	sl, lr, lsr #6
1000f200:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f204:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f208:	ea4f 068e 	mov.w	r6, lr, lsl #2
1000f20c:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f210:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f214:	f859 8008 	ldr.w	r8, [r9, r8]
1000f218:	f851 a00a 	ldr.w	sl, [r1, sl]
1000f21c:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f220:	44d8      	add	r8, fp
1000f222:	5996      	ldr	r6, [r2, r6]
1000f224:	ea88 080a 	eor.w	r8, r8, sl
1000f228:	eb08 0a06 	add.w	sl, r8, r6
1000f22c:	f8d3 6f5c 	ldr.w	r6, [r3, #3932]	@ 0xf5c
1000f230:	ea8a 0606 	eor.w	r6, sl, r6
1000f234:	4066      	eors	r6, r4
1000f236:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f23a:	0db4      	lsrs	r4, r6, #22
1000f23c:	ea4f 1a96 	mov.w	sl, r6, lsr #6
1000f240:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f244:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f248:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f24c:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f250:	f859 4004 	ldr.w	r4, [r9, r4]
1000f254:	f851 a00a 	ldr.w	sl, [r1, sl]
1000f258:	445c      	add	r4, fp
1000f25a:	ea4f 0886 	mov.w	r8, r6, lsl #2
1000f25e:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f262:	ea84 0a0a 	eor.w	sl, r4, sl
1000f266:	f8d3 4f60 	ldr.w	r4, [r3, #3936]	@ 0xf60
1000f26a:	ea8e 0e04 	eor.w	lr, lr, r4
1000f26e:	f852 4008 	ldr.w	r4, [r2, r8]
1000f272:	44a2      	add	sl, r4
1000f274:	ea8a 0e0e 	eor.w	lr, sl, lr
1000f278:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f27c:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f280:	ea4f 1a9e 	mov.w	sl, lr, lsr #6
1000f284:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f288:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f28c:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f290:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f294:	f859 4004 	ldr.w	r4, [r9, r4]
1000f298:	f851 a00a 	ldr.w	sl, [r1, sl]
1000f29c:	445c      	add	r4, fp
1000f29e:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000f2a2:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f2a6:	ea84 0a0a 	eor.w	sl, r4, sl
1000f2aa:	f8d3 4f64 	ldr.w	r4, [r3, #3940]	@ 0xf64
1000f2ae:	4066      	eors	r6, r4
1000f2b0:	f852 4008 	ldr.w	r4, [r2, r8]
1000f2b4:	44a2      	add	sl, r4
1000f2b6:	ea8a 0a06 	eor.w	sl, sl, r6
1000f2ba:	ea4f 3b9a 	mov.w	fp, sl, lsr #14
1000f2be:	ea4f 549a 	mov.w	r4, sl, lsr #22
1000f2c2:	ea4f 169a 	mov.w	r6, sl, lsr #6
1000f2c6:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f2ca:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f2ce:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f2d2:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f2d6:	f859 4004 	ldr.w	r4, [r9, r4]
1000f2da:	598e      	ldr	r6, [r1, r6]
1000f2dc:	445c      	add	r4, fp
1000f2de:	ea4f 088a 	mov.w	r8, sl, lsl #2
1000f2e2:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f2e6:	4066      	eors	r6, r4
1000f2e8:	f8d3 4f68 	ldr.w	r4, [r3, #3944]	@ 0xf68
1000f2ec:	ea8e 0e04 	eor.w	lr, lr, r4
1000f2f0:	f852 4008 	ldr.w	r4, [r2, r8]
1000f2f4:	4426      	add	r6, r4
1000f2f6:	ea86 060e 	eor.w	r6, r6, lr
1000f2fa:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f2fe:	0db4      	lsrs	r4, r6, #22
1000f300:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f304:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f308:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f30c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f310:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f314:	f859 4004 	ldr.w	r4, [r9, r4]
1000f318:	f851 8008 	ldr.w	r8, [r1, r8]
1000f31c:	445c      	add	r4, fp
1000f31e:	ea4f 0e86 	mov.w	lr, r6, lsl #2
1000f322:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f326:	ea84 0808 	eor.w	r8, r4, r8
1000f32a:	f8d3 4f6c 	ldr.w	r4, [r3, #3948]	@ 0xf6c
1000f32e:	ea8a 0a04 	eor.w	sl, sl, r4
1000f332:	f852 400e 	ldr.w	r4, [r2, lr]
1000f336:	44a0      	add	r8, r4
1000f338:	ea88 080a 	eor.w	r8, r8, sl
1000f33c:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f340:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f344:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f348:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f34c:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f350:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f354:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f358:	f859 4004 	ldr.w	r4, [r9, r4]
1000f35c:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f360:	445c      	add	r4, fp
1000f362:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f366:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f36a:	ea84 0e0e 	eor.w	lr, r4, lr
1000f36e:	f8d3 4f70 	ldr.w	r4, [r3, #3952]	@ 0xf70
1000f372:	4066      	eors	r6, r4
1000f374:	f852 400a 	ldr.w	r4, [r2, sl]
1000f378:	44a6      	add	lr, r4
1000f37a:	ea8e 0e06 	eor.w	lr, lr, r6
1000f37e:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f382:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f386:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000f38a:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f38e:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f392:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f396:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f39a:	f859 4004 	ldr.w	r4, [r9, r4]
1000f39e:	598e      	ldr	r6, [r1, r6]
1000f3a0:	445c      	add	r4, fp
1000f3a2:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f3a6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f3aa:	4066      	eors	r6, r4
1000f3ac:	f8d3 4f74 	ldr.w	r4, [r3, #3956]	@ 0xf74
1000f3b0:	ea88 0804 	eor.w	r8, r8, r4
1000f3b4:	f852 400a 	ldr.w	r4, [r2, sl]
1000f3b8:	4426      	add	r6, r4
1000f3ba:	ea86 0608 	eor.w	r6, r6, r8
1000f3be:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f3c2:	0db4      	lsrs	r4, r6, #22
1000f3c4:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f3c8:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f3cc:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f3d0:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f3d4:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f3d8:	f859 4004 	ldr.w	r4, [r9, r4]
1000f3dc:	f851 8008 	ldr.w	r8, [r1, r8]
1000f3e0:	445c      	add	r4, fp
1000f3e2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
1000f3e6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f3ea:	ea84 0808 	eor.w	r8, r4, r8
1000f3ee:	f8d3 4f78 	ldr.w	r4, [r3, #3960]	@ 0xf78
1000f3f2:	ea8e 0e04 	eor.w	lr, lr, r4
1000f3f6:	f852 400a 	ldr.w	r4, [r2, sl]
1000f3fa:	44a0      	add	r8, r4
1000f3fc:	ea88 080e 	eor.w	r8, r8, lr
1000f400:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f404:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f408:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f40c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f410:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f414:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f418:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f41c:	f859 4004 	ldr.w	r4, [r9, r4]
1000f420:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f424:	445c      	add	r4, fp
1000f426:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f42a:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f42e:	ea84 0e0e 	eor.w	lr, r4, lr
1000f432:	f8d3 4f7c 	ldr.w	r4, [r3, #3964]	@ 0xf7c
1000f436:	4066      	eors	r6, r4
1000f438:	f852 400a 	ldr.w	r4, [r2, sl]
1000f43c:	44a6      	add	lr, r4
1000f43e:	ea8e 0e06 	eor.w	lr, lr, r6
1000f442:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f446:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f44a:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000f44e:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f452:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f456:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f45a:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f45e:	f859 4004 	ldr.w	r4, [r9, r4]
1000f462:	598e      	ldr	r6, [r1, r6]
1000f464:	445c      	add	r4, fp
1000f466:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f46a:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f46e:	4066      	eors	r6, r4
1000f470:	f8d3 4f80 	ldr.w	r4, [r3, #3968]	@ 0xf80
1000f474:	ea88 0804 	eor.w	r8, r8, r4
1000f478:	f852 400a 	ldr.w	r4, [r2, sl]
1000f47c:	4426      	add	r6, r4
1000f47e:	ea86 0608 	eor.w	r6, r6, r8
1000f482:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f486:	0db4      	lsrs	r4, r6, #22
1000f488:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f48c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f490:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f494:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f498:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f49c:	f859 4004 	ldr.w	r4, [r9, r4]
1000f4a0:	f851 8008 	ldr.w	r8, [r1, r8]
1000f4a4:	445c      	add	r4, fp
1000f4a6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
1000f4aa:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f4ae:	ea84 0808 	eor.w	r8, r4, r8
1000f4b2:	f8d3 4f84 	ldr.w	r4, [r3, #3972]	@ 0xf84
1000f4b6:	ea8e 0e04 	eor.w	lr, lr, r4
1000f4ba:	f852 400a 	ldr.w	r4, [r2, sl]
1000f4be:	44a0      	add	r8, r4
1000f4c0:	ea88 080e 	eor.w	r8, r8, lr
1000f4c4:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f4c8:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f4cc:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f4d0:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f4d4:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f4d8:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f4dc:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f4e0:	f859 4004 	ldr.w	r4, [r9, r4]
1000f4e4:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f4e8:	445c      	add	r4, fp
1000f4ea:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f4ee:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f4f2:	ea84 0e0e 	eor.w	lr, r4, lr
1000f4f6:	f8d3 4f88 	ldr.w	r4, [r3, #3976]	@ 0xf88
1000f4fa:	4066      	eors	r6, r4
1000f4fc:	f852 400a 	ldr.w	r4, [r2, sl]
1000f500:	44a6      	add	lr, r4
1000f502:	ea8e 0e06 	eor.w	lr, lr, r6
1000f506:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f50a:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f50e:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000f512:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f516:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f51a:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f51e:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f522:	f859 4004 	ldr.w	r4, [r9, r4]
1000f526:	598e      	ldr	r6, [r1, r6]
1000f528:	445c      	add	r4, fp
1000f52a:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f52e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f532:	4066      	eors	r6, r4
1000f534:	f8d3 4f8c 	ldr.w	r4, [r3, #3980]	@ 0xf8c
1000f538:	ea88 0804 	eor.w	r8, r8, r4
1000f53c:	f852 400a 	ldr.w	r4, [r2, sl]
1000f540:	4426      	add	r6, r4
1000f542:	ea86 0608 	eor.w	r6, r6, r8
1000f546:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f54a:	0db4      	lsrs	r4, r6, #22
1000f54c:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f550:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f554:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f558:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f55c:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f560:	f859 4004 	ldr.w	r4, [r9, r4]
1000f564:	f851 8008 	ldr.w	r8, [r1, r8]
1000f568:	445c      	add	r4, fp
1000f56a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
1000f56e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f572:	ea84 0808 	eor.w	r8, r4, r8
1000f576:	f8d3 4f90 	ldr.w	r4, [r3, #3984]	@ 0xf90
1000f57a:	ea8e 0e04 	eor.w	lr, lr, r4
1000f57e:	f852 400a 	ldr.w	r4, [r2, sl]
1000f582:	44a0      	add	r8, r4
1000f584:	ea88 080e 	eor.w	r8, r8, lr
1000f588:	ea4f 3e98 	mov.w	lr, r8, lsr #14
1000f58c:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f590:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f594:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f598:	ea4f 1b98 	mov.w	fp, r8, lsr #6
1000f59c:	f850 e00e 	ldr.w	lr, [r0, lr]
1000f5a0:	f859 4004 	ldr.w	r4, [r9, r4]
1000f5a4:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f5a8:	4474      	add	r4, lr
1000f5aa:	f851 e00b 	ldr.w	lr, [r1, fp]
1000f5ae:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f5b2:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f5b6:	ea84 0e0e 	eor.w	lr, r4, lr
1000f5ba:	f8d3 4f94 	ldr.w	r4, [r3, #3988]	@ 0xf94
1000f5be:	4066      	eors	r6, r4
1000f5c0:	f852 400a 	ldr.w	r4, [r2, sl]
1000f5c4:	44a6      	add	lr, r4
1000f5c6:	ea8e 0e06 	eor.w	lr, lr, r6
1000f5ca:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f5ce:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f5d2:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f5d6:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f5da:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000f5de:	f859 4004 	ldr.w	r4, [r9, r4]
1000f5e2:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f5e6:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f5ea:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f5ee:	44a3      	add	fp, r4
1000f5f0:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f5f4:	598c      	ldr	r4, [r1, r6]
1000f5f6:	f8d3 6f98 	ldr.w	r6, [r3, #3992]	@ 0xf98
1000f5fa:	ea88 0806 	eor.w	r8, r8, r6
1000f5fe:	f852 600a 	ldr.w	r6, [r2, sl]
1000f602:	ea8b 0404 	eor.w	r4, fp, r4
1000f606:	4434      	add	r4, r6
1000f608:	f8d3 6f9c 	ldr.w	r6, [r3, #3996]	@ 0xf9c
1000f60c:	ea8e 0606 	eor.w	r6, lr, r6
1000f610:	f847 6b08 	str.w	r6, [r7], #8
1000f614:	ea84 0408 	eor.w	r4, r4, r8
1000f618:	3d01      	subs	r5, #1
1000f61a:	f847 4c04 	str.w	r4, [r7, #-4]
1000f61e:	f47f ade3 	bne.w	1000f1e8 <BF_crypt+0xe34>
1000f622:	f44f 7500 	mov.w	r5, #512	@ 0x200
1000f626:	464f      	mov	r7, r9
1000f628:	f8d3 ef58 	ldr.w	lr, [r3, #3928]	@ 0xf58
1000f62c:	ea86 0e0e 	eor.w	lr, r6, lr
1000f630:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f634:	ea4f 589e 	mov.w	r8, lr, lsr #22
1000f638:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
1000f63c:	ea4f 1a9e 	mov.w	sl, lr, lsr #6
1000f640:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f644:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f648:	ea4f 068e 	mov.w	r6, lr, lsl #2
1000f64c:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f650:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f654:	f859 8008 	ldr.w	r8, [r9, r8]
1000f658:	f851 a00a 	ldr.w	sl, [r1, sl]
1000f65c:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f660:	44d8      	add	r8, fp
1000f662:	5996      	ldr	r6, [r2, r6]
1000f664:	ea88 080a 	eor.w	r8, r8, sl
1000f668:	eb08 0a06 	add.w	sl, r8, r6
1000f66c:	f8d3 6f5c 	ldr.w	r6, [r3, #3932]	@ 0xf5c
1000f670:	ea8a 0606 	eor.w	r6, sl, r6
1000f674:	4066      	eors	r6, r4
1000f676:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f67a:	0db4      	lsrs	r4, r6, #22
1000f67c:	ea4f 1a96 	mov.w	sl, r6, lsr #6
1000f680:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f684:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f688:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f68c:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f690:	f859 4004 	ldr.w	r4, [r9, r4]
1000f694:	f851 a00a 	ldr.w	sl, [r1, sl]
1000f698:	445c      	add	r4, fp
1000f69a:	ea4f 0886 	mov.w	r8, r6, lsl #2
1000f69e:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f6a2:	ea84 0a0a 	eor.w	sl, r4, sl
1000f6a6:	f8d3 4f60 	ldr.w	r4, [r3, #3936]	@ 0xf60
1000f6aa:	ea8e 0e04 	eor.w	lr, lr, r4
1000f6ae:	f852 4008 	ldr.w	r4, [r2, r8]
1000f6b2:	44a2      	add	sl, r4
1000f6b4:	ea8a 0e0e 	eor.w	lr, sl, lr
1000f6b8:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f6bc:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f6c0:	ea4f 1a9e 	mov.w	sl, lr, lsr #6
1000f6c4:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f6c8:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f6cc:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f6d0:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f6d4:	f859 4004 	ldr.w	r4, [r9, r4]
1000f6d8:	f851 a00a 	ldr.w	sl, [r1, sl]
1000f6dc:	445c      	add	r4, fp
1000f6de:	ea4f 088e 	mov.w	r8, lr, lsl #2
1000f6e2:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f6e6:	ea84 0a0a 	eor.w	sl, r4, sl
1000f6ea:	f8d3 4f64 	ldr.w	r4, [r3, #3940]	@ 0xf64
1000f6ee:	4066      	eors	r6, r4
1000f6f0:	f852 4008 	ldr.w	r4, [r2, r8]
1000f6f4:	44a2      	add	sl, r4
1000f6f6:	ea8a 0a06 	eor.w	sl, sl, r6
1000f6fa:	ea4f 3b9a 	mov.w	fp, sl, lsr #14
1000f6fe:	ea4f 549a 	mov.w	r4, sl, lsr #22
1000f702:	ea4f 169a 	mov.w	r6, sl, lsr #6
1000f706:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f70a:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f70e:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f712:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f716:	f859 4004 	ldr.w	r4, [r9, r4]
1000f71a:	598e      	ldr	r6, [r1, r6]
1000f71c:	445c      	add	r4, fp
1000f71e:	ea4f 088a 	mov.w	r8, sl, lsl #2
1000f722:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f726:	4066      	eors	r6, r4
1000f728:	f8d3 4f68 	ldr.w	r4, [r3, #3944]	@ 0xf68
1000f72c:	ea8e 0e04 	eor.w	lr, lr, r4
1000f730:	f852 4008 	ldr.w	r4, [r2, r8]
1000f734:	4426      	add	r6, r4
1000f736:	ea86 060e 	eor.w	r6, r6, lr
1000f73a:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f73e:	0db4      	lsrs	r4, r6, #22
1000f740:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f744:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f748:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f74c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f750:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f754:	f859 4004 	ldr.w	r4, [r9, r4]
1000f758:	f851 8008 	ldr.w	r8, [r1, r8]
1000f75c:	445c      	add	r4, fp
1000f75e:	ea4f 0e86 	mov.w	lr, r6, lsl #2
1000f762:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f766:	ea84 0808 	eor.w	r8, r4, r8
1000f76a:	f8d3 4f6c 	ldr.w	r4, [r3, #3948]	@ 0xf6c
1000f76e:	ea8a 0a04 	eor.w	sl, sl, r4
1000f772:	f852 400e 	ldr.w	r4, [r2, lr]
1000f776:	44a0      	add	r8, r4
1000f778:	ea88 080a 	eor.w	r8, r8, sl
1000f77c:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f780:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f784:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f788:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f78c:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f790:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f794:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f798:	f859 4004 	ldr.w	r4, [r9, r4]
1000f79c:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f7a0:	445c      	add	r4, fp
1000f7a2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f7a6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f7aa:	ea84 0e0e 	eor.w	lr, r4, lr
1000f7ae:	f8d3 4f70 	ldr.w	r4, [r3, #3952]	@ 0xf70
1000f7b2:	4066      	eors	r6, r4
1000f7b4:	f852 400a 	ldr.w	r4, [r2, sl]
1000f7b8:	44a6      	add	lr, r4
1000f7ba:	ea8e 0e06 	eor.w	lr, lr, r6
1000f7be:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f7c2:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f7c6:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000f7ca:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f7ce:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f7d2:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f7d6:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f7da:	f859 4004 	ldr.w	r4, [r9, r4]
1000f7de:	598e      	ldr	r6, [r1, r6]
1000f7e0:	445c      	add	r4, fp
1000f7e2:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f7e6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f7ea:	4066      	eors	r6, r4
1000f7ec:	f8d3 4f74 	ldr.w	r4, [r3, #3956]	@ 0xf74
1000f7f0:	ea88 0804 	eor.w	r8, r8, r4
1000f7f4:	f852 400a 	ldr.w	r4, [r2, sl]
1000f7f8:	4426      	add	r6, r4
1000f7fa:	ea86 0608 	eor.w	r6, r6, r8
1000f7fe:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f802:	0db4      	lsrs	r4, r6, #22
1000f804:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f808:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f80c:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f810:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f814:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f818:	f859 4004 	ldr.w	r4, [r9, r4]
1000f81c:	f851 8008 	ldr.w	r8, [r1, r8]
1000f820:	445c      	add	r4, fp
1000f822:	ea4f 0a86 	mov.w	sl, r6, lsl #2
1000f826:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f82a:	ea84 0808 	eor.w	r8, r4, r8
1000f82e:	f8d3 4f78 	ldr.w	r4, [r3, #3960]	@ 0xf78
1000f832:	ea8e 0e04 	eor.w	lr, lr, r4
1000f836:	f852 400a 	ldr.w	r4, [r2, sl]
1000f83a:	44a0      	add	r8, r4
1000f83c:	ea88 080e 	eor.w	r8, r8, lr
1000f840:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f844:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f848:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f84c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f850:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f854:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f858:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f85c:	f859 4004 	ldr.w	r4, [r9, r4]
1000f860:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f864:	445c      	add	r4, fp
1000f866:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f86a:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f86e:	ea84 0e0e 	eor.w	lr, r4, lr
1000f872:	f8d3 4f7c 	ldr.w	r4, [r3, #3964]	@ 0xf7c
1000f876:	4066      	eors	r6, r4
1000f878:	f852 400a 	ldr.w	r4, [r2, sl]
1000f87c:	44a6      	add	lr, r4
1000f87e:	ea8e 0e06 	eor.w	lr, lr, r6
1000f882:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f886:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f88a:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000f88e:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f892:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f896:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f89a:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f89e:	f859 4004 	ldr.w	r4, [r9, r4]
1000f8a2:	598e      	ldr	r6, [r1, r6]
1000f8a4:	445c      	add	r4, fp
1000f8a6:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f8aa:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f8ae:	4066      	eors	r6, r4
1000f8b0:	f8d3 4f80 	ldr.w	r4, [r3, #3968]	@ 0xf80
1000f8b4:	ea88 0804 	eor.w	r8, r8, r4
1000f8b8:	f852 400a 	ldr.w	r4, [r2, sl]
1000f8bc:	4426      	add	r6, r4
1000f8be:	ea86 0608 	eor.w	r6, r6, r8
1000f8c2:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f8c6:	0db4      	lsrs	r4, r6, #22
1000f8c8:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f8cc:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f8d0:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f8d4:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f8d8:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f8dc:	f859 4004 	ldr.w	r4, [r9, r4]
1000f8e0:	f851 8008 	ldr.w	r8, [r1, r8]
1000f8e4:	445c      	add	r4, fp
1000f8e6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
1000f8ea:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f8ee:	ea84 0808 	eor.w	r8, r4, r8
1000f8f2:	f8d3 4f84 	ldr.w	r4, [r3, #3972]	@ 0xf84
1000f8f6:	ea8e 0e04 	eor.w	lr, lr, r4
1000f8fa:	f852 400a 	ldr.w	r4, [r2, sl]
1000f8fe:	44a0      	add	r8, r4
1000f900:	ea88 080e 	eor.w	r8, r8, lr
1000f904:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000f908:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f90c:	ea4f 1e98 	mov.w	lr, r8, lsr #6
1000f910:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f914:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f918:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f91c:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f920:	f859 4004 	ldr.w	r4, [r9, r4]
1000f924:	f851 e00e 	ldr.w	lr, [r1, lr]
1000f928:	445c      	add	r4, fp
1000f92a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f92e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f932:	ea84 0e0e 	eor.w	lr, r4, lr
1000f936:	f8d3 4f88 	ldr.w	r4, [r3, #3976]	@ 0xf88
1000f93a:	4066      	eors	r6, r4
1000f93c:	f852 400a 	ldr.w	r4, [r2, sl]
1000f940:	44a6      	add	lr, r4
1000f942:	ea8e 0e06 	eor.w	lr, lr, r6
1000f946:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000f94a:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000f94e:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000f952:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f956:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f95a:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000f95e:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f962:	f859 4004 	ldr.w	r4, [r9, r4]
1000f966:	598e      	ldr	r6, [r1, r6]
1000f968:	445c      	add	r4, fp
1000f96a:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000f96e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f972:	4066      	eors	r6, r4
1000f974:	f8d3 4f8c 	ldr.w	r4, [r3, #3980]	@ 0xf8c
1000f978:	ea88 0804 	eor.w	r8, r8, r4
1000f97c:	f852 400a 	ldr.w	r4, [r2, sl]
1000f980:	4426      	add	r6, r4
1000f982:	ea86 0608 	eor.w	r6, r6, r8
1000f986:	ea4f 3b96 	mov.w	fp, r6, lsr #14
1000f98a:	0db4      	lsrs	r4, r6, #22
1000f98c:	ea4f 1896 	mov.w	r8, r6, lsr #6
1000f990:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f994:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f998:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000f99c:	f850 b00b 	ldr.w	fp, [r0, fp]
1000f9a0:	f859 4004 	ldr.w	r4, [r9, r4]
1000f9a4:	f851 8008 	ldr.w	r8, [r1, r8]
1000f9a8:	445c      	add	r4, fp
1000f9aa:	ea4f 0a86 	mov.w	sl, r6, lsl #2
1000f9ae:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f9b2:	ea84 0808 	eor.w	r8, r4, r8
1000f9b6:	f8d3 4f90 	ldr.w	r4, [r3, #3984]	@ 0xf90
1000f9ba:	ea8e 0e04 	eor.w	lr, lr, r4
1000f9be:	f852 400a 	ldr.w	r4, [r2, sl]
1000f9c2:	44a0      	add	r8, r4
1000f9c4:	ea88 080e 	eor.w	r8, r8, lr
1000f9c8:	ea4f 3e98 	mov.w	lr, r8, lsr #14
1000f9cc:	ea4f 5498 	mov.w	r4, r8, lsr #22
1000f9d0:	f40e 7e7f 	and.w	lr, lr, #1020	@ 0x3fc
1000f9d4:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000f9d8:	ea4f 1b98 	mov.w	fp, r8, lsr #6
1000f9dc:	f850 e00e 	ldr.w	lr, [r0, lr]
1000f9e0:	f859 4004 	ldr.w	r4, [r9, r4]
1000f9e4:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000f9e8:	4474      	add	r4, lr
1000f9ea:	f851 e00b 	ldr.w	lr, [r1, fp]
1000f9ee:	ea4f 0a88 	mov.w	sl, r8, lsl #2
1000f9f2:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000f9f6:	ea84 0e0e 	eor.w	lr, r4, lr
1000f9fa:	f8d3 4f94 	ldr.w	r4, [r3, #3988]	@ 0xf94
1000f9fe:	4066      	eors	r6, r4
1000fa00:	f852 400a 	ldr.w	r4, [r2, sl]
1000fa04:	44a6      	add	lr, r4
1000fa06:	ea8e 0e06 	eor.w	lr, lr, r6
1000fa0a:	ea4f 3b9e 	mov.w	fp, lr, lsr #14
1000fa0e:	ea4f 549e 	mov.w	r4, lr, lsr #22
1000fa12:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fa16:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000fa1a:	ea4f 169e 	mov.w	r6, lr, lsr #6
1000fa1e:	f859 4004 	ldr.w	r4, [r9, r4]
1000fa22:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fa26:	f406 767f 	and.w	r6, r6, #1020	@ 0x3fc
1000fa2a:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
1000fa2e:	44a3      	add	fp, r4
1000fa30:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fa34:	598c      	ldr	r4, [r1, r6]
1000fa36:	f8d3 6f98 	ldr.w	r6, [r3, #3992]	@ 0xf98
1000fa3a:	ea88 0806 	eor.w	r8, r8, r6
1000fa3e:	f852 600a 	ldr.w	r6, [r2, sl]
1000fa42:	ea8b 0404 	eor.w	r4, fp, r4
1000fa46:	4434      	add	r4, r6
1000fa48:	f8d3 6f9c 	ldr.w	r6, [r3, #3996]	@ 0xf9c
1000fa4c:	ea8e 0606 	eor.w	r6, lr, r6
1000fa50:	f847 6b08 	str.w	r6, [r7], #8
1000fa54:	ea84 0408 	eor.w	r4, r4, r8
1000fa58:	3d01      	subs	r5, #1
1000fa5a:	f847 4c04 	str.w	r4, [r7, #-4]
1000fa5e:	f47f ade3 	bne.w	1000f628 <BF_crypt+0x1274>
			if (done)
1000fa62:	f1bc 0f01 	cmp.w	ip, #1
1000fa66:	d04d      	beq.n	1000fb04 <BF_crypt+0x1750>
			tmp1 = data.binary.salt[0];
1000fa68:	f8d3 cfe8 	ldr.w	ip, [r3, #4072]	@ 0xfe8
			tmp2 = data.binary.salt[1];
1000fa6c:	f8d3 7fec 	ldr.w	r7, [r3, #4076]	@ 0xfec
			tmp3 = data.binary.salt[2];
1000fa70:	f8d3 8ff0 	ldr.w	r8, [r3, #4080]	@ 0xff0
			tmp4 = data.binary.salt[3];
1000fa74:	f8d3 eff4 	ldr.w	lr, [r3, #4084]	@ 0xff4
1000fa78:	9c04      	ldr	r4, [sp, #16]
				data.ctx.P[i] ^= tmp1;
1000fa7a:	6826      	ldr	r6, [r4, #0]
1000fa7c:	ea86 060c 	eor.w	r6, r6, ip
1000fa80:	6026      	str	r6, [r4, #0]
				data.ctx.P[i + 1] ^= tmp2;
1000fa82:	6866      	ldr	r6, [r4, #4]
1000fa84:	407e      	eors	r6, r7
1000fa86:	6066      	str	r6, [r4, #4]
				data.ctx.P[i + 2] ^= tmp3;
1000fa88:	68a6      	ldr	r6, [r4, #8]
1000fa8a:	ea86 0608 	eor.w	r6, r6, r8
1000fa8e:	60a6      	str	r6, [r4, #8]
				data.ctx.P[i + 3] ^= tmp4;
1000fa90:	68e6      	ldr	r6, [r4, #12]
			for (i = 0; i < BF_N; i += 4) {
1000fa92:	3504      	adds	r5, #4
				data.ctx.P[i + 3] ^= tmp4;
1000fa94:	ea86 060e 	eor.w	r6, r6, lr
			for (i = 0; i < BF_N; i += 4) {
1000fa98:	2d10      	cmp	r5, #16
				data.ctx.P[i + 3] ^= tmp4;
1000fa9a:	60e6      	str	r6, [r4, #12]
			for (i = 0; i < BF_N; i += 4) {
1000fa9c:	f104 0410 	add.w	r4, r4, #16
1000faa0:	d1eb      	bne.n	1000fa7a <BF_crypt+0x16c6>
			data.ctx.P[16] ^= tmp1;
1000faa2:	f8d3 4f98 	ldr.w	r4, [r3, #3992]	@ 0xf98
1000faa6:	ea84 040c 	eor.w	r4, r4, ip
1000faaa:	f8c3 4f98 	str.w	r4, [r3, #3992]	@ 0xf98
			data.ctx.P[17] ^= tmp2;
1000faae:	f8d3 4f9c 	ldr.w	r4, [r3, #3996]	@ 0xf9c
1000fab2:	407c      	eors	r4, r7
1000fab4:	f8c3 4f9c 	str.w	r4, [r3, #3996]	@ 0xf9c
			BF_body();
1000fab8:	f04f 0c01 	mov.w	ip, #1
1000fabc:	f7ff bb8e 	b.w	1000f1dc <BF_crypt+0xe28>
		BF_safe_atoi64(c3, *sptr++);
1000fac0:	f813 1c02 	ldrb.w	r1, [r3, #-2]
1000fac4:	3920      	subs	r1, #32
1000fac6:	295f      	cmp	r1, #95	@ 0x5f
1000fac8:	f63e acb7 	bhi.w	1000e43a <BF_crypt+0x86>
1000facc:	5c47      	ldrb	r7, [r0, r1]
1000face:	2f3f      	cmp	r7, #63	@ 0x3f
1000fad0:	f63e acb3 	bhi.w	1000e43a <BF_crypt+0x86>
		*dptr++ = ((c2 & 0x0F) << 4) | ((c3 & 0x3C) >> 2);
1000fad4:	08b9      	lsrs	r1, r7, #2
1000fad6:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
1000fada:	f802 1c02 	strb.w	r1, [r2, #-2]
		BF_safe_atoi64(c4, *sptr++);
1000fade:	f813 1c01 	ldrb.w	r1, [r3, #-1]
1000fae2:	3920      	subs	r1, #32
1000fae4:	295f      	cmp	r1, #95	@ 0x5f
1000fae6:	f63e aca8 	bhi.w	1000e43a <BF_crypt+0x86>
1000faea:	5c41      	ldrb	r1, [r0, r1]
1000faec:	293f      	cmp	r1, #63	@ 0x3f
1000faee:	f63e aca4 	bhi.w	1000e43a <BF_crypt+0x86>
		*dptr++ = ((c3 & 0x03) << 6) | c4;
1000faf2:	ea41 1187 	orr.w	r1, r1, r7, lsl #6
1000faf6:	f802 1c01 	strb.w	r1, [r2, #-1]
	} while (dptr < end);
1000fafa:	3e01      	subs	r6, #1
1000fafc:	3304      	adds	r3, #4
1000fafe:	3203      	adds	r2, #3
1000fb00:	f7fe bcb7 	b.w	1000e472 <BF_crypt+0xbe>
	} while (--count);
1000fb04:	9805      	ldr	r0, [sp, #20]
1000fb06:	3801      	subs	r0, #1
1000fb08:	9005      	str	r0, [sp, #20]
1000fb0a:	f47f ab54 	bne.w	1000f1b6 <BF_crypt+0xe02>
			BF_ENCRYPT;
1000fb0e:	f8d3 2f58 	ldr.w	r2, [r3, #3928]	@ 0xf58
1000fb12:	9202      	str	r2, [sp, #8]
1000fb14:	f8d3 2f5c 	ldr.w	r2, [r3, #3932]	@ 0xf5c
1000fb18:	9204      	str	r2, [sp, #16]
1000fb1a:	f8d3 2f60 	ldr.w	r2, [r3, #3936]	@ 0xf60
1000fb1e:	9205      	str	r2, [sp, #20]
1000fb20:	f8d3 2f64 	ldr.w	r2, [r3, #3940]	@ 0xf64
1000fb24:	9206      	str	r2, [sp, #24]
1000fb26:	f8d3 2f68 	ldr.w	r2, [r3, #3944]	@ 0xf68
1000fb2a:	9207      	str	r2, [sp, #28]
1000fb2c:	f8d3 2f6c 	ldr.w	r2, [r3, #3948]	@ 0xf6c
1000fb30:	9208      	str	r2, [sp, #32]
1000fb32:	f8d3 2f70 	ldr.w	r2, [r3, #3952]	@ 0xf70
1000fb36:	9209      	str	r2, [sp, #36]	@ 0x24
1000fb38:	f8d3 2f74 	ldr.w	r2, [r3, #3956]	@ 0xf74
1000fb3c:	920a      	str	r2, [sp, #40]	@ 0x28
1000fb3e:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
1000fb42:	920b      	str	r2, [sp, #44]	@ 0x2c
1000fb44:	f8d3 2f7c 	ldr.w	r2, [r3, #3964]	@ 0xf7c
1000fb48:	920c      	str	r2, [sp, #48]	@ 0x30
1000fb4a:	f8d3 2f80 	ldr.w	r2, [r3, #3968]	@ 0xf80
1000fb4e:	920d      	str	r2, [sp, #52]	@ 0x34
1000fb50:	f8d3 2f84 	ldr.w	r2, [r3, #3972]	@ 0xf84
1000fb54:	920e      	str	r2, [sp, #56]	@ 0x38
1000fb56:	f8d3 2f88 	ldr.w	r2, [r3, #3976]	@ 0xf88
1000fb5a:	920f      	str	r2, [sp, #60]	@ 0x3c
1000fb5c:	f8d3 2f8c 	ldr.w	r2, [r3, #3980]	@ 0xf8c
1000fb60:	9210      	str	r2, [sp, #64]	@ 0x40
1000fb62:	f8d3 2f90 	ldr.w	r2, [r3, #3984]	@ 0xf90
1000fb66:	9211      	str	r2, [sp, #68]	@ 0x44
1000fb68:	4e0d      	ldr	r6, [pc, #52]	@ (1000fba0 <BF_crypt+0x17ec>)
1000fb6a:	f8d3 2f94 	ldr.w	r2, [r3, #3988]	@ 0xf94
1000fb6e:	9212      	str	r2, [sp, #72]	@ 0x48
1000fb70:	f50d 5786 	add.w	r7, sp, #4288	@ 0x10c0
1000fb74:	f8d3 2f98 	ldr.w	r2, [r3, #3992]	@ 0xf98
1000fb78:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	@ 0xf9c
1000fb7c:	9213      	str	r2, [sp, #76]	@ 0x4c
1000fb7e:	3718      	adds	r7, #24
1000fb80:	9314      	str	r3, [sp, #80]	@ 0x50
1000fb82:	3710      	adds	r7, #16
1000fb84:	f106 0e18 	add.w	lr, r6, #24
1000fb88:	f60d 4258 	addw	r2, sp, #3160	@ 0xc58
1000fb8c:	f60d 0158 	addw	r1, sp, #2136	@ 0x858
1000fb90:	f50d 608b 	add.w	r0, sp, #1112	@ 0x458
		R = BF_magic_w[i + 1];
1000fb94:	e9d6 3500 	ldrd	r3, r5, [r6]
1000fb98:	f04f 0c40 	mov.w	ip, #64	@ 0x40
1000fb9c:	e002      	b.n	1000fba4 <BF_crypt+0x17f0>
1000fb9e:	bf00      	nop
1000fba0:	10023eac 	.word	0x10023eac
			BF_ENCRYPT;
1000fba4:	9c02      	ldr	r4, [sp, #8]
1000fba6:	4063      	eors	r3, r4
1000fba8:	ea4f 3b93 	mov.w	fp, r3, lsr #14
1000fbac:	0d9c      	lsrs	r4, r3, #22
1000fbae:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
1000fbb2:	ea4f 1a93 	mov.w	sl, r3, lsr #6
1000fbb6:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fbba:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000fbbe:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fbc2:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fbc6:	f859 4004 	ldr.w	r4, [r9, r4]
1000fbca:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fbce:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000fbd2:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fbd6:	445c      	add	r4, fp
1000fbd8:	ea84 0a0a 	eor.w	sl, r4, sl
1000fbdc:	f852 4008 	ldr.w	r4, [r2, r8]
1000fbe0:	44a2      	add	sl, r4
1000fbe2:	9c04      	ldr	r4, [sp, #16]
1000fbe4:	ea8a 0404 	eor.w	r4, sl, r4
1000fbe8:	406c      	eors	r4, r5
1000fbea:	00a5      	lsls	r5, r4, #2
1000fbec:	ea4f 3b94 	mov.w	fp, r4, lsr #14
1000fbf0:	ea4f 5894 	mov.w	r8, r4, lsr #22
1000fbf4:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000fbf8:	9515      	str	r5, [sp, #84]	@ 0x54
1000fbfa:	ea4f 1a94 	mov.w	sl, r4, lsr #6
1000fbfe:	9d05      	ldr	r5, [sp, #20]
1000fc00:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fc04:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fc08:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fc0c:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fc10:	f859 8008 	ldr.w	r8, [r9, r8]
1000fc14:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fc18:	406b      	eors	r3, r5
1000fc1a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1000fc1c:	44d8      	add	r8, fp
1000fc1e:	5955      	ldr	r5, [r2, r5]
1000fc20:	ea88 0a0a 	eor.w	sl, r8, sl
1000fc24:	44aa      	add	sl, r5
1000fc26:	ea8a 0303 	eor.w	r3, sl, r3
1000fc2a:	009d      	lsls	r5, r3, #2
1000fc2c:	ea4f 3b93 	mov.w	fp, r3, lsr #14
1000fc30:	ea4f 5893 	mov.w	r8, r3, lsr #22
1000fc34:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000fc38:	9515      	str	r5, [sp, #84]	@ 0x54
1000fc3a:	ea4f 1a93 	mov.w	sl, r3, lsr #6
1000fc3e:	9d06      	ldr	r5, [sp, #24]
1000fc40:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fc44:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fc48:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fc4c:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fc50:	f859 8008 	ldr.w	r8, [r9, r8]
1000fc54:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fc58:	406c      	eors	r4, r5
1000fc5a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1000fc5c:	44d8      	add	r8, fp
1000fc5e:	5955      	ldr	r5, [r2, r5]
1000fc60:	ea88 0a0a 	eor.w	sl, r8, sl
1000fc64:	44aa      	add	sl, r5
1000fc66:	ea8a 0804 	eor.w	r8, sl, r4
1000fc6a:	ea4f 3b98 	mov.w	fp, r8, lsr #14
1000fc6e:	ea4f 5598 	mov.w	r5, r8, lsr #22
1000fc72:	ea4f 1a98 	mov.w	sl, r8, lsr #6
1000fc76:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fc7a:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000fc7e:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fc82:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fc86:	f859 5005 	ldr.w	r5, [r9, r5]
1000fc8a:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fc8e:	445d      	add	r5, fp
1000fc90:	ea4f 0488 	mov.w	r4, r8, lsl #2
1000fc94:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000fc98:	ea85 0a0a 	eor.w	sl, r5, sl
1000fc9c:	9d07      	ldr	r5, [sp, #28]
1000fc9e:	406b      	eors	r3, r5
1000fca0:	5915      	ldr	r5, [r2, r4]
1000fca2:	44aa      	add	sl, r5
1000fca4:	ea8a 0503 	eor.w	r5, sl, r3
1000fca8:	ea4f 3b95 	mov.w	fp, r5, lsr #14
1000fcac:	0dac      	lsrs	r4, r5, #22
1000fcae:	ea4f 1a95 	mov.w	sl, r5, lsr #6
1000fcb2:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fcb6:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000fcba:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fcbe:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fcc2:	f859 4004 	ldr.w	r4, [r9, r4]
1000fcc6:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fcca:	445c      	add	r4, fp
1000fccc:	00ab      	lsls	r3, r5, #2
1000fcce:	f403 737f 	and.w	r3, r3, #1020	@ 0x3fc
1000fcd2:	ea84 0a0a 	eor.w	sl, r4, sl
1000fcd6:	9c08      	ldr	r4, [sp, #32]
1000fcd8:	ea84 0808 	eor.w	r8, r4, r8
1000fcdc:	58d4      	ldr	r4, [r2, r3]
1000fcde:	44a2      	add	sl, r4
1000fce0:	ea8a 0408 	eor.w	r4, sl, r8
1000fce4:	ea4f 3b94 	mov.w	fp, r4, lsr #14
1000fce8:	0da3      	lsrs	r3, r4, #22
1000fcea:	ea4f 1a94 	mov.w	sl, r4, lsr #6
1000fcee:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fcf2:	f403 737f 	and.w	r3, r3, #1020	@ 0x3fc
1000fcf6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fcfa:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fcfe:	f859 3003 	ldr.w	r3, [r9, r3]
1000fd02:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fd06:	445b      	add	r3, fp
1000fd08:	ea4f 0884 	mov.w	r8, r4, lsl #2
1000fd0c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fd10:	ea83 0a0a 	eor.w	sl, r3, sl
1000fd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000fd16:	405d      	eors	r5, r3
1000fd18:	f852 3008 	ldr.w	r3, [r2, r8]
1000fd1c:	449a      	add	sl, r3
1000fd1e:	ea8a 0305 	eor.w	r3, sl, r5
1000fd22:	ea4f 3b93 	mov.w	fp, r3, lsr #14
1000fd26:	0d9d      	lsrs	r5, r3, #22
1000fd28:	ea4f 1a93 	mov.w	sl, r3, lsr #6
1000fd2c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fd30:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000fd34:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fd38:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fd3c:	f859 5005 	ldr.w	r5, [r9, r5]
1000fd40:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fd44:	445d      	add	r5, fp
1000fd46:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000fd4a:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fd4e:	ea85 0a0a 	eor.w	sl, r5, sl
1000fd52:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1000fd54:	406c      	eors	r4, r5
1000fd56:	f852 5008 	ldr.w	r5, [r2, r8]
1000fd5a:	44aa      	add	sl, r5
1000fd5c:	ea8a 0504 	eor.w	r5, sl, r4
1000fd60:	ea4f 3b95 	mov.w	fp, r5, lsr #14
1000fd64:	0dac      	lsrs	r4, r5, #22
1000fd66:	ea4f 1a95 	mov.w	sl, r5, lsr #6
1000fd6a:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fd6e:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000fd72:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fd76:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fd7a:	f859 4004 	ldr.w	r4, [r9, r4]
1000fd7e:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fd82:	445c      	add	r4, fp
1000fd84:	ea4f 0885 	mov.w	r8, r5, lsl #2
1000fd88:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fd8c:	ea84 0a0a 	eor.w	sl, r4, sl
1000fd90:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
1000fd92:	4063      	eors	r3, r4
1000fd94:	f852 4008 	ldr.w	r4, [r2, r8]
1000fd98:	44a2      	add	sl, r4
1000fd9a:	ea8a 0403 	eor.w	r4, sl, r3
1000fd9e:	ea4f 3b94 	mov.w	fp, r4, lsr #14
1000fda2:	0da3      	lsrs	r3, r4, #22
1000fda4:	ea4f 1a94 	mov.w	sl, r4, lsr #6
1000fda8:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fdac:	f403 737f 	and.w	r3, r3, #1020	@ 0x3fc
1000fdb0:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fdb4:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fdb8:	f859 3003 	ldr.w	r3, [r9, r3]
1000fdbc:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fdc0:	445b      	add	r3, fp
1000fdc2:	ea4f 0884 	mov.w	r8, r4, lsl #2
1000fdc6:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fdca:	ea83 0a0a 	eor.w	sl, r3, sl
1000fdce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000fdd0:	405d      	eors	r5, r3
1000fdd2:	f852 3008 	ldr.w	r3, [r2, r8]
1000fdd6:	449a      	add	sl, r3
1000fdd8:	ea8a 0305 	eor.w	r3, sl, r5
1000fddc:	ea4f 3b93 	mov.w	fp, r3, lsr #14
1000fde0:	0d9d      	lsrs	r5, r3, #22
1000fde2:	ea4f 1a93 	mov.w	sl, r3, lsr #6
1000fde6:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fdea:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000fdee:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fdf2:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fdf6:	f859 5005 	ldr.w	r5, [r9, r5]
1000fdfa:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fdfe:	445d      	add	r5, fp
1000fe00:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000fe04:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fe08:	ea85 0a0a 	eor.w	sl, r5, sl
1000fe0c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1000fe0e:	406c      	eors	r4, r5
1000fe10:	f852 5008 	ldr.w	r5, [r2, r8]
1000fe14:	44aa      	add	sl, r5
1000fe16:	ea8a 0504 	eor.w	r5, sl, r4
1000fe1a:	ea4f 3b95 	mov.w	fp, r5, lsr #14
1000fe1e:	0dac      	lsrs	r4, r5, #22
1000fe20:	ea4f 1a95 	mov.w	sl, r5, lsr #6
1000fe24:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fe28:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000fe2c:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fe30:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fe34:	f859 4004 	ldr.w	r4, [r9, r4]
1000fe38:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fe3c:	445c      	add	r4, fp
1000fe3e:	ea4f 0885 	mov.w	r8, r5, lsl #2
1000fe42:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fe46:	ea84 0a0a 	eor.w	sl, r4, sl
1000fe4a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1000fe4c:	4063      	eors	r3, r4
1000fe4e:	f852 4008 	ldr.w	r4, [r2, r8]
1000fe52:	44a2      	add	sl, r4
1000fe54:	ea8a 0403 	eor.w	r4, sl, r3
1000fe58:	ea4f 3b94 	mov.w	fp, r4, lsr #14
1000fe5c:	0da3      	lsrs	r3, r4, #22
1000fe5e:	ea4f 1a94 	mov.w	sl, r4, lsr #6
1000fe62:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fe66:	f403 737f 	and.w	r3, r3, #1020	@ 0x3fc
1000fe6a:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000fe6e:	f850 b00b 	ldr.w	fp, [r0, fp]
1000fe72:	f859 3003 	ldr.w	r3, [r9, r3]
1000fe76:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fe7a:	445b      	add	r3, fp
1000fe7c:	ea4f 0884 	mov.w	r8, r4, lsl #2
1000fe80:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fe84:	ea83 0a0a 	eor.w	sl, r3, sl
1000fe88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1000fe8a:	405d      	eors	r5, r3
1000fe8c:	f852 3008 	ldr.w	r3, [r2, r8]
1000fe90:	449a      	add	sl, r3
1000fe92:	ea8a 0305 	eor.w	r3, sl, r5
1000fe96:	ea4f 3b93 	mov.w	fp, r3, lsr #14
1000fe9a:	0d9d      	lsrs	r5, r3, #22
1000fe9c:	ea4f 1a93 	mov.w	sl, r3, lsr #6
1000fea0:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fea4:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000fea8:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000feac:	f850 b00b 	ldr.w	fp, [r0, fp]
1000feb0:	f859 5005 	ldr.w	r5, [r9, r5]
1000feb4:	f851 a00a 	ldr.w	sl, [r1, sl]
1000feb8:	445d      	add	r5, fp
1000feba:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000febe:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000fec2:	ea85 0a0a 	eor.w	sl, r5, sl
1000fec6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
1000fec8:	406c      	eors	r4, r5
1000feca:	f852 5008 	ldr.w	r5, [r2, r8]
1000fece:	44aa      	add	sl, r5
1000fed0:	ea8a 0504 	eor.w	r5, sl, r4
1000fed4:	ea4f 3b95 	mov.w	fp, r5, lsr #14
1000fed8:	0dac      	lsrs	r4, r5, #22
1000feda:	ea4f 1a95 	mov.w	sl, r5, lsr #6
1000fede:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000fee2:	f404 747f 	and.w	r4, r4, #1020	@ 0x3fc
1000fee6:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000feea:	f850 b00b 	ldr.w	fp, [r0, fp]
1000feee:	f859 4004 	ldr.w	r4, [r9, r4]
1000fef2:	f851 a00a 	ldr.w	sl, [r1, sl]
1000fef6:	445c      	add	r4, fp
1000fef8:	ea4f 0885 	mov.w	r8, r5, lsl #2
1000fefc:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ff00:	ea84 0a0a 	eor.w	sl, r4, sl
1000ff04:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1000ff06:	4063      	eors	r3, r4
1000ff08:	f852 4008 	ldr.w	r4, [r2, r8]
1000ff0c:	44a2      	add	sl, r4
1000ff0e:	ea8a 0403 	eor.w	r4, sl, r3
1000ff12:	ea4f 3b94 	mov.w	fp, r4, lsr #14
1000ff16:	0da3      	lsrs	r3, r4, #22
1000ff18:	ea4f 1a94 	mov.w	sl, r4, lsr #6
1000ff1c:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ff20:	f403 737f 	and.w	r3, r3, #1020	@ 0x3fc
1000ff24:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ff28:	f850 b00b 	ldr.w	fp, [r0, fp]
1000ff2c:	f859 3003 	ldr.w	r3, [r9, r3]
1000ff30:	f851 a00a 	ldr.w	sl, [r1, sl]
1000ff34:	445b      	add	r3, fp
1000ff36:	ea4f 0884 	mov.w	r8, r4, lsl #2
1000ff3a:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ff3e:	ea83 0a0a 	eor.w	sl, r3, sl
1000ff42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1000ff44:	405d      	eors	r5, r3
1000ff46:	f852 3008 	ldr.w	r3, [r2, r8]
1000ff4a:	449a      	add	sl, r3
1000ff4c:	ea8a 0305 	eor.w	r3, sl, r5
1000ff50:	ea4f 3b93 	mov.w	fp, r3, lsr #14
1000ff54:	0d9d      	lsrs	r5, r3, #22
1000ff56:	ea4f 1a93 	mov.w	sl, r3, lsr #6
1000ff5a:	f40b 7b7f 	and.w	fp, fp, #1020	@ 0x3fc
1000ff5e:	f405 757f 	and.w	r5, r5, #1020	@ 0x3fc
1000ff62:	f40a 7a7f 	and.w	sl, sl, #1020	@ 0x3fc
1000ff66:	f850 b00b 	ldr.w	fp, [r0, fp]
1000ff6a:	f859 5005 	ldr.w	r5, [r9, r5]
1000ff6e:	f851 a00a 	ldr.w	sl, [r1, sl]
1000ff72:	ea4f 0883 	mov.w	r8, r3, lsl #2
1000ff76:	445d      	add	r5, fp
1000ff78:	ea85 0a0a 	eor.w	sl, r5, sl
1000ff7c:	f408 787f 	and.w	r8, r8, #1020	@ 0x3fc
1000ff80:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1000ff82:	406c      	eors	r4, r5
1000ff84:	f852 5008 	ldr.w	r5, [r2, r8]
1000ff88:	44aa      	add	sl, r5
1000ff8a:	ea8a 0504 	eor.w	r5, sl, r4
1000ff8e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
		} while (--count);
1000ff90:	f1bc 0c01 	subs.w	ip, ip, #1
			BF_ENCRYPT;
1000ff94:	ea83 0304 	eor.w	r3, r3, r4
		} while (--count);
1000ff98:	f47f ae04 	bne.w	1000fba4 <BF_crypt+0x17f0>
	for (i = 0; i < 6; i += 2) {
1000ff9c:	3608      	adds	r6, #8
1000ff9e:	45b6      	cmp	lr, r6
		data.binary.output[i + 1] = R;
1000ffa0:	e9c7 3500 	strd	r3, r5, [r7]
	for (i = 0; i < 6; i += 2) {
1000ffa4:	f107 0708 	add.w	r7, r7, #8
1000ffa8:	f47f adf4 	bne.w	1000fb94 <BF_crypt+0x17e0>
	memcpy(output, setting, 7 + 22 - 1);
1000ffac:	9b01      	ldr	r3, [sp, #4]
1000ffae:	9a03      	ldr	r2, [sp, #12]
1000ffb0:	4619      	mov	r1, r3
1000ffb2:	311c      	adds	r1, #28
1000ffb4:	f853 0b04 	ldr.w	r0, [r3], #4
1000ffb8:	f842 0b04 	str.w	r0, [r2], #4
1000ffbc:	428b      	cmp	r3, r1
1000ffbe:	d1f9      	bne.n	1000ffb4 <BF_crypt+0x1c00>
		BF_atoi64[(int)setting[7 + 22 - 1] - 0x20] & 0x30];
1000ffc0:	9b01      	ldr	r3, [sp, #4]
1000ffc2:	7f1a      	ldrb	r2, [r3, #28]
1000ffc4:	4b0f      	ldr	r3, [pc, #60]	@ (10010004 <BF_crypt+0x1c50>)
1000ffc6:	4413      	add	r3, r2
	output[7 + 22 - 1] = BF_itoa64[(int)
1000ffc8:	4a0f      	ldr	r2, [pc, #60]	@ (10010008 <BF_crypt+0x1c54>)
		BF_atoi64[(int)setting[7 + 22 - 1] - 0x20] & 0x30];
1000ffca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
1000ffce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
	BF_swap(data.binary.output, 6);
1000ffd2:	f50d 5486 	add.w	r4, sp, #4288	@ 0x10c0
	output[7 + 22 - 1] = BF_itoa64[(int)
1000ffd6:	5cd3      	ldrb	r3, [r2, r3]
1000ffd8:	9a03      	ldr	r2, [sp, #12]
	BF_swap(data.binary.output, 6);
1000ffda:	3418      	adds	r4, #24
1000ffdc:	3410      	adds	r4, #16
	output[7 + 22 - 1] = BF_itoa64[(int)
1000ffde:	7713      	strb	r3, [r2, #28]
	BF_swap(data.binary.output, 6);
1000ffe0:	2106      	movs	r1, #6
1000ffe2:	4620      	mov	r0, r4
1000ffe4:	f7fe f9dc 	bl	1000e3a0 <BF_swap>
	BF_encode(&output[7 + 22], data.binary.output, 23);
1000ffe8:	9b03      	ldr	r3, [sp, #12]
1000ffea:	2217      	movs	r2, #23
1000ffec:	f103 001d 	add.w	r0, r3, #29
1000fff0:	4621      	mov	r1, r4
1000fff2:	f7fe f94f 	bl	1000e294 <BF_encode>
	output[7 + 22 + 31] = '\0';
1000fff6:	9a03      	ldr	r2, [sp, #12]
1000fff8:	2300      	movs	r3, #0
1000fffa:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	return output;
1000fffe:	f7fe b9e9 	b.w	1000e3d4 <BF_crypt+0x20>
10010002:	bf00      	nop
10010004:	10022dc2 	.word	0x10022dc2
10010008:	10022e22 	.word	0x10022e22

1001000c <_crypt_output_magic>:

int _crypt_output_magic(const char *setting, char *output, int size)
{
	if (size < 3)
1001000c:	2a02      	cmp	r2, #2
1001000e:	dd10      	ble.n	10010032 <_crypt_output_magic+0x26>
		return -1;

	output[0] = '*';
10010010:	232a      	movs	r3, #42	@ 0x2a
10010012:	700b      	strb	r3, [r1, #0]
	output[1] = '0';
10010014:	2330      	movs	r3, #48	@ 0x30
10010016:	704b      	strb	r3, [r1, #1]
	output[2] = '\0';
10010018:	2300      	movs	r3, #0
1001001a:	708b      	strb	r3, [r1, #2]

	if (setting[0] == '*' && setting[1] == '0')
1001001c:	7803      	ldrb	r3, [r0, #0]
1001001e:	2b2a      	cmp	r3, #42	@ 0x2a
10010020:	d102      	bne.n	10010028 <_crypt_output_magic+0x1c>
10010022:	7843      	ldrb	r3, [r0, #1]
10010024:	2b30      	cmp	r3, #48	@ 0x30
10010026:	d001      	beq.n	1001002c <_crypt_output_magic+0x20>
		output[1] = '1';

	return 0;
10010028:	2000      	movs	r0, #0
1001002a:	4770      	bx	lr
		output[1] = '1';
1001002c:	2331      	movs	r3, #49	@ 0x31
1001002e:	704b      	strb	r3, [r1, #1]
10010030:	e7fa      	b.n	10010028 <_crypt_output_magic+0x1c>
		return -1;
10010032:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10010036:	4770      	bx	lr

10010038 <_crypt_blowfish_rn>:
 * The performance cost of this quick self-test is around 0.6% at the "$2a$08"
 * setting.
 */
char *_crypt_blowfish_rn(const char *key, const char *setting,
	char *output, int size)
{
10010038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001003c:	460d      	mov	r5, r1
1001003e:	4617      	mov	r7, r2
10010040:	b0e5      	sub	sp, #404	@ 0x194
		char s[7 + 22 + 1];
		char o[7 + 22 + 31 + 1 + 1 + 1];
	} buf;

/* Hash the supplied password */
	_crypt_output_magic(setting, output, size);
10010042:	461a      	mov	r2, r3
{
10010044:	4604      	mov	r4, r0
	_crypt_output_magic(setting, output, size);
10010046:	4639      	mov	r1, r7
10010048:	4628      	mov	r0, r5
{
1001004a:	4698      	mov	r8, r3
	_crypt_output_magic(setting, output, size);
1001004c:	f7ff ffde 	bl	1001000c <_crypt_output_magic>
	retval = BF_crypt(key, setting, output, size, 16);
10010050:	2310      	movs	r3, #16
10010052:	463a      	mov	r2, r7
10010054:	9300      	str	r3, [sp, #0]
10010056:	4629      	mov	r1, r5
10010058:	4643      	mov	r3, r8
1001005a:	4620      	mov	r0, r4
1001005c:	f7fe f9aa 	bl	1000e3b4 <BF_crypt>
10010060:	4606      	mov	r6, r0
	save_errno = errno;
10010062:	f009 fe23 	bl	10019cac <__errno>
10010066:	6803      	ldr	r3, [r0, #0]
10010068:	9303      	str	r3, [sp, #12]
 * from the same scope such that they likely use the same stack locations,
 * which makes the second call overwrite the first call's sensitive data on the
 * stack and makes it more likely that any alignment related issues would be
 * detected by the self-test.
 */
	memcpy(buf.s, test_setting, sizeof(buf.s));
1001006a:	4b3f      	ldr	r3, [pc, #252]	@ (10010168 <_crypt_blowfish_rn+0x130>)
1001006c:	aa4c      	add	r2, sp, #304	@ 0x130
1001006e:	f103 0c18 	add.w	ip, r3, #24
10010072:	4693      	mov	fp, r2
10010074:	6818      	ldr	r0, [r3, #0]
10010076:	6859      	ldr	r1, [r3, #4]
10010078:	4614      	mov	r4, r2
1001007a:	c403      	stmia	r4!, {r0, r1}
1001007c:	3308      	adds	r3, #8
1001007e:	4563      	cmp	r3, ip
10010080:	4622      	mov	r2, r4
10010082:	d1f7      	bne.n	10010074 <_crypt_blowfish_rn+0x3c>
10010084:	6818      	ldr	r0, [r3, #0]
10010086:	889b      	ldrh	r3, [r3, #4]
10010088:	6020      	str	r0, [r4, #0]
1001008a:	80a3      	strh	r3, [r4, #4]
	if (retval) {
1001008c:	2e00      	cmp	r6, #0
1001008e:	d058      	beq.n	10010142 <_crypt_blowfish_rn+0x10a>
		unsigned int flags = flags_by_subtype[
		    (unsigned int)(unsigned char)setting[2] - 'a'];
10010090:	78aa      	ldrb	r2, [r5, #2]
		unsigned int flags = flags_by_subtype[
10010092:	4b36      	ldr	r3, [pc, #216]	@ (1001016c <_crypt_blowfish_rn+0x134>)
		test_hash = test_hashes[flags & 1];
10010094:	4936      	ldr	r1, [pc, #216]	@ (10010170 <_crypt_blowfish_rn+0x138>)
		buf.s[2] = setting[2];
10010096:	f88d 2132 	strb.w	r2, [sp, #306]	@ 0x132
		unsigned int flags = flags_by_subtype[
1001009a:	4413      	add	r3, r2
		test_hash = test_hashes[flags & 1];
1001009c:	f813 3c61 	ldrb.w	r3, [r3, #-97]
100100a0:	f003 0301 	and.w	r3, r3, #1
100100a4:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
	}
	memset(buf.o, 0x55, sizeof(buf.o));
100100a8:	f50d 79a7 	add.w	r9, sp, #334	@ 0x14e
100100ac:	223e      	movs	r2, #62	@ 0x3e
100100ae:	2155      	movs	r1, #85	@ 0x55
100100b0:	4648      	mov	r0, r9
100100b2:	f009 fcc3 	bl	10019a3c <memset>
	buf.o[sizeof(buf.o) - 1] = 0;
	p = BF_crypt(test_key, buf.s, buf.o, sizeof(buf.o) - (1 + 1), 1);
100100b6:	2301      	movs	r3, #1
100100b8:	9300      	str	r3, [sp, #0]
100100ba:	482e      	ldr	r0, [pc, #184]	@ (10010174 <_crypt_blowfish_rn+0x13c>)
	buf.o[sizeof(buf.o) - 1] = 0;
100100bc:	2400      	movs	r4, #0
	p = BF_crypt(test_key, buf.s, buf.o, sizeof(buf.o) - (1 + 1), 1);
100100be:	233d      	movs	r3, #61	@ 0x3d
100100c0:	464a      	mov	r2, r9
100100c2:	4659      	mov	r1, fp
	buf.o[sizeof(buf.o) - 1] = 0;
100100c4:	f88d 418c 	strb.w	r4, [sp, #396]	@ 0x18c
	p = BF_crypt(test_key, buf.s, buf.o, sizeof(buf.o) - (1 + 1), 1);
100100c8:	f7fe f974 	bl	1000e3b4 <BF_crypt>

	ok = (p == buf.o &&
	    !memcmp(p, buf.s, 7 + 22) &&
100100cc:	4581      	cmp	r9, r0
100100ce:	d10d      	bne.n	100100ec <_crypt_blowfish_rn+0xb4>
100100d0:	221d      	movs	r2, #29
100100d2:	4659      	mov	r1, fp
100100d4:	f009 fb94 	bl	10019800 <memcmp>
	ok = (p == buf.o &&
100100d8:	b940      	cbnz	r0, 100100ec <_crypt_blowfish_rn+0xb4>
	    !memcmp(p + (7 + 22), test_hash, 31 + 1 + 1 + 1));
100100da:	2222      	movs	r2, #34	@ 0x22
100100dc:	4651      	mov	r1, sl
100100de:	f20d 106b 	addw	r0, sp, #363	@ 0x16b
100100e2:	f009 fb8d 	bl	10019800 <memcmp>
	    !memcmp(p, buf.s, 7 + 22) &&
100100e6:	fab0 f480 	clz	r4, r0
100100ea:	0964      	lsrs	r4, r4, #5

	{
		const char *k = "\xff\xa3" "34" "\xff\xff\xff\xa3" "345";
		BF_key ae, ai, ye, yi;
		BF_set_key(k, ae, ai, 2); /* $2a$ */
100100ec:	4822      	ldr	r0, [pc, #136]	@ (10010178 <_crypt_blowfish_rn+0x140>)
100100ee:	2302      	movs	r3, #2
100100f0:	aa16      	add	r2, sp, #88	@ 0x58
100100f2:	a904      	add	r1, sp, #16
100100f4:	f7fe f900 	bl	1000e2f8 <BF_set_key>
		BF_set_key(k, ye, yi, 4); /* $2y$ */
100100f8:	2304      	movs	r3, #4
100100fa:	aa3a      	add	r2, sp, #232	@ 0xe8
100100fc:	a928      	add	r1, sp, #160	@ 0xa0
100100fe:	f7fe f8fb 	bl	1000e2f8 <BF_set_key>
		ai[0] ^= 0x10000; /* undo the safety (for comparison) */
10010102:	9b16      	ldr	r3, [sp, #88]	@ 0x58
10010104:	f483 3280 	eor.w	r2, r3, #65536	@ 0x10000
10010108:	9216      	str	r2, [sp, #88]	@ 0x58
		ok = ok && ai[0] == 0xdb9c59bc && ye[17] == 0x33343500 &&
		    !memcmp(ae, ye, sizeof(ae)) &&
1001010a:	b1ec      	cbz	r4, 10010148 <_crypt_blowfish_rn+0x110>
		ok = ok && ai[0] == 0xdb9c59bc && ye[17] == 0x33343500 &&
1001010c:	4a1b      	ldr	r2, [pc, #108]	@ (1001017c <_crypt_blowfish_rn+0x144>)
1001010e:	4293      	cmp	r3, r2
10010110:	d11a      	bne.n	10010148 <_crypt_blowfish_rn+0x110>
10010112:	4b1b      	ldr	r3, [pc, #108]	@ (10010180 <_crypt_blowfish_rn+0x148>)
10010114:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
10010116:	429a      	cmp	r2, r3
10010118:	d116      	bne.n	10010148 <_crypt_blowfish_rn+0x110>
		    !memcmp(ae, ye, sizeof(ae)) &&
1001011a:	2248      	movs	r2, #72	@ 0x48
1001011c:	a928      	add	r1, sp, #160	@ 0xa0
1001011e:	a804      	add	r0, sp, #16
10010120:	f009 fb6e 	bl	10019800 <memcmp>
		ok = ok && ai[0] == 0xdb9c59bc && ye[17] == 0x33343500 &&
10010124:	b980      	cbnz	r0, 10010148 <_crypt_blowfish_rn+0x110>
		    !memcmp(ai, yi, sizeof(ai));
10010126:	2248      	movs	r2, #72	@ 0x48
10010128:	a93a      	add	r1, sp, #232	@ 0xe8
1001012a:	a816      	add	r0, sp, #88	@ 0x58
1001012c:	f009 fb68 	bl	10019800 <memcmp>
		    !memcmp(ae, ye, sizeof(ae)) &&
10010130:	b950      	cbnz	r0, 10010148 <_crypt_blowfish_rn+0x110>
	}

	__set_errno(save_errno);
10010132:	f009 fdbb 	bl	10019cac <__errno>
10010136:	9b03      	ldr	r3, [sp, #12]
10010138:	6003      	str	r3, [r0, #0]

/* Should not happen */
	_crypt_output_magic(setting, output, size);
	__set_errno(EINVAL); /* pretend we don't support this hash type */
	return NULL;
}
1001013a:	4630      	mov	r0, r6
1001013c:	b065      	add	sp, #404	@ 0x194
1001013e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const char *test_hash = test_hashes[0];
10010142:	f8df a040 	ldr.w	sl, [pc, #64]	@ 10010184 <_crypt_blowfish_rn+0x14c>
10010146:	e7af      	b.n	100100a8 <_crypt_blowfish_rn+0x70>
	__set_errno(save_errno);
10010148:	f009 fdb0 	bl	10019cac <__errno>
1001014c:	9b03      	ldr	r3, [sp, #12]
1001014e:	6003      	str	r3, [r0, #0]
	_crypt_output_magic(setting, output, size);
10010150:	4642      	mov	r2, r8
10010152:	4639      	mov	r1, r7
10010154:	4628      	mov	r0, r5
10010156:	f7ff ff59 	bl	1001000c <_crypt_output_magic>
	__set_errno(EINVAL); /* pretend we don't support this hash type */
1001015a:	f009 fda7 	bl	10019cac <__errno>
1001015e:	2316      	movs	r3, #22
10010160:	6003      	str	r3, [r0, #0]
	return NULL;
10010162:	2600      	movs	r6, #0
10010164:	e7e9      	b.n	1001013a <_crypt_blowfish_rn+0x102>
10010166:	bf00      	nop
10010168:	10022d82 	.word	0x10022d82
1001016c:	10022da8 	.word	0x10022da8
10010170:	10022da0 	.word	0x10022da0
10010174:	10022d6c 	.word	0x10022d6c
10010178:	10022d76 	.word	0x10022d76
1001017c:	db9d59bc 	.word	0xdb9d59bc
10010180:	33343500 	.word	0x33343500
10010184:	10023ec4 	.word	0x10023ec4

10010188 <crypt_rn>:
		setting, (char *)&_ufc_foobar, sizeof(_ufc_foobar));
}
#else
char *crypt_rn(const char *key, const char *setting, void *data, int size)
{
	return _crypt_blowfish_rn(key, setting, (char *)data, size);
10010188:	f7ff bf56 	b.w	10010038 <_crypt_blowfish_rn>

1001018c <DMA0_IRQHandler>:


#define MXC_AES_DATA_LENGTH 54
volatile int dma_flag = 0;

void DMA0_IRQHandler() {
1001018c:	b508      	push	{r3, lr}
    MXC_DMA_Handler();
1001018e:	f003 fd67 	bl	10013c60 <MXC_DMA_Handler>
    dma_flag++;
10010192:	4a02      	ldr	r2, [pc, #8]	@ (1001019c <DMA0_IRQHandler+0x10>)
10010194:	6813      	ldr	r3, [r2, #0]
10010196:	3301      	adds	r3, #1
10010198:	6013      	str	r3, [r2, #0]
}
1001019a:	bd08      	pop	{r3, pc}
1001019c:	20000c1c 	.word	0x20000c1c

100101a0 <AES_encrypt>:
 *
 *
 * Can only encrypt using external key
 */
// Easiest way would be to pass in a parameter of type mxc_aes_req_t, the MXC_AES functions utilize that
int AES_encrypt(int asynchronous, mxc_aes_keys_t key, uint32_t* inputData, uint32_t* encryptedData) {
100101a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100101a4:	b086      	sub	sp, #24
100101a6:	4605      	mov	r5, r0
100101a8:	460e      	mov	r6, r1
100101aa:	4690      	mov	r8, r2
100101ac:	461f      	mov	r7, r3
    int err = E_NO_ERROR;
    err = MXC_AES_Init();
100101ae:	f000 f851 	bl	10010254 <MXC_AES_Init>
    if (err) return err; // TODO: check if this is secure against some kind of attack?
100101b2:	4604      	mov	r4, r0
100101b4:	b998      	cbnz	r0, 100101de <AES_encrypt+0x3e>

    // Declare data for an AES request
    mxc_aes_req_t req;
    req.length = MXC_AES_DATA_LENGTH;
100101b6:	2336      	movs	r3, #54	@ 0x36
    req.inputData = inputData;
    req.resultData = encryptedData;
    req.keySize = key;
    req.encryption = MXC_AES_ENCRYPT_EXT_KEY;
100101b8:	f88d 0011 	strb.w	r0, [sp, #17]
    req.inputData = inputData;
100101bc:	e9cd 3801 	strd	r3, r8, [sp, #4]
    req.resultData = encryptedData;
100101c0:	9703      	str	r7, [sp, #12]
    req.keySize = key;
100101c2:	f88d 6010 	strb.w	r6, [sp, #16]

    // TODO: check if asynchronous compatability works, and if we need it.
    if (asynchronous) {
        MXC_AES_EncryptAsync(&req);
100101c6:	a801      	add	r0, sp, #4
    if (asynchronous) {
100101c8:	b16d      	cbz	r5, 100101e6 <AES_encrypt+0x46>
        MXC_AES_EncryptAsync(&req);
100101ca:	f000 f87b 	bl	100102c4 <MXC_AES_EncryptAsync>
        if (err) return err;

        // Blocking Loop?
        while (dma_flag == 0);
100101ce:	4b09      	ldr	r3, [pc, #36]	@ (100101f4 <AES_encrypt+0x54>)
100101d0:	681a      	ldr	r2, [r3, #0]
100101d2:	2a00      	cmp	r2, #0
100101d4:	d0fc      	beq.n	100101d0 <AES_encrypt+0x30>
        dma_flag = 0;
100101d6:	2200      	movs	r2, #0
100101d8:	601a      	str	r2, [r3, #0]
        // Non-asynchronous encrypt function
        err = MXC_AES_Encrypt(&req);
        if (err) return err;
    }
    
    MXC_AES_Shutdown();
100101da:	f000 f84f 	bl	1001027c <MXC_AES_Shutdown>

    return err;
}
100101de:	4620      	mov	r0, r4
100101e0:	b006      	add	sp, #24
100101e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = MXC_AES_Encrypt(&req);
100101e6:	f000 f861 	bl	100102ac <MXC_AES_Encrypt>
        if (err) return err;
100101ea:	2800      	cmp	r0, #0
100101ec:	d0f5      	beq.n	100101da <AES_encrypt+0x3a>
100101ee:	4604      	mov	r4, r0
100101f0:	e7f5      	b.n	100101de <AES_encrypt+0x3e>
100101f2:	bf00      	nop
100101f4:	20000c1c 	.word	0x20000c1c

100101f8 <AES_decrypt>:

int AES_decrypt(int asynchronous, mxc_aes_keys_t key, mxc_aes_enc_type_t key_method, uint32_t* inputData, uint32_t* decryptedData) {
100101f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100101fc:	b086      	sub	sp, #24
100101fe:	4605      	mov	r5, r0
10010200:	460f      	mov	r7, r1
10010202:	4616      	mov	r6, r2
10010204:	4698      	mov	r8, r3
    int err = E_NO_ERROR;
    err = MXC_AES_Init();
10010206:	f000 f825 	bl	10010254 <MXC_AES_Init>
    if (err) return err; // TODO: check if this is secure against some kind of attack?
1001020a:	4604      	mov	r4, r0
1001020c:	b9a8      	cbnz	r0, 1001023a <AES_decrypt+0x42>

    // Declare data for an AES request
    mxc_aes_req_t req;
    req.length = MXC_AES_DATA_LENGTH;
1001020e:	2336      	movs	r3, #54	@ 0x36
    req.inputData = inputData;
10010210:	e9cd 3801 	strd	r3, r8, [sp, #4]
    req.resultData = decryptedData;
10010214:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10010216:	9303      	str	r3, [sp, #12]
    req.keySize = key;
10010218:	f88d 7010 	strb.w	r7, [sp, #16]
    req.encryption = key_method; // From param, must tell if decryption is done via ext. or internal key.
1001021c:	f88d 6011 	strb.w	r6, [sp, #17]

    if (asynchronous) {
        err = MXC_AES_DecryptAsync(&req);
10010220:	a801      	add	r0, sp, #4
    if (asynchronous) {
10010222:	b175      	cbz	r5, 10010242 <AES_decrypt+0x4a>
        err = MXC_AES_DecryptAsync(&req);
10010224:	f000 f854 	bl	100102d0 <MXC_AES_DecryptAsync>
        if (err) return err;
10010228:	b978      	cbnz	r0, 1001024a <AES_decrypt+0x52>

        // Blocking Loop
        while (dma_flag == 0) {}
1001022a:	4b09      	ldr	r3, [pc, #36]	@ (10010250 <AES_decrypt+0x58>)
1001022c:	681a      	ldr	r2, [r3, #0]
1001022e:	2a00      	cmp	r2, #0
10010230:	d0fc      	beq.n	1001022c <AES_decrypt+0x34>

        dma_flag = 0;
10010232:	2200      	movs	r2, #0
10010234:	601a      	str	r2, [r3, #0]
    } else {
        err = MXC_AES_Decrypt(&req);
        if (err) return err;
    }

    MXC_AES_Shutdown();
10010236:	f000 f821 	bl	1001027c <MXC_AES_Shutdown>
    return err;
1001023a:	4620      	mov	r0, r4
1001023c:	b006      	add	sp, #24
1001023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = MXC_AES_Decrypt(&req);
10010242:	f000 f839 	bl	100102b8 <MXC_AES_Decrypt>
        if (err) return err;
10010246:	2800      	cmp	r0, #0
10010248:	d0f5      	beq.n	10010236 <AES_decrypt+0x3e>
1001024a:	4604      	mov	r4, r0
1001024c:	e7f5      	b.n	1001023a <AES_decrypt+0x42>
1001024e:	bf00      	nop
10010250:	20000c1c 	.word	0x20000c1c

10010254 <MXC_AES_Init>:
/* ************************************************************************* */
/* Global Control/Configuration functions                                    */
/* ************************************************************************* */

int MXC_AES_Init(void)
{
10010254:	b508      	push	{r3, lr}
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_AES);
10010256:	202f      	movs	r0, #47	@ 0x2f
10010258:	f003 fc36 	bl	10013ac8 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TRNG);
1001025c:	2022      	movs	r0, #34	@ 0x22
1001025e:	f003 fc33 	bl	10013ac8 <MXC_SYS_ClockEnable>

    return MXC_AES_RevB_Init((mxc_aes_revb_regs_t *)MXC_AES);
}
10010262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return MXC_AES_RevB_Init((mxc_aes_revb_regs_t *)MXC_AES);
10010266:	4801      	ldr	r0, [pc, #4]	@ (1001026c <MXC_AES_Init+0x18>)
10010268:	f000 b854 	b.w	10010314 <MXC_AES_RevB_Init>
1001026c:	40007400 	.word	0x40007400

10010270 <MXC_AES_IsBusy>:
    MXC_AES_RevB_DisableInt((mxc_aes_revb_regs_t *)MXC_AES, interrupt);
}

int MXC_AES_IsBusy(void)
{
    return MXC_AES_RevB_IsBusy((mxc_aes_revb_regs_t *)MXC_AES);
10010270:	4801      	ldr	r0, [pc, #4]	@ (10010278 <MXC_AES_IsBusy+0x8>)
10010272:	f000 b847 	b.w	10010304 <MXC_AES_RevB_IsBusy>
10010276:	bf00      	nop
10010278:	40007400 	.word	0x40007400

1001027c <MXC_AES_Shutdown>:
}

int MXC_AES_Shutdown(void)
{
1001027c:	b510      	push	{r4, lr}
    int error = MXC_AES_RevB_Shutdown((mxc_aes_revb_regs_t *)MXC_AES);
1001027e:	4804      	ldr	r0, [pc, #16]	@ (10010290 <MXC_AES_Shutdown+0x14>)
10010280:	f000 f877 	bl	10010372 <MXC_AES_RevB_Shutdown>
10010284:	4604      	mov	r4, r0

    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_AES);
10010286:	202f      	movs	r0, #47	@ 0x2f
10010288:	f003 fbfe 	bl	10013a88 <MXC_SYS_ClockDisable>

    return error;
}
1001028c:	4620      	mov	r0, r4
1001028e:	bd10      	pop	{r4, pc}
10010290:	40007400 	.word	0x40007400

10010294 <MXC_AES_Start>:
    MXC_AES_RevB_FlushOutputFIFO((mxc_aes_revb_regs_t *)MXC_AES);
}

void MXC_AES_Start(void)
{
    MXC_AES_RevB_Start((mxc_aes_revb_regs_t *)MXC_AES);
10010294:	4801      	ldr	r0, [pc, #4]	@ (1001029c <MXC_AES_Start+0x8>)
10010296:	f000 b87a 	b.w	1001038e <MXC_AES_RevB_Start>
1001029a:	bf00      	nop
1001029c:	40007400 	.word	0x40007400

100102a0 <MXC_AES_Generic>:
{
    MXC_AES_RevB_ClearFlags((mxc_aes_revb_regs_t *)MXC_AES, flags);
}

int MXC_AES_Generic(mxc_aes_req_t *req)
{
100102a0:	4601      	mov	r1, r0
    return MXC_AES_RevB_Generic((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
100102a2:	4801      	ldr	r0, [pc, #4]	@ (100102a8 <MXC_AES_Generic+0x8>)
100102a4:	f000 b87e 	b.w	100103a4 <MXC_AES_RevB_Generic>
100102a8:	40007400 	.word	0x40007400

100102ac <MXC_AES_Encrypt>:
}

int MXC_AES_Encrypt(mxc_aes_req_t *req)
{
100102ac:	4601      	mov	r1, r0
    return MXC_AES_RevB_Encrypt((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
100102ae:	4801      	ldr	r0, [pc, #4]	@ (100102b4 <MXC_AES_Encrypt+0x8>)
100102b0:	f000 b8f9 	b.w	100104a6 <MXC_AES_RevB_Encrypt>
100102b4:	40007400 	.word	0x40007400

100102b8 <MXC_AES_Decrypt>:
}

int MXC_AES_Decrypt(mxc_aes_req_t *req)
{
100102b8:	4601      	mov	r1, r0
    return MXC_AES_RevB_Decrypt((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
100102ba:	4801      	ldr	r0, [pc, #4]	@ (100102c0 <MXC_AES_Decrypt+0x8>)
100102bc:	f000 b8f5 	b.w	100104aa <MXC_AES_RevB_Decrypt>
100102c0:	40007400 	.word	0x40007400

100102c4 <MXC_AES_EncryptAsync>:
    return MXC_AES_RevB_GenericAsync((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req,
                                     enc);
}

int MXC_AES_EncryptAsync(mxc_aes_req_t *req)
{
100102c4:	4601      	mov	r1, r0
    return MXC_AES_RevB_EncryptAsync((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
100102c6:	4801      	ldr	r0, [pc, #4]	@ (100102cc <MXC_AES_EncryptAsync+0x8>)
100102c8:	f000 b9ee 	b.w	100106a8 <MXC_AES_RevB_EncryptAsync>
100102cc:	40007400 	.word	0x40007400

100102d0 <MXC_AES_DecryptAsync>:
}

int MXC_AES_DecryptAsync(mxc_aes_req_t *req)
{
100102d0:	4601      	mov	r1, r0
    return MXC_AES_RevB_DecryptAsync((mxc_aes_revb_regs_t *)MXC_AES, (mxc_aes_revb_req_t *)req);
100102d2:	4801      	ldr	r0, [pc, #4]	@ (100102d8 <MXC_AES_DecryptAsync+0x8>)
100102d4:	f000 b9eb 	b.w	100106ae <MXC_AES_RevB_DecryptAsync>
100102d8:	40007400 	.word	0x40007400

100102dc <MXC_AES_SetExtKey>:
}

void MXC_AES_SetExtKey(const void *key, mxc_aes_keys_t len)
{
100102dc:	460a      	mov	r2, r1
    MXC_AES_RevB_SetExtKey((mxc_aeskeys_revb_regs_t *)MXC_AESKEYS, key, len);
100102de:	4601      	mov	r1, r0
100102e0:	4801      	ldr	r0, [pc, #4]	@ (100102e8 <MXC_AES_SetExtKey+0xc>)
100102e2:	f000 b9e7 	b.w	100106b4 <MXC_AES_RevB_SetExtKey>
100102e6:	bf00      	nop
100102e8:	40007800 	.word	0x40007800

100102ec <memcpy32r>:

/* Prevent GCC from optimimzing this function to memcpy */
static void __attribute__((optimize("no-tree-loop-distribute-patterns")))
memcpy32r(uint32_t *dst, const uint32_t *src, unsigned int len)
{
    uint32_t *dstr = dst + (len / 4) - 1;
100102ec:	1f13      	subs	r3, r2, #4
100102ee:	4418      	add	r0, r3
100102f0:	3904      	subs	r1, #4
100102f2:	1a12      	subs	r2, r2, r0
    while (len) {
        *dstr = SWAP_BYTES(*src);
100102f4:	f851 3f04 	ldr.w	r3, [r1, #4]!
100102f8:	ba1b      	rev	r3, r3
100102fa:	f840 3904 	str.w	r3, [r0], #-4
    while (len) {
100102fe:	42d0      	cmn	r0, r2
10010300:	d1f8      	bne.n	100102f4 <memcpy32r+0x8>
        dstr--;
        src++;
        len -= 4;
    }
}
10010302:	4770      	bx	lr

10010304 <MXC_AES_RevB_IsBusy>:
    return E_NO_ERROR;
}

int MXC_AES_RevB_IsBusy(mxc_aes_revb_regs_t *aes)
{
    if (aes->status & MXC_F_AES_REVB_STATUS_BUSY) {
10010304:	6843      	ldr	r3, [r0, #4]
        return E_BUSY;
    }

    return E_NO_ERROR;
10010306:	f013 0f01 	tst.w	r3, #1
}
1001030a:	bf14      	ite	ne
1001030c:	f06f 0005 	mvnne.w	r0, #5
10010310:	2000      	moveq	r0, #0
10010312:	4770      	bx	lr

10010314 <MXC_AES_RevB_Init>:
{
10010314:	b508      	push	{r3, lr}
    aes->ctrl = 0x00;
10010316:	2300      	movs	r3, #0
{
10010318:	4602      	mov	r2, r0
    aes->ctrl = 0x00;
1001031a:	6003      	str	r3, [r0, #0]
    while (MXC_AES_RevB_IsBusy(aes) != E_NO_ERROR) {}
1001031c:	4610      	mov	r0, r2
1001031e:	f7ff fff1 	bl	10010304 <MXC_AES_RevB_IsBusy>
10010322:	2800      	cmp	r0, #0
10010324:	d1fa      	bne.n	1001031c <MXC_AES_RevB_Init+0x8>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_EN;
10010326:	6813      	ldr	r3, [r2, #0]
10010328:	f043 0301 	orr.w	r3, r3, #1
1001032c:	6013      	str	r3, [r2, #0]
}
1001032e:	bd08      	pop	{r3, pc}

10010330 <MXC_AES_RevB_SetKeySize>:

void MXC_AES_RevB_SetKeySize(mxc_aes_revb_regs_t *aes, mxc_aes_revb_keys_t key)
{
10010330:	b538      	push	{r3, r4, r5, lr}
10010332:	4605      	mov	r5, r0
10010334:	460c      	mov	r4, r1
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
10010336:	f7ff ff9b 	bl	10010270 <MXC_AES_IsBusy>
1001033a:	2800      	cmp	r0, #0
1001033c:	d1fb      	bne.n	10010336 <MXC_AES_RevB_SetKeySize+0x6>
    aes->ctrl |= key;
1001033e:	682b      	ldr	r3, [r5, #0]
10010340:	431c      	orrs	r4, r3
10010342:	602c      	str	r4, [r5, #0]
}
10010344:	bd38      	pop	{r3, r4, r5, pc}

10010346 <MXC_AES_RevB_FlushInputFIFO>:
{
    return (aes->ctrl & MXC_F_AES_REVB_CTRL_KEY_SIZE);
}

void MXC_AES_RevB_FlushInputFIFO(mxc_aes_revb_regs_t *aes)
{
10010346:	b510      	push	{r4, lr}
10010348:	4604      	mov	r4, r0
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
1001034a:	f7ff ff91 	bl	10010270 <MXC_AES_IsBusy>
1001034e:	2800      	cmp	r0, #0
10010350:	d1fb      	bne.n	1001034a <MXC_AES_RevB_FlushInputFIFO+0x4>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_INPUT_FLUSH;
10010352:	6823      	ldr	r3, [r4, #0]
10010354:	f043 0310 	orr.w	r3, r3, #16
10010358:	6023      	str	r3, [r4, #0]
}
1001035a:	bd10      	pop	{r4, pc}

1001035c <MXC_AES_RevB_FlushOutputFIFO>:

void MXC_AES_RevB_FlushOutputFIFO(mxc_aes_revb_regs_t *aes)
{
1001035c:	b510      	push	{r4, lr}
1001035e:	4604      	mov	r4, r0
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
10010360:	f7ff ff86 	bl	10010270 <MXC_AES_IsBusy>
10010364:	2800      	cmp	r0, #0
10010366:	d1fb      	bne.n	10010360 <MXC_AES_RevB_FlushOutputFIFO+0x4>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_OUTPUT_FLUSH;
10010368:	6823      	ldr	r3, [r4, #0]
1001036a:	f043 0320 	orr.w	r3, r3, #32
1001036e:	6023      	str	r3, [r4, #0]
}
10010370:	bd10      	pop	{r4, pc}

10010372 <MXC_AES_RevB_Shutdown>:
{
10010372:	b510      	push	{r4, lr}
10010374:	4604      	mov	r4, r0
    MXC_AES_RevB_FlushInputFIFO(aes);
10010376:	f7ff ffe6 	bl	10010346 <MXC_AES_RevB_FlushInputFIFO>
    MXC_AES_RevB_FlushOutputFIFO(aes);
1001037a:	4620      	mov	r0, r4
1001037c:	f7ff ffee 	bl	1001035c <MXC_AES_RevB_FlushOutputFIFO>
    while (MXC_AES_RevB_IsBusy(aes) != E_NO_ERROR) {}
10010380:	4620      	mov	r0, r4
10010382:	f7ff ffbf 	bl	10010304 <MXC_AES_RevB_IsBusy>
10010386:	2800      	cmp	r0, #0
10010388:	d1fa      	bne.n	10010380 <MXC_AES_RevB_Shutdown+0xe>
    aes->ctrl = 0x00;
1001038a:	6020      	str	r0, [r4, #0]
}
1001038c:	bd10      	pop	{r4, pc}

1001038e <MXC_AES_RevB_Start>:

void MXC_AES_RevB_Start(mxc_aes_revb_regs_t *aes)
{
1001038e:	b510      	push	{r4, lr}
10010390:	4604      	mov	r4, r0
    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
10010392:	f7ff ff6d 	bl	10010270 <MXC_AES_IsBusy>
10010396:	2800      	cmp	r0, #0
10010398:	d1fb      	bne.n	10010392 <MXC_AES_RevB_Start+0x4>
    aes->ctrl |= MXC_F_AES_REVB_CTRL_START;
1001039a:	6823      	ldr	r3, [r4, #0]
1001039c:	f043 0308 	orr.w	r3, r3, #8
100103a0:	6023      	str	r3, [r4, #0]
}
100103a2:	bd10      	pop	{r4, pc}

100103a4 <MXC_AES_RevB_Generic>:
    aes->intfl = (flags & (MXC_F_AES_REVB_INTFL_DONE | MXC_F_AES_REVB_INTFL_KEY_CHANGE |
                           MXC_F_AES_REVB_INTFL_KEY_ZERO | MXC_F_AES_REVB_INTFL_OV));
}

int MXC_AES_RevB_Generic(mxc_aes_revb_regs_t *aes, mxc_aes_revb_req_t *req)
{
100103a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100103a6:	4604      	mov	r4, r0
    int i;
    int remain;

    if (req == NULL) {
100103a8:	460d      	mov	r5, r1
100103aa:	2900      	cmp	r1, #0
100103ac:	d075      	beq.n	1001049a <MXC_AES_RevB_Generic+0xf6>
        return E_NULL_PTR;
    }

    if (req->inputData == NULL || req->resultData == NULL) {
100103ae:	684b      	ldr	r3, [r1, #4]
100103b0:	2b00      	cmp	r3, #0
100103b2:	d072      	beq.n	1001049a <MXC_AES_RevB_Generic+0xf6>
100103b4:	688b      	ldr	r3, [r1, #8]
100103b6:	2b00      	cmp	r3, #0
100103b8:	d06f      	beq.n	1001049a <MXC_AES_RevB_Generic+0xf6>
        return E_NULL_PTR;
    }

    if (req->length == 0) {
100103ba:	680e      	ldr	r6, [r1, #0]
100103bc:	2e00      	cmp	r6, #0
100103be:	d06f      	beq.n	100104a0 <MXC_AES_RevB_Generic+0xfc>
        return E_BAD_PARAM;
    }

    remain = req->length;

    MXC_AES_RevB_FlushInputFIFO(aes);
100103c0:	f7ff ffc1 	bl	10010346 <MXC_AES_RevB_FlushInputFIFO>
    MXC_AES_RevB_FlushOutputFIFO(aes);
100103c4:	4620      	mov	r0, r4
100103c6:	f7ff ffc9 	bl	1001035c <MXC_AES_RevB_FlushOutputFIFO>

    MXC_AES_RevB_SetKeySize(aes, req->keySize);
100103ca:	7b29      	ldrb	r1, [r5, #12]
100103cc:	4620      	mov	r0, r4
100103ce:	f7ff ffaf 	bl	10010330 <MXC_AES_RevB_SetKeySize>

    while (MXC_AES_IsBusy() != E_NO_ERROR) {}
100103d2:	f7ff ff4d 	bl	10010270 <MXC_AES_IsBusy>
100103d6:	2800      	cmp	r0, #0
100103d8:	d1fb      	bne.n	100103d2 <MXC_AES_RevB_Generic+0x2e>

    MXC_SETFIELD(aes->ctrl, MXC_F_AES_REVB_CTRL_TYPE,
100103da:	7b6b      	ldrb	r3, [r5, #13]
100103dc:	6822      	ldr	r2, [r4, #0]
100103de:	021b      	lsls	r3, r3, #8
100103e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
100103e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
100103e8:	4313      	orrs	r3, r2
100103ea:	6023      	str	r3, [r4, #0]
                 req->encryption << MXC_F_AES_REVB_CTRL_TYPE_POS);

    while (remain / 4) {
100103ec:	1cf3      	adds	r3, r6, #3
100103ee:	2b06      	cmp	r3, #6
100103f0:	d826      	bhi.n	10010440 <MXC_AES_RevB_Generic+0x9c>
        req->resultData += 4;

        remain -= 4;
    }

    if (remain % 4) {
100103f2:	07b2      	lsls	r2, r6, #30
100103f4:	d023      	beq.n	1001043e <MXC_AES_RevB_Generic+0x9a>
100103f6:	ea4f 0c86 	mov.w	ip, r6, lsl #2
        for (i = 0; i < remain; i++) {
            aes->fifo = SWAP_BYTES(req->inputData[remain - 1 - i]);
100103fa:	686b      	ldr	r3, [r5, #4]
100103fc:	4661      	mov	r1, ip
        for (i = 0; i < remain; i++) {
100103fe:	2200      	movs	r2, #0
10010400:	42b2      	cmp	r2, r6
10010402:	db44      	blt.n	1001048e <MXC_AES_RevB_Generic+0xea>
        }
        req->inputData += remain;
10010404:	4463      	add	r3, ip
10010406:	606b      	str	r3, [r5, #4]

        // Pad last block with 0's
        for (i = remain; i < 4; i++) {
            aes->fifo = 0;
10010408:	2300      	movs	r3, #0
        for (i = remain; i < 4; i++) {
1001040a:	3601      	adds	r6, #1
1001040c:	2e04      	cmp	r6, #4
            aes->fifo = 0;
1001040e:	6123      	str	r3, [r4, #16]
        for (i = remain; i < 4; i++) {
10010410:	d1fb      	bne.n	1001040a <MXC_AES_RevB_Generic+0x66>
        }

        while (!(aes->intfl & MXC_F_AES_REVB_INTFL_DONE)) {}
10010412:	68a3      	ldr	r3, [r4, #8]
10010414:	07db      	lsls	r3, r3, #31
10010416:	d5fc      	bpl.n	10010412 <MXC_AES_RevB_Generic+0x6e>
        aes->intfl |= MXC_F_AES_REVB_INTFL_DONE;
10010418:	68a3      	ldr	r3, [r4, #8]
1001041a:	f043 0301 	orr.w	r3, r3, #1
1001041e:	60a3      	str	r3, [r4, #8]

        for (i = 0; i < 4; i++) {
            uint32_t tmp = aes->fifo;
10010420:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10010422:	68ab      	ldr	r3, [r5, #8]
10010424:	ba12      	rev	r2, r2
10010426:	60da      	str	r2, [r3, #12]
            uint32_t tmp = aes->fifo;
10010428:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
1001042a:	ba12      	rev	r2, r2
1001042c:	609a      	str	r2, [r3, #8]
            uint32_t tmp = aes->fifo;
1001042e:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10010430:	ba12      	rev	r2, r2
10010432:	605a      	str	r2, [r3, #4]
            uint32_t tmp = aes->fifo;
10010434:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10010436:	ba12      	rev	r2, r2
10010438:	f843 2b10 	str.w	r2, [r3], #16
        }
        req->resultData += 4;
1001043c:	60ab      	str	r3, [r5, #8]
    }
    return E_NO_ERROR;
}
1001043e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            aes->fifo = SWAP_BYTES(req->inputData[3 - i]);
10010440:	686b      	ldr	r3, [r5, #4]
10010442:	68da      	ldr	r2, [r3, #12]
10010444:	ba12      	rev	r2, r2
10010446:	6122      	str	r2, [r4, #16]
10010448:	689a      	ldr	r2, [r3, #8]
1001044a:	ba12      	rev	r2, r2
1001044c:	6122      	str	r2, [r4, #16]
1001044e:	685a      	ldr	r2, [r3, #4]
10010450:	ba12      	rev	r2, r2
10010452:	6122      	str	r2, [r4, #16]
10010454:	f853 2b10 	ldr.w	r2, [r3], #16
10010458:	ba12      	rev	r2, r2
1001045a:	6122      	str	r2, [r4, #16]
        req->inputData += 4;
1001045c:	606b      	str	r3, [r5, #4]
        while (!(aes->intfl & MXC_F_AES_REVB_INTFL_DONE)) {}
1001045e:	68a3      	ldr	r3, [r4, #8]
10010460:	07d9      	lsls	r1, r3, #31
10010462:	d5fc      	bpl.n	1001045e <MXC_AES_RevB_Generic+0xba>
        aes->intfl |= MXC_F_AES_REVB_INTFL_DONE;
10010464:	68a3      	ldr	r3, [r4, #8]
10010466:	f043 0301 	orr.w	r3, r3, #1
1001046a:	60a3      	str	r3, [r4, #8]
            uint32_t tmp = aes->fifo;
1001046c:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
1001046e:	68ab      	ldr	r3, [r5, #8]
10010470:	ba12      	rev	r2, r2
10010472:	60da      	str	r2, [r3, #12]
            uint32_t tmp = aes->fifo;
10010474:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10010476:	ba12      	rev	r2, r2
10010478:	609a      	str	r2, [r3, #8]
            uint32_t tmp = aes->fifo;
1001047a:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
1001047c:	ba12      	rev	r2, r2
1001047e:	605a      	str	r2, [r3, #4]
            uint32_t tmp = aes->fifo;
10010480:	6922      	ldr	r2, [r4, #16]
            req->resultData[3 - i] = SWAP_BYTES(tmp);
10010482:	ba12      	rev	r2, r2
10010484:	f843 2b10 	str.w	r2, [r3], #16
        remain -= 4;
10010488:	3e04      	subs	r6, #4
        req->resultData += 4;
1001048a:	60ab      	str	r3, [r5, #8]
        remain -= 4;
1001048c:	e7ae      	b.n	100103ec <MXC_AES_RevB_Generic+0x48>
        for (i = 0; i < remain; i++) {
1001048e:	3904      	subs	r1, #4
10010490:	3201      	adds	r2, #1
10010492:	585f      	ldr	r7, [r3, r1]
10010494:	ba3f      	rev	r7, r7
            aes->fifo = SWAP_BYTES(req->inputData[remain - 1 - i]);
10010496:	6127      	str	r7, [r4, #16]
        for (i = 0; i < remain; i++) {
10010498:	e7b2      	b.n	10010400 <MXC_AES_RevB_Generic+0x5c>
        return E_NULL_PTR;
1001049a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001049e:	e7ce      	b.n	1001043e <MXC_AES_RevB_Generic+0x9a>
        return E_BAD_PARAM;
100104a0:	f06f 0002 	mvn.w	r0, #2
100104a4:	e7cb      	b.n	1001043e <MXC_AES_RevB_Generic+0x9a>

100104a6 <MXC_AES_RevB_Encrypt>:

int MXC_AES_RevB_Encrypt(mxc_aes_revb_regs_t *aes, mxc_aes_revb_req_t *req)
{
    return MXC_AES_RevB_Generic(aes, req);
100104a6:	f7ff bf7d 	b.w	100103a4 <MXC_AES_RevB_Generic>

100104aa <MXC_AES_RevB_Decrypt>:
}

int MXC_AES_RevB_Decrypt(mxc_aes_revb_regs_t *aes, mxc_aes_revb_req_t *req)
100104aa:	f7ff bf7b 	b.w	100103a4 <MXC_AES_RevB_Generic>
	...

100104b0 <MXC_AES_RevB_TXDMAConfig>:
{
    return MXC_AES_RevB_Generic(aes, req);
}

int MXC_AES_RevB_TXDMAConfig(void *src_addr, int len)
{
100104b0:	b570      	push	{r4, r5, r6, lr}
100104b2:	460d      	mov	r5, r1
100104b4:	b08c      	sub	sp, #48	@ 0x30
    uint8_t channel;
    mxc_dma_config_t config;
    mxc_dma_srcdst_t srcdst;

    if (src_addr == NULL) {
100104b6:	4606      	mov	r6, r0
100104b8:	2800      	cmp	r0, #0
100104ba:	d036      	beq.n	1001052a <MXC_AES_RevB_TXDMAConfig+0x7a>
        return E_NULL_PTR;
    }

    if (len == 0) {
100104bc:	2900      	cmp	r1, #0
100104be:	d037      	beq.n	10010530 <MXC_AES_RevB_TXDMAConfig+0x80>
        return E_BAD_PARAM;
    }

    MXC_DMA_Init();
100104c0:	f003 fb98 	bl	10013bf4 <MXC_DMA_Init>

    channel = MXC_DMA_AcquireChannel();
100104c4:	f003 fbaa 	bl	10013c1c <MXC_DMA_AcquireChannel>
    dma_state.channelTX = channel;
100104c8:	4b1b      	ldr	r3, [pc, #108]	@ (10010538 <MXC_AES_RevB_TXDMAConfig+0x88>)
    config.ch = channel;

    config.srcwd = MXC_DMA_WIDTH_WORD;
    config.dstwd = MXC_DMA_WIDTH_WORD;

    config.srcinc_en = 1;
100104ca:	491c      	ldr	r1, [pc, #112]	@ (1001053c <MXC_AES_RevB_TXDMAConfig+0x8c>)
    channel = MXC_DMA_AcquireChannel();
100104cc:	7098      	strb	r0, [r3, #2]
    config.dstinc_en = 0;

    srcdst.ch = channel;
    srcdst.source = src_addr;

    if (dma_state.enc == 1) {
100104ce:	781b      	ldrb	r3, [r3, #0]
    srcdst.source = src_addr;
100104d0:	9609      	str	r6, [sp, #36]	@ 0x24
    config.srcinc_en = 1;
100104d2:	2201      	movs	r2, #1
100104d4:	b2c4      	uxtb	r4, r0
100104d6:	e9cd 1205 	strd	r1, r2, [sp, #20]
    if (dma_state.enc == 1) {
100104da:	2b01      	cmp	r3, #1
    config.dstinc_en = 0;
100104dc:	f04f 0200 	mov.w	r2, #0
    srcdst.ch = channel;
100104e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
    config.ch = channel;
100104e4:	9404      	str	r4, [sp, #16]
    if (dma_state.enc == 1) {
100104e6:	d01e      	beq.n	10010526 <MXC_AES_RevB_TXDMAConfig+0x76>
        srcdst.len = 4;
    } else if (len > 4) {
100104e8:	2d04      	cmp	r5, #4
100104ea:	bfa8      	it	ge
100104ec:	2504      	movge	r5, #4
        srcdst.len = 4;
100104ee:	950b      	str	r5, [sp, #44]	@ 0x2c
        srcdst.len = 4;
    } else {
        srcdst.len = len;
    }

    MXC_DMA_ConfigChannel(config, srcdst);
100104f0:	ab0c      	add	r3, sp, #48	@ 0x30
100104f2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
100104f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
100104fa:	ab04      	add	r3, sp, #16
100104fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
100104fe:	f003 fb95 	bl	10013c2c <MXC_DMA_ConfigChannel>
    MXC_DMA_SetCallback(channel, MXC_AES_RevB_DMACallback);
10010502:	490f      	ldr	r1, [pc, #60]	@ (10010540 <MXC_AES_RevB_TXDMAConfig+0x90>)
10010504:	4620      	mov	r0, r4
10010506:	f003 fb9c 	bl	10013c42 <MXC_DMA_SetCallback>

    MXC_DMA_EnableInt(channel);
1001050a:	4620      	mov	r0, r4
1001050c:	f003 fba0 	bl	10013c50 <MXC_DMA_EnableInt>
    MXC_DMA_Start(channel);
10010510:	4620      	mov	r0, r4
10010512:	f003 fba3 	bl	10013c5c <MXC_DMA_Start>
    //MXC_DMA->ch[channel].ctrl |= MXC_F_DMA_CTRL_CTZ_IE;
    MXC_DMA_SetChannelInterruptEn(channel, 0, 1);
10010516:	2201      	movs	r2, #1
10010518:	2100      	movs	r1, #0
1001051a:	4620      	mov	r0, r4
1001051c:	f003 fb93 	bl	10013c46 <MXC_DMA_SetChannelInterruptEn>

    return E_NO_ERROR;
10010520:	2000      	movs	r0, #0
}
10010522:	b00c      	add	sp, #48	@ 0x30
10010524:	bd70      	pop	{r4, r5, r6, pc}
10010526:	2504      	movs	r5, #4
10010528:	e7e1      	b.n	100104ee <MXC_AES_RevB_TXDMAConfig+0x3e>
        return E_NULL_PTR;
1001052a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001052e:	e7f8      	b.n	10010522 <MXC_AES_RevB_TXDMAConfig+0x72>
        return E_BAD_PARAM;
10010530:	f06f 0002 	mvn.w	r0, #2
10010534:	e7f5      	b.n	10010522 <MXC_AES_RevB_TXDMAConfig+0x72>
10010536:	bf00      	nop
10010538:	20000c20 	.word	0x20000c20
1001053c:	02020300 	.word	0x02020300
10010540:	100105d5 	.word	0x100105d5

10010544 <MXC_AES_RevB_RXDMAConfig>:

int MXC_AES_RevB_RXDMAConfig(void *dest_addr, int len)
{
10010544:	b570      	push	{r4, r5, r6, lr}
10010546:	460d      	mov	r5, r1
10010548:	b08c      	sub	sp, #48	@ 0x30
    if (dest_addr == NULL) {
1001054a:	4606      	mov	r6, r0
1001054c:	2800      	cmp	r0, #0
1001054e:	d034      	beq.n	100105ba <MXC_AES_RevB_RXDMAConfig+0x76>
        return E_NULL_PTR;
    }

    if (len == 0) {
10010550:	2900      	cmp	r1, #0
10010552:	d035      	beq.n	100105c0 <MXC_AES_RevB_RXDMAConfig+0x7c>

    uint8_t channel;
    mxc_dma_config_t config;
    mxc_dma_srcdst_t srcdst;

    MXC_DMA_Init();
10010554:	f003 fb4e 	bl	10013bf4 <MXC_DMA_Init>

    channel = MXC_DMA_AcquireChannel();
10010558:	f003 fb60 	bl	10013c1c <MXC_DMA_AcquireChannel>
    dma_state.channelRX = channel;
1001055c:	4b1a      	ldr	r3, [pc, #104]	@ (100105c8 <MXC_AES_RevB_RXDMAConfig+0x84>)
    config.ch = channel;

    config.srcwd = MXC_DMA_WIDTH_WORD;
    config.dstwd = MXC_DMA_WIDTH_WORD;

    config.srcinc_en = 0;
1001055e:	491b      	ldr	r1, [pc, #108]	@ (100105cc <MXC_AES_RevB_RXDMAConfig+0x88>)
    channel = MXC_DMA_AcquireChannel();
10010560:	7058      	strb	r0, [r3, #1]
    config.srcinc_en = 0;
10010562:	2200      	movs	r2, #0
    config.dstinc_en = 1;

    srcdst.ch = channel;
    srcdst.dest = dest_addr;

    if (dma_state.enc == 0) {
10010564:	781b      	ldrb	r3, [r3, #0]
    srcdst.dest = dest_addr;
10010566:	960a      	str	r6, [sp, #40]	@ 0x28
10010568:	b2c4      	uxtb	r4, r0
    config.srcinc_en = 0;
1001056a:	e9cd 1205 	strd	r1, r2, [sp, #20]
    config.dstinc_en = 1;
1001056e:	2201      	movs	r2, #1
    srcdst.ch = channel;
10010570:	e9cd 2407 	strd	r2, r4, [sp, #28]
    config.ch = channel;
10010574:	9404      	str	r4, [sp, #16]
    if (dma_state.enc == 0) {
10010576:	b1f3      	cbz	r3, 100105b6 <MXC_AES_RevB_RXDMAConfig+0x72>
        srcdst.len = 4;
    } else if (len > 4) {
10010578:	2d04      	cmp	r5, #4
1001057a:	bfa8      	it	ge
1001057c:	2504      	movge	r5, #4
        srcdst.len = 4;
1001057e:	950b      	str	r5, [sp, #44]	@ 0x2c
        srcdst.len = 4;
    } else {
        srcdst.len = len;
    }

    MXC_DMA_ConfigChannel(config, srcdst);
10010580:	ab0c      	add	r3, sp, #48	@ 0x30
10010582:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
10010586:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
1001058a:	ab04      	add	r3, sp, #16
1001058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1001058e:	f003 fb4d 	bl	10013c2c <MXC_DMA_ConfigChannel>
    MXC_DMA_SetCallback(channel, MXC_AES_RevB_DMACallback);
10010592:	490f      	ldr	r1, [pc, #60]	@ (100105d0 <MXC_AES_RevB_RXDMAConfig+0x8c>)
10010594:	4620      	mov	r0, r4
10010596:	f003 fb54 	bl	10013c42 <MXC_DMA_SetCallback>

    MXC_DMA_EnableInt(channel);
1001059a:	4620      	mov	r0, r4
1001059c:	f003 fb58 	bl	10013c50 <MXC_DMA_EnableInt>
    MXC_DMA_Start(channel);
100105a0:	4620      	mov	r0, r4
100105a2:	f003 fb5b 	bl	10013c5c <MXC_DMA_Start>
    //MXC_DMA->ch[channel].ctrl |= MXC_F_DMA_CTRL_CTZ_IE;
    MXC_DMA_SetChannelInterruptEn(channel, 0, 1);
100105a6:	2201      	movs	r2, #1
100105a8:	2100      	movs	r1, #0
100105aa:	4620      	mov	r0, r4
100105ac:	f003 fb4b 	bl	10013c46 <MXC_DMA_SetChannelInterruptEn>

    return E_NO_ERROR;
100105b0:	2000      	movs	r0, #0
}
100105b2:	b00c      	add	sp, #48	@ 0x30
100105b4:	bd70      	pop	{r4, r5, r6, pc}
100105b6:	2504      	movs	r5, #4
100105b8:	e7e1      	b.n	1001057e <MXC_AES_RevB_RXDMAConfig+0x3a>
        return E_NULL_PTR;
100105ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100105be:	e7f8      	b.n	100105b2 <MXC_AES_RevB_RXDMAConfig+0x6e>
        return E_BAD_PARAM;
100105c0:	f06f 0002 	mvn.w	r0, #2
100105c4:	e7f5      	b.n	100105b2 <MXC_AES_RevB_RXDMAConfig+0x6e>
100105c6:	bf00      	nop
100105c8:	20000c20 	.word	0x20000c20
100105cc:	02020100 	.word	0x02020100
100105d0:	100105d5 	.word	0x100105d5

100105d4 <MXC_AES_RevB_DMACallback>:
{
    return MXC_AES_RevB_GenericAsync(aes, req, 1);
}

void MXC_AES_RevB_DMACallback(int ch, int error)
{
100105d4:	b510      	push	{r4, lr}
100105d6:	4603      	mov	r3, r0
    if (error != E_NO_ERROR) {
100105d8:	bb29      	cbnz	r1, 10010626 <MXC_AES_RevB_DMACallback+0x52>
    } else {
        if (dma_state.channelTX == ch) {
100105da:	4c13      	ldr	r4, [pc, #76]	@ (10010628 <MXC_AES_RevB_DMACallback+0x54>)
100105dc:	78a2      	ldrb	r2, [r4, #2]
100105de:	4282      	cmp	r2, r0
100105e0:	d10c      	bne.n	100105fc <MXC_AES_RevB_DMACallback+0x28>
            MXC_DMA_ReleaseChannel(dma_state.channelTX);
100105e2:	f003 fb21 	bl	10013c28 <MXC_DMA_ReleaseChannel>
            if (dma_state.remain < 4) {
100105e6:	6863      	ldr	r3, [r4, #4]
100105e8:	2b03      	cmp	r3, #3
100105ea:	d801      	bhi.n	100105f0 <MXC_AES_RevB_DMACallback+0x1c>
                MXC_AES_Start();
100105ec:	f7ff fe52 	bl	10010294 <MXC_AES_Start>
            }
            MXC_AES_RevB_RXDMAConfig(dma_state.outputText, dma_state.remain);
100105f0:	6861      	ldr	r1, [r4, #4]
100105f2:	68e0      	ldr	r0, [r4, #12]
            if (dma_state.remain > 0) {
                MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain);
            }
        }
    }
}
100105f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            MXC_AES_RevB_RXDMAConfig(dma_state.outputText, dma_state.remain);
100105f8:	f7ff bfa4 	b.w	10010544 <MXC_AES_RevB_RXDMAConfig>
        } else if (dma_state.channelRX == ch) {
100105fc:	7860      	ldrb	r0, [r4, #1]
100105fe:	4283      	cmp	r3, r0
10010600:	d111      	bne.n	10010626 <MXC_AES_RevB_DMACallback+0x52>
            if (dma_state.remain > 4) {
10010602:	6863      	ldr	r3, [r4, #4]
10010604:	2b04      	cmp	r3, #4
10010606:	d90a      	bls.n	1001061e <MXC_AES_RevB_DMACallback+0x4a>
                dma_state.remain -= 4;
10010608:	3b04      	subs	r3, #4
1001060a:	6063      	str	r3, [r4, #4]
            MXC_DMA_ReleaseChannel(dma_state.channelRX);
1001060c:	f003 fb0c 	bl	10013c28 <MXC_DMA_ReleaseChannel>
            if (dma_state.remain > 0) {
10010610:	6861      	ldr	r1, [r4, #4]
10010612:	b141      	cbz	r1, 10010626 <MXC_AES_RevB_DMACallback+0x52>
                MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain);
10010614:	68a0      	ldr	r0, [r4, #8]
}
10010616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain);
1001061a:	f7ff bf49 	b.w	100104b0 <MXC_AES_RevB_TXDMAConfig>
            } else if (dma_state.remain > 0) {
1001061e:	2b00      	cmp	r3, #0
10010620:	d0f4      	beq.n	1001060c <MXC_AES_RevB_DMACallback+0x38>
                dma_state.remain = 0;
10010622:	6061      	str	r1, [r4, #4]
10010624:	e7f2      	b.n	1001060c <MXC_AES_RevB_DMACallback+0x38>
}
10010626:	bd10      	pop	{r4, pc}
10010628:	20000c20 	.word	0x20000c20

1001062c <MXC_AES_RevB_GenericAsync>:
{
1001062c:	b570      	push	{r4, r5, r6, lr}
1001062e:	4605      	mov	r5, r0
10010630:	4616      	mov	r6, r2
    if (req == NULL) {
10010632:	460c      	mov	r4, r1
10010634:	2900      	cmp	r1, #0
10010636:	d032      	beq.n	1001069e <MXC_AES_RevB_GenericAsync+0x72>
    if (req->inputData == NULL || req->resultData == NULL) {
10010638:	684b      	ldr	r3, [r1, #4]
1001063a:	2b00      	cmp	r3, #0
1001063c:	d02f      	beq.n	1001069e <MXC_AES_RevB_GenericAsync+0x72>
1001063e:	688b      	ldr	r3, [r1, #8]
10010640:	b36b      	cbz	r3, 1001069e <MXC_AES_RevB_GenericAsync+0x72>
    if (req->length == 0) {
10010642:	680b      	ldr	r3, [r1, #0]
10010644:	b913      	cbnz	r3, 1001064c <MXC_AES_RevB_GenericAsync+0x20>
        return E_BAD_PARAM;
10010646:	f06f 0002 	mvn.w	r0, #2
}
1001064a:	bd70      	pop	{r4, r5, r6, pc}
    MXC_AES_RevB_FlushInputFIFO(aes);
1001064c:	f7ff fe7b 	bl	10010346 <MXC_AES_RevB_FlushInputFIFO>
    MXC_AES_RevB_FlushOutputFIFO(aes);
10010650:	4628      	mov	r0, r5
10010652:	f7ff fe83 	bl	1001035c <MXC_AES_RevB_FlushOutputFIFO>
    MXC_AES_RevB_SetKeySize(aes, req->keySize);
10010656:	7b21      	ldrb	r1, [r4, #12]
10010658:	4628      	mov	r0, r5
1001065a:	f7ff fe69 	bl	10010330 <MXC_AES_RevB_SetKeySize>
    MXC_AES_IsBusy();
1001065e:	f7ff fe07 	bl	10010270 <MXC_AES_IsBusy>
    MXC_SETFIELD(aes->ctrl, MXC_F_AES_REVB_CTRL_TYPE,
10010662:	7b63      	ldrb	r3, [r4, #13]
10010664:	682a      	ldr	r2, [r5, #0]
    dma_state.remain = req->length;
10010666:	6821      	ldr	r1, [r4, #0]
    dma_state.inputText = req->inputData;
10010668:	6860      	ldr	r0, [r4, #4]
    MXC_SETFIELD(aes->ctrl, MXC_F_AES_REVB_CTRL_TYPE,
1001066a:	021b      	lsls	r3, r3, #8
1001066c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
10010670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
10010674:	4313      	orrs	r3, r2
10010676:	602b      	str	r3, [r5, #0]
    dma_state.enc = enc;
10010678:	4b0a      	ldr	r3, [pc, #40]	@ (100106a4 <MXC_AES_RevB_GenericAsync+0x78>)
    dma_state.outputText = req->resultData;
1001067a:	68a2      	ldr	r2, [r4, #8]
    dma_state.enc = enc;
1001067c:	701e      	strb	r6, [r3, #0]
    dma_state.remain = req->length;
1001067e:	6059      	str	r1, [r3, #4]
    dma_state.inputText = req->inputData;
10010680:	6098      	str	r0, [r3, #8]
    dma_state.outputText = req->resultData;
10010682:	60da      	str	r2, [r3, #12]
    aes->ctrl |= MXC_F_AES_REVB_CTRL_DMA_RX_EN; //Enable AES DMA
10010684:	682b      	ldr	r3, [r5, #0]
10010686:	f043 0302 	orr.w	r3, r3, #2
1001068a:	602b      	str	r3, [r5, #0]
    aes->ctrl |= MXC_F_AES_REVB_CTRL_DMA_TX_EN; //Enable AES DMA
1001068c:	682b      	ldr	r3, [r5, #0]
1001068e:	f043 0304 	orr.w	r3, r3, #4
10010692:	602b      	str	r3, [r5, #0]
    if (MXC_AES_RevB_TXDMAConfig(dma_state.inputText, dma_state.remain) != E_NO_ERROR) {
10010694:	f7ff ff0c 	bl	100104b0 <MXC_AES_RevB_TXDMAConfig>
10010698:	2800      	cmp	r0, #0
1001069a:	d0d6      	beq.n	1001064a <MXC_AES_RevB_GenericAsync+0x1e>
1001069c:	e7d3      	b.n	10010646 <MXC_AES_RevB_GenericAsync+0x1a>
        return E_NULL_PTR;
1001069e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100106a2:	e7d2      	b.n	1001064a <MXC_AES_RevB_GenericAsync+0x1e>
100106a4:	20000c20 	.word	0x20000c20

100106a8 <MXC_AES_RevB_EncryptAsync>:
    return MXC_AES_RevB_GenericAsync(aes, req, 0);
100106a8:	2200      	movs	r2, #0
100106aa:	f7ff bfbf 	b.w	1001062c <MXC_AES_RevB_GenericAsync>

100106ae <MXC_AES_RevB_DecryptAsync>:
    return MXC_AES_RevB_GenericAsync(aes, req, 1);
100106ae:	2201      	movs	r2, #1
100106b0:	f7ff bfbc 	b.w	1001062c <MXC_AES_RevB_GenericAsync>

100106b4 <MXC_AES_RevB_SetExtKey>:

void MXC_AES_RevB_SetExtKey(mxc_aeskeys_revb_regs_t *aeskeys, const void *key, mxc_aes_keys_t len)
{
    int numBytes;

    if (len == MXC_AES_128BITS) {
100106b4:	b12a      	cbz	r2, 100106c2 <MXC_AES_RevB_SetExtKey+0xe>
        numBytes = 16;
    } else if (len == MXC_AES_192BITS) {
        numBytes = 24;
100106b6:	2a40      	cmp	r2, #64	@ 0x40
100106b8:	bf14      	ite	ne
100106ba:	2220      	movne	r2, #32
100106bc:	2218      	moveq	r2, #24
    } else {
        numBytes = 32;
    }

    /* TODO: Figure out if this is the correct byte ordering */
    memcpy32r((void *)&(aeskeys->key0), key, numBytes);
100106be:	f7ff be15 	b.w	100102ec <memcpy32r>
        numBytes = 16;
100106c2:	2210      	movs	r2, #16
100106c4:	e7fb      	b.n	100106be <MXC_AES_RevB_SetExtKey+0xa>
	...

100106c8 <uint8_to_uint32>:
    return veruicPjfwe * 60466176 + verulcPjfwe - 89;
}

/********************************* UTILITY FUNCTIONS  **********************************/

void uint8_to_uint32(const uint8_t* uint8_buffer, size_t uint8_buffer_size, uint32_t* uint32_buffer, size_t num_elements) {
100106c8:	b410      	push	{r4}
    // Check if the buffer sizes are compatible
    if (uint8_buffer_size % sizeof(uint32_t) != 0 || uint8_buffer_size / sizeof(uint32_t) != num_elements) {
100106ca:	f011 0403 	ands.w	r4, r1, #3
100106ce:	d102      	bne.n	100106d6 <uint8_to_uint32+0xe>
100106d0:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
100106d4:	d00b      	beq.n	100106ee <uint8_to_uint32+0x26>
        // Handle mismatched buffer sizes
        fprintf(stderr, "Buffer sizes are not compatible\n");
100106d6:	4b08      	ldr	r3, [pc, #32]	@ (100106f8 <uint8_to_uint32+0x30>)
100106d8:	4808      	ldr	r0, [pc, #32]	@ (100106fc <uint8_to_uint32+0x34>)
100106da:	681b      	ldr	r3, [r3, #0]
        // Reinterpret the memory layout of the next set of bytes as a uint32_t value
        uint32_t value = *((const uint32_t*)(uint8_buffer + i * sizeof(uint32_t)));
        // Store the uint32_t value in the uint32_t buffer
        uint32_buffer[i] = value;
    }
}
100106dc:	bc10      	pop	{r4}
        fprintf(stderr, "Buffer sizes are not compatible\n");
100106de:	68d9      	ldr	r1, [r3, #12]
100106e0:	f008 be30 	b.w	10019344 <fputs>
        uint32_t value = *((const uint32_t*)(uint8_buffer + i * sizeof(uint32_t)));
100106e4:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
        uint32_buffer[i] = value;
100106e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    for (size_t i = 0; i < num_elements; i++) {
100106ec:	3401      	adds	r4, #1
100106ee:	42a3      	cmp	r3, r4
100106f0:	d1f8      	bne.n	100106e4 <uint8_to_uint32+0x1c>
}
100106f2:	bc10      	pop	{r4}
100106f4:	4770      	bx	lr
100106f6:	bf00      	nop
100106f8:	200005e0 	.word	0x200005e0
100106fc:	10023f08 	.word	0x10023f08

10010700 <uint32_to_uint8>:

void uint32_to_uint8(const uint32_t* uint32_buffer, size_t num_elements, uint8_t* uint8_buffer, size_t uint8_buffer_size) {
    // Ensure the provided uint8_buffer has enough space
    size_t required_size = num_elements * sizeof(uint32_t);
    if (uint8_buffer_size < required_size) {
10010700:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
void uint32_to_uint8(const uint32_t* uint32_buffer, size_t num_elements, uint8_t* uint8_buffer, size_t uint8_buffer_size) {
10010704:	b4f0      	push	{r4, r5, r6, r7}
    size_t required_size = num_elements * sizeof(uint32_t);
10010706:	ea4f 0581 	mov.w	r5, r1, lsl #2
    if (uint8_buffer_size < required_size) {
1001070a:	d212      	bcs.n	10010732 <uint32_to_uint8+0x32>
        for (size_t j = 0; j < sizeof(uint32_t); j++) {
            // Store each byte of the uint32_t value in the uint8_t buffer
            uint8_buffer[i * sizeof(uint32_t) + j] = (uint8_t)(value >> (j * 8));
        }
    }
}
1001070c:	bcf0      	pop	{r4, r5, r6, r7}
        printf("Error: Insufficient space in uint8_buffer\n");
1001070e:	480a      	ldr	r0, [pc, #40]	@ (10010738 <uint32_to_uint8+0x38>)
10010710:	f008 b9e8 	b.w	10018ae4 <puts>
        uint32_t value = uint32_buffer[i];
10010714:	58c7      	ldr	r7, [r0, r3]
        for (size_t j = 0; j < sizeof(uint32_t); j++) {
10010716:	18d4      	adds	r4, r2, r3
        uint32_t value = uint32_buffer[i];
10010718:	2100      	movs	r1, #0
            uint8_buffer[i * sizeof(uint32_t) + j] = (uint8_t)(value >> (j * 8));
1001071a:	fa27 f601 	lsr.w	r6, r7, r1
        for (size_t j = 0; j < sizeof(uint32_t); j++) {
1001071e:	3108      	adds	r1, #8
10010720:	2920      	cmp	r1, #32
            uint8_buffer[i * sizeof(uint32_t) + j] = (uint8_t)(value >> (j * 8));
10010722:	f804 6b01 	strb.w	r6, [r4], #1
        for (size_t j = 0; j < sizeof(uint32_t); j++) {
10010726:	d1f8      	bne.n	1001071a <uint32_to_uint8+0x1a>
    for (size_t i = 0; i < num_elements; i++) {
10010728:	3304      	adds	r3, #4
1001072a:	429d      	cmp	r5, r3
1001072c:	d1f2      	bne.n	10010714 <uint32_to_uint8+0x14>
}
1001072e:	bcf0      	pop	{r4, r5, r6, r7}
10010730:	4770      	bx	lr
10010732:	2300      	movs	r3, #0
10010734:	e7f9      	b.n	1001072a <uint32_to_uint8+0x2a>
10010736:	bf00      	nop
10010738:	10023f29 	.word	0x10023f29

1001073c <uint8_array_to_uint32>:
    uint32_t value = 0;
    value |= ((uint32_t)byte_array[0] << 24);
    value |= ((uint32_t)byte_array[1] << 16);
    value |= ((uint32_t)byte_array[2] << 8);
    value |= ((uint32_t)byte_array[3]);
    return value;
1001073c:	6800      	ldr	r0, [r0, #0]
}
1001073e:	ba00      	rev	r0, r0
10010740:	4770      	bx	lr

10010742 <uint32_to_uint8_array>:

//buffer conversion function:
void uint32_to_uint8_array(uint32_t value, uint8_t* byte_array) {
    // Ensure the byte_array has space for 4 bytes.
    byte_array[0] = (value >> 24) & 0xFF; // Extracts the first byte.
10010742:	0e03      	lsrs	r3, r0, #24
10010744:	700b      	strb	r3, [r1, #0]
    byte_array[1] = (value >> 16) & 0xFF; // Extracts the second byte.
10010746:	0c03      	lsrs	r3, r0, #16
10010748:	704b      	strb	r3, [r1, #1]
    byte_array[2] = (value >> 8) & 0xFF;  // Extracts the third byte.
1001074a:	0a03      	lsrs	r3, r0, #8
1001074c:	708b      	strb	r3, [r1, #2]
    byte_array[3] = value & 0xFF;         // Extracts the fourth byte.
1001074e:	70c8      	strb	r0, [r1, #3]
}
10010750:	4770      	bx	lr

10010752 <hash_equal>:
 * @param hash2: uint8_t*, uint8_t array representation of hash2
 * 
 * @return bool: true if hash1 == hash2; false otherwise.
 * Check equality of two uint8*t buffers containing hash value
*/
bool hash_equal(uint8_t* hash1, uint8_t* hash2) {
10010752:	b510      	push	{r4, lr}
10010754:	1e43      	subs	r3, r0, #1
10010756:	3901      	subs	r1, #1
10010758:	3003      	adds	r0, #3
    size_t array_size = sizeof(hash1)/sizeof(uint8_t);
    for (int i = 0; i < array_size; i++) {
        if (hash1[i] != hash2[i]) {
1001075a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
1001075e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
10010762:	4294      	cmp	r4, r2
10010764:	d103      	bne.n	1001076e <hash_equal+0x1c>
    for (int i = 0; i < array_size; i++) {
10010766:	4283      	cmp	r3, r0
10010768:	d1f7      	bne.n	1001075a <hash_equal+0x8>
            // Found elements that are not equal, so the arrays are not identical
            return false;
        }
    }
    // Reached the end without finding any differences
    return true;
1001076a:	2001      	movs	r0, #1
}
1001076c:	bd10      	pop	{r4, pc}
            return false;
1001076e:	2000      	movs	r0, #0
10010770:	e7fc      	b.n	1001076c <hash_equal+0x1a>

10010772 <GenerateAndUseRandomID>:
 * @param hash2: uint8_t*, uint8_t array representation of hash2
 * @return uint32_t: a uint32_t type random number.
 * 
 * Generate and return a random number of type uint32_t.
*/
uint32_t GenerateAndUseRandomID(void) {
10010772:	b510      	push	{r4, lr}
    uint32_t randomID;
    TRNG_Init();
10010774:	f002 fcc8 	bl	10013108 <TRNG_Init>
    randomID = TRNG_GenerateRandomID();
10010778:	f002 fcc8 	bl	1001310c <TRNG_GenerateRandomID>
1001077c:	4604      	mov	r4, r0
    TRNG_Shutdown();
1001077e:	f002 fccf 	bl	10013120 <TRNG_Shutdown>

    return randomID;
}
10010782:	4620      	mov	r0, r4
10010784:	bd10      	pop	{r4, pc}
	...

10010788 <attach_key>:
 * 
 * @param command: command_message*, pointer to a command_message struct
 * 
 * Attach hashed authentication key to given command struct object. Assign command->authkey value of hash.  
*/
void attach_key(command_message* command){
10010788:	b530      	push	{r4, r5, lr}
1001078a:	b085      	sub	sp, #20
1001078c:	4604      	mov	r4, r0
    uint8_t hash_out[HASH_SIZE];
    memset(hash_out, 0, HASH_SIZE);
1001078e:	2210      	movs	r2, #16
10010790:	2100      	movs	r1, #0
10010792:	4668      	mov	r0, sp
10010794:	f009 f952 	bl	10019a3c <memset>
    md5hash(KEY, sizeof(KEY), hash_out);
10010798:	466a      	mov	r2, sp
1001079a:	4809      	ldr	r0, [pc, #36]	@ (100107c0 <attach_key+0x38>)
1001079c:	2104      	movs	r1, #4
1001079e:	f002 fa61 	bl	10012c64 <md5hash>
    memcpy(command->authkey, hash_out, HASH_SIZE);
100107a2:	ad04      	add	r5, sp, #16
100107a4:	466a      	mov	r2, sp
100107a6:	1c63      	adds	r3, r4, #1
100107a8:	4614      	mov	r4, r2
100107aa:	cc03      	ldmia	r4!, {r0, r1}
100107ac:	42ac      	cmp	r4, r5
100107ae:	6018      	str	r0, [r3, #0]
100107b0:	6059      	str	r1, [r3, #4]
100107b2:	4622      	mov	r2, r4
100107b4:	f103 0308 	add.w	r3, r3, #8
100107b8:	d1f6      	bne.n	100107a8 <attach_key+0x20>
}
100107ba:	b005      	add	sp, #20
100107bc:	bd30      	pop	{r4, r5, pc}
100107be:	bf00      	nop
100107c0:	20000c30 	.word	0x20000c30

100107c4 <attach_random_num>:
 * @param command: command_message*, pointer to a command_message struct
 * @param addr: i2c_addr_t, address of component 
 * 
 * Attach hashed authentication key to given command struct object. Assign command->authkey value of hash.  
*/
void attach_random_num(command_message* command, i2c_addr_t addr){
100107c4:	b538      	push	{r3, r4, r5, lr}
100107c6:	460c      	mov	r4, r1
100107c8:	4605      	mov	r5, r0
    uint32_t random_num = GenerateAndUseRandomID();
100107ca:	f7ff ffd2 	bl	10010772 <GenerateAndUseRandomID>
    memset(command->random_number, 0, sizeof(command->random_number));
    uint32_to_uint8_array(random_num, command->random_number);
100107ce:	f105 0111 	add.w	r1, r5, #17
100107d2:	f7ff ffb6 	bl	10010742 <uint32_to_uint8_array>
    uint32_t random_num = GenerateAndUseRandomID();
100107d6:	4602      	mov	r2, r0
    addOrUpdate(&dict, addr, random_num);
100107d8:	4621      	mov	r1, r4
100107da:	4802      	ldr	r0, [pc, #8]	@ (100107e4 <attach_random_num+0x20>)
}
100107dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    addOrUpdate(&dict, addr, random_num);
100107e0:	f001 b849 	b.w	10011876 <addOrUpdate>
100107e4:	20000c3c 	.word	0x20000c3c

100107e8 <secure_send>:
 * 
 * Securely send data over I2C. This function is utilized in POST_BOOT functionality.
 * This function must be implemented by your team to align with the security requirements.

*/
int secure_send(uint8_t address, uint8_t* buffer, uint8_t len) {
100107e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100107ec:	4681      	mov	r9, r0
100107ee:	b0c5      	sub	sp, #276	@ 0x114
    initDictionary(&dict);
100107f0:	4850      	ldr	r0, [pc, #320]	@ (10010934 <secure_send+0x14c>)
    
    // Set Maximum Packet Size for Secure Send
    print_debug("Set Maximum Packet Size for Secure Send");
100107f2:	4f51      	ldr	r7, [pc, #324]	@ (10010938 <secure_send+0x150>)
int secure_send(uint8_t address, uint8_t* buffer, uint8_t len) {
100107f4:	4614      	mov	r4, r2
100107f6:	468a      	mov	sl, r1
    initDictionary(&dict);
100107f8:	f001 f83c 	bl	10011874 <initDictionary>
    print_debug("Set Maximum Packet Size for Secure Send");
100107fc:	484f      	ldr	r0, [pc, #316]	@ (1001093c <secure_send+0x154>)
100107fe:	f005 fa45 	bl	10015c8c <printf>
10010802:	484f      	ldr	r0, [pc, #316]	@ (10010940 <secure_send+0x158>)
10010804:	f005 fa42 	bl	10015c8c <printf>
10010808:	484e      	ldr	r0, [pc, #312]	@ (10010944 <secure_send+0x15c>)
1001080a:	f005 fa3f 	bl	10015c8c <printf>
1001080e:	683b      	ldr	r3, [r7, #0]
10010810:	6898      	ldr	r0, [r3, #8]
10010812:	f008 fbdb 	bl	10018fcc <fflush>
    size_t MAX_PACKET_SIZE = MAX_I2C_MESSAGE_LEN - 1;

    // Ensure length of data to send does not exceed limits
    if (len > MAX_PACKET_SIZE - HASH_SIZE - sizeof(uint8_t) - sizeof(uint32_t)) {
10010816:	2cea      	cmp	r4, #234	@ 0xea
10010818:	d911      	bls.n	1001083e <secure_send+0x56>
        print_error("Message too long");
1001081a:	484b      	ldr	r0, [pc, #300]	@ (10010948 <secure_send+0x160>)
1001081c:	f005 fa36 	bl	10015c8c <printf>
10010820:	484a      	ldr	r0, [pc, #296]	@ (1001094c <secure_send+0x164>)
10010822:	f005 fa33 	bl	10015c8c <printf>
10010826:	4847      	ldr	r0, [pc, #284]	@ (10010944 <secure_send+0x15c>)
10010828:	f005 fa30 	bl	10015c8c <printf>
1001082c:	683b      	ldr	r3, [r7, #0]
1001082e:	6898      	ldr	r0, [r3, #8]
10010830:	f008 fbcc 	bl	10018fcc <fflush>
        return ERROR_RETURN;
10010834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    print_debug("Update random number assignment for component");
    addOrUpdate(&dict, address, random_number);

    // Send the packet
    return send_packet(address, MAX_PACKET_SIZE, temp_buffer);
}
10010838:	b045      	add	sp, #276	@ 0x114
1001083a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    print_debug("Create Secure Packet");
1001083e:	483f      	ldr	r0, [pc, #252]	@ (1001093c <secure_send+0x154>)
10010840:	f005 fa24 	bl	10015c8c <printf>
10010844:	4842      	ldr	r0, [pc, #264]	@ (10010950 <secure_send+0x168>)
10010846:	f005 fa21 	bl	10015c8c <printf>
1001084a:	483e      	ldr	r0, [pc, #248]	@ (10010944 <secure_send+0x15c>)
1001084c:	f005 fa1e 	bl	10015c8c <printf>
10010850:	683b      	ldr	r3, [r7, #0]
10010852:	6898      	ldr	r0, [r3, #8]
10010854:	f008 fbba 	bl	10018fcc <fflush>
    uint32_t random_number = GenerateAndUseRandomID();
10010858:	f7ff ff8b 	bl	10010772 <GenerateAndUseRandomID>
    memset(temp_buffer, 0, MAX_PACKET_SIZE); // Initialize buffer to zero
1001085c:	ae04      	add	r6, sp, #16
    uint32_t random_number = GenerateAndUseRandomID();
1001085e:	4680      	mov	r8, r0
    memset(temp_buffer, 0, MAX_PACKET_SIZE); // Initialize buffer to zero
10010860:	22ff      	movs	r2, #255	@ 0xff
10010862:	2100      	movs	r1, #0
10010864:	4630      	mov	r0, r6
10010866:	f009 f8e9 	bl	10019a3c <memset>
    memcpy(temp_buffer, buffer, len);
1001086a:	4622      	mov	r2, r4
1001086c:	4651      	mov	r1, sl
1001086e:	4630      	mov	r0, r6
10010870:	f009 fc26 	bl	1001a0c0 <memcpy>
    print_debug("Build Authentication Hash");
10010874:	4831      	ldr	r0, [pc, #196]	@ (1001093c <secure_send+0x154>)
10010876:	f005 fa09 	bl	10015c8c <printf>
1001087a:	4836      	ldr	r0, [pc, #216]	@ (10010954 <secure_send+0x16c>)
1001087c:	f005 fa06 	bl	10015c8c <printf>
10010880:	4830      	ldr	r0, [pc, #192]	@ (10010944 <secure_send+0x15c>)
10010882:	f005 fa03 	bl	10015c8c <printf>
10010886:	683b      	ldr	r3, [r7, #0]
    size_t data_key_randnum_len = len + key_len + sizeof(uint32_t);
10010888:	f104 0b08 	add.w	fp, r4, #8
    print_debug("Build Authentication Hash");
1001088c:	6898      	ldr	r0, [r3, #8]
1001088e:	f008 fb9d 	bl	10018fcc <fflush>
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
10010892:	4658      	mov	r0, fp
10010894:	f004 ff30 	bl	100156f8 <malloc>
    memset(data_key_randnum, 0, data_key_randnum_len);
10010898:	465a      	mov	r2, fp
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
1001089a:	4605      	mov	r5, r0
    memset(data_key_randnum, 0, data_key_randnum_len);
1001089c:	2100      	movs	r1, #0
1001089e:	f009 f8cd 	bl	10019a3c <memset>
    memcpy(data_key_randnum, buffer, len);
100108a2:	4622      	mov	r2, r4
100108a4:	4651      	mov	r1, sl
100108a6:	4628      	mov	r0, r5
100108a8:	f009 fc0a 	bl	1001a0c0 <memcpy>
    memcpy(data_key_randnum + len, KEY, key_len);
100108ac:	4b2a      	ldr	r3, [pc, #168]	@ (10010958 <secure_send+0x170>)
100108ae:	681b      	ldr	r3, [r3, #0]
100108b0:	512b      	str	r3, [r5, r4]
    memcpy(data_key_randnum + len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
100108b2:	192b      	adds	r3, r5, r4
    md5hash(data_key_randnum, data_key_randnum_len, hash_out);
100108b4:	466a      	mov	r2, sp
    memcpy(data_key_randnum + len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
100108b6:	f8c3 8004 	str.w	r8, [r3, #4]
    md5hash(data_key_randnum, data_key_randnum_len, hash_out);
100108ba:	4659      	mov	r1, fp
100108bc:	4628      	mov	r0, r5
100108be:	f002 f9d1 	bl	10012c64 <md5hash>
    free(data_key_randnum);
100108c2:	4628      	mov	r0, r5
100108c4:	f004 ff20 	bl	10015708 <free>
    print_debug("Add Security Attributes to packet");
100108c8:	481c      	ldr	r0, [pc, #112]	@ (1001093c <secure_send+0x154>)
100108ca:	f005 f9df 	bl	10015c8c <printf>
100108ce:	4823      	ldr	r0, [pc, #140]	@ (1001095c <secure_send+0x174>)
100108d0:	f005 f9dc 	bl	10015c8c <printf>
100108d4:	481b      	ldr	r0, [pc, #108]	@ (10010944 <secure_send+0x15c>)
100108d6:	f005 f9d9 	bl	10015c8c <printf>
100108da:	683b      	ldr	r3, [r7, #0]
100108dc:	6898      	ldr	r0, [r3, #8]
100108de:	f008 fb75 	bl	10018fcc <fflush>
    memcpy(temp_buffer + hash_position, hash_out, HASH_SIZE); // add authenication hash
100108e2:	f10d 05fa 	add.w	r5, sp, #250	@ 0xfa
100108e6:	466b      	mov	r3, sp
100108e8:	461a      	mov	r2, r3
100108ea:	ca03      	ldmia	r2!, {r0, r1}
100108ec:	42b2      	cmp	r2, r6
100108ee:	6028      	str	r0, [r5, #0]
100108f0:	6069      	str	r1, [r5, #4]
100108f2:	4613      	mov	r3, r2
100108f4:	f105 0508 	add.w	r5, r5, #8
100108f8:	d1f6      	bne.n	100108e8 <secure_send+0x100>
    print_debug("Update random number assignment for component");
100108fa:	4810      	ldr	r0, [pc, #64]	@ (1001093c <secure_send+0x154>)
    temp_buffer[data_len_position] = len; // add data length
100108fc:	f886 40fa 	strb.w	r4, [r6, #250]	@ 0xfa
    memcpy(temp_buffer + random_number_position, &random_number, sizeof(uint32_t)); // add random number
10010900:	f8c6 80fb 	str.w	r8, [r6, #251]	@ 0xfb
    print_debug("Update random number assignment for component");
10010904:	f005 f9c2 	bl	10015c8c <printf>
10010908:	4815      	ldr	r0, [pc, #84]	@ (10010960 <secure_send+0x178>)
1001090a:	f005 f9bf 	bl	10015c8c <printf>
1001090e:	480d      	ldr	r0, [pc, #52]	@ (10010944 <secure_send+0x15c>)
10010910:	f005 f9bc 	bl	10015c8c <printf>
10010914:	683b      	ldr	r3, [r7, #0]
10010916:	6898      	ldr	r0, [r3, #8]
10010918:	f008 fb58 	bl	10018fcc <fflush>
    addOrUpdate(&dict, address, random_number);
1001091c:	4642      	mov	r2, r8
1001091e:	4649      	mov	r1, r9
10010920:	4804      	ldr	r0, [pc, #16]	@ (10010934 <secure_send+0x14c>)
10010922:	f000 ffa8 	bl	10011876 <addOrUpdate>
    return send_packet(address, MAX_PACKET_SIZE, temp_buffer);
10010926:	4632      	mov	r2, r6
10010928:	21ff      	movs	r1, #255	@ 0xff
1001092a:	4648      	mov	r0, r9
1001092c:	f000 ff24 	bl	10011778 <send_packet>
10010930:	e782      	b.n	10010838 <secure_send+0x50>
10010932:	bf00      	nop
10010934:	20000c3c 	.word	0x20000c3c
10010938:	200005e0 	.word	0x200005e0
1001093c:	10023f53 	.word	0x10023f53
10010940:	10023f5d 	.word	0x10023f5d
10010944:	10023f85 	.word	0x10023f85
10010948:	10023f88 	.word	0x10023f88
1001094c:	10023f92 	.word	0x10023f92
10010950:	10023fa3 	.word	0x10023fa3
10010954:	10023fb8 	.word	0x10023fb8
10010958:	20000c30 	.word	0x20000c30
1001095c:	10023fd2 	.word	0x10023fd2
10010960:	10023ff4 	.word	0x10023ff4

10010964 <secure_receive>:
 * @return int: number of bytes received, negative if error
 * 
 * Securely receive data over I2C. This function is utilized in POST_BOOT functionality.
 * This function must be implemented by your team to align with the security requirements.
*/
int secure_receive(i2c_addr_t address, uint8_t* buffer) {
10010964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010968:	460d      	mov	r5, r1
1001096a:	b089      	sub	sp, #36	@ 0x24
1001096c:	af00      	add	r7, sp, #0
    // Extract the random number
    uint32_t random_number;
    memcpy(&random_number, buffer + MAX_PACKET_SIZE - sizeof(uint32_t), sizeof(uint32_t));
    
    // Check if random number is unique
    int seen = searchUint32Buffer(random_number_hist, random_number);
1001096e:	4c4f      	ldr	r4, [pc, #316]	@ (10010aac <secure_receive+0x148>)
int secure_receive(i2c_addr_t address, uint8_t* buffer) {
10010970:	4682      	mov	sl, r0
    uint8_t len = poll_and_receive_packet(address, buffer); 
10010972:	f000 ff1a 	bl	100117aa <poll_and_receive_packet>
    memcpy(&random_number, buffer + MAX_PACKET_SIZE - sizeof(uint32_t), sizeof(uint32_t));
10010976:	f8d5 90fb 	ldr.w	r9, [r5, #251]	@ 0xfb
    int seen = searchUint32Buffer(random_number_hist, random_number);
1001097a:	6820      	ldr	r0, [r4, #0]
1001097c:	4649      	mov	r1, r9
1001097e:	f000 ff69 	bl	10011854 <searchUint32Buffer>
    if (seen) {
10010982:	b1a0      	cbz	r0, 100109ae <secure_receive+0x4a>
        print_error("ERROR: Potential Replayed Packet!");
10010984:	484a      	ldr	r0, [pc, #296]	@ (10010ab0 <secure_receive+0x14c>)
10010986:	f005 f981 	bl	10015c8c <printf>
1001098a:	484a      	ldr	r0, [pc, #296]	@ (10010ab4 <secure_receive+0x150>)
1001098c:	f005 f97e 	bl	10015c8c <printf>
10010990:	4849      	ldr	r0, [pc, #292]	@ (10010ab8 <secure_receive+0x154>)
10010992:	f005 f97b 	bl	10015c8c <printf>
10010996:	4b49      	ldr	r3, [pc, #292]	@ (10010abc <secure_receive+0x158>)
10010998:	681b      	ldr	r3, [r3, #0]
    md5hash(data_key_randnum, data_key_randnum_len, check_hash);
    free(data_key_randnum);

    // Check hash for integrity and authenticity of the message
    if(!hash_equal(received_hash, check_hash) || random_number != getValue(&dict, address)){
        print_error("Invalid packet received that cannot be authenticated.\n");
1001099a:	6898      	ldr	r0, [r3, #8]
1001099c:	f008 fb16 	bl	10018fcc <fflush>
        return ERROR_RETURN;
100109a0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    print_debug("%s", original_message);
    print_debug("----------------------------------------\n");

    // Return number of bytes of original data
    return data_len;
}
100109a4:	4620      	mov	r0, r4
100109a6:	3724      	adds	r7, #36	@ 0x24
100109a8:	46bd      	mov	sp, r7
100109aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    appendToUint32Buffer(random_number_hist, random_number);
100109ae:	6820      	ldr	r0, [r4, #0]
100109b0:	4649      	mov	r1, r9
100109b2:	f000 ff35 	bl	10011820 <appendToUint32Buffer>
    uint8_t data_len = buffer[MAX_PACKET_SIZE - sizeof(uint32_t) - sizeof(uint8_t)];
100109b6:	f895 40fa 	ldrb.w	r4, [r5, #250]	@ 0xfa
    memcpy(received_hash, buffer + MAX_PACKET_SIZE - sizeof(uint32_t) - sizeof(uint8_t) - HASH_SIZE, HASH_SIZE);
100109ba:	f105 03ea 	add.w	r3, r5, #234	@ 0xea
100109be:	463a      	mov	r2, r7
100109c0:	f105 0cfa 	add.w	ip, r5, #250	@ 0xfa
100109c4:	46bb      	mov	fp, r7
100109c6:	6818      	ldr	r0, [r3, #0]
100109c8:	6859      	ldr	r1, [r3, #4]
100109ca:	4616      	mov	r6, r2
100109cc:	c603      	stmia	r6!, {r0, r1}
100109ce:	3308      	adds	r3, #8
100109d0:	4563      	cmp	r3, ip
100109d2:	4632      	mov	r2, r6
100109d4:	d1f7      	bne.n	100109c6 <secure_receive+0x62>
    size_t data_key_randnum_len = data_len + key_len + sizeof(uint32_t);
100109d6:	f104 0808 	add.w	r8, r4, #8
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
100109da:	4640      	mov	r0, r8
100109dc:	f004 fe8c 	bl	100156f8 <malloc>
    memset(data_key_randnum, 0, data_key_randnum_len);
100109e0:	4642      	mov	r2, r8
    uint8_t* data_key_randnum = malloc(data_key_randnum_len);
100109e2:	4606      	mov	r6, r0
    memset(data_key_randnum, 0, data_key_randnum_len);
100109e4:	2100      	movs	r1, #0
100109e6:	f009 f829 	bl	10019a3c <memset>
    memcpy(data_key_randnum, buffer, data_len);
100109ea:	4622      	mov	r2, r4
100109ec:	4629      	mov	r1, r5
100109ee:	4630      	mov	r0, r6
100109f0:	f009 fb66 	bl	1001a0c0 <memcpy>
    memcpy(data_key_randnum + data_len, KEY, key_len);
100109f4:	4b32      	ldr	r3, [pc, #200]	@ (10010ac0 <secure_receive+0x15c>)
100109f6:	681b      	ldr	r3, [r3, #0]
100109f8:	5133      	str	r3, [r6, r4]
    memcpy(data_key_randnum + data_len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
100109fa:	1933      	adds	r3, r6, r4
    md5hash(data_key_randnum, data_key_randnum_len, check_hash);
100109fc:	f107 0210 	add.w	r2, r7, #16
    memcpy(data_key_randnum + data_len + sizeof(uint32_t), &random_number, sizeof(uint32_t));
10010a00:	f8c3 9004 	str.w	r9, [r3, #4]
    md5hash(data_key_randnum, data_key_randnum_len, check_hash);
10010a04:	4641      	mov	r1, r8
10010a06:	4630      	mov	r0, r6
10010a08:	f002 f92c 	bl	10012c64 <md5hash>
    free(data_key_randnum);
10010a0c:	4630      	mov	r0, r6
10010a0e:	f004 fe7b 	bl	10015708 <free>
    if(!hash_equal(received_hash, check_hash) || random_number != getValue(&dict, address)){
10010a12:	f107 0110 	add.w	r1, r7, #16
10010a16:	4658      	mov	r0, fp
10010a18:	f7ff fe9b 	bl	10010752 <hash_equal>
10010a1c:	4e27      	ldr	r6, [pc, #156]	@ (10010abc <secure_receive+0x158>)
10010a1e:	b950      	cbnz	r0, 10010a36 <secure_receive+0xd2>
        print_error("Invalid packet received that cannot be authenticated.\n");
10010a20:	4823      	ldr	r0, [pc, #140]	@ (10010ab0 <secure_receive+0x14c>)
10010a22:	f005 f933 	bl	10015c8c <printf>
10010a26:	4827      	ldr	r0, [pc, #156]	@ (10010ac4 <secure_receive+0x160>)
10010a28:	f008 f85c 	bl	10018ae4 <puts>
10010a2c:	4822      	ldr	r0, [pc, #136]	@ (10010ab8 <secure_receive+0x154>)
10010a2e:	f005 f92d 	bl	10015c8c <printf>
10010a32:	6833      	ldr	r3, [r6, #0]
10010a34:	e7b1      	b.n	1001099a <secure_receive+0x36>
    if(!hash_equal(received_hash, check_hash) || random_number != getValue(&dict, address)){
10010a36:	4824      	ldr	r0, [pc, #144]	@ (10010ac8 <secure_receive+0x164>)
10010a38:	4651      	mov	r1, sl
10010a3a:	f000 ff3e 	bl	100118ba <getValue>
10010a3e:	4548      	cmp	r0, r9
10010a40:	d1ee      	bne.n	10010a20 <secure_receive+0xbc>
    uint8_t original_message[data_len + 1]; // Add one for the null terminator
10010a42:	f408 78fc 	and.w	r8, r8, #504	@ 0x1f8
10010a46:	ebad 0d08 	sub.w	sp, sp, r8
    memcpy(original_message, buffer, data_len);
10010a4a:	4622      	mov	r2, r4
10010a4c:	4629      	mov	r1, r5
10010a4e:	4668      	mov	r0, sp
10010a50:	f009 fb36 	bl	1001a0c0 <memcpy>
    original_message[data_len] = '\0'; // Null-terminate the string
10010a54:	2300      	movs	r3, #0
10010a56:	f80d 3004 	strb.w	r3, [sp, r4]
    print_debug("Original message: ");
10010a5a:	481c      	ldr	r0, [pc, #112]	@ (10010acc <secure_receive+0x168>)
10010a5c:	f005 f916 	bl	10015c8c <printf>
10010a60:	481b      	ldr	r0, [pc, #108]	@ (10010ad0 <secure_receive+0x16c>)
10010a62:	f005 f913 	bl	10015c8c <printf>
10010a66:	4814      	ldr	r0, [pc, #80]	@ (10010ab8 <secure_receive+0x154>)
10010a68:	f005 f910 	bl	10015c8c <printf>
10010a6c:	6833      	ldr	r3, [r6, #0]
10010a6e:	6898      	ldr	r0, [r3, #8]
10010a70:	f008 faac 	bl	10018fcc <fflush>
    print_debug("%s", original_message);
10010a74:	4815      	ldr	r0, [pc, #84]	@ (10010acc <secure_receive+0x168>)
10010a76:	f005 f909 	bl	10015c8c <printf>
10010a7a:	4669      	mov	r1, sp
10010a7c:	4815      	ldr	r0, [pc, #84]	@ (10010ad4 <secure_receive+0x170>)
10010a7e:	f005 f905 	bl	10015c8c <printf>
10010a82:	480d      	ldr	r0, [pc, #52]	@ (10010ab8 <secure_receive+0x154>)
10010a84:	f005 f902 	bl	10015c8c <printf>
10010a88:	6833      	ldr	r3, [r6, #0]
10010a8a:	6898      	ldr	r0, [r3, #8]
10010a8c:	f008 fa9e 	bl	10018fcc <fflush>
    print_debug("----------------------------------------\n");
10010a90:	480e      	ldr	r0, [pc, #56]	@ (10010acc <secure_receive+0x168>)
10010a92:	f005 f8fb 	bl	10015c8c <printf>
10010a96:	4810      	ldr	r0, [pc, #64]	@ (10010ad8 <secure_receive+0x174>)
10010a98:	f008 f824 	bl	10018ae4 <puts>
10010a9c:	4806      	ldr	r0, [pc, #24]	@ (10010ab8 <secure_receive+0x154>)
10010a9e:	f005 f8f5 	bl	10015c8c <printf>
10010aa2:	6833      	ldr	r3, [r6, #0]
10010aa4:	6898      	ldr	r0, [r3, #8]
10010aa6:	f008 fa91 	bl	10018fcc <fflush>
    return data_len;
10010aaa:	e77b      	b.n	100109a4 <secure_receive+0x40>
10010aac:	20000c38 	.word	0x20000c38
10010ab0:	10023f88 	.word	0x10023f88
10010ab4:	10024022 	.word	0x10024022
10010ab8:	10023f85 	.word	0x10023f85
10010abc:	200005e0 	.word	0x200005e0
10010ac0:	20000c30 	.word	0x20000c30
10010ac4:	10024044 	.word	0x10024044
10010ac8:	20000c3c 	.word	0x20000c3c
10010acc:	10023f53 	.word	0x10023f53
10010ad0:	1002407a 	.word	0x1002407a
10010ad4:	1002408d 	.word	0x1002408d
10010ad8:	10024090 	.word	0x10024090

10010adc <issue_secure_cmd>:

// TEST FUNCTIONS
int issue_secure_cmd(i2c_addr_t addr, uint8_t* transmit, uint8_t* receive, uint8_t len) {
10010adc:	b538      	push	{r3, r4, r5, lr}
10010ade:	4615      	mov	r5, r2

    // Send message
    int result = secure_send(addr, transmit, len);
10010ae0:	461a      	mov	r2, r3
int issue_secure_cmd(i2c_addr_t addr, uint8_t* transmit, uint8_t* receive, uint8_t len) {
10010ae2:	4604      	mov	r4, r0
    int result = secure_send(addr, transmit, len);
10010ae4:	f7ff fe80 	bl	100107e8 <secure_send>
    if (result == ERROR_RETURN) {
10010ae8:	1c43      	adds	r3, r0, #1
10010aea:	d005      	beq.n	10010af8 <issue_secure_cmd+0x1c>
        return ERROR_RETURN;
    }
    
    // Receive message
    int received_bytes = secure_receive(addr, receive);
10010aec:	4629      	mov	r1, r5
10010aee:	4620      	mov	r0, r4
    if (received_bytes == ERROR_RETURN) {
        return ERROR_RETURN;
    }
    return received_bytes;
    //return result;
}
10010af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    int received_bytes = secure_receive(addr, receive);
10010af4:	f7ff bf36 	b.w	10010964 <secure_receive>
}
10010af8:	bd38      	pop	{r3, r4, r5, pc}
	...

10010afc <test_secure_send>:

int test_secure_send() {
10010afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    print_debug("test secure send called");
10010b00:	4827      	ldr	r0, [pc, #156]	@ (10010ba0 <test_secure_send+0xa4>)
10010b02:	4f28      	ldr	r7, [pc, #160]	@ (10010ba4 <test_secure_send+0xa8>)
10010b04:	4e28      	ldr	r6, [pc, #160]	@ (10010ba8 <test_secure_send+0xac>)
int test_secure_send() {
10010b06:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
    print_debug("test secure send called");
10010b0a:	f005 f8bf 	bl	10015c8c <printf>
10010b0e:	4827      	ldr	r0, [pc, #156]	@ (10010bac <test_secure_send+0xb0>)
10010b10:	f005 f8bc 	bl	10015c8c <printf>
10010b14:	4826      	ldr	r0, [pc, #152]	@ (10010bb0 <test_secure_send+0xb4>)
10010b16:	f005 f8b9 	bl	10015c8c <printf>
10010b1a:	683b      	ldr	r3, [r7, #0]
10010b1c:	6898      	ldr	r0, [r3, #8]
10010b1e:	f008 fa55 	bl	10018fcc <fflush>
    // Buffers for board link communication
    uint8_t receive_buffer[MAX_I2C_MESSAGE_LEN];
    uint8_t transmit_buffer[MAX_I2C_MESSAGE_LEN];
    
    // Send validate command to each component
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10010b22:	2500      	movs	r5, #0
10010b24:	f1a6 0804 	sub.w	r8, r6, #4
10010b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
10010b2c:	42ab      	cmp	r3, r5
10010b2e:	d804      	bhi.n	10010b3a <test_secure_send+0x3e>
        if (code == ERROR_RETURN) {
            print_error("Failed secure send\n");
            return ERROR_RETURN;
        }
    }
    freeDictionary(&dict);
10010b30:	4820      	ldr	r0, [pc, #128]	@ (10010bb4 <test_secure_send+0xb8>)
10010b32:	f000 fed5 	bl	100118e0 <freeDictionary>
    return SUCCESS_RETURN;
10010b36:	2400      	movs	r4, #0
10010b38:	e02a      	b.n	10010b90 <test_secure_send+0x94>
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10010b3a:	f856 0f04 	ldr.w	r0, [r6, #4]!
10010b3e:	f000 fe19 	bl	10011774 <component_id_to_i2c_addr>
        memcpy(transmit_buffer, test_message, len);
10010b42:	4b1d      	ldr	r3, [pc, #116]	@ (10010bb8 <test_secure_send+0xbc>)
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10010b44:	4684      	mov	ip, r0
        memcpy(transmit_buffer, test_message, len);
10010b46:	aa40      	add	r2, sp, #256	@ 0x100
10010b48:	f103 0e18 	add.w	lr, r3, #24
10010b4c:	6818      	ldr	r0, [r3, #0]
10010b4e:	6859      	ldr	r1, [r3, #4]
10010b50:	4614      	mov	r4, r2
10010b52:	c403      	stmia	r4!, {r0, r1}
10010b54:	3308      	adds	r3, #8
10010b56:	4573      	cmp	r3, lr
10010b58:	4622      	mov	r2, r4
10010b5a:	d1f7      	bne.n	10010b4c <test_secure_send+0x50>
10010b5c:	6818      	ldr	r0, [r3, #0]
10010b5e:	791b      	ldrb	r3, [r3, #4]
10010b60:	6020      	str	r0, [r4, #0]
10010b62:	7123      	strb	r3, [r4, #4]
        int code = issue_secure_cmd(addr, transmit_buffer, receive_buffer, (uint8_t)len);
10010b64:	466a      	mov	r2, sp
10010b66:	231d      	movs	r3, #29
10010b68:	a940      	add	r1, sp, #256	@ 0x100
10010b6a:	4660      	mov	r0, ip
10010b6c:	f7ff ffb6 	bl	10010adc <issue_secure_cmd>
        if (code == ERROR_RETURN) {
10010b70:	1c43      	adds	r3, r0, #1
        int code = issue_secure_cmd(addr, transmit_buffer, receive_buffer, (uint8_t)len);
10010b72:	4604      	mov	r4, r0
        if (code == ERROR_RETURN) {
10010b74:	d111      	bne.n	10010b9a <test_secure_send+0x9e>
            print_error("Failed secure send\n");
10010b76:	4811      	ldr	r0, [pc, #68]	@ (10010bbc <test_secure_send+0xc0>)
10010b78:	f005 f888 	bl	10015c8c <printf>
10010b7c:	4810      	ldr	r0, [pc, #64]	@ (10010bc0 <test_secure_send+0xc4>)
10010b7e:	f007 ffb1 	bl	10018ae4 <puts>
10010b82:	480b      	ldr	r0, [pc, #44]	@ (10010bb0 <test_secure_send+0xb4>)
10010b84:	f005 f882 	bl	10015c8c <printf>
10010b88:	683b      	ldr	r3, [r7, #0]
10010b8a:	6898      	ldr	r0, [r3, #8]
10010b8c:	f008 fa1e 	bl	10018fcc <fflush>
}
10010b90:	4620      	mov	r0, r4
10010b92:	f50d 7d00 	add.w	sp, sp, #512	@ 0x200
10010b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10010b9a:	3501      	adds	r5, #1
10010b9c:	e7c4      	b.n	10010b28 <test_secure_send+0x2c>
10010b9e:	bf00      	nop
10010ba0:	10023f53 	.word	0x10023f53
10010ba4:	200005e0 	.word	0x200005e0
10010ba8:	20000c48 	.word	0x20000c48
10010bac:	100240b9 	.word	0x100240b9
10010bb0:	10023f85 	.word	0x10023f85
10010bb4:	20000c3c 	.word	0x20000c3c
10010bb8:	100240d1 	.word	0x100240d1
10010bbc:	10023f88 	.word	0x10023f88
10010bc0:	100240ef 	.word	0x100240ef

10010bc4 <issue_cmd>:
 * 
 * @return int: number of bytes received, negative if error
 * 
 * Send a command to a component and receive the result
*/
int issue_cmd(i2c_addr_t addr, uint8_t* transmit, uint8_t* receive, size_t packet_size) {
10010bc4:	b538      	push	{r3, r4, r5, lr}
10010bc6:	4615      	mov	r5, r2

    // Send message
    int result = send_packet(addr, packet_size, transmit);
10010bc8:	460a      	mov	r2, r1
10010bca:	b2d9      	uxtb	r1, r3
int issue_cmd(i2c_addr_t addr, uint8_t* transmit, uint8_t* receive, size_t packet_size) {
10010bcc:	4604      	mov	r4, r0
    int result = send_packet(addr, packet_size, transmit);
10010bce:	f000 fdd3 	bl	10011778 <send_packet>
    if (result == ERROR_RETURN) {
10010bd2:	1c43      	adds	r3, r0, #1
10010bd4:	d005      	beq.n	10010be2 <issue_cmd+0x1e>
        return ERROR_RETURN;
    }

    // Receive message
    int len = poll_and_receive_packet(addr, receive);
10010bd6:	4629      	mov	r1, r5
10010bd8:	4620      	mov	r0, r4
    if (len == ERROR_RETURN) {
        return ERROR_RETURN;
    }
    return len;
}
10010bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    int len = poll_and_receive_packet(addr, receive);
10010bde:	f000 bde4 	b.w	100117aa <poll_and_receive_packet>
}
10010be2:	bd38      	pop	{r3, r4, r5, pc}

10010be4 <exchange_hash_key>:

/******************************** COMPONENT COMMS **********************************/
int exchange_hash_key() {
10010be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010be8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
10010bec:	af00      	add	r7, sp, #0
    // Generate the AES key using the TRNG
    size_t HASH_KEY_SIZE = sizeof(KEY);
    uint32_t random_id = GenerateAndUseRandomID();
10010bee:	f7ff fdc0 	bl	10010772 <GenerateAndUseRandomID>
    uint32_to_uint8_array(random_id, KEY);
10010bf2:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 10010d18 <exchange_hash_key+0x134>
10010bf6:	4949      	ldr	r1, [pc, #292]	@ (10010d1c <exchange_hash_key+0x138>)
10010bf8:	f7ff fda3 	bl	10010742 <uint32_to_uint8_array>

    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10010bfc:	2300      	movs	r3, #0
10010bfe:	607b      	str	r3, [r7, #4]
10010c00:	f1a8 0b04 	sub.w	fp, r8, #4
10010c04:	f8db 3004 	ldr.w	r3, [fp, #4]
10010c08:	687a      	ldr	r2, [r7, #4]
10010c0a:	4293      	cmp	r3, r2
10010c0c:	d801      	bhi.n	10010c12 <exchange_hash_key+0x2e>
        if (len == ERROR_RETURN) {
            print_error("Failed to send encrypted AES key to component\n");
            return ERROR_RETURN;
        } 
    }
    return SUCCESS_RETURN;
10010c0e:	2000      	movs	r0, #0
10010c10:	e041      	b.n	10010c96 <exchange_hash_key+0xb2>
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10010c12:	f858 0f04 	ldr.w	r0, [r8, #4]!
10010c16:	f000 fdad 	bl	10011774 <component_id_to_i2c_addr>
        x25519_base(ap_public_key, ap_private_key);
10010c1a:	f107 0934 	add.w	r9, r7, #52	@ 0x34
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10010c1e:	4606      	mov	r6, r0
        x25519_base(ap_public_key, ap_private_key);
10010c20:	4649      	mov	r1, r9
10010c22:	f107 0014 	add.w	r0, r7, #20
10010c26:	f002 fba3 	bl	10013370 <x25519_base>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10010c2a:	46ea      	mov	sl, sp
        memcpy(packet.public_key, ap_public_key, sizeof(ap_public_key));
10010c2c:	f107 0314 	add.w	r3, r7, #20
10010c30:	f107 0495 	add.w	r4, r7, #149	@ 0x95
10010c34:	461a      	mov	r2, r3
10010c36:	ca03      	ldmia	r2!, {r0, r1}
10010c38:	454a      	cmp	r2, r9
10010c3a:	6020      	str	r0, [r4, #0]
10010c3c:	6061      	str	r1, [r4, #4]
10010c3e:	4613      	mov	r3, r2
10010c40:	f104 0408 	add.w	r4, r4, #8
10010c44:	d1f6      	bne.n	10010c34 <exchange_hash_key+0x50>
        memcpy(transmit_buffer, &packet, sizeof(packet));
10010c46:	2306      	movs	r3, #6
10010c48:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
10010c4c:	f107 0494 	add.w	r4, r7, #148	@ 0x94
10010c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10010c52:	f507 75dc 	add.w	r5, r7, #440	@ 0x1b8
10010c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10010c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10010c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10010c5c:	6823      	ldr	r3, [r4, #0]
10010c5e:	702b      	strb	r3, [r5, #0]
        int len = issue_cmd(addr, transmit_buffer, receive_buffer, ap_pb_key_packet_size);
10010c60:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
10010c64:	2321      	movs	r3, #33	@ 0x21
10010c66:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
10010c6a:	4630      	mov	r0, r6
10010c6c:	f7ff ffaa 	bl	10010bc4 <issue_cmd>
        if (len == ERROR_RETURN) {
10010c70:	3001      	adds	r0, #1
10010c72:	d115      	bne.n	10010ca0 <exchange_hash_key+0xbc>
            print_error("Could not send AP public key to component\n");
10010c74:	482a      	ldr	r0, [pc, #168]	@ (10010d20 <exchange_hash_key+0x13c>)
10010c76:	f005 f809 	bl	10015c8c <printf>
10010c7a:	482a      	ldr	r0, [pc, #168]	@ (10010d24 <exchange_hash_key+0x140>)
            print_error("Failed to send encrypted AES key to component\n");
10010c7c:	f007 ff32 	bl	10018ae4 <puts>
10010c80:	4829      	ldr	r0, [pc, #164]	@ (10010d28 <exchange_hash_key+0x144>)
10010c82:	f005 f803 	bl	10015c8c <printf>
10010c86:	4b29      	ldr	r3, [pc, #164]	@ (10010d2c <exchange_hash_key+0x148>)
10010c88:	681b      	ldr	r3, [r3, #0]
10010c8a:	6898      	ldr	r0, [r3, #8]
10010c8c:	f008 f99e 	bl	10018fcc <fflush>
            return ERROR_RETURN;
10010c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10010c94:	46d5      	mov	sp, sl
}
10010c96:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
10010c9a:	46bd      	mov	sp, r7
10010c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(comp_pb_key, comp_key->public_key, sizeof(comp_pb_key));
10010ca0:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
10010ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10010ca6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
10010caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10010cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10010cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        x25519(shared_secret, ap_private_key, comp_pb_key);
10010cb4:	4649      	mov	r1, r9
10010cb6:	f107 0074 	add.w	r0, r7, #116	@ 0x74
10010cba:	f107 0254 	add.w	r2, r7, #84	@ 0x54
10010cbe:	f002 fb59 	bl	10013374 <x25519>
        volatile uint8_t dummy = 0;
10010cc2:	4c16      	ldr	r4, [pc, #88]	@ (10010d1c <exchange_hash_key+0x138>)
10010cc4:	2300      	movs	r3, #0
10010cc6:	73fb      	strb	r3, [r7, #15]
        for (int i = 0; i < HASH_KEY_SIZE; i++) {
10010cc8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
10010ccc:	f107 0010 	add.w	r0, r7, #16
            encrypted_hash_key[i] = KEY[i] ^ shared_secret[i];
10010cd0:	f811 5b01 	ldrb.w	r5, [r1], #1
10010cd4:	f814 2b01 	ldrb.w	r2, [r4], #1
10010cd8:	406a      	eors	r2, r5
            dummy ^= encrypted_hash_key[i];
10010cda:	7bfd      	ldrb	r5, [r7, #15]
            encrypted_hash_key[i] = KEY[i] ^ shared_secret[i];
10010cdc:	f800 2b01 	strb.w	r2, [r0], #1
        for (int i = 0; i < HASH_KEY_SIZE; i++) {
10010ce0:	3301      	adds	r3, #1
            dummy ^= encrypted_hash_key[i];
10010ce2:	406a      	eors	r2, r5
        for (int i = 0; i < HASH_KEY_SIZE; i++) {
10010ce4:	2b04      	cmp	r3, #4
            dummy ^= encrypted_hash_key[i];
10010ce6:	73fa      	strb	r2, [r7, #15]
        for (int i = 0; i < HASH_KEY_SIZE; i++) {
10010ce8:	d1f2      	bne.n	10010cd0 <exchange_hash_key+0xec>
        memcpy(transmit_buffer, encrypted_hash_key, sizeof(encrypted_hash_key));
10010cea:	693a      	ldr	r2, [r7, #16]
10010cec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
        len = issue_cmd(addr, transmit_buffer, receive_buffer, hash_key_packet_size);
10010cf0:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
10010cf4:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
10010cf8:	4630      	mov	r0, r6
10010cfa:	f7ff ff63 	bl	10010bc4 <issue_cmd>
        if (len == ERROR_RETURN) {
10010cfe:	3001      	adds	r0, #1
10010d00:	d104      	bne.n	10010d0c <exchange_hash_key+0x128>
            print_error("Failed to send encrypted AES key to component\n");
10010d02:	4807      	ldr	r0, [pc, #28]	@ (10010d20 <exchange_hash_key+0x13c>)
10010d04:	f004 ffc2 	bl	10015c8c <printf>
10010d08:	4809      	ldr	r0, [pc, #36]	@ (10010d30 <exchange_hash_key+0x14c>)
10010d0a:	e7b7      	b.n	10010c7c <exchange_hash_key+0x98>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10010d0c:	687b      	ldr	r3, [r7, #4]
10010d0e:	3301      	adds	r3, #1
10010d10:	46d5      	mov	sp, sl
10010d12:	607b      	str	r3, [r7, #4]
10010d14:	e776      	b.n	10010c04 <exchange_hash_key+0x20>
10010d16:	bf00      	nop
10010d18:	20000c48 	.word	0x20000c48
10010d1c:	20000c30 	.word	0x20000c30
10010d20:	10023f88 	.word	0x10023f88
10010d24:	10024102 	.word	0x10024102
10010d28:	10023f85 	.word	0x10023f85
10010d2c:	200005e0 	.word	0x200005e0
10010d30:	1002412c 	.word	0x1002412c

10010d34 <init>:
void init() {
10010d34:	b530      	push	{r4, r5, lr}
    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_SMPHR);
10010d36:	2029      	movs	r0, #41	@ 0x29
void init() {
10010d38:	b085      	sub	sp, #20
    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_SMPHR);
10010d3a:	f002 fea5 	bl	10013a88 <MXC_SYS_ClockDisable>
    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_CPU1);
10010d3e:	203f      	movs	r0, #63	@ 0x3f
10010d40:	f002 fea2 	bl	10013a88 <MXC_SYS_ClockDisable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
10010d44:	b662      	cpsie	i
    int usn_error = MXC_SYS_GetUSN(usn, NULL);
10010d46:	2100      	movs	r1, #0
10010d48:	4668      	mov	r0, sp
10010d4a:	f002 fdfd 	bl	10013948 <MXC_SYS_GetUSN>
    if (usn_error != E_NO_ERROR) {
10010d4e:	4c20      	ldr	r4, [pc, #128]	@ (10010dd0 <init+0x9c>)
10010d50:	b130      	cbz	r0, 10010d60 <init+0x2c>
        printf("Invalid Component Hardware Device: Not MAX78000");
10010d52:	4820      	ldr	r0, [pc, #128]	@ (10010dd4 <init+0xa0>)
10010d54:	f004 ff9a 	bl	10015c8c <printf>
        valid_device = false;
10010d58:	2300      	movs	r3, #0
10010d5a:	7023      	strb	r3, [r4, #0]
}
10010d5c:	b005      	add	sp, #20
10010d5e:	bd30      	pop	{r4, r5, pc}
        valid_device = true;
10010d60:	2301      	movs	r3, #1
10010d62:	7023      	strb	r3, [r4, #0]
    flash_simple_read(FLASH_ADDR, (uint32_t *)&flash_status,
10010d64:	4c1c      	ldr	r4, [pc, #112]	@ (10010dd8 <init+0xa4>)
        printf("Valid Component Hardware Device: MAX78000");        
10010d66:	481d      	ldr	r0, [pc, #116]	@ (10010ddc <init+0xa8>)
    if (flash_status.flash_magic != FLASH_MAGIC) {
10010d68:	4d1d      	ldr	r5, [pc, #116]	@ (10010de0 <init+0xac>)
        printf("Valid Component Hardware Device: MAX78000");        
10010d6a:	f004 ff8f 	bl	10015c8c <printf>
    flash_simple_init();
10010d6e:	f002 f8f9 	bl	10012f64 <flash_simple_init>
    flash_simple_read(FLASH_ADDR, (uint32_t *)&flash_status,
10010d72:	481c      	ldr	r0, [pc, #112]	@ (10010de4 <init+0xb0>)
10010d74:	2288      	movs	r2, #136	@ 0x88
10010d76:	4621      	mov	r1, r4
10010d78:	f002 f90e 	bl	10012f98 <flash_simple_read>
    if (flash_status.flash_magic != FLASH_MAGIC) {
10010d7c:	6823      	ldr	r3, [r4, #0]
10010d7e:	42ab      	cmp	r3, r5
10010d80:	d019      	beq.n	10010db6 <init+0x82>
        print_debug("First boot, setting flash!\n");
10010d82:	4819      	ldr	r0, [pc, #100]	@ (10010de8 <init+0xb4>)
10010d84:	f004 ff82 	bl	10015c8c <printf>
10010d88:	4818      	ldr	r0, [pc, #96]	@ (10010dec <init+0xb8>)
10010d8a:	f007 feab 	bl	10018ae4 <puts>
10010d8e:	4818      	ldr	r0, [pc, #96]	@ (10010df0 <init+0xbc>)
10010d90:	f004 ff7c 	bl	10015c8c <printf>
10010d94:	4b17      	ldr	r3, [pc, #92]	@ (10010df4 <init+0xc0>)
10010d96:	681b      	ldr	r3, [r3, #0]
10010d98:	6898      	ldr	r0, [r3, #8]
10010d9a:	f008 f917 	bl	10018fcc <fflush>
        memcpy(flash_status.component_ids, component_ids,
10010d9e:	4b16      	ldr	r3, [pc, #88]	@ (10010df8 <init+0xc4>)
        flash_simple_write(FLASH_ADDR, (uint32_t *)&flash_status,
10010da0:	4810      	ldr	r0, [pc, #64]	@ (10010de4 <init+0xb0>)
        flash_status.flash_magic = FLASH_MAGIC;
10010da2:	6025      	str	r5, [r4, #0]
        memcpy(flash_status.component_ids, component_ids,
10010da4:	2202      	movs	r2, #2
10010da6:	e9c4 2301 	strd	r2, r3, [r4, #4]
        flash_simple_write(FLASH_ADDR, (uint32_t *)&flash_status,
10010daa:	4621      	mov	r1, r4
        memcpy(flash_status.component_ids, component_ids,
10010dac:	3301      	adds	r3, #1
        flash_simple_write(FLASH_ADDR, (uint32_t *)&flash_status,
10010dae:	2288      	movs	r2, #136	@ 0x88
        memcpy(flash_status.component_ids, component_ids,
10010db0:	60e3      	str	r3, [r4, #12]
        flash_simple_write(FLASH_ADDR, (uint32_t *)&flash_status,
10010db2:	f002 f8f3 	bl	10012f9c <flash_simple_write>
    board_link_init();
10010db6:	f000 fcdb 	bl	10011770 <board_link_init>
    initDictionary(&dict);
10010dba:	4810      	ldr	r0, [pc, #64]	@ (10010dfc <init+0xc8>)
10010dbc:	f000 fd5a 	bl	10011874 <initDictionary>
    random_number_hist = createUint32Buffer(10);
10010dc0:	200a      	movs	r0, #10
10010dc2:	f000 fd17 	bl	100117f4 <createUint32Buffer>
10010dc6:	4b0e      	ldr	r3, [pc, #56]	@ (10010e00 <init+0xcc>)
10010dc8:	6018      	str	r0, [r3, #0]
    exchange_hash_key();
10010dca:	f7ff ff0b 	bl	10010be4 <exchange_hash_key>
10010dce:	e7c5      	b.n	10010d5c <init+0x28>
10010dd0:	20000c34 	.word	0x20000c34
10010dd4:	1002415a 	.word	0x1002415a
10010dd8:	20000c44 	.word	0x20000c44
10010ddc:	1002418a 	.word	0x1002418a
10010de0:	deadbeef 	.word	0xdeadbeef
10010de4:	1007c000 	.word	0x1007c000
10010de8:	10023f53 	.word	0x10023f53
10010dec:	100241b4 	.word	0x100241b4
10010df0:	10023f85 	.word	0x10023f85
10010df4:	200005e0 	.word	0x200005e0
10010df8:	11111124 	.word	0x11111124
10010dfc:	20000c3c 	.word	0x20000c3c
10010e00:	20000c38 	.word	0x20000c38

10010e04 <exchange_aes_key>:

int exchange_aes_key(i2c_addr_t addr) {
10010e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
10010e08:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
    uint8_t transmit_buffer[MAX_I2C_MESSAGE_LEN];

    // Generate x25519 key pair for the application processor
    unsigned char ap_public_key[X25519_KEY_LEN];
    unsigned char ap_private_key[X25519_KEY_LEN];
    x25519_base(ap_public_key, ap_private_key);
10010e0c:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
int exchange_aes_key(i2c_addr_t addr) {
10010e10:	4607      	mov	r7, r0
    x25519_base(ap_public_key, ap_private_key);
10010e12:	4641      	mov	r1, r8
10010e14:	a809      	add	r0, sp, #36	@ 0x24
10010e16:	f002 faab 	bl	10013370 <x25519_base>

    // Prepare the packet
    ap_public_key_packet packet;
    packet.opcode = COMPONENT_AP_KEY_EXCHANGE;
    memcpy(packet.public_key, ap_public_key, sizeof(ap_public_key));
10010e1a:	f10d 04a5 	add.w	r4, sp, #165	@ 0xa5
10010e1e:	ab09      	add	r3, sp, #36	@ 0x24
10010e20:	461a      	mov	r2, r3
10010e22:	ca03      	ldmia	r2!, {r0, r1}
10010e24:	4542      	cmp	r2, r8
10010e26:	6020      	str	r0, [r4, #0]
10010e28:	6061      	str	r1, [r4, #4]
10010e2a:	4613      	mov	r3, r2
10010e2c:	f104 0408 	add.w	r4, r4, #8
10010e30:	d1f6      	bne.n	10010e20 <exchange_aes_key+0x1c>
    memcpy(transmit_buffer, &packet, sizeof(packet));
10010e32:	2305      	movs	r3, #5
10010e34:	f88d 30a4 	strb.w	r3, [sp, #164]	@ 0xa4
10010e38:	ac29      	add	r4, sp, #164	@ 0xa4
10010e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10010e3c:	ae72      	add	r6, sp, #456	@ 0x1c8
10010e3e:	4635      	mov	r5, r6
10010e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10010e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
10010e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10010e46:	6823      	ldr	r3, [r4, #0]
10010e48:	702b      	strb	r3, [r5, #0]

    // Send AP's public key and receive component's public key
    size_t ap_pb_key_packet_size = sizeof(uint8_t) + X25519_KEY_LEN;
    int len = issue_cmd(addr, transmit_buffer, receive_buffer, ap_pb_key_packet_size);
10010e4a:	aa32      	add	r2, sp, #200	@ 0xc8
10010e4c:	2321      	movs	r3, #33	@ 0x21
10010e4e:	4631      	mov	r1, r6
10010e50:	4638      	mov	r0, r7
10010e52:	f7ff feb7 	bl	10010bc4 <issue_cmd>
    if (len == ERROR_RETURN) {
10010e56:	3001      	adds	r0, #1
10010e58:	d113      	bne.n	10010e82 <exchange_aes_key+0x7e>
        print_error("Could not send AP public key to component\n");
10010e5a:	482c      	ldr	r0, [pc, #176]	@ (10010f0c <exchange_aes_key+0x108>)
10010e5c:	f004 ff16 	bl	10015c8c <printf>
10010e60:	482b      	ldr	r0, [pc, #172]	@ (10010f10 <exchange_aes_key+0x10c>)
    // Send the encrypted AES key to the component
    memcpy(transmit_buffer, encrypted_aes_key, sizeof(encrypted_aes_key));
    size_t aes_key_packet_size = AES_KEY_SIZE;
    len = issue_cmd(addr, transmit_buffer, receive_buffer, aes_key_packet_size);
    if (len == ERROR_RETURN) {
        print_error("Failed to send encrypted AES key to component\n");
10010e62:	f007 fe3f 	bl	10018ae4 <puts>
10010e66:	482b      	ldr	r0, [pc, #172]	@ (10010f14 <exchange_aes_key+0x110>)
10010e68:	f004 ff10 	bl	10015c8c <printf>
10010e6c:	4b2a      	ldr	r3, [pc, #168]	@ (10010f18 <exchange_aes_key+0x114>)
10010e6e:	681b      	ldr	r3, [r3, #0]
10010e70:	6898      	ldr	r0, [r3, #8]
10010e72:	f008 f8ab 	bl	10018fcc <fflush>
        return ERROR_RETURN;
10010e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
        return ERROR_RETURN;
    }
    return SUCCESS_RETURN;
}
10010e7a:	f50d 7d33 	add.w	sp, sp, #716	@ 0x2cc
10010e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memcpy(comp_pb_key, comp_key->public_key, sizeof(comp_pb_key));
10010e82:	ad32      	add	r5, sp, #200	@ 0xc8
10010e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10010e86:	ac19      	add	r4, sp, #100	@ 0x64
10010e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10010e8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10010e8e:	ad01      	add	r5, sp, #4
10010e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10010e94:	46a9      	mov	r9, r5
    for (int i = 0; i < AES_KEY_SIZE; i++) {
10010e96:	2400      	movs	r4, #0
        aes_key[i] = (uint8_t)GenerateAndUseRandomID();
10010e98:	f7ff fc6b 	bl	10010772 <GenerateAndUseRandomID>
    for (int i = 0; i < AES_KEY_SIZE; i++) {
10010e9c:	3401      	adds	r4, #1
10010e9e:	2c10      	cmp	r4, #16
        aes_key[i] = (uint8_t)GenerateAndUseRandomID();
10010ea0:	f809 0b01 	strb.w	r0, [r9], #1
    for (int i = 0; i < AES_KEY_SIZE; i++) {
10010ea4:	d1f8      	bne.n	10010e98 <exchange_aes_key+0x94>
    MXC_AES_SetExtKey(aes_key, MXC_AES_128BITS);
10010ea6:	2100      	movs	r1, #0
10010ea8:	4628      	mov	r0, r5
10010eaa:	f7ff fa17 	bl	100102dc <MXC_AES_SetExtKey>
    x25519(shared_secret, ap_private_key, comp_pb_key);
10010eae:	aa19      	add	r2, sp, #100	@ 0x64
10010eb0:	4641      	mov	r1, r8
10010eb2:	a821      	add	r0, sp, #132	@ 0x84
10010eb4:	f002 fa5e 	bl	10013374 <x25519>
    volatile uint8_t dummy = 0;
10010eb8:	2400      	movs	r4, #0
10010eba:	a805      	add	r0, sp, #20
10010ebc:	f88d 4003 	strb.w	r4, [sp, #3]
    for (int i = 0; i < AES_KEY_SIZE; i++) {
10010ec0:	aa21      	add	r2, sp, #132	@ 0x84
10010ec2:	4601      	mov	r1, r0
        encrypted_aes_key[i] = aes_key[i] ^ shared_secret[i];
10010ec4:	f812 cb01 	ldrb.w	ip, [r2], #1
10010ec8:	f815 3b01 	ldrb.w	r3, [r5], #1
10010ecc:	ea83 030c 	eor.w	r3, r3, ip
        dummy ^= encrypted_aes_key[i];
10010ed0:	f89d c003 	ldrb.w	ip, [sp, #3]
        encrypted_aes_key[i] = aes_key[i] ^ shared_secret[i];
10010ed4:	f800 3b01 	strb.w	r3, [r0], #1
    for (int i = 0; i < AES_KEY_SIZE; i++) {
10010ed8:	3401      	adds	r4, #1
        dummy ^= encrypted_aes_key[i];
10010eda:	ea83 030c 	eor.w	r3, r3, ip
    for (int i = 0; i < AES_KEY_SIZE; i++) {
10010ede:	2c10      	cmp	r4, #16
        dummy ^= encrypted_aes_key[i];
10010ee0:	f88d 3003 	strb.w	r3, [sp, #3]
    for (int i = 0; i < AES_KEY_SIZE; i++) {
10010ee4:	d1ee      	bne.n	10010ec4 <exchange_aes_key+0xc0>
    memcpy(transmit_buffer, encrypted_aes_key, sizeof(encrypted_aes_key));
10010ee6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
10010ee8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    len = issue_cmd(addr, transmit_buffer, receive_buffer, aes_key_packet_size);
10010eec:	4623      	mov	r3, r4
10010eee:	aa32      	add	r2, sp, #200	@ 0xc8
10010ef0:	4631      	mov	r1, r6
10010ef2:	4638      	mov	r0, r7
10010ef4:	f7ff fe66 	bl	10010bc4 <issue_cmd>
    if (len == ERROR_RETURN) {
10010ef8:	3001      	adds	r0, #1
10010efa:	d104      	bne.n	10010f06 <exchange_aes_key+0x102>
        print_error("Failed to send encrypted AES key to component\n");
10010efc:	4803      	ldr	r0, [pc, #12]	@ (10010f0c <exchange_aes_key+0x108>)
10010efe:	f004 fec5 	bl	10015c8c <printf>
10010f02:	4806      	ldr	r0, [pc, #24]	@ (10010f1c <exchange_aes_key+0x118>)
10010f04:	e7ad      	b.n	10010e62 <exchange_aes_key+0x5e>
    return SUCCESS_RETURN;
10010f06:	2000      	movs	r0, #0
10010f08:	e7b7      	b.n	10010e7a <exchange_aes_key+0x76>
10010f0a:	bf00      	nop
10010f0c:	10023f88 	.word	0x10023f88
10010f10:	10024102 	.word	0x10024102
10010f14:	10023f85 	.word	0x10023f85
10010f18:	200005e0 	.word	0x200005e0
10010f1c:	1002412c 	.word	0x1002412c

10010f20 <validate_components>:

int validate_components() {
10010f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010f24:	4e35      	ldr	r6, [pc, #212]	@ (10010ffc <validate_components+0xdc>)
        // Attach authentication hash
        attach_key(command);
        attach_random_num(command, addr);

        // Send out command and receive result
        int len = issue_cmd(addr, transmit_buffer, receive_buffer, PACKET_SIZE);
10010f26:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 10011000 <validate_components+0xe0>
        }
        validate_message* validate = (validate_message*) receive_buffer;
        uint32_t received_random_num = uint8_array_to_uint32(validate->random_number);

         // Check if random number received is already seen
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
10010f2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ 10011004 <validate_components+0xe4>
int validate_components() {
10010f2e:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10010f32:	2400      	movs	r4, #0
10010f34:	f1a6 0904 	sub.w	r9, r6, #4
10010f38:	f8d9 3004 	ldr.w	r3, [r9, #4]
10010f3c:	42a3      	cmp	r3, r4
10010f3e:	d801      	bhi.n	10010f44 <validate_components+0x24>
        if (validate->component_id != flash_status.component_ids[i]) {
            print_error("Component ID: 0x%08x invalid\n", flash_status.component_ids[i]);
            return ERROR_RETURN;
        }
    }
    return SUCCESS_RETURN;
10010f40:	2000      	movs	r0, #0
10010f42:	e026      	b.n	10010f92 <validate_components+0x72>
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10010f44:	6870      	ldr	r0, [r6, #4]
10010f46:	f000 fc15 	bl	10011774 <component_id_to_i2c_addr>
        command->opcode = COMPONENT_CMD_VALIDATE;
10010f4a:	2302      	movs	r3, #2
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10010f4c:	4605      	mov	r5, r0
        attach_key(command);
10010f4e:	a840      	add	r0, sp, #256	@ 0x100
        command->opcode = COMPONENT_CMD_VALIDATE;
10010f50:	f88d 3100 	strb.w	r3, [sp, #256]	@ 0x100
        attach_key(command);
10010f54:	f7ff fc18 	bl	10010788 <attach_key>
        attach_random_num(command, addr);
10010f58:	4629      	mov	r1, r5
10010f5a:	a840      	add	r0, sp, #256	@ 0x100
10010f5c:	f7ff fc32 	bl	100107c4 <attach_random_num>
        int len = issue_cmd(addr, transmit_buffer, receive_buffer, PACKET_SIZE);
10010f60:	f8db 3000 	ldr.w	r3, [fp]
10010f64:	466a      	mov	r2, sp
10010f66:	a940      	add	r1, sp, #256	@ 0x100
10010f68:	4628      	mov	r0, r5
10010f6a:	f7ff fe2b 	bl	10010bc4 <issue_cmd>
        if (len == ERROR_RETURN) {
10010f6e:	3001      	adds	r0, #1
10010f70:	d113      	bne.n	10010f9a <validate_components+0x7a>
            print_error("Could not validate component\n");
10010f72:	4825      	ldr	r0, [pc, #148]	@ (10011008 <validate_components+0xe8>)
10010f74:	f004 fe8a 	bl	10015c8c <printf>
10010f78:	4824      	ldr	r0, [pc, #144]	@ (1001100c <validate_components+0xec>)
10010f7a:	f007 fdb3 	bl	10018ae4 <puts>
10010f7e:	4824      	ldr	r0, [pc, #144]	@ (10011010 <validate_components+0xf0>)
10010f80:	f004 fe84 	bl	10015c8c <printf>
10010f84:	4b23      	ldr	r3, [pc, #140]	@ (10011014 <validate_components+0xf4>)
10010f86:	681b      	ldr	r3, [r3, #0]
10010f88:	6898      	ldr	r0, [r3, #8]
10010f8a:	f008 f81f 	bl	10018fcc <fflush>
            return ERROR_RETURN;
10010f8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10010f92:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
10010f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t received_random_num = uint8_array_to_uint32(validate->random_number);
10010f9a:	a805      	add	r0, sp, #20
10010f9c:	f7ff fbce 	bl	1001073c <uint8_array_to_uint32>
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
10010fa0:	4601      	mov	r1, r0
        uint32_t received_random_num = uint8_array_to_uint32(validate->random_number);
10010fa2:	4607      	mov	r7, r0
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
10010fa4:	f8da 0000 	ldr.w	r0, [sl]
10010fa8:	f000 fc54 	bl	10011854 <searchUint32Buffer>
        if(!hash_equal(command->authkey, validate->authkey) || received_random_num != getValue(&dict, addr) || seen){
10010fac:	a901      	add	r1, sp, #4
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
10010fae:	4680      	mov	r8, r0
        if(!hash_equal(command->authkey, validate->authkey) || received_random_num != getValue(&dict, addr) || seen){
10010fb0:	f20d 1001 	addw	r0, sp, #257	@ 0x101
10010fb4:	f7ff fbcd 	bl	10010752 <hash_equal>
10010fb8:	2800      	cmp	r0, #0
10010fba:	d0da      	beq.n	10010f72 <validate_components+0x52>
10010fbc:	4629      	mov	r1, r5
10010fbe:	4816      	ldr	r0, [pc, #88]	@ (10011018 <validate_components+0xf8>)
10010fc0:	f000 fc7b 	bl	100118ba <getValue>
10010fc4:	42b8      	cmp	r0, r7
10010fc6:	4601      	mov	r1, r0
10010fc8:	d1d3      	bne.n	10010f72 <validate_components+0x52>
10010fca:	f1b8 0f00 	cmp.w	r8, #0
10010fce:	d1d0      	bne.n	10010f72 <validate_components+0x52>
        appendToUint32Buffer(random_number_hist, received_random_num);
10010fd0:	f8da 0000 	ldr.w	r0, [sl]
10010fd4:	f000 fc24 	bl	10011820 <appendToUint32Buffer>
        if (validate->component_id != flash_status.component_ids[i]) {
10010fd8:	9a00      	ldr	r2, [sp, #0]
10010fda:	f856 3f04 	ldr.w	r3, [r6, #4]!
10010fde:	429a      	cmp	r2, r3
10010fe0:	d009      	beq.n	10010ff6 <validate_components+0xd6>
            print_error("Component ID: 0x%08x invalid\n", flash_status.component_ids[i]);
10010fe2:	3402      	adds	r4, #2
10010fe4:	4808      	ldr	r0, [pc, #32]	@ (10011008 <validate_components+0xe8>)
10010fe6:	f004 fe51 	bl	10015c8c <printf>
10010fea:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
10010fee:	480b      	ldr	r0, [pc, #44]	@ (1001101c <validate_components+0xfc>)
10010ff0:	f004 fe4c 	bl	10015c8c <printf>
10010ff4:	e7c3      	b.n	10010f7e <validate_components+0x5e>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10010ff6:	3401      	adds	r4, #1
10010ff8:	e79e      	b.n	10010f38 <validate_components+0x18>
10010ffa:	bf00      	nop
10010ffc:	20000c48 	.word	0x20000c48
10011000:	20000000 	.word	0x20000000
10011004:	20000c38 	.word	0x20000c38
10011008:	10023f88 	.word	0x10023f88
1001100c:	100241cf 	.word	0x100241cf
10011010:	10023f85 	.word	0x10023f85
10011014:	200005e0 	.word	0x200005e0
10011018:	20000c3c 	.word	0x20000c3c
1001101c:	100241ec 	.word	0x100241ec

10011020 <boot_components>:
    }
    print_success("List\n");
    return SUCCESS_RETURN;
}

int boot_components() {
10011020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011024:	4d3a      	ldr	r5, [pc, #232]	@ (10011110 <boot_components+0xf0>)
10011026:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 10011114 <boot_components+0xf4>
1001102a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
    // Buffers for board link communication
    uint8_t receive_buffer[MAX_I2C_MESSAGE_LEN];
    uint8_t transmit_buffer[MAX_I2C_MESSAGE_LEN];

    // Send boot command to each component
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1001102e:	2700      	movs	r7, #0
10011030:	f1a5 0b04 	sub.w	fp, r5, #4
10011034:	f8db 3004 	ldr.w	r3, [fp, #4]
10011038:	42bb      	cmp	r3, r7
1001103a:	d801      	bhi.n	10011040 <boot_components+0x20>
        appendToUint32Buffer(random_number_hist, received_random_num);

        // Print boot message from component
        print_info("0x%08x>%s\n", flash_status.component_ids[i], receive_buffer);
    }
    return SUCCESS_RETURN;
1001103c:	2000      	movs	r0, #0
1001103e:	e028      	b.n	10011092 <boot_components+0x72>
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10011040:	6868      	ldr	r0, [r5, #4]
10011042:	f000 fb97 	bl	10011774 <component_id_to_i2c_addr>
        command->opcode = COMPONENT_CMD_BOOT;
10011046:	2303      	movs	r3, #3
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
10011048:	4604      	mov	r4, r0
        attach_key(command);
1001104a:	a844      	add	r0, sp, #272	@ 0x110
        command->opcode = COMPONENT_CMD_BOOT;
1001104c:	f88d 3110 	strb.w	r3, [sp, #272]	@ 0x110
        attach_key(command);
10011050:	f7ff fb9a 	bl	10010788 <attach_key>
        attach_random_num(command, addr);
10011054:	4621      	mov	r1, r4
10011056:	a844      	add	r0, sp, #272	@ 0x110
10011058:	f7ff fbb4 	bl	100107c4 <attach_random_num>
        int len = issue_cmd(addr, transmit_buffer, receive_buffer, PACKET_SIZE);
1001105c:	4b2e      	ldr	r3, [pc, #184]	@ (10011118 <boot_components+0xf8>)
1001105e:	aa04      	add	r2, sp, #16
10011060:	681b      	ldr	r3, [r3, #0]
10011062:	a944      	add	r1, sp, #272	@ 0x110
10011064:	4620      	mov	r0, r4
10011066:	f7ff fdad 	bl	10010bc4 <issue_cmd>
        if (len == ERROR_RETURN) {
1001106a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
        int len = issue_cmd(addr, transmit_buffer, receive_buffer, PACKET_SIZE);
1001106e:	4681      	mov	r9, r0
        if (len == ERROR_RETURN) {
10011070:	d113      	bne.n	1001109a <boot_components+0x7a>
            print_error("Could not boot component\n");
10011072:	482a      	ldr	r0, [pc, #168]	@ (1001111c <boot_components+0xfc>)
10011074:	f004 fe0a 	bl	10015c8c <printf>
10011078:	4829      	ldr	r0, [pc, #164]	@ (10011120 <boot_components+0x100>)
1001107a:	f007 fd33 	bl	10018ae4 <puts>
1001107e:	4829      	ldr	r0, [pc, #164]	@ (10011124 <boot_components+0x104>)
10011080:	f004 fe04 	bl	10015c8c <printf>
10011084:	f8d8 3000 	ldr.w	r3, [r8]
10011088:	6898      	ldr	r0, [r3, #8]
1001108a:	f007 ff9f 	bl	10018fcc <fflush>
            return ERROR_RETURN;
1001108e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10011092:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
10011096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(received_rn_buffer, receive_buffer + start_index, sizeof(received_rn_buffer));
1001109a:	a803      	add	r0, sp, #12
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
1001109c:	f8df a088 	ldr.w	sl, [pc, #136]	@ 10011128 <boot_components+0x108>
        memcpy(received_rn_buffer, receive_buffer + start_index, sizeof(received_rn_buffer));
100110a0:	f850 2009 	ldr.w	r2, [r0, r9]
100110a4:	6002      	str	r2, [r0, #0]
        uint32_t received_random_num = uint8_array_to_uint32(received_rn_buffer);
100110a6:	f7ff fb49 	bl	1001073c <uint8_array_to_uint32>
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
100110aa:	4601      	mov	r1, r0
        uint32_t received_random_num = uint8_array_to_uint32(received_rn_buffer);
100110ac:	4606      	mov	r6, r0
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
100110ae:	f8da 0000 	ldr.w	r0, [sl]
100110b2:	f000 fbcf 	bl	10011854 <searchUint32Buffer>
        if (!hash_equal(command->authkey, &receive_buffer[len-HASH_SIZE-4]) || received_random_num != getValue(&dict, addr) || seen){
100110b6:	f1a9 0114 	sub.w	r1, r9, #20
100110ba:	ab04      	add	r3, sp, #16
        int seen = searchUint32Buffer(random_number_hist, received_random_num);
100110bc:	9001      	str	r0, [sp, #4]
        if (!hash_equal(command->authkey, &receive_buffer[len-HASH_SIZE-4]) || received_random_num != getValue(&dict, addr) || seen){
100110be:	4419      	add	r1, r3
100110c0:	f20d 1011 	addw	r0, sp, #273	@ 0x111
100110c4:	f7ff fb45 	bl	10010752 <hash_equal>
100110c8:	2800      	cmp	r0, #0
100110ca:	d0d2      	beq.n	10011072 <boot_components+0x52>
100110cc:	4621      	mov	r1, r4
100110ce:	4817      	ldr	r0, [pc, #92]	@ (1001112c <boot_components+0x10c>)
100110d0:	f000 fbf3 	bl	100118ba <getValue>
100110d4:	42b0      	cmp	r0, r6
100110d6:	4601      	mov	r1, r0
100110d8:	d1cb      	bne.n	10011072 <boot_components+0x52>
100110da:	9b01      	ldr	r3, [sp, #4]
100110dc:	2b00      	cmp	r3, #0
100110de:	d1c8      	bne.n	10011072 <boot_components+0x52>
        appendToUint32Buffer(random_number_hist, received_random_num);
100110e0:	f8da 0000 	ldr.w	r0, [sl]
100110e4:	f000 fb9c 	bl	10011820 <appendToUint32Buffer>
        print_info("0x%08x>%s\n", flash_status.component_ids[i], receive_buffer);
100110e8:	4811      	ldr	r0, [pc, #68]	@ (10011130 <boot_components+0x110>)
100110ea:	f004 fdcf 	bl	10015c8c <printf>
100110ee:	f855 1f04 	ldr.w	r1, [r5, #4]!
100110f2:	4810      	ldr	r0, [pc, #64]	@ (10011134 <boot_components+0x114>)
100110f4:	aa04      	add	r2, sp, #16
100110f6:	f004 fdc9 	bl	10015c8c <printf>
100110fa:	480a      	ldr	r0, [pc, #40]	@ (10011124 <boot_components+0x104>)
100110fc:	f004 fdc6 	bl	10015c8c <printf>
10011100:	f8d8 3000 	ldr.w	r3, [r8]
10011104:	6898      	ldr	r0, [r3, #8]
10011106:	f007 ff61 	bl	10018fcc <fflush>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1001110a:	3701      	adds	r7, #1
1001110c:	e792      	b.n	10011034 <boot_components+0x14>
1001110e:	bf00      	nop
10011110:	20000c48 	.word	0x20000c48
10011114:	200005e0 	.word	0x200005e0
10011118:	20000000 	.word	0x20000000
1001111c:	10023f88 	.word	0x10023f88
10011120:	1002425a 	.word	0x1002425a
10011124:	10023f85 	.word	0x10023f85
10011128:	20000c38 	.word	0x20000c38
1001112c:	20000c3c 	.word	0x20000c3c
10011130:	1002422c 	.word	0x1002422c
10011134:	10024273 	.word	0x10024273

10011138 <attest_component>:

int attest_component(uint32_t component_id) {
10011138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1001113c:	f5ad 7d32 	sub.w	sp, sp, #712	@ 0x2c8
10011140:	af02      	add	r7, sp, #8
10011142:	4605      	mov	r5, r0
    size_t RECEIVE_SIZE = 224;
    uint8_t receive_buffer[RECEIVE_SIZE];
    uint8_t transmit_buffer[MAX_I2C_MESSAGE_LEN];

    // Set the I2C address of the component
    i2c_addr_t addr = component_id_to_i2c_addr(component_id);
10011144:	f000 fb16 	bl	10011774 <component_id_to_i2c_addr>
10011148:	4604      	mov	r4, r0

    // Exchange AES key using RSA
    exchange_aes_key(addr);
1001114a:	f7ff fe5b 	bl	10010e04 <exchange_aes_key>
    // Create command message
    command_message *command = (command_message *)transmit_buffer;
    command->opcode = COMPONENT_CMD_ATTEST;
1001114e:	2304      	movs	r3, #4

    // Attach authentication hash
    attach_key(command);
10011150:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
    command->opcode = COMPONENT_CMD_ATTEST;
10011154:	f887 31c0 	strb.w	r3, [r7, #448]	@ 0x1c0
    attach_key(command);
10011158:	f7ff fb16 	bl	10010788 <attach_key>
    // Attach random number
    attach_random_num(command, addr);
1001115c:	4621      	mov	r1, r4
1001115e:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
10011162:	f7ff fb2f 	bl	100107c4 <attach_random_num>

    // Send out command and receive result
    memset(receive_buffer, 0, RECEIVE_SIZE);
10011166:	22e0      	movs	r2, #224	@ 0xe0
10011168:	2100      	movs	r1, #0
1001116a:	4638      	mov	r0, r7
1001116c:	f008 fc66 	bl	10019a3c <memset>
    int len = issue_cmd(addr, transmit_buffer, receive_buffer, PACKET_SIZE);
10011170:	4b46      	ldr	r3, [pc, #280]	@ (1001128c <attest_component+0x154>)
10011172:	463a      	mov	r2, r7
10011174:	681b      	ldr	r3, [r3, #0]
10011176:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
1001117a:	4620      	mov	r0, r4
1001117c:	f7ff fd22 	bl	10010bc4 <issue_cmd>

    if (len == ERROR_RETURN) {
10011180:	1c43      	adds	r3, r0, #1
10011182:	d115      	bne.n	100111b0 <attest_component+0x78>
        print_error("Could not attest component\n");
10011184:	4842      	ldr	r0, [pc, #264]	@ (10011290 <attest_component+0x158>)
10011186:	f004 fd81 	bl	10015c8c <printf>
1001118a:	4842      	ldr	r0, [pc, #264]	@ (10011294 <attest_component+0x15c>)
1001118c:	f007 fcaa 	bl	10018ae4 <puts>
10011190:	4841      	ldr	r0, [pc, #260]	@ (10011298 <attest_component+0x160>)
10011192:	f004 fd7b 	bl	10015c8c <printf>
10011196:	4b41      	ldr	r3, [pc, #260]	@ (1001129c <attest_component+0x164>)
10011198:	681b      	ldr	r3, [r3, #0]
1001119a:	6898      	ldr	r0, [r3, #8]
1001119c:	f007 ff16 	bl	10018fcc <fflush>
        return ERROR_RETURN;
100111a0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        print_info("C>0x%08x\n", component_id);
        print_info("%s", uint8_decrypted);
        return SUCCESS_RETURN;
    }
    return ERROR_RETURN;
}
100111a4:	4640      	mov	r0, r8
100111a6:	f507 7730 	add.w	r7, r7, #704	@ 0x2c0
100111aa:	46bd      	mov	sp, r7
100111ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint32_t uint32_receive_buffer[len / sizeof(uint32_t)];
100111b0:	f020 0403 	bic.w	r4, r0, #3
100111b4:	3407      	adds	r4, #7
100111b6:	f024 0407 	bic.w	r4, r4, #7
100111ba:	ebad 0d04 	sub.w	sp, sp, r4
100111be:	0886      	lsrs	r6, r0, #2
100111c0:	f10d 0808 	add.w	r8, sp, #8
    memset(uint32_receive_buffer, 0, len / sizeof(uint32_t));
100111c4:	4632      	mov	r2, r6
100111c6:	2100      	movs	r1, #0
100111c8:	4640      	mov	r0, r8
100111ca:	f008 fc37 	bl	10019a3c <memset>
    uint8_to_uint32(receive_buffer, sizeof(receive_buffer), uint32_receive_buffer, sizeof(uint32_receive_buffer)/sizeof(uint32_t));
100111ce:	4633      	mov	r3, r6
100111d0:	4642      	mov	r2, r8
100111d2:	21e0      	movs	r1, #224	@ 0xe0
100111d4:	4638      	mov	r0, r7
100111d6:	f7ff fa77 	bl	100106c8 <uint8_to_uint32>
    uint32_t decrypted[len / sizeof(uint32_t)]; // Decrypted data buffer
100111da:	ebad 0d04 	sub.w	sp, sp, r4
100111de:	f10d 0a08 	add.w	sl, sp, #8
    memset(decrypted, 0, len/sizeof(uint32_t));
100111e2:	4632      	mov	r2, r6
100111e4:	2100      	movs	r1, #0
100111e6:	4650      	mov	r0, sl
100111e8:	f008 fc28 	bl	10019a3c <memset>
    memset(dummydata, 0, ATTEST_SIZE / sizeof(uint32_t));
100111ec:	2238      	movs	r2, #56	@ 0x38
100111ee:	2100      	movs	r1, #0
100111f0:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
100111f4:	f008 fc22 	bl	10019a3c <memset>
    uint32_t dummyreceive[len / sizeof(uint32_t)];
100111f8:	ebad 0d04 	sub.w	sp, sp, r4
    int dummy_encrypt = AES_encrypt(0, MXC_AES_128BITS, dummydata, dummyreceive);
100111fc:	2100      	movs	r1, #0
100111fe:	ab02      	add	r3, sp, #8
10011200:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
10011204:	4608      	mov	r0, r1
10011206:	f7fe ffcb 	bl	100101a0 <AES_encrypt>
    int decrypt_success = AES_decrypt(0, MXC_AES_128BITS, MXC_AES_DECRYPT_INT_KEY, uint32_receive_buffer, decrypted);
1001120a:	2100      	movs	r1, #0
    size_t uint8_decrypted_size = num_elements * sizeof(uint32_t); // Size of the resulting uint8_t buffer
1001120c:	00b4      	lsls	r4, r6, #2
    int decrypt_success = AES_decrypt(0, MXC_AES_128BITS, MXC_AES_DECRYPT_INT_KEY, uint32_receive_buffer, decrypted);
1001120e:	4643      	mov	r3, r8
10011210:	f8cd a000 	str.w	sl, [sp]
10011214:	2202      	movs	r2, #2
10011216:	4608      	mov	r0, r1
10011218:	f7fe ffee 	bl	100101f8 <AES_decrypt>
    uint8_t uint8_decrypted[uint8_decrypted_size];
1001121c:	1de3      	adds	r3, r4, #7
1001121e:	f023 0307 	bic.w	r3, r3, #7
10011222:	ebad 0d03 	sub.w	sp, sp, r3
10011226:	f10d 0908 	add.w	r9, sp, #8
    memset(uint8_decrypted, 0, uint8_decrypted_size);
1001122a:	4622      	mov	r2, r4
1001122c:	2100      	movs	r1, #0
    int decrypt_success = AES_decrypt(0, MXC_AES_128BITS, MXC_AES_DECRYPT_INT_KEY, uint32_receive_buffer, decrypted);
1001122e:	4680      	mov	r8, r0
    memset(uint8_decrypted, 0, uint8_decrypted_size);
10011230:	4648      	mov	r0, r9
10011232:	f008 fc03 	bl	10019a3c <memset>
    uint32_to_uint8(decrypted, num_elements, uint8_decrypted, sizeof(uint8_decrypted));
10011236:	4623      	mov	r3, r4
10011238:	464a      	mov	r2, r9
1001123a:	4631      	mov	r1, r6
1001123c:	4650      	mov	r0, sl
    uint8_decrypted[buffer_size - 1] = '\0';
1001123e:	444c      	add	r4, r9
    uint32_to_uint8(decrypted, num_elements, uint8_decrypted, sizeof(uint8_decrypted));
10011240:	f7ff fa5e 	bl	10010700 <uint32_to_uint8>
    uint8_decrypted[buffer_size - 1] = '\0';
10011244:	2300      	movs	r3, #0
10011246:	f804 3c01 	strb.w	r3, [r4, #-1]
    if (decrypt_success == 0) {
1001124a:	f1b8 0f00 	cmp.w	r8, #0
1001124e:	d1a7      	bne.n	100111a0 <attest_component+0x68>
        print_info("C>0x%08x\n", component_id);
10011250:	4813      	ldr	r0, [pc, #76]	@ (100112a0 <attest_component+0x168>)
10011252:	4c12      	ldr	r4, [pc, #72]	@ (1001129c <attest_component+0x164>)
10011254:	f004 fd1a 	bl	10015c8c <printf>
10011258:	4629      	mov	r1, r5
1001125a:	4812      	ldr	r0, [pc, #72]	@ (100112a4 <attest_component+0x16c>)
1001125c:	f004 fd16 	bl	10015c8c <printf>
10011260:	480d      	ldr	r0, [pc, #52]	@ (10011298 <attest_component+0x160>)
10011262:	f004 fd13 	bl	10015c8c <printf>
10011266:	6823      	ldr	r3, [r4, #0]
10011268:	6898      	ldr	r0, [r3, #8]
1001126a:	f007 feaf 	bl	10018fcc <fflush>
        print_info("%s", uint8_decrypted);
1001126e:	480c      	ldr	r0, [pc, #48]	@ (100112a0 <attest_component+0x168>)
10011270:	f004 fd0c 	bl	10015c8c <printf>
10011274:	4649      	mov	r1, r9
10011276:	480c      	ldr	r0, [pc, #48]	@ (100112a8 <attest_component+0x170>)
10011278:	f004 fd08 	bl	10015c8c <printf>
1001127c:	4806      	ldr	r0, [pc, #24]	@ (10011298 <attest_component+0x160>)
1001127e:	f004 fd05 	bl	10015c8c <printf>
10011282:	6823      	ldr	r3, [r4, #0]
10011284:	6898      	ldr	r0, [r3, #8]
10011286:	f007 fea1 	bl	10018fcc <fflush>
        return SUCCESS_RETURN;
1001128a:	e78b      	b.n	100111a4 <attest_component+0x6c>
1001128c:	20000000 	.word	0x20000000
10011290:	10023f88 	.word	0x10023f88
10011294:	1002427e 	.word	0x1002427e
10011298:	10023f85 	.word	0x10023f85
1001129c:	200005e0 	.word	0x200005e0
100112a0:	1002422c 	.word	0x1002422c
100112a4:	10024299 	.word	0x10024299
100112a8:	1002408d 	.word	0x1002408d

100112ac <boot>:
/********************************* AP LOGIC ***********************************/

// Boot sequence
// YOUR DESIGN MUST NOT CHANGE THIS FUNCTION
// Boot message is customized through the AP_BOOT_MSG macro
void boot() {
100112ac:	b508      	push	{r3, lr}
    #else
    // Everything after this point is modifiable in your design
    // LED loop to show that boot occurred
    while (1) {
        LED_On(LED1);
        MXC_Delay(500000);
100112ae:	4c13      	ldr	r4, [pc, #76]	@ (100112fc <boot+0x50>)
        LED_On(LED1);
100112b0:	2000      	movs	r0, #0
100112b2:	f002 f8f7 	bl	100134a4 <LED_On>
        MXC_Delay(500000);
100112b6:	4620      	mov	r0, r4
100112b8:	f002 faec 	bl	10013894 <MXC_Delay>
        LED_On(LED2);
100112bc:	2001      	movs	r0, #1
100112be:	f002 f8f1 	bl	100134a4 <LED_On>
        MXC_Delay(500000);
100112c2:	4620      	mov	r0, r4
100112c4:	f002 fae6 	bl	10013894 <MXC_Delay>
        LED_On(LED3);
100112c8:	2002      	movs	r0, #2
100112ca:	f002 f8eb 	bl	100134a4 <LED_On>
        MXC_Delay(500000);
100112ce:	4620      	mov	r0, r4
100112d0:	f002 fae0 	bl	10013894 <MXC_Delay>
        LED_Off(LED1);
100112d4:	2000      	movs	r0, #0
100112d6:	f002 f8ef 	bl	100134b8 <LED_Off>
        MXC_Delay(500000);
100112da:	4620      	mov	r0, r4
100112dc:	f002 fada 	bl	10013894 <MXC_Delay>
        LED_Off(LED2);
100112e0:	2001      	movs	r0, #1
100112e2:	f002 f8e9 	bl	100134b8 <LED_Off>
        MXC_Delay(500000);
100112e6:	4620      	mov	r0, r4
100112e8:	f002 fad4 	bl	10013894 <MXC_Delay>
        LED_Off(LED3);
100112ec:	2002      	movs	r0, #2
100112ee:	f002 f8e3 	bl	100134b8 <LED_Off>
        MXC_Delay(500000);
100112f2:	4620      	mov	r0, r4
100112f4:	f002 face 	bl	10013894 <MXC_Delay>
    while (1) {
100112f8:	e7da      	b.n	100112b0 <boot+0x4>
100112fa:	bf00      	nop
100112fc:	0007a120 	.word	0x0007a120

10011300 <validate_pin>:
    }
    #endif
}

// Compare the entered PIN to the correct PIN
int validate_pin() {
10011300:	b530      	push	{r4, r5, lr}
10011302:	b08f      	sub	sp, #60	@ 0x3c
    char buf[50];
    
    recv_input("Enter pin: ", buf);
10011304:	a901      	add	r1, sp, #4
10011306:	481b      	ldr	r0, [pc, #108]	@ (10011374 <validate_pin+0x74>)
    print_debug("Verifying PIN...\n");
10011308:	4d1b      	ldr	r5, [pc, #108]	@ (10011378 <validate_pin+0x78>)
    recv_input("Enter pin: ", buf);
1001130a:	f001 fb7f 	bl	10012a0c <recv_input>
    print_debug("Verifying PIN...\n");
1001130e:	481b      	ldr	r0, [pc, #108]	@ (1001137c <validate_pin+0x7c>)
10011310:	f004 fcbc 	bl	10015c8c <printf>
10011314:	481a      	ldr	r0, [pc, #104]	@ (10011380 <validate_pin+0x80>)
10011316:	f007 fbe5 	bl	10018ae4 <puts>
1001131a:	481a      	ldr	r0, [pc, #104]	@ (10011384 <validate_pin+0x84>)
1001131c:	f004 fcb6 	bl	10015c8c <printf>
10011320:	682b      	ldr	r3, [r5, #0]
10011322:	6898      	ldr	r0, [r3, #8]
10011324:	f007 fe52 	bl	10018fcc <fflush>
    if(bcrypt_checkpw(buf, AP_PIN)==0){
10011328:	4917      	ldr	r1, [pc, #92]	@ (10011388 <validate_pin+0x88>)
1001132a:	a801      	add	r0, sp, #4
1001132c:	f000 f9fc 	bl	10011728 <bcrypt_checkpw>
10011330:	4604      	mov	r4, r0
10011332:	b978      	cbnz	r0, 10011354 <validate_pin+0x54>
        print_debug("Pin Accepted!\n");     
10011334:	4811      	ldr	r0, [pc, #68]	@ (1001137c <validate_pin+0x7c>)
10011336:	f004 fca9 	bl	10015c8c <printf>
1001133a:	4814      	ldr	r0, [pc, #80]	@ (1001138c <validate_pin+0x8c>)
1001133c:	f007 fbd2 	bl	10018ae4 <puts>
10011340:	4810      	ldr	r0, [pc, #64]	@ (10011384 <validate_pin+0x84>)
10011342:	f004 fca3 	bl	10015c8c <printf>
10011346:	682b      	ldr	r3, [r5, #0]
10011348:	6898      	ldr	r0, [r3, #8]
1001134a:	f007 fe3f 	bl	10018fcc <fflush>
        
        return SUCCESS_RETURN;
    }
    print_error("Invalid PIN!\n");
    return ERROR_RETURN;
}
1001134e:	4620      	mov	r0, r4
10011350:	b00f      	add	sp, #60	@ 0x3c
10011352:	bd30      	pop	{r4, r5, pc}
    print_error("Invalid PIN!\n");
10011354:	480e      	ldr	r0, [pc, #56]	@ (10011390 <validate_pin+0x90>)
10011356:	f004 fc99 	bl	10015c8c <printf>
1001135a:	480e      	ldr	r0, [pc, #56]	@ (10011394 <validate_pin+0x94>)
1001135c:	f007 fbc2 	bl	10018ae4 <puts>
10011360:	4808      	ldr	r0, [pc, #32]	@ (10011384 <validate_pin+0x84>)
10011362:	f004 fc93 	bl	10015c8c <printf>
10011366:	682b      	ldr	r3, [r5, #0]
10011368:	6898      	ldr	r0, [r3, #8]
1001136a:	f007 fe2f 	bl	10018fcc <fflush>
    return ERROR_RETURN;
1001136e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
10011372:	e7ec      	b.n	1001134e <validate_pin+0x4e>
10011374:	100242a3 	.word	0x100242a3
10011378:	200005e0 	.word	0x200005e0
1001137c:	10023f53 	.word	0x10023f53
10011380:	100242af 	.word	0x100242af
10011384:	10023f85 	.word	0x10023f85
10011388:	100242c0 	.word	0x100242c0
1001138c:	100242c7 	.word	0x100242c7
10011390:	10023f88 	.word	0x10023f88
10011394:	100242d5 	.word	0x100242d5

10011398 <validate_token>:

// Function to validate the replacement token
int validate_token() {
10011398:	b530      	push	{r4, r5, lr}
1001139a:	b08f      	sub	sp, #60	@ 0x3c
    char buf[50];
    recv_input("Enter token: ", buf);
1001139c:	a901      	add	r1, sp, #4
1001139e:	481b      	ldr	r0, [pc, #108]	@ (1001140c <validate_token+0x74>)
    print_debug("Verifying Token...\n");
100113a0:	4d1b      	ldr	r5, [pc, #108]	@ (10011410 <validate_token+0x78>)
    recv_input("Enter token: ", buf);
100113a2:	f001 fb33 	bl	10012a0c <recv_input>
    print_debug("Verifying Token...\n");
100113a6:	481b      	ldr	r0, [pc, #108]	@ (10011414 <validate_token+0x7c>)
100113a8:	f004 fc70 	bl	10015c8c <printf>
100113ac:	481a      	ldr	r0, [pc, #104]	@ (10011418 <validate_token+0x80>)
100113ae:	f007 fb99 	bl	10018ae4 <puts>
100113b2:	481a      	ldr	r0, [pc, #104]	@ (1001141c <validate_token+0x84>)
100113b4:	f004 fc6a 	bl	10015c8c <printf>
100113b8:	682b      	ldr	r3, [r5, #0]
100113ba:	6898      	ldr	r0, [r3, #8]
100113bc:	f007 fe06 	bl	10018fcc <fflush>
    
    if(bcrypt_checkpw(buf, AP_TOKEN)==0){
100113c0:	4917      	ldr	r1, [pc, #92]	@ (10011420 <validate_token+0x88>)
100113c2:	a801      	add	r0, sp, #4
100113c4:	f000 f9b0 	bl	10011728 <bcrypt_checkpw>
100113c8:	4604      	mov	r4, r0
100113ca:	b978      	cbnz	r0, 100113ec <validate_token+0x54>

        print_debug("Token Accepted!\n");
100113cc:	4811      	ldr	r0, [pc, #68]	@ (10011414 <validate_token+0x7c>)
100113ce:	f004 fc5d 	bl	10015c8c <printf>
100113d2:	4814      	ldr	r0, [pc, #80]	@ (10011424 <validate_token+0x8c>)
100113d4:	f007 fb86 	bl	10018ae4 <puts>
100113d8:	4810      	ldr	r0, [pc, #64]	@ (1001141c <validate_token+0x84>)
100113da:	f004 fc57 	bl	10015c8c <printf>
100113de:	682b      	ldr	r3, [r5, #0]
100113e0:	6898      	ldr	r0, [r3, #8]
100113e2:	f007 fdf3 	bl	10018fcc <fflush>
        return SUCCESS_RETURN;
    }
    
    print_error("Invalid Token!\n");
    return ERROR_RETURN;
}
100113e6:	4620      	mov	r0, r4
100113e8:	b00f      	add	sp, #60	@ 0x3c
100113ea:	bd30      	pop	{r4, r5, pc}
    print_error("Invalid Token!\n");
100113ec:	480e      	ldr	r0, [pc, #56]	@ (10011428 <validate_token+0x90>)
100113ee:	f004 fc4d 	bl	10015c8c <printf>
100113f2:	480e      	ldr	r0, [pc, #56]	@ (1001142c <validate_token+0x94>)
100113f4:	f007 fb76 	bl	10018ae4 <puts>
100113f8:	4808      	ldr	r0, [pc, #32]	@ (1001141c <validate_token+0x84>)
100113fa:	f004 fc47 	bl	10015c8c <printf>
100113fe:	682b      	ldr	r3, [r5, #0]
10011400:	6898      	ldr	r0, [r3, #8]
10011402:	f007 fde3 	bl	10018fcc <fflush>
    return ERROR_RETURN;
10011406:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
1001140a:	e7ec      	b.n	100113e6 <validate_token+0x4e>
1001140c:	100242e2 	.word	0x100242e2
10011410:	200005e0 	.word	0x200005e0
10011414:	10023f53 	.word	0x10023f53
10011418:	100242f0 	.word	0x100242f0
1001141c:	10023f85 	.word	0x10023f85
10011420:	10024303 	.word	0x10024303
10011424:	10024314 	.word	0x10024314
10011428:	10023f88 	.word	0x10023f88
1001142c:	10024324 	.word	0x10024324

10011430 <attempt_boot>:

// Boot the components and board if the components validate
void attempt_boot() {
10011430:	b510      	push	{r4, lr}
    exchange_hash_key();
10011432:	f7ff fbd7 	bl	10010be4 <exchange_hash_key>
    if (validate_components()) {
10011436:	f7ff fd73 	bl	10010f20 <validate_components>
1001143a:	4c1b      	ldr	r4, [pc, #108]	@ (100114a8 <attempt_boot+0x78>)
1001143c:	b170      	cbz	r0, 1001145c <attempt_boot+0x2c>
        print_error("Components could not be validated\n");
1001143e:	481b      	ldr	r0, [pc, #108]	@ (100114ac <attempt_boot+0x7c>)
10011440:	f004 fc24 	bl	10015c8c <printf>
10011444:	481a      	ldr	r0, [pc, #104]	@ (100114b0 <attempt_boot+0x80>)
        return;
    }
    if (boot_components()) {
        print_error("Failed to boot all components\n");
10011446:	f007 fb4d 	bl	10018ae4 <puts>
1001144a:	481a      	ldr	r0, [pc, #104]	@ (100114b4 <attempt_boot+0x84>)
1001144c:	f004 fc1e 	bl	10015c8c <printf>
10011450:	6823      	ldr	r3, [r4, #0]
    // This always needs to be printed when booting
    print_info("AP>%s\n", AP_BOOT_MSG);
    print_success("Boot\n");
    // Boot
    boot();
}
10011452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        print_error("Failed to boot all components\n");
10011456:	6898      	ldr	r0, [r3, #8]
10011458:	f007 bdb8 	b.w	10018fcc <fflush>
    if (boot_components()) {
1001145c:	f7ff fde0 	bl	10011020 <boot_components>
10011460:	b120      	cbz	r0, 1001146c <attempt_boot+0x3c>
        print_error("Failed to boot all components\n");
10011462:	4812      	ldr	r0, [pc, #72]	@ (100114ac <attempt_boot+0x7c>)
10011464:	f004 fc12 	bl	10015c8c <printf>
10011468:	4813      	ldr	r0, [pc, #76]	@ (100114b8 <attempt_boot+0x88>)
1001146a:	e7ec      	b.n	10011446 <attempt_boot+0x16>
    print_info("AP>%s\n", AP_BOOT_MSG);
1001146c:	4813      	ldr	r0, [pc, #76]	@ (100114bc <attempt_boot+0x8c>)
1001146e:	f004 fc0d 	bl	10015c8c <printf>
10011472:	4913      	ldr	r1, [pc, #76]	@ (100114c0 <attempt_boot+0x90>)
10011474:	4813      	ldr	r0, [pc, #76]	@ (100114c4 <attempt_boot+0x94>)
10011476:	f004 fc09 	bl	10015c8c <printf>
1001147a:	480e      	ldr	r0, [pc, #56]	@ (100114b4 <attempt_boot+0x84>)
1001147c:	f004 fc06 	bl	10015c8c <printf>
10011480:	6823      	ldr	r3, [r4, #0]
10011482:	6898      	ldr	r0, [r3, #8]
10011484:	f007 fda2 	bl	10018fcc <fflush>
    print_success("Boot\n");
10011488:	480f      	ldr	r0, [pc, #60]	@ (100114c8 <attempt_boot+0x98>)
1001148a:	f004 fbff 	bl	10015c8c <printf>
1001148e:	480f      	ldr	r0, [pc, #60]	@ (100114cc <attempt_boot+0x9c>)
10011490:	f007 fb28 	bl	10018ae4 <puts>
10011494:	4807      	ldr	r0, [pc, #28]	@ (100114b4 <attempt_boot+0x84>)
10011496:	f004 fbf9 	bl	10015c8c <printf>
1001149a:	6823      	ldr	r3, [r4, #0]
1001149c:	6898      	ldr	r0, [r3, #8]
1001149e:	f007 fd95 	bl	10018fcc <fflush>
    boot();
100114a2:	f7ff ff03 	bl	100112ac <boot>
100114a6:	bf00      	nop
100114a8:	200005e0 	.word	0x200005e0
100114ac:	10023f88 	.word	0x10023f88
100114b0:	1002420a 	.word	0x1002420a
100114b4:	10023f85 	.word	0x10023f85
100114b8:	10024333 	.word	0x10024333
100114bc:	1002422c 	.word	0x1002422c
100114c0:	10024351 	.word	0x10024351
100114c4:	10024363 	.word	0x10024363
100114c8:	10024249 	.word	0x10024249
100114cc:	1002436a 	.word	0x1002436a

100114d0 <attempt_replace>:

// Replace a component if the PIN is correct
void attempt_replace() {
100114d0:	b530      	push	{r4, r5, lr}
100114d2:	b091      	sub	sp, #68	@ 0x44
    char buf[50];

    if (validate_token()) {
100114d4:	f7ff ff60 	bl	10011398 <validate_token>
100114d8:	4604      	mov	r4, r0
100114da:	2800      	cmp	r0, #0
100114dc:	d154      	bne.n	10011588 <attempt_replace+0xb8>
        return;
    }

    uint32_t component_id_in = 0;
    uint32_t component_id_out = 0;
100114de:	e9cd 0001 	strd	r0, r0, [sp, #4]

    recv_input("Component ID In: ", buf);
100114e2:	a903      	add	r1, sp, #12
100114e4:	482a      	ldr	r0, [pc, #168]	@ (10011590 <attempt_replace+0xc0>)
100114e6:	f001 fa91 	bl	10012a0c <recv_input>
    sscanf(buf, "%x", &component_id_in);
100114ea:	aa01      	add	r2, sp, #4
100114ec:	4929      	ldr	r1, [pc, #164]	@ (10011594 <attempt_replace+0xc4>)
100114ee:	a803      	add	r0, sp, #12
100114f0:	f007 fda6 	bl	10019040 <sscanf>
    recv_input("Component ID Out: ", buf);
100114f4:	4828      	ldr	r0, [pc, #160]	@ (10011598 <attempt_replace+0xc8>)
100114f6:	a903      	add	r1, sp, #12
100114f8:	f001 fa88 	bl	10012a0c <recv_input>
    sscanf(buf, "%x", &component_id_out);
100114fc:	4925      	ldr	r1, [pc, #148]	@ (10011594 <attempt_replace+0xc4>)
100114fe:	aa02      	add	r2, sp, #8
10011500:	a803      	add	r0, sp, #12
10011502:	f007 fd9d 	bl	10019040 <sscanf>

    // Find the component to swap out
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
10011506:	4a25      	ldr	r2, [pc, #148]	@ (1001159c <attempt_replace+0xcc>)
        if (flash_status.component_ids[i] == component_id_out) {
10011508:	9802      	ldr	r0, [sp, #8]
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1001150a:	4613      	mov	r3, r2
1001150c:	f853 1f04 	ldr.w	r1, [r3, #4]!
10011510:	42a1      	cmp	r1, r4
10011512:	d10c      	bne.n	1001152e <attempt_replace+0x5e>
            return;
        }
    }

    // Component Out was not found
    print_error("Component 0x%08x is not provisioned for the system\r\n",
10011514:	4822      	ldr	r0, [pc, #136]	@ (100115a0 <attempt_replace+0xd0>)
10011516:	f004 fbb9 	bl	10015c8c <printf>
1001151a:	9902      	ldr	r1, [sp, #8]
1001151c:	4821      	ldr	r0, [pc, #132]	@ (100115a4 <attempt_replace+0xd4>)
1001151e:	f004 fbb5 	bl	10015c8c <printf>
10011522:	4821      	ldr	r0, [pc, #132]	@ (100115a8 <attempt_replace+0xd8>)
10011524:	f004 fbb2 	bl	10015c8c <printf>
10011528:	4b20      	ldr	r3, [pc, #128]	@ (100115ac <attempt_replace+0xdc>)
1001152a:	681b      	ldr	r3, [r3, #0]
1001152c:	e029      	b.n	10011582 <attempt_replace+0xb2>
        if (flash_status.component_ids[i] == component_id_out) {
1001152e:	f853 5f04 	ldr.w	r5, [r3, #4]!
10011532:	4285      	cmp	r5, r0
10011534:	d12a      	bne.n	1001158c <attempt_replace+0xbc>
            flash_status.component_ids[i] = component_id_in;
10011536:	3402      	adds	r4, #2
10011538:	9b01      	ldr	r3, [sp, #4]
            flash_simple_erase_page(FLASH_ADDR);
1001153a:	481d      	ldr	r0, [pc, #116]	@ (100115b0 <attempt_replace+0xe0>)
            flash_status.component_ids[i] = component_id_in;
1001153c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
            flash_simple_erase_page(FLASH_ADDR);
10011540:	f001 fd28 	bl	10012f94 <flash_simple_erase_page>
            flash_simple_write(FLASH_ADDR, (uint32_t *)&flash_status,
10011544:	4915      	ldr	r1, [pc, #84]	@ (1001159c <attempt_replace+0xcc>)
10011546:	481a      	ldr	r0, [pc, #104]	@ (100115b0 <attempt_replace+0xe0>)
            print_debug("Replaced 0x%08x with 0x%08x\n", component_id_out,
10011548:	4c18      	ldr	r4, [pc, #96]	@ (100115ac <attempt_replace+0xdc>)
            flash_simple_write(FLASH_ADDR, (uint32_t *)&flash_status,
1001154a:	2288      	movs	r2, #136	@ 0x88
1001154c:	f001 fd26 	bl	10012f9c <flash_simple_write>
            print_debug("Replaced 0x%08x with 0x%08x\n", component_id_out,
10011550:	4818      	ldr	r0, [pc, #96]	@ (100115b4 <attempt_replace+0xe4>)
10011552:	f004 fb9b 	bl	10015c8c <printf>
10011556:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
1001155a:	4817      	ldr	r0, [pc, #92]	@ (100115b8 <attempt_replace+0xe8>)
1001155c:	f004 fb96 	bl	10015c8c <printf>
10011560:	4811      	ldr	r0, [pc, #68]	@ (100115a8 <attempt_replace+0xd8>)
10011562:	f004 fb93 	bl	10015c8c <printf>
10011566:	6823      	ldr	r3, [r4, #0]
10011568:	6898      	ldr	r0, [r3, #8]
1001156a:	f007 fd2f 	bl	10018fcc <fflush>
            print_success("Replace\n");
1001156e:	4813      	ldr	r0, [pc, #76]	@ (100115bc <attempt_replace+0xec>)
10011570:	f004 fb8c 	bl	10015c8c <printf>
10011574:	4812      	ldr	r0, [pc, #72]	@ (100115c0 <attempt_replace+0xf0>)
10011576:	f007 fab5 	bl	10018ae4 <puts>
1001157a:	480b      	ldr	r0, [pc, #44]	@ (100115a8 <attempt_replace+0xd8>)
1001157c:	f004 fb86 	bl	10015c8c <printf>
10011580:	6823      	ldr	r3, [r4, #0]
    print_error("Component 0x%08x is not provisioned for the system\r\n",
10011582:	6898      	ldr	r0, [r3, #8]
10011584:	f007 fd22 	bl	10018fcc <fflush>
                component_id_out);
}
10011588:	b011      	add	sp, #68	@ 0x44
1001158a:	bd30      	pop	{r4, r5, pc}
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1001158c:	3401      	adds	r4, #1
1001158e:	e7bf      	b.n	10011510 <attempt_replace+0x40>
10011590:	1002436f 	.word	0x1002436f
10011594:	10024381 	.word	0x10024381
10011598:	10024384 	.word	0x10024384
1001159c:	20000c44 	.word	0x20000c44
100115a0:	10023f88 	.word	0x10023f88
100115a4:	100243bc 	.word	0x100243bc
100115a8:	10023f85 	.word	0x10023f85
100115ac:	200005e0 	.word	0x200005e0
100115b0:	1007c000 	.word	0x1007c000
100115b4:	10023f53 	.word	0x10023f53
100115b8:	10024397 	.word	0x10024397
100115bc:	10024249 	.word	0x10024249
100115c0:	100243b4 	.word	0x100243b4

100115c4 <attempt_attest>:

// Attest a component if the PIN is correct
void attempt_attest() {
100115c4:	b500      	push	{lr}
100115c6:	b08f      	sub	sp, #60	@ 0x3c
    exchange_hash_key();
100115c8:	f7ff fb0c 	bl	10010be4 <exchange_hash_key>
    char buf[50];

    if (validate_pin()) {
100115cc:	f7ff fe98 	bl	10011300 <validate_pin>
100115d0:	b9d0      	cbnz	r0, 10011608 <attempt_attest+0x44>
        return;
    }
    uint32_t component_id;
    recv_input("Component ID: ", buf);
100115d2:	480f      	ldr	r0, [pc, #60]	@ (10011610 <attempt_attest+0x4c>)
100115d4:	a901      	add	r1, sp, #4
100115d6:	f001 fa19 	bl	10012a0c <recv_input>
    sscanf(buf, "%x", &component_id);
100115da:	490e      	ldr	r1, [pc, #56]	@ (10011614 <attempt_attest+0x50>)
100115dc:	466a      	mov	r2, sp
100115de:	a801      	add	r0, sp, #4
100115e0:	f007 fd2e 	bl	10019040 <sscanf>
    if (attest_component(component_id) == SUCCESS_RETURN) {
100115e4:	9800      	ldr	r0, [sp, #0]
100115e6:	f7ff fda7 	bl	10011138 <attest_component>
100115ea:	b968      	cbnz	r0, 10011608 <attempt_attest+0x44>
        print_success("Attest\n");
100115ec:	480a      	ldr	r0, [pc, #40]	@ (10011618 <attempt_attest+0x54>)
100115ee:	f004 fb4d 	bl	10015c8c <printf>
100115f2:	480a      	ldr	r0, [pc, #40]	@ (1001161c <attempt_attest+0x58>)
100115f4:	f007 fa76 	bl	10018ae4 <puts>
100115f8:	4809      	ldr	r0, [pc, #36]	@ (10011620 <attempt_attest+0x5c>)
100115fa:	f004 fb47 	bl	10015c8c <printf>
100115fe:	4b09      	ldr	r3, [pc, #36]	@ (10011624 <attempt_attest+0x60>)
10011600:	681b      	ldr	r3, [r3, #0]
10011602:	6898      	ldr	r0, [r3, #8]
10011604:	f007 fce2 	bl	10018fcc <fflush>
    }
}
10011608:	b00f      	add	sp, #60	@ 0x3c
1001160a:	f85d fb04 	ldr.w	pc, [sp], #4
1001160e:	bf00      	nop
10011610:	100243f1 	.word	0x100243f1
10011614:	10024381 	.word	0x10024381
10011618:	10024249 	.word	0x10024249
1001161c:	10024400 	.word	0x10024400
10011620:	10023f85 	.word	0x10023f85
10011624:	200005e0 	.word	0x200005e0

10011628 <main>:

/*********************************** MAIN *************************************/

int main() {
10011628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001162c:	b09a      	sub	sp, #104	@ 0x68
    // Initialize board
    init();
1001162e:	f7ff fb81 	bl	10010d34 <init>

    // Print the component IDs to be helpful
    // Your design does not need to do this
    print_info("Application Processor Started\n");
10011632:	482c      	ldr	r0, [pc, #176]	@ (100116e4 <main+0xbc>)
10011634:	4c2c      	ldr	r4, [pc, #176]	@ (100116e8 <main+0xc0>)
    // Handle commands forever
    char buf[100];
    while (1) {
        recv_input("Enter Command: ", buf);
10011636:	4f2d      	ldr	r7, [pc, #180]	@ (100116ec <main+0xc4>)
        if (!valid_device) {
10011638:	4e2d      	ldr	r6, [pc, #180]	@ (100116f0 <main+0xc8>)
            print_error("Invalid Device!");
            break;
        }
        // Execute requested command
        if (!strcmp(buf, "list")) {
1001163a:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 100116f4 <main+0xcc>
    print_info("Application Processor Started\n");
1001163e:	f004 fb25 	bl	10015c8c <printf>
10011642:	482d      	ldr	r0, [pc, #180]	@ (100116f8 <main+0xd0>)
10011644:	f007 fa4e 	bl	10018ae4 <puts>
10011648:	482c      	ldr	r0, [pc, #176]	@ (100116fc <main+0xd4>)
1001164a:	f004 fb1f 	bl	10015c8c <printf>
1001164e:	6823      	ldr	r3, [r4, #0]
10011650:	6898      	ldr	r0, [r3, #8]
10011652:	f007 fcbb 	bl	10018fcc <fflush>
        recv_input("Enter Command: ", buf);
10011656:	a901      	add	r1, sp, #4
10011658:	4638      	mov	r0, r7
1001165a:	f001 f9d7 	bl	10012a0c <recv_input>
        if (!valid_device) {
1001165e:	7835      	ldrb	r5, [r6, #0]
10011660:	b375      	cbz	r5, 100116c0 <main+0x98>
        if (!strcmp(buf, "list")) {
10011662:	4641      	mov	r1, r8
10011664:	a801      	add	r0, sp, #4
10011666:	f008 fb3b 	bl	10019ce0 <strcmp>
1001166a:	b910      	cbnz	r0, 10011672 <main+0x4a>
            //scan_components();
            test_secure_send();
1001166c:	f7ff fa46 	bl	10010afc <test_secure_send>
10011670:	e7f1      	b.n	10011656 <main+0x2e>
        } else if (!strcmp(buf, "boot")) {
10011672:	4923      	ldr	r1, [pc, #140]	@ (10011700 <main+0xd8>)
10011674:	a801      	add	r0, sp, #4
10011676:	f008 fb33 	bl	10019ce0 <strcmp>
1001167a:	b910      	cbnz	r0, 10011682 <main+0x5a>
            attempt_boot();
1001167c:	f7ff fed8 	bl	10011430 <attempt_boot>
10011680:	e7e9      	b.n	10011656 <main+0x2e>
        } else if (!strcmp(buf, "replace")) {
10011682:	4920      	ldr	r1, [pc, #128]	@ (10011704 <main+0xdc>)
10011684:	a801      	add	r0, sp, #4
10011686:	f008 fb2b 	bl	10019ce0 <strcmp>
1001168a:	b910      	cbnz	r0, 10011692 <main+0x6a>
            attempt_replace();
1001168c:	f7ff ff20 	bl	100114d0 <attempt_replace>
10011690:	e7e1      	b.n	10011656 <main+0x2e>
        } else if (!strcmp(buf, "attest")) {
10011692:	491d      	ldr	r1, [pc, #116]	@ (10011708 <main+0xe0>)
10011694:	a801      	add	r0, sp, #4
10011696:	f008 fb23 	bl	10019ce0 <strcmp>
1001169a:	b910      	cbnz	r0, 100116a2 <main+0x7a>
            attempt_attest();
1001169c:	f7ff ff92 	bl	100115c4 <attempt_attest>
100116a0:	e7d9      	b.n	10011656 <main+0x2e>
        } else {
            print_error("Unrecognized command '%s'\n", buf);
100116a2:	481a      	ldr	r0, [pc, #104]	@ (1001170c <main+0xe4>)
100116a4:	f004 faf2 	bl	10015c8c <printf>
100116a8:	a901      	add	r1, sp, #4
100116aa:	4819      	ldr	r0, [pc, #100]	@ (10011710 <main+0xe8>)
100116ac:	f004 faee 	bl	10015c8c <printf>
100116b0:	4812      	ldr	r0, [pc, #72]	@ (100116fc <main+0xd4>)
100116b2:	f004 faeb 	bl	10015c8c <printf>
100116b6:	6823      	ldr	r3, [r4, #0]
100116b8:	6898      	ldr	r0, [r3, #8]
100116ba:	f007 fc87 	bl	10018fcc <fflush>
100116be:	e7ca      	b.n	10011656 <main+0x2e>
            print_error("Invalid Device!");
100116c0:	4812      	ldr	r0, [pc, #72]	@ (1001170c <main+0xe4>)
100116c2:	f004 fae3 	bl	10015c8c <printf>
100116c6:	4813      	ldr	r0, [pc, #76]	@ (10011714 <main+0xec>)
100116c8:	f004 fae0 	bl	10015c8c <printf>
100116cc:	480b      	ldr	r0, [pc, #44]	@ (100116fc <main+0xd4>)
100116ce:	f004 fadd 	bl	10015c8c <printf>
100116d2:	6823      	ldr	r3, [r4, #0]
100116d4:	6898      	ldr	r0, [r3, #8]
100116d6:	f007 fc79 	bl	10018fcc <fflush>
        }
    }
    // Code never reaches here
    return 0;
}
100116da:	4628      	mov	r0, r5
100116dc:	b01a      	add	sp, #104	@ 0x68
100116de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
100116e2:	bf00      	nop
100116e4:	1002422c 	.word	0x1002422c
100116e8:	200005e0 	.word	0x200005e0
100116ec:	10024425 	.word	0x10024425
100116f0:	20000c34 	.word	0x20000c34
100116f4:	10024445 	.word	0x10024445
100116f8:	10024407 	.word	0x10024407
100116fc:	10023f85 	.word	0x10023f85
10011700:	1002444a 	.word	0x1002444a
10011704:	1002444f 	.word	0x1002444f
10011708:	10024457 	.word	0x10024457
1001170c:	10023f88 	.word	0x10023f88
10011710:	1002445e 	.word	0x1002445e
10011714:	10024435 	.word	0x10024435

10011718 <bcrypt_hashpw>:
			       salt, BCRYPT_HASHSIZE);
	return (aux == NULL)?5:0;
}

int bcrypt_hashpw(const char *passwd, const char salt[BCRYPT_HASHSIZE], char hash[BCRYPT_HASHSIZE])
{
10011718:	b508      	push	{r3, lr}
	char *aux;
	aux = crypt_rn(passwd, salt, hash, BCRYPT_HASHSIZE);
1001171a:	2340      	movs	r3, #64	@ 0x40
1001171c:	f7fe fd34 	bl	10010188 <crypt_rn>
	return (aux == NULL)?1:0;
}
10011720:	fab0 f080 	clz	r0, r0
10011724:	0940      	lsrs	r0, r0, #5
10011726:	bd08      	pop	{r3, pc}

10011728 <bcrypt_checkpw>:

int bcrypt_checkpw(const char *passwd, const char hash[BCRYPT_HASHSIZE])
{
10011728:	b570      	push	{r4, r5, r6, lr}
1001172a:	b090      	sub	sp, #64	@ 0x40
	int ret;
	char outhash[BCRYPT_HASHSIZE];

	ret = bcrypt_hashpw(passwd, hash, outhash);
1001172c:	466a      	mov	r2, sp
{
1001172e:	460e      	mov	r6, r1
	ret = bcrypt_hashpw(passwd, hash, outhash);
10011730:	f7ff fff2 	bl	10011718 <bcrypt_hashpw>
	if (ret != 0)
10011734:	4604      	mov	r4, r0
10011736:	b9b0      	cbnz	r0, 10011766 <bcrypt_checkpw+0x3e>
	int len1 = strlen(str1);
10011738:	4630      	mov	r0, r6
1001173a:	f008 fd61 	bl	1001a200 <strlen>
1001173e:	4605      	mov	r5, r0
	int len2 = strlen(str2);
10011740:	4668      	mov	r0, sp
10011742:	f008 fd5d 	bl	1001a200 <strlen>
	if (len1 != len2)
10011746:	4285      	cmp	r5, r0
10011748:	d110      	bne.n	1001176c <bcrypt_checkpw+0x44>
1001174a:	466b      	mov	r3, sp
	for (i = 0; i < len1; ++i)
1001174c:	4622      	mov	r2, r4
1001174e:	4295      	cmp	r5, r2
10011750:	dc02      	bgt.n	10011758 <bcrypt_checkpw+0x30>
		return -1;

	return timing_safe_strcmp(hash, outhash);
}
10011752:	4620      	mov	r0, r4
10011754:	b010      	add	sp, #64	@ 0x40
10011756:	bd70      	pop	{r4, r5, r6, pc}
		ret |= (u1[i] ^ u2[i]);
10011758:	5cb0      	ldrb	r0, [r6, r2]
1001175a:	f813 1b01 	ldrb.w	r1, [r3], #1
1001175e:	4041      	eors	r1, r0
10011760:	430c      	orrs	r4, r1
	for (i = 0; i < len1; ++i)
10011762:	3201      	adds	r2, #1
10011764:	e7f3      	b.n	1001174e <bcrypt_checkpw+0x26>
		return -1;
10011766:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
1001176a:	e7f2      	b.n	10011752 <bcrypt_checkpw+0x2a>
		return 1;
1001176c:	2401      	movs	r4, #1
1001176e:	e7f0      	b.n	10011752 <bcrypt_checkpw+0x2a>

10011770 <board_link_init>:
 * @brief Initialize the board link connection
 * 
 * Initiailize the underlying i2c simple interface
*/
void board_link_init(void) {
    i2c_simple_controller_init();
10011770:	f001 bc20 	b.w	10012fb4 <i2c_simple_controller_init>

10011774 <component_id_to_i2c_addr>:
 * 
 * @return i2c_addr_t, i2c address
*/
i2c_addr_t component_id_to_i2c_addr(uint32_t component_id) {
    return (uint8_t) component_id & COMPONENT_ADDR_MASK;
}
10011774:	b2c0      	uxtb	r0, r0
10011776:	4770      	bx	lr

10011778 <send_packet>:
 * 
 * @return status: SUCCESS_RETURN if success, ERROR_RETURN if error
 *
 * Function sends an arbitrary packet over i2c to a specified component
*/
int send_packet(i2c_addr_t address, uint8_t len, uint8_t* packet) {
10011778:	b570      	push	{r4, r5, r6, lr}
1001177a:	4604      	mov	r4, r0
1001177c:	460d      	mov	r5, r1
1001177e:	4616      	mov	r6, r2
    int result;
    result = i2c_simple_write_receive_len(address, len);
10011780:	f001 fcba 	bl	100130f8 <i2c_simple_write_receive_len>
    if (result < SUCCESS_RETURN) {
10011784:	2800      	cmp	r0, #0
10011786:	da02      	bge.n	1001178e <send_packet+0x16>
        return ERROR_RETURN;
10011788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    result = i2c_simple_write_receive_done(address, true);
    if (result < SUCCESS_RETURN) {
        return ERROR_RETURN;
    }
    return SUCCESS_RETURN;
}
1001178c:	bd70      	pop	{r4, r5, r6, pc}
    result = i2c_simple_write_data_generic(address, RECEIVE, len, packet);
1001178e:	4633      	mov	r3, r6
10011790:	462a      	mov	r2, r5
10011792:	2100      	movs	r1, #0
10011794:	4620      	mov	r0, r4
10011796:	f001 fc4b 	bl	10013030 <i2c_simple_write_data_generic>
    if (result < SUCCESS_RETURN) {
1001179a:	2800      	cmp	r0, #0
1001179c:	dbf4      	blt.n	10011788 <send_packet+0x10>
    result = i2c_simple_write_receive_done(address, true);
1001179e:	2101      	movs	r1, #1
100117a0:	4620      	mov	r0, r4
100117a2:	f001 fca5 	bl	100130f0 <i2c_simple_write_receive_done>
    if (result < SUCCESS_RETURN) {
100117a6:	17c0      	asrs	r0, r0, #31
100117a8:	e7f0      	b.n	1001178c <send_packet+0x14>

100117aa <poll_and_receive_packet>:
 * @param address: i2c_addr_t, i2c address
 * @param packet: uint8_t*, pointer to a buffer where a packet will be received 
 * 
 * @return int: size of data received, ERROR_RETURN if error
*/
int poll_and_receive_packet(i2c_addr_t address, uint8_t* packet) {
100117aa:	b570      	push	{r4, r5, r6, lr}
100117ac:	4605      	mov	r5, r0
100117ae:	460e      	mov	r6, r1
    int result = SUCCESS_RETURN;
    while (true) {
        result = i2c_simple_read_transmit_done(address);
100117b0:	4628      	mov	r0, r5
100117b2:	f001 fc7d 	bl	100130b0 <i2c_simple_read_transmit_done>

        if (result < SUCCESS_RETURN) {
100117b6:	2800      	cmp	r0, #0
100117b8:	da03      	bge.n	100117c2 <poll_and_receive_packet+0x18>
            return ERROR_RETURN;
100117ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    result = i2c_simple_write_transmit_done(address, true);
    if (result < SUCCESS_RETURN) {
        return ERROR_RETURN;
    }
    return len;
}
100117be:	4620      	mov	r0, r4
100117c0:	bd70      	pop	{r4, r5, r6, pc}
        else if (result == SUCCESS_RETURN) {
100117c2:	d003      	beq.n	100117cc <poll_and_receive_packet+0x22>
        MXC_Delay(50);
100117c4:	2032      	movs	r0, #50	@ 0x32
100117c6:	f002 f865 	bl	10013894 <MXC_Delay>
        result = i2c_simple_read_transmit_done(address);
100117ca:	e7f1      	b.n	100117b0 <poll_and_receive_packet+0x6>
    int len = i2c_simple_read_transmit_len(address);
100117cc:	4628      	mov	r0, r5
100117ce:	f001 fc72 	bl	100130b6 <i2c_simple_read_transmit_len>
    if (len < SUCCESS_RETURN) {
100117d2:	1e04      	subs	r4, r0, #0
100117d4:	dbf1      	blt.n	100117ba <poll_and_receive_packet+0x10>
    result = i2c_simple_read_data_generic(address, TRANSMIT, (uint8_t)len, packet);
100117d6:	4633      	mov	r3, r6
100117d8:	b2e2      	uxtb	r2, r4
100117da:	2103      	movs	r1, #3
100117dc:	4628      	mov	r0, r5
100117de:	f001 fc0d 	bl	10012ffc <i2c_simple_read_data_generic>
    if (result < SUCCESS_RETURN) {
100117e2:	2800      	cmp	r0, #0
100117e4:	dbe9      	blt.n	100117ba <poll_and_receive_packet+0x10>
    result = i2c_simple_write_transmit_done(address, true);
100117e6:	2101      	movs	r1, #1
100117e8:	4628      	mov	r0, r5
100117ea:	f001 fc89 	bl	10013100 <i2c_simple_write_transmit_done>
    if (result < SUCCESS_RETURN) {
100117ee:	2800      	cmp	r0, #0
100117f0:	dae5      	bge.n	100117be <poll_and_receive_packet+0x14>
100117f2:	e7e2      	b.n	100117ba <poll_and_receive_packet+0x10>

100117f4 <createUint32Buffer>:
    uint32_t* data;
    size_t capacity;
    size_t size;
} Uint32Buffer;

Uint32Buffer* createUint32Buffer(size_t initialCapacity) {
100117f4:	b538      	push	{r3, r4, r5, lr}
100117f6:	4605      	mov	r5, r0
    Uint32Buffer* buffer = (Uint32Buffer*)malloc(sizeof(Uint32Buffer));
100117f8:	200c      	movs	r0, #12
100117fa:	f003 ff7d 	bl	100156f8 <malloc>
    if (buffer) {
100117fe:	4604      	mov	r4, r0
10011800:	b160      	cbz	r0, 1001181c <createUint32Buffer+0x28>
        buffer->data = (uint32_t*)malloc(initialCapacity * sizeof(uint32_t));
10011802:	00a8      	lsls	r0, r5, #2
10011804:	f003 ff78 	bl	100156f8 <malloc>
10011808:	6020      	str	r0, [r4, #0]
        if (buffer->data) {
1001180a:	b120      	cbz	r0, 10011816 <createUint32Buffer+0x22>
            buffer->capacity = initialCapacity;
            buffer->size = 0;
1001180c:	2300      	movs	r3, #0
            buffer->capacity = initialCapacity;
1001180e:	6065      	str	r5, [r4, #4]
            buffer->size = 0;
10011810:	60a3      	str	r3, [r4, #8]
            free(buffer);
            buffer = NULL;
        }
    }
    return buffer;
}
10011812:	4620      	mov	r0, r4
10011814:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
10011816:	4620      	mov	r0, r4
10011818:	f003 ff76 	bl	10015708 <free>
    Uint32Buffer* buffer = (Uint32Buffer*)malloc(sizeof(Uint32Buffer));
1001181c:	2400      	movs	r4, #0
    return buffer;
1001181e:	e7f8      	b.n	10011812 <createUint32Buffer+0x1e>

10011820 <appendToUint32Buffer>:
        free(buffer->data);
        free(buffer);
    }
}

int appendToUint32Buffer(Uint32Buffer* buffer, uint32_t value) {
10011820:	b570      	push	{r4, r5, r6, lr}
10011822:	4604      	mov	r4, r0
10011824:	460d      	mov	r5, r1
    if (buffer->size >= buffer->capacity) {
        size_t newCapacity = buffer->capacity * 2;
        uint32_t* newData = (uint32_t*)realloc(buffer->data, newCapacity * sizeof(uint32_t));
10011826:	e9d0 0100 	ldrd	r0, r1, [r0]
    if (buffer->size >= buffer->capacity) {
1001182a:	68a3      	ldr	r3, [r4, #8]
1001182c:	428b      	cmp	r3, r1
1001182e:	d306      	bcc.n	1001183e <appendToUint32Buffer+0x1e>
        size_t newCapacity = buffer->capacity * 2;
10011830:	004e      	lsls	r6, r1, #1
        uint32_t* newData = (uint32_t*)realloc(buffer->data, newCapacity * sizeof(uint32_t));
10011832:	00c9      	lsls	r1, r1, #3
10011834:	f007 f95e 	bl	10018af4 <realloc>
        if (!newData) {
10011838:	b148      	cbz	r0, 1001184e <appendToUint32Buffer+0x2e>
            // Memory reallocation failed
            return -1;
        }
        buffer->data = newData;
        buffer->capacity = newCapacity;
1001183a:	e9c4 0600 	strd	r0, r6, [r4]
    }
    buffer->data[buffer->size++] = value;
1001183e:	68a3      	ldr	r3, [r4, #8]
10011840:	6822      	ldr	r2, [r4, #0]
10011842:	1c59      	adds	r1, r3, #1
10011844:	60a1      	str	r1, [r4, #8]
10011846:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    return 0;
1001184a:	2000      	movs	r0, #0
}
1001184c:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
1001184e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10011852:	e7fb      	b.n	1001184c <appendToUint32Buffer+0x2c>

10011854 <searchUint32Buffer>:

int searchUint32Buffer(const Uint32Buffer* buffer, uint32_t value) {
10011854:	b510      	push	{r4, lr}
    for (size_t i = 0; i < buffer->size; ++i) {
10011856:	6882      	ldr	r2, [r0, #8]
10011858:	2300      	movs	r3, #0
1001185a:	429a      	cmp	r2, r3
1001185c:	d101      	bne.n	10011862 <searchUint32Buffer+0xe>
        if (buffer->data[i] == value) {
            return 1; // Found
        }
    }
    return 0; // Not found
1001185e:	2000      	movs	r0, #0
}
10011860:	bd10      	pop	{r4, pc}
        if (buffer->data[i] == value) {
10011862:	6804      	ldr	r4, [r0, #0]
10011864:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
10011868:	428c      	cmp	r4, r1
1001186a:	d001      	beq.n	10011870 <searchUint32Buffer+0x1c>
    for (size_t i = 0; i < buffer->size; ++i) {
1001186c:	3301      	adds	r3, #1
1001186e:	e7f4      	b.n	1001185a <searchUint32Buffer+0x6>
            return 1; // Found
10011870:	2001      	movs	r0, #1
10011872:	e7f5      	b.n	10011860 <searchUint32Buffer+0xc>

10011874 <initDictionary>:
    if (dict->pairs != NULL || dict->size != 0) {
        return;
    }
    dict->pairs = NULL;
    dict->size = 0;
}
10011874:	4770      	bx	lr

10011876 <addOrUpdate>:

void addOrUpdate(Dictionary* dict, uint8_t key, uint32_t value) {
10011876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011878:	4604      	mov	r4, r0
1001187a:	460e      	mov	r6, r1
    for (size_t i = 0; i < dict->size; i++) {
        if (dict->pairs[i].key == key) {
1001187c:	e9d0 0100 	ldrd	r0, r1, [r0]
void addOrUpdate(Dictionary* dict, uint8_t key, uint32_t value) {
10011880:	4615      	mov	r5, r2
    for (size_t i = 0; i < dict->size; i++) {
10011882:	2300      	movs	r3, #0
10011884:	4299      	cmp	r1, r3
10011886:	d10e      	bne.n	100118a6 <addOrUpdate+0x30>
            dict->pairs[i].value = value;
            return;
        }
    }
    KeyValue* newPairs = realloc(dict->pairs, (dict->size + 1) * sizeof(KeyValue));
10011888:	3101      	adds	r1, #1
1001188a:	00c9      	lsls	r1, r1, #3
1001188c:	f007 f932 	bl	10018af4 <realloc>
    if (newPairs == NULL) {
10011890:	b180      	cbz	r0, 100118b4 <addOrUpdate+0x3e>
        // Handle allocation error
        return;
    }
    dict->pairs = newPairs;
    dict->pairs[dict->size].key = key;
10011892:	6863      	ldr	r3, [r4, #4]
    dict->pairs = newPairs;
10011894:	6020      	str	r0, [r4, #0]
    dict->pairs[dict->size].key = key;
10011896:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
1001189a:	f800 6033 	strb.w	r6, [r0, r3, lsl #3]
    dict->pairs[dict->size].value = value;
    dict->size += 1;
1001189e:	3301      	adds	r3, #1
    dict->pairs[dict->size].value = value;
100118a0:	6055      	str	r5, [r2, #4]
    dict->size += 1;
100118a2:	6063      	str	r3, [r4, #4]
100118a4:	e006      	b.n	100118b4 <addOrUpdate+0x3e>
        if (dict->pairs[i].key == key) {
100118a6:	f810 7033 	ldrb.w	r7, [r0, r3, lsl #3]
100118aa:	42b7      	cmp	r7, r6
100118ac:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
100118b0:	d101      	bne.n	100118b6 <addOrUpdate+0x40>
            dict->pairs[i].value = value;
100118b2:	6055      	str	r5, [r2, #4]
}
100118b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (size_t i = 0; i < dict->size; i++) {
100118b6:	3301      	adds	r3, #1
100118b8:	e7e4      	b.n	10011884 <addOrUpdate+0xe>

100118ba <getValue>:

uint32_t getValue(Dictionary* dict, uint8_t key) {
100118ba:	b530      	push	{r4, r5, lr}
    for (size_t i = 0; i < dict->size; i++) {
100118bc:	6844      	ldr	r4, [r0, #4]
100118be:	2300      	movs	r3, #0
100118c0:	429c      	cmp	r4, r3
100118c2:	d102      	bne.n	100118ca <getValue+0x10>
        if (dict->pairs[i].key == key) {
            return dict->pairs[i].value;
        }
    }
    return 0xFFFFFFFF; // Key not found
100118c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100118c8:	e007      	b.n	100118da <getValue+0x20>
        if (dict->pairs[i].key == key) {
100118ca:	6802      	ldr	r2, [r0, #0]
100118cc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
100118d0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
100118d4:	428a      	cmp	r2, r1
100118d6:	d101      	bne.n	100118dc <getValue+0x22>
            return dict->pairs[i].value;
100118d8:	6868      	ldr	r0, [r5, #4]
}
100118da:	bd30      	pop	{r4, r5, pc}
    for (size_t i = 0; i < dict->size; i++) {
100118dc:	3301      	adds	r3, #1
100118de:	e7ef      	b.n	100118c0 <getValue+0x6>

100118e0 <freeDictionary>:

void freeDictionary(Dictionary* dict) {
100118e0:	b510      	push	{r4, lr}
100118e2:	4604      	mov	r4, r0
    free(dict->pairs);
100118e4:	6800      	ldr	r0, [r0, #0]
100118e6:	f003 ff0f 	bl	10015708 <free>
    dict->pairs = NULL;
100118ea:	2300      	movs	r3, #0
    dict->size = 0;
100118ec:	e9c4 3300 	strd	r3, r3, [r4]
100118f0:	bd10      	pop	{r4, pc}

100118f2 <fld_add>:
}


static INLINE void
fld_add(fld_t res, const fld_t a, const fld_t b)
{
100118f2:	b530      	push	{r4, r5, lr}
	int i;
	for (i = 0; i < FLD_LIMB_NUM; i++)
100118f4:	2300      	movs	r3, #0
		res[i] = a[i] + b[i];
100118f6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
100118fa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
100118fe:	442c      	add	r4, r5
10011900:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < FLD_LIMB_NUM; i++)
10011904:	3301      	adds	r3, #1
10011906:	2b0a      	cmp	r3, #10
10011908:	d1f5      	bne.n	100118f6 <fld_add+0x4>
}
1001190a:	bd30      	pop	{r4, r5, pc}

1001190c <fld_sub>:

static INLINE void
fld_sub(fld_t res, const fld_t a, const fld_t b)
{
1001190c:	b530      	push	{r4, r5, lr}
	int i;
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001190e:	2300      	movs	r3, #0
		res[i] = a[i] - b[i];
10011910:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
10011914:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
10011918:	1b64      	subs	r4, r4, r5
1001191a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001191e:	3301      	adds	r3, #1
10011920:	2b0a      	cmp	r3, #10
10011922:	d1f5      	bne.n	10011910 <fld_sub+0x4>
}
10011924:	bd30      	pop	{r4, r5, pc}

10011926 <fld_scale2>:
 */
static INLINE void
fld_scale2(fld_t res, const fld_t a)
{
	int i;
	for (i = 0; i < FLD_LIMB_NUM; i++)
10011926:	2300      	movs	r3, #0
		res[i] = a[i] << 1;
10011928:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1001192c:	0052      	lsls	r2, r2, #1
1001192e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < FLD_LIMB_NUM; i++)
10011932:	3301      	adds	r3, #1
10011934:	2b0a      	cmp	r3, #10
10011936:	d1f7      	bne.n	10011928 <fld_scale2+0x2>
}
10011938:	4770      	bx	lr
	...

1001193c <scale16>:
 *   0 <= pow <= 62
 *   2 | pow
 */
static void
scale16(struct pced *out, int pow, int x)
{
1001193c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10011940:	b09e      	sub	sp, #120	@ 0x78
10011942:	460e      	mov	r6, r1
10011944:	4615      	mov	r5, r2
	struct pced R = { { 0 }, { 0 }, { 0 } };
10011946:	2100      	movs	r1, #0
10011948:	2278      	movs	r2, #120	@ 0x78
{
1001194a:	4604      	mov	r4, r0
	struct pced R = { { 0 }, { 0 }, { 0 } };
1001194c:	4668      	mov	r0, sp
1001194e:	f008 f875 	bl	10019a3c <memset>
	limb_t mA, mB, mask;
	int neg, sgnx, absx;
	int i, k;
	
	neg = (x >> 3) & 1;
10011952:	f3c5 00c0 	ubfx	r0, r5, #3, #1
	sgnx = 1 - 2*neg;
10011956:	0043      	lsls	r3, r0, #1
10011958:	f1c3 0801 	rsb	r8, r3, #1
	absx = sgnx * x;
1001195c:	fb08 f205 	mul.w	r2, r8, r5
	pow >>= 1;

	/* handle abs(x) == 0 */
	mask = absx | (absx >> 2);
10011960:	ea42 03a2 	orr.w	r3, r2, r2, asr #2
	mask |= mask >> 1;
10011964:	ea43 0363 	orr.w	r3, r3, r3, asr #1
	mask = (mask & 1) - 1;
10011968:	f003 0301 	and.w	r3, r3, #1
1001196c:	4f3a      	ldr	r7, [pc, #232]	@ (10011a58 <scale16+0x11c>)
	pow >>= 1;
1001196e:	ea4f 0e66 	mov.w	lr, r6, asr #1
	mask = (mask & 1) - 1;
10011972:	3b01      	subs	r3, #1
	for (i = 0; i < FLD_LIMB_NUM; i++) {
10011974:	466e      	mov	r6, sp
	mask = (mask & 1) - 1;
10011976:	4669      	mov	r1, sp
	for (i = 0; i < FLD_LIMB_NUM; i++) {
10011978:	f04f 0c00 	mov.w	ip, #0
		R.diff[i] ^= pced_zero.diff[i] & mask;
1001197c:	f857 5b04 	ldr.w	r5, [r7], #4
10011980:	ea05 0903 	and.w	r9, r5, r3
10011984:	680d      	ldr	r5, [r1, #0]
10011986:	ea89 0505 	eor.w	r5, r9, r5
1001198a:	f841 5b04 	str.w	r5, [r1], #4
		R.sum[i] ^= pced_zero.sum[i] & mask;
1001198e:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
10011990:	ea03 0905 	and.w	r9, r3, r5
10011994:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
10011996:	ea85 0509 	eor.w	r5, r5, r9
1001199a:	624d      	str	r5, [r1, #36]	@ 0x24
		R.prod[i] ^= pced_zero.prod[i] & mask;
1001199c:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
1001199e:	ea03 0905 	and.w	r9, r3, r5
100119a2:	6ccd      	ldr	r5, [r1, #76]	@ 0x4c
	for (i = 0; i < FLD_LIMB_NUM; i++) {
100119a4:	f10c 0c01 	add.w	ip, ip, #1
		R.prod[i] ^= pced_zero.prod[i] & mask;
100119a8:	ea85 0509 	eor.w	r5, r5, r9
	for (i = 0; i < FLD_LIMB_NUM; i++) {
100119ac:	f1bc 0f0a 	cmp.w	ip, #10
		R.prod[i] ^= pced_zero.prod[i] & mask;
100119b0:	64cd      	str	r5, [r1, #76]	@ 0x4c
	for (i = 0; i < FLD_LIMB_NUM; i++) {
100119b2:	d1e3      	bne.n	1001197c <scale16+0x40>
100119b4:	4d29      	ldr	r5, [pc, #164]	@ (10011a5c <scale16+0x120>)
100119b6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
100119ba:	fb03 550e 	mla	r5, r3, lr, r5
100119be:	f1a2 0908 	sub.w	r9, r2, #8
	}


	/* go through our table and look for abs(x) */
	for (k = 0; k < 8; k++) {
		absx--;
100119c2:	3a01      	subs	r2, #1
		mask = absx | (absx >> 2);
100119c4:	ea42 03a2 	orr.w	r3, r2, r2, asr #2
		mask |= mask >> 1;
100119c8:	ea43 0363 	orr.w	r3, r3, r3, asr #1
		mask = (mask & 1) - 1;
100119cc:	f003 0301 	and.w	r3, r3, #1
100119d0:	3b01      	subs	r3, #1
100119d2:	46ac      	mov	ip, r5
100119d4:	4669      	mov	r1, sp
		for (i = 0; i < FLD_LIMB_NUM; i++) {
100119d6:	f04f 0e00 	mov.w	lr, #0
			R.diff[i] ^= ed_lookup[pow][k].diff[i] & mask;
100119da:	f85c 7b04 	ldr.w	r7, [ip], #4
100119de:	ea07 0a03 	and.w	sl, r7, r3
100119e2:	680f      	ldr	r7, [r1, #0]
100119e4:	ea8a 0707 	eor.w	r7, sl, r7
100119e8:	f841 7b04 	str.w	r7, [r1], #4
			R.sum[i] ^= ed_lookup[pow][k].sum[i] & mask;
100119ec:	f8dc 7024 	ldr.w	r7, [ip, #36]	@ 0x24
100119f0:	ea03 0a07 	and.w	sl, r3, r7
100119f4:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
100119f6:	ea87 070a 	eor.w	r7, r7, sl
100119fa:	624f      	str	r7, [r1, #36]	@ 0x24
			R.prod[i] ^= ed_lookup[pow][k].prod[i] & mask;
100119fc:	f8dc 704c 	ldr.w	r7, [ip, #76]	@ 0x4c
10011a00:	ea03 0a07 	and.w	sl, r3, r7
10011a04:	6ccf      	ldr	r7, [r1, #76]	@ 0x4c
		for (i = 0; i < FLD_LIMB_NUM; i++) {
10011a06:	f10e 0e01 	add.w	lr, lr, #1
			R.prod[i] ^= ed_lookup[pow][k].prod[i] & mask;
10011a0a:	ea87 070a 	eor.w	r7, r7, sl
		for (i = 0; i < FLD_LIMB_NUM; i++) {
10011a0e:	f1be 0f0a 	cmp.w	lr, #10
			R.prod[i] ^= ed_lookup[pow][k].prod[i] & mask;
10011a12:	64cf      	str	r7, [r1, #76]	@ 0x4c
		for (i = 0; i < FLD_LIMB_NUM; i++) {
10011a14:	d1e1      	bne.n	100119da <scale16+0x9e>
	for (k = 0; k < 8; k++) {
10011a16:	454a      	cmp	r2, r9
10011a18:	f105 0578 	add.w	r5, r5, #120	@ 0x78
10011a1c:	d1d1      	bne.n	100119c2 <scale16+0x86>
		}
	}

	/* conditionally negate R and write to out */
	mA = neg-1;
10011a1e:	1e47      	subs	r7, r0, #1
	mB = ~mA;
10011a20:	1f22      	subs	r2, r4, #4
10011a22:	4240      	negs	r0, r0
	for (i = 0; i < FLD_LIMB_NUM; i++) {
10011a24:	3424      	adds	r4, #36	@ 0x24
		out->diff[i] = (mA & R.diff[i]) ^ (mB & R.sum[i]);
10011a26:	f856 3b04 	ldr.w	r3, [r6], #4
10011a2a:	6a71      	ldr	r1, [r6, #36]	@ 0x24
10011a2c:	ea03 0507 	and.w	r5, r3, r7
10011a30:	ea01 0c00 	and.w	ip, r1, r0
10011a34:	ea85 050c 	eor.w	r5, r5, ip
10011a38:	f842 5f04 	str.w	r5, [r2, #4]!
		out->sum[i]  = (mB & R.diff[i]) ^ (mA & R.sum[i]);
10011a3c:	4003      	ands	r3, r0
10011a3e:	4039      	ands	r1, r7
10011a40:	404b      	eors	r3, r1
10011a42:	6293      	str	r3, [r2, #40]	@ 0x28
		out->prod[i] = sgnx * R.prod[i];
10011a44:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
	for (i = 0; i < FLD_LIMB_NUM; i++) {
10011a46:	4294      	cmp	r4, r2
		out->prod[i] = sgnx * R.prod[i];
10011a48:	fb08 f303 	mul.w	r3, r8, r3
10011a4c:	6513      	str	r3, [r2, #80]	@ 0x50
	for (i = 0; i < FLD_LIMB_NUM; i++) {
10011a4e:	d1ea      	bne.n	10011a26 <scale16+0xea>
	}
}
10011a50:	b01e      	add	sp, #120	@ 0x78
10011a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10011a56:	bf00      	nop
10011a58:	1002447c 	.word	0x1002447c
10011a5c:	10024594 	.word	0x10024594

10011a60 <ed_add_pc>:
{
10011a60:	b5f0      	push	{r4, r5, r6, r7, lr}
	fld_sub(a, P->y, P->x);
10011a62:	f101 0728 	add.w	r7, r1, #40	@ 0x28
{
10011a66:	b0d1      	sub	sp, #324	@ 0x144
10011a68:	4605      	mov	r5, r0
10011a6a:	460c      	mov	r4, r1
10011a6c:	4616      	mov	r6, r2
	fld_sub(a, P->y, P->x);
10011a6e:	4668      	mov	r0, sp
10011a70:	460a      	mov	r2, r1
10011a72:	4639      	mov	r1, r7
10011a74:	f7ff ff4a 	bl	1001190c <fld_sub>
	fld_mul(a, a, Q->diff);
10011a78:	4632      	mov	r2, r6
10011a7a:	4669      	mov	r1, sp
10011a7c:	f000 f9e5 	bl	10011e4a <fld_mul>
	fld_add(b, P->y, P->x);
10011a80:	a80a      	add	r0, sp, #40	@ 0x28
10011a82:	4622      	mov	r2, r4
10011a84:	4639      	mov	r1, r7
10011a86:	f7ff ff34 	bl	100118f2 <fld_add>
	fld_mul(b, b, Q->sum);
10011a8a:	f106 0228 	add.w	r2, r6, #40	@ 0x28
10011a8e:	4601      	mov	r1, r0
10011a90:	f000 f9db 	bl	10011e4a <fld_mul>
	fld_mul(c, P->t, Q->prod);
10011a94:	f106 0250 	add.w	r2, r6, #80	@ 0x50
10011a98:	f104 0150 	add.w	r1, r4, #80	@ 0x50
10011a9c:	a814      	add	r0, sp, #80	@ 0x50
10011a9e:	f000 f9d4 	bl	10011e4a <fld_mul>
	fld_scale2(d, P->z);
10011aa2:	f104 0178 	add.w	r1, r4, #120	@ 0x78
10011aa6:	a81e      	add	r0, sp, #120	@ 0x78
10011aa8:	f7ff ff3d 	bl	10011926 <fld_scale2>
	fld_sub(e, b, a);
10011aac:	466a      	mov	r2, sp
10011aae:	a90a      	add	r1, sp, #40	@ 0x28
10011ab0:	a828      	add	r0, sp, #160	@ 0xa0
10011ab2:	f7ff ff2b 	bl	1001190c <fld_sub>
	fld_sub(f, d, c);
10011ab6:	aa14      	add	r2, sp, #80	@ 0x50
10011ab8:	a91e      	add	r1, sp, #120	@ 0x78
10011aba:	a832      	add	r0, sp, #200	@ 0xc8
10011abc:	f7ff ff26 	bl	1001190c <fld_sub>
	fld_add(g, d, c);
10011ac0:	a83c      	add	r0, sp, #240	@ 0xf0
10011ac2:	f7ff ff16 	bl	100118f2 <fld_add>
	fld_add(h, b, a);
10011ac6:	466a      	mov	r2, sp
10011ac8:	a90a      	add	r1, sp, #40	@ 0x28
10011aca:	a846      	add	r0, sp, #280	@ 0x118
10011acc:	f7ff ff11 	bl	100118f2 <fld_add>
	fld_mul(out->x, e, f);
10011ad0:	aa32      	add	r2, sp, #200	@ 0xc8
10011ad2:	a928      	add	r1, sp, #160	@ 0xa0
10011ad4:	4628      	mov	r0, r5
10011ad6:	f000 f9b8 	bl	10011e4a <fld_mul>
	fld_mul(out->y, g, h);
10011ada:	aa46      	add	r2, sp, #280	@ 0x118
10011adc:	a93c      	add	r1, sp, #240	@ 0xf0
10011ade:	f105 0028 	add.w	r0, r5, #40	@ 0x28
10011ae2:	f000 f9b2 	bl	10011e4a <fld_mul>
	fld_mul(out->t, e, h);
10011ae6:	aa46      	add	r2, sp, #280	@ 0x118
10011ae8:	a928      	add	r1, sp, #160	@ 0xa0
10011aea:	f105 0050 	add.w	r0, r5, #80	@ 0x50
10011aee:	f000 f9ac 	bl	10011e4a <fld_mul>
	fld_mul(out->z, f, g);
10011af2:	aa3c      	add	r2, sp, #240	@ 0xf0
10011af4:	a932      	add	r1, sp, #200	@ 0xc8
10011af6:	f105 0078 	add.w	r0, r5, #120	@ 0x78
10011afa:	f000 f9a6 	bl	10011e4a <fld_mul>
}
10011afe:	b051      	add	sp, #324	@ 0x144
10011b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10011b04 <ed_add>:
{
10011b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10011b08:	4615      	mov	r5, r2
10011b0a:	b0da      	sub	sp, #360	@ 0x168
	fld_sub(a, P->y, P->x);
10011b0c:	f101 0828 	add.w	r8, r1, #40	@ 0x28
{
10011b10:	4606      	mov	r6, r0
10011b12:	460c      	mov	r4, r1
	fld_sub(a, P->y, P->x);
10011b14:	460a      	mov	r2, r1
10011b16:	4668      	mov	r0, sp
10011b18:	4641      	mov	r1, r8
	fld_sub(t, Q->y, Q->x);
10011b1a:	f105 0728 	add.w	r7, r5, #40	@ 0x28
	fld_sub(a, P->y, P->x);
10011b1e:	f7ff fef5 	bl	1001190c <fld_sub>
	fld_sub(t, Q->y, Q->x);
10011b22:	a850      	add	r0, sp, #320	@ 0x140
10011b24:	462a      	mov	r2, r5
10011b26:	4639      	mov	r1, r7
10011b28:	f7ff fef0 	bl	1001190c <fld_sub>
	fld_mul(a, a, t);
10011b2c:	4602      	mov	r2, r0
10011b2e:	4669      	mov	r1, sp
10011b30:	4668      	mov	r0, sp
10011b32:	f000 f98a 	bl	10011e4a <fld_mul>
	fld_add(b, P->y, P->x);
10011b36:	4622      	mov	r2, r4
10011b38:	4641      	mov	r1, r8
10011b3a:	a80a      	add	r0, sp, #40	@ 0x28
10011b3c:	f7ff fed9 	bl	100118f2 <fld_add>
	fld_add(t, Q->y, Q->x);
10011b40:	a850      	add	r0, sp, #320	@ 0x140
10011b42:	462a      	mov	r2, r5
10011b44:	4639      	mov	r1, r7
10011b46:	f7ff fed4 	bl	100118f2 <fld_add>
	fld_mul(b, b, t);
10011b4a:	a90a      	add	r1, sp, #40	@ 0x28
10011b4c:	4602      	mov	r2, r0
10011b4e:	4608      	mov	r0, r1
10011b50:	f000 f97b 	bl	10011e4a <fld_mul>
	fld_mul(c, P->t, Q->t);
10011b54:	f105 0250 	add.w	r2, r5, #80	@ 0x50
10011b58:	f104 0150 	add.w	r1, r4, #80	@ 0x50
10011b5c:	a814      	add	r0, sp, #80	@ 0x50
10011b5e:	f000 f974 	bl	10011e4a <fld_mul>
	fld_mul(c, c, con_2d);
10011b62:	a914      	add	r1, sp, #80	@ 0x50
10011b64:	4608      	mov	r0, r1
10011b66:	4a1d      	ldr	r2, [pc, #116]	@ (10011bdc <ed_add+0xd8>)
10011b68:	f000 f96f 	bl	10011e4a <fld_mul>
	fld_mul(d, P->z, Q->z);
10011b6c:	f105 0278 	add.w	r2, r5, #120	@ 0x78
10011b70:	f104 0178 	add.w	r1, r4, #120	@ 0x78
10011b74:	a81e      	add	r0, sp, #120	@ 0x78
10011b76:	f000 f968 	bl	10011e4a <fld_mul>
	fld_scale2(d, d);
10011b7a:	a91e      	add	r1, sp, #120	@ 0x78
10011b7c:	4608      	mov	r0, r1
10011b7e:	f7ff fed2 	bl	10011926 <fld_scale2>
	fld_sub(e, b, a);
10011b82:	466a      	mov	r2, sp
10011b84:	a90a      	add	r1, sp, #40	@ 0x28
10011b86:	a828      	add	r0, sp, #160	@ 0xa0
10011b88:	f7ff fec0 	bl	1001190c <fld_sub>
	fld_sub(f, d, c);
10011b8c:	aa14      	add	r2, sp, #80	@ 0x50
10011b8e:	a91e      	add	r1, sp, #120	@ 0x78
10011b90:	a832      	add	r0, sp, #200	@ 0xc8
10011b92:	f7ff febb 	bl	1001190c <fld_sub>
	fld_add(g, d, c);
10011b96:	a83c      	add	r0, sp, #240	@ 0xf0
10011b98:	f7ff feab 	bl	100118f2 <fld_add>
	fld_add(h, b, a);
10011b9c:	466a      	mov	r2, sp
10011b9e:	a90a      	add	r1, sp, #40	@ 0x28
10011ba0:	a846      	add	r0, sp, #280	@ 0x118
10011ba2:	f7ff fea6 	bl	100118f2 <fld_add>
	fld_mul(out->x, e, f);
10011ba6:	aa32      	add	r2, sp, #200	@ 0xc8
10011ba8:	a928      	add	r1, sp, #160	@ 0xa0
10011baa:	4630      	mov	r0, r6
10011bac:	f000 f94d 	bl	10011e4a <fld_mul>
	fld_mul(out->y, g, h);
10011bb0:	aa46      	add	r2, sp, #280	@ 0x118
10011bb2:	a93c      	add	r1, sp, #240	@ 0xf0
10011bb4:	f106 0028 	add.w	r0, r6, #40	@ 0x28
10011bb8:	f000 f947 	bl	10011e4a <fld_mul>
	fld_mul(out->t, e, h);
10011bbc:	aa46      	add	r2, sp, #280	@ 0x118
10011bbe:	a928      	add	r1, sp, #160	@ 0xa0
10011bc0:	f106 0050 	add.w	r0, r6, #80	@ 0x50
10011bc4:	f000 f941 	bl	10011e4a <fld_mul>
	fld_mul(out->z, f, g);
10011bc8:	aa3c      	add	r2, sp, #240	@ 0xf0
10011bca:	a932      	add	r1, sp, #200	@ 0xc8
10011bcc:	f106 0078 	add.w	r0, r6, #120	@ 0x78
10011bd0:	f000 f93b 	bl	10011e4a <fld_mul>
}
10011bd4:	b05a      	add	sp, #360	@ 0x168
10011bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10011bda:	bf00      	nop
10011bdc:	1002bd94 	.word	0x1002bd94

10011be0 <ed_scale_base>:
/*
 * ed_scale_base - calculates x * base
 */
void
ed_scale_base(struct ed *out, const sc_t x)
{
10011be0:	b570      	push	{r4, r5, r6, lr}
10011be2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
	sc_t tmp;
	uint8_t pack[32];
	int i;

	/* s <- x + 8 * (16^64 - 1) / 15 */
	sc_add(tmp, x, con_off);
10011be6:	4a21      	ldr	r2, [pc, #132]	@ (10011c6c <ed_scale_base+0x8c>)
{
10011be8:	4606      	mov	r6, r0
	sc_add(tmp, x, con_off);
10011bea:	a808      	add	r0, sp, #32
10011bec:	f7ff fe81 	bl	100118f2 <fld_add>
	sc_export(pack, tmp);
10011bf0:	4601      	mov	r1, r0
10011bf2:	4668      	mov	r0, sp
10011bf4:	f001 f969 	bl	10012eca <sc_export>

	/*
	 * R0 <- r0*B + r2*16^2*B + ... + r62*16^62*B 
	 * R1 <- r1*B + r3*16^2*B + ... + r63*16^62*B
	 */
	memcpy(&R0, &ed_zero, sizeof(struct ed));
10011bf8:	491d      	ldr	r1, [pc, #116]	@ (10011c70 <ed_scale_base+0x90>)
10011bfa:	22a0      	movs	r2, #160	@ 0xa0
10011bfc:	a830      	add	r0, sp, #192	@ 0xc0
10011bfe:	f008 fa5f 	bl	1001a0c0 <memcpy>
	memcpy(&R1, &ed_zero, sizeof(struct ed));
10011c02:	491b      	ldr	r1, [pc, #108]	@ (10011c70 <ed_scale_base+0x90>)
10011c04:	22a0      	movs	r2, #160	@ 0xa0
10011c06:	a858      	add	r0, sp, #352	@ 0x160
10011c08:	f008 fa5a 	bl	1001a0c0 <memcpy>
	for (i = 0; i < 32; i++) {
10011c0c:	466c      	mov	r4, sp
	memcpy(&R1, &ed_zero, sizeof(struct ed));
10011c0e:	2500      	movs	r5, #0
		scale16(&P, 2*i, (pack[i] & 0xf) - 8);
10011c10:	7822      	ldrb	r2, [r4, #0]
10011c12:	f002 020f 	and.w	r2, r2, #15
10011c16:	4629      	mov	r1, r5
10011c18:	3a08      	subs	r2, #8
10011c1a:	a812      	add	r0, sp, #72	@ 0x48
10011c1c:	f7ff fe8e 	bl	1001193c <scale16>
		ed_add_pc(&R0, &R0, &P);
10011c20:	a930      	add	r1, sp, #192	@ 0xc0
10011c22:	4608      	mov	r0, r1
10011c24:	aa12      	add	r2, sp, #72	@ 0x48
10011c26:	f7ff ff1b 	bl	10011a60 <ed_add_pc>

		scale16(&P, 2*i, (pack[i] >> 4) - 8);
10011c2a:	f814 2b01 	ldrb.w	r2, [r4], #1
10011c2e:	0912      	lsrs	r2, r2, #4
10011c30:	4629      	mov	r1, r5
10011c32:	3a08      	subs	r2, #8
10011c34:	a812      	add	r0, sp, #72	@ 0x48
10011c36:	f7ff fe81 	bl	1001193c <scale16>
		ed_add_pc(&R1, &R1, &P);
10011c3a:	a958      	add	r1, sp, #352	@ 0x160
10011c3c:	aa12      	add	r2, sp, #72	@ 0x48
10011c3e:	4608      	mov	r0, r1
	for (i = 0; i < 32; i++) {
10011c40:	3502      	adds	r5, #2
		ed_add_pc(&R1, &R1, &P);
10011c42:	f7ff ff0d 	bl	10011a60 <ed_add_pc>
	for (i = 0; i < 32; i++) {
10011c46:	2d40      	cmp	r5, #64	@ 0x40
10011c48:	d1e2      	bne.n	10011c10 <ed_scale_base+0x30>
10011c4a:	2404      	movs	r4, #4
	}

	/* R1 <- 16 * R1 */
	for (i = 0; i < 4; i++)
		ed_add(&R1, &R1, &R1);
10011c4c:	aa58      	add	r2, sp, #352	@ 0x160
10011c4e:	4611      	mov	r1, r2
10011c50:	4610      	mov	r0, r2
10011c52:	f7ff ff57 	bl	10011b04 <ed_add>
	for (i = 0; i < 4; i++)
10011c56:	3c01      	subs	r4, #1
10011c58:	d1f8      	bne.n	10011c4c <ed_scale_base+0x6c>

	/* out <- R0 + R1 */
	ed_add(out, &R0, &R1);
10011c5a:	aa58      	add	r2, sp, #352	@ 0x160
10011c5c:	a930      	add	r1, sp, #192	@ 0xc0
10011c5e:	4630      	mov	r0, r6
10011c60:	f7ff ff50 	bl	10011b04 <ed_add>
}
10011c64:	f50d 7d00 	add.w	sp, sp, #512	@ 0x200
10011c68:	bd70      	pop	{r4, r5, r6, pc}
10011c6a:	bf00      	nop
10011c6c:	1002bfc8 	.word	0x1002bfc8
10011c70:	100244f4 	.word	0x100244f4

10011c74 <fld_reduce>:
 * assumes:
 *   abs(x[i]) <= 2^31 - 2^5 = 32 * (2^26 - 1)
 */
void
fld_reduce(fld_t res, const fld_t x)
{
10011c74:	b570      	push	{r4, r5, r6, lr}
	limb_t tmp;

	CARRY(res, x, tmp, 19);
10011c76:	2200      	movs	r2, #0
10011c78:	f04f 5318 	mov.w	r3, #637534208	@ 0x26000000
10011c7c:	1d0e      	adds	r6, r1, #4
10011c7e:	1d04      	adds	r4, r0, #4
10011c80:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
10011c84:	eb05 6363 	add.w	r3, r5, r3, asr #25
10011c88:	f023 457c 	bic.w	r5, r3, #4227858432	@ 0xfc000000
10011c8c:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
10011c90:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
10011c94:	eb05 63a3 	add.w	r3, r5, r3, asr #26
10011c98:	f023 457e 	bic.w	r5, r3, #4261412864	@ 0xfe000000
10011c9c:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
10011ca0:	3202      	adds	r2, #2
10011ca2:	2a0a      	cmp	r2, #10
10011ca4:	d1ec      	bne.n	10011c80 <fld_reduce+0xc>
10011ca6:	6802      	ldr	r2, [r0, #0]
10011ca8:	165b      	asrs	r3, r3, #25
10011caa:	2113      	movs	r1, #19
10011cac:	fb01 2203 	mla	r2, r1, r3, r2
10011cb0:	6002      	str	r2, [r0, #0]
	 * and for i >= 1:
	 *   0 <= res[i] <= 2^26-1, i % 2 == 0,
	 *   0 <= res[i] <= 2^25-1, i % 2 == 1.
	 */

	CARRY(res, res, tmp, 0);
10011cb2:	f100 0428 	add.w	r4, r0, #40	@ 0x28
10011cb6:	4602      	mov	r2, r0
	CARRY(res, x, tmp, 19);
10011cb8:	4601      	mov	r1, r0
	CARRY(res, res, tmp, 0);
10011cba:	2300      	movs	r3, #0
10011cbc:	680d      	ldr	r5, [r1, #0]
10011cbe:	eb05 6363 	add.w	r3, r5, r3, asr #25
10011cc2:	f023 457c 	bic.w	r5, r3, #4227858432	@ 0xfc000000
10011cc6:	600d      	str	r5, [r1, #0]
10011cc8:	684d      	ldr	r5, [r1, #4]
10011cca:	eb05 63a3 	add.w	r3, r5, r3, asr #26
10011cce:	f023 457e 	bic.w	r5, r3, #4261412864	@ 0xfe000000
10011cd2:	604d      	str	r5, [r1, #4]
10011cd4:	3108      	adds	r1, #8
10011cd6:	428c      	cmp	r4, r1
10011cd8:	d1f0      	bne.n	10011cbc <fld_reduce+0x48>
10011cda:	6801      	ldr	r1, [r0, #0]
10011cdc:	165b      	asrs	r3, r3, #25
10011cde:	2513      	movs	r5, #19
10011ce0:	fb05 1103 	mla	r1, r5, r3, r1
10011ce4:	6001      	str	r1, [r0, #0]

	/* next round we will first remove our offset resulting in
	 *   -2^26 - 38 <= res[0] <= 2^26 - 1,
	 * therefor only a negative carry could appear.
	 */
	CARRY(res, res, tmp, -19);
10011ce6:	f04f 435a 	mov.w	r3, #3657433088	@ 0xda000000
10011cea:	6811      	ldr	r1, [r2, #0]
10011cec:	eb01 6363 	add.w	r3, r1, r3, asr #25
10011cf0:	f023 417c 	bic.w	r1, r3, #4227858432	@ 0xfc000000
10011cf4:	6011      	str	r1, [r2, #0]
10011cf6:	6851      	ldr	r1, [r2, #4]
10011cf8:	eb01 63a3 	add.w	r3, r1, r3, asr #26
10011cfc:	f023 417e 	bic.w	r1, r3, #4261412864	@ 0xfe000000
10011d00:	6051      	str	r1, [r2, #4]
10011d02:	3208      	adds	r2, #8
10011d04:	4294      	cmp	r4, r2
10011d06:	d1f0      	bne.n	10011cea <fld_reduce+0x76>
10011d08:	6802      	ldr	r2, [r0, #0]
10011d0a:	165b      	asrs	r3, r3, #25
10011d0c:	2113      	movs	r1, #19
10011d0e:	fb01 2203 	mla	r2, r1, r3, r2
10011d12:	6002      	str	r2, [r0, #0]
	 * for all limbs as wished.
	 *
	 * if a carry had happend, we even know
	 *   2^26 - 38 - 19 <= res[0] <= 2^26 - 1.
	 */
}
10011d14:	bd70      	pop	{r4, r5, r6, pc}

10011d16 <fld_import>:
 * fld_import - import an 256bit, unsigned, little-endian integer into
 * our internal fld_t format.
 */
void
fld_import(fld_t dst, const uint8_t src[32])
{
10011d16:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;
	uint32_t foo = 0;
	int fill = 0;
10011d18:	2300      	movs	r3, #0
	int d = 1;
10011d1a:	2401      	movs	r4, #1
10011d1c:	1f06      	subs	r6, r0, #4
10011d1e:	f100 0c24 	add.w	ip, r0, #36	@ 0x24
	uint32_t foo = 0;
10011d22:	461a      	mov	r2, r3

	for (i = 0; i < FLD_LIMB_NUM; i++) {
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
			foo |= (uint32_t)*src++ << fill;
		dst[i] = foo & FLD_LIMB_MASK(d);
10011d24:	46a6      	mov	lr, r4
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
10011d26:	2c00      	cmp	r4, #0
10011d28:	bf0c      	ite	eq
10011d2a:	2518      	moveq	r5, #24
10011d2c:	2519      	movne	r5, #25
10011d2e:	429d      	cmp	r5, r3
10011d30:	da15      	bge.n	10011d5e <fld_import+0x48>
		dst[i] = foo & FLD_LIMB_MASK(d);
10011d32:	f104 0719 	add.w	r7, r4, #25
10011d36:	fa0e f507 	lsl.w	r5, lr, r7
10011d3a:	3d01      	subs	r5, #1
10011d3c:	4015      	ands	r5, r2
10011d3e:	f846 5f04 	str.w	r5, [r6, #4]!
	for (i = 0; i < FLD_LIMB_NUM; i++) {
10011d42:	45b4      	cmp	ip, r6
		
		foo >>= FLD_LIMB_BITS(d);
10011d44:	fa22 f207 	lsr.w	r2, r2, r7
		fill -= FLD_LIMB_BITS(d);
10011d48:	eba3 0307 	sub.w	r3, r3, r7
		d = 1-d;
10011d4c:	f1c4 0401 	rsb	r4, r4, #1
	for (i = 0; i < FLD_LIMB_NUM; i++) {
10011d50:	d1e9      	bne.n	10011d26 <fld_import+0x10>
	}
	dst[0] += 19*foo;
10011d52:	6803      	ldr	r3, [r0, #0]
10011d54:	2113      	movs	r1, #19
10011d56:	fb01 3302 	mla	r3, r1, r2, r3
10011d5a:	6003      	str	r3, [r0, #0]
}
10011d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			foo |= (uint32_t)*src++ << fill;
10011d5e:	f811 5b01 	ldrb.w	r5, [r1], #1
10011d62:	409d      	lsls	r5, r3
10011d64:	432a      	orrs	r2, r5
		for (; fill < FLD_LIMB_BITS(d); fill += 8)
10011d66:	3308      	adds	r3, #8
10011d68:	e7dd      	b.n	10011d26 <fld_import+0x10>

10011d6a <fld_export>:
/*
 * fld_export - export a field element into 256bit little-endian encoded form.
 */
void
fld_export(uint8_t dst[32], const fld_t src)
{
10011d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10011d6e:	b08a      	sub	sp, #40	@ 0x28
	fld_t tmp;
	int fill, i;

	fld_reduce(tmp, src);

	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
10011d70:	2500      	movs	r5, #0
{
10011d72:	4680      	mov	r8, r0
	fld_reduce(tmp, src);
10011d74:	4668      	mov	r0, sp
10011d76:	f7ff ff7d 	bl	10011c74 <fld_reduce>
	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
10011d7a:	f06f 0607 	mvn.w	r6, #7
10011d7e:	462a      	mov	r2, r5
10011d80:	462b      	mov	r3, r5
		foo |= (tmp[i] & FLD_LIMB_MASK(1)) << fill;
10011d82:	6807      	ldr	r7, [r0, #0]
10011d84:	f027 477c 	bic.w	r7, r7, #4227858432	@ 0xfc000000
10011d88:	4097      	lsls	r7, r2
		for (fill += FLD_LIMB_BITS(1); fill >= 8; fill -= 8, foo >>= 8)
10011d8a:	f102 0e1a 	add.w	lr, r2, #26
		foo |= (tmp[i] & FLD_LIMB_MASK(1)) << fill;
10011d8e:	431f      	orrs	r7, r3
		for (fill += FLD_LIMB_BITS(1); fill >= 8; fill -= 8, foo >>= 8)
10011d90:	4641      	mov	r1, r8
10011d92:	4673      	mov	r3, lr
10011d94:	3b08      	subs	r3, #8
10011d96:	2b07      	cmp	r3, #7
			*dst++ = foo & 0xff;
10011d98:	f801 7b01 	strb.w	r7, [r1], #1
		for (fill += FLD_LIMB_BITS(1); fill >= 8; fill -= 8, foo >>= 8)
10011d9c:	ea4f 2717 	mov.w	r7, r7, lsr #8
10011da0:	dcf8      	bgt.n	10011d94 <fld_export+0x2a>
10011da2:	f102 0c12 	add.w	ip, r2, #18
10011da6:	ea4f 01dc 	mov.w	r1, ip, lsr #3

		foo |= (tmp[i+1] & FLD_LIMB_MASK(0)) << fill;
10011daa:	6843      	ldr	r3, [r0, #4]
			*dst++ = foo & 0xff;
10011dac:	1c4c      	adds	r4, r1, #1
10011dae:	4371      	muls	r1, r6
10011db0:	eb0e 0201 	add.w	r2, lr, r1
		foo |= (tmp[i+1] & FLD_LIMB_MASK(0)) << fill;
10011db4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
		for (fill += FLD_LIMB_BITS(1); fill >= 8; fill -= 8, foo >>= 8)
10011db8:	4461      	add	r1, ip
		foo |= (tmp[i+1] & FLD_LIMB_MASK(0)) << fill;
10011dba:	408b      	lsls	r3, r1
			*dst++ = foo & 0xff;
10011dbc:	4444      	add	r4, r8
		foo |= (tmp[i+1] & FLD_LIMB_MASK(0)) << fill;
10011dbe:	433b      	orrs	r3, r7
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
10011dc0:	f102 0111 	add.w	r1, r2, #17
			*dst++ = foo & 0xff;
10011dc4:	4627      	mov	r7, r4
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
10011dc6:	3908      	subs	r1, #8
10011dc8:	2907      	cmp	r1, #7
			*dst++ = foo & 0xff;
10011dca:	f807 3b01 	strb.w	r3, [r7], #1
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
10011dce:	ea4f 2313 	mov.w	r3, r3, lsr #8
10011dd2:	dcf8      	bgt.n	10011dc6 <fld_export+0x5c>
10011dd4:	3209      	adds	r2, #9
10011dd6:	08d7      	lsrs	r7, r2, #3
	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
10011dd8:	3502      	adds	r5, #2
			*dst++ = foo & 0xff;
10011dda:	1c79      	adds	r1, r7, #1
	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
10011ddc:	2d0a      	cmp	r5, #10
			*dst++ = foo & 0xff;
10011dde:	eb04 0801 	add.w	r8, r4, r1
		for (fill += FLD_LIMB_BITS(0); fill >= 8; fill -= 8, foo >>= 8)
10011de2:	fb06 2207 	mla	r2, r6, r7, r2
	for (i = 0, fill = 0, foo = 0; i < FLD_LIMB_NUM; i += 2) {
10011de6:	f100 0008 	add.w	r0, r0, #8
10011dea:	d1ca      	bne.n	10011d82 <fld_export+0x18>
	}
	*dst++ = foo & 0xff;
10011dec:	5463      	strb	r3, [r4, r1]
}
10011dee:	b00a      	add	sp, #40	@ 0x28
10011df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

10011df4 <fld_scale>:
/*
 * fld_scale - multiply e by scalar s and reduce modulo q.
 */
void
fld_scale(fld_t dst, const fld_t e, limb_t x)
{
10011df4:	b5f0      	push	{r4, r5, r6, r7, lr}
	llimb_t tmp;
	int i;

	for (tmp = 0, i = 0; i < FLD_LIMB_NUM; i += 2) {
10011df6:	2500      	movs	r5, #0
10011df8:	462b      	mov	r3, r5
10011dfa:	462c      	mov	r4, r5
		tmp = (tmp >> FLD_LIMB_BITS(0)) + (llimb_t) x*e[i];
		dst[i] = tmp & FLD_LIMB_MASK(1);
		tmp = (tmp >> FLD_LIMB_BITS(1)) + ((llimb_t) x*e[i+1]);
10011dfc:	f101 0c04 	add.w	ip, r1, #4
		dst[i+1] = tmp & FLD_LIMB_MASK(0);
10011e00:	1d07      	adds	r7, r0, #4
		tmp = (tmp >> FLD_LIMB_BITS(0)) + (llimb_t) x*e[i];
10011e02:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
10011e06:	0e5b      	lsrs	r3, r3, #25
10011e08:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
10011e0c:	1664      	asrs	r4, r4, #25
10011e0e:	fbc2 3406 	smlal	r3, r4, r2, r6
		dst[i] = tmp & FLD_LIMB_MASK(1);
10011e12:	f023 467c 	bic.w	r6, r3, #4227858432	@ 0xfc000000
10011e16:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
		tmp = (tmp >> FLD_LIMB_BITS(1)) + ((llimb_t) x*e[i+1]);
10011e1a:	0e9b      	lsrs	r3, r3, #26
10011e1c:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
10011e20:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
10011e24:	16a4      	asrs	r4, r4, #26
10011e26:	fbc2 3406 	smlal	r3, r4, r2, r6
		dst[i+1] = tmp & FLD_LIMB_MASK(0);
10011e2a:	f023 467e 	bic.w	r6, r3, #4261412864	@ 0xfe000000
10011e2e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
	for (tmp = 0, i = 0; i < FLD_LIMB_NUM; i += 2) {
10011e32:	3502      	adds	r5, #2
10011e34:	2d0a      	cmp	r5, #10
10011e36:	d1e4      	bne.n	10011e02 <fld_scale+0xe>
	}
	dst[0] += 19*(tmp >> FLD_LIMB_BITS(0));
10011e38:	6802      	ldr	r2, [r0, #0]
10011e3a:	0e5b      	lsrs	r3, r3, #25
10011e3c:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
10011e40:	2113      	movs	r1, #19
10011e42:	fb01 2203 	mla	r2, r1, r3, r2
10011e46:	6002      	str	r2, [r0, #0]
}
10011e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011e4a <fld_mul>:
/*
 * fld_mul - multiply a with b and reduce modulo q.
 */
void
fld_mul(fld_t dst, const fld_t a, const fld_t b)
{
10011e4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011e4e:	b0a3      	sub	sp, #140	@ 0x8c
	llimb_t tmp;
	llimb_t c[10];

	c[0] = (llimb_t)a[0]*b[0];
10011e50:	680b      	ldr	r3, [r1, #0]
{
10011e52:	900d      	str	r0, [sp, #52]	@ 0x34
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
	c[2] = (llimb_t)a[0]*b[2] + (llimb_t)2*a[1]*b[1] + (llimb_t)a[2]*b[0];
10011e54:	6890      	ldr	r0, [r2, #8]
10011e56:	9003      	str	r0, [sp, #12]
10011e58:	6888      	ldr	r0, [r1, #8]
10011e5a:	9004      	str	r0, [sp, #16]
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
10011e5c:	68d0      	ldr	r0, [r2, #12]
10011e5e:	9005      	str	r0, [sp, #20]
		+ (llimb_t)a[3]*b[0];
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
10011e60:	6910      	ldr	r0, [r2, #16]
10011e62:	9006      	str	r0, [sp, #24]
		+ (llimb_t)2*a[3]*b[1] + (llimb_t)a[4]*b[0];
10011e64:	6908      	ldr	r0, [r1, #16]
10011e66:	9007      	str	r0, [sp, #28]
	c[5] = (llimb_t)a[0]*b[5] + (llimb_t)a[1]*b[4] + (llimb_t)a[2]*b[3] 
10011e68:	6950      	ldr	r0, [r2, #20]
	c[0] = (llimb_t)a[0]*b[0];
10011e6a:	9300      	str	r3, [sp, #0]
	c[5] = (llimb_t)a[0]*b[5] + (llimb_t)a[1]*b[4] + (llimb_t)a[2]*b[3] 
10011e6c:	9008      	str	r0, [sp, #32]
	c[0] = (llimb_t)a[0]*b[0];
10011e6e:	6813      	ldr	r3, [r2, #0]
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
10011e70:	6990      	ldr	r0, [r2, #24]
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
10011e72:	f8d1 c020 	ldr.w	ip, [r1, #32]
	c[0] = (llimb_t)a[0]*b[0];
10011e76:	9301      	str	r3, [sp, #4]
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
10011e78:	9009      	str	r0, [sp, #36]	@ 0x24
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
10011e7a:	6853      	ldr	r3, [r2, #4]
		+ (llimb_t)a[6]*b[0];
10011e7c:	6988      	ldr	r0, [r1, #24]
		+ (llimb_t)a[3]*b[0];
10011e7e:	68cd      	ldr	r5, [r1, #12]
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
10011e80:	694f      	ldr	r7, [r1, #20]
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
10011e82:	69ce      	ldr	r6, [r1, #28]
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
10011e84:	69d4      	ldr	r4, [r2, #28]
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
10011e86:	9302      	str	r3, [sp, #8]
		+ (llimb_t)a[6]*b[0];
10011e88:	900a      	str	r0, [sp, #40]	@ 0x28
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
10011e8a:	684b      	ldr	r3, [r1, #4]
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
10011e8c:	6a10      	ldr	r0, [r2, #32]
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
10011e8e:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
	c[9] = (llimb_t)a[0]*b[9] + (llimb_t)a[1]*b[8] + (llimb_t)a[2]*b[7]
10011e92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
10011e94:	920c      	str	r2, [sp, #48]	@ 0x30
10011e96:	f8dd c000 	ldr.w	ip, [sp]
10011e9a:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
		+ (llimb_t)a[9]*b[0];
10011e9e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
	c[9] = (llimb_t)a[0]*b[9] + (llimb_t)a[1]*b[8] + (llimb_t)a[2]*b[7]
10011ea2:	fb83 2100 	smull	r2, r1, r3, r0
10011ea6:	fbcc 2108 	smlal	r2, r1, ip, r8
10011eaa:	f8dd c010 	ldr.w	ip, [sp, #16]
10011eae:	fbcc 2104 	smlal	r2, r1, ip, r4
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
10011eb2:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
10011eb6:	fbc5 210c 	smlal	r2, r1, r5, ip
10011eba:	e9dd c807 	ldrd	ip, r8, [sp, #28]
10011ebe:	fbcc 2108 	smlal	r2, r1, ip, r8
10011ec2:	f8dd c018 	ldr.w	ip, [sp, #24]
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
10011ec6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
		+ (llimb_t)a[3]*b[6] + (llimb_t)a[4]*b[5] + (llimb_t)a[5]*b[4]
10011eca:	fbcc 2107 	smlal	r2, r1, ip, r7
		+ (llimb_t)a[6]*b[3] + (llimb_t)a[7]*b[2] + (llimb_t)a[8]*b[1]
10011ece:	f8dd c014 	ldr.w	ip, [sp, #20]
10011ed2:	fbcc 2108 	smlal	r2, r1, ip, r8
10011ed6:	f8dd c00c 	ldr.w	ip, [sp, #12]
10011eda:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
10011ede:	fbcc 2106 	smlal	r2, r1, ip, r6
10011ee2:	f8dd c008 	ldr.w	ip, [sp, #8]
10011ee6:	fbcc 2108 	smlal	r2, r1, ip, r8
		+ (llimb_t)a[9]*b[0];
10011eea:	f8dd c004 	ldr.w	ip, [sp, #4]
10011eee:	fbcc 210e 	smlal	r2, r1, ip, lr
	c[9] = (llimb_t)a[0]*b[9] + (llimb_t)a[1]*b[8] + (llimb_t)a[2]*b[7]
10011ef2:	e9cd 2120 	strd	r2, r1, [sp, #128]	@ 0x80

	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
10011ef6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10011ef8:	f8dd c010 	ldr.w	ip, [sp, #16]
10011efc:	fb83 2102 	smull	r2, r1, r3, r2
10011f00:	fb8c 8c00 	smull	r8, ip, ip, r0
10011f04:	1892      	adds	r2, r2, r2
10011f06:	4149      	adcs	r1, r1
10011f08:	eb12 0208 	adds.w	r2, r2, r8
10011f0c:	eb41 010c 	adc.w	r1, r1, ip
10011f10:	fb85 c804 	smull	ip, r8, r5, r4
10011f14:	eb1c 0c0c 	adds.w	ip, ip, ip
10011f18:	eb48 0808 	adc.w	r8, r8, r8
10011f1c:	eb12 020c 	adds.w	r2, r2, ip
10011f20:	eb41 0108 	adc.w	r1, r1, r8
		      + (llimb_t)a[4]*b[6] + (llimb_t)2*a[5]*b[5] + (llimb_t)a[6]*b[4]
10011f24:	f8dd c01c 	ldr.w	ip, [sp, #28]
10011f28:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
10011f2c:	fbcc 2108 	smlal	r2, r1, ip, r8
10011f30:	f8dd c020 	ldr.w	ip, [sp, #32]
10011f34:	fb8c c807 	smull	ip, r8, ip, r7
10011f38:	eb1c 0c0c 	adds.w	ip, ip, ip
10011f3c:	eb48 0808 	adc.w	r8, r8, r8
10011f40:	eb12 020c 	adds.w	r2, r2, ip
10011f44:	eb41 0108 	adc.w	r1, r1, r8
10011f48:	f8dd c018 	ldr.w	ip, [sp, #24]
10011f4c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
10011f50:	fbcc 2108 	smlal	r2, r1, ip, r8
		      + (llimb_t)2*a[7]*b[3] + (llimb_t)a[8]*b[2] + (llimb_t)2*a[9]*b[1]);
10011f54:	f8dd c014 	ldr.w	ip, [sp, #20]
10011f58:	fb8c c806 	smull	ip, r8, ip, r6
10011f5c:	eb1c 0c0c 	adds.w	ip, ip, ip
10011f60:	eb48 0808 	adc.w	r8, r8, r8
10011f64:	eb12 020c 	adds.w	r2, r2, ip
10011f68:	eb41 0108 	adc.w	r1, r1, r8
10011f6c:	f8dd c00c 	ldr.w	ip, [sp, #12]
10011f70:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
10011f74:	fbcc 2108 	smlal	r2, r1, ip, r8
10011f78:	f8dd c008 	ldr.w	ip, [sp, #8]
10011f7c:	fb8c c80e 	smull	ip, r8, ip, lr
10011f80:	eb1c 0c0c 	adds.w	ip, ip, ip
10011f84:	eb48 0808 	adc.w	r8, r8, r8
10011f88:	eb12 020c 	adds.w	r2, r2, ip
10011f8c:	eb41 0808 	adc.w	r8, r1, r8
	c[0] += 19 * ((llimb_t)2*a[1]*b[9] + (llimb_t)a[2]*b[8] + (llimb_t)2*a[3]*b[7]
10011f90:	2113      	movs	r1, #19
10011f92:	fba2 2c01 	umull	r2, ip, r2, r1
10011f96:	fb01 cc08 	mla	ip, r1, r8, ip
10011f9a:	e9dd 8900 	ldrd	r8, r9, [sp]
10011f9e:	fbc8 2c09 	smlal	r2, ip, r8, r9
10011fa2:	e9cd 2c0e 	strd	r2, ip, [sp, #56]	@ 0x38
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
10011fa6:	f8dd c010 	ldr.w	ip, [sp, #16]
10011faa:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
10011fae:	f8dd a000 	ldr.w	sl, [sp]
10011fb2:	f8dd b008 	ldr.w	fp, [sp, #8]
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
10011fb6:	fb85 2800 	smull	r2, r8, r5, r0
10011fba:	fbcc 2809 	smlal	r2, r8, ip, r9
10011fbe:	f8dd c01c 	ldr.w	ip, [sp, #28]
		      + (llimb_t)a[5]*b[6] + (llimb_t)a[6]*b[5] + (llimb_t)a[7]*b[4]
10011fc2:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
10011fc6:	fbcc 2804 	smlal	r2, r8, ip, r4
		      + (llimb_t)a[5]*b[6] + (llimb_t)a[6]*b[5] + (llimb_t)a[7]*b[4]
10011fca:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
10011fce:	fbc7 280c 	smlal	r2, r8, r7, ip
10011fd2:	f8dd c020 	ldr.w	ip, [sp, #32]
10011fd6:	fbcc 2809 	smlal	r2, r8, ip, r9
10011fda:	f8dd c018 	ldr.w	ip, [sp, #24]
		      + (llimb_t)a[8]*b[3] + (llimb_t)a[9]*b[2]);
10011fde:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
		      + (llimb_t)a[5]*b[6] + (llimb_t)a[6]*b[5] + (llimb_t)a[7]*b[4]
10011fe2:	fbcc 2806 	smlal	r2, r8, ip, r6
		      + (llimb_t)a[8]*b[3] + (llimb_t)a[9]*b[2]);
10011fe6:	f8dd c014 	ldr.w	ip, [sp, #20]
10011fea:	fbcc 2809 	smlal	r2, r8, ip, r9
10011fee:	f8dd c00c 	ldr.w	ip, [sp, #12]
10011ff2:	fbcc 280e 	smlal	r2, r8, ip, lr
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
10011ff6:	fba2 c201 	umull	ip, r2, r2, r1
10011ffa:	fb01 2208 	mla	r2, r1, r8, r2
	c[1] = (llimb_t)a[0]*b[1] + (llimb_t)a[1]*b[0];
10011ffe:	f8dd 8004 	ldr.w	r8, [sp, #4]
10012002:	fb88 8903 	smull	r8, r9, r8, r3
10012006:	fbca 890b 	smlal	r8, r9, sl, fp
	c[1] += 19 * ((llimb_t)a[2]*b[9] + (llimb_t)a[3]*b[8] + (llimb_t)a[4]*b[7]
1001200a:	eb1c 0c08 	adds.w	ip, ip, r8
1001200e:	eb42 0209 	adc.w	r2, r2, r9
10012012:	e9cd c210 	strd	ip, r2, [sp, #64]	@ 0x40
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
10012016:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10012018:	f8dd 801c 	ldr.w	r8, [sp, #28]
1001201c:	fb85 2c02 	smull	r2, ip, r5, r2
10012020:	fb88 9800 	smull	r9, r8, r8, r0
10012024:	1892      	adds	r2, r2, r2
10012026:	eb4c 0c0c 	adc.w	ip, ip, ip
1001202a:	eb12 0209 	adds.w	r2, r2, r9
1001202e:	eb4c 0c08 	adc.w	ip, ip, r8
10012032:	fb87 8904 	smull	r8, r9, r7, r4
10012036:	eb18 0808 	adds.w	r8, r8, r8
1001203a:	eb49 0909 	adc.w	r9, r9, r9
1001203e:	eb12 0208 	adds.w	r2, r2, r8
10012042:	eb4c 0c09 	adc.w	ip, ip, r9
		      + (llimb_t)a[6]*b[6] + (llimb_t)2*a[7]*b[5] + (llimb_t)a[8]*b[4]
10012046:	e9dd 8909 	ldrd	r8, r9, [sp, #36]	@ 0x24
1001204a:	fbc8 2c09 	smlal	r2, ip, r8, r9
1001204e:	f8dd 8020 	ldr.w	r8, [sp, #32]
10012052:	fb88 8906 	smull	r8, r9, r8, r6
10012056:	eb18 0808 	adds.w	r8, r8, r8
1001205a:	eb49 0909 	adc.w	r9, r9, r9
1001205e:	eb12 0208 	adds.w	r2, r2, r8
10012062:	eb4c 0c09 	adc.w	ip, ip, r9
10012066:	f8dd 8018 	ldr.w	r8, [sp, #24]
1001206a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
1001206e:	fbc8 2c09 	smlal	r2, ip, r8, r9
		      + (llimb_t)2*a[9]*b[3]);
10012072:	f8dd 8014 	ldr.w	r8, [sp, #20]
10012076:	fb88 890e 	smull	r8, r9, r8, lr
1001207a:	eb18 0808 	adds.w	r8, r8, r8
1001207e:	eb49 0909 	adc.w	r9, r9, r9
10012082:	eb12 0808 	adds.w	r8, r2, r8
10012086:	eb4c 0909 	adc.w	r9, ip, r9
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
1001208a:	fba8 c801 	umull	ip, r8, r8, r1
1001208e:	fb01 8809 	mla	r8, r1, r9, r8
	c[2] = (llimb_t)a[0]*b[2] + (llimb_t)2*a[1]*b[1] + (llimb_t)a[2]*b[0];
10012092:	fb8b 9203 	smull	r9, r2, fp, r3
10012096:	eb19 0909 	adds.w	r9, r9, r9
1001209a:	f8dd b00c 	ldr.w	fp, [sp, #12]
1001209e:	4152      	adcs	r2, r2
100120a0:	fbca 920b 	smlal	r9, r2, sl, fp
100120a4:	f8dd a004 	ldr.w	sl, [sp, #4]
100120a8:	f8dd b010 	ldr.w	fp, [sp, #16]
100120ac:	fbca 920b 	smlal	r9, r2, sl, fp
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
100120b0:	eb1c 0c09 	adds.w	ip, ip, r9
100120b4:	eb48 0202 	adc.w	r2, r8, r2
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
100120b8:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
100120bc:	f8dd 801c 	ldr.w	r8, [sp, #28]
	c[2] += 19 * ((llimb_t)2*a[3]*b[9] + (llimb_t)a[4]*b[8] + (llimb_t)2*a[5]*b[7]
100120c0:	e9cd c212 	strd	ip, r2, [sp, #72]	@ 0x48
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
100120c4:	fb87 2c00 	smull	r2, ip, r7, r0
100120c8:	fbc8 2c09 	smlal	r2, ip, r8, r9
100120cc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
100120d0:	fbc8 2c04 	smlal	r2, ip, r8, r4
		      + (llimb_t)a[7]*b[6] + (llimb_t)a[8]*b[5] + (llimb_t)a[9]*b[4]);
100120d4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
100120d8:	fbc8 2c06 	smlal	r2, ip, r8, r6
100120dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
100120e0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
100120e4:	f8dd a000 	ldr.w	sl, [sp]
100120e8:	f8dd b014 	ldr.w	fp, [sp, #20]
		      + (llimb_t)a[7]*b[6] + (llimb_t)a[8]*b[5] + (llimb_t)a[9]*b[4]);
100120ec:	fbc8 2c09 	smlal	r2, ip, r8, r9
100120f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
100120f4:	fbc8 2c0e 	smlal	r2, ip, r8, lr
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
100120f8:	fba2 8201 	umull	r8, r2, r2, r1
100120fc:	fb01 220c 	mla	r2, r1, ip, r2
	c[3] = (llimb_t)a[0]*b[3] + (llimb_t)a[1]*b[2] + (llimb_t)a[2]*b[1]
10012100:	f8dd c00c 	ldr.w	ip, [sp, #12]
10012104:	fb83 c90c 	smull	ip, r9, r3, ip
10012108:	fbca c90b 	smlal	ip, r9, sl, fp
1001210c:	f8dd a008 	ldr.w	sl, [sp, #8]
10012110:	f8dd b010 	ldr.w	fp, [sp, #16]
10012114:	fbca c90b 	smlal	ip, r9, sl, fp
		+ (llimb_t)a[3]*b[0];
10012118:	f8dd a004 	ldr.w	sl, [sp, #4]
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1001211c:	f8dd b018 	ldr.w	fp, [sp, #24]
		+ (llimb_t)a[3]*b[0];
10012120:	fbca c905 	smlal	ip, r9, sl, r5
	c[3] += 19 * ((llimb_t)a[4]*b[9] + (llimb_t)a[5]*b[8] + (llimb_t)a[6]*b[7]
10012124:	eb18 080c 	adds.w	r8, r8, ip
10012128:	eb42 0209 	adc.w	r2, r2, r9
1001212c:	e9cd 8214 	strd	r8, r2, [sp, #80]	@ 0x50
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
10012130:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10012132:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
10012136:	fb87 2802 	smull	r2, r8, r7, r2
1001213a:	fb8c 9c00 	smull	r9, ip, ip, r0
1001213e:	1892      	adds	r2, r2, r2
10012140:	eb48 0808 	adc.w	r8, r8, r8
10012144:	eb12 0209 	adds.w	r2, r2, r9
10012148:	eb48 080c 	adc.w	r8, r8, ip
1001214c:	fb84 c906 	smull	ip, r9, r4, r6
10012150:	eb1c 0c0c 	adds.w	ip, ip, ip
10012154:	eb49 0909 	adc.w	r9, r9, r9
10012158:	eb12 020c 	adds.w	r2, r2, ip
1001215c:	eb48 0809 	adc.w	r8, r8, r9
		      + (llimb_t)a[8]*b[6] + (llimb_t)2*a[9]*b[5]);
10012160:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
10012164:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
10012168:	fbcc 2809 	smlal	r2, r8, ip, r9
1001216c:	f8dd c020 	ldr.w	ip, [sp, #32]
10012170:	fb8c c90e 	smull	ip, r9, ip, lr
10012174:	eb1c 0c0c 	adds.w	ip, ip, ip
10012178:	eb49 0909 	adc.w	r9, r9, r9
1001217c:	eb12 0c0c 	adds.w	ip, r2, ip
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
10012180:	9a05      	ldr	r2, [sp, #20]
		      + (llimb_t)a[8]*b[6] + (llimb_t)2*a[9]*b[5]);
10012182:	eb48 0909 	adc.w	r9, r8, r9
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
10012186:	fbac ac01 	umull	sl, ip, ip, r1
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
1001218a:	fb83 2802 	smull	r2, r8, r3, r2
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
1001218e:	fb01 cc09 	mla	ip, r1, r9, ip
	c[4] = (llimb_t)a[0]*b[4] + (llimb_t)2*a[1]*b[3] + (llimb_t)a[2]*b[2]
10012192:	1892      	adds	r2, r2, r2
10012194:	f8dd 9000 	ldr.w	r9, [sp]
10012198:	eb48 0808 	adc.w	r8, r8, r8
1001219c:	fbc9 280b 	smlal	r2, r8, r9, fp
100121a0:	e9dd 9b03 	ldrd	r9, fp, [sp, #12]
100121a4:	fbc9 280b 	smlal	r2, r8, r9, fp
		+ (llimb_t)2*a[3]*b[1] + (llimb_t)a[4]*b[0];
100121a8:	f8dd 9008 	ldr.w	r9, [sp, #8]
100121ac:	fb89 9b05 	smull	r9, fp, r9, r5
100121b0:	eb19 0909 	adds.w	r9, r9, r9
100121b4:	eb4b 0b0b 	adc.w	fp, fp, fp
100121b8:	eb12 0209 	adds.w	r2, r2, r9
100121bc:	eb48 080b 	adc.w	r8, r8, fp
100121c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
100121c4:	f8dd b01c 	ldr.w	fp, [sp, #28]
100121c8:	fbc9 280b 	smlal	r2, r8, r9, fp
	c[4] += 19 * ((llimb_t)2*a[5]*b[9] + (llimb_t)a[6]*b[8] + (llimb_t)2*a[7]*b[7]
100121cc:	eb1a 0202 	adds.w	r2, sl, r2
100121d0:	eb4c 0c08 	adc.w	ip, ip, r8
100121d4:	e9cd 2c16 	strd	r2, ip, [sp, #88]	@ 0x58
	c[5] = (llimb_t)a[0]*b[5] + (llimb_t)a[1]*b[4] + (llimb_t)a[2]*b[3] 
100121d8:	9a06      	ldr	r2, [sp, #24]
100121da:	f8dd c000 	ldr.w	ip, [sp]
100121de:	f8dd 9020 	ldr.w	r9, [sp, #32]
100121e2:	fb83 2802 	smull	r2, r8, r3, r2
100121e6:	fbcc 2809 	smlal	r2, r8, ip, r9
100121ea:	e9dd c904 	ldrd	ip, r9, [sp, #16]
100121ee:	fbcc 2809 	smlal	r2, r8, ip, r9
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
100121f2:	f8dd c00c 	ldr.w	ip, [sp, #12]
100121f6:	fbcc 2805 	smlal	r2, r8, ip, r5
100121fa:	f8dd c008 	ldr.w	ip, [sp, #8]
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
100121fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
10012202:	fbcc 280b 	smlal	r2, r8, ip, fp
10012206:	f8dd c004 	ldr.w	ip, [sp, #4]
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1001220a:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
		+ (llimb_t)a[3]*b[2] + (llimb_t)a[4]*b[1] + (llimb_t)a[5]*b[0];
1001220e:	fbcc 2807 	smlal	r2, r8, ip, r7
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
10012212:	fb86 c900 	smull	ip, r9, r6, r0
10012216:	fbca c90b 	smlal	ip, r9, sl, fp
1001221a:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
1001221e:	fbc4 c90a 	smlal	ip, r9, r4, sl
		      + (llimb_t)a[9]*b[6]);
10012222:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
10012226:	fbca c90e 	smlal	ip, r9, sl, lr
	c[5] += 19 * ((llimb_t)a[6]*b[9] + (llimb_t)a[7]*b[8] + (llimb_t)a[8]*b[7]
1001222a:	fbac ca01 	umull	ip, sl, ip, r1
1001222e:	eb12 020c 	adds.w	r2, r2, ip
10012232:	fb01 aa09 	mla	sl, r1, r9, sl
10012236:	eb4a 0a08 	adc.w	sl, sl, r8
1001223a:	e9cd 2a18 	strd	r2, sl, [sp, #96]	@ 0x60
	c[6] = (llimb_t)a[0]*b[6] + (llimb_t)2*a[1]*b[5] + (llimb_t)a[2]*b[4]
1001223e:	9a08      	ldr	r2, [sp, #32]
10012240:	f8dd 8000 	ldr.w	r8, [sp]
10012244:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
10012248:	fb83 2c02 	smull	r2, ip, r3, r2
1001224c:	1892      	adds	r2, r2, r2
1001224e:	eb4c 0c0c 	adc.w	ip, ip, ip
10012252:	fbc8 2c09 	smlal	r2, ip, r8, r9
10012256:	f8dd 8010 	ldr.w	r8, [sp, #16]
1001225a:	f8dd 9018 	ldr.w	r9, [sp, #24]
1001225e:	fbc8 2c09 	smlal	r2, ip, r8, r9
		+ (llimb_t)2*a[3]*b[3] + (llimb_t)a[4]*b[2] + (llimb_t)2*a[5]*b[1]
10012262:	f8dd 8014 	ldr.w	r8, [sp, #20]
10012266:	fb88 8905 	smull	r8, r9, r8, r5
1001226a:	eb18 0808 	adds.w	r8, r8, r8
1001226e:	eb49 0909 	adc.w	r9, r9, r9
10012272:	eb12 0208 	adds.w	r2, r2, r8
10012276:	eb4c 0c09 	adc.w	ip, ip, r9
1001227a:	f8dd 800c 	ldr.w	r8, [sp, #12]
1001227e:	f8dd 901c 	ldr.w	r9, [sp, #28]
10012282:	fbc8 2c09 	smlal	r2, ip, r8, r9
10012286:	f8dd 8008 	ldr.w	r8, [sp, #8]
1001228a:	fb88 8907 	smull	r8, r9, r8, r7
1001228e:	eb18 0808 	adds.w	r8, r8, r8
10012292:	eb49 0909 	adc.w	r9, r9, r9
10012296:	eb12 0208 	adds.w	r2, r2, r8
1001229a:	eb4c 0c09 	adc.w	ip, ip, r9
		+ (llimb_t)a[6]*b[0];
1001229e:	f8dd 8004 	ldr.w	r8, [sp, #4]
100122a2:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
100122a6:	fbc8 2c09 	smlal	r2, ip, r8, r9
	c[6] += 19 * ((llimb_t)2*a[7]*b[9] + (llimb_t)a[8]*b[8] + (llimb_t)2*a[9]*b[7]);
100122aa:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
100122ae:	fb86 9b0b 	smull	r9, fp, r6, fp
100122b2:	fb80 a808 	smull	sl, r8, r0, r8
100122b6:	eb19 0909 	adds.w	r9, r9, r9
100122ba:	eb4b 0b0b 	adc.w	fp, fp, fp
100122be:	eb19 090a 	adds.w	r9, r9, sl
100122c2:	eb4b 0b08 	adc.w	fp, fp, r8
100122c6:	fb84 8a0e 	smull	r8, sl, r4, lr
100122ca:	eb18 0808 	adds.w	r8, r8, r8
100122ce:	eb4a 0a0a 	adc.w	sl, sl, sl
100122d2:	eb19 0808 	adds.w	r8, r9, r8
100122d6:	eb4b 0a0a 	adc.w	sl, fp, sl
100122da:	fba8 8901 	umull	r8, r9, r8, r1
100122de:	eb12 0208 	adds.w	r2, r2, r8
100122e2:	fb01 990a 	mla	r9, r1, sl, r9
100122e6:	eb49 090c 	adc.w	r9, r9, ip
100122ea:	e9cd 291a 	strd	r2, r9, [sp, #104]	@ 0x68
	c[7] = (llimb_t)a[0]*b[7] + (llimb_t)a[1]*b[6] + (llimb_t)a[2]*b[5]
100122ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100122f0:	f8dd 8000 	ldr.w	r8, [sp]
100122f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
100122f8:	fb83 2c02 	smull	r2, ip, r3, r2
100122fc:	fbc8 2c04 	smlal	r2, ip, r8, r4
10012300:	f8dd 8010 	ldr.w	r8, [sp, #16]
10012304:	fbc8 2c09 	smlal	r2, ip, r8, r9
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
10012308:	f8dd 8018 	ldr.w	r8, [sp, #24]
1001230c:	f8dd 901c 	ldr.w	r9, [sp, #28]
10012310:	fbc5 2c08 	smlal	r2, ip, r5, r8
10012314:	f8dd 8014 	ldr.w	r8, [sp, #20]
10012318:	fbc8 2c09 	smlal	r2, ip, r8, r9
1001231c:	f8dd 800c 	ldr.w	r8, [sp, #12]
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
10012320:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
		+ (llimb_t)a[3]*b[4] + (llimb_t)a[4]*b[3] + (llimb_t)a[5]*b[2]
10012324:	fbc8 2c07 	smlal	r2, ip, r8, r7
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
10012328:	f8dd 8008 	ldr.w	r8, [sp, #8]
1001232c:	fbc8 2c09 	smlal	r2, ip, r8, r9
10012330:	f8dd 8004 	ldr.w	r8, [sp, #4]
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
10012334:	e9dd 9b0b 	ldrd	r9, fp, [sp, #44]	@ 0x2c
		+ (llimb_t)a[6]*b[1] + (llimb_t)a[7]*b[0];
10012338:	fbc8 2c06 	smlal	r2, ip, r8, r6
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
1001233c:	fb80 8a0e 	smull	r8, sl, r0, lr
10012340:	fbc9 8a0b 	smlal	r8, sl, r9, fp
10012344:	fba8 8901 	umull	r8, r9, r8, r1
10012348:	eb12 0208 	adds.w	r2, r2, r8
1001234c:	fb01 990a 	mla	r9, r1, sl, r9
10012350:	eb49 010c 	adc.w	r1, r9, ip
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
10012354:	fb83 3404 	smull	r3, r4, r3, r4
10012358:	18db      	adds	r3, r3, r3
	c[7] += 19 * ((llimb_t)a[8]*b[9] + (llimb_t)a[9]*b[8]);
1001235a:	e9cd 211c 	strd	r2, r1, [sp, #112]	@ 0x70
	c[8] = (llimb_t)a[0]*b[8] + (llimb_t)2*a[1]*b[7] + (llimb_t)a[2]*b[6]
1001235e:	9a00      	ldr	r2, [sp, #0]
10012360:	9909      	ldr	r1, [sp, #36]	@ 0x24
10012362:	4164      	adcs	r4, r4
10012364:	fbc2 3400 	smlal	r3, r4, r2, r0
10012368:	9a04      	ldr	r2, [sp, #16]
1001236a:	fbc2 3401 	smlal	r3, r4, r2, r1
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1001236e:	9a08      	ldr	r2, [sp, #32]
10012370:	fb85 5202 	smull	r5, r2, r5, r2
10012374:	196d      	adds	r5, r5, r5
10012376:	4152      	adcs	r2, r2
10012378:	195b      	adds	r3, r3, r5
1001237a:	eb44 0402 	adc.w	r4, r4, r2
1001237e:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
10012382:	fbc2 3401 	smlal	r3, r4, r2, r1
10012386:	9a05      	ldr	r2, [sp, #20]
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
10012388:	990a      	ldr	r1, [sp, #40]	@ 0x28
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
1001238a:	fb82 2707 	smull	r2, r7, r2, r7
1001238e:	1892      	adds	r2, r2, r2
10012390:	417f      	adcs	r7, r7
10012392:	189b      	adds	r3, r3, r2
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
10012394:	9a03      	ldr	r2, [sp, #12]
		+ (llimb_t)2*a[3]*b[5] + (llimb_t)a[4]*b[4] + (llimb_t)2*a[5]*b[3]
10012396:	eb44 0407 	adc.w	r4, r4, r7
		+ (llimb_t)a[6]*b[2] + (llimb_t)2*a[7]*b[1] + (llimb_t)a[8]*b[0];
1001239a:	fbc2 3401 	smlal	r3, r4, r2, r1
1001239e:	9a02      	ldr	r2, [sp, #8]
100123a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100123a2:	fb82 2606 	smull	r2, r6, r2, r6
100123a6:	1892      	adds	r2, r2, r2
100123a8:	4176      	adcs	r6, r6
100123aa:	189b      	adds	r3, r3, r2
100123ac:	9a01      	ldr	r2, [sp, #4]
100123ae:	eb44 0406 	adc.w	r4, r4, r6
100123b2:	fbc2 3401 	smlal	r3, r4, r2, r1
	c[8] += 19 * ((llimb_t)2*a[9]*b[9]);
100123b6:	2526      	movs	r5, #38	@ 0x26
100123b8:	fb8b 210e 	smull	r2, r1, fp, lr
100123bc:	fba2 2005 	umull	r2, r0, r2, r5
100123c0:	189b      	adds	r3, r3, r2
100123c2:	fb05 0101 	mla	r1, r5, r1, r0
100123c6:	eb41 0404 	adc.w	r4, r1, r4
100123ca:	e9cd 341e 	strd	r3, r4, [sp, #120]	@ 0x78

	CARRY(c, c, tmp, 0);
100123ce:	a80e      	add	r0, sp, #56	@ 0x38
100123d0:	2400      	movs	r4, #0
	c[8] += 19 * ((llimb_t)2*a[9]*b[9]);
100123d2:	4601      	mov	r1, r0
	CARRY(c, c, tmp, 0);
100123d4:	4623      	mov	r3, r4
100123d6:	4622      	mov	r2, r4
100123d8:	4627      	mov	r7, r4
100123da:	e9d1 6500 	ldrd	r6, r5, [r1]
100123de:	0e5b      	lsrs	r3, r3, #25
100123e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
100123e4:	199b      	adds	r3, r3, r6
100123e6:	eb45 6262 	adc.w	r2, r5, r2, asr #25
100123ea:	f023 457c 	bic.w	r5, r3, #4227858432	@ 0xfc000000
100123ee:	e9c1 5700 	strd	r5, r7, [r1]
100123f2:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
100123f6:	0e9b      	lsrs	r3, r3, #26
100123f8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
100123fc:	199b      	adds	r3, r3, r6
100123fe:	f104 0402 	add.w	r4, r4, #2
10012402:	eb45 62a2 	adc.w	r2, r5, r2, asr #26
10012406:	f023 457e 	bic.w	r5, r3, #4261412864	@ 0xfe000000
1001240a:	2c0a      	cmp	r4, #10
1001240c:	e9c1 5702 	strd	r5, r7, [r1, #8]
10012410:	f101 0110 	add.w	r1, r1, #16
10012414:	d1e1      	bne.n	100123da <fld_mul+0x590>
10012416:	0e5b      	lsrs	r3, r3, #25
10012418:	2413      	movs	r4, #19
1001241a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
1001241e:	fba3 3104 	umull	r3, r1, r3, r4
10012422:	1652      	asrs	r2, r2, #25
10012424:	fb04 1202 	mla	r2, r4, r2, r1
10012428:	990e      	ldr	r1, [sp, #56]	@ 0x38
	CARRY(dst, c, tmp, 0);
1001242a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
	CARRY(c, c, tmp, 0);
1001242c:	18c9      	adds	r1, r1, r3
1001242e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10012430:	eb42 0303 	adc.w	r3, r2, r3
10012434:	e9cd 130e 	strd	r1, r3, [sp, #56]	@ 0x38
	CARRY(dst, c, tmp, 0);
10012438:	2100      	movs	r1, #0
1001243a:	460b      	mov	r3, r1
1001243c:	460a      	mov	r2, r1
1001243e:	1d26      	adds	r6, r4, #4
10012440:	e9d0 4500 	ldrd	r4, r5, [r0]
10012444:	0e5b      	lsrs	r3, r3, #25
10012446:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
1001244a:	191b      	adds	r3, r3, r4
1001244c:	eb45 6262 	adc.w	r2, r5, r2, asr #25
10012450:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10012452:	f023 447c 	bic.w	r4, r3, #4227858432	@ 0xfc000000
10012456:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
1001245a:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
1001245e:	0e9b      	lsrs	r3, r3, #26
10012460:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
10012464:	191b      	adds	r3, r3, r4
10012466:	f023 447e 	bic.w	r4, r3, #4261412864	@ 0xfe000000
1001246a:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
1001246e:	f101 0102 	add.w	r1, r1, #2
10012472:	eb45 62a2 	adc.w	r2, r5, r2, asr #26
10012476:	290a      	cmp	r1, #10
10012478:	f100 0010 	add.w	r0, r0, #16
1001247c:	d1e0      	bne.n	10012440 <fld_mul+0x5f6>
1001247e:	0e5b      	lsrs	r3, r3, #25
10012480:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
10012484:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10012486:	6812      	ldr	r2, [r2, #0]
10012488:	2113      	movs	r1, #19
1001248a:	fb01 2203 	mla	r2, r1, r3, r2
1001248e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10012490:	601a      	str	r2, [r3, #0]
}
10012492:	b023      	add	sp, #140	@ 0x8c
10012494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

10012498 <fld_sq>:
/*
 * fld_sq - square x and reduce modulo q.
 */
void
fld_sq(fld_t dst, const fld_t a)
{
10012498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	c[0] = (llimb_t)a[0]*a[0];
	c[1] = (llimb_t)2*a[0]*a[1];
	c[2] = 2*((llimb_t)a[0]*a[2] + (llimb_t)a[1]*a[1]);
	c[3] = 2*((llimb_t)a[0]*a[3] + (llimb_t)a[1]*a[2]);
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1001249c:	e9d1 b204 	ldrd	fp, r2, [r1, #16]
{
100124a0:	b09b      	sub	sp, #108	@ 0x6c
	c[1] = (llimb_t)2*a[0]*a[1];
100124a2:	e9d1 7300 	ldrd	r7, r3, [r1]
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
100124a6:	6a0c      	ldr	r4, [r1, #32]
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
100124a8:	9201      	str	r2, [sp, #4]
{
100124aa:	9003      	str	r0, [sp, #12]
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
100124ac:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
	c[3] = 2*((llimb_t)a[0]*a[3] + (llimb_t)a[1]*a[2]);
100124b0:	e9d1 6002 	ldrd	r6, r0, [r1, #8]
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
100124b4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
100124b6:	9402      	str	r4, [sp, #8]
	c[9] = 2*((llimb_t)a[0]*a[9] + (llimb_t)a[1]*a[8] + (llimb_t)a[2]*a[7] + (llimb_t)a[3]*a[6] + (llimb_t)a[4]*a[5]);
100124b8:	fb83 4c04 	smull	r4, ip, r3, r4
100124bc:	fbc7 4c01 	smlal	r4, ip, r7, r1
100124c0:	f8dd e004 	ldr.w	lr, [sp, #4]
100124c4:	fbc6 4c02 	smlal	r4, ip, r6, r2
100124c8:	fbc0 4c05 	smlal	r4, ip, r0, r5
100124cc:	fbcb 4c0e 	smlal	r4, ip, fp, lr
100124d0:	1924      	adds	r4, r4, r4
100124d2:	eb4c 0c0c 	adc.w	ip, ip, ip
100124d6:	e9cd 4c18 	strd	r4, ip, [sp, #96]	@ 0x60
	
	c[0] += 19*2*((llimb_t)2*a[1]*a[9] + (llimb_t)a[2]*a[8] + (llimb_t)2*a[3]*a[7] + (llimb_t)a[4]*a[6] + (llimb_t)a[5]*a[5]);
100124da:	f8dd c008 	ldr.w	ip, [sp, #8]
100124de:	fb83 4e01 	smull	r4, lr, r3, r1
100124e2:	fb86 8c0c 	smull	r8, ip, r6, ip
100124e6:	1924      	adds	r4, r4, r4
100124e8:	eb4e 0e0e 	adc.w	lr, lr, lr
100124ec:	eb14 0408 	adds.w	r4, r4, r8
100124f0:	eb4e 0e0c 	adc.w	lr, lr, ip
100124f4:	fb80 c802 	smull	ip, r8, r0, r2
100124f8:	eb1c 0c0c 	adds.w	ip, ip, ip
100124fc:	eb48 0808 	adc.w	r8, r8, r8
10012500:	eb14 040c 	adds.w	r4, r4, ip
10012504:	eb4e 0e08 	adc.w	lr, lr, r8
10012508:	f8dd c004 	ldr.w	ip, [sp, #4]
1001250c:	fbcb 4e05 	smlal	r4, lr, fp, r5
10012510:	fbcc 4e0c 	smlal	r4, lr, ip, ip
10012514:	f04f 0c26 	mov.w	ip, #38	@ 0x26
10012518:	fba4 480c 	umull	r4, r8, r4, ip
1001251c:	fb0c 880e 	mla	r8, ip, lr, r8
10012520:	fbc7 4807 	smlal	r4, r8, r7, r7
10012524:	e9cd 4806 	strd	r4, r8, [sp, #24]
	c[1] += 19*2*((llimb_t)a[2]*a[9] + (llimb_t)a[3]*a[8] + (llimb_t)a[4]*a[7] + (llimb_t)a[5]*a[6]);
10012528:	9c02      	ldr	r4, [sp, #8]
1001252a:	f8dd 8004 	ldr.w	r8, [sp, #4]
1001252e:	fb80 4e04 	smull	r4, lr, r0, r4
10012532:	fbc6 4e01 	smlal	r4, lr, r6, r1
10012536:	fbcb 4e02 	smlal	r4, lr, fp, r2
1001253a:	fbc8 4e05 	smlal	r4, lr, r8, r5
1001253e:	fba4 840c 	umull	r8, r4, r4, ip
10012542:	fb0c 440e 	mla	r4, ip, lr, r4
	c[1] = (llimb_t)2*a[0]*a[1];
10012546:	fb87 e903 	smull	lr, r9, r7, r3
1001254a:	eb1e 0e0e 	adds.w	lr, lr, lr
1001254e:	eb49 0909 	adc.w	r9, r9, r9
	c[1] += 19*2*((llimb_t)a[2]*a[9] + (llimb_t)a[3]*a[8] + (llimb_t)a[4]*a[7] + (llimb_t)a[5]*a[6]);
10012552:	eb18 080e 	adds.w	r8, r8, lr
10012556:	eb44 0409 	adc.w	r4, r4, r9
	c[2] += 19*(2*((llimb_t)2*a[3]*a[9] + (llimb_t)a[4]*a[8] + (llimb_t)2*a[5]*a[7]) + (llimb_t)a[6]*a[6]);
1001255a:	f8dd e008 	ldr.w	lr, [sp, #8]
	c[1] += 19*2*((llimb_t)a[2]*a[9] + (llimb_t)a[3]*a[8] + (llimb_t)a[4]*a[7] + (llimb_t)a[5]*a[6]);
1001255e:	e9cd 8408 	strd	r8, r4, [sp, #32]
	c[2] += 19*(2*((llimb_t)2*a[3]*a[9] + (llimb_t)a[4]*a[8] + (llimb_t)2*a[5]*a[7]) + (llimb_t)a[6]*a[6]);
10012562:	fb80 4801 	smull	r4, r8, r0, r1
10012566:	fb8b 9e0e 	smull	r9, lr, fp, lr
1001256a:	1924      	adds	r4, r4, r4
1001256c:	eb48 0808 	adc.w	r8, r8, r8
10012570:	eb14 0409 	adds.w	r4, r4, r9
10012574:	eb48 080e 	adc.w	r8, r8, lr
10012578:	f8dd e004 	ldr.w	lr, [sp, #4]
1001257c:	fb8e e902 	smull	lr, r9, lr, r2
10012580:	eb1e 0e0e 	adds.w	lr, lr, lr
10012584:	eb49 0909 	adc.w	r9, r9, r9
10012588:	eb14 040e 	adds.w	r4, r4, lr
1001258c:	eb48 0809 	adc.w	r8, r8, r9
10012590:	1924      	adds	r4, r4, r4
10012592:	fb85 e905 	smull	lr, r9, r5, r5
10012596:	eb48 0808 	adc.w	r8, r8, r8
1001259a:	eb14 0e0e 	adds.w	lr, r4, lr
1001259e:	f04f 0413 	mov.w	r4, #19
100125a2:	eb48 0909 	adc.w	r9, r8, r9
100125a6:	fbae 8e04 	umull	r8, lr, lr, r4
100125aa:	fb04 ee09 	mla	lr, r4, r9, lr
	c[2] = 2*((llimb_t)a[0]*a[2] + (llimb_t)a[1]*a[1]);
100125ae:	fb83 4903 	smull	r4, r9, r3, r3
100125b2:	fbc7 4906 	smlal	r4, r9, r7, r6
100125b6:	1924      	adds	r4, r4, r4
100125b8:	eb49 0909 	adc.w	r9, r9, r9
	c[2] += 19*(2*((llimb_t)2*a[3]*a[9] + (llimb_t)a[4]*a[8] + (llimb_t)2*a[5]*a[7]) + (llimb_t)a[6]*a[6]);
100125bc:	eb18 0404 	adds.w	r4, r8, r4
100125c0:	eb4e 0e09 	adc.w	lr, lr, r9
100125c4:	e9cd 4e0a 	strd	r4, lr, [sp, #40]	@ 0x28
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
100125c8:	e9dd e801 	ldrd	lr, r8, [sp, #4]
100125cc:	fb8e e408 	smull	lr, r4, lr, r8
100125d0:	fbcb e401 	smlal	lr, r4, fp, r1
100125d4:	fbc5 e402 	smlal	lr, r4, r5, r2
100125d8:	fbae 8e0c 	umull	r8, lr, lr, ip
100125dc:	fb0c ee04 	mla	lr, ip, r4, lr
	c[3] = 2*((llimb_t)a[0]*a[3] + (llimb_t)a[1]*a[2]);
100125e0:	fb83 4906 	smull	r4, r9, r3, r6
100125e4:	fbc7 4900 	smlal	r4, r9, r7, r0
100125e8:	1924      	adds	r4, r4, r4
100125ea:	eb49 0909 	adc.w	r9, r9, r9
	c[3] += 19*2*((llimb_t)a[4]*a[9] + (llimb_t)a[5]*a[8] + (llimb_t)a[6]*a[7]);
100125ee:	eb18 0404 	adds.w	r4, r8, r4
100125f2:	eb4e 0e09 	adc.w	lr, lr, r9
100125f6:	e9cd 4e0c 	strd	r4, lr, [sp, #48]	@ 0x30
	c[4] = 2*((llimb_t)a[0]*a[4] + (llimb_t)2*a[1]*a[3]) + (llimb_t)a[2]*a[2];
100125fa:	fb83 4800 	smull	r4, r8, r3, r0
100125fe:	1924      	adds	r4, r4, r4
10012600:	eb48 0808 	adc.w	r8, r8, r8
10012604:	fbc7 480b 	smlal	r4, r8, r7, fp
10012608:	fb86 9e06 	smull	r9, lr, r6, r6
1001260c:	1924      	adds	r4, r4, r4
1001260e:	eb48 0808 	adc.w	r8, r8, r8
10012612:	eb14 0409 	adds.w	r4, r4, r9
10012616:	eb48 080e 	adc.w	r8, r8, lr
	c[4] += 19*(2*((llimb_t)2*a[5]*a[9] + (llimb_t)a[6]*a[8] + (llimb_t)a[7]*a[7]));
1001261a:	f8dd e004 	ldr.w	lr, [sp, #4]
1001261e:	fb8e e901 	smull	lr, r9, lr, r1
10012622:	eb1e 0e0e 	adds.w	lr, lr, lr
10012626:	f8cd e010 	str.w	lr, [sp, #16]
1001262a:	f8dd e008 	ldr.w	lr, [sp, #8]
1001262e:	fb85 ae0e 	smull	sl, lr, r5, lr
10012632:	f8cd e014 	str.w	lr, [sp, #20]
10012636:	f8dd e010 	ldr.w	lr, [sp, #16]
1001263a:	eb49 0909 	adc.w	r9, r9, r9
1001263e:	eb1e 0e0a 	adds.w	lr, lr, sl
10012642:	f8dd a014 	ldr.w	sl, [sp, #20]
10012646:	eb49 090a 	adc.w	r9, r9, sl
1001264a:	fbc2 e902 	smlal	lr, r9, r2, r2
1001264e:	fbae ea0c 	umull	lr, sl, lr, ip
10012652:	eb14 040e 	adds.w	r4, r4, lr
10012656:	fb0c aa09 	mla	sl, ip, r9, sl
1001265a:	eb4a 0a08 	adc.w	sl, sl, r8
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1001265e:	f8dd 8004 	ldr.w	r8, [sp, #4]
	c[4] += 19*(2*((llimb_t)2*a[5]*a[9] + (llimb_t)a[6]*a[8] + (llimb_t)a[7]*a[7]));
10012662:	e9cd 4a0e 	strd	r4, sl, [sp, #56]	@ 0x38
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
10012666:	fb83 4e0b 	smull	r4, lr, r3, fp
1001266a:	fbc7 4e08 	smlal	r4, lr, r7, r8
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
1001266e:	f8dd 8008 	ldr.w	r8, [sp, #8]
10012672:	fb82 8a08 	smull	r8, sl, r2, r8
10012676:	fbc5 8a01 	smlal	r8, sl, r5, r1
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
1001267a:	fbc6 4e00 	smlal	r4, lr, r6, r0
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
1001267e:	fba8 890c 	umull	r8, r9, r8, ip
	c[5] = 2*((llimb_t)a[0]*a[5] + (llimb_t)a[1]*a[4] + (llimb_t)a[2]*a[3]);
10012682:	1924      	adds	r4, r4, r4
10012684:	eb4e 0e0e 	adc.w	lr, lr, lr
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
10012688:	fb0c 990a 	mla	r9, ip, sl, r9
1001268c:	eb14 0408 	adds.w	r4, r4, r8
10012690:	eb49 090e 	adc.w	r9, r9, lr
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
10012694:	f8dd e004 	ldr.w	lr, [sp, #4]
	c[5] += 19*2*((llimb_t)a[6]*a[9] + (llimb_t)a[7]*a[8]);
10012698:	e9cd 4910 	strd	r4, r9, [sp, #64]	@ 0x40
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
1001269c:	fb83 4e0e 	smull	r4, lr, r3, lr
100126a0:	1924      	adds	r4, r4, r4
100126a2:	eb4e 0e0e 	adc.w	lr, lr, lr
100126a6:	fbc7 4e05 	smlal	r4, lr, r7, r5
100126aa:	fbc6 4e0b 	smlal	r4, lr, r6, fp
100126ae:	fbc0 4e00 	smlal	r4, lr, r0, r0
100126b2:	1924      	adds	r4, r4, r4
100126b4:	eb4e 0e0e 	adc.w	lr, lr, lr
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
100126b8:	fb82 8901 	smull	r8, r9, r2, r1
	c[6] = 2*((llimb_t)a[0]*a[6] + (llimb_t)2*a[1]*a[5] + (llimb_t)a[2]*a[4] + (llimb_t)a[3]*a[3]);
100126bc:	f8cd e010 	str.w	lr, [sp, #16]
	c[6] += 19*((llimb_t)2*2*a[7]*a[9] + (llimb_t)a[8]*a[8]);
100126c0:	f8dd e008 	ldr.w	lr, [sp, #8]
100126c4:	ea4f 0989 	mov.w	r9, r9, lsl #2
100126c8:	ea49 7998 	orr.w	r9, r9, r8, lsr #30
100126cc:	fb8e ea0e 	smull	lr, sl, lr, lr
100126d0:	ea4f 0888 	mov.w	r8, r8, lsl #2
100126d4:	eb18 080e 	adds.w	r8, r8, lr
100126d8:	eb49 0a0a 	adc.w	sl, r9, sl
100126dc:	f04f 0913 	mov.w	r9, #19
100126e0:	46ce      	mov	lr, r9
100126e2:	fba8 8909 	umull	r8, r9, r8, r9
100126e6:	fb0e 990a 	mla	r9, lr, sl, r9
100126ea:	f8dd e010 	ldr.w	lr, [sp, #16]
100126ee:	eb14 0408 	adds.w	r4, r4, r8
100126f2:	eb49 090e 	adc.w	r9, r9, lr
100126f6:	e9cd 4912 	strd	r4, r9, [sp, #72]	@ 0x48
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
100126fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
100126fe:	fb83 4e05 	smull	r4, lr, r3, r5
10012702:	fbc7 4e02 	smlal	r4, lr, r7, r2
10012706:	fbc6 4e08 	smlal	r4, lr, r6, r8
	c[7] += 19*2*(llimb_t)a[8]*a[9];
1001270a:	f8dd 8008 	ldr.w	r8, [sp, #8]
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1001270e:	fbc0 4e0b 	smlal	r4, lr, r0, fp
	c[7] += 19*2*(llimb_t)a[8]*a[9];
10012712:	fb88 9a01 	smull	r9, sl, r8, r1
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
10012716:	1924      	adds	r4, r4, r4
	c[7] += 19*2*(llimb_t)a[8]*a[9];
10012718:	fba9 980c 	umull	r9, r8, r9, ip
	c[7] = 2*((llimb_t)a[0]*a[7] + (llimb_t)a[1]*a[6] + (llimb_t)a[2]*a[5] + (llimb_t)a[3]*a[4]);
1001271c:	eb4e 0e0e 	adc.w	lr, lr, lr
	c[7] += 19*2*(llimb_t)a[8]*a[9];
10012720:	fb0c 880a 	mla	r8, ip, sl, r8
10012724:	eb14 0409 	adds.w	r4, r4, r9
10012728:	eb48 080e 	adc.w	r8, r8, lr
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
1001272c:	fb83 3202 	smull	r3, r2, r3, r2
10012730:	18db      	adds	r3, r3, r3
	c[7] += 19*2*(llimb_t)a[8]*a[9];
10012732:	e9cd 4814 	strd	r4, r8, [sp, #80]	@ 0x50
	c[8] = 2*((llimb_t)a[0]*a[8] + (llimb_t)2*a[1]*a[7] + (llimb_t)a[2]*a[6] + (llimb_t)2*a[3]*a[5]) + (llimb_t)a[4]*a[4];
10012736:	9c02      	ldr	r4, [sp, #8]
10012738:	4152      	adcs	r2, r2
1001273a:	fbc7 3204 	smlal	r3, r2, r7, r4
1001273e:	9c01      	ldr	r4, [sp, #4]
10012740:	fb80 0404 	smull	r0, r4, r0, r4
10012744:	fbc6 3205 	smlal	r3, r2, r6, r5
10012748:	1800      	adds	r0, r0, r0
1001274a:	4164      	adcs	r4, r4
1001274c:	1818      	adds	r0, r3, r0
1001274e:	eb42 0204 	adc.w	r2, r2, r4
10012752:	fb8b 340b 	smull	r3, r4, fp, fp
10012756:	1800      	adds	r0, r0, r0
10012758:	4152      	adcs	r2, r2
1001275a:	18c0      	adds	r0, r0, r3
1001275c:	eb42 0204 	adc.w	r2, r2, r4
	c[8] += 19*2*(llimb_t)a[9]*a[9];
10012760:	fb81 1401 	smull	r1, r4, r1, r1
10012764:	fba1 130c 	umull	r1, r3, r1, ip
10012768:	1840      	adds	r0, r0, r1
1001276a:	fb0c 3304 	mla	r3, ip, r4, r3
1001276e:	eb43 0302 	adc.w	r3, r3, r2

	CARRY(c, c, tmp, 0);
10012772:	2400      	movs	r4, #0
	c[8] += 19*2*(llimb_t)a[9]*a[9];
10012774:	e9cd 0316 	strd	r0, r3, [sp, #88]	@ 0x58
	CARRY(c, c, tmp, 0);
10012778:	a806      	add	r0, sp, #24
	c[8] += 19*2*(llimb_t)a[9]*a[9];
1001277a:	4601      	mov	r1, r0
	CARRY(c, c, tmp, 0);
1001277c:	4623      	mov	r3, r4
1001277e:	4622      	mov	r2, r4
10012780:	4627      	mov	r7, r4
10012782:	e9d1 6500 	ldrd	r6, r5, [r1]
10012786:	0e5b      	lsrs	r3, r3, #25
10012788:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
1001278c:	199b      	adds	r3, r3, r6
1001278e:	eb45 6262 	adc.w	r2, r5, r2, asr #25
10012792:	f023 457c 	bic.w	r5, r3, #4227858432	@ 0xfc000000
10012796:	e9c1 5700 	strd	r5, r7, [r1]
1001279a:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
1001279e:	0e9b      	lsrs	r3, r3, #26
100127a0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
100127a4:	199b      	adds	r3, r3, r6
100127a6:	f104 0402 	add.w	r4, r4, #2
100127aa:	eb45 62a2 	adc.w	r2, r5, r2, asr #26
100127ae:	f023 457e 	bic.w	r5, r3, #4261412864	@ 0xfe000000
100127b2:	2c0a      	cmp	r4, #10
100127b4:	e9c1 5702 	strd	r5, r7, [r1, #8]
100127b8:	f101 0110 	add.w	r1, r1, #16
100127bc:	d1e1      	bne.n	10012782 <fld_sq+0x2ea>
100127be:	0e5b      	lsrs	r3, r3, #25
100127c0:	2413      	movs	r4, #19
100127c2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
100127c6:	fba3 3104 	umull	r3, r1, r3, r4
100127ca:	1652      	asrs	r2, r2, #25
100127cc:	fb04 1202 	mla	r2, r4, r2, r1
100127d0:	9906      	ldr	r1, [sp, #24]
	CARRY(dst, c, tmp, 0);
100127d2:	9c03      	ldr	r4, [sp, #12]
	CARRY(c, c, tmp, 0);
100127d4:	18c9      	adds	r1, r1, r3
100127d6:	9b07      	ldr	r3, [sp, #28]
100127d8:	eb42 0303 	adc.w	r3, r2, r3
100127dc:	e9cd 1306 	strd	r1, r3, [sp, #24]
	CARRY(dst, c, tmp, 0);
100127e0:	2100      	movs	r1, #0
100127e2:	460b      	mov	r3, r1
100127e4:	460a      	mov	r2, r1
100127e6:	1d26      	adds	r6, r4, #4
100127e8:	e9d0 4500 	ldrd	r4, r5, [r0]
100127ec:	0e5b      	lsrs	r3, r3, #25
100127ee:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
100127f2:	191b      	adds	r3, r3, r4
100127f4:	eb45 6262 	adc.w	r2, r5, r2, asr #25
100127f8:	9d03      	ldr	r5, [sp, #12]
100127fa:	f023 447c 	bic.w	r4, r3, #4227858432	@ 0xfc000000
100127fe:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
10012802:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
10012806:	0e9b      	lsrs	r3, r3, #26
10012808:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
1001280c:	191b      	adds	r3, r3, r4
1001280e:	f023 447e 	bic.w	r4, r3, #4261412864	@ 0xfe000000
10012812:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
10012816:	f101 0102 	add.w	r1, r1, #2
1001281a:	eb45 62a2 	adc.w	r2, r5, r2, asr #26
1001281e:	290a      	cmp	r1, #10
10012820:	f100 0010 	add.w	r0, r0, #16
10012824:	d1e0      	bne.n	100127e8 <fld_sq+0x350>
10012826:	0e5b      	lsrs	r3, r3, #25
10012828:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
1001282c:	9a03      	ldr	r2, [sp, #12]
1001282e:	6812      	ldr	r2, [r2, #0]
10012830:	2113      	movs	r1, #19
10012832:	fb01 2203 	mla	r2, r1, r3, r2
10012836:	9b03      	ldr	r3, [sp, #12]
10012838:	601a      	str	r2, [r3, #0]
}
1001283a:	b01b      	add	sp, #108	@ 0x6c
1001283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

10012840 <fld_inv>:
 * power. by lagrange's theorem (aka 'fermat's little theorem' in this
 * special case) this gives us z^-1 modulo q.
 */
void
fld_inv(fld_t res, const fld_t z)
{
10012840:	b530      	push	{r4, r5, lr}
10012842:	b0e5      	sub	sp, #404	@ 0x194
10012844:	4604      	mov	r4, r0
	fld_t z2_100_0;
	fld_t t0;
	fld_t t1;
	int i;

	/* 2 */ fld_sq(z2, z);
10012846:	4668      	mov	r0, sp
{
10012848:	460d      	mov	r5, r1
	/* 2 */ fld_sq(z2, z);
1001284a:	f7ff fe25 	bl	10012498 <fld_sq>
	/* 4 */ fld_sq(t1, z2);
1001284e:	4669      	mov	r1, sp
10012850:	a85a      	add	r0, sp, #360	@ 0x168
10012852:	f7ff fe21 	bl	10012498 <fld_sq>
	/* 8 */ fld_sq(t0, t1);
10012856:	a95a      	add	r1, sp, #360	@ 0x168
10012858:	a850      	add	r0, sp, #320	@ 0x140
1001285a:	f7ff fe1d 	bl	10012498 <fld_sq>
	/* 9 */ fld_mul(z9,t0, z);
1001285e:	462a      	mov	r2, r5
10012860:	a950      	add	r1, sp, #320	@ 0x140
10012862:	a80a      	add	r0, sp, #40	@ 0x28
10012864:	f7ff faf1 	bl	10011e4a <fld_mul>
	/* 11 */ fld_mul(z11, z9, z2);
10012868:	466a      	mov	r2, sp
1001286a:	a90a      	add	r1, sp, #40	@ 0x28
1001286c:	a814      	add	r0, sp, #80	@ 0x50
1001286e:	f7ff faec 	bl	10011e4a <fld_mul>
	/* 22 */ fld_sq(t0, z11);
10012872:	a914      	add	r1, sp, #80	@ 0x50
10012874:	a850      	add	r0, sp, #320	@ 0x140
10012876:	f7ff fe0f 	bl	10012498 <fld_sq>
	/* 2^5 - 2^0 = 31 */ fld_mul(z2_5_0, t0, z9);
1001287a:	aa0a      	add	r2, sp, #40	@ 0x28
1001287c:	a950      	add	r1, sp, #320	@ 0x140
1001287e:	a81e      	add	r0, sp, #120	@ 0x78
10012880:	f7ff fae3 	bl	10011e4a <fld_mul>

	/* 2^6 - 2^1 */ fld_sq(t0, z2_5_0);
10012884:	a91e      	add	r1, sp, #120	@ 0x78
10012886:	a850      	add	r0, sp, #320	@ 0x140
10012888:	f7ff fe06 	bl	10012498 <fld_sq>
	/* 2^7 - 2^2 */ fld_sq(t1, t0);
1001288c:	a950      	add	r1, sp, #320	@ 0x140
1001288e:	a85a      	add	r0, sp, #360	@ 0x168
10012890:	f7ff fe02 	bl	10012498 <fld_sq>
	/* 2^8 - 2^3 */ fld_sq(t0, t1);
10012894:	a95a      	add	r1, sp, #360	@ 0x168
10012896:	a850      	add	r0, sp, #320	@ 0x140
10012898:	f7ff fdfe 	bl	10012498 <fld_sq>
	/* 2^9 - 2^4 */ fld_sq(t1, t0);
1001289c:	a950      	add	r1, sp, #320	@ 0x140
1001289e:	a85a      	add	r0, sp, #360	@ 0x168
100128a0:	f7ff fdfa 	bl	10012498 <fld_sq>
	/* 2^10 - 2^5 */ fld_sq(t0, t1);
100128a4:	a95a      	add	r1, sp, #360	@ 0x168
100128a6:	a850      	add	r0, sp, #320	@ 0x140
100128a8:	f7ff fdf6 	bl	10012498 <fld_sq>
	/* 2^10 - 2^0 */ fld_mul(z2_10_0, t0, z2_5_0);
100128ac:	aa1e      	add	r2, sp, #120	@ 0x78
100128ae:	a950      	add	r1, sp, #320	@ 0x140
100128b0:	a828      	add	r0, sp, #160	@ 0xa0
100128b2:	f7ff faca 	bl	10011e4a <fld_mul>

	/* 2^11 - 2^1 */ fld_sq(t0, z2_10_0);
100128b6:	a928      	add	r1, sp, #160	@ 0xa0
100128b8:	a850      	add	r0, sp, #320	@ 0x140
100128ba:	f7ff fded 	bl	10012498 <fld_sq>
	/* 2^12 - 2^2 */ fld_sq(t1, t0);
100128be:	a950      	add	r1, sp, #320	@ 0x140
100128c0:	a85a      	add	r0, sp, #360	@ 0x168
100128c2:	f7ff fde9 	bl	10012498 <fld_sq>
100128c6:	2504      	movs	r5, #4
	/* 2^20 - 2^10 */ for (i = 2; i < 10; i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
100128c8:	a95a      	add	r1, sp, #360	@ 0x168
100128ca:	a850      	add	r0, sp, #320	@ 0x140
100128cc:	f7ff fde4 	bl	10012498 <fld_sq>
100128d0:	a950      	add	r1, sp, #320	@ 0x140
100128d2:	a85a      	add	r0, sp, #360	@ 0x168
100128d4:	f7ff fde0 	bl	10012498 <fld_sq>
100128d8:	3d01      	subs	r5, #1
100128da:	d1f5      	bne.n	100128c8 <fld_inv+0x88>
	/* 2^20 - 2^0 */ fld_mul(z2_20_0, t1, z2_10_0);
100128dc:	aa28      	add	r2, sp, #160	@ 0xa0
100128de:	a95a      	add	r1, sp, #360	@ 0x168
100128e0:	a832      	add	r0, sp, #200	@ 0xc8
100128e2:	f7ff fab2 	bl	10011e4a <fld_mul>

	/* 2^21 - 2^1 */ fld_sq(t0, z2_20_0);
100128e6:	a932      	add	r1, sp, #200	@ 0xc8
100128e8:	a850      	add	r0, sp, #320	@ 0x140
100128ea:	f7ff fdd5 	bl	10012498 <fld_sq>
	/* 2^22 - 2^2 */ fld_sq(t1, t0);
100128ee:	a950      	add	r1, sp, #320	@ 0x140
100128f0:	a85a      	add	r0, sp, #360	@ 0x168
100128f2:	f7ff fdd1 	bl	10012498 <fld_sq>
100128f6:	2509      	movs	r5, #9
	/* 2^40 - 2^20 */ for (i = 2;i < 20;i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
100128f8:	a95a      	add	r1, sp, #360	@ 0x168
100128fa:	a850      	add	r0, sp, #320	@ 0x140
100128fc:	f7ff fdcc 	bl	10012498 <fld_sq>
10012900:	a950      	add	r1, sp, #320	@ 0x140
10012902:	a85a      	add	r0, sp, #360	@ 0x168
10012904:	f7ff fdc8 	bl	10012498 <fld_sq>
10012908:	3d01      	subs	r5, #1
1001290a:	d1f5      	bne.n	100128f8 <fld_inv+0xb8>
	/* 2^40 - 2^0 */ fld_mul(t0, t1, z2_20_0);
1001290c:	aa32      	add	r2, sp, #200	@ 0xc8
1001290e:	a95a      	add	r1, sp, #360	@ 0x168
10012910:	a850      	add	r0, sp, #320	@ 0x140
10012912:	f7ff fa9a 	bl	10011e4a <fld_mul>

	/* 2^41 - 2^1 */ fld_sq(t1, t0);
10012916:	a950      	add	r1, sp, #320	@ 0x140
10012918:	a85a      	add	r0, sp, #360	@ 0x168
1001291a:	f7ff fdbd 	bl	10012498 <fld_sq>
	/* 2^42 - 2^2 */ fld_sq(t0, t1);
1001291e:	a95a      	add	r1, sp, #360	@ 0x168
10012920:	a850      	add	r0, sp, #320	@ 0x140
10012922:	f7ff fdb9 	bl	10012498 <fld_sq>
10012926:	2504      	movs	r5, #4
	/* 2^50 - 2^10 */ for (i = 2; i < 10; i += 2) { fld_sq(t1, t0); fld_sq(t0, t1); }
10012928:	a950      	add	r1, sp, #320	@ 0x140
1001292a:	a85a      	add	r0, sp, #360	@ 0x168
1001292c:	f7ff fdb4 	bl	10012498 <fld_sq>
10012930:	a95a      	add	r1, sp, #360	@ 0x168
10012932:	a850      	add	r0, sp, #320	@ 0x140
10012934:	f7ff fdb0 	bl	10012498 <fld_sq>
10012938:	3d01      	subs	r5, #1
1001293a:	d1f5      	bne.n	10012928 <fld_inv+0xe8>
	/* 2^50 - 2^0 */ fld_mul(z2_50_0, t0, z2_10_0);
1001293c:	aa28      	add	r2, sp, #160	@ 0xa0
1001293e:	a950      	add	r1, sp, #320	@ 0x140
10012940:	a83c      	add	r0, sp, #240	@ 0xf0
10012942:	f7ff fa82 	bl	10011e4a <fld_mul>

	/* 2^51 - 2^1 */ fld_sq(t0, z2_50_0);
10012946:	a93c      	add	r1, sp, #240	@ 0xf0
10012948:	a850      	add	r0, sp, #320	@ 0x140
1001294a:	f7ff fda5 	bl	10012498 <fld_sq>
	/* 2^52 - 2^2 */ fld_sq(t1, t0);
1001294e:	a950      	add	r1, sp, #320	@ 0x140
10012950:	a85a      	add	r0, sp, #360	@ 0x168
10012952:	f7ff fda1 	bl	10012498 <fld_sq>
10012956:	2518      	movs	r5, #24
	/* 2^100 - 2^50 */ for (i = 2; i < 50; i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
10012958:	a95a      	add	r1, sp, #360	@ 0x168
1001295a:	a850      	add	r0, sp, #320	@ 0x140
1001295c:	f7ff fd9c 	bl	10012498 <fld_sq>
10012960:	a950      	add	r1, sp, #320	@ 0x140
10012962:	a85a      	add	r0, sp, #360	@ 0x168
10012964:	f7ff fd98 	bl	10012498 <fld_sq>
10012968:	3d01      	subs	r5, #1
1001296a:	d1f5      	bne.n	10012958 <fld_inv+0x118>
	/* 2^100 - 2^0 */ fld_mul(z2_100_0, t1, z2_50_0);
1001296c:	aa3c      	add	r2, sp, #240	@ 0xf0
1001296e:	a95a      	add	r1, sp, #360	@ 0x168
10012970:	a846      	add	r0, sp, #280	@ 0x118
10012972:	f7ff fa6a 	bl	10011e4a <fld_mul>

	/* 2^101 - 2^1 */ fld_sq(t1, z2_100_0);
10012976:	a946      	add	r1, sp, #280	@ 0x118
10012978:	a85a      	add	r0, sp, #360	@ 0x168
1001297a:	f7ff fd8d 	bl	10012498 <fld_sq>
	/* 2^102 - 2^2 */ fld_sq(t0, t1);
1001297e:	a95a      	add	r1, sp, #360	@ 0x168
10012980:	a850      	add	r0, sp, #320	@ 0x140
10012982:	f7ff fd89 	bl	10012498 <fld_sq>
10012986:	2531      	movs	r5, #49	@ 0x31
	/* 2^200 - 2^100 */ for (i = 2; i < 100; i += 2) { fld_sq(t1, t0); fld_sq(t0, t1); }
10012988:	a950      	add	r1, sp, #320	@ 0x140
1001298a:	a85a      	add	r0, sp, #360	@ 0x168
1001298c:	f7ff fd84 	bl	10012498 <fld_sq>
10012990:	a95a      	add	r1, sp, #360	@ 0x168
10012992:	a850      	add	r0, sp, #320	@ 0x140
10012994:	f7ff fd80 	bl	10012498 <fld_sq>
10012998:	3d01      	subs	r5, #1
1001299a:	d1f5      	bne.n	10012988 <fld_inv+0x148>
	/* 2^200 - 2^0 */ fld_mul(t1, t0, z2_100_0);
1001299c:	aa46      	add	r2, sp, #280	@ 0x118
1001299e:	a950      	add	r1, sp, #320	@ 0x140
100129a0:	a85a      	add	r0, sp, #360	@ 0x168
100129a2:	f7ff fa52 	bl	10011e4a <fld_mul>

	/* 2^201 - 2^1 */ fld_sq(t0, t1);
100129a6:	a95a      	add	r1, sp, #360	@ 0x168
100129a8:	a850      	add	r0, sp, #320	@ 0x140
100129aa:	f7ff fd75 	bl	10012498 <fld_sq>
	/* 2^202 - 2^2 */ fld_sq(t1, t0);
100129ae:	a950      	add	r1, sp, #320	@ 0x140
100129b0:	a85a      	add	r0, sp, #360	@ 0x168
100129b2:	f7ff fd71 	bl	10012498 <fld_sq>
100129b6:	2518      	movs	r5, #24
	/* 2^250 - 2^50 */ for (i = 2; i < 50; i += 2) { fld_sq(t0, t1); fld_sq(t1, t0); }
100129b8:	a95a      	add	r1, sp, #360	@ 0x168
100129ba:	a850      	add	r0, sp, #320	@ 0x140
100129bc:	f7ff fd6c 	bl	10012498 <fld_sq>
100129c0:	a950      	add	r1, sp, #320	@ 0x140
100129c2:	a85a      	add	r0, sp, #360	@ 0x168
100129c4:	f7ff fd68 	bl	10012498 <fld_sq>
100129c8:	3d01      	subs	r5, #1
100129ca:	d1f5      	bne.n	100129b8 <fld_inv+0x178>
	/* 2^250 - 2^0 */ fld_mul(t0, t1, z2_50_0);
100129cc:	aa3c      	add	r2, sp, #240	@ 0xf0
100129ce:	a95a      	add	r1, sp, #360	@ 0x168
100129d0:	a850      	add	r0, sp, #320	@ 0x140
100129d2:	f7ff fa3a 	bl	10011e4a <fld_mul>

	/* 2^251 - 2^1 */ fld_sq(t1, t0);
100129d6:	a950      	add	r1, sp, #320	@ 0x140
100129d8:	a85a      	add	r0, sp, #360	@ 0x168
100129da:	f7ff fd5d 	bl	10012498 <fld_sq>
	/* 2^252 - 2^2 */ fld_sq(t0, t1);
100129de:	a95a      	add	r1, sp, #360	@ 0x168
100129e0:	a850      	add	r0, sp, #320	@ 0x140
100129e2:	f7ff fd59 	bl	10012498 <fld_sq>
	
	/* 2^253 - 2^3 */ fld_sq(t1, t0);
100129e6:	a950      	add	r1, sp, #320	@ 0x140
100129e8:	a85a      	add	r0, sp, #360	@ 0x168
100129ea:	f7ff fd55 	bl	10012498 <fld_sq>
	/* 2^254 - 2^4 */ fld_sq(t0, t1);
100129ee:	a95a      	add	r1, sp, #360	@ 0x168
100129f0:	a850      	add	r0, sp, #320	@ 0x140
100129f2:	f7ff fd51 	bl	10012498 <fld_sq>
	/* 2^255 - 2^5 */ fld_sq(t1, t0);
100129f6:	a950      	add	r1, sp, #320	@ 0x140
100129f8:	a85a      	add	r0, sp, #360	@ 0x168
100129fa:	f7ff fd4d 	bl	10012498 <fld_sq>
	/* 2^255 - 21 */ fld_mul(res, t1, z11);
100129fe:	aa14      	add	r2, sp, #80	@ 0x50
10012a00:	a95a      	add	r1, sp, #360	@ 0x168
10012a02:	4620      	mov	r0, r4
10012a04:	f7ff fa21 	bl	10011e4a <fld_mul>
}
10012a08:	b065      	add	sp, #404	@ 0x194
10012a0a:	bd30      	pop	{r4, r5, pc}

10012a0c <recv_input>:
 */

#include "host_messaging.h"

// Print a message through USB UART and then receive a line over USB UART
void recv_input(const char *msg, char *buf) {
10012a0c:	b538      	push	{r3, r4, r5, lr}
10012a0e:	4605      	mov	r5, r0
    print_debug(msg);
10012a10:	4810      	ldr	r0, [pc, #64]	@ (10012a54 <recv_input+0x48>)
void recv_input(const char *msg, char *buf) {
10012a12:	460c      	mov	r4, r1
    print_debug(msg);
10012a14:	f003 f93a 	bl	10015c8c <printf>
10012a18:	4628      	mov	r0, r5
10012a1a:	4d0f      	ldr	r5, [pc, #60]	@ (10012a58 <recv_input+0x4c>)
10012a1c:	f003 f936 	bl	10015c8c <printf>
10012a20:	480e      	ldr	r0, [pc, #56]	@ (10012a5c <recv_input+0x50>)
10012a22:	f003 f933 	bl	10015c8c <printf>
10012a26:	682b      	ldr	r3, [r5, #0]
10012a28:	6898      	ldr	r0, [r3, #8]
10012a2a:	f006 facf 	bl	10018fcc <fflush>
    fflush(0);
10012a2e:	2000      	movs	r0, #0
10012a30:	f006 facc 	bl	10018fcc <fflush>
    print_ack();
10012a34:	480a      	ldr	r0, [pc, #40]	@ (10012a60 <recv_input+0x54>)
10012a36:	f003 f929 	bl	10015c8c <printf>
10012a3a:	682b      	ldr	r3, [r5, #0]
10012a3c:	6898      	ldr	r0, [r3, #8]
10012a3e:	f006 fac5 	bl	10018fcc <fflush>
    gets(buf);
10012a42:	4620      	mov	r0, r4
10012a44:	f006 fed4 	bl	100197f0 <gets>
    puts("");
}
10012a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    puts("");
10012a4c:	4805      	ldr	r0, [pc, #20]	@ (10012a64 <recv_input+0x58>)
10012a4e:	f006 b849 	b.w	10018ae4 <puts>
10012a52:	bf00      	nop
10012a54:	10023f53 	.word	0x10023f53
10012a58:	200005e0 	.word	0x200005e0
10012a5c:	10023f85 	.word	0x10023f85
10012a60:	1002bdbc 	.word	0x1002bdbc
10012a64:	100243f0 	.word	0x100243f0

10012a68 <md5Init>:

/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
    ctx->size = (uint64_t)0;
10012a68:	2300      	movs	r3, #0
10012a6a:	2200      	movs	r2, #0
10012a6c:	e9c0 2300 	strd	r2, r3, [r0]

    ctx->buffer[0] = (uint32_t)A;
10012a70:	4b07      	ldr	r3, [pc, #28]	@ (10012a90 <md5Init+0x28>)
10012a72:	6083      	str	r3, [r0, #8]
    ctx->buffer[1] = (uint32_t)B;
10012a74:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
10012a78:	60c3      	str	r3, [r0, #12]
    ctx->buffer[2] = (uint32_t)C;
10012a7a:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
10012a7e:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
10012a82:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
10012a86:	6103      	str	r3, [r0, #16]
    ctx->buffer[3] = (uint32_t)D;
10012a88:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
10012a8c:	6143      	str	r3, [r0, #20]
}
10012a8e:	4770      	bx	lr
10012a90:	67452301 	.word	0x67452301

10012a94 <md5Step>:
}

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
10012a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t AA = buffer[0];
    uint32_t BB = buffer[1];
    uint32_t CC = buffer[2];
    uint32_t DD = buffer[3];
10012a98:	e9d0 c302 	ldrd	ip, r3, [r0, #8]
void md5Step(uint32_t *buffer, uint32_t *input){
10012a9c:	b085      	sub	sp, #20
    uint32_t BB = buffer[1];
10012a9e:	e9d0 8e00 	ldrd	r8, lr, [r0]
    uint32_t DD = buffer[3];
10012aa2:	9300      	str	r3, [sp, #0]

    uint32_t E;

    unsigned int j;

    for(unsigned int i = 0; i < 64; ++i){
10012aa4:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 10012b4c <md5Step+0xb8>
10012aa8:	4b29      	ldr	r3, [pc, #164]	@ (10012b50 <md5Step+0xbc>)
    uint32_t DD = buffer[3];
10012aaa:	9f00      	ldr	r7, [sp, #0]
void md5Step(uint32_t *buffer, uint32_t *input){
10012aac:	9103      	str	r1, [sp, #12]
10012aae:	9301      	str	r3, [sp, #4]
    uint32_t CC = buffer[2];
10012ab0:	4665      	mov	r5, ip
    uint32_t BB = buffer[1];
10012ab2:	4676      	mov	r6, lr
    uint32_t AA = buffer[0];
10012ab4:	46c2      	mov	sl, r8
    for(unsigned int i = 0; i < 64; ++i){
10012ab6:	2400      	movs	r4, #0
        switch(i / 16){
10012ab8:	0923      	lsrs	r3, r4, #4
10012aba:	2b01      	cmp	r3, #1
10012abc:	d02f      	beq.n	10012b1e <md5Step+0x8a>
10012abe:	2b02      	cmp	r3, #2
10012ac0:	d037      	beq.n	10012b32 <md5Step+0x9e>
10012ac2:	2b00      	cmp	r3, #0
10012ac4:	d13c      	bne.n	10012b40 <md5Step+0xac>
            case 0:
                E = F(BB, CC, DD);
10012ac6:	ea85 0307 	eor.w	r3, r5, r7
10012aca:	4033      	ands	r3, r6
10012acc:	407b      	eors	r3, r7
                j = i;
                break;
10012ace:	4622      	mov	r2, r4
        }

        uint32_t temp = DD;
        DD = CC;
        CC = BB;
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
10012ad0:	f85b 1b04 	ldr.w	r1, [fp], #4
10012ad4:	9102      	str	r1, [sp, #8]
10012ad6:	9901      	ldr	r1, [sp, #4]
10012ad8:	f851 9b04 	ldr.w	r9, [r1], #4
10012adc:	9101      	str	r1, [sp, #4]
10012ade:	9902      	ldr	r1, [sp, #8]
10012ae0:	4419      	add	r1, r3
10012ae2:	9b03      	ldr	r3, [sp, #12]
10012ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10012ae8:	4419      	add	r1, r3
10012aea:	4451      	add	r1, sl
    return (x << n) | (x >> (32 - n));
10012aec:	f1c9 0920 	rsb	r9, r9, #32
    for(unsigned int i = 0; i < 64; ++i){
10012af0:	3401      	adds	r4, #1
    return (x << n) | (x >> (32 - n));
10012af2:	fa61 f109 	ror.w	r1, r1, r9
    for(unsigned int i = 0; i < 64; ++i){
10012af6:	2c40      	cmp	r4, #64	@ 0x40
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
10012af8:	4431      	add	r1, r6
    for(unsigned int i = 0; i < 64; ++i){
10012afa:	46ba      	mov	sl, r7
10012afc:	d10b      	bne.n	10012b16 <md5Step+0x82>
    }

    buffer[0] += AA;
    buffer[1] += BB;
    buffer[2] += CC;
    buffer[3] += DD;
10012afe:	9b00      	ldr	r3, [sp, #0]
    buffer[0] += AA;
10012b00:	4447      	add	r7, r8
    buffer[1] += BB;
10012b02:	4471      	add	r1, lr
    buffer[2] += CC;
10012b04:	4466      	add	r6, ip
    buffer[3] += DD;
10012b06:	442b      	add	r3, r5
    buffer[0] += AA;
10012b08:	6007      	str	r7, [r0, #0]
    buffer[1] += BB;
10012b0a:	6041      	str	r1, [r0, #4]
    buffer[2] += CC;
10012b0c:	6086      	str	r6, [r0, #8]
    buffer[3] += DD;
10012b0e:	60c3      	str	r3, [r0, #12]
}
10012b10:	b005      	add	sp, #20
10012b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10012b16:	462f      	mov	r7, r5
10012b18:	4635      	mov	r5, r6
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
10012b1a:	460e      	mov	r6, r1
10012b1c:	e7cc      	b.n	10012ab8 <md5Step+0x24>
                E = G(BB, CC, DD);
10012b1e:	ea86 0305 	eor.w	r3, r6, r5
10012b22:	403b      	ands	r3, r7
                j = ((i * 5) + 1) % 16;
10012b24:	eb04 0284 	add.w	r2, r4, r4, lsl #2
                E = G(BB, CC, DD);
10012b28:	406b      	eors	r3, r5
                j = ((i * 5) + 1) % 16;
10012b2a:	3201      	adds	r2, #1
                j = (i * 7) % 16;
10012b2c:	f002 020f 	and.w	r2, r2, #15
                break;
10012b30:	e7ce      	b.n	10012ad0 <md5Step+0x3c>
                E = H(BB, CC, DD);
10012b32:	ea86 0305 	eor.w	r3, r6, r5
                j = ((i * 3) + 5) % 16;
10012b36:	eb04 0244 	add.w	r2, r4, r4, lsl #1
                E = H(BB, CC, DD);
10012b3a:	407b      	eors	r3, r7
                j = ((i * 3) + 5) % 16;
10012b3c:	3205      	adds	r2, #5
10012b3e:	e7f5      	b.n	10012b2c <md5Step+0x98>
                E = I(BB, CC, DD);
10012b40:	ea66 0307 	orn	r3, r6, r7
10012b44:	406b      	eors	r3, r5
                j = (i * 7) % 16;
10012b46:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
10012b4a:	e7ef      	b.n	10012b2c <md5Step+0x98>
10012b4c:	1002bdc8 	.word	0x1002bdc8
10012b50:	1002bec8 	.word	0x1002bec8

10012b54 <md5Update>:
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
10012b54:	b5f0      	push	{r4, r5, r6, r7, lr}
10012b56:	4604      	mov	r4, r0
    unsigned int offset = ctx->size % 64;
10012b58:	e9d0 0500 	ldrd	r0, r5, [r0]
10012b5c:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
    ctx->size += (uint64_t)input_len;
10012b60:	1810      	adds	r0, r2, r0
10012b62:	f145 0500 	adc.w	r5, r5, #0
10012b66:	e9c4 0500 	strd	r0, r5, [r4]
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
10012b6a:	b091      	sub	sp, #68	@ 0x44
10012b6c:	460e      	mov	r6, r1
10012b6e:	188d      	adds	r5, r1, r2
10012b70:	f104 0740 	add.w	r7, r4, #64	@ 0x40
            md5Step(ctx->buffer, input);
10012b74:	f104 0008 	add.w	r0, r4, #8
    for(unsigned int i = 0; i < input_len; ++i){
10012b78:	42b5      	cmp	r5, r6
10012b7a:	d101      	bne.n	10012b80 <md5Update+0x2c>
}
10012b7c:	b011      	add	sp, #68	@ 0x44
10012b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
10012b80:	1c5a      	adds	r2, r3, #1
10012b82:	4423      	add	r3, r4
10012b84:	f816 1b01 	ldrb.w	r1, [r6], #1
10012b88:	7619      	strb	r1, [r3, #24]
        if(offset % 64 == 0){
10012b8a:	0693      	lsls	r3, r2, #26
10012b8c:	d118      	bne.n	10012bc0 <md5Update+0x6c>
10012b8e:	46ec      	mov	ip, sp
10012b90:	4622      	mov	r2, r4
10012b92:	4661      	mov	r1, ip
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
10012b94:	7e93      	ldrb	r3, [r2, #26]
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10012b96:	f892 e01b 	ldrb.w	lr, [r2, #27]
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
10012b9a:	041b      	lsls	r3, r3, #16
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10012b9c:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
                           (uint32_t)(ctx->input[(j * 4)]);
10012ba0:	f892 e018 	ldrb.w	lr, [r2, #24]
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
10012ba4:	ea43 030e 	orr.w	r3, r3, lr
10012ba8:	f892 e019 	ldrb.w	lr, [r2, #25]
            for(unsigned int j = 0; j < 16; ++j){
10012bac:	3204      	adds	r2, #4
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
10012bae:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
            for(unsigned int j = 0; j < 16; ++j){
10012bb2:	4297      	cmp	r7, r2
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10012bb4:	f84c 3b04 	str.w	r3, [ip], #4
            for(unsigned int j = 0; j < 16; ++j){
10012bb8:	d1ec      	bne.n	10012b94 <md5Update+0x40>
            md5Step(ctx->buffer, input);
10012bba:	f7ff ff6b 	bl	10012a94 <md5Step>
            offset = 0;
10012bbe:	2200      	movs	r2, #0
10012bc0:	4613      	mov	r3, r2
10012bc2:	e7d9      	b.n	10012b78 <md5Update+0x24>

10012bc4 <md5Finalize>:
void md5Finalize(MD5Context *ctx){
10012bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int offset = ctx->size % 64;
10012bc6:	6805      	ldr	r5, [r0, #0]
    md5Update(ctx, PADDING, padding_length);
10012bc8:	4925      	ldr	r1, [pc, #148]	@ (10012c60 <md5Finalize+0x9c>)
    unsigned int offset = ctx->size % 64;
10012bca:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
10012bce:	2d37      	cmp	r5, #55	@ 0x37
10012bd0:	bf94      	ite	ls
10012bd2:	f1c5 0538 	rsbls	r5, r5, #56	@ 0x38
10012bd6:	f1c5 0578 	rsbhi	r5, r5, #120	@ 0x78
void md5Finalize(MD5Context *ctx){
10012bda:	4604      	mov	r4, r0
    md5Update(ctx, PADDING, padding_length);
10012bdc:	462a      	mov	r2, r5
void md5Finalize(MD5Context *ctx){
10012bde:	b091      	sub	sp, #68	@ 0x44
    md5Update(ctx, PADDING, padding_length);
10012be0:	f7ff ffb8 	bl	10012b54 <md5Update>
    ctx->size -= (uint64_t)padding_length;
10012be4:	e9d4 2300 	ldrd	r2, r3, [r4]
10012be8:	1b55      	subs	r5, r2, r5
10012bea:	f163 0000 	sbc.w	r0, r3, #0
10012bee:	e9c4 5000 	strd	r5, r0, [r4]
    for(unsigned int j = 0; j < 14; ++j){
10012bf2:	466e      	mov	r6, sp
10012bf4:	f104 0738 	add.w	r7, r4, #56	@ 0x38
    ctx->size -= (uint64_t)padding_length;
10012bf8:	4622      	mov	r2, r4
10012bfa:	4631      	mov	r1, r6
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
10012bfc:	7e93      	ldrb	r3, [r2, #26]
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10012bfe:	f892 c01b 	ldrb.w	ip, [r2, #27]
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
10012c02:	041b      	lsls	r3, r3, #16
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10012c04:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
                   (uint32_t)(ctx->input[(j * 4)]);
10012c08:	f892 c018 	ldrb.w	ip, [r2, #24]
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
10012c0c:	ea43 030c 	orr.w	r3, r3, ip
10012c10:	f892 c019 	ldrb.w	ip, [r2, #25]
    for(unsigned int j = 0; j < 14; ++j){
10012c14:	3204      	adds	r2, #4
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
10012c16:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    for(unsigned int j = 0; j < 14; ++j){
10012c1a:	4297      	cmp	r7, r2
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
10012c1c:	f846 3b04 	str.w	r3, [r6], #4
    for(unsigned int j = 0; j < 14; ++j){
10012c20:	d1ec      	bne.n	10012bfc <md5Finalize+0x38>
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
10012c22:	00c0      	lsls	r0, r0, #3
10012c24:	ea40 7055 	orr.w	r0, r0, r5, lsr #29
    input[14] = (uint32_t)(ctx->size * 8);
10012c28:	00eb      	lsls	r3, r5, #3
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
10012c2a:	900f      	str	r0, [sp, #60]	@ 0x3c
    md5Step(ctx->buffer, input);
10012c2c:	f104 0008 	add.w	r0, r4, #8
    input[14] = (uint32_t)(ctx->size * 8);
10012c30:	930e      	str	r3, [sp, #56]	@ 0x38
    md5Step(ctx->buffer, input);
10012c32:	f7ff ff2f 	bl	10012a94 <md5Step>
    for(unsigned int i = 0; i < 4; ++i){
10012c36:	1d23      	adds	r3, r4, #4
10012c38:	3414      	adds	r4, #20
        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
10012c3a:	f853 2f04 	ldr.w	r2, [r3, #4]!
10012c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
10012c42:	0a11      	lsrs	r1, r2, #8
10012c44:	f883 1051 	strb.w	r1, [r3, #81]	@ 0x51
    for(unsigned int i = 0; i < 4; ++i){
10012c48:	429c      	cmp	r4, r3
        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
10012c4a:	ea4f 4112 	mov.w	r1, r2, lsr #16
        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
10012c4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
10012c52:	f883 1052 	strb.w	r1, [r3, #82]	@ 0x52
        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
10012c56:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
    for(unsigned int i = 0; i < 4; ++i){
10012c5a:	d1ee      	bne.n	10012c3a <md5Finalize+0x76>
}
10012c5c:	b011      	add	sp, #68	@ 0x44
10012c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c60:	20000004 	.word	0x20000004

10012c64 <md5hash>:
}
/*
 * Functions that run the algorithm on the provided input and put the digest into result.
 * result should be able to store 16 bytes.
 */
void md5hash(uint8_t *input, size_t len, uint8_t *result){
10012c64:	b530      	push	{r4, r5, lr}
10012c66:	b09b      	sub	sp, #108	@ 0x6c
10012c68:	4605      	mov	r5, r0
    MD5Context ctx;
    md5Init(&ctx);
10012c6a:	4668      	mov	r0, sp
void md5hash(uint8_t *input, size_t len, uint8_t *result){
10012c6c:	4614      	mov	r4, r2
    md5Init(&ctx);
10012c6e:	f7ff fefb 	bl	10012a68 <md5Init>
    md5Update(&ctx, (uint8_t *)input, len);
10012c72:	460a      	mov	r2, r1
10012c74:	4629      	mov	r1, r5
10012c76:	f7ff ff6d 	bl	10012b54 <md5Update>
    md5Finalize(&ctx);
10012c7a:	4668      	mov	r0, sp
10012c7c:	f7ff ffa2 	bl	10012bc4 <md5Finalize>

    memcpy(result, ctx.digest, 16);
10012c80:	ad16      	add	r5, sp, #88	@ 0x58
10012c82:	4622      	mov	r2, r4
10012c84:	ac1a      	add	r4, sp, #104	@ 0x68
10012c86:	462b      	mov	r3, r5
10012c88:	cb03      	ldmia	r3!, {r0, r1}
10012c8a:	42a3      	cmp	r3, r4
10012c8c:	6010      	str	r0, [r2, #0]
10012c8e:	6051      	str	r1, [r2, #4]
10012c90:	461d      	mov	r5, r3
10012c92:	f102 0208 	add.w	r2, r2, #8
10012c96:	d1f6      	bne.n	10012c86 <md5hash+0x22>
}
10012c98:	b01b      	add	sp, #108	@ 0x6c
10012c9a:	bd30      	pop	{r4, r5, pc}

10012c9c <sc_barrett>:
 * conditionally subtract m from the result.
 *
 */
static void
sc_barrett(sc_t res, const lsc_t x)
{
10012c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10012ca0:	b099      	sub	sp, #100	@ 0x64
	/* 
	 * step 1: q <- floor( floor(x/b^(k-1)) * mu / b^(k+1) )
	 */

	/* calculate carry from the (k-1)-th and k-th position of floor(x/b^(k-1))*mu */
	carry = 0;
10012ca2:	2300      	movs	r3, #0
{
10012ca4:	9001      	str	r0, [sp, #4]
10012ca6:	4f59      	ldr	r7, [pc, #356]	@ (10012e0c <sc_barrett+0x170>)
10012ca8:	f101 0020 	add.w	r0, r1, #32
10012cac:	f101 0c48 	add.w	ip, r1, #72	@ 0x48
10012cb0:	4604      	mov	r4, r0
	carry = 0;
10012cb2:	461a      	mov	r2, r3
	for (i = 0; i <= K-1; i++)
		carry += (llimb_t)x[K-1+i] * con_mu[K-1-i];
10012cb4:	f854 6f04 	ldr.w	r6, [r4, #4]!
10012cb8:	f857 5d04 	ldr.w	r5, [r7, #-4]!
	for (i = 0; i <= K-1; i++)
10012cbc:	45a4      	cmp	ip, r4
		carry += (llimb_t)x[K-1+i] * con_mu[K-1-i];
10012cbe:	fbc6 3205 	smlal	r3, r2, r6, r5
	for (i = 0; i <= K-1; i++)
10012cc2:	d1f7      	bne.n	10012cb4 <sc_barrett+0x18>
	carry >>= LB;
10012cc4:	f8df e148 	ldr.w	lr, [pc, #328]	@ 10012e10 <sc_barrett+0x174>
10012cc8:	0e9b      	lsrs	r3, r3, #26
10012cca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
10012cce:	f101 0c4c 	add.w	ip, r1, #76	@ 0x4c
10012cd2:	1692      	asrs	r2, r2, #26
10012cd4:	4676      	mov	r6, lr
	for (i = 0; i <= K; i++)
		carry += (llimb_t)x[K-1+i] * con_mu[K-i];
10012cd6:	f850 5f04 	ldr.w	r5, [r0, #4]!
10012cda:	f856 4d04 	ldr.w	r4, [r6, #-4]!
	for (i = 0; i <= K; i++)
10012cde:	4584      	cmp	ip, r0
		carry += (llimb_t)x[K-1+i] * con_mu[K-i];
10012ce0:	fbc5 3204 	smlal	r3, r2, r5, r4
	for (i = 0; i <= K; i++)
10012ce4:	d1f7      	bne.n	10012cd6 <sc_barrett+0x3a>

	
	for (j = K+1; j <= 2*K; j++) {
10012ce6:	ac02      	add	r4, sp, #8
10012ce8:	f101 0524 	add.w	r5, r1, #36	@ 0x24
	for (i = 0; i <= K; i++)
10012cec:	4627      	mov	r7, r4
	for (j = K+1; j <= 2*K; j++) {
10012cee:	200b      	movs	r0, #11
		carry >>= LB;
10012cf0:	0e9b      	lsrs	r3, r3, #26
10012cf2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
10012cf6:	46f2      	mov	sl, lr
10012cf8:	1692      	asrs	r2, r2, #26
10012cfa:	462e      	mov	r6, r5
		for (i = j-K; i <= K; i++)
			carry += (llimb_t)x[K-1+i] * con_mu[j-i];
10012cfc:	f856 9f04 	ldr.w	r9, [r6, #4]!
10012d00:	f85a 8d04 	ldr.w	r8, [sl, #-4]!
		for (i = j-K; i <= K; i++)
10012d04:	45b4      	cmp	ip, r6
			carry += (llimb_t)x[K-1+i] * con_mu[j-i];
10012d06:	fbc9 3208 	smlal	r3, r2, r9, r8
		for (i = j-K; i <= K; i++)
10012d0a:	d1f7      	bne.n	10012cfc <sc_barrett+0x60>
	for (j = K+1; j <= 2*K; j++) {
10012d0c:	3001      	adds	r0, #1
		
		q[j-K-1] = carry & MSK;
10012d0e:	f023 467c 	bic.w	r6, r3, #4227858432	@ 0xfc000000
	for (j = K+1; j <= 2*K; j++) {
10012d12:	2815      	cmp	r0, #21
		q[j-K-1] = carry & MSK;
10012d14:	f847 6b04 	str.w	r6, [r7], #4
	for (j = K+1; j <= 2*K; j++) {
10012d18:	f105 0504 	add.w	r5, r5, #4
10012d1c:	d1e8      	bne.n	10012cf0 <sc_barrett+0x54>
	}
	q[j-K-1] = carry >> LB;
10012d1e:	4e3d      	ldr	r6, [pc, #244]	@ (10012e14 <sc_barrett+0x178>)
10012d20:	0e9b      	lsrs	r3, r3, #26
10012d22:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
	/*
	 * step 2: r <- (x - q * m) mod b^(k+1)
	 */

	/* r <- q*m mod b^(k+1) */
	for (j = 0, carry = 0; j <= K; j++) {
10012d26:	2000      	movs	r0, #0
10012d28:	aa0d      	add	r2, sp, #52	@ 0x34
	q[j-K-1] = carry >> LB;
10012d2a:	930c      	str	r3, [sp, #48]	@ 0x30
10012d2c:	4637      	mov	r7, r6
10012d2e:	4696      	mov	lr, r2
	for (j = 0, carry = 0; j <= K; j++) {
10012d30:	4603      	mov	r3, r0
10012d32:	4605      	mov	r5, r0
		carry >>= LB;
10012d34:	0e9b      	lsrs	r3, r3, #26
10012d36:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
10012d3a:	46ba      	mov	sl, r7
10012d3c:	16ad      	asrs	r5, r5, #26
10012d3e:	46a3      	mov	fp, r4
		
		for (i = 0; i <= j; i++)
10012d40:	f04f 0c00 	mov.w	ip, #0
			carry += (llimb_t) q[i]*con_m[j-i];
10012d44:	f85b 9b04 	ldr.w	r9, [fp], #4
10012d48:	f85a 8904 	ldr.w	r8, [sl], #-4
		for (i = 0; i <= j; i++)
10012d4c:	f10c 0c01 	add.w	ip, ip, #1
10012d50:	4584      	cmp	ip, r0
			carry += (llimb_t) q[i]*con_m[j-i];
10012d52:	fbc9 3508 	smlal	r3, r5, r9, r8
		for (i = 0; i <= j; i++)
10012d56:	ddf5      	ble.n	10012d44 <sc_barrett+0xa8>
	for (j = 0, carry = 0; j <= K; j++) {
10012d58:	3001      	adds	r0, #1
		
		r[j] = carry & MSK;
10012d5a:	f023 4c7c 	bic.w	ip, r3, #4227858432	@ 0xfc000000
	for (j = 0, carry = 0; j <= K; j++) {
10012d5e:	280b      	cmp	r0, #11
		r[j] = carry & MSK;
10012d60:	f84e cb04 	str.w	ip, [lr], #4
	for (j = 0, carry = 0; j <= K; j++) {
10012d64:	f107 0704 	add.w	r7, r7, #4
10012d68:	d1e4      	bne.n	10012d34 <sc_barrett+0x98>
	}

	/* r <- x - r mod b^(k+1) */
	for (i = 0, carry = 0; i <= K; i++) {
10012d6a:	2300      	movs	r3, #0
10012d6c:	1f0d      	subs	r5, r1, #4
10012d6e:	f101 0c28 	add.w	ip, r1, #40	@ 0x28
	for (j = 0, carry = 0; j <= K; j++) {
10012d72:	4617      	mov	r7, r2
	for (i = 0, carry = 0; i <= K; i++) {
10012d74:	4618      	mov	r0, r3
		carry = (carry >> LB) + x[i] - r[i];
10012d76:	f855 1f04 	ldr.w	r1, [r5, #4]!
10012d7a:	0e9b      	lsrs	r3, r3, #26
10012d7c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
10012d80:	185b      	adds	r3, r3, r1
10012d82:	ea4f 7ee1 	mov.w	lr, r1, asr #31
10012d86:	6839      	ldr	r1, [r7, #0]
10012d88:	eb4e 70e0 	adc.w	r0, lr, r0, asr #31
10012d8c:	1a5b      	subs	r3, r3, r1
10012d8e:	eb60 70e1 	sbc.w	r0, r0, r1, asr #31
		r[i] = carry & MSK;
10012d92:	f023 417c 	bic.w	r1, r3, #4227858432	@ 0xfc000000
	for (i = 0, carry = 0; i <= K; i++) {
10012d96:	45ac      	cmp	ip, r5
		r[i] = carry & MSK;
10012d98:	f847 1b04 	str.w	r1, [r7], #4
	for (i = 0, carry = 0; i <= K; i++) {
10012d9c:	d1eb      	bne.n	10012d76 <sc_barrett+0xda>
	 */

	/*
	 * step 4: if (r > m) r -= m;
	 */
	q[0] = r[0] - con_m[0];
10012d9e:	4b1e      	ldr	r3, [pc, #120]	@ (10012e18 <sc_barrett+0x17c>)
10012da0:	990d      	ldr	r1, [sp, #52]	@ 0x34
10012da2:	440b      	add	r3, r1
10012da4:	9302      	str	r3, [sp, #8]
10012da6:	4617      	mov	r7, r2
10012da8:	4623      	mov	r3, r4
	for (i = 1; i <= K; i++) {
10012daa:	2001      	movs	r0, #1
		q[i] = (q[i-1] >> LB) + r[i] - con_m[i];
10012dac:	681d      	ldr	r5, [r3, #0]
10012dae:	f857 1f04 	ldr.w	r1, [r7, #4]!
10012db2:	eb01 61a5 	add.w	r1, r1, r5, asr #26
10012db6:	f856 5f04 	ldr.w	r5, [r6, #4]!
10012dba:	1b49      	subs	r1, r1, r5
10012dbc:	f843 1f04 	str.w	r1, [r3, #4]!
		q[i-1] &= MSK;
10012dc0:	f853 1c04 	ldr.w	r1, [r3, #-4]
	for (i = 1; i <= K; i++) {
10012dc4:	3001      	adds	r0, #1
		q[i-1] &= MSK;
10012dc6:	f021 417c 	bic.w	r1, r1, #4227858432	@ 0xfc000000
	for (i = 1; i <= K; i++) {
10012dca:	280b      	cmp	r0, #11
		q[i-1] &= MSK;
10012dcc:	f843 1c04 	str.w	r1, [r3, #-4]
	for (i = 1; i <= K; i++) {
10012dd0:	d1ec      	bne.n	10012dac <sc_barrett+0x110>
	}

	mask = ~(q[K] >> (8*sizeof(limb_t)-1));
10012dd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	for (i = 0; i <= K; i++)
10012dd4:	2100      	movs	r1, #0
	mask = ~(q[K] >> (8*sizeof(limb_t)-1));
10012dd6:	17d8      	asrs	r0, r3, #31
		r[i] ^= (r[i] ^ q[i]) & mask;
10012dd8:	6813      	ldr	r3, [r2, #0]
10012dda:	f854 5b04 	ldr.w	r5, [r4], #4
10012dde:	406b      	eors	r3, r5
10012de0:	4003      	ands	r3, r0
	for (i = 0; i <= K; i++)
10012de2:	3101      	adds	r1, #1
		r[i] ^= (r[i] ^ q[i]) & mask;
10012de4:	406b      	eors	r3, r5
	for (i = 0; i <= K; i++)
10012de6:	290b      	cmp	r1, #11
		r[i] ^= (r[i] ^ q[i]) & mask;
10012de8:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 0; i <= K; i++)
10012dec:	d1f4      	bne.n	10012dd8 <sc_barrett+0x13c>

	/*
	 * step 5: copy out and clean up
	 */
	for (i = 0; i < K; i++)
		res[i] = r[i];
10012dee:	9b01      	ldr	r3, [sp, #4]
10012df0:	ac0d      	add	r4, sp, #52	@ 0x34
10012df2:	ad17      	add	r5, sp, #92	@ 0x5c
10012df4:	4622      	mov	r2, r4
10012df6:	ca03      	ldmia	r2!, {r0, r1}
10012df8:	42aa      	cmp	r2, r5
10012dfa:	6018      	str	r0, [r3, #0]
10012dfc:	6059      	str	r1, [r3, #4]
10012dfe:	4614      	mov	r4, r2
10012e00:	f103 0308 	add.w	r3, r3, #8
10012e04:	d1f6      	bne.n	10012df4 <sc_barrett+0x158>
}
10012e06:	b019      	add	sp, #100	@ 0x64
10012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10012e0c:	1002c018 	.word	0x1002c018
10012e10:	1002c01c 	.word	0x1002c01c
10012e14:	1002c01c 	.word	0x1002c01c
10012e18:	ff0a2c13 	.word	0xff0a2c13

10012e1c <sc_reduce>:
/*
 * sc_reduce - completely carry and reduce element e.
 */
void
sc_reduce(sc_t dst, const sc_t e)
{
10012e1c:	b570      	push	{r4, r5, r6, lr}
10012e1e:	b094      	sub	sp, #80	@ 0x50
10012e20:	4604      	mov	r4, r0
10012e22:	4668      	mov	r0, sp
10012e24:	1f0a      	subs	r2, r1, #4
	lsc_t tmp;
	limb_t carry;
	int i;

	/* carry e */
	for (carry = 0, i = 0; i < K; i++) {
10012e26:	2300      	movs	r3, #0
10012e28:	3124      	adds	r1, #36	@ 0x24
10012e2a:	4605      	mov	r5, r0
		carry = (carry >> LB) + e[i];
10012e2c:	f852 6f04 	ldr.w	r6, [r2, #4]!
10012e30:	eb06 63a3 	add.w	r3, r6, r3, asr #26
		tmp[i] = carry & MSK;
10012e34:	f023 467c 	bic.w	r6, r3, #4227858432	@ 0xfc000000
	for (carry = 0, i = 0; i < K; i++) {
10012e38:	4291      	cmp	r1, r2
		tmp[i] = carry & MSK;
10012e3a:	f840 6b04 	str.w	r6, [r0], #4
	for (carry = 0, i = 0; i < K; i++) {
10012e3e:	d1f5      	bne.n	10012e2c <sc_reduce+0x10>
	}
	tmp[K] = carry >> LB;
10012e40:	169b      	asrs	r3, r3, #26
	for (i = K+1; i < 2*K; i++)
		tmp[i] = 0;
10012e42:	2224      	movs	r2, #36	@ 0x24
10012e44:	2100      	movs	r1, #0
10012e46:	a80b      	add	r0, sp, #44	@ 0x2c
	tmp[K] = carry >> LB;
10012e48:	930a      	str	r3, [sp, #40]	@ 0x28
		tmp[i] = 0;
10012e4a:	f006 fdf7 	bl	10019a3c <memset>
	
	/* reduce modulo m */
	sc_barrett(dst, tmp);
10012e4e:	4629      	mov	r1, r5
10012e50:	4620      	mov	r0, r4
10012e52:	f7ff ff23 	bl	10012c9c <sc_barrett>
}
10012e56:	b014      	add	sp, #80	@ 0x50
10012e58:	bd70      	pop	{r4, r5, r6, pc}

10012e5a <sc_import>:
 * assumes:
 *   len <= 64
 */
void
sc_import(sc_t dst, const uint8_t *src, size_t len)
{
10012e5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
10012e5e:	b095      	sub	sp, #84	@ 0x54
	const uint8_t *endp = src + len;
	lsc_t tmp;
	uint64_t foo;
	int i, fill;

	fill = 0;
10012e60:	2300      	movs	r3, #0
10012e62:	46e8      	mov	r8, sp
{
10012e64:	460d      	mov	r5, r1
	const uint8_t *endp = src + len;
10012e66:	440a      	add	r2, r1
	foo = 0;
	for (i = 0; i < 2*K; i++) {
10012e68:	469e      	mov	lr, r3
	foo = 0;
10012e6a:	461c      	mov	r4, r3
10012e6c:	461e      	mov	r6, r3
10012e6e:	4641      	mov	r1, r8
		while (src < endp && fill < LB) {
10012e70:	4295      	cmp	r5, r2
10012e72:	d315      	bcc.n	10012ea0 <sc_import+0x46>
	for (i = 0; i < 2*K; i++) {
10012e74:	f10e 0e01 	add.w	lr, lr, #1
			foo |= (uint64_t)*src++ << fill;
			fill += 8;
		}
		
		tmp[i] = foo & MSK;
10012e78:	f024 477c 	bic.w	r7, r4, #4227858432	@ 0xfc000000
	for (i = 0; i < 2*K; i++) {
10012e7c:	f1be 0f14 	cmp.w	lr, #20

		foo >>= LB;
10012e80:	ea4f 6494 	mov.w	r4, r4, lsr #26
10012e84:	ea44 1486 	orr.w	r4, r4, r6, lsl #6
		tmp[i] = foo & MSK;
10012e88:	f848 7b04 	str.w	r7, [r8], #4
		foo >>= LB;
10012e8c:	ea4f 6696 	mov.w	r6, r6, lsr #26
		fill -= LB;
10012e90:	f1a3 031a 	sub.w	r3, r3, #26
	for (i = 0; i < 2*K; i++) {
10012e94:	d1ec      	bne.n	10012e70 <sc_import+0x16>
	}

	sc_barrett(dst, tmp);
10012e96:	f7ff ff01 	bl	10012c9c <sc_barrett>
}
10012e9a:	b015      	add	sp, #84	@ 0x54
10012e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		while (src < endp && fill < LB) {
10012ea0:	2b19      	cmp	r3, #25
10012ea2:	dce7      	bgt.n	10012e74 <sc_import+0x1a>
			foo |= (uint64_t)*src++ << fill;
10012ea4:	f815 cb01 	ldrb.w	ip, [r5], #1
10012ea8:	f1a3 0720 	sub.w	r7, r3, #32
10012eac:	f1c3 0920 	rsb	r9, r3, #32
10012eb0:	fa0c f707 	lsl.w	r7, ip, r7
10012eb4:	fa2c f909 	lsr.w	r9, ip, r9
10012eb8:	ea47 0709 	orr.w	r7, r7, r9
10012ebc:	fa0c fc03 	lsl.w	ip, ip, r3
10012ec0:	ea4c 0404 	orr.w	r4, ip, r4
10012ec4:	433e      	orrs	r6, r7
			fill += 8;
10012ec6:	3308      	adds	r3, #8
10012ec8:	e7d2      	b.n	10012e70 <sc_import+0x16>

10012eca <sc_export>:
 * sc_export - export internal sc_t format to an unsigned, 256bit
 * little-endian integer.
 */
void
sc_export(uint8_t dst[32], const sc_t x)
{
10012eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10012ece:	b08a      	sub	sp, #40	@ 0x28
	uint64_t foo;
	int fill, i;

	sc_reduce(tmp, x);

	for (i = 0, foo = 0, fill = 0; i < K; i++) {
10012ed0:	2400      	movs	r4, #0
{
10012ed2:	4605      	mov	r5, r0
	const uint8_t *endp = dst+32;
10012ed4:	f100 0620 	add.w	r6, r0, #32
	sc_reduce(tmp, x);
10012ed8:	4668      	mov	r0, sp
10012eda:	f7ff ff9f 	bl	10012e1c <sc_reduce>
	for (i = 0, foo = 0, fill = 0; i < K; i++) {
10012ede:	466f      	mov	r7, sp
10012ee0:	4623      	mov	r3, r4
10012ee2:	4622      	mov	r2, r4
10012ee4:	46a4      	mov	ip, r4
		foo |= (uint64_t)tmp[i] << fill;
10012ee6:	f857 0b04 	ldr.w	r0, [r7], #4
10012eea:	f1a3 0820 	sub.w	r8, r3, #32
10012eee:	17c1      	asrs	r1, r0, #31
10012ef0:	f1c3 0e20 	rsb	lr, r3, #32
10012ef4:	4099      	lsls	r1, r3
10012ef6:	fa00 f808 	lsl.w	r8, r0, r8
10012efa:	fa20 fe0e 	lsr.w	lr, r0, lr
10012efe:	ea41 0108 	orr.w	r1, r1, r8
10012f02:	4098      	lsls	r0, r3
10012f04:	ea41 010e 	orr.w	r1, r1, lr
10012f08:	4302      	orrs	r2, r0
10012f0a:	ea41 0c0c 	orr.w	ip, r1, ip
		for (fill += LB; fill >= 8 && dst < endp; fill -= 8, foo >>= 8)
10012f0e:	331a      	adds	r3, #26
10012f10:	2b07      	cmp	r3, #7
10012f12:	dc05      	bgt.n	10012f20 <sc_export+0x56>
	for (i = 0, foo = 0, fill = 0; i < K; i++) {
10012f14:	3401      	adds	r4, #1
10012f16:	2c0a      	cmp	r4, #10
10012f18:	d1e5      	bne.n	10012ee6 <sc_export+0x1c>
			*dst++ = foo & 0xff;
	}
}
10012f1a:	b00a      	add	sp, #40	@ 0x28
10012f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (fill += LB; fill >= 8 && dst < endp; fill -= 8, foo >>= 8)
10012f20:	42b5      	cmp	r5, r6
10012f22:	d2f7      	bcs.n	10012f14 <sc_export+0x4a>
			*dst++ = foo & 0xff;
10012f24:	f805 2b01 	strb.w	r2, [r5], #1
		for (fill += LB; fill >= 8 && dst < endp; fill -= 8, foo >>= 8)
10012f28:	0a12      	lsrs	r2, r2, #8
10012f2a:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
10012f2e:	3b08      	subs	r3, #8
10012f30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
10012f34:	e7ec      	b.n	10012f10 <sc_export+0x46>
	...

10012f38 <flash_simple_irq>:
 * 
 * This ISR allows for access to the flash through simple_flash to operate
 */
void flash_simple_irq(void) {
    uint32_t temp;
    temp = MXC_FLC0->intr;
10012f38:	4b08      	ldr	r3, [pc, #32]	@ (10012f5c <flash_simple_irq+0x24>)
10012f3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24

    if (temp & MXC_F_FLC_INTR_DONE) {
10012f3c:	07c8      	lsls	r0, r1, #31
        MXC_FLC0->intr &= ~MXC_F_FLC_INTR_DONE;
10012f3e:	bf42      	ittt	mi
10012f40:	6a5a      	ldrmi	r2, [r3, #36]	@ 0x24
10012f42:	f022 0201 	bicmi.w	r2, r2, #1
10012f46:	625a      	strmi	r2, [r3, #36]	@ 0x24
    }

    if (temp & MXC_F_FLC_INTR_AF) {
10012f48:	078a      	lsls	r2, r1, #30
10012f4a:	d506      	bpl.n	10012f5a <flash_simple_irq+0x22>
        MXC_FLC0->intr &= ~MXC_F_FLC_INTR_AF;
10012f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        printf(" -> Interrupt! (Flash access failure)\n\n");
10012f4e:	4804      	ldr	r0, [pc, #16]	@ (10012f60 <flash_simple_irq+0x28>)
        MXC_FLC0->intr &= ~MXC_F_FLC_INTR_AF;
10012f50:	f022 0202 	bic.w	r2, r2, #2
10012f54:	625a      	str	r2, [r3, #36]	@ 0x24
        printf(" -> Interrupt! (Flash access failure)\n\n");
10012f56:	f005 bdc5 	b.w	10018ae4 <puts>
    }
}
10012f5a:	4770      	bx	lr
10012f5c:	40029000 	.word	0x40029000
10012f60:	1002c048 	.word	0x1002c048

10012f64 <flash_simple_init>:
 * @brief Initialize the Simple Flash Interface
 * 
 * This function registers the interrupt for the flash system,
 * enables the interrupt, and disables ICC
*/
void flash_simple_init(void) {
10012f64:	b508      	push	{r3, lr}
    // Setup Flash
    MXC_NVIC_SetVector(FLC0_IRQn, flash_simple_irq);
10012f66:	4908      	ldr	r1, [pc, #32]	@ (10012f88 <flash_simple_init+0x24>)
10012f68:	2017      	movs	r0, #23
10012f6a:	f000 fccd 	bl	10013908 <MXC_NVIC_SetVector>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10012f6e:	4b07      	ldr	r3, [pc, #28]	@ (10012f8c <flash_simple_init+0x28>)
10012f70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
10012f74:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(FLC0_IRQn);
    MXC_FLC_EnableInt(MXC_F_FLC_INTR_DONEIE | MXC_F_FLC_INTR_AFIE);
10012f76:	f44f 7040 	mov.w	r0, #768	@ 0x300
10012f7a:	f001 f8b1 	bl	100140e0 <MXC_FLC_EnableInt>
    MXC_ICC_Disable(MXC_ICC0);
}
10012f7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MXC_ICC_Disable(MXC_ICC0);
10012f82:	4803      	ldr	r0, [pc, #12]	@ (10012f90 <flash_simple_init+0x2c>)
10012f84:	f002 b83a 	b.w	10014ffc <MXC_ICC_Disable>
10012f88:	10012f39 	.word	0x10012f39
10012f8c:	e000e100 	.word	0xe000e100
10012f90:	4002a000 	.word	0x4002a000

10012f94 <flash_simple_erase_page>:
 * Flash memory can only be erased in a large block size called a page.
 * Once erased, memory can only be written one way e.g. 1->0.
 * In order to be re-written the entire page must be erased.
*/
int flash_simple_erase_page(uint32_t address) {
    return MXC_FLC_PageErase(address);
10012f94:	f020 b958 	b.w	10033248 <__MXC_FLC_PageErase_veneer>

10012f98 <flash_simple_read>:
 * 
 * This function reads data from the specified flash page into the buffer
 * with the specified amount of bytes
*/
void flash_simple_read(uint32_t address, uint32_t* buffer, uint32_t size) {
    MXC_FLC_Read(address, buffer, size);
10012f98:	f001 b8a0 	b.w	100140dc <MXC_FLC_Read>

10012f9c <flash_simple_write>:
 * This function writes data to the specified flash page from the buffer passed
 * with the specified amount of bytes. Flash memory can only be written in one
 * way e.g. 1->0. To rewrite previously written memory see the 
 * flash_simple_erase_page documentation.
*/
int flash_simple_write(uint32_t address, uint32_t* buffer, uint32_t size) {
10012f9c:	4613      	mov	r3, r2
    return MXC_FLC_Write(address, size, buffer);
10012f9e:	460a      	mov	r2, r1
10012fa0:	4619      	mov	r1, r3
10012fa2:	f001 b899 	b.w	100140d8 <MXC_FLC_Write>
	...

10012fa8 <I2C_Handler>:
 * @brief Built-In I2C Interrupt Handler
 *
 * Utilize the built-in I2C interrupt handler to allow for the use
 * of MXC_I2C_Master_Transaction() function calls
 */
static void I2C_Handler(void) { MXC_I2C_AsyncHandler(I2C_INTERFACE); }
10012fa8:	4801      	ldr	r0, [pc, #4]	@ (10012fb0 <I2C_Handler+0x8>)
10012faa:	f001 baef 	b.w	1001458c <MXC_I2C_AsyncHandler>
10012fae:	bf00      	nop
10012fb0:	4001e000 	.word	0x4001e000

10012fb4 <i2c_simple_controller_init>:
 * @brief Initialize the I2C Connection
 * 
 * Initialize the I2C by enabling the module, setting the correct
 * frequency, and enabling the interrupt to our I2C_Handler
*/
int i2c_simple_controller_init(void) {
10012fb4:	b510      	push	{r4, lr}
    int error;

    // Initialize the I2C Interface
    error = MXC_I2C_Init(I2C_INTERFACE, true, 0);
10012fb6:	480c      	ldr	r0, [pc, #48]	@ (10012fe8 <i2c_simple_controller_init+0x34>)
10012fb8:	2200      	movs	r2, #0
10012fba:	2101      	movs	r1, #1
10012fbc:	f001 fa92 	bl	100144e4 <MXC_I2C_Init>
    if (error != E_NO_ERROR) {
10012fc0:	4604      	mov	r4, r0
10012fc2:	b120      	cbz	r0, 10012fce <i2c_simple_controller_init+0x1a>
        printf("Failed to initialize I2C.\n");
10012fc4:	4809      	ldr	r0, [pc, #36]	@ (10012fec <i2c_simple_controller_init+0x38>)
10012fc6:	f005 fd8d 	bl	10018ae4 <puts>
    // Set up interrupt
    MXC_NVIC_SetVector(MXC_I2C_GET_IRQ(MXC_I2C_GET_IDX(I2C_INTERFACE)), I2C_Handler);
    NVIC_EnableIRQ(MXC_I2C_GET_IRQ(MXC_I2C_GET_IDX(I2C_INTERFACE)));

    return E_NO_ERROR;
}
10012fca:	4620      	mov	r0, r4
10012fcc:	bd10      	pop	{r4, pc}
    MXC_I2C_SetFrequency(I2C_INTERFACE, I2C_FREQ);
10012fce:	4908      	ldr	r1, [pc, #32]	@ (10012ff0 <i2c_simple_controller_init+0x3c>)
10012fd0:	4805      	ldr	r0, [pc, #20]	@ (10012fe8 <i2c_simple_controller_init+0x34>)
10012fd2:	f001 fac1 	bl	10014558 <MXC_I2C_SetFrequency>
    MXC_NVIC_SetVector(MXC_I2C_GET_IRQ(MXC_I2C_GET_IDX(I2C_INTERFACE)), I2C_Handler);
10012fd6:	4907      	ldr	r1, [pc, #28]	@ (10012ff4 <i2c_simple_controller_init+0x40>)
10012fd8:	2024      	movs	r0, #36	@ 0x24
10012fda:	f000 fc95 	bl	10013908 <MXC_NVIC_SetVector>
10012fde:	4b06      	ldr	r3, [pc, #24]	@ (10012ff8 <i2c_simple_controller_init+0x44>)
10012fe0:	2210      	movs	r2, #16
10012fe2:	605a      	str	r2, [r3, #4]
    __COMPILER_BARRIER();
10012fe4:	e7f1      	b.n	10012fca <i2c_simple_controller_init+0x16>
10012fe6:	bf00      	nop
10012fe8:	4001e000 	.word	0x4001e000
10012fec:	1002c06f 	.word	0x1002c06f
10012ff0:	000186a0 	.word	0x000186a0
10012ff4:	10012fa9 	.word	0x10012fa9
10012ff8:	e000e100 	.word	0xe000e100

10012ffc <i2c_simple_read_data_generic>:
 * 
 * Read any register larger than 1B in size
 * Can be used to read the PARAMS or RESULT register
*/
int i2c_simple_read_data_generic(i2c_addr_t addr, ECTF_I2C_REGS reg, uint8_t len, uint8_t* buf)
{
10012ffc:	b500      	push	{lr}
10012ffe:	b08b      	sub	sp, #44	@ 0x2c
    request.i2c = I2C_INTERFACE;
    request.addr = addr;
    request.tx_len = 1;
    request.tx_buf = (uint8_t*)&reg;
    request.rx_len = (unsigned int) len;
    request.rx_buf = buf;
10013000:	e9cd 3206 	strd	r3, r2, [sp, #24]
{
10013004:	f88d 1007 	strb.w	r1, [sp, #7]
    request.i2c = I2C_INTERFACE;
10013008:	4908      	ldr	r1, [pc, #32]	@ (1001302c <i2c_simple_read_data_generic+0x30>)
    request.addr = addr;
1001300a:	e9cd 1002 	strd	r1, r0, [sp, #8]
    request.tx_len = 1;
1001300e:	2101      	movs	r1, #1
10013010:	9105      	str	r1, [sp, #20]
    request.restart = 0;
10013012:	2300      	movs	r3, #0
    request.tx_buf = (uint8_t*)&reg;
10013014:	f10d 0107 	add.w	r1, sp, #7
    request.callback = NULL;

    return MXC_I2C_MasterTransaction(&request);
10013018:	a802      	add	r0, sp, #8
    request.callback = NULL;
1001301a:	e9cd 3308 	strd	r3, r3, [sp, #32]
    request.tx_buf = (uint8_t*)&reg;
1001301e:	9104      	str	r1, [sp, #16]
    return MXC_I2C_MasterTransaction(&request);
10013020:	f001 faae 	bl	10014580 <MXC_I2C_MasterTransaction>
}
10013024:	b00b      	add	sp, #44	@ 0x2c
10013026:	f85d fb04 	ldr.w	pc, [sp], #4
1001302a:	bf00      	nop
1001302c:	4001e000 	.word	0x4001e000

10013030 <i2c_simple_write_data_generic>:
 * @return int: negative if error, 0 if success
 * 
 * Write any register larger than 1B in size
 * Can be used to write the PARAMS or RESULT register
*/
int i2c_simple_write_data_generic(i2c_addr_t addr, ECTF_I2C_REGS reg, uint8_t len, uint8_t* buf) {
10013030:	b570      	push	{r4, r5, r6, lr}
10013032:	b0ca      	sub	sp, #296	@ 0x128
10013034:	4605      	mov	r5, r0
    uint8_t packet[257];
    packet[0] = reg;
10013036:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
    memcpy(&packet[1], buf, len); 
1001303a:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
1001303e:	4619      	mov	r1, r3
int i2c_simple_write_data_generic(i2c_addr_t addr, ECTF_I2C_REGS reg, uint8_t len, uint8_t* buf) {
10013040:	4614      	mov	r4, r2
    memcpy(&packet[1], buf, len); 
10013042:	f007 f83d 	bl	1001a0c0 <memcpy>
    
    mxc_i2c_req_t request;
    request.i2c = I2C_INTERFACE;
10013046:	4b08      	ldr	r3, [pc, #32]	@ (10013068 <i2c_simple_write_data_generic+0x38>)
    packet[0] = reg;
10013048:	ae09      	add	r6, sp, #36	@ 0x24
    request.addr = addr;
1001304a:	e9cd 3501 	strd	r3, r5, [sp, #4]
    request.tx_len = len+1;
1001304e:	3401      	adds	r4, #1
    request.tx_buf = packet;
    request.rx_len = 0;
10013050:	2300      	movs	r3, #0
    request.rx_buf = 0;
    request.restart = 0;
    request.callback = NULL;
    return MXC_I2C_MasterTransaction(&request);
10013052:	a801      	add	r0, sp, #4
    request.tx_buf = packet;
10013054:	e9cd 6403 	strd	r6, r4, [sp, #12]
    request.rx_buf = 0;
10013058:	e9cd 3305 	strd	r3, r3, [sp, #20]
    request.callback = NULL;
1001305c:	e9cd 3307 	strd	r3, r3, [sp, #28]
    return MXC_I2C_MasterTransaction(&request);
10013060:	f001 fa8e 	bl	10014580 <MXC_I2C_MasterTransaction>
}
10013064:	b04a      	add	sp, #296	@ 0x128
10013066:	bd70      	pop	{r4, r5, r6, pc}
10013068:	4001e000 	.word	0x4001e000

1001306c <i2c_simple_read_status_generic>:
 *
 * @return int: value returned from device, negative if error
 * 
 * Read any register that is 1B in size
*/
int i2c_simple_read_status_generic(i2c_addr_t addr, ECTF_I2C_REGS reg) {
1001306c:	b500      	push	{lr}
    uint8_t value = 0;

    mxc_i2c_req_t request;
    request.i2c = I2C_INTERFACE;
1001306e:	4a0f      	ldr	r2, [pc, #60]	@ (100130ac <i2c_simple_read_status_generic+0x40>)
int i2c_simple_read_status_generic(i2c_addr_t addr, ECTF_I2C_REGS reg) {
10013070:	b08d      	sub	sp, #52	@ 0x34
    request.addr = addr;
10013072:	e9cd 2004 	strd	r2, r0, [sp, #16]
    request.tx_len = 1;
10013076:	2201      	movs	r2, #1
    uint8_t value = 0;
10013078:	2300      	movs	r3, #0
int i2c_simple_read_status_generic(i2c_addr_t addr, ECTF_I2C_REGS reg) {
1001307a:	f88d 1007 	strb.w	r1, [sp, #7]
    request.tx_len = 1;
1001307e:	9207      	str	r2, [sp, #28]
    request.tx_buf = (uint8_t*)&reg;
10013080:	f10d 0107 	add.w	r1, sp, #7
    request.rx_len = 1;
10013084:	9209      	str	r2, [sp, #36]	@ 0x24
    request.rx_buf = (uint8_t*)&value;
    request.restart = 0;
    request.callback = NULL;

    int result = MXC_I2C_MasterTransaction(&request);
10013086:	a804      	add	r0, sp, #16
    request.rx_buf = (uint8_t*)&value;
10013088:	f10d 020f 	add.w	r2, sp, #15
    request.callback = NULL;
1001308c:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    uint8_t value = 0;
10013090:	f88d 300f 	strb.w	r3, [sp, #15]
    request.tx_buf = (uint8_t*)&reg;
10013094:	9106      	str	r1, [sp, #24]
    request.rx_buf = (uint8_t*)&value;
10013096:	9208      	str	r2, [sp, #32]
    int result = MXC_I2C_MasterTransaction(&request);
10013098:	f001 fa72 	bl	10014580 <MXC_I2C_MasterTransaction>
    if (result < 0) {
1001309c:	2800      	cmp	r0, #0
        return result;
    }
    return value;
1001309e:	bfa8      	it	ge
100130a0:	f89d 000f 	ldrbge.w	r0, [sp, #15]
}
100130a4:	b00d      	add	sp, #52	@ 0x34
100130a6:	f85d fb04 	ldr.w	pc, [sp], #4
100130aa:	bf00      	nop
100130ac:	4001e000 	.word	0x4001e000

100130b0 <i2c_simple_read_transmit_done>:
    return i2c_simple_read_status_generic(addr, TRANSMIT_DONE);
100130b0:	2104      	movs	r1, #4
100130b2:	f7ff bfdb 	b.w	1001306c <i2c_simple_read_status_generic>

100130b6 <i2c_simple_read_transmit_len>:
    return i2c_simple_read_status_generic(addr, TRANSMIT_LEN);
100130b6:	2105      	movs	r1, #5
100130b8:	f7ff bfd8 	b.w	1001306c <i2c_simple_read_status_generic>

100130bc <i2c_simple_write_status_generic>:
 * 
 * @return int: negative if error, 0 if success
 *
 * Write any register that is 1B in size
*/
int i2c_simple_write_status_generic(i2c_addr_t addr, ECTF_I2C_REGS reg, uint8_t value) {
100130bc:	b500      	push	{lr}
    uint8_t packet[2];
    packet[0] = (uint8_t) reg;
    packet[1] = value;
    mxc_i2c_req_t request;
    request.i2c = I2C_INTERFACE;
100130be:	4b0b      	ldr	r3, [pc, #44]	@ (100130ec <i2c_simple_write_status_generic+0x30>)
int i2c_simple_write_status_generic(i2c_addr_t addr, ECTF_I2C_REGS reg, uint8_t value) {
100130c0:	b08b      	sub	sp, #44	@ 0x2c
    request.addr = addr;
100130c2:	e9cd 3002 	strd	r3, r0, [sp, #8]
    request.tx_len = 2;
100130c6:	2302      	movs	r3, #2
100130c8:	9305      	str	r3, [sp, #20]
    request.tx_buf = packet;
100130ca:	ab01      	add	r3, sp, #4
100130cc:	9304      	str	r3, [sp, #16]
    request.rx_len = 0;
    request.rx_buf = 0;
    request.restart = 0;
    request.callback = NULL;
    return MXC_I2C_MasterTransaction(&request);
100130ce:	a802      	add	r0, sp, #8
    request.rx_len = 0;
100130d0:	2300      	movs	r3, #0
    request.rx_buf = 0;
100130d2:	e9cd 3306 	strd	r3, r3, [sp, #24]
    request.callback = NULL;
100130d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
    packet[0] = (uint8_t) reg;
100130da:	f88d 1004 	strb.w	r1, [sp, #4]
    packet[1] = value;
100130de:	f88d 2005 	strb.w	r2, [sp, #5]
    return MXC_I2C_MasterTransaction(&request);
100130e2:	f001 fa4d 	bl	10014580 <MXC_I2C_MasterTransaction>
}
100130e6:	b00b      	add	sp, #44	@ 0x2c
100130e8:	f85d fb04 	ldr.w	pc, [sp], #4
100130ec:	4001e000 	.word	0x4001e000

100130f0 <i2c_simple_write_receive_done>:
int i2c_simple_write_receive_done(i2c_addr_t addr, bool done) {
100130f0:	460a      	mov	r2, r1
    return i2c_simple_write_status_generic(addr, RECEIVE_DONE, done); 
100130f2:	2101      	movs	r1, #1
100130f4:	f7ff bfe2 	b.w	100130bc <i2c_simple_write_status_generic>

100130f8 <i2c_simple_write_receive_len>:
int i2c_simple_write_receive_len(i2c_addr_t addr, uint8_t len) {
100130f8:	460a      	mov	r2, r1
    return i2c_simple_write_status_generic(addr, RECEIVE_LEN, len); 
100130fa:	2102      	movs	r1, #2
100130fc:	f7ff bfde 	b.w	100130bc <i2c_simple_write_status_generic>

10013100 <i2c_simple_write_transmit_done>:
int i2c_simple_write_transmit_done(i2c_addr_t addr, bool done) {
10013100:	460a      	mov	r2, r1
    return i2c_simple_write_status_generic(addr, TRANSMIT_DONE, done);
10013102:	2104      	movs	r1, #4
10013104:	f7ff bfda 	b.w	100130bc <i2c_simple_write_status_generic>

10013108 <TRNG_Init>:
#include "mxc_device.h"
#include "trng.h"
#include <string.h>

void TRNG_Init(void) {
    MXC_TRNG_Init();
10013108:	f001 bf99 	b.w	1001503e <MXC_TRNG_Init>

1001310c <TRNG_GenerateRandomID>:
}

uint32_t TRNG_GenerateRandomID(void) {
1001310c:	b507      	push	{r0, r1, r2, lr}
    uint32_t id;
    MXC_TRNG_Random((uint32_t*)&id, sizeof(id));
1001310e:	2104      	movs	r1, #4
10013110:	eb0d 0001 	add.w	r0, sp, r1
10013114:	f001 ffaa 	bl	1001506c <MXC_TRNG_Random>
    return id;
}
10013118:	9801      	ldr	r0, [sp, #4]
1001311a:	b003      	add	sp, #12
1001311c:	f85d fb04 	ldr.w	pc, [sp], #4

10013120 <TRNG_Shutdown>:

void TRNG_Shutdown(void) {
    MXC_TRNG_Shutdown();
10013120:	f001 bf95 	b.w	1001504e <MXC_TRNG_Shutdown>

10013124 <fld_set0>:
	res[0] = x0;
10013124:	f840 1b04 	str.w	r1, [r0], #4
		res[i] = 0;
10013128:	2224      	movs	r2, #36	@ 0x24
1001312a:	2100      	movs	r1, #0
1001312c:	f006 bc86 	b.w	10019a3c <memset>

10013130 <fld_add>:
{
10013130:	b530      	push	{r4, r5, lr}
	for (i = 0; i < FLD_LIMB_NUM; i++)
10013132:	2300      	movs	r3, #0
		res[i] = a[i] + b[i];
10013134:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
10013138:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
1001313c:	442c      	add	r4, r5
1001313e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < FLD_LIMB_NUM; i++)
10013142:	3301      	adds	r3, #1
10013144:	2b0a      	cmp	r3, #10
10013146:	d1f5      	bne.n	10013134 <fld_add+0x4>
}
10013148:	bd30      	pop	{r4, r5, pc}

1001314a <fld_sub>:
{
1001314a:	b530      	push	{r4, r5, lr}
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001314c:	2300      	movs	r3, #0
		res[i] = a[i] - b[i];
1001314e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
10013152:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
10013156:	1b64      	subs	r4, r4, r5
10013158:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < FLD_LIMB_NUM; i++)
1001315c:	3301      	adds	r3, #1
1001315e:	2b0a      	cmp	r3, #10
10013160:	d1f5      	bne.n	1001314e <fld_sub+0x4>
}
10013162:	bd30      	pop	{r4, r5, pc}

10013164 <do_x25519_base>:
 */

static void
do_x25519_base(uint8_t out[X25519_KEY_LEN],
	       const uint8_t scalar[X25519_KEY_LEN])
{
10013164:	b570      	push	{r4, r5, r6, lr}
10013166:	b0ce      	sub	sp, #312	@ 0x138
10013168:	4604      	mov	r4, r0
	fld_t u, t;

	/*
	 * clear bits on input and import it as x
	 */
	memcpy(tmp, scalar, X25519_KEY_LEN);
1001316a:	460b      	mov	r3, r1
1001316c:	466d      	mov	r5, sp
1001316e:	f101 0620 	add.w	r6, r1, #32
10013172:	6818      	ldr	r0, [r3, #0]
10013174:	6859      	ldr	r1, [r3, #4]
10013176:	462a      	mov	r2, r5
10013178:	c203      	stmia	r2!, {r0, r1}
1001317a:	3308      	adds	r3, #8
1001317c:	42b3      	cmp	r3, r6
1001317e:	4615      	mov	r5, r2
10013180:	d1f7      	bne.n	10013172 <do_x25519_base+0xe>
	tmp[0] &= 0xf8;
10013182:	f89d 3000 	ldrb.w	r3, [sp]
10013186:	f023 0307 	bic.w	r3, r3, #7
1001318a:	f88d 3000 	strb.w	r3, [sp]
	tmp[31] &= 0x7f;
1001318e:	f89d 301f 	ldrb.w	r3, [sp, #31]
	tmp[31] |= 0x40;

	sc_import(x, tmp, sizeof(tmp));
10013192:	2220      	movs	r2, #32
	tmp[31] &= 0x7f;
10013194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	tmp[31] |= 0x40;
10013198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	sc_import(x, tmp, sizeof(tmp));
1001319c:	eb0d 0002 	add.w	r0, sp, r2
100131a0:	4669      	mov	r1, sp
	tmp[31] |= 0x40;
100131a2:	f88d 301f 	strb.w	r3, [sp, #31]
	sc_import(x, tmp, sizeof(tmp));
100131a6:	f7ff fe58 	bl	10012e5a <sc_import>


	/*
	 * scale our base point on edwards curve
	 */
	ed_scale_base(&R, x);
100131aa:	a908      	add	r1, sp, #32
100131ac:	a826      	add	r0, sp, #152	@ 0x98
100131ae:	f7fe fd17 	bl	10011be0 <ed_scale_base>
	/*
	 * extract montgomery coordinate u from edwards point R
	 */

	/* u <- (z + y) / (z - y) */
	fld_sub(t, R.z, R.y);
100131b2:	a81c      	add	r0, sp, #112	@ 0x70
100131b4:	aa30      	add	r2, sp, #192	@ 0xc0
100131b6:	a944      	add	r1, sp, #272	@ 0x110
100131b8:	f7ff ffc7 	bl	1001314a <fld_sub>
	fld_inv(t, t);
100131bc:	4601      	mov	r1, r0
100131be:	f7ff fb3f 	bl	10012840 <fld_inv>
	fld_add(u, R.z, R.y);
100131c2:	a812      	add	r0, sp, #72	@ 0x48
100131c4:	aa30      	add	r2, sp, #192	@ 0xc0
100131c6:	a944      	add	r1, sp, #272	@ 0x110
100131c8:	f7ff ffb2 	bl	10013130 <fld_add>
	fld_mul(u, u, t);
100131cc:	aa1c      	add	r2, sp, #112	@ 0x70
100131ce:	4601      	mov	r1, r0
100131d0:	f7fe fe3b 	bl	10011e4a <fld_mul>


	fld_export(out, u);
100131d4:	a912      	add	r1, sp, #72	@ 0x48
100131d6:	4620      	mov	r0, r4
100131d8:	f7fe fdc7 	bl	10011d6a <fld_export>
}
100131dc:	b04e      	add	sp, #312	@ 0x138
100131de:	bd70      	pop	{r4, r5, r6, pc}

100131e0 <ctmemswap.constprop.0>:
ctmemswap(void *a, void *b, size_t len, uint8_t mask)
100131e0:	b530      	push	{r4, r5, lr}
100131e2:	3801      	subs	r0, #1
100131e4:	f101 0550 	add.w	r5, r1, #80	@ 0x50
	while (pa < endp) {
100131e8:	42a9      	cmp	r1, r5
100131ea:	d100      	bne.n	100131ee <ctmemswap.constprop.0+0xe>
}
100131ec:	bd30      	pop	{r4, r5, pc}
		delta = (*pa ^ *pb) & mask;
100131ee:	f810 4f01 	ldrb.w	r4, [r0, #1]!
100131f2:	780b      	ldrb	r3, [r1, #0]
100131f4:	4063      	eors	r3, r4
100131f6:	4013      	ands	r3, r2
		*pa++ ^= delta;
100131f8:	405c      	eors	r4, r3
100131fa:	7004      	strb	r4, [r0, #0]
		*pb++ ^= delta;
100131fc:	f811 4b01 	ldrb.w	r4, [r1], #1
10013200:	4063      	eors	r3, r4
10013202:	f801 3c01 	strb.w	r3, [r1, #-1]
10013206:	e7ef      	b.n	100131e8 <ctmemswap.constprop.0+0x8>

10013208 <do_x25519>:
{
10013208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1001320c:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
10013210:	4605      	mov	r5, r0
	memcpy(s, scalar, X25519_KEY_LEN);
10013212:	460b      	mov	r3, r1
10013214:	466e      	mov	r6, sp
10013216:	f101 0720 	add.w	r7, r1, #32
1001321a:	6818      	ldr	r0, [r3, #0]
1001321c:	6859      	ldr	r1, [r3, #4]
1001321e:	4634      	mov	r4, r6
10013220:	c403      	stmia	r4!, {r0, r1}
10013222:	3308      	adds	r3, #8
10013224:	42bb      	cmp	r3, r7
10013226:	4626      	mov	r6, r4
10013228:	d1f7      	bne.n	1001321a <do_x25519+0x12>
	s[0] &= 0xf8;
1001322a:	f89d 3000 	ldrb.w	r3, [sp]
	fld_scale(T2, T1, 121665);
1001322e:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 1001336c <do_x25519+0x164>
	s[0] &= 0xf8;
10013232:	f023 0307 	bic.w	r3, r3, #7
10013236:	f88d 3000 	strb.w	r3, [sp]
	s[31] &= 0x7f;
1001323a:	f89d 301f 	ldrb.w	r3, [sp, #31]
1001323e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
	s[31] |= 0x40;
10013242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	fld_import(P.x, point);
10013246:	4611      	mov	r1, r2
10013248:	a876      	add	r0, sp, #472	@ 0x1d8
	s[31] |= 0x40;
1001324a:	f88d 301f 	strb.w	r3, [sp, #31]
	fld_import(P.x, point);
1001324e:	f7fe fd62 	bl	10011d16 <fld_import>
	fld_set0(P.z, 1);
10013252:	2101      	movs	r1, #1
10013254:	a880      	add	r0, sp, #512	@ 0x200
10013256:	f7ff ff65 	bl	10013124 <fld_set0>
	fld_set0(out->x, 1);
1001325a:	2101      	movs	r1, #1
1001325c:	a862      	add	r0, sp, #392	@ 0x188
1001325e:	f7ff ff61 	bl	10013124 <fld_set0>
	fld_set0(out->z, 0);
10013262:	2100      	movs	r1, #0
10013264:	a86c      	add	r0, sp, #432	@ 0x1b0
10013266:	f7ff ff5d 	bl	10013124 <fld_set0>
	memcpy(&T, P, sizeof(struct mg));
1001326a:	2250      	movs	r2, #80	@ 0x50
1001326c:	a976      	add	r1, sp, #472	@ 0x1d8
1001326e:	a88a      	add	r0, sp, #552	@ 0x228
10013270:	f006 ff26 	bl	1001a0c0 <memcpy>
	for (i = X25519_KEY_LEN-1; i >= 0; i--) {
10013274:	261f      	movs	r6, #31
		foo = x[i];
10013276:	f91d 4006 	ldrsb.w	r4, [sp, r6]
1001327a:	f04f 0808 	mov.w	r8, #8
			ctmemswap(out, &T, sizeof(struct mg), foo >> 7);
1001327e:	11e7      	asrs	r7, r4, #7
10013280:	b2ff      	uxtb	r7, r7
10013282:	463a      	mov	r2, r7
10013284:	a98a      	add	r1, sp, #552	@ 0x228
10013286:	a862      	add	r0, sp, #392	@ 0x188
10013288:	f7ff ffaa 	bl	100131e0 <ctmemswap.constprop.0>
	fld_add(sumA, A->x, A->z);
1001328c:	aa6c      	add	r2, sp, #432	@ 0x1b0
1001328e:	a808      	add	r0, sp, #32
10013290:	a962      	add	r1, sp, #392	@ 0x188
10013292:	f7ff ff4d 	bl	10013130 <fld_add>
	fld_sq(sqsumA, sumA);
10013296:	4601      	mov	r1, r0
10013298:	a81c      	add	r0, sp, #112	@ 0x70
1001329a:	f7ff f8fd 	bl	10012498 <fld_sq>
	fld_sub(subA, A->x, A->z);
1001329e:	aa6c      	add	r2, sp, #432	@ 0x1b0
100132a0:	a812      	add	r0, sp, #72	@ 0x48
100132a2:	a962      	add	r1, sp, #392	@ 0x188
100132a4:	f7ff ff51 	bl	1001314a <fld_sub>
	fld_sq(sqsubA, subA);
100132a8:	4601      	mov	r1, r0
100132aa:	a826      	add	r0, sp, #152	@ 0x98
100132ac:	f7ff f8f4 	bl	10012498 <fld_sq>
	fld_mul(A->x, sqsubA, sqsumA);
100132b0:	aa1c      	add	r2, sp, #112	@ 0x70
100132b2:	a926      	add	r1, sp, #152	@ 0x98
100132b4:	a862      	add	r0, sp, #392	@ 0x188
100132b6:	f7fe fdc8 	bl	10011e4a <fld_mul>
	fld_sub(T1, sqsumA, sqsubA);
100132ba:	a844      	add	r0, sp, #272	@ 0x110
100132bc:	aa26      	add	r2, sp, #152	@ 0x98
100132be:	a91c      	add	r1, sp, #112	@ 0x70
100132c0:	f7ff ff43 	bl	1001314a <fld_sub>
	fld_scale(T2, T1, 121665);
100132c4:	4601      	mov	r1, r0
100132c6:	464a      	mov	r2, r9
100132c8:	a84e      	add	r0, sp, #312	@ 0x138
100132ca:	f7fe fd93 	bl	10011df4 <fld_scale>
	fld_add(T2, T2, sqsumA);
100132ce:	a94e      	add	r1, sp, #312	@ 0x138
100132d0:	4608      	mov	r0, r1
100132d2:	aa1c      	add	r2, sp, #112	@ 0x70
100132d4:	f7ff ff2c 	bl	10013130 <fld_add>
	fld_mul(A->z, T1, T2);
100132d8:	460a      	mov	r2, r1
100132da:	a86c      	add	r0, sp, #432	@ 0x1b0
100132dc:	a944      	add	r1, sp, #272	@ 0x110
100132de:	f7fe fdb4 	bl	10011e4a <fld_mul>
	fld_add(sumB, B->x, B->z);
100132e2:	aa94      	add	r2, sp, #592	@ 0x250
100132e4:	a98a      	add	r1, sp, #552	@ 0x228
100132e6:	a830      	add	r0, sp, #192	@ 0xc0
100132e8:	f7ff ff22 	bl	10013130 <fld_add>
	fld_sub(subB, B->x, B->z);
100132ec:	a83a      	add	r0, sp, #232	@ 0xe8
100132ee:	f7ff ff2c 	bl	1001314a <fld_sub>
	fld_mul(T1, subA, sumB);
100132f2:	aa30      	add	r2, sp, #192	@ 0xc0
100132f4:	a912      	add	r1, sp, #72	@ 0x48
100132f6:	a844      	add	r0, sp, #272	@ 0x110
100132f8:	f7fe fda7 	bl	10011e4a <fld_mul>
	fld_mul(T2, sumA, subB);
100132fc:	aa3a      	add	r2, sp, #232	@ 0xe8
100132fe:	a908      	add	r1, sp, #32
10013300:	a84e      	add	r0, sp, #312	@ 0x138
10013302:	f7fe fda2 	bl	10011e4a <fld_mul>
	fld_add(T3, T1, T2);
10013306:	aa4e      	add	r2, sp, #312	@ 0x138
10013308:	a858      	add	r0, sp, #352	@ 0x160
1001330a:	a944      	add	r1, sp, #272	@ 0x110
1001330c:	f7ff ff10 	bl	10013130 <fld_add>
	fld_sq(B->x, T3);
10013310:	4601      	mov	r1, r0
10013312:	a88a      	add	r0, sp, #552	@ 0x228
10013314:	f7ff f8c0 	bl	10012498 <fld_sq>
	fld_sub(T3, T1, T2);
10013318:	a858      	add	r0, sp, #352	@ 0x160
1001331a:	aa4e      	add	r2, sp, #312	@ 0x138
1001331c:	a944      	add	r1, sp, #272	@ 0x110
1001331e:	f7ff ff14 	bl	1001314a <fld_sub>
	fld_sq(T3, T3);
10013322:	4601      	mov	r1, r0
10013324:	f7ff f8b8 	bl	10012498 <fld_sq>
	fld_mul(B->z, T3, C->x);
10013328:	aa76      	add	r2, sp, #472	@ 0x1d8
1001332a:	a958      	add	r1, sp, #352	@ 0x160
1001332c:	a894      	add	r0, sp, #592	@ 0x250
1001332e:	f7fe fd8c 	bl	10011e4a <fld_mul>
			ctmemswap(out, &T, sizeof(struct mg), foo >> 7);
10013332:	463a      	mov	r2, r7
10013334:	a98a      	add	r1, sp, #552	@ 0x228
10013336:	a862      	add	r0, sp, #392	@ 0x188
10013338:	f7ff ff52 	bl	100131e0 <ctmemswap.constprop.0>
		for (j = 8; j > 0; j--, foo <<= 1) {
1001333c:	0064      	lsls	r4, r4, #1
1001333e:	f1b8 0801 	subs.w	r8, r8, #1
10013342:	b264      	sxtb	r4, r4
10013344:	d19b      	bne.n	1001327e <do_x25519+0x76>
	for (i = X25519_KEY_LEN-1; i >= 0; i--) {
10013346:	3e01      	subs	r6, #1
10013348:	d295      	bcs.n	10013276 <do_x25519+0x6e>
	fld_inv(res.z, res.z);
1001334a:	a96c      	add	r1, sp, #432	@ 0x1b0
1001334c:	4608      	mov	r0, r1
1001334e:	f7ff fa77 	bl	10012840 <fld_inv>
	fld_mul(res.x, res.x, res.z);
10013352:	a962      	add	r1, sp, #392	@ 0x188
10013354:	aa6c      	add	r2, sp, #432	@ 0x1b0
10013356:	4608      	mov	r0, r1
10013358:	f7fe fd77 	bl	10011e4a <fld_mul>
	fld_export(out, res.x);
1001335c:	a962      	add	r1, sp, #392	@ 0x188
1001335e:	4628      	mov	r0, r5
10013360:	f7fe fd03 	bl	10011d6a <fld_export>
}
10013364:	f50d 7d1f 	add.w	sp, sp, #636	@ 0x27c
10013368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1001336c:	0001db41 	.word	0x0001db41

10013370 <x25519_base>:
 */
void
x25519_base(uint8_t out[X25519_KEY_LEN],
	    const uint8_t scalar[X25519_KEY_LEN])
{
	do_x25519_base(out, scalar);
10013370:	f7ff bef8 	b.w	10013164 <do_x25519_base>

10013374 <x25519>:
void
x25519(uint8_t out[X25519_KEY_LEN],
       const uint8_t scalar[X25519_KEY_LEN],
       const uint8_t point[X25519_KEY_LEN])
{
	do_x25519(out, scalar, point);
10013374:	f7ff bf48 	b.w	10013208 <do_x25519>

10013378 <GPIO0_IRQHandler>:
 * NOTE: This weak definition is included to support Push Button 0 interrupts in
 *       case the user does not define this interrupt handler in their application.
 **/
__weak void GPIO0_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO0));
10013378:	2000      	movs	r0, #0
1001337a:	f000 bf33 	b.w	100141e4 <MXC_GPIO_Handler>

1001337e <GPIO1_IRQHandler>:
 * NOTE: This weak definition is included to support Push Button 1 interrupts in
 *       case the user does not define this interrupt handler in their application.
 **/
__weak void GPIO1_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO1));
1001337e:	2001      	movs	r0, #1
10013380:	f000 bf30 	b.w	100141e4 <MXC_GPIO_Handler>

10013384 <Console_Init>:
/******************************************************************************/
int Console_Init(void)
{
    int err;

    if ((err = MXC_UART_Init(ConsoleUart, CONSOLE_BAUD, MXC_UART_IBRO_CLK)) != E_NO_ERROR) {
10013384:	4b03      	ldr	r3, [pc, #12]	@ (10013394 <Console_Init+0x10>)
10013386:	2202      	movs	r2, #2
10013388:	6818      	ldr	r0, [r3, #0]
1001338a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
1001338e:	f001 bedf 	b.w	10015150 <MXC_UART_Init>
10013392:	bf00      	nop
10013394:	20000044 	.word	0x20000044

10013398 <Board_Init>:
{
10013398:	b510      	push	{r4, lr}
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
1001339a:	2000      	movs	r0, #0
1001339c:	f000 fb94 	bl	10013ac8 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
100133a0:	2001      	movs	r0, #1
100133a2:	f000 fb91 	bl	10013ac8 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO2);
100133a6:	2040      	movs	r0, #64	@ 0x40
100133a8:	f000 fb8e 	bl	10013ac8 <MXC_SYS_ClockEnable>
    if ((err = Console_Init()) < E_NO_ERROR) {
100133ac:	f7ff ffea 	bl	10013384 <Console_Init>
100133b0:	1e04      	subs	r4, r0, #0
100133b2:	db0d      	blt.n	100133d0 <Board_Init+0x38>
    if ((err = PB_Init()) != E_NO_ERROR) {
100133b4:	f000 f8a6 	bl	10013504 <PB_Init>
100133b8:	4604      	mov	r4, r0
100133ba:	b948      	cbnz	r0, 100133d0 <Board_Init+0x38>
    if ((err = LED_Init()) != E_NO_ERROR) {
100133bc:	f000 f886 	bl	100134cc <LED_Init>
100133c0:	4604      	mov	r4, r0
100133c2:	b928      	cbnz	r0, 100133d0 <Board_Init+0x38>
    MXC_SIMO->vrego_c = 0x43; // Set CNN voltage
100133c4:	4b03      	ldr	r3, [pc, #12]	@ (100133d4 <Board_Init+0x3c>)
    MXC_Delay(200000);
100133c6:	4804      	ldr	r0, [pc, #16]	@ (100133d8 <Board_Init+0x40>)
    MXC_SIMO->vrego_c = 0x43; // Set CNN voltage
100133c8:	2243      	movs	r2, #67	@ 0x43
100133ca:	60da      	str	r2, [r3, #12]
    MXC_Delay(200000);
100133cc:	f000 fa62 	bl	10013894 <MXC_Delay>
}
100133d0:	4620      	mov	r0, r4
100133d2:	bd10      	pop	{r4, pc}
100133d4:	40004400 	.word	0x40004400
100133d8:	00030d40 	.word	0x00030d40

100133dc <NMI_Handler>:
}

/******************************************************************************/
void NMI_Handler(void)
{
    __NOP();
100133dc:	bf00      	nop
}
100133de:	4770      	bx	lr

100133e0 <_close>:
    return -1;
}
int _close(int file)
{
    return -1;
}
100133e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100133e4:	4770      	bx	lr

100133e6 <_isatty>:
int _isatty(int file)
100133e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100133ea:	4770      	bx	lr

100133ec <_lseek>:
    return -1;
}
int _lseek(int file, off_t offset, int whence)
{
    return -1;
}
100133ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100133f0:	4770      	bx	lr

100133f2 <_fstat>:
int _fstat(int file, struct stat *st)
{
    return -1;
}
100133f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100133f6:	4770      	bx	lr

100133f8 <_read>:
   fgetc for stdio */
#if defined(__ICCARM__) || defined(__GNUC__)

#if defined(__GNUC__) // GNUC _read function prototype
int _read(int file, char *ptr, int len)
{
100133f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100133fc:	460d      	mov	r5, r1
100133fe:	4616      	mov	r6, r2
    size_t n;
#endif /*  */

    int num = 0; // count of number received.

    switch (file) {
10013400:	4604      	mov	r4, r0
10013402:	b9b8      	cbnz	r0, 10013434 <_read+0x3c>
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
            *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
10013404:	4f0f      	ldr	r7, [pc, #60]	@ (10013444 <_read+0x4c>)
        for (n = 0; n < len; n++) {
10013406:	42b4      	cmp	r4, r6
10013408:	46a8      	mov	r8, r5
1001340a:	da10      	bge.n	1001342e <_read+0x36>
            *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
1001340c:	4638      	mov	r0, r7
1001340e:	f001 ff63 	bl	100152d8 <MXC_UART_ReadCharacter>
10013412:	b2c1      	uxtb	r1, r0
10013414:	7029      	strb	r1, [r5, #0]
            MXC_UART_WriteCharacter(MXC_UARTn, *ptr); // echo the byte.
10013416:	4638      	mov	r0, r7
10013418:	f001 ff60 	bl	100152dc <MXC_UART_WriteCharacter>

            if (*ptr == '\r') { // check for end of line.
1001341c:	f815 3b01 	ldrb.w	r3, [r5], #1
10013420:	2b0d      	cmp	r3, #13
                *ptr = '\n';
                num++;
10013422:	f104 0401 	add.w	r4, r4, #1
            if (*ptr == '\r') { // check for end of line.
10013426:	d1ee      	bne.n	10013406 <_read+0xe>
                *ptr = '\n';
10013428:	230a      	movs	r3, #10
1001342a:	f888 3000 	strb.w	r3, [r8]
        errno = EBADF;
        return -1;
    }

    return num;
}
1001342e:	4620      	mov	r0, r4
10013430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errno = EBADF;
10013434:	f006 fc3a 	bl	10019cac <__errno>
10013438:	2309      	movs	r3, #9
1001343a:	6003      	str	r3, [r0, #0]
        return -1;
1001343c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
10013440:	e7f5      	b.n	1001342e <_read+0x36>
10013442:	bf00      	nop
10013444:	40042000 	.word	0x40042000

10013448 <_write>:
int __write(int file, const unsigned char *ptr, size_t len)
{
    size_t n;
#endif /* __GNUC__ */

    switch (file) {
10013448:	3801      	subs	r0, #1
1001344a:	2801      	cmp	r0, #1
{
1001344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001344e:	460d      	mov	r5, r1
10013450:	4614      	mov	r4, r2
    switch (file) {
10013452:	d921      	bls.n	10013498 <_write+0x50>
        }

        break;

    default:
        errno = EBADF;
10013454:	f006 fc2a 	bl	10019cac <__errno>
10013458:	2309      	movs	r3, #9
1001345a:	6003      	str	r3, [r0, #0]
        return -1;
1001345c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
10013460:	e018      	b.n	10013494 <_write+0x4c>
            if (*ptr == '\n') {
10013462:	7833      	ldrb	r3, [r6, #0]
10013464:	2b0a      	cmp	r3, #10
10013466:	d108      	bne.n	1001347a <_write+0x32>
                while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10013468:	480d      	ldr	r0, [pc, #52]	@ (100134a0 <_write+0x58>)
1001346a:	f001 ff3b 	bl	100152e4 <MXC_UART_GetTXFIFOAvailable>
1001346e:	2800      	cmp	r0, #0
10013470:	d0fa      	beq.n	10013468 <_write+0x20>
                MXC_UART_WriteCharacter(MXC_UARTn, '\r');
10013472:	210d      	movs	r1, #13
10013474:	4638      	mov	r0, r7
10013476:	f001 ff31 	bl	100152dc <MXC_UART_WriteCharacter>
            while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
1001347a:	4809      	ldr	r0, [pc, #36]	@ (100134a0 <_write+0x58>)
1001347c:	f001 ff32 	bl	100152e4 <MXC_UART_GetTXFIFOAvailable>
10013480:	2800      	cmp	r0, #0
10013482:	d0fa      	beq.n	1001347a <_write+0x32>
            MXC_UART_WriteCharacter(MXC_UARTn, *ptr++);
10013484:	f816 1b01 	ldrb.w	r1, [r6], #1
10013488:	4638      	mov	r0, r7
1001348a:	f001 ff27 	bl	100152dc <MXC_UART_WriteCharacter>
        for (n = 0; n < len; n++) {
1001348e:	1b73      	subs	r3, r6, r5
10013490:	429c      	cmp	r4, r3
10013492:	dce6      	bgt.n	10013462 <_write+0x1a>
    }

    return len;
}
10013494:	4620      	mov	r0, r4
10013496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10013498:	4f01      	ldr	r7, [pc, #4]	@ (100134a0 <_write+0x58>)
    switch (file) {
1001349a:	460e      	mov	r6, r1
1001349c:	e7f7      	b.n	1001348e <_write+0x46>
1001349e:	bf00      	nop
100134a0:	40042000 	.word	0x40042000

100134a4 <LED_On>:
//******************************************************************************
void LED_On(unsigned int idx)
{
    MXC_ASSERT(idx < num_leds);
#if (LED_ON == 0)
    MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
100134a4:	4b03      	ldr	r3, [pc, #12]	@ (100134b4 <LED_On+0x10>)
100134a6:	220c      	movs	r2, #12
100134a8:	4350      	muls	r0, r2
100134aa:	181a      	adds	r2, r3, r0
100134ac:	5818      	ldr	r0, [r3, r0]
100134ae:	6851      	ldr	r1, [r2, #4]
100134b0:	f000 be82 	b.w	100141b8 <MXC_GPIO_OutClr>
100134b4:	1002c090 	.word	0x1002c090

100134b8 <LED_Off>:
//******************************************************************************
void LED_Off(unsigned int idx)
{
    MXC_ASSERT(idx < num_leds);
#if (LED_ON == 0)
    MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
100134b8:	4b03      	ldr	r3, [pc, #12]	@ (100134c8 <LED_Off+0x10>)
100134ba:	220c      	movs	r2, #12
100134bc:	4350      	muls	r0, r2
100134be:	181a      	adds	r2, r3, r0
100134c0:	5818      	ldr	r0, [r3, r0]
100134c2:	6851      	ldr	r1, [r2, #4]
100134c4:	f000 be62 	b.w	1001418c <MXC_GPIO_OutSet>
100134c8:	1002c090 	.word	0x1002c090

100134cc <LED_Init>:
{
100134cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (i = 0; i < num_leds; i++) {
100134ce:	4b0b      	ldr	r3, [pc, #44]	@ (100134fc <LED_Init+0x30>)
100134d0:	4e0b      	ldr	r6, [pc, #44]	@ (10013500 <LED_Init+0x34>)
100134d2:	681f      	ldr	r7, [r3, #0]
100134d4:	2400      	movs	r4, #0
    int retval = E_NO_ERROR;
100134d6:	4625      	mov	r5, r4
    for (i = 0; i < num_leds; i++) {
100134d8:	42a7      	cmp	r7, r4
100134da:	d801      	bhi.n	100134e0 <LED_Init+0x14>
}
100134dc:	4628      	mov	r0, r5
100134de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LED_Off(i); // Set the output value
100134e0:	4620      	mov	r0, r4
100134e2:	f7ff ffe9 	bl	100134b8 <LED_Off>
        if (MXC_GPIO_Config(&led_pin[i]) != E_NO_ERROR) {
100134e6:	4630      	mov	r0, r6
100134e8:	f000 fea6 	bl	10014238 <MXC_GPIO_Config>
            retval = E_UNKNOWN;
100134ec:	2800      	cmp	r0, #0
100134ee:	bf18      	it	ne
100134f0:	f06f 0507 	mvnne.w	r5, #7
    for (i = 0; i < num_leds; i++) {
100134f4:	3401      	adds	r4, #1
100134f6:	360c      	adds	r6, #12
100134f8:	e7ee      	b.n	100134d8 <LED_Init+0xc>
100134fa:	bf00      	nop
100134fc:	1002c08c 	.word	0x1002c08c
10013500:	1002c090 	.word	0x1002c090

10013504 <PB_Init>:
#include "mxc_assert.h"
#include "pb.h"

/******************************************************************************/
int PB_Init(void)
{
10013504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int retval = E_NO_ERROR;
    unsigned int i;

    // Enable pushbutton inputs
    for (i = 0; i < num_pbs; i++) {
10013506:	4b09      	ldr	r3, [pc, #36]	@ (1001352c <PB_Init+0x28>)
10013508:	4e09      	ldr	r6, [pc, #36]	@ (10013530 <PB_Init+0x2c>)
1001350a:	681f      	ldr	r7, [r3, #0]
1001350c:	2400      	movs	r4, #0
    int retval = E_NO_ERROR;
1001350e:	4625      	mov	r5, r4
    for (i = 0; i < num_pbs; i++) {
10013510:	42a7      	cmp	r7, r4
10013512:	d801      	bhi.n	10013518 <PB_Init+0x14>
            retval = E_UNKNOWN;
        }
    }

    return retval;
}
10013514:	4628      	mov	r0, r5
10013516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (MXC_GPIO_Config(&pb_pin[i]) != E_NO_ERROR) {
10013518:	4630      	mov	r0, r6
1001351a:	f000 fe8d 	bl	10014238 <MXC_GPIO_Config>
            retval = E_UNKNOWN;
1001351e:	2800      	cmp	r0, #0
10013520:	bf18      	it	ne
10013522:	f06f 0507 	mvnne.w	r5, #7
    for (i = 0; i < num_pbs; i++) {
10013526:	3401      	adds	r4, #1
10013528:	360c      	adds	r6, #12
1001352a:	e7f1      	b.n	10013510 <PB_Init+0xc>
1001352c:	1002c0b4 	.word	0x1002c0b4
10013530:	1002c0b8 	.word	0x1002c0b8

10013534 <Reset_Handler>:
10013534:	4847      	ldr	r0, [pc, #284]	@ (10013654 <LPCMP_IRQHandler+0x2>)
10013536:	4685      	mov	sp, r0
10013538:	4847      	ldr	r0, [pc, #284]	@ (10013658 <LPCMP_IRQHandler+0x6>)
1001353a:	4780      	blx	r0
1001353c:	b980      	cbnz	r0, 10013560 <.SKIPRAMINIT>
1001353e:	4947      	ldr	r1, [pc, #284]	@ (1001365c <LPCMP_IRQHandler+0xa>)
10013540:	4a47      	ldr	r2, [pc, #284]	@ (10013660 <LPCMP_IRQHandler+0xe>)
10013542:	4b48      	ldr	r3, [pc, #288]	@ (10013664 <LPCMP_IRQHandler+0x12>)
10013544:	1a9b      	subs	r3, r3, r2
10013546:	dd03      	ble.n	10013550 <Reset_Handler+0x1c>
10013548:	3b04      	subs	r3, #4
1001354a:	58c8      	ldr	r0, [r1, r3]
1001354c:	50d0      	str	r0, [r2, r3]
1001354e:	dcfb      	bgt.n	10013548 <Reset_Handler+0x14>
10013550:	4945      	ldr	r1, [pc, #276]	@ (10013668 <LPCMP_IRQHandler+0x16>)
10013552:	4a46      	ldr	r2, [pc, #280]	@ (1001366c <LPCMP_IRQHandler+0x1a>)
10013554:	2000      	movs	r0, #0
10013556:	4291      	cmp	r1, r2
10013558:	bfbc      	itt	lt
1001355a:	f841 0b04 	strlt.w	r0, [r1], #4
1001355e:	e7fa      	blt.n	10013556 <Reset_Handler+0x22>

10013560 <.SKIPRAMINIT>:
10013560:	4843      	ldr	r0, [pc, #268]	@ (10013670 <LPCMP_IRQHandler+0x1e>)
10013562:	4780      	blx	r0
10013564:	4843      	ldr	r0, [pc, #268]	@ (10013674 <LPCMP_IRQHandler+0x22>)
10013566:	4780      	blx	r0
10013568:	4843      	ldr	r0, [pc, #268]	@ (10013678 <LPCMP_IRQHandler+0x26>)
1001356a:	4780      	blx	r0

1001356c <.SPIN>:
1001356c:	f7ff fffe 	bl	1001356c <.SPIN>
10013570:	e7fe      	b.n	10013570 <.SPIN+0x4>

10013572 <HardFault_Handler>:
10013572:	e7fe      	b.n	10013572 <HardFault_Handler>

10013574 <MemManage_Handler>:
10013574:	e7fe      	b.n	10013574 <MemManage_Handler>

10013576 <BusFault_Handler>:
10013576:	e7fe      	b.n	10013576 <BusFault_Handler>

10013578 <UsageFault_Handler>:
10013578:	e7fe      	b.n	10013578 <UsageFault_Handler>

1001357a <SVC_Handler>:
1001357a:	e7fe      	b.n	1001357a <SVC_Handler>

1001357c <DebugMon_Handler>:
1001357c:	e7fe      	b.n	1001357c <DebugMon_Handler>

1001357e <PendSV_Handler>:
1001357e:	e7fe      	b.n	1001357e <PendSV_Handler>

10013580 <SysTick_Handler>:
10013580:	e7fe      	b.n	10013580 <SysTick_Handler>

10013582 <Default_Handler>:
10013582:	e7fe      	b.n	10013582 <Default_Handler>

10013584 <PF_IRQHandler>:
10013584:	e7fe      	b.n	10013584 <PF_IRQHandler>

10013586 <WDT0_IRQHandler>:
10013586:	e7fe      	b.n	10013586 <WDT0_IRQHandler>

10013588 <RSV02_IRQHandler>:
10013588:	e7fe      	b.n	10013588 <RSV02_IRQHandler>

1001358a <RTC_IRQHandler>:
1001358a:	e7fe      	b.n	1001358a <RTC_IRQHandler>

1001358c <TRNG_IRQHandler>:
1001358c:	e7fe      	b.n	1001358c <TRNG_IRQHandler>

1001358e <TMR0_IRQHandler>:
1001358e:	e7fe      	b.n	1001358e <TMR0_IRQHandler>

10013590 <TMR1_IRQHandler>:
10013590:	e7fe      	b.n	10013590 <TMR1_IRQHandler>

10013592 <TMR2_IRQHandler>:
10013592:	e7fe      	b.n	10013592 <TMR2_IRQHandler>

10013594 <TMR3_IRQHandler>:
10013594:	e7fe      	b.n	10013594 <TMR3_IRQHandler>

10013596 <TMR4_IRQHandler>:
10013596:	e7fe      	b.n	10013596 <TMR4_IRQHandler>

10013598 <TMR5_IRQHandler>:
10013598:	e7fe      	b.n	10013598 <TMR5_IRQHandler>

1001359a <RSV11_IRQHandler>:
1001359a:	e7fe      	b.n	1001359a <RSV11_IRQHandler>

1001359c <RSV12_IRQHandler>:
1001359c:	e7fe      	b.n	1001359c <RSV12_IRQHandler>

1001359e <I2C0_IRQHandler>:
1001359e:	e7fe      	b.n	1001359e <I2C0_IRQHandler>

100135a0 <UART0_IRQHandler>:
100135a0:	e7fe      	b.n	100135a0 <UART0_IRQHandler>

100135a2 <UART1_IRQHandler>:
100135a2:	e7fe      	b.n	100135a2 <UART1_IRQHandler>

100135a4 <SPI1_IRQHandler>:
100135a4:	e7fe      	b.n	100135a4 <SPI1_IRQHandler>

100135a6 <RSV17_IRQHandler>:
100135a6:	e7fe      	b.n	100135a6 <RSV17_IRQHandler>

100135a8 <RSV18_IRQHandler>:
100135a8:	e7fe      	b.n	100135a8 <RSV18_IRQHandler>

100135aa <RSV19_IRQHandler>:
100135aa:	e7fe      	b.n	100135aa <RSV19_IRQHandler>

100135ac <ADC_IRQHandler>:
100135ac:	e7fe      	b.n	100135ac <ADC_IRQHandler>

100135ae <RSV21_IRQHandler>:
100135ae:	e7fe      	b.n	100135ae <RSV21_IRQHandler>

100135b0 <RSV22_IRQHandler>:
100135b0:	e7fe      	b.n	100135b0 <RSV22_IRQHandler>

100135b2 <FLC0_IRQHandler>:
100135b2:	e7fe      	b.n	100135b2 <FLC0_IRQHandler>
100135b4:	e7fe      	b.n	100135b4 <FLC0_IRQHandler+0x2>
100135b6:	e7fe      	b.n	100135b6 <FLC0_IRQHandler+0x4>

100135b8 <GPIO2_IRQHandler>:
100135b8:	e7fe      	b.n	100135b8 <GPIO2_IRQHandler>

100135ba <RSV27_IRQHandler>:
100135ba:	e7fe      	b.n	100135ba <RSV27_IRQHandler>
100135bc:	e7fe      	b.n	100135bc <RSV27_IRQHandler+0x2>

100135be <DMA1_IRQHandler>:
100135be:	e7fe      	b.n	100135be <DMA1_IRQHandler>

100135c0 <DMA2_IRQHandler>:
100135c0:	e7fe      	b.n	100135c0 <DMA2_IRQHandler>

100135c2 <DMA3_IRQHandler>:
100135c2:	e7fe      	b.n	100135c2 <DMA3_IRQHandler>

100135c4 <RSV32_IRQHandler>:
100135c4:	e7fe      	b.n	100135c4 <RSV32_IRQHandler>

100135c6 <RSV33_IRQHandler>:
100135c6:	e7fe      	b.n	100135c6 <RSV33_IRQHandler>

100135c8 <UART2_IRQHandler>:
100135c8:	e7fe      	b.n	100135c8 <UART2_IRQHandler>

100135ca <RSV35_IRQHandler>:
100135ca:	e7fe      	b.n	100135ca <RSV35_IRQHandler>

100135cc <I2C1_IRQHandler>:
100135cc:	e7fe      	b.n	100135cc <I2C1_IRQHandler>

100135ce <RSV37_IRQHandler>:
100135ce:	e7fe      	b.n	100135ce <RSV37_IRQHandler>

100135d0 <RSV38_IRQHandler>:
100135d0:	e7fe      	b.n	100135d0 <RSV38_IRQHandler>

100135d2 <RSV39_IRQHandler>:
100135d2:	e7fe      	b.n	100135d2 <RSV39_IRQHandler>

100135d4 <RSV40_IRQHandler>:
100135d4:	e7fe      	b.n	100135d4 <RSV40_IRQHandler>

100135d6 <RSV41_IRQHandler>:
100135d6:	e7fe      	b.n	100135d6 <RSV41_IRQHandler>

100135d8 <RSV42_IRQHandler>:
100135d8:	e7fe      	b.n	100135d8 <RSV42_IRQHandler>

100135da <RSV43_IRQHandler>:
100135da:	e7fe      	b.n	100135da <RSV43_IRQHandler>

100135dc <RSV44_IRQHandler>:
100135dc:	e7fe      	b.n	100135dc <RSV44_IRQHandler>

100135de <RSV45_IRQHandler>:
100135de:	e7fe      	b.n	100135de <RSV45_IRQHandler>

100135e0 <RSV46_IRQHandler>:
100135e0:	e7fe      	b.n	100135e0 <RSV46_IRQHandler>

100135e2 <RSV47_IRQHandler>:
100135e2:	e7fe      	b.n	100135e2 <RSV47_IRQHandler>

100135e4 <RSV48_IRQHandler>:
100135e4:	e7fe      	b.n	100135e4 <RSV48_IRQHandler>

100135e6 <RSV49_IRQHandler>:
100135e6:	e7fe      	b.n	100135e6 <RSV49_IRQHandler>

100135e8 <RSV50_IRQHandler>:
100135e8:	e7fe      	b.n	100135e8 <RSV50_IRQHandler>

100135ea <RSV51_IRQHandler>:
100135ea:	e7fe      	b.n	100135ea <RSV51_IRQHandler>

100135ec <RSV52_IRQHandler>:
100135ec:	e7fe      	b.n	100135ec <RSV52_IRQHandler>

100135ee <WUT_IRQHandler>:
100135ee:	e7fe      	b.n	100135ee <WUT_IRQHandler>

100135f0 <GPIOWAKE_IRQHandler>:
100135f0:	e7fe      	b.n	100135f0 <GPIOWAKE_IRQHandler>

100135f2 <RSV55_IRQHandler>:
100135f2:	e7fe      	b.n	100135f2 <RSV55_IRQHandler>

100135f4 <SPI0_IRQHandler>:
100135f4:	e7fe      	b.n	100135f4 <SPI0_IRQHandler>

100135f6 <WDT1_IRQHandler>:
100135f6:	e7fe      	b.n	100135f6 <WDT1_IRQHandler>

100135f8 <RSV58_IRQHandler>:
100135f8:	e7fe      	b.n	100135f8 <RSV58_IRQHandler>

100135fa <PT_IRQHandler>:
100135fa:	e7fe      	b.n	100135fa <PT_IRQHandler>

100135fc <RSV60_IRQHandler>:
100135fc:	e7fe      	b.n	100135fc <RSV60_IRQHandler>

100135fe <RSV61_IRQHandler>:
100135fe:	e7fe      	b.n	100135fe <RSV61_IRQHandler>

10013600 <I2C2_IRQHandler>:
10013600:	e7fe      	b.n	10013600 <I2C2_IRQHandler>

10013602 <RISCV_IRQHandler>:
10013602:	e7fe      	b.n	10013602 <RISCV_IRQHandler>

10013604 <RSV64_IRQHandler>:
10013604:	e7fe      	b.n	10013604 <RSV64_IRQHandler>

10013606 <RSV65_IRQHandler>:
10013606:	e7fe      	b.n	10013606 <RSV65_IRQHandler>

10013608 <RSV66_IRQHandler>:
10013608:	e7fe      	b.n	10013608 <RSV66_IRQHandler>

1001360a <OWM_IRQHandler>:
1001360a:	e7fe      	b.n	1001360a <OWM_IRQHandler>

1001360c <RSV68_IRQHandler>:
1001360c:	e7fe      	b.n	1001360c <RSV68_IRQHandler>

1001360e <RSV69_IRQHandler>:
1001360e:	e7fe      	b.n	1001360e <RSV69_IRQHandler>

10013610 <RSV70_IRQHandler>:
10013610:	e7fe      	b.n	10013610 <RSV70_IRQHandler>

10013612 <RSV71_IRQHandler>:
10013612:	e7fe      	b.n	10013612 <RSV71_IRQHandler>

10013614 <RSV72_IRQHandler>:
10013614:	e7fe      	b.n	10013614 <RSV72_IRQHandler>

10013616 <RSV73_IRQHandler>:
10013616:	e7fe      	b.n	10013616 <RSV73_IRQHandler>

10013618 <RSV74_IRQHandler>:
10013618:	e7fe      	b.n	10013618 <RSV74_IRQHandler>

1001361a <RSV75_IRQHandler>:
1001361a:	e7fe      	b.n	1001361a <RSV75_IRQHandler>

1001361c <RSV76_IRQHandler>:
1001361c:	e7fe      	b.n	1001361c <RSV76_IRQHandler>

1001361e <RSV77_IRQHandler>:
1001361e:	e7fe      	b.n	1001361e <RSV77_IRQHandler>

10013620 <RSV78_IRQHandler>:
10013620:	e7fe      	b.n	10013620 <RSV78_IRQHandler>

10013622 <RSV79_IRQHandler>:
10013622:	e7fe      	b.n	10013622 <RSV79_IRQHandler>

10013624 <RSV80_IRQHandler>:
10013624:	e7fe      	b.n	10013624 <RSV80_IRQHandler>

10013626 <RSV81_IRQHandler>:
10013626:	e7fe      	b.n	10013626 <RSV81_IRQHandler>

10013628 <ECC_IRQHandler>:
10013628:	e7fe      	b.n	10013628 <ECC_IRQHandler>

1001362a <DVS_IRQHandler>:
1001362a:	e7fe      	b.n	1001362a <DVS_IRQHandler>

1001362c <SIMO_IRQHandler>:
1001362c:	e7fe      	b.n	1001362c <SIMO_IRQHandler>

1001362e <RSV85_IRQHandler>:
1001362e:	e7fe      	b.n	1001362e <RSV85_IRQHandler>

10013630 <RSV86_IRQHandler>:
10013630:	e7fe      	b.n	10013630 <RSV86_IRQHandler>

10013632 <RSV87_IRQHandler>:
10013632:	e7fe      	b.n	10013632 <RSV87_IRQHandler>

10013634 <UART3_IRQHandler>:
10013634:	e7fe      	b.n	10013634 <UART3_IRQHandler>

10013636 <RSV89_IRQHandler>:
10013636:	e7fe      	b.n	10013636 <RSV89_IRQHandler>

10013638 <RSV90_IRQHandler>:
10013638:	e7fe      	b.n	10013638 <RSV90_IRQHandler>

1001363a <PCIF_IRQHandler>:
1001363a:	e7fe      	b.n	1001363a <PCIF_IRQHandler>

1001363c <RSV92_IRQHandler>:
1001363c:	e7fe      	b.n	1001363c <RSV92_IRQHandler>

1001363e <RSV93_IRQHandler>:
1001363e:	e7fe      	b.n	1001363e <RSV93_IRQHandler>

10013640 <RSV94_IRQHandler>:
10013640:	e7fe      	b.n	10013640 <RSV94_IRQHandler>

10013642 <RSV95_IRQHandler>:
10013642:	e7fe      	b.n	10013642 <RSV95_IRQHandler>

10013644 <RSV96_IRQHandler>:
10013644:	e7fe      	b.n	10013644 <RSV96_IRQHandler>

10013646 <AES_IRQHandler>:
10013646:	e7fe      	b.n	10013646 <AES_IRQHandler>

10013648 <RSV98_IRQHandler>:
10013648:	e7fe      	b.n	10013648 <RSV98_IRQHandler>

1001364a <I2S_IRQHandler>:
1001364a:	e7fe      	b.n	1001364a <I2S_IRQHandler>

1001364c <CNN_FIFO_IRQHandler>:
1001364c:	e7fe      	b.n	1001364c <CNN_FIFO_IRQHandler>

1001364e <CNN_IRQHandler>:
1001364e:	e7fe      	b.n	1001364e <CNN_IRQHandler>

10013650 <RSV102_IRQHandler>:
10013650:	e7fe      	b.n	10013650 <RSV102_IRQHandler>

10013652 <LPCMP_IRQHandler>:
10013652:	e7fe      	b.n	10013652 <LPCMP_IRQHandler>
10013654:	20020000 	.word	0x20020000
10013658:	1001371d 	.word	0x1001371d
1001365c:	10033318 	.word	0x10033318
10013660:	20000000 	.word	0x20000000
10013664:	20000adc 	.word	0x20000adc
10013668:	20000c00 	.word	0x20000c00
1001366c:	200018ac 	.word	0x200018ac
10013670:	10013721 	.word	0x10013721
10013674:	10019fc1 	.word	0x10019fc1
10013678:	10011629 	.word	0x10011629

1001367c <_sbrk>:
extern unsigned int __HeapLimit;
caddr_t _sbrk(int incr)
{
    char *prev_heap_end;

    if (heap_end == 0) {
1001367c:	4a0a      	ldr	r2, [pc, #40]	@ (100136a8 <_sbrk+0x2c>)
1001367e:	6811      	ldr	r1, [r2, #0]
{
10013680:	b508      	push	{r3, lr}
10013682:	4603      	mov	r3, r0
    if (heap_end == 0) {
10013684:	b909      	cbnz	r1, 1001368a <_sbrk+0xe>
        heap_end = (caddr_t)&__HeapBase;
10013686:	4909      	ldr	r1, [pc, #36]	@ (100136ac <_sbrk+0x30>)
10013688:	6011      	str	r1, [r2, #0]
    }
    prev_heap_end = heap_end;
1001368a:	6810      	ldr	r0, [r2, #0]

    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
1001368c:	4908      	ldr	r1, [pc, #32]	@ (100136b0 <_sbrk+0x34>)
1001368e:	4403      	add	r3, r0
10013690:	428b      	cmp	r3, r1
10013692:	d906      	bls.n	100136a2 <_sbrk+0x26>
        errno = ENOMEM;
10013694:	f006 fb0a 	bl	10019cac <__errno>
10013698:	230c      	movs	r3, #12
1001369a:	6003      	str	r3, [r0, #0]
        return (caddr_t)-1;
1001369c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }

    heap_end += incr;

    return (caddr_t)prev_heap_end;
}
100136a0:	bd08      	pop	{r3, pc}
    heap_end += incr;
100136a2:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
100136a4:	e7fc      	b.n	100136a0 <_sbrk+0x24>
100136a6:	bf00      	nop
100136a8:	20000ccc 	.word	0x20000ccc
100136ac:	200018b0 	.word	0x200018b0
100136b0:	2001f000 	.word	0x2001f000

100136b4 <SystemCoreClockUpdate>:
__weak void SystemCoreClockUpdate(void)
{
    uint32_t base_freq, div, clk_src;

    // Get the clock source and frequency
    clk_src = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_SEL);
100136b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
100136b8:	689a      	ldr	r2, [r3, #8]
100136ba:	f402 6260 	and.w	r2, r2, #3584	@ 0xe00
    switch (clk_src) {
100136be:	f5b2 6f20 	cmp.w	r2, #2560	@ 0xa00
100136c2:	d01b      	beq.n	100136fc <SystemCoreClockUpdate+0x48>
100136c4:	d810      	bhi.n	100136e8 <SystemCoreClockUpdate+0x34>
100136c6:	b1e2      	cbz	r2, 10013702 <SystemCoreClockUpdate+0x4e>
        break;
    case MXC_S_GCR_CLKCTRL_SYSCLK_SEL_INRO:
        base_freq = INRO_FREQ;
        break;
    case MXC_S_GCR_CLKCTRL_SYSCLK_SEL_IPO:
        base_freq = IPO_FREQ;
100136c8:	4910      	ldr	r1, [pc, #64]	@ (1001370c <SystemCoreClockUpdate+0x58>)
100136ca:	f247 5330 	movw	r3, #30000	@ 0x7530
100136ce:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
100136d2:	bf18      	it	ne
100136d4:	460b      	movne	r3, r1
        // This code should never execute, however, initialize to safe value.
        base_freq = HIRC_FREQ;
        break;
    }

    div = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_DIV) >> MXC_F_GCR_CLKCTRL_SYSCLK_DIV_POS;
100136d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
100136da:	6892      	ldr	r2, [r2, #8]
100136dc:	f3c2 1282 	ubfx	r2, r2, #6, #3

    SystemCoreClock = base_freq >> div;
100136e0:	40d3      	lsrs	r3, r2
100136e2:	4a0b      	ldr	r2, [pc, #44]	@ (10013710 <SystemCoreClockUpdate+0x5c>)
100136e4:	6013      	str	r3, [r2, #0]
}
100136e6:	4770      	bx	lr
    switch (clk_src) {
100136e8:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
100136ec:	d00b      	beq.n	10013706 <SystemCoreClockUpdate+0x52>
        base_freq = IPO_FREQ;
100136ee:	4b09      	ldr	r3, [pc, #36]	@ (10013714 <SystemCoreClockUpdate+0x60>)
100136f0:	4906      	ldr	r1, [pc, #24]	@ (1001370c <SystemCoreClockUpdate+0x58>)
100136f2:	f5b2 6f60 	cmp.w	r2, #3584	@ 0xe00
100136f6:	bf18      	it	ne
100136f8:	460b      	movne	r3, r1
100136fa:	e7ec      	b.n	100136d6 <SystemCoreClockUpdate+0x22>
        base_freq = IBRO_FREQ;
100136fc:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
10013700:	e7e9      	b.n	100136d6 <SystemCoreClockUpdate+0x22>
        base_freq = ISO_FREQ;
10013702:	4b05      	ldr	r3, [pc, #20]	@ (10013718 <SystemCoreClockUpdate+0x64>)
10013704:	e7e7      	b.n	100136d6 <SystemCoreClockUpdate+0x22>
        base_freq = ERTCO_FREQ;
10013706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
1001370a:	e7e4      	b.n	100136d6 <SystemCoreClockUpdate+0x22>
1001370c:	05f5e100 	.word	0x05f5e100
10013710:	200018ac 	.word	0x200018ac
10013714:	047868c0 	.word	0x047868c0
10013718:	03938700 	.word	0x03938700

1001371c <PreInit>:
 */
__weak int PreInit(void)
{
    /* Do nothing */
    return 0;
}
1001371c:	2000      	movs	r0, #0
1001371e:	4770      	bx	lr

10013720 <SystemInit>:
 * You may over-ride this function in your program by defining a custom 
 *  SystemInit(), but care should be taken to reproduce the initialization
 *  steps or a non-functional system may result.
 */
__weak void SystemInit(void)
{
10013720:	b510      	push	{r4, lr}
    /* Configure the interrupt controller to use the application vector table in */
    /* the application space */
#if defined(__CC_ARM) || defined(__GNUC__)
    /* IAR sets the VTOR pointer incorrectly and causes stack corruption */
    SCB->VTOR = (uint32_t)__isr_vector;
10013722:	4c0a      	ldr	r4, [pc, #40]	@ (1001374c <SystemInit+0x2c>)
10013724:	4b0a      	ldr	r3, [pc, #40]	@ (10013750 <SystemInit+0x30>)
10013726:	60a3      	str	r3, [r4, #8]
#endif /* __CC_ARM || __GNUC__ */

    /* Enable instruction cache */
    MXC_ICC_Enable(MXC_ICC0);
10013728:	480a      	ldr	r0, [pc, #40]	@ (10013754 <SystemInit+0x34>)
1001372a:	f001 fc65 	bl	10014ff8 <MXC_ICC_Enable>

    /* Enable FPU on Cortex-M4, which occupies coprocessor slots 10 & 11 */
    /* Grant full access, per "Table B3-24 CPACR bit assignments". */
    /* DDI0403D "ARMv7-M Architecture Reference Manual" */
    SCB->CPACR |= SCB_CPACR_CP10_Msk | SCB_CPACR_CP11_Msk;
1001372e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
10013732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10013736:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
1001373a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1001373e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();

    SystemCoreClockUpdate();
10013742:	f7ff ffb7 	bl	100136b4 <SystemCoreClockUpdate>

    Board_Init();
10013746:	f7ff fe27 	bl	10013398 <Board_Init>
}
1001374a:	bd10      	pop	{r4, pc}
1001374c:	e000ed00 	.word	0xe000ed00
10013750:	1000e000 	.word	0x1000e000
10013754:	4002a000 	.word	0x4002a000

10013758 <MXC_DelayInit>:
    }
}

/* ************************************************************************** */
static void MXC_DelayInit(uint32_t us)
{
10013758:	b538      	push	{r3, r4, r5, lr}
    uint32_t starttick, reload, ticks, lastticks;

    // Record the current tick value and clear the overflow flag
    starttick = SysTick->VAL;
1001375a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000

    // Save the state of control register (and clear the overflow flag)
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
1001375e:	4918      	ldr	r1, [pc, #96]	@ (100137c0 <MXC_DelayInit+0x68>)
    starttick = SysTick->VAL;
10013760:	699c      	ldr	r4, [r3, #24]
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
10013762:	691a      	ldr	r2, [r3, #16]
10013764:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
10013768:	600a      	str	r2, [r1, #0]

    // If the SysTick is not running, configure and start it
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk)) {
1001376a:	691a      	ldr	r2, [r3, #16]
1001376c:	07d2      	lsls	r2, r2, #31
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
1001376e:	bf5b      	ittet	pl
10013770:	f06f 447f 	mvnpl.w	r4, #4278190080	@ 0xff000000
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
10013774:	2205      	movpl	r2, #5
        starttick = SysTick_VAL_CURRENT_Msk;
        reload = SysTick_LOAD_RELOAD_Msk + 1;
    } else {
        reload = SysTick->LOAD + 1; // get the current reload value
10013776:	695d      	ldrmi	r5, [r3, #20]
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
10013778:	615c      	strpl	r4, [r3, #20]
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
1001377a:	bf5c      	itt	pl
1001377c:	619c      	strpl	r4, [r3, #24]
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
1001377e:	611a      	strpl	r2, [r3, #16]
    }

    // Calculate the total number of ticks to delay
    ticks = (uint32_t)(((uint64_t)us * (uint64_t)SystemCoreClock) / 1000000);
10013780:	4b10      	ldr	r3, [pc, #64]	@ (100137c4 <MXC_DelayInit+0x6c>)
10013782:	4a11      	ldr	r2, [pc, #68]	@ (100137c8 <MXC_DelayInit+0x70>)
10013784:	6819      	ldr	r1, [r3, #0]
10013786:	f04f 0300 	mov.w	r3, #0
1001378a:	fba0 0101 	umull	r0, r1, r0, r1
        reload = SysTick_LOAD_RELOAD_Msk + 1;
1001378e:	bf54      	ite	pl
10013790:	f04f 7580 	movpl.w	r5, #16777216	@ 0x1000000
        reload = SysTick->LOAD + 1; // get the current reload value
10013794:	3501      	addmi	r5, #1
    ticks = (uint32_t)(((uint64_t)us * (uint64_t)SystemCoreClock) / 1000000);
10013796:	f00f f93b 	bl	10022a10 <__aeabi_uldivmod>

    // How many overflows of the SysTick will occur
    overflows = ticks / reload;
1001379a:	4b0c      	ldr	r3, [pc, #48]	@ (100137cc <MXC_DelayInit+0x74>)
1001379c:	fbb0 f2f5 	udiv	r2, r0, r5

    // How many remaining ticks after the last overflow
    lastticks = ticks % reload;
100137a0:	fb05 0012 	mls	r0, r5, r2, r0

    // Check if there will be another overflow due to the current value of the SysTick
    if (lastticks >= starttick) {
100137a4:	4284      	cmp	r4, r0
    overflows = ticks / reload;
100137a6:	601a      	str	r2, [r3, #0]
        overflows++;
100137a8:	bf9f      	itttt	ls
100137aa:	681a      	ldrls	r2, [r3, #0]
100137ac:	3201      	addls	r2, #1
100137ae:	601a      	strls	r2, [r3, #0]
        endtick = reload - (lastticks - starttick);
100137b0:	192d      	addls	r5, r5, r4
100137b2:	4b07      	ldr	r3, [pc, #28]	@ (100137d0 <MXC_DelayInit+0x78>)
100137b4:	bf94      	ite	ls
100137b6:	1a28      	subls	r0, r5, r0
    } else {
        endtick = starttick - lastticks;
100137b8:	1a20      	subhi	r0, r4, r0
        endtick = reload - (lastticks - starttick);
100137ba:	6018      	str	r0, [r3, #0]
    }
}
100137bc:	bd38      	pop	{r3, r4, r5, pc}
100137be:	bf00      	nop
100137c0:	20000cd4 	.word	0x20000cd4
100137c4:	200018ac 	.word	0x200018ac
100137c8:	000f4240 	.word	0x000f4240
100137cc:	20000048 	.word	0x20000048
100137d0:	20000cd8 	.word	0x20000cd8

100137d4 <MXC_DelayAsync>:

/* ************************************************************************** */
int MXC_DelayAsync(uint32_t us, mxc_delay_complete_t callback)
{
100137d4:	b510      	push	{r4, lr}
    cbFunc = callback;
100137d6:	4a0b      	ldr	r2, [pc, #44]	@ (10013804 <MXC_DelayAsync+0x30>)

    // Check if timeout currently ongoing
    if (overflows > 0) {
100137d8:	4c0b      	ldr	r4, [pc, #44]	@ (10013808 <MXC_DelayAsync+0x34>)
    cbFunc = callback;
100137da:	6011      	str	r1, [r2, #0]
    if (overflows > 0) {
100137dc:	6822      	ldr	r2, [r4, #0]
100137de:	2a00      	cmp	r2, #0
100137e0:	dc0d      	bgt.n	100137fe <MXC_DelayAsync+0x2a>
        return E_BUSY;
    }

    // Check if there is nothing to do
    if (us == 0) {
100137e2:	b150      	cbz	r0, 100137fa <MXC_DelayAsync+0x26>
        return E_NO_ERROR;
    }

    // Calculate the necessary delay and start the timer
    MXC_DelayInit(us);
100137e4:	f7ff ffb8 	bl	10013758 <MXC_DelayInit>

    // Enable SysTick interrupt if necessary
    if (overflows > 0) {
100137e8:	6823      	ldr	r3, [r4, #0]
100137ea:	2b00      	cmp	r3, #0
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
100137ec:	bfc1      	itttt	gt
100137ee:	f04f 22e0 	movgt.w	r2, #3758153728	@ 0xe000e000
100137f2:	6913      	ldrgt	r3, [r2, #16]
100137f4:	f043 0302 	orrgt.w	r3, r3, #2
100137f8:	6113      	strgt	r3, [r2, #16]
        return E_NO_ERROR;
100137fa:	2000      	movs	r0, #0
    }

    return E_NO_ERROR;
}
100137fc:	bd10      	pop	{r4, pc}
        return E_BUSY;
100137fe:	f06f 0005 	mvn.w	r0, #5
10013802:	e7fb      	b.n	100137fc <MXC_DelayAsync+0x28>
10013804:	20000cd0 	.word	0x20000cd0
10013808:	20000048 	.word	0x20000048

1001380c <MXC_DelayAbort>:
    return E_BUSY;
}

/* ************************************************************************** */
void MXC_DelayAbort(void)
{
1001380c:	b510      	push	{r4, lr}
    if (cbFunc != NULL) {
1001380e:	4c09      	ldr	r4, [pc, #36]	@ (10013834 <MXC_DelayAbort+0x28>)
10013810:	6823      	ldr	r3, [r4, #0]
10013812:	b123      	cbz	r3, 1001381e <MXC_DelayAbort+0x12>
        cbFunc(E_ABORT);
10013814:	f06f 000f 	mvn.w	r0, #15
10013818:	4798      	blx	r3
        cbFunc = NULL;
1001381a:	2300      	movs	r3, #0
1001381c:	6023      	str	r3, [r4, #0]
    }

    SysTick->CTRL = ctrl_save;
1001381e:	4b06      	ldr	r3, [pc, #24]	@ (10013838 <MXC_DelayAbort+0x2c>)
10013820:	681a      	ldr	r2, [r3, #0]
10013822:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
10013826:	611a      	str	r2, [r3, #16]
    overflows = -1;
10013828:	4b04      	ldr	r3, [pc, #16]	@ (1001383c <MXC_DelayAbort+0x30>)
1001382a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001382e:	601a      	str	r2, [r3, #0]
}
10013830:	bd10      	pop	{r4, pc}
10013832:	bf00      	nop
10013834:	20000cd0 	.word	0x20000cd0
10013838:	20000cd4 	.word	0x20000cd4
1001383c:	20000048 	.word	0x20000048

10013840 <MXC_DelayCheck>:
{
10013840:	b538      	push	{r3, r4, r5, lr}
    if (overflows < 0) {
10013842:	4b11      	ldr	r3, [pc, #68]	@ (10013888 <MXC_DelayCheck+0x48>)
10013844:	681a      	ldr	r2, [r3, #0]
10013846:	2a00      	cmp	r2, #0
10013848:	da08      	bge.n	1001385c <MXC_DelayCheck+0x1c>
        if (cbFunc != NULL) {
1001384a:	4c10      	ldr	r4, [pc, #64]	@ (1001388c <MXC_DelayCheck+0x4c>)
1001384c:	6823      	ldr	r3, [r4, #0]
1001384e:	b11b      	cbz	r3, 10013858 <MXC_DelayCheck+0x18>
            cbFunc(E_NO_ERROR);
10013850:	2000      	movs	r0, #0
10013852:	4798      	blx	r3
            cbFunc = NULL;
10013854:	2300      	movs	r3, #0
10013856:	6023      	str	r3, [r4, #0]
        return E_NO_ERROR;
10013858:	2000      	movs	r0, #0
}
1001385a:	bd38      	pop	{r3, r4, r5, pc}
    if ((overflows == 0) && (SysTick->VAL <= endtick)) {
1001385c:	681c      	ldr	r4, [r3, #0]
1001385e:	b984      	cbnz	r4, 10013882 <MXC_DelayCheck+0x42>
10013860:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
10013864:	699a      	ldr	r2, [r3, #24]
10013866:	4b0a      	ldr	r3, [pc, #40]	@ (10013890 <MXC_DelayCheck+0x50>)
10013868:	681b      	ldr	r3, [r3, #0]
1001386a:	429a      	cmp	r2, r3
1001386c:	d809      	bhi.n	10013882 <MXC_DelayCheck+0x42>
        if (cbFunc != NULL) {
1001386e:	4d07      	ldr	r5, [pc, #28]	@ (1001388c <MXC_DelayCheck+0x4c>)
        MXC_DelayAbort();
10013870:	f7ff ffcc 	bl	1001380c <MXC_DelayAbort>
        if (cbFunc != NULL) {
10013874:	682b      	ldr	r3, [r5, #0]
10013876:	2b00      	cmp	r3, #0
10013878:	d0ee      	beq.n	10013858 <MXC_DelayCheck+0x18>
            cbFunc(E_NO_ERROR);
1001387a:	4620      	mov	r0, r4
1001387c:	4798      	blx	r3
            cbFunc = NULL;
1001387e:	602c      	str	r4, [r5, #0]
10013880:	e7ea      	b.n	10013858 <MXC_DelayCheck+0x18>
    return E_BUSY;
10013882:	f06f 0005 	mvn.w	r0, #5
10013886:	e7e8      	b.n	1001385a <MXC_DelayCheck+0x1a>
10013888:	20000048 	.word	0x20000048
1001388c:	20000cd0 	.word	0x20000cd0
10013890:	20000cd8 	.word	0x20000cd8

10013894 <MXC_Delay>:

/* ************************************************************************** */
int MXC_Delay(uint32_t us)
{
10013894:	b510      	push	{r4, lr}
    // Check if timeout currently ongoing
    if (overflows > 0) {
10013896:	4c11      	ldr	r4, [pc, #68]	@ (100138dc <MXC_Delay+0x48>)
10013898:	6822      	ldr	r2, [r4, #0]
1001389a:	2a00      	cmp	r2, #0
1001389c:	dc1a      	bgt.n	100138d4 <MXC_Delay+0x40>
        return E_BUSY;
    }

    // Check if there is nothing to do
    if (us == 0) {
1001389e:	b178      	cbz	r0, 100138c0 <MXC_Delay+0x2c>
        return E_NO_ERROR;
    }

    // Calculate the necessary delay and start the timer
    MXC_DelayInit(us);
100138a0:	f7ff ff5a 	bl	10013758 <MXC_DelayInit>
    // Wait for the number of overflows
    while (overflows > 0) {
        // If SysTick interrupts are enabled, COUNTFLAG will never be set here and
        // overflows will be decremented in the ISR. If SysTick interrupts are
        // disabled, overflows is decremented here.
        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
100138a4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    while (overflows > 0) {
100138a8:	6823      	ldr	r3, [r4, #0]
100138aa:	2b00      	cmp	r3, #0
100138ac:	dc0a      	bgt.n	100138c4 <MXC_Delay+0x30>
            overflows--;
        }
    }

    // Wait for the counter value
    while (SysTick->VAL > endtick) {}
100138ae:	4b0c      	ldr	r3, [pc, #48]	@ (100138e0 <MXC_Delay+0x4c>)
100138b0:	681b      	ldr	r3, [r3, #0]
100138b2:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
100138b6:	698a      	ldr	r2, [r1, #24]
100138b8:	429a      	cmp	r2, r3
100138ba:	d8fc      	bhi.n	100138b6 <MXC_Delay+0x22>

    MXC_DelayAbort();
100138bc:	f7ff ffa6 	bl	1001380c <MXC_DelayAbort>
        return E_NO_ERROR;
100138c0:	2000      	movs	r0, #0
    return E_NO_ERROR;
}
100138c2:	bd10      	pop	{r4, pc}
        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
100138c4:	6913      	ldr	r3, [r2, #16]
100138c6:	03db      	lsls	r3, r3, #15
            overflows--;
100138c8:	bf42      	ittt	mi
100138ca:	6823      	ldrmi	r3, [r4, #0]
100138cc:	f103 33ff 	addmi.w	r3, r3, #4294967295	@ 0xffffffff
100138d0:	6023      	strmi	r3, [r4, #0]
100138d2:	e7e9      	b.n	100138a8 <MXC_Delay+0x14>
        return E_BUSY;
100138d4:	f06f 0005 	mvn.w	r0, #5
100138d8:	e7f3      	b.n	100138c2 <MXC_Delay+0x2e>
100138da:	bf00      	nop
100138dc:	20000048 	.word	0x20000048
100138e0:	20000cd8 	.word	0x20000cd8

100138e4 <NVIC_SetRAM>:
__attribute__((aligned(512)))
#endif
static void (*ramVectorTable[MXC_IRQ_COUNT])(void);

void NVIC_SetRAM(void)
{
100138e4:	b508      	push	{r3, lr}
#else
    /* should be defined in starup_<device>.S */
    extern uint32_t __isr_vector[MXC_IRQ_COUNT];
#endif

    memcpy(&ramVectorTable, &__isr_vector, sizeof(ramVectorTable));
100138e6:	4b05      	ldr	r3, [pc, #20]	@ (100138fc <NVIC_SetRAM+0x18>)
100138e8:	4905      	ldr	r1, [pc, #20]	@ (10013900 <NVIC_SetRAM+0x1c>)
100138ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
100138ee:	4618      	mov	r0, r3
100138f0:	f006 fbe6 	bl	1001a0c0 <memcpy>
    SCB->VTOR = (uint32_t)&ramVectorTable;
100138f4:	4a03      	ldr	r2, [pc, #12]	@ (10013904 <NVIC_SetRAM+0x20>)
100138f6:	6090      	str	r0, [r2, #8]
}
100138f8:	bd08      	pop	{r3, pc}
100138fa:	bf00      	nop
100138fc:	20000e00 	.word	0x20000e00
10013900:	1000e000 	.word	0x1000e000
10013904:	e000ed00 	.word	0xe000ed00

10013908 <MXC_NVIC_SetVector>:

void MXC_NVIC_SetVector(IRQn_Type irqn, void (*irq_handler)(void))
{
10013908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int index = irqn + 16; /* offset for externals */

    /* If not copied, do copy */
    if (SCB->VTOR != (uint32_t)&ramVectorTable) {
1001390a:	4b0c      	ldr	r3, [pc, #48]	@ (1001393c <MXC_NVIC_SetVector+0x34>)
1001390c:	4e0c      	ldr	r6, [pc, #48]	@ (10013940 <MXC_NVIC_SetVector+0x38>)
1001390e:	689b      	ldr	r3, [r3, #8]
10013910:	42b3      	cmp	r3, r6
{
10013912:	4604      	mov	r4, r0
10013914:	460d      	mov	r5, r1
    int index = irqn + 16; /* offset for externals */
10013916:	f100 0710 	add.w	r7, r0, #16
    if (SCB->VTOR != (uint32_t)&ramVectorTable) {
1001391a:	d001      	beq.n	10013920 <MXC_NVIC_SetVector+0x18>
        NVIC_SetRAM();
1001391c:	f7ff ffe2 	bl	100138e4 <NVIC_SetRAM>
  if ((int32_t)(IRQn) >= 0)
10013920:	2c00      	cmp	r4, #0
    }

    ramVectorTable[index] = irq_handler;
10013922:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
10013926:	db07      	blt.n	10013938 <MXC_NVIC_SetVector+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10013928:	4a06      	ldr	r2, [pc, #24]	@ (10013944 <MXC_NVIC_SetVector+0x3c>)
1001392a:	0961      	lsrs	r1, r4, #5
1001392c:	2301      	movs	r3, #1
1001392e:	f004 041f 	and.w	r4, r4, #31
10013932:	40a3      	lsls	r3, r4
10013934:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NVIC_EnableIRQ(irqn);
}
10013938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001393a:	bf00      	nop
1001393c:	e000ed00 	.word	0xe000ed00
10013940:	20000e00 	.word	0x20000e00
10013944:	e000e100 	.word	0xe000e100

10013948 <MXC_SYS_GetUSN>:

/* **** Functions **** */

/* ************************************************************************** */
int MXC_SYS_GetUSN(uint8_t *usn, uint8_t *checksum)
{
10013948:	b5f0      	push	{r4, r5, r6, r7, lr}
1001394a:	460f      	mov	r7, r1
1001394c:	b08f      	sub	sp, #60	@ 0x3c
    int err = E_NO_ERROR;
    uint32_t *infoblock = (uint32_t *)MXC_INFO0_MEM_BASE;

    if (usn == NULL) {
1001394e:	4604      	mov	r4, r0
10013950:	2800      	cmp	r0, #0
10013952:	d07d      	beq.n	10013a50 <MXC_SYS_GetUSN+0x108>
    /* Read the USN from the info block */
    MXC_FLC_UnlockInfoBlock(MXC_INFO0_MEM_BASE);

    memset(usn, 0, MXC_SYS_USN_CHECKSUM_LEN);

    usn[0] = (infoblock[0] & 0x007F8000) >> 15;
10013954:	f04f 5584 	mov.w	r5, #276824064	@ 0x10800000
    MXC_FLC_UnlockInfoBlock(MXC_INFO0_MEM_BASE);
10013958:	f04f 5084 	mov.w	r0, #276824064	@ 0x10800000
1001395c:	f000 fb9a 	bl	10014094 <MXC_FLC_UnlockInfoBlock>
    memset(usn, 0, MXC_SYS_USN_CHECKSUM_LEN);
10013960:	2210      	movs	r2, #16
10013962:	2100      	movs	r1, #0
10013964:	4620      	mov	r0, r4
10013966:	f006 f869 	bl	10019a3c <memset>
    usn[0] = (infoblock[0] & 0x007F8000) >> 15;
1001396a:	682b      	ldr	r3, [r5, #0]
1001396c:	0bdb      	lsrs	r3, r3, #15
1001396e:	7023      	strb	r3, [r4, #0]
    usn[1] = (infoblock[0] & 0x7F800000) >> 23;
10013970:	682b      	ldr	r3, [r5, #0]
10013972:	0ddb      	lsrs	r3, r3, #23
10013974:	7063      	strb	r3, [r4, #1]
    usn[2] = (infoblock[1] & 0x0000007F) << 1;
10013976:	686b      	ldr	r3, [r5, #4]
10013978:	005b      	lsls	r3, r3, #1
1001397a:	b2db      	uxtb	r3, r3
1001397c:	70a3      	strb	r3, [r4, #2]
    usn[2] |= (infoblock[0] & 0x80000000) >> 31;
1001397e:	682a      	ldr	r2, [r5, #0]
10013980:	ea43 73d2 	orr.w	r3, r3, r2, lsr #31
10013984:	70a3      	strb	r3, [r4, #2]
    usn[3] = (infoblock[1] & 0x00007F80) >> 7;
10013986:	686b      	ldr	r3, [r5, #4]
10013988:	09db      	lsrs	r3, r3, #7
1001398a:	70e3      	strb	r3, [r4, #3]
    usn[4] = (infoblock[1] & 0x007F8000) >> 15;
1001398c:	686b      	ldr	r3, [r5, #4]
1001398e:	0bdb      	lsrs	r3, r3, #15
10013990:	7123      	strb	r3, [r4, #4]
    usn[5] = (infoblock[1] & 0x7F800000) >> 23;
10013992:	686b      	ldr	r3, [r5, #4]
10013994:	0ddb      	lsrs	r3, r3, #23
10013996:	7163      	strb	r3, [r4, #5]
    usn[6] = (infoblock[2] & 0x007F8000) >> 15;
10013998:	68ab      	ldr	r3, [r5, #8]
1001399a:	0bdb      	lsrs	r3, r3, #15
1001399c:	71a3      	strb	r3, [r4, #6]
    usn[7] = (infoblock[2] & 0x7F800000) >> 23;
1001399e:	68ab      	ldr	r3, [r5, #8]
100139a0:	0ddb      	lsrs	r3, r3, #23
100139a2:	71e3      	strb	r3, [r4, #7]
    usn[8] = (infoblock[3] & 0x0000007F) << 1;
100139a4:	68eb      	ldr	r3, [r5, #12]
100139a6:	005b      	lsls	r3, r3, #1
100139a8:	b2db      	uxtb	r3, r3
100139aa:	7223      	strb	r3, [r4, #8]
    usn[8] |= (infoblock[2] & 0x80000000) >> 31;
100139ac:	68aa      	ldr	r2, [r5, #8]
100139ae:	ea43 73d2 	orr.w	r3, r3, r2, lsr #31
100139b2:	7223      	strb	r3, [r4, #8]
    usn[9] = (infoblock[3] & 0x00007F80) >> 7;
100139b4:	68eb      	ldr	r3, [r5, #12]
100139b6:	09db      	lsrs	r3, r3, #7
100139b8:	7263      	strb	r3, [r4, #9]
    usn[10] = (infoblock[3] & 0x007F8000) >> 15;
100139ba:	68eb      	ldr	r3, [r5, #12]
100139bc:	0bdb      	lsrs	r3, r3, #15
100139be:	72a3      	strb	r3, [r4, #10]

    /* If requested, verify and return the checksum */
    if (checksum != NULL) {
100139c0:	2f00      	cmp	r7, #0
100139c2:	d039      	beq.n	10013a38 <MXC_SYS_GetUSN+0xf0>
        uint8_t check_csum[MXC_SYS_USN_CHECKSUM_LEN];
        uint8_t aes_key[MXC_SYS_USN_CHECKSUM_LEN] = { 0 }; // NULL Key (per checksum spec)
100139c4:	2300      	movs	r3, #0
100139c6:	e9cd 3305 	strd	r3, r3, [sp, #20]
100139ca:	e9cd 3307 	strd	r3, r3, [sp, #28]

        // Read Checksum from the infoblock
        checksum[0] = ((infoblock[3] & 0x7F800000) >> 23);
100139ce:	68eb      	ldr	r3, [r5, #12]
100139d0:	0ddb      	lsrs	r3, r3, #23
100139d2:	703b      	strb	r3, [r7, #0]
        checksum[1] = ((infoblock[4] & 0x007F8000) >> 15);
100139d4:	692b      	ldr	r3, [r5, #16]
100139d6:	0bdb      	lsrs	r3, r3, #15
100139d8:	707b      	strb	r3, [r7, #1]

        err = MXC_AES_Init();
100139da:	f7fc fc3b 	bl	10010254 <MXC_AES_Init>
        if (err) {
100139de:	4606      	mov	r6, r0
100139e0:	b128      	cbz	r0, 100139ee <MXC_SYS_GetUSN+0xa6>
        aes_req.encryption = MXC_AES_ENCRYPT_EXT_KEY;
        aes_req.callback = NULL;

        err = MXC_AES_Generic(&aes_req);
        if (err) {
            MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
100139e2:	4628      	mov	r0, r5
100139e4:	f000 fb67 	bl	100140b6 <MXC_FLC_LockInfoBlock>
    usn[12] = ((infoblock[4] & 0x007F8000) >> 15);

    MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);

    return err;
}
100139e8:	4630      	mov	r0, r6
100139ea:	b00f      	add	sp, #60	@ 0x3c
100139ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MXC_AES_SetExtKey((const void *)aes_key, MXC_AES_128BITS);
100139ee:	4601      	mov	r1, r0
100139f0:	a805      	add	r0, sp, #20
100139f2:	f7fc fc73 	bl	100102dc <MXC_AES_SetExtKey>
        aes_req.length = MXC_SYS_USN_CHECKSUM_LEN / 4;
100139f6:	2304      	movs	r3, #4
        aes_req.inputData = (uint32_t *)usn;
100139f8:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
        err = MXC_AES_Generic(&aes_req);
100139fc:	a809      	add	r0, sp, #36	@ 0x24
        aes_req.resultData = (uint32_t *)check_csum;
100139fe:	446b      	add	r3, sp
        aes_req.keySize = MXC_AES_128BITS;
10013a00:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
        aes_req.callback = NULL;
10013a04:	960d      	str	r6, [sp, #52]	@ 0x34
        aes_req.resultData = (uint32_t *)check_csum;
10013a06:	930b      	str	r3, [sp, #44]	@ 0x2c
        err = MXC_AES_Generic(&aes_req);
10013a08:	f7fc fc4a 	bl	100102a0 <MXC_AES_Generic>
        if (err) {
10013a0c:	4606      	mov	r6, r0
10013a0e:	2800      	cmp	r0, #0
10013a10:	d1e7      	bne.n	100139e2 <MXC_SYS_GetUSN+0x9a>
        MXC_AES_Shutdown();
10013a12:	f7fc fc33 	bl	1001027c <MXC_AES_Shutdown>
        if (check_csum[0] != checksum[1] || check_csum[1] != checksum[0]) {
10013a16:	f89d 2004 	ldrb.w	r2, [sp, #4]
10013a1a:	787b      	ldrb	r3, [r7, #1]
10013a1c:	429a      	cmp	r2, r3
10013a1e:	d104      	bne.n	10013a2a <MXC_SYS_GetUSN+0xe2>
10013a20:	f89d 2005 	ldrb.w	r2, [sp, #5]
10013a24:	783b      	ldrb	r3, [r7, #0]
10013a26:	429a      	cmp	r2, r3
10013a28:	d006      	beq.n	10013a38 <MXC_SYS_GetUSN+0xf0>
            MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
10013a2a:	f04f 5084 	mov.w	r0, #276824064	@ 0x10800000
10013a2e:	f000 fb42 	bl	100140b6 <MXC_FLC_LockInfoBlock>
            return E_INVALID;
10013a32:	f06f 0603 	mvn.w	r6, #3
10013a36:	e7d7      	b.n	100139e8 <MXC_SYS_GetUSN+0xa0>
    usn[11] = ((infoblock[3] & 0x7F800000) >> 23);
10013a38:	f04f 5084 	mov.w	r0, #276824064	@ 0x10800000
    return err;
10013a3c:	2600      	movs	r6, #0
    usn[11] = ((infoblock[3] & 0x7F800000) >> 23);
10013a3e:	68c3      	ldr	r3, [r0, #12]
10013a40:	0ddb      	lsrs	r3, r3, #23
10013a42:	72e3      	strb	r3, [r4, #11]
    usn[12] = ((infoblock[4] & 0x007F8000) >> 15);
10013a44:	6903      	ldr	r3, [r0, #16]
10013a46:	0bdb      	lsrs	r3, r3, #15
10013a48:	7323      	strb	r3, [r4, #12]
    MXC_FLC_LockInfoBlock(MXC_INFO0_MEM_BASE);
10013a4a:	f000 fb34 	bl	100140b6 <MXC_FLC_LockInfoBlock>
    return err;
10013a4e:	e7cb      	b.n	100139e8 <MXC_SYS_GetUSN+0xa0>
        return E_NULL_PTR;
10013a50:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
10013a54:	e7c8      	b.n	100139e8 <MXC_SYS_GetUSN+0xa0>
	...

10013a58 <MXC_SYS_IsClockEnabled>:

/* ************************************************************************** */
int MXC_SYS_IsClockEnabled(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
10013a58:	283f      	cmp	r0, #63	@ 0x3f
10013a5a:	d90a      	bls.n	10013a72 <MXC_SYS_IsClockEnabled+0x1a>
        clock -= 64;
        return !(MXC_LPGCR->pclkdis & (0x1 << clock));
10013a5c:	4b09      	ldr	r3, [pc, #36]	@ (10013a84 <MXC_SYS_IsClockEnabled+0x2c>)
10013a5e:	68da      	ldr	r2, [r3, #12]
        clock -= 64;
10013a60:	3840      	subs	r0, #64	@ 0x40
    } else if (clock > 31) {
        clock -= 32;
        return !(MXC_GCR->pclkdis1 & (0x1 << clock));
10013a62:	b2c0      	uxtb	r0, r0
    } else {
        return !(MXC_GCR->pclkdis0 & (0x1 << clock));
10013a64:	2301      	movs	r3, #1
10013a66:	4083      	lsls	r3, r0
10013a68:	4213      	tst	r3, r2
10013a6a:	bf0c      	ite	eq
10013a6c:	2001      	moveq	r0, #1
10013a6e:	2000      	movne	r0, #0
    }
}
10013a70:	4770      	bx	lr
    } else if (clock > 31) {
10013a72:	281f      	cmp	r0, #31
10013a74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
10013a78:	d902      	bls.n	10013a80 <MXC_SYS_IsClockEnabled+0x28>
        return !(MXC_GCR->pclkdis1 & (0x1 << clock));
10013a7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
        clock -= 32;
10013a7c:	3820      	subs	r0, #32
10013a7e:	e7f0      	b.n	10013a62 <MXC_SYS_IsClockEnabled+0xa>
        return !(MXC_GCR->pclkdis0 & (0x1 << clock));
10013a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10013a82:	e7ef      	b.n	10013a64 <MXC_SYS_IsClockEnabled+0xc>
10013a84:	40080000 	.word	0x40080000

10013a88 <MXC_SYS_ClockDisable>:

/* ************************************************************************** */
void MXC_SYS_ClockDisable(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
10013a88:	283f      	cmp	r0, #63	@ 0x3f
10013a8a:	d908      	bls.n	10013a9e <MXC_SYS_ClockDisable+0x16>
        clock -= 64;
        MXC_LPGCR->pclkdis |= (0x1 << clock);
10013a8c:	4a0d      	ldr	r2, [pc, #52]	@ (10013ac4 <MXC_SYS_ClockDisable+0x3c>)
        clock -= 64;
10013a8e:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->pclkdis |= (0x1 << clock);
10013a90:	68d1      	ldr	r1, [r2, #12]
10013a92:	b2c0      	uxtb	r0, r0
10013a94:	2301      	movs	r3, #1
10013a96:	4083      	lsls	r3, r0
10013a98:	430b      	orrs	r3, r1
10013a9a:	60d3      	str	r3, [r2, #12]
10013a9c:	4770      	bx	lr
    } else if (clock > 31) {
10013a9e:	281f      	cmp	r0, #31
10013aa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
10013aa4:	d907      	bls.n	10013ab6 <MXC_SYS_ClockDisable+0x2e>
        clock -= 32;
10013aa6:	3820      	subs	r0, #32
        MXC_GCR->pclkdis1 |= (0x1 << clock);
10013aa8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
10013aaa:	b2c0      	uxtb	r0, r0
10013aac:	2301      	movs	r3, #1
10013aae:	4083      	lsls	r3, r0
10013ab0:	430b      	orrs	r3, r1
10013ab2:	6493      	str	r3, [r2, #72]	@ 0x48
10013ab4:	4770      	bx	lr
    } else {
        MXC_GCR->pclkdis0 |= (0x1 << clock);
10013ab6:	6a51      	ldr	r1, [r2, #36]	@ 0x24
10013ab8:	2301      	movs	r3, #1
10013aba:	4083      	lsls	r3, r0
10013abc:	430b      	orrs	r3, r1
10013abe:	6253      	str	r3, [r2, #36]	@ 0x24
    }
}
10013ac0:	4770      	bx	lr
10013ac2:	bf00      	nop
10013ac4:	40080000 	.word	0x40080000

10013ac8 <MXC_SYS_ClockEnable>:

/* ************************************************************************** */
void MXC_SYS_ClockEnable(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
10013ac8:	283f      	cmp	r0, #63	@ 0x3f
10013aca:	d909      	bls.n	10013ae0 <MXC_SYS_ClockEnable+0x18>
        clock -= 64;
        MXC_LPGCR->pclkdis &= ~(0x1 << clock);
10013acc:	490e      	ldr	r1, [pc, #56]	@ (10013b08 <MXC_SYS_ClockEnable+0x40>)
        clock -= 64;
10013ace:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->pclkdis &= ~(0x1 << clock);
10013ad0:	68cb      	ldr	r3, [r1, #12]
10013ad2:	b2c0      	uxtb	r0, r0
10013ad4:	2201      	movs	r2, #1
10013ad6:	4082      	lsls	r2, r0
10013ad8:	ea23 0302 	bic.w	r3, r3, r2
10013adc:	60cb      	str	r3, [r1, #12]
10013ade:	4770      	bx	lr
    } else if (clock > 31) {
10013ae0:	281f      	cmp	r0, #31
10013ae2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
10013ae6:	d908      	bls.n	10013afa <MXC_SYS_ClockEnable+0x32>
        clock -= 32;
10013ae8:	3820      	subs	r0, #32
        MXC_GCR->pclkdis1 &= ~(0x1 << clock);
10013aea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10013aec:	b2c0      	uxtb	r0, r0
10013aee:	2101      	movs	r1, #1
10013af0:	4081      	lsls	r1, r0
10013af2:	ea22 0201 	bic.w	r2, r2, r1
10013af6:	649a      	str	r2, [r3, #72]	@ 0x48
10013af8:	4770      	bx	lr
    } else {
        MXC_GCR->pclkdis0 &= ~(0x1 << clock);
10013afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10013afc:	2101      	movs	r1, #1
10013afe:	4081      	lsls	r1, r0
10013b00:	ea22 0201 	bic.w	r2, r2, r1
10013b04:	625a      	str	r2, [r3, #36]	@ 0x24
    }
}
10013b06:	4770      	bx	lr
10013b08:	40080000 	.word	0x40080000

10013b0c <MXC_SYS_Clock_Timeout>:
    SystemCoreClockUpdate();
}

/* ************************************************************************** */
int MXC_SYS_Clock_Timeout(uint32_t ready)
{
10013b0c:	b538      	push	{r3, r4, r5, lr}
    // We do not have access to a system tick in the RV core.
    while (!(MXC_GCR->clkctrl & ready)) {}
    return E_NO_ERROR;
#else
    // Start timeout, wait for ready
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10013b0e:	2100      	movs	r1, #0
{
10013b10:	4604      	mov	r4, r0
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10013b12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10013b16:	f7ff fe5d 	bl	100137d4 <MXC_DelayAsync>

    do {
        if (MXC_GCR->clkctrl & ready) {
10013b1a:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
10013b1e:	68ab      	ldr	r3, [r5, #8]
10013b20:	4223      	tst	r3, r4
10013b22:	d003      	beq.n	10013b2c <MXC_SYS_Clock_Timeout+0x20>
            MXC_DelayAbort();
10013b24:	f7ff fe72 	bl	1001380c <MXC_DelayAbort>
            return E_NO_ERROR;
10013b28:	2000      	movs	r0, #0
        }
    } while (MXC_DelayCheck() == E_BUSY);

    return E_TIME_OUT;
#endif // __riscv
}
10013b2a:	bd38      	pop	{r3, r4, r5, pc}
    } while (MXC_DelayCheck() == E_BUSY);
10013b2c:	f7ff fe88 	bl	10013840 <MXC_DelayCheck>
10013b30:	3006      	adds	r0, #6
10013b32:	d0f4      	beq.n	10013b1e <MXC_SYS_Clock_Timeout+0x12>
    return E_TIME_OUT;
10013b34:	f06f 0009 	mvn.w	r0, #9
10013b38:	e7f7      	b.n	10013b2a <MXC_SYS_Clock_Timeout+0x1e>
	...

10013b3c <MXC_SYS_ClockSourceEnable>:
    switch (clock) {
10013b3c:	2807      	cmp	r0, #7
10013b3e:	d830      	bhi.n	10013ba2 <MXC_SYS_ClockSourceEnable+0x66>
10013b40:	e8df f000 	tbb	[pc, r0]
10013b44:	232f2f17 	.word	0x232f2f17
10013b48:	20260e04 	.word	0x20260e04
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IPO_EN;
10013b4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_IPO_RDY);
10013b50:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IPO_EN;
10013b54:	6893      	ldr	r3, [r2, #8]
10013b56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
10013b5a:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ERTCO_RDY);
10013b5c:	f7ff bfd6 	b.w	10013b0c <MXC_SYS_Clock_Timeout>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IBRO_EN;
10013b60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_IBRO_RDY);
10013b64:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IBRO_EN;
10013b68:	6893      	ldr	r3, [r2, #8]
10013b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10013b6e:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_IBRO_RDY);
10013b70:	e7f4      	b.n	10013b5c <MXC_SYS_ClockSourceEnable+0x20>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ISO_EN;
10013b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ISO_RDY);
10013b76:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ISO_EN;
10013b7a:	6893      	ldr	r3, [r2, #8]
10013b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
10013b80:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ISO_RDY);
10013b82:	e7eb      	b.n	10013b5c <MXC_SYS_ClockSourceEnable+0x20>
        return MXC_GPIO_Config(&gpio_cfg_extclk);
10013b84:	4808      	ldr	r0, [pc, #32]	@ (10013ba8 <MXC_SYS_ClockSourceEnable+0x6c>)
10013b86:	f000 bb57 	b.w	10014238 <MXC_GPIO_Config>
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_INRO_RDY);
10013b8a:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
10013b8e:	e7e5      	b.n	10013b5c <MXC_SYS_ClockSourceEnable+0x20>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ERTCO_EN;
10013b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ERTCO_RDY);
10013b94:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ERTCO_EN;
10013b98:	6893      	ldr	r3, [r2, #8]
10013b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10013b9e:	6093      	str	r3, [r2, #8]
        return MXC_SYS_Clock_Timeout(MXC_F_GCR_CLKCTRL_ERTCO_RDY);
10013ba0:	e7dc      	b.n	10013b5c <MXC_SYS_ClockSourceEnable+0x20>
}
10013ba2:	f06f 0002 	mvn.w	r0, #2
10013ba6:	4770      	bx	lr
10013ba8:	1002c124 	.word	0x1002c124

10013bac <MXC_SYS_Reset_Periph>:

/* ************************************************************************** */
void MXC_SYS_Reset_Periph(mxc_sys_reset_t reset)
{
    /* The mxc_sys_reset_t enum uses enum values that are the offset by 32 and 64 for the rst register. */
    if (reset > 63) {
10013bac:	283f      	cmp	r0, #63	@ 0x3f
10013bae:	f04f 0301 	mov.w	r3, #1
10013bb2:	d908      	bls.n	10013bc6 <MXC_SYS_Reset_Periph+0x1a>
        reset -= 64;
10013bb4:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->rst = (0x1 << reset);
10013bb6:	4a0e      	ldr	r2, [pc, #56]	@ (10013bf0 <MXC_SYS_Reset_Periph+0x44>)
10013bb8:	b2c0      	uxtb	r0, r0
10013bba:	4083      	lsls	r3, r0
10013bbc:	6093      	str	r3, [r2, #8]
        while (MXC_LPGCR->rst & (0x1 << reset)) {}
10013bbe:	6891      	ldr	r1, [r2, #8]
10013bc0:	420b      	tst	r3, r1
10013bc2:	d1fc      	bne.n	10013bbe <MXC_SYS_Reset_Periph+0x12>
10013bc4:	4770      	bx	lr
    } else if (reset > 31) {
10013bc6:	281f      	cmp	r0, #31
10013bc8:	d909      	bls.n	10013bde <MXC_SYS_Reset_Periph+0x32>
        reset -= 32;
10013bca:	3820      	subs	r0, #32
        MXC_GCR->rst1 = (0x1 << reset);
10013bcc:	b2c0      	uxtb	r0, r0
10013bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
10013bd2:	4083      	lsls	r3, r0
10013bd4:	6453      	str	r3, [r2, #68]	@ 0x44
        while (MXC_GCR->rst1 & (0x1 << reset)) {}
10013bd6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
10013bd8:	420b      	tst	r3, r1
10013bda:	d1fc      	bne.n	10013bd6 <MXC_SYS_Reset_Periph+0x2a>
10013bdc:	4770      	bx	lr
    } else {
        MXC_GCR->rst0 = (0x1 << reset);
10013bde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
10013be2:	4083      	lsls	r3, r0
10013be4:	6053      	str	r3, [r2, #4]
        while (MXC_GCR->rst0 & (0x1 << reset)) {}
10013be6:	6851      	ldr	r1, [r2, #4]
10013be8:	420b      	tst	r3, r1
10013bea:	d1fc      	bne.n	10013be6 <MXC_SYS_Reset_Periph+0x3a>
    }
}
10013bec:	4770      	bx	lr
10013bee:	bf00      	nop
10013bf0:	40080000 	.word	0x40080000

10013bf4 <MXC_DMA_Init>:
/******* Globals *******/

/****** Functions ******/

int MXC_DMA_Init(void)
{
10013bf4:	b510      	push	{r4, lr}
    if (!MXC_SYS_IsClockEnabled(MXC_SYS_PERIPH_CLOCK_DMA)) {
10013bf6:	2005      	movs	r0, #5
10013bf8:	f7ff ff2e 	bl	10013a58 <MXC_SYS_IsClockEnabled>
10013bfc:	4604      	mov	r4, r0
10013bfe:	b928      	cbnz	r0, 10013c0c <MXC_DMA_Init+0x18>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_DMA);
10013c00:	2005      	movs	r0, #5
10013c02:	f7ff ff61 	bl	10013ac8 <MXC_SYS_ClockEnable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_DMA);
10013c06:	4620      	mov	r0, r4
10013c08:	f7ff ffd0 	bl	10013bac <MXC_SYS_Reset_Periph>
    }

    return MXC_DMA_RevA_Init((mxc_dma_reva_regs_t *)MXC_DMA);
}
10013c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_DMA_RevA_Init((mxc_dma_reva_regs_t *)MXC_DMA);
10013c10:	4801      	ldr	r0, [pc, #4]	@ (10013c18 <MXC_DMA_Init+0x24>)
10013c12:	f000 b82b 	b.w	10013c6c <MXC_DMA_RevA_Init>
10013c16:	bf00      	nop
10013c18:	40028000 	.word	0x40028000

10013c1c <MXC_DMA_AcquireChannel>:
    return MXC_DMA_RevA_DeInit((mxc_dma_reva_regs_t *)MXC_DMA);
}

int MXC_DMA_AcquireChannel(void)
{
    return MXC_DMA_RevA_AcquireChannel((mxc_dma_reva_regs_t *)MXC_DMA);
10013c1c:	4801      	ldr	r0, [pc, #4]	@ (10013c24 <MXC_DMA_AcquireChannel+0x8>)
10013c1e:	f000 b86b 	b.w	10013cf8 <MXC_DMA_RevA_AcquireChannel>
10013c22:	bf00      	nop
10013c24:	40028000 	.word	0x40028000

10013c28 <MXC_DMA_ReleaseChannel>:
}

int MXC_DMA_ReleaseChannel(int ch)
{
    return MXC_DMA_RevA_ReleaseChannel(ch);
10013c28:	f000 b89c 	b.w	10013d64 <MXC_DMA_RevA_ReleaseChannel>

10013c2c <MXC_DMA_ConfigChannel>:
}

int MXC_DMA_ConfigChannel(mxc_dma_config_t config, mxc_dma_srcdst_t srcdst)
{
10013c2c:	b410      	push	{r4}
10013c2e:	b085      	sub	sp, #20
10013c30:	466c      	mov	r4, sp
10013c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return MXC_DMA_RevA_ConfigChannel(config, srcdst);
10013c36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
}
10013c3a:	b005      	add	sp, #20
10013c3c:	bc10      	pop	{r4}
    return MXC_DMA_RevA_ConfigChannel(config, srcdst);
10013c3e:	f000 b8d3 	b.w	10013de8 <MXC_DMA_RevA_ConfigChannel>

10013c42 <MXC_DMA_SetCallback>:
    return MXC_DMA_RevA_GetSrcReload(srcdst);
}

int MXC_DMA_SetCallback(int ch, void (*callback)(int, int))
{
    return MXC_DMA_RevA_SetCallback(ch, callback);
10013c42:	f000 b903 	b.w	10013e4c <MXC_DMA_RevA_SetCallback>

10013c46 <MXC_DMA_SetChannelInterruptEn>:
}

int MXC_DMA_SetChannelInterruptEn(int ch, bool chdis, bool ctz)
{
    return MXC_DMA_RevA_SetChannelInterruptEn(ch, chdis, ctz);
10013c46:	f000 b911 	b.w	10013e6c <MXC_DMA_RevA_SetChannelInterruptEn>

10013c4a <MXC_DMA_ChannelClearFlags>:
    return MXC_DMA_RevA_ChannelGetFlags(ch);
}

int MXC_DMA_ChannelClearFlags(int ch, int flags)
{
    return MXC_DMA_RevA_ChannelClearFlags(ch, flags);
10013c4a:	f000 b953 	b.w	10013ef4 <MXC_DMA_RevA_ChannelClearFlags>
	...

10013c50 <MXC_DMA_EnableInt>:
}

int MXC_DMA_EnableInt(int ch)
{
10013c50:	4601      	mov	r1, r0
    return MXC_DMA_RevA_EnableInt((mxc_dma_reva_regs_t *)MXC_DMA, ch);
10013c52:	4801      	ldr	r0, [pc, #4]	@ (10013c58 <MXC_DMA_EnableInt+0x8>)
10013c54:	f000 b92a 	b.w	10013eac <MXC_DMA_RevA_EnableInt>
10013c58:	40028000 	.word	0x40028000

10013c5c <MXC_DMA_Start>:
    return MXC_DMA_RevA_DisableInt((mxc_dma_reva_regs_t *)MXC_DMA, ch);
}

int MXC_DMA_Start(int ch)
{
    return MXC_DMA_RevA_Start(ch);
10013c5c:	f000 b960 	b.w	10013f20 <MXC_DMA_RevA_Start>

10013c60 <MXC_DMA_Handler>:
    return MXC_DMA_RevA_GetCHRegs(ch);
}

void MXC_DMA_Handler(void)
{
    MXC_DMA_RevA_Handler((mxc_dma_reva_regs_t *)MXC_DMA);
10013c60:	4801      	ldr	r0, [pc, #4]	@ (10013c68 <MXC_DMA_Handler+0x8>)
10013c62:	f000 b97f 	b.w	10013f64 <MXC_DMA_RevA_Handler>
10013c66:	bf00      	nop
10013c68:	40028000 	.word	0x40028000

10013c6c <MXC_DMA_RevA_Init>:
/****** Functions ******/
static void memcpy_callback(int ch, int error);
static void transfer_callback(int ch, int error);

int MXC_DMA_RevA_Init(mxc_dma_reva_regs_t *dma)
{
10013c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else
    numCh = MXC_DMA_CHANNELS;
    offset = 0;
#endif

    if (dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]) {
10013c6e:	4e1e      	ldr	r6, [pc, #120]	@ (10013ce8 <MXC_DMA_RevA_Init+0x7c>)
10013c70:	4f1e      	ldr	r7, [pc, #120]	@ (10013cec <MXC_DMA_RevA_Init+0x80>)
10013c72:	1b86      	subs	r6, r0, r6
10013c74:	bf18      	it	ne
10013c76:	f04f 36ff 	movne.w	r6, #4294967295	@ 0xffffffff
{
10013c7a:	4605      	mov	r5, r0
    if (dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]) {
10013c7c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
10013c80:	bb63      	cbnz	r3, 10013cdc <MXC_DMA_RevA_Init+0x70>
        return E_BAD_STATE;
    }

#ifndef __riscv
    /* Initialize mutex */
    MXC_FreeLock(&dma_lock);
10013c82:	481b      	ldr	r0, [pc, #108]	@ (10013cf0 <MXC_DMA_RevA_Init+0x84>)
10013c84:	f001 fcf6 	bl	10015674 <MXC_FreeLock>

    if (MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10013c88:	4819      	ldr	r0, [pc, #100]	@ (10013cf0 <MXC_DMA_RevA_Init+0x84>)
10013c8a:	2101      	movs	r1, #1
10013c8c:	f001 fce4 	bl	10015658 <MXC_GetLock>
10013c90:	4604      	mov	r4, r0
10013c92:	bb30      	cbnz	r0, 10013ce2 <MXC_DMA_RevA_Init+0x76>
        return E_BUSY;
    }
#endif

    /* Ensure all channels are disabled at start, clear flags, init handles */
    dma->inten = 0;
10013c94:	4b17      	ldr	r3, [pc, #92]	@ (10013cf4 <MXC_DMA_RevA_Init+0x88>)
10013c96:	6028      	str	r0, [r5, #0]

    for (i = offset; i < (offset + numCh); i++) {
10013c98:	4622      	mov	r2, r4
10013c9a:	f505 7080 	add.w	r0, r5, #256	@ 0x100
        dma_resource[i].valid = 0;
10013c9e:	4621      	mov	r1, r4
10013ca0:	eb05 1c42 	add.w	ip, r5, r2, lsl #5
        dma_resource[i].instance = 0;
        dma_resource[i].id = i;
        dma_resource[i].regs = (mxc_dma_reva_ch_regs_t *)&(dma->ch[(i % numCh)]);
10013ca4:	e9c3 2002 	strd	r2, r0, [r3, #8]
        dma_resource[i].instance = 0;
10013ca8:	e9c3 1100 	strd	r1, r1, [r3]
    for (i = offset; i < (offset + numCh); i++) {
10013cac:	3201      	adds	r2, #1
        dma_resource[i].regs->ctrl = 0;
10013cae:	f8cc 1100 	str.w	r1, [ip, #256]	@ 0x100
        dma_resource[i].regs->status = dma_resource[i].regs->status;
10013cb2:	f8dc e104 	ldr.w	lr, [ip, #260]	@ 0x104
10013cb6:	f8cc e104 	str.w	lr, [ip, #260]	@ 0x104
    for (i = offset; i < (offset + numCh); i++) {
10013cba:	2a10      	cmp	r2, #16

        dma_resource[i].cb = NULL;
10013cbc:	6119      	str	r1, [r3, #16]
    for (i = offset; i < (offset + numCh); i++) {
10013cbe:	f100 0020 	add.w	r0, r0, #32
10013cc2:	f103 0314 	add.w	r3, r3, #20
10013cc6:	d1eb      	bne.n	10013ca0 <MXC_DMA_RevA_Init+0x34>
    }

    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]++;
10013cc8:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
#ifndef __riscv
    MXC_FreeLock(&dma_lock);
10013ccc:	4808      	ldr	r0, [pc, #32]	@ (10013cf0 <MXC_DMA_RevA_Init+0x84>)
    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]++;
10013cce:	3301      	adds	r3, #1
10013cd0:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    MXC_FreeLock(&dma_lock);
10013cd4:	f001 fcce 	bl	10015674 <MXC_FreeLock>
#endif

    return E_NO_ERROR;
}
10013cd8:	4620      	mov	r0, r4
10013cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return E_BAD_STATE;
10013cdc:	f06f 0406 	mvn.w	r4, #6
10013ce0:	e7fa      	b.n	10013cd8 <MXC_DMA_RevA_Init+0x6c>
        return E_BUSY;
10013ce2:	f06f 0405 	mvn.w	r4, #5
10013ce6:	e7f7      	b.n	10013cd8 <MXC_DMA_RevA_Init+0x6c>
10013ce8:	40028000 	.word	0x40028000
10013cec:	20001124 	.word	0x20001124
10013cf0:	20000fe0 	.word	0x20000fe0
10013cf4:	20000fe4 	.word	0x20000fe4

10013cf8 <MXC_DMA_RevA_AcquireChannel>:
{
    dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)] = 0;
}

int MXC_DMA_RevA_AcquireChannel(mxc_dma_reva_regs_t *dma)
{
10013cf8:	b538      	push	{r3, r4, r5, lr}
    int i, channel, numCh, offset;

    /* Check for initialization */
    if (!dma_initialized[MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma)]) {
10013cfa:	4b16      	ldr	r3, [pc, #88]	@ (10013d54 <MXC_DMA_RevA_AcquireChannel+0x5c>)
10013cfc:	1ac0      	subs	r0, r0, r3
10013cfe:	bf18      	it	ne
10013d00:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
10013d04:	4b14      	ldr	r3, [pc, #80]	@ (10013d58 <MXC_DMA_RevA_AcquireChannel+0x60>)
10013d06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
10013d0a:	b1e3      	cbz	r3, 10013d46 <MXC_DMA_RevA_AcquireChannel+0x4e>
    offset = 0;
#endif

#ifndef __riscv
    /* If DMA is locked return busy */
    if (MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10013d0c:	4813      	ldr	r0, [pc, #76]	@ (10013d5c <MXC_DMA_RevA_AcquireChannel+0x64>)
10013d0e:	2101      	movs	r1, #1
10013d10:	f001 fca2 	bl	10015658 <MXC_GetLock>
10013d14:	4604      	mov	r4, r0
10013d16:	b9c8      	cbnz	r0, 10013d4c <MXC_DMA_RevA_AcquireChannel+0x54>
#endif
    /* Default is no channel available */
    channel = E_NONE_AVAIL;

    for (i = offset; i < (offset + numCh); i++) {
        if (!dma_resource[i].valid) {
10013d18:	4b11      	ldr	r3, [pc, #68]	@ (10013d60 <MXC_DMA_RevA_AcquireChannel+0x68>)
10013d1a:	2014      	movs	r0, #20
10013d1c:	fb00 f104 	mul.w	r1, r0, r4
10013d20:	18cd      	adds	r5, r1, r3
10013d22:	585a      	ldr	r2, [r3, r1]
10013d24:	b94a      	cbnz	r2, 10013d3a <MXC_DMA_RevA_AcquireChannel+0x42>
            /* Found one */
            channel = i;
            dma_resource[i].valid = 1;
10013d26:	2001      	movs	r0, #1
10013d28:	5058      	str	r0, [r3, r1]
            dma_resource[i].regs->ctrl = 0;
10013d2a:	68eb      	ldr	r3, [r5, #12]
10013d2c:	601a      	str	r2, [r3, #0]
            dma_resource[i].regs->cntrld = 0; /* Used by DMA_Start() to conditionally set RLDEN */
10013d2e:	61da      	str	r2, [r3, #28]
            break;
        }
    }
#ifndef __riscv
    MXC_FreeLock(&dma_lock);
10013d30:	480a      	ldr	r0, [pc, #40]	@ (10013d5c <MXC_DMA_RevA_AcquireChannel+0x64>)
10013d32:	f001 fc9f 	bl	10015674 <MXC_FreeLock>
#endif

    return channel;
}
10013d36:	4620      	mov	r0, r4
10013d38:	bd38      	pop	{r3, r4, r5, pc}
    for (i = offset; i < (offset + numCh); i++) {
10013d3a:	3401      	adds	r4, #1
10013d3c:	2c10      	cmp	r4, #16
10013d3e:	d1ed      	bne.n	10013d1c <MXC_DMA_RevA_AcquireChannel+0x24>
    channel = E_NONE_AVAIL;
10013d40:	f06f 040d 	mvn.w	r4, #13
10013d44:	e7f4      	b.n	10013d30 <MXC_DMA_RevA_AcquireChannel+0x38>
        return E_BAD_STATE;
10013d46:	f06f 0406 	mvn.w	r4, #6
10013d4a:	e7f4      	b.n	10013d36 <MXC_DMA_RevA_AcquireChannel+0x3e>
        return E_BUSY;
10013d4c:	f06f 0405 	mvn.w	r4, #5
10013d50:	e7f1      	b.n	10013d36 <MXC_DMA_RevA_AcquireChannel+0x3e>
10013d52:	bf00      	nop
10013d54:	40028000 	.word	0x40028000
10013d58:	20001124 	.word	0x20001124
10013d5c:	20000fe0 	.word	0x20000fe0
10013d60:	20000fe4 	.word	0x20000fe4

10013d64 <MXC_DMA_RevA_ReleaseChannel>:

int MXC_DMA_RevA_ReleaseChannel(int ch)
{
    if (CHECK_HANDLE(ch)) {
10013d64:	280f      	cmp	r0, #15
{
10013d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (CHECK_HANDLE(ch)) {
10013d68:	d816      	bhi.n	10013d98 <MXC_DMA_RevA_ReleaseChannel+0x34>
10013d6a:	2314      	movs	r3, #20
10013d6c:	4e0d      	ldr	r6, [pc, #52]	@ (10013da4 <MXC_DMA_RevA_ReleaseChannel+0x40>)
10013d6e:	fb03 f500 	mul.w	r5, r3, r0
10013d72:	1977      	adds	r7, r6, r5
10013d74:	5973      	ldr	r3, [r6, r5]
10013d76:	b17b      	cbz	r3, 10013d98 <MXC_DMA_RevA_ReleaseChannel+0x34>
        if (MXC_GetLock(&dma_lock, 1) != E_NO_ERROR) {
10013d78:	480b      	ldr	r0, [pc, #44]	@ (10013da8 <MXC_DMA_RevA_ReleaseChannel+0x44>)
10013d7a:	2101      	movs	r1, #1
10013d7c:	f001 fc6c 	bl	10015658 <MXC_GetLock>
10013d80:	4604      	mov	r4, r0
10013d82:	b960      	cbnz	r0, 10013d9e <MXC_DMA_RevA_ReleaseChannel+0x3a>
            return E_BUSY;
        }

        dma_resource[ch].valid = 0;
        dma_resource[ch].regs->ctrl = 0;
10013d84:	68fb      	ldr	r3, [r7, #12]
        dma_resource[ch].valid = 0;
10013d86:	5170      	str	r0, [r6, r5]
        dma_resource[ch].regs->ctrl = 0;
10013d88:	6018      	str	r0, [r3, #0]
        dma_resource[ch].regs->status = dma_resource[ch].regs->status;
10013d8a:	685a      	ldr	r2, [r3, #4]
        MXC_FreeLock(&dma_lock);
10013d8c:	4806      	ldr	r0, [pc, #24]	@ (10013da8 <MXC_DMA_RevA_ReleaseChannel+0x44>)
        dma_resource[ch].regs->status = dma_resource[ch].regs->status;
10013d8e:	605a      	str	r2, [r3, #4]
        MXC_FreeLock(&dma_lock);
10013d90:	f001 fc70 	bl	10015674 <MXC_FreeLock>
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
}
10013d94:	4620      	mov	r0, r4
10013d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return E_BAD_PARAM;
10013d98:	f06f 0402 	mvn.w	r4, #2
10013d9c:	e7fa      	b.n	10013d94 <MXC_DMA_RevA_ReleaseChannel+0x30>
            return E_BUSY;
10013d9e:	f06f 0405 	mvn.w	r4, #5
10013da2:	e7f7      	b.n	10013d94 <MXC_DMA_RevA_ReleaseChannel+0x30>
10013da4:	20000fe4 	.word	0x20000fe4
10013da8:	20000fe0 	.word	0x20000fe0

10013dac <MXC_DMA_RevA_SetSrcDst>:

    return E_NO_ERROR;
}

int MXC_DMA_RevA_SetSrcDst(mxc_dma_srcdst_t srcdst)
{
10013dac:	b084      	sub	sp, #16
10013dae:	f10d 0c10 	add.w	ip, sp, #16
    if (CHECK_HANDLE(srcdst.ch)) {
10013db2:	280f      	cmp	r0, #15
{
10013db4:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
10013db8:	4603      	mov	r3, r0
    if (CHECK_HANDLE(srcdst.ch)) {
10013dba:	d80f      	bhi.n	10013ddc <MXC_DMA_RevA_SetSrcDst+0x30>
10013dbc:	2114      	movs	r1, #20
10013dbe:	4a09      	ldr	r2, [pc, #36]	@ (10013de4 <MXC_DMA_RevA_SetSrcDst+0x38>)
10013dc0:	434b      	muls	r3, r1
10013dc2:	18d1      	adds	r1, r2, r3
10013dc4:	58d3      	ldr	r3, [r2, r3]
10013dc6:	b14b      	cbz	r3, 10013ddc <MXC_DMA_RevA_SetSrcDst+0x30>
        dma_resource[srcdst.ch].regs->src = (unsigned int)srcdst.source;
10013dc8:	68cb      	ldr	r3, [r1, #12]
10013dca:	9a01      	ldr	r2, [sp, #4]
10013dcc:	609a      	str	r2, [r3, #8]
        dma_resource[srcdst.ch].regs->dst = (unsigned int)srcdst.dest;
10013dce:	9a02      	ldr	r2, [sp, #8]
10013dd0:	60da      	str	r2, [r3, #12]
        dma_resource[srcdst.ch].regs->cnt = srcdst.len;
10013dd2:	9a03      	ldr	r2, [sp, #12]
10013dd4:	611a      	str	r2, [r3, #16]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013dd6:	2000      	movs	r0, #0
}
10013dd8:	b004      	add	sp, #16
10013dda:	4770      	bx	lr
        return E_BAD_PARAM;
10013ddc:	f06f 0002 	mvn.w	r0, #2
10013de0:	e7fa      	b.n	10013dd8 <MXC_DMA_RevA_SetSrcDst+0x2c>
10013de2:	bf00      	nop
10013de4:	20000fe4 	.word	0x20000fe4

10013de8 <MXC_DMA_RevA_ConfigChannel>:
{
10013de8:	b084      	sub	sp, #16
10013dea:	f10d 0c10 	add.w	ip, sp, #16
    if (CHECK_HANDLE(config.ch)) {
10013dee:	280f      	cmp	r0, #15
{
10013df0:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
10013df4:	4603      	mov	r3, r0
    if (CHECK_HANDLE(config.ch)) {
10013df6:	d822      	bhi.n	10013e3e <MXC_DMA_RevA_ConfigChannel+0x56>
10013df8:	2114      	movs	r1, #20
10013dfa:	4a13      	ldr	r2, [pc, #76]	@ (10013e48 <MXC_DMA_RevA_ConfigChannel+0x60>)
10013dfc:	434b      	muls	r3, r1
10013dfe:	18d1      	adds	r1, r2, r3
10013e00:	58d3      	ldr	r3, [r2, r3]
10013e02:	b1e3      	cbz	r3, 10013e3e <MXC_DMA_RevA_ConfigChannel+0x56>
             (config.dstwd << MXC_F_DMA_REVA_CTRL_DSTWD_POS));
10013e04:	f89d 3007 	ldrb.w	r3, [sp, #7]
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10013e08:	f89d 2006 	ldrb.w	r2, [sp, #6]
        dma_resource[config.ch].regs->ctrl =
10013e0c:	68c9      	ldr	r1, [r1, #12]
             (config.dstwd << MXC_F_DMA_REVA_CTRL_DSTWD_POS));
10013e0e:	051b      	lsls	r3, r3, #20
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10013e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             (config.dstinc_en ? MXC_F_DMA_REVA_CTRL_DSTINC : 0) | config.reqsel |
10013e14:	f8bd 2004 	ldrh.w	r2, [sp, #4]
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10013e18:	4313      	orrs	r3, r2
            ((config.srcinc_en ? MXC_F_DMA_REVA_CTRL_SRCINC : 0) |
10013e1a:	9a02      	ldr	r2, [sp, #8]
10013e1c:	3a00      	subs	r2, #0
10013e1e:	bf18      	it	ne
10013e20:	2201      	movne	r2, #1
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10013e22:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
             (config.dstinc_en ? MXC_F_DMA_REVA_CTRL_DSTINC : 0) | config.reqsel |
10013e26:	9a03      	ldr	r2, [sp, #12]
10013e28:	3a00      	subs	r2, #0
10013e2a:	bf18      	it	ne
10013e2c:	2201      	movne	r2, #1
             (config.srcwd << MXC_F_DMA_REVA_CTRL_SRCWD_POS) |
10013e2e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
        dma_resource[config.ch].regs->ctrl =
10013e32:	600b      	str	r3, [r1, #0]
    return MXC_DMA_RevA_SetSrcDst(srcdst);
10013e34:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
}
10013e38:	b004      	add	sp, #16
    return MXC_DMA_RevA_SetSrcDst(srcdst);
10013e3a:	f7ff bfb7 	b.w	10013dac <MXC_DMA_RevA_SetSrcDst>
}
10013e3e:	f06f 0002 	mvn.w	r0, #2
10013e42:	b004      	add	sp, #16
10013e44:	4770      	bx	lr
10013e46:	bf00      	nop
10013e48:	20000fe4 	.word	0x20000fe4

10013e4c <MXC_DMA_RevA_SetCallback>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_SetCallback(int ch, void (*callback)(int, int))
{
    if (CHECK_HANDLE(ch)) {
10013e4c:	280f      	cmp	r0, #15
10013e4e:	d808      	bhi.n	10013e62 <MXC_DMA_RevA_SetCallback+0x16>
10013e50:	2214      	movs	r2, #20
10013e52:	4b05      	ldr	r3, [pc, #20]	@ (10013e68 <MXC_DMA_RevA_SetCallback+0x1c>)
10013e54:	4350      	muls	r0, r2
10013e56:	181a      	adds	r2, r3, r0
10013e58:	581b      	ldr	r3, [r3, r0]
10013e5a:	b113      	cbz	r3, 10013e62 <MXC_DMA_RevA_SetCallback+0x16>
        /* Callback for interrupt handler, no checking is done, as NULL is valid for(none)  */
        dma_resource[ch].cb = callback;
10013e5c:	6111      	str	r1, [r2, #16]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013e5e:	2000      	movs	r0, #0
10013e60:	4770      	bx	lr
        return E_BAD_PARAM;
10013e62:	f06f 0002 	mvn.w	r0, #2
}
10013e66:	4770      	bx	lr
10013e68:	20000fe4 	.word	0x20000fe4

10013e6c <MXC_DMA_RevA_SetChannelInterruptEn>:

int MXC_DMA_RevA_SetChannelInterruptEn(int ch, bool chdis, bool ctz)
{
    if (CHECK_HANDLE(ch)) {
10013e6c:	280f      	cmp	r0, #15
{
10013e6e:	b530      	push	{r4, r5, lr}
    if (CHECK_HANDLE(ch)) {
10013e70:	d817      	bhi.n	10013ea2 <MXC_DMA_RevA_SetChannelInterruptEn+0x36>
10013e72:	2414      	movs	r4, #20
10013e74:	4b0c      	ldr	r3, [pc, #48]	@ (10013ea8 <MXC_DMA_RevA_SetChannelInterruptEn+0x3c>)
10013e76:	4344      	muls	r4, r0
10013e78:	191d      	adds	r5, r3, r4
10013e7a:	591c      	ldr	r4, [r3, r4]
10013e7c:	b18c      	cbz	r4, 10013ea2 <MXC_DMA_RevA_SetChannelInterruptEn+0x36>
        if (chdis) {
10013e7e:	b121      	cbz	r1, 10013e8a <MXC_DMA_RevA_SetChannelInterruptEn+0x1e>
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_DIS_IE);
10013e80:	68ec      	ldr	r4, [r5, #12]
10013e82:	6821      	ldr	r1, [r4, #0]
10013e84:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
10013e88:	6021      	str	r1, [r4, #0]
        }
        if (ctz) {
10013e8a:	b90a      	cbnz	r2, 10013e90 <MXC_DMA_RevA_SetChannelInterruptEn+0x24>
        }
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013e8c:	2000      	movs	r0, #0
}
10013e8e:	bd30      	pop	{r4, r5, pc}
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_CTZ_IE);
10013e90:	2214      	movs	r2, #20
10013e92:	fb02 3300 	mla	r3, r2, r0, r3
10013e96:	68da      	ldr	r2, [r3, #12]
10013e98:	6813      	ldr	r3, [r2, #0]
10013e9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10013e9e:	6013      	str	r3, [r2, #0]
10013ea0:	e7f4      	b.n	10013e8c <MXC_DMA_RevA_SetChannelInterruptEn+0x20>
        return E_BAD_PARAM;
10013ea2:	f06f 0002 	mvn.w	r0, #2
10013ea6:	e7f2      	b.n	10013e8e <MXC_DMA_RevA_SetChannelInterruptEn+0x22>
10013ea8:	20000fe4 	.word	0x20000fe4

10013eac <MXC_DMA_RevA_EnableInt>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_EnableInt(mxc_dma_reva_regs_t *dma, int ch)
{
    if (CHECK_HANDLE(ch)) {
10013eac:	290f      	cmp	r1, #15
10013eae:	d80b      	bhi.n	10013ec8 <MXC_DMA_RevA_EnableInt+0x1c>
10013eb0:	2314      	movs	r3, #20
10013eb2:	4a07      	ldr	r2, [pc, #28]	@ (10013ed0 <MXC_DMA_RevA_EnableInt+0x24>)
10013eb4:	434b      	muls	r3, r1
10013eb6:	58d3      	ldr	r3, [r2, r3]
10013eb8:	b133      	cbz	r3, 10013ec8 <MXC_DMA_RevA_EnableInt+0x1c>
#if TARGET_NUM == 32665
        ch %= MXC_DMA_CH_OFFSET;
#endif
        dma->inten |= (1 << ch);
10013eba:	6802      	ldr	r2, [r0, #0]
10013ebc:	2301      	movs	r3, #1
10013ebe:	408b      	lsls	r3, r1
10013ec0:	4313      	orrs	r3, r2
10013ec2:	6003      	str	r3, [r0, #0]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013ec4:	2000      	movs	r0, #0
10013ec6:	4770      	bx	lr
        return E_BAD_PARAM;
10013ec8:	f06f 0002 	mvn.w	r0, #2
}
10013ecc:	4770      	bx	lr
10013ece:	bf00      	nop
10013ed0:	20000fe4 	.word	0x20000fe4

10013ed4 <MXC_DMA_RevA_ChannelGetFlags>:
    return E_NO_ERROR;
}

int MXC_DMA_RevA_ChannelGetFlags(int ch)
{
    if (CHECK_HANDLE(ch)) {
10013ed4:	280f      	cmp	r0, #15
10013ed6:	d808      	bhi.n	10013eea <MXC_DMA_RevA_ChannelGetFlags+0x16>
10013ed8:	2214      	movs	r2, #20
10013eda:	4b05      	ldr	r3, [pc, #20]	@ (10013ef0 <MXC_DMA_RevA_ChannelGetFlags+0x1c>)
10013edc:	4350      	muls	r0, r2
10013ede:	181a      	adds	r2, r3, r0
10013ee0:	581b      	ldr	r3, [r3, r0]
10013ee2:	b113      	cbz	r3, 10013eea <MXC_DMA_RevA_ChannelGetFlags+0x16>
        return dma_resource[ch].regs->status;
10013ee4:	68d3      	ldr	r3, [r2, #12]
10013ee6:	6858      	ldr	r0, [r3, #4]
10013ee8:	4770      	bx	lr
    } else {
        return E_BAD_PARAM;
10013eea:	f06f 0002 	mvn.w	r0, #2
    }

    return E_NO_ERROR;
}
10013eee:	4770      	bx	lr
10013ef0:	20000fe4 	.word	0x20000fe4

10013ef4 <MXC_DMA_RevA_ChannelClearFlags>:

int MXC_DMA_RevA_ChannelClearFlags(int ch, int flags)
{
    if (CHECK_HANDLE(ch)) {
10013ef4:	280f      	cmp	r0, #15
10013ef6:	d80d      	bhi.n	10013f14 <MXC_DMA_RevA_ChannelClearFlags+0x20>
10013ef8:	2214      	movs	r2, #20
10013efa:	4b08      	ldr	r3, [pc, #32]	@ (10013f1c <MXC_DMA_RevA_ChannelClearFlags+0x28>)
10013efc:	4350      	muls	r0, r2
10013efe:	181a      	adds	r2, r3, r0
10013f00:	581b      	ldr	r3, [r3, r0]
10013f02:	b13b      	cbz	r3, 10013f14 <MXC_DMA_RevA_ChannelClearFlags+0x20>
        dma_resource[ch].regs->status |= (flags & 0x5F); // Mask for Interrupt flags
10013f04:	68d3      	ldr	r3, [r2, #12]
10013f06:	685a      	ldr	r2, [r3, #4]
10013f08:	f001 015f 	and.w	r1, r1, #95	@ 0x5f
10013f0c:	4311      	orrs	r1, r2
10013f0e:	6059      	str	r1, [r3, #4]
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013f10:	2000      	movs	r0, #0
10013f12:	4770      	bx	lr
        return E_BAD_PARAM;
10013f14:	f06f 0002 	mvn.w	r0, #2
}
10013f18:	4770      	bx	lr
10013f1a:	bf00      	nop
10013f1c:	20000fe4 	.word	0x20000fe4

10013f20 <MXC_DMA_RevA_Start>:

int MXC_DMA_RevA_Start(int ch)
{
    if (CHECK_HANDLE(ch)) {
10013f20:	280f      	cmp	r0, #15
{
10013f22:	b538      	push	{r3, r4, r5, lr}
10013f24:	4604      	mov	r4, r0
    if (CHECK_HANDLE(ch)) {
10013f26:	d818      	bhi.n	10013f5a <MXC_DMA_RevA_Start+0x3a>
10013f28:	2314      	movs	r3, #20
10013f2a:	4a0d      	ldr	r2, [pc, #52]	@ (10013f60 <MXC_DMA_RevA_Start+0x40>)
10013f2c:	4343      	muls	r3, r0
10013f2e:	18d5      	adds	r5, r2, r3
10013f30:	58d3      	ldr	r3, [r2, r3]
10013f32:	b193      	cbz	r3, 10013f5a <MXC_DMA_RevA_Start+0x3a>
        MXC_DMA_ChannelClearFlags(ch, MXC_DMA_RevA_ChannelGetFlags(ch));
10013f34:	f7ff ffce 	bl	10013ed4 <MXC_DMA_RevA_ChannelGetFlags>
10013f38:	4601      	mov	r1, r0
10013f3a:	4620      	mov	r0, r4
10013f3c:	f7ff fe85 	bl	10013c4a <MXC_DMA_ChannelClearFlags>

        if (dma_resource[ch].regs->cntrld) {
10013f40:	68eb      	ldr	r3, [r5, #12]
10013f42:	69da      	ldr	r2, [r3, #28]
10013f44:	b12a      	cbz	r2, 10013f52 <MXC_DMA_RevA_Start+0x32>
            dma_resource[ch].regs->ctrl |= (MXC_F_DMA_REVA_CTRL_EN | MXC_F_DMA_REVA_CTRL_RLDEN);
10013f46:	681a      	ldr	r2, [r3, #0]
10013f48:	f042 0203 	orr.w	r2, r2, #3
10013f4c:	601a      	str	r2, [r3, #0]
        }
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013f4e:	2000      	movs	r0, #0
}
10013f50:	bd38      	pop	{r3, r4, r5, pc}
            dma_resource[ch].regs->ctrl |= MXC_F_DMA_REVA_CTRL_EN;
10013f52:	681a      	ldr	r2, [r3, #0]
10013f54:	f042 0201 	orr.w	r2, r2, #1
10013f58:	e7f8      	b.n	10013f4c <MXC_DMA_RevA_Start+0x2c>
        return E_BAD_PARAM;
10013f5a:	f06f 0002 	mvn.w	r0, #2
10013f5e:	e7f7      	b.n	10013f50 <MXC_DMA_RevA_Start+0x30>
10013f60:	20000fe4 	.word	0x20000fe4

10013f64 <MXC_DMA_RevA_Handler>:
        return NULL;
    }
}

void MXC_DMA_RevA_Handler(mxc_dma_reva_regs_t *dma)
{
10013f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int numCh = MXC_DMA_CHANNELS / MXC_DMA_INSTANCES;
    int offset = numCh * MXC_DMA_GET_IDX((mxc_dma_regs_t *)dma);
10013f68:	4c18      	ldr	r4, [pc, #96]	@ (10013fcc <MXC_DMA_RevA_Handler+0x68>)
10013f6a:	4d19      	ldr	r5, [pc, #100]	@ (10013fd0 <MXC_DMA_RevA_Handler+0x6c>)
10013f6c:	1b04      	subs	r4, r0, r4
10013f6e:	f06f 030f 	mvn.w	r3, #15
10013f72:	bf18      	it	ne
10013f74:	2401      	movne	r4, #1
10013f76:	435c      	muls	r4, r3
    /* Do callback, if enabled */
    for (int i = offset; i < (offset + numCh); i++) {
10013f78:	2314      	movs	r3, #20
{
10013f7a:	4606      	mov	r6, r0
    for (int i = offset; i < (offset + numCh); i++) {
10013f7c:	f104 0710 	add.w	r7, r4, #16
10013f80:	fb03 5504 	mla	r5, r3, r4, r5
        if (CHECK_HANDLE(i)) {
            if (dma->intfl & (0x1 << (i % numCh))) {
10013f84:	f04f 0801 	mov.w	r8, #1
        if (CHECK_HANDLE(i)) {
10013f88:	2c0f      	cmp	r4, #15
10013f8a:	d906      	bls.n	10013f9a <MXC_DMA_RevA_Handler+0x36>
    for (int i = offset; i < (offset + numCh); i++) {
10013f8c:	3401      	adds	r4, #1
10013f8e:	42bc      	cmp	r4, r7
10013f90:	f105 0514 	add.w	r5, r5, #20
10013f94:	d1f8      	bne.n	10013f88 <MXC_DMA_RevA_Handler+0x24>
                    break;
                }
            }
        }
    }
}
10013f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (CHECK_HANDLE(i)) {
10013f9a:	682b      	ldr	r3, [r5, #0]
10013f9c:	2b00      	cmp	r3, #0
10013f9e:	d0f5      	beq.n	10013f8c <MXC_DMA_RevA_Handler+0x28>
            if (dma->intfl & (0x1 << (i % numCh))) {
10013fa0:	6873      	ldr	r3, [r6, #4]
10013fa2:	fa08 f204 	lsl.w	r2, r8, r4
10013fa6:	421a      	tst	r2, r3
10013fa8:	d0f0      	beq.n	10013f8c <MXC_DMA_RevA_Handler+0x28>
                if (dma_resource[i].cb != NULL) {
10013faa:	692b      	ldr	r3, [r5, #16]
10013fac:	b113      	cbz	r3, 10013fb4 <MXC_DMA_RevA_Handler+0x50>
                    dma_resource[i].cb(i, E_NO_ERROR);
10013fae:	2100      	movs	r1, #0
10013fb0:	4620      	mov	r0, r4
10013fb2:	4798      	blx	r3
                MXC_DMA_ChannelClearFlags(i, MXC_DMA_RevA_ChannelGetFlags(i));
10013fb4:	4620      	mov	r0, r4
10013fb6:	f7ff ff8d 	bl	10013ed4 <MXC_DMA_RevA_ChannelGetFlags>
10013fba:	4601      	mov	r1, r0
10013fbc:	4620      	mov	r0, r4
10013fbe:	f7ff fe44 	bl	10013c4a <MXC_DMA_ChannelClearFlags>
                if (dma->intfl == 0) {
10013fc2:	6873      	ldr	r3, [r6, #4]
10013fc4:	2b00      	cmp	r3, #0
10013fc6:	d1e1      	bne.n	10013f8c <MXC_DMA_RevA_Handler+0x28>
10013fc8:	e7e5      	b.n	10013f96 <MXC_DMA_RevA_Handler+0x32>
10013fca:	bf00      	nop
10013fcc:	40028000 	.word	0x40028000
10013fd0:	20000fe4 	.word	0x20000fe4

10013fd4 <MXC_FLC_ME17_Flash_Operation>:
    The line fill buffer is a FLC-related buffer that also may no longer be valid.
    It's flushed by reading 2 pages of flash.
    */

    /* Flush all instruction caches */
    MXC_GCR->sysctrl |= MXC_F_GCR_SYSCTRL_ICC0_FLUSH;
10013fd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
{
10013fd8:	b082      	sub	sp, #8
    MXC_GCR->sysctrl |= MXC_F_GCR_SYSCTRL_ICC0_FLUSH;
10013fda:	681a      	ldr	r2, [r3, #0]
10013fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
10013fe0:	601a      	str	r2, [r3, #0]

    /* Wait for flush to complete */
    while (MXC_GCR->sysctrl & MXC_F_GCR_SYSCTRL_ICC0_FLUSH) {}
10013fe2:	681a      	ldr	r2, [r3, #0]
10013fe4:	0652      	lsls	r2, r2, #25
10013fe6:	d4fc      	bmi.n	10013fe2 <MXC_FLC_ME17_Flash_Operation+0xe>

    // Clear the line fill buffer by reading 2 pages from flash
    volatile uint32_t *line_addr;
    volatile uint32_t __unused line; // __unused attribute removes warning
    line_addr = (uint32_t *)(MXC_FLASH_MEM_BASE);
    line = *line_addr;
10013fe8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
10013fec:	681b      	ldr	r3, [r3, #0]
10013fee:	9301      	str	r3, [sp, #4]
    line_addr = (uint32_t *)(MXC_FLASH_MEM_BASE + MXC_FLASH_PAGE_SIZE);
    line = *line_addr;
10013ff0:	4b02      	ldr	r3, [pc, #8]	@ (10013ffc <MXC_FLC_ME17_Flash_Operation+0x28>)
10013ff2:	681b      	ldr	r3, [r3, #0]
10013ff4:	9301      	str	r3, [sp, #4]
}
10013ff6:	b002      	add	sp, #8
10013ff8:	4770      	bx	lr
10013ffa:	bf00      	nop
10013ffc:	10002000 	.word	0x10002000

10014000 <MXC_FLC_ME17_GetByAddress>:

//******************************************************************************
int MXC_FLC_ME17_GetByAddress(mxc_flc_regs_t **flc, uint32_t addr)
{
    if ((addr >= MXC_FLASH_MEM_BASE) && (addr < (MXC_FLASH_MEM_BASE + MXC_FLASH_MEM_SIZE))) {
10014000:	f101 4370 	add.w	r3, r1, #4026531840	@ 0xf0000000
10014004:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
10014008:	d203      	bcs.n	10014012 <MXC_FLC_ME17_GetByAddress+0x12>
        *flc = MXC_FLC0;
1001400a:	4b06      	ldr	r3, [pc, #24]	@ (10014024 <MXC_FLC_ME17_GetByAddress+0x24>)
1001400c:	6003      	str	r3, [r0, #0]
        *flc = MXC_FLC0;
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
1001400e:	2000      	movs	r0, #0
10014010:	4770      	bx	lr
    } else if ((addr >= MXC_INFO_MEM_BASE) && (addr < (MXC_INFO_MEM_BASE + MXC_INFO_MEM_SIZE))) {
10014012:	f1a1 5184 	sub.w	r1, r1, #276824064	@ 0x10800000
10014016:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
1001401a:	d3f6      	bcc.n	1001400a <MXC_FLC_ME17_GetByAddress+0xa>
        return E_BAD_PARAM;
1001401c:	f06f 0002 	mvn.w	r0, #2
}
10014020:	4770      	bx	lr
10014022:	bf00      	nop
10014024:	40029000 	.word	0x40029000

10014028 <MXC_FLC_ME17_GetPhysicalAddress>:

//******************************************************************************
int MXC_FLC_ME17_GetPhysicalAddress(uint32_t addr, uint32_t *result)
{
    if ((addr >= MXC_FLASH_MEM_BASE) && (addr < (MXC_FLASH_MEM_BASE + MXC_FLASH_MEM_SIZE))) {
10014028:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
1001402c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
10014030:	d204      	bcs.n	1001403c <MXC_FLC_ME17_GetPhysicalAddress+0x14>
        *result = addr & (MXC_FLASH_MEM_SIZE - 1);
10014032:	f3c0 0012 	ubfx	r0, r0, #0, #19
10014036:	6008      	str	r0, [r1, #0]
        *result = (addr & (MXC_INFO_MEM_SIZE - 1)) + MXC_FLASH_MEM_SIZE;
    } else {
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10014038:	2000      	movs	r0, #0
1001403a:	4770      	bx	lr
    } else if ((addr >= MXC_INFO_MEM_BASE) && (addr < (MXC_INFO_MEM_BASE + MXC_INFO_MEM_SIZE))) {
1001403c:	f1a0 5384 	sub.w	r3, r0, #276824064	@ 0x10800000
10014040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
10014044:	d204      	bcs.n	10014050 <MXC_FLC_ME17_GetPhysicalAddress+0x28>
        *result = (addr & (MXC_INFO_MEM_SIZE - 1)) + MXC_FLASH_MEM_SIZE;
10014046:	f3c0 000d 	ubfx	r0, r0, #0, #14
1001404a:	f500 2000 	add.w	r0, r0, #524288	@ 0x80000
1001404e:	e7f2      	b.n	10014036 <MXC_FLC_ME17_GetPhysicalAddress+0xe>
        return E_BAD_PARAM;
10014050:	f06f 0002 	mvn.w	r0, #2
}
10014054:	4770      	bx	lr

10014056 <MXC_FLC_Write32>:
    return err;
}

//******************************************************************************
int MXC_FLC_Write32(uint32_t address, uint32_t data)
{
10014056:	b513      	push	{r0, r1, r4, lr}
    uint32_t addr, aligned;
    int err;
    mxc_flc_regs_t *flc = NULL;
10014058:	2300      	movs	r3, #0
1001405a:	9301      	str	r3, [sp, #4]

    // Address checked if it is byte addressable
    if (address & 0x3) {
1001405c:	0783      	lsls	r3, r0, #30
{
1001405e:	4604      	mov	r4, r0
10014060:	460a      	mov	r2, r1
    if (address & 0x3) {
10014062:	d114      	bne.n	1001408e <MXC_FLC_Write32+0x38>

    // Align address to 128-bit word
    aligned = address & 0xfffffff0;

    // Get FLC Instance
    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
10014064:	4601      	mov	r1, r0
10014066:	a801      	add	r0, sp, #4
10014068:	f7ff ffca 	bl	10014000 <MXC_FLC_ME17_GetByAddress>
1001406c:	b968      	cbnz	r0, 1001408a <MXC_FLC_Write32+0x34>
        return err;
    }

    if ((err = MXC_FLC_ME17_GetPhysicalAddress(aligned, &addr)) < E_NO_ERROR) {
1001406e:	4669      	mov	r1, sp
10014070:	f024 000f 	bic.w	r0, r4, #15
10014074:	f7ff ffd8 	bl	10014028 <MXC_FLC_ME17_GetPhysicalAddress>
10014078:	2800      	cmp	r0, #0
1001407a:	db06      	blt.n	1001408a <MXC_FLC_Write32+0x34>
        return err;
    }

    err = MXC_FLC_RevA_Write32Using128((mxc_flc_reva_regs_t *)flc, address, data, addr);
1001407c:	9b00      	ldr	r3, [sp, #0]
1001407e:	9801      	ldr	r0, [sp, #4]
10014080:	4621      	mov	r1, r4
10014082:	f01f f8dd 	bl	10033240 <__MXC_FLC_RevA_Write32Using128_veneer>

    // Flush the cache
    MXC_FLC_ME17_Flash_Operation();
10014086:	f7ff ffa5 	bl	10013fd4 <MXC_FLC_ME17_Flash_Operation>

    return err;
}
1001408a:	b002      	add	sp, #8
1001408c:	bd10      	pop	{r4, pc}
        return E_BAD_PARAM;
1001408e:	f06f 0002 	mvn.w	r0, #2
10014092:	e7fa      	b.n	1001408a <MXC_FLC_Write32+0x34>

10014094 <MXC_FLC_UnlockInfoBlock>:
    return E_NO_ERROR;
}

//******************************************************************************
int MXC_FLC_UnlockInfoBlock(uint32_t address)
{
10014094:	b507      	push	{r0, r1, r2, lr}
10014096:	4602      	mov	r2, r0
    int err;
    mxc_flc_regs_t *flc;

    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
10014098:	4601      	mov	r1, r0
1001409a:	a801      	add	r0, sp, #4
1001409c:	f7ff ffb0 	bl	10014000 <MXC_FLC_ME17_GetByAddress>
100140a0:	b930      	cbnz	r0, 100140b0 <MXC_FLC_UnlockInfoBlock+0x1c>
        return err;
    }

    return MXC_FLC_RevA_UnlockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
100140a2:	9801      	ldr	r0, [sp, #4]
100140a4:	4611      	mov	r1, r2
}
100140a6:	b003      	add	sp, #12
100140a8:	f85d eb04 	ldr.w	lr, [sp], #4
    return MXC_FLC_RevA_UnlockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
100140ac:	f000 b82a 	b.w	10014104 <MXC_FLC_RevA_UnlockInfoBlock>
}
100140b0:	b003      	add	sp, #12
100140b2:	f85d fb04 	ldr.w	pc, [sp], #4

100140b6 <MXC_FLC_LockInfoBlock>:

//******************************************************************************
int MXC_FLC_LockInfoBlock(uint32_t address)
{
100140b6:	b507      	push	{r0, r1, r2, lr}
100140b8:	4602      	mov	r2, r0
    int err;
    mxc_flc_regs_t *flc;

    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
100140ba:	4601      	mov	r1, r0
100140bc:	a801      	add	r0, sp, #4
100140be:	f7ff ff9f 	bl	10014000 <MXC_FLC_ME17_GetByAddress>
100140c2:	b930      	cbnz	r0, 100140d2 <MXC_FLC_LockInfoBlock+0x1c>
        return err;
    }

    return MXC_FLC_RevA_LockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
100140c4:	9801      	ldr	r0, [sp, #4]
100140c6:	4611      	mov	r1, r2
}
100140c8:	b003      	add	sp, #12
100140ca:	f85d eb04 	ldr.w	lr, [sp], #4
    return MXC_FLC_RevA_LockInfoBlock((mxc_flc_reva_regs_t *)flc, address);
100140ce:	f000 b839 	b.w	10014144 <MXC_FLC_RevA_LockInfoBlock>
}
100140d2:	b003      	add	sp, #12
100140d4:	f85d fb04 	ldr.w	pc, [sp], #4

100140d8 <MXC_FLC_Write>:

//******************************************************************************
int MXC_FLC_Write(uint32_t address, uint32_t length, uint32_t *buffer)
{
    return MXC_FLC_Com_Write(address, length, buffer);
100140d8:	f01f b8ae 	b.w	10033238 <__MXC_FLC_Com_Write_veneer>

100140dc <MXC_FLC_Read>:
}

//******************************************************************************
void MXC_FLC_Read(int address, void *buffer, int len)
{
    MXC_FLC_Com_Read(address, buffer, len);
100140dc:	f01f b8a8 	b.w	10033230 <__MXC_FLC_Com_Read_veneer>

100140e0 <MXC_FLC_EnableInt>:
}

//******************************************************************************
int MXC_FLC_EnableInt(uint32_t flags)
{
    return MXC_FLC_RevA_EnableInt(flags);
100140e0:	f000 b800 	b.w	100140e4 <MXC_FLC_RevA_EnableInt>

100140e4 <MXC_FLC_RevA_EnableInt>:
//******************************************************************************
int MXC_FLC_RevA_EnableInt(uint32_t mask)
{
    mask &= (MXC_F_FLC_REVA_INTR_DONEIE | MXC_F_FLC_REVA_INTR_AFIE);

    if (!mask) {
100140e4:	f410 7040 	ands.w	r0, r0, #768	@ 0x300
        /* No bits set? Wasn't something we can enable. */
        return E_BAD_PARAM;
    }

    /* Apply enables and write back, preserving the flags */
    flc_int->intr |= mask;
100140e8:	bf1f      	itttt	ne
100140ea:	4b05      	ldrne	r3, [pc, #20]	@ (10014100 <MXC_FLC_RevA_EnableInt+0x1c>)
100140ec:	681a      	ldrne	r2, [r3, #0]
100140ee:	6a53      	ldrne	r3, [r2, #36]	@ 0x24
100140f0:	4303      	orrne	r3, r0
100140f2:	bf1a      	itte	ne
100140f4:	6253      	strne	r3, [r2, #36]	@ 0x24

    return E_NO_ERROR;
100140f6:	2000      	movne	r0, #0
        return E_BAD_PARAM;
100140f8:	f06f 0002 	mvneq.w	r0, #2
}
100140fc:	4770      	bx	lr
100140fe:	bf00      	nop
10014100:	2000004c 	.word	0x2000004c

10014104 <MXC_FLC_RevA_UnlockInfoBlock>:
}

//******************************************************************************
int MXC_FLC_RevA_UnlockInfoBlock(mxc_flc_reva_regs_t *flc, uint32_t address)
{
    if ((address < MXC_INFO_MEM_BASE) ||
10014104:	f1a1 5184 	sub.w	r1, r1, #276824064	@ 0x10800000
10014108:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
1001410c:	d214      	bcs.n	10014138 <MXC_FLC_RevA_UnlockInfoBlock+0x34>
        (address >= (MXC_INFO_MEM_BASE + (MXC_INFO_MEM_SIZE * 2)))) {
        return E_BAD_PARAM;
    }

    /* Make sure the info block is locked */
    flc->actrl = 0x1234;
1001410e:	f241 2334 	movw	r3, #4660	@ 0x1234
10014112:	6403      	str	r3, [r0, #64]	@ 0x40

    /* Write the unlock sequence */
    flc->actrl = 0x3a7f5ca3;
10014114:	f103 5369 	add.w	r3, r3, #977272832	@ 0x3a400000
10014118:	f503 137d 	add.w	r3, r3, #4145152	@ 0x3f4000
1001411c:	f603 236f 	addw	r3, r3, #2671	@ 0xa6f
10014120:	6403      	str	r3, [r0, #64]	@ 0x40
    flc->actrl = 0xa1e34f20;
10014122:	f103 43d0 	add.w	r3, r3, #1744830464	@ 0x68000000
10014126:	f5a3 031c 	sub.w	r3, r3, #10223616	@ 0x9c0000
1001412a:	f6a3 5383 	subw	r3, r3, #3459	@ 0xd83
1001412e:	6403      	str	r3, [r0, #64]	@ 0x40
    flc->actrl = 0x9608b2c1;
10014130:	4b03      	ldr	r3, [pc, #12]	@ (10014140 <MXC_FLC_RevA_UnlockInfoBlock+0x3c>)
10014132:	6403      	str	r3, [r0, #64]	@ 0x40

    return E_NO_ERROR;
10014134:	2000      	movs	r0, #0
10014136:	4770      	bx	lr
        return E_BAD_PARAM;
10014138:	f06f 0002 	mvn.w	r0, #2
}
1001413c:	4770      	bx	lr
1001413e:	bf00      	nop
10014140:	9608b2c1 	.word	0x9608b2c1

10014144 <MXC_FLC_RevA_LockInfoBlock>:

//******************************************************************************
int MXC_FLC_RevA_LockInfoBlock(mxc_flc_reva_regs_t *flc, uint32_t address)
{
    if ((address < MXC_INFO_MEM_BASE) ||
10014144:	f1a1 5184 	sub.w	r1, r1, #276824064	@ 0x10800000
10014148:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        (address >= (MXC_INFO_MEM_BASE + (MXC_INFO_MEM_SIZE * 2)))) {
        return E_BAD_PARAM;
    }

    flc->actrl = 0xDEADBEEF;
1001414c:	bf3d      	ittte	cc
1001414e:	4b03      	ldrcc	r3, [pc, #12]	@ (1001415c <MXC_FLC_RevA_LockInfoBlock+0x18>)
10014150:	6403      	strcc	r3, [r0, #64]	@ 0x40
    return E_NO_ERROR;
10014152:	2000      	movcc	r0, #0
        return E_BAD_PARAM;
10014154:	f06f 0002 	mvncs.w	r0, #2
}
10014158:	4770      	bx	lr
1001415a:	bf00      	nop
1001415c:	deadbeef 	.word	0xdeadbeef

10014160 <MXC_GPIO_Init>:
/* **** Globals **** */

/* **** Functions **** */
int MXC_GPIO_Init(uint32_t portmask)
{
    if (portmask & 0x1) {
10014160:	07c1      	lsls	r1, r0, #31
{
10014162:	b510      	push	{r4, lr}
10014164:	4604      	mov	r4, r0
    if (portmask & 0x1) {
10014166:	d502      	bpl.n	1001416e <MXC_GPIO_Init+0xe>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
10014168:	2000      	movs	r0, #0
1001416a:	f7ff fcad 	bl	10013ac8 <MXC_SYS_ClockEnable>
    }

    if (portmask & 0x2) {
1001416e:	07a2      	lsls	r2, r4, #30
10014170:	d502      	bpl.n	10014178 <MXC_GPIO_Init+0x18>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
10014172:	2001      	movs	r0, #1
10014174:	f7ff fca8 	bl	10013ac8 <MXC_SYS_ClockEnable>
    }

    if (portmask & 0x4) {
10014178:	0763      	lsls	r3, r4, #29
1001417a:	d502      	bpl.n	10014182 <MXC_GPIO_Init+0x22>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO2);
1001417c:	2040      	movs	r0, #64	@ 0x40
1001417e:	f7ff fca3 	bl	10013ac8 <MXC_SYS_ClockEnable>
    }

    return MXC_GPIO_Common_Init(portmask);
10014182:	4620      	mov	r0, r4
}
10014184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_GPIO_Common_Init(portmask);
10014188:	f001 ba7a 	b.w	10015680 <MXC_GPIO_Common_Init>

1001418c <MXC_GPIO_OutSet>:
}

/* ************************************************************************** */
void MXC_GPIO_OutSet(mxc_gpio_regs_t *port, uint32_t mask)
{
    if (port == MXC_GPIO3) {
1001418c:	4a08      	ldr	r2, [pc, #32]	@ (100141b0 <MXC_GPIO_OutSet+0x24>)
1001418e:	4290      	cmp	r0, r2
{
10014190:	460b      	mov	r3, r1
    if (port == MXC_GPIO3) {
10014192:	d10a      	bne.n	100141aa <MXC_GPIO_OutSet+0x1e>
        MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(mask) | P31_DATA_OUT(mask);
10014194:	4907      	ldr	r1, [pc, #28]	@ (100141b4 <MXC_GPIO_OutSet+0x28>)
10014196:	6a08      	ldr	r0, [r1, #32]
10014198:	00da      	lsls	r2, r3, #3
1001419a:	f003 0301 	and.w	r3, r3, #1
1001419e:	f002 0210 	and.w	r2, r2, #16
100141a2:	4303      	orrs	r3, r0
100141a4:	4313      	orrs	r3, r2
100141a6:	620b      	str	r3, [r1, #32]
        return;
    }

    MXC_GPIO_RevA_OutSet((mxc_gpio_reva_regs_t *)port, mask);
}
100141a8:	4770      	bx	lr
    MXC_GPIO_RevA_OutSet((mxc_gpio_reva_regs_t *)port, mask);
100141aa:	f000 b92d 	b.w	10014408 <MXC_GPIO_RevA_OutSet>
100141ae:	bf00      	nop
100141b0:	40080600 	.word	0x40080600
100141b4:	40006c00 	.word	0x40006c00

100141b8 <MXC_GPIO_OutClr>:

/* ************************************************************************** */
void MXC_GPIO_OutClr(mxc_gpio_regs_t *port, uint32_t mask)
{
    if (port == MXC_GPIO3) {
100141b8:	4a08      	ldr	r2, [pc, #32]	@ (100141dc <MXC_GPIO_OutClr+0x24>)
100141ba:	4290      	cmp	r0, r2
{
100141bc:	460b      	mov	r3, r1
    if (port == MXC_GPIO3) {
100141be:	d10b      	bne.n	100141d8 <MXC_GPIO_OutClr+0x20>
        MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(mask) | P31_DATA_OUT(mask));
100141c0:	4807      	ldr	r0, [pc, #28]	@ (100141e0 <MXC_GPIO_OutClr+0x28>)
100141c2:	00da      	lsls	r2, r3, #3
100141c4:	6a01      	ldr	r1, [r0, #32]
100141c6:	f002 0210 	and.w	r2, r2, #16
100141ca:	f003 0301 	and.w	r3, r3, #1
100141ce:	4313      	orrs	r3, r2
100141d0:	ea21 0303 	bic.w	r3, r1, r3
100141d4:	6203      	str	r3, [r0, #32]
        return;
    }

    MXC_GPIO_RevA_OutClr((mxc_gpio_reva_regs_t *)port, mask);
}
100141d6:	4770      	bx	lr
    MXC_GPIO_RevA_OutClr((mxc_gpio_reva_regs_t *)port, mask);
100141d8:	f000 b918 	b.w	1001440c <MXC_GPIO_RevA_OutClr>
100141dc:	40080600 	.word	0x40080600
100141e0:	40006c00 	.word	0x40006c00

100141e4 <MXC_GPIO_Handler>:
}

/* ************************************************************************** */
void MXC_GPIO_Handler(unsigned int port)
{
    MXC_GPIO_Common_Handler(port);
100141e4:	f001 ba5e 	b.w	100156a4 <MXC_GPIO_Common_Handler>

100141e8 <MXC_GPIO_ClearFlags>:
}

/* ************************************************************************** */
void MXC_GPIO_ClearFlags(mxc_gpio_regs_t *port, uint32_t flags)
{
    if (port == MXC_GPIO3) {
100141e8:	4a03      	ldr	r2, [pc, #12]	@ (100141f8 <MXC_GPIO_ClearFlags+0x10>)
100141ea:	4290      	cmp	r0, r2
100141ec:	d102      	bne.n	100141f4 <MXC_GPIO_ClearFlags+0xc>
        MXC_PWRSEQ->lpwkst3 = flags;
100141ee:	4a03      	ldr	r2, [pc, #12]	@ (100141fc <MXC_GPIO_ClearFlags+0x14>)
100141f0:	61d1      	str	r1, [r2, #28]
        return;
    }

    MXC_GPIO_RevA_ClearFlags((mxc_gpio_reva_regs_t *)port, flags);
}
100141f2:	4770      	bx	lr
    MXC_GPIO_RevA_ClearFlags((mxc_gpio_reva_regs_t *)port, flags);
100141f4:	f000 b90c 	b.w	10014410 <MXC_GPIO_RevA_ClearFlags>
100141f8:	40080600 	.word	0x40080600
100141fc:	40006800 	.word	0x40006800

10014200 <MXC_GPIO_GetFlags>:

/* ************************************************************************** */
uint32_t MXC_GPIO_GetFlags(mxc_gpio_regs_t *port)
{
    if (port == MXC_GPIO3) {
10014200:	4b03      	ldr	r3, [pc, #12]	@ (10014210 <MXC_GPIO_GetFlags+0x10>)
10014202:	4298      	cmp	r0, r3
10014204:	d001      	beq.n	1001420a <MXC_GPIO_GetFlags+0xa>
        return MXC_PWRSEQ->lpwkst3;
    }

    return MXC_GPIO_RevA_GetFlags((mxc_gpio_reva_regs_t *)port);
10014206:	f000 b905 	b.w	10014414 <MXC_GPIO_RevA_GetFlags>
        return MXC_PWRSEQ->lpwkst3;
1001420a:	4b02      	ldr	r3, [pc, #8]	@ (10014214 <MXC_GPIO_GetFlags+0x14>)
1001420c:	69d8      	ldr	r0, [r3, #28]
}
1001420e:	4770      	bx	lr
10014210:	40080600 	.word	0x40080600
10014214:	40006800 	.word	0x40006800

10014218 <MXC_GPIO_SetVSSEL>:

/* ************************************************************************** */
int MXC_GPIO_SetVSSEL(mxc_gpio_regs_t *port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
10014218:	b410      	push	{r4}
    if (port == MXC_GPIO3) {
1001421a:	4c06      	ldr	r4, [pc, #24]	@ (10014234 <MXC_GPIO_SetVSSEL+0x1c>)
1001421c:	42a0      	cmp	r0, r4
1001421e:	d002      	beq.n	10014226 <MXC_GPIO_SetVSSEL+0xe>

        return E_NO_ERROR;
    }

    return MXC_GPIO_RevA_SetVSSEL((mxc_gpio_reva_regs_t *)port, vssel, mask);
}
10014220:	bc10      	pop	{r4}
    return MXC_GPIO_RevA_SetVSSEL((mxc_gpio_reva_regs_t *)port, vssel, mask);
10014222:	f000 b8f9 	b.w	10014418 <MXC_GPIO_RevA_SetVSSEL>
            return E_NOT_SUPPORTED;
10014226:	2900      	cmp	r1, #0
10014228:	bf14      	ite	ne
1001422a:	2000      	movne	r0, #0
1001422c:	f06f 0010 	mvneq.w	r0, #16
}
10014230:	bc10      	pop	{r4}
10014232:	4770      	bx	lr
10014234:	40080600 	.word	0x40080600

10014238 <MXC_GPIO_Config>:
{
10014238:	b570      	push	{r4, r5, r6, lr}
    port = MXC_GPIO_GET_IDX(cfg->port);
1001423a:	4b70      	ldr	r3, [pc, #448]	@ (100143fc <MXC_GPIO_Config+0x1c4>)
    mxc_gpio_regs_t *gpio = cfg->port;
1001423c:	6804      	ldr	r4, [r0, #0]
    port = MXC_GPIO_GET_IDX(cfg->port);
1001423e:	4e70      	ldr	r6, [pc, #448]	@ (10014400 <MXC_GPIO_Config+0x1c8>)
10014240:	429c      	cmp	r4, r3
{
10014242:	4605      	mov	r5, r0
    port = MXC_GPIO_GET_IDX(cfg->port);
10014244:	d01e      	beq.n	10014284 <MXC_GPIO_Config+0x4c>
10014246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001424a:	429c      	cmp	r4, r3
1001424c:	d01c      	beq.n	10014288 <MXC_GPIO_Config+0x50>
1001424e:	f503 23ee 	add.w	r3, r3, #487424	@ 0x77000
10014252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10014256:	429c      	cmp	r4, r3
10014258:	d018      	beq.n	1001428c <MXC_GPIO_Config+0x54>
1001425a:	42b4      	cmp	r4, r6
1001425c:	bf0c      	ite	eq
1001425e:	2303      	moveq	r3, #3
10014260:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
    MXC_GPIO_Init(1 << port);
10014264:	2001      	movs	r0, #1
10014266:	4098      	lsls	r0, r3
10014268:	f7ff ff7a 	bl	10014160 <MXC_GPIO_Init>
    if (cfg->port == MXC_GPIO3) {
1001426c:	682b      	ldr	r3, [r5, #0]
1001426e:	7a29      	ldrb	r1, [r5, #8]
10014270:	42b3      	cmp	r3, r6
10014272:	d17c      	bne.n	1001436e <MXC_GPIO_Config+0x136>
        switch (cfg->func) {
10014274:	2901      	cmp	r1, #1
10014276:	d027      	beq.n	100142c8 <MXC_GPIO_Config+0x90>
10014278:	2902      	cmp	r1, #2
1001427a:	d031      	beq.n	100142e0 <MXC_GPIO_Config+0xa8>
1001427c:	b141      	cbz	r1, 10014290 <MXC_GPIO_Config+0x58>
            return E_NOT_SUPPORTED;
1001427e:	f06f 0010 	mvn.w	r0, #16
}
10014282:	bd70      	pop	{r4, r5, r6, pc}
    port = MXC_GPIO_GET_IDX(cfg->port);
10014284:	2300      	movs	r3, #0
10014286:	e7ed      	b.n	10014264 <MXC_GPIO_Config+0x2c>
10014288:	2301      	movs	r3, #1
1001428a:	e7eb      	b.n	10014264 <MXC_GPIO_Config+0x2c>
1001428c:	2302      	movs	r3, #2
1001428e:	e7e9      	b.n	10014264 <MXC_GPIO_Config+0x2c>
            MXC_MCR->gpio3_ctrl &= ~(P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask));
10014290:	686b      	ldr	r3, [r5, #4]
10014292:	495c      	ldr	r1, [pc, #368]	@ (10014404 <MXC_GPIO_Config+0x1cc>)
10014294:	0058      	lsls	r0, r3, #1
10014296:	011a      	lsls	r2, r3, #4
10014298:	6a0e      	ldr	r6, [r1, #32]
1001429a:	f000 0002 	and.w	r0, r0, #2
1001429e:	f002 0220 	and.w	r2, r2, #32
100142a2:	4302      	orrs	r2, r0
100142a4:	ea26 0202 	bic.w	r2, r6, r2
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
100142a8:	620a      	str	r2, [r1, #32]
            MXC_MCR->outen &= ~(SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask));
100142aa:	688a      	ldr	r2, [r1, #8]
100142ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
100142b0:	4303      	orrs	r3, r0
100142b2:	ea22 0303 	bic.w	r3, r2, r3
            MXC_MCR->outen |= SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask);
100142b6:	608b      	str	r3, [r1, #8]
        switch (cfg->pad) {
100142b8:	7a6b      	ldrb	r3, [r5, #9]
100142ba:	2b04      	cmp	r3, #4
100142bc:	d8df      	bhi.n	1001427e <MXC_GPIO_Config+0x46>
100142be:	e8df f003 	tbb	[pc, r3]
100142c2:	3421      	.short	0x3421
100142c4:	344a      	.short	0x344a
100142c6:	4a          	.byte	0x4a
100142c7:	00          	.byte	0x00
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
100142c8:	686b      	ldr	r3, [r5, #4]
100142ca:	494e      	ldr	r1, [pc, #312]	@ (10014404 <MXC_GPIO_Config+0x1cc>)
100142cc:	0058      	lsls	r0, r3, #1
100142ce:	011a      	lsls	r2, r3, #4
100142d0:	6a0e      	ldr	r6, [r1, #32]
100142d2:	f000 0002 	and.w	r0, r0, #2
100142d6:	f002 0220 	and.w	r2, r2, #32
100142da:	4302      	orrs	r2, r0
100142dc:	4332      	orrs	r2, r6
100142de:	e7e3      	b.n	100142a8 <MXC_GPIO_Config+0x70>
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
100142e0:	686b      	ldr	r3, [r5, #4]
100142e2:	4948      	ldr	r1, [pc, #288]	@ (10014404 <MXC_GPIO_Config+0x1cc>)
100142e4:	0058      	lsls	r0, r3, #1
100142e6:	011a      	lsls	r2, r3, #4
100142e8:	6a0e      	ldr	r6, [r1, #32]
100142ea:	f000 0002 	and.w	r0, r0, #2
100142ee:	f002 0220 	and.w	r2, r2, #32
100142f2:	4302      	orrs	r2, r0
100142f4:	4332      	orrs	r2, r6
100142f6:	620a      	str	r2, [r1, #32]
            MXC_MCR->outen |= SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask);
100142f8:	688a      	ldr	r2, [r1, #8]
100142fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
100142fe:	4303      	orrs	r3, r0
10014300:	4313      	orrs	r3, r2
10014302:	e7d8      	b.n	100142b6 <MXC_GPIO_Config+0x7e>
            MXC_MCR->gpio3_ctrl |= P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask);
10014304:	686a      	ldr	r2, [r5, #4]
10014306:	493f      	ldr	r1, [pc, #252]	@ (10014404 <MXC_GPIO_Config+0x1cc>)
10014308:	0093      	lsls	r3, r2, #2
1001430a:	0152      	lsls	r2, r2, #5
1001430c:	6a08      	ldr	r0, [r1, #32]
1001430e:	f003 0304 	and.w	r3, r3, #4
10014312:	f002 0240 	and.w	r2, r2, #64	@ 0x40
10014316:	4313      	orrs	r3, r2
10014318:	4303      	orrs	r3, r0
            MXC_MCR->gpio3_ctrl &= ~(P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask));
1001431a:	620b      	str	r3, [r1, #32]
    return MXC_GPIO_SetVSSEL(gpio, cfg->vssel, cfg->mask);
1001431c:	686a      	ldr	r2, [r5, #4]
1001431e:	7aa9      	ldrb	r1, [r5, #10]
10014320:	4620      	mov	r0, r4
}
10014322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_GPIO_SetVSSEL(gpio, cfg->vssel, cfg->mask);
10014326:	f7ff bf77 	b.w	10014218 <MXC_GPIO_SetVSSEL>
            MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask);
1001432a:	4936      	ldr	r1, [pc, #216]	@ (10014404 <MXC_GPIO_Config+0x1cc>)
1001432c:	686b      	ldr	r3, [r5, #4]
1001432e:	6a0e      	ldr	r6, [r1, #32]
10014330:	00da      	lsls	r2, r3, #3
10014332:	f003 0001 	and.w	r0, r3, #1
10014336:	f002 0210 	and.w	r2, r2, #16
1001433a:	4330      	orrs	r0, r6
1001433c:	4302      	orrs	r2, r0
            MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask));
1001433e:	620a      	str	r2, [r1, #32]
            MXC_MCR->gpio3_ctrl &= ~(P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask));
10014340:	009a      	lsls	r2, r3, #2
10014342:	015b      	lsls	r3, r3, #5
10014344:	6a08      	ldr	r0, [r1, #32]
10014346:	f002 0204 	and.w	r2, r2, #4
1001434a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1001434e:	4313      	orrs	r3, r2
10014350:	ea20 0303 	bic.w	r3, r0, r3
10014354:	e7e1      	b.n	1001431a <MXC_GPIO_Config+0xe2>
            MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask));
10014356:	686b      	ldr	r3, [r5, #4]
10014358:	492a      	ldr	r1, [pc, #168]	@ (10014404 <MXC_GPIO_Config+0x1cc>)
1001435a:	00da      	lsls	r2, r3, #3
1001435c:	6a08      	ldr	r0, [r1, #32]
1001435e:	f002 0210 	and.w	r2, r2, #16
10014362:	f003 0601 	and.w	r6, r3, #1
10014366:	4332      	orrs	r2, r6
10014368:	ea20 0202 	bic.w	r2, r0, r2
1001436c:	e7e7      	b.n	1001433e <MXC_GPIO_Config+0x106>
        error = MXC_GPIO_RevA_SetAF((mxc_gpio_reva_regs_t *)gpio, cfg->func, cfg->mask);
1001436e:	686a      	ldr	r2, [r5, #4]
10014370:	4620      	mov	r0, r4
10014372:	f000 f863 	bl	1001443c <MXC_GPIO_RevA_SetAF>
        if (error != E_NO_ERROR) {
10014376:	2800      	cmp	r0, #0
10014378:	d183      	bne.n	10014282 <MXC_GPIO_Config+0x4a>
        switch (cfg->pad) {
1001437a:	7a6b      	ldrb	r3, [r5, #9]
1001437c:	2b04      	cmp	r3, #4
1001437e:	d839      	bhi.n	100143f4 <MXC_GPIO_Config+0x1bc>
10014380:	e8df f003 	tbb	[pc, r3]
10014384:	0d301c03 	.word	0x0d301c03
10014388:	28          	.byte	0x28
10014389:	00          	.byte	0x00
            gpio->padctrl0 &= ~cfg->mask;
1001438a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
1001438c:	686a      	ldr	r2, [r5, #4]
1001438e:	ea23 0302 	bic.w	r3, r3, r2
10014392:	6623      	str	r3, [r4, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
10014394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10014396:	ea23 0302 	bic.w	r3, r3, r2
1001439a:	6663      	str	r3, [r4, #100]	@ 0x64
            break;
1001439c:	e7be      	b.n	1001431c <MXC_GPIO_Config+0xe4>
            gpio->padctrl0 |= cfg->mask;
1001439e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
100143a0:	686a      	ldr	r2, [r5, #4]
100143a2:	4313      	orrs	r3, r2
100143a4:	6623      	str	r3, [r4, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
100143a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100143a8:	ea23 0302 	bic.w	r3, r3, r2
            gpio->padctrl1 |= cfg->mask;
100143ac:	6663      	str	r3, [r4, #100]	@ 0x64
            gpio->ps &= ~cfg->mask;
100143ae:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
100143b2:	ea23 0302 	bic.w	r3, r3, r2
            gpio->ps |= cfg->mask;
100143b6:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
            break;
100143ba:	e7af      	b.n	1001431c <MXC_GPIO_Config+0xe4>
            gpio->padctrl0 |= cfg->mask;
100143bc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
100143be:	686b      	ldr	r3, [r5, #4]
100143c0:	431a      	orrs	r2, r3
100143c2:	6622      	str	r2, [r4, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
100143c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100143c6:	ea22 0203 	bic.w	r2, r2, r3
            gpio->padctrl1 |= cfg->mask;
100143ca:	6662      	str	r2, [r4, #100]	@ 0x64
            gpio->ps |= cfg->mask;
100143cc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
100143d0:	4313      	orrs	r3, r2
100143d2:	e7f0      	b.n	100143b6 <MXC_GPIO_Config+0x17e>
            gpio->padctrl0 &= ~cfg->mask;
100143d4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
100143d6:	686a      	ldr	r2, [r5, #4]
100143d8:	ea23 0302 	bic.w	r3, r3, r2
100143dc:	6623      	str	r3, [r4, #96]	@ 0x60
            gpio->padctrl1 |= cfg->mask;
100143de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100143e0:	4313      	orrs	r3, r2
100143e2:	e7e3      	b.n	100143ac <MXC_GPIO_Config+0x174>
            gpio->padctrl0 &= ~cfg->mask;
100143e4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
100143e6:	686b      	ldr	r3, [r5, #4]
100143e8:	ea22 0203 	bic.w	r2, r2, r3
100143ec:	6622      	str	r2, [r4, #96]	@ 0x60
            gpio->padctrl1 |= cfg->mask;
100143ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100143f0:	431a      	orrs	r2, r3
100143f2:	e7ea      	b.n	100143ca <MXC_GPIO_Config+0x192>
        switch (cfg->pad) {
100143f4:	f06f 0002 	mvn.w	r0, #2
100143f8:	e743      	b.n	10014282 <MXC_GPIO_Config+0x4a>
100143fa:	bf00      	nop
100143fc:	40008000 	.word	0x40008000
10014400:	40080600 	.word	0x40080600
10014404:	40006c00 	.word	0x40006c00

10014408 <MXC_GPIO_RevA_OutSet>:
    return (port->in & mask);
}

void MXC_GPIO_RevA_OutSet(mxc_gpio_reva_regs_t *port, uint32_t mask)
{
    port->out_set = mask;
10014408:	61c1      	str	r1, [r0, #28]
}
1001440a:	4770      	bx	lr

1001440c <MXC_GPIO_RevA_OutClr>:

void MXC_GPIO_RevA_OutClr(mxc_gpio_reva_regs_t *port, uint32_t mask)
{
    port->out_clr = mask;
1001440c:	6201      	str	r1, [r0, #32]
}
1001440e:	4770      	bx	lr

10014410 <MXC_GPIO_RevA_ClearFlags>:
    port->inten_clr = mask;
}

void MXC_GPIO_RevA_ClearFlags(mxc_gpio_reva_regs_t *port, uint32_t flags)
{
    port->intfl_clr = flags;
10014410:	6481      	str	r1, [r0, #72]	@ 0x48
}
10014412:	4770      	bx	lr

10014414 <MXC_GPIO_RevA_GetFlags>:

uint32_t MXC_GPIO_RevA_GetFlags(mxc_gpio_reva_regs_t *port)
{
    return port->intfl;
10014414:	6c00      	ldr	r0, [r0, #64]	@ 0x40
}
10014416:	4770      	bx	lr

10014418 <MXC_GPIO_RevA_SetVSSEL>:

int MXC_GPIO_RevA_SetVSSEL(mxc_gpio_reva_regs_t *port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
    // Configure the vssel
    switch (vssel) {
10014418:	b121      	cbz	r1, 10014424 <MXC_GPIO_RevA_SetVSSEL+0xc>
1001441a:	2901      	cmp	r1, #1
1001441c:	d00a      	beq.n	10014434 <MXC_GPIO_RevA_SetVSSEL+0x1c>
1001441e:	f06f 0002 	mvn.w	r0, #2
10014422:	4770      	bx	lr
    case MXC_GPIO_VSSEL_VDDIO:
        port->vssel &= ~mask;
10014424:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
10014428:	ea23 0302 	bic.w	r3, r3, r2
1001442c:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0

    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10014430:	2000      	movs	r0, #0
}
10014432:	4770      	bx	lr
        port->vssel |= mask;
10014434:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
10014438:	4313      	orrs	r3, r2
1001443a:	e7f7      	b.n	1001442c <MXC_GPIO_RevA_SetVSSEL+0x14>

1001443c <MXC_GPIO_RevA_SetAF>:

int MXC_GPIO_RevA_SetAF(mxc_gpio_reva_regs_t *port, mxc_gpio_func_t func, uint32_t mask)
{
    //This is required for new devices going forward.
    port->inen |= mask;
1001443c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
1001443e:	4313      	orrs	r3, r2
10014440:	6303      	str	r3, [r0, #48]	@ 0x30

    //Switch to I/O mode first
    port->en0_set = mask;
10014442:	6042      	str	r2, [r0, #4]

    switch (func) {
10014444:	2905      	cmp	r1, #5
10014446:	d821      	bhi.n	1001448c <MXC_GPIO_RevA_SetAF+0x50>
10014448:	e8df f001 	tbb	[pc, r1]
1001444c:	130d0b03 	.word	0x130d0b03
10014450:	1c18      	.short	0x1c18
    case MXC_GPIO_FUNC_IN:
        port->outen_clr = mask;
10014452:	6142      	str	r2, [r0, #20]
        port->en0_set = mask;
10014454:	6042      	str	r2, [r0, #4]
        port->en1_clr = mask;
10014456:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en2_clr = mask;
10014458:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en3_clr = mask;
1001445a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
#endif
    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
1001445e:	2000      	movs	r0, #0
10014460:	4770      	bx	lr
        port->outen_set = mask;
10014462:	6102      	str	r2, [r0, #16]
        port->en0_set = mask;
10014464:	e7f6      	b.n	10014454 <MXC_GPIO_RevA_SetAF+0x18>
        port->en3_clr = mask;
10014466:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_clr = mask;
1001446a:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en1_clr = mask;
1001446c:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en0_clr = mask;
1001446e:	6082      	str	r2, [r0, #8]
        break;
10014470:	e7f5      	b.n	1001445e <MXC_GPIO_RevA_SetAF+0x22>
        port->en3_clr = mask;
10014472:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_clr = mask;
10014476:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en1_set = mask;
10014478:	66c2      	str	r2, [r0, #108]	@ 0x6c
1001447a:	e7f8      	b.n	1001446e <MXC_GPIO_RevA_SetAF+0x32>
        port->en3_clr = mask;
1001447c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_set = mask;
10014480:	6782      	str	r2, [r0, #120]	@ 0x78
10014482:	e7f3      	b.n	1001446c <MXC_GPIO_RevA_SetAF+0x30>
        port->en3_clr = mask;
10014484:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_set = mask;
10014488:	6782      	str	r2, [r0, #120]	@ 0x78
1001448a:	e7f5      	b.n	10014478 <MXC_GPIO_RevA_SetAF+0x3c>
    switch (func) {
1001448c:	f06f 0002 	mvn.w	r0, #2
}
10014490:	4770      	bx	lr

10014492 <MXC_I2C_SetSlaveAddr>:
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
}

int MXC_I2C_SetSlaveAddr(mxc_i2c_regs_t *i2c, unsigned int slaveAddr, int idx)
{
    return MXC_I2C_RevA_SetSlaveAddr((mxc_i2c_reva_regs_t *)i2c, slaveAddr, idx);
10014492:	f000 b8e3 	b.w	1001465c <MXC_I2C_RevA_SetSlaveAddr>
	...

10014498 <MXC_I2C_Shutdown>:
}

int MXC_I2C_Shutdown(mxc_i2c_regs_t *i2c)
{
10014498:	b508      	push	{r3, lr}
    // Configure GPIO for I2C
    if (i2c == MXC_I2C0) {
1001449a:	4b0f      	ldr	r3, [pc, #60]	@ (100144d8 <MXC_I2C_Shutdown+0x40>)
1001449c:	4298      	cmp	r0, r3
1001449e:	d107      	bne.n	100144b0 <MXC_I2C_Shutdown+0x18>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C0);
100144a0:	200d      	movs	r0, #13
100144a2:	f7ff faf1 	bl	10013a88 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_I2C0);
100144a6:	2010      	movs	r0, #16
100144a8:	f7ff fb80 	bl	10013bac <MXC_SYS_Reset_Periph>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C2);
    } else {
        return E_NO_DEVICE;
    }

    return E_NO_ERROR;
100144ac:	2000      	movs	r0, #0
}
100144ae:	bd08      	pop	{r3, pc}
    } else if (i2c == MXC_I2C1) {
100144b0:	4b0a      	ldr	r3, [pc, #40]	@ (100144dc <MXC_I2C_Shutdown+0x44>)
100144b2:	4298      	cmp	r0, r3
100144b4:	d104      	bne.n	100144c0 <MXC_I2C_Shutdown+0x28>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C1);
100144b6:	201c      	movs	r0, #28
100144b8:	f7ff fae6 	bl	10013a88 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C1);
100144bc:	2020      	movs	r0, #32
100144be:	e7f3      	b.n	100144a8 <MXC_I2C_Shutdown+0x10>
    } else if (i2c == MXC_I2C2) {
100144c0:	4b07      	ldr	r3, [pc, #28]	@ (100144e0 <MXC_I2C_Shutdown+0x48>)
100144c2:	4298      	cmp	r0, r3
100144c4:	d104      	bne.n	100144d0 <MXC_I2C_Shutdown+0x38>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C2);
100144c6:	2038      	movs	r0, #56	@ 0x38
100144c8:	f7ff fade 	bl	10013a88 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C2);
100144cc:	2034      	movs	r0, #52	@ 0x34
100144ce:	e7eb      	b.n	100144a8 <MXC_I2C_Shutdown+0x10>
        return E_NO_DEVICE;
100144d0:	f06f 0001 	mvn.w	r0, #1
100144d4:	e7eb      	b.n	100144ae <MXC_I2C_Shutdown+0x16>
100144d6:	bf00      	nop
100144d8:	4001d000 	.word	0x4001d000
100144dc:	4001e000 	.word	0x4001e000
100144e0:	4001f000 	.word	0x4001f000

100144e4 <MXC_I2C_Init>:
{
100144e4:	b570      	push	{r4, r5, r6, lr}
100144e6:	460d      	mov	r5, r1
100144e8:	4616      	mov	r6, r2
    if (i2c == NULL) {
100144ea:	4604      	mov	r4, r0
100144ec:	b308      	cbz	r0, 10014532 <MXC_I2C_Init+0x4e>
    MXC_I2C_Shutdown(i2c); // Clear everything out
100144ee:	f7ff ffd3 	bl	10014498 <MXC_I2C_Shutdown>
    if (i2c == MXC_I2C0) {
100144f2:	4b13      	ldr	r3, [pc, #76]	@ (10014540 <MXC_I2C_Init+0x5c>)
100144f4:	429c      	cmp	r4, r3
100144f6:	d10c      	bne.n	10014512 <MXC_I2C_Init+0x2e>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C0);
100144f8:	200d      	movs	r0, #13
100144fa:	f7ff fae5 	bl	10013ac8 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c0);
100144fe:	4811      	ldr	r0, [pc, #68]	@ (10014544 <MXC_I2C_Init+0x60>)
        MXC_GPIO_Config(&gpio_cfg_i2c2);
10014500:	f7ff fe9a 	bl	10014238 <MXC_GPIO_Config>
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
10014504:	4632      	mov	r2, r6
10014506:	4629      	mov	r1, r5
10014508:	4620      	mov	r0, r4
}
1001450a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
1001450e:	f000 b843 	b.w	10014598 <MXC_I2C_RevA_Init>
    } else if (i2c == MXC_I2C1) {
10014512:	4b0d      	ldr	r3, [pc, #52]	@ (10014548 <MXC_I2C_Init+0x64>)
10014514:	429c      	cmp	r4, r3
10014516:	d104      	bne.n	10014522 <MXC_I2C_Init+0x3e>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C1);
10014518:	201c      	movs	r0, #28
1001451a:	f7ff fad5 	bl	10013ac8 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c1);
1001451e:	480b      	ldr	r0, [pc, #44]	@ (1001454c <MXC_I2C_Init+0x68>)
10014520:	e7ee      	b.n	10014500 <MXC_I2C_Init+0x1c>
    } else if (i2c == MXC_I2C2) {
10014522:	4b0b      	ldr	r3, [pc, #44]	@ (10014550 <MXC_I2C_Init+0x6c>)
10014524:	429c      	cmp	r4, r3
10014526:	d107      	bne.n	10014538 <MXC_I2C_Init+0x54>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C2);
10014528:	2038      	movs	r0, #56	@ 0x38
1001452a:	f7ff facd 	bl	10013ac8 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c2);
1001452e:	4809      	ldr	r0, [pc, #36]	@ (10014554 <MXC_I2C_Init+0x70>)
10014530:	e7e6      	b.n	10014500 <MXC_I2C_Init+0x1c>
        return E_NULL_PTR;
10014532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10014536:	bd70      	pop	{r4, r5, r6, pc}
        return E_NO_DEVICE;
10014538:	f06f 0001 	mvn.w	r0, #1
1001453c:	e7fb      	b.n	10014536 <MXC_I2C_Init+0x52>
1001453e:	bf00      	nop
10014540:	4001d000 	.word	0x4001d000
10014544:	1002c118 	.word	0x1002c118
10014548:	4001e000 	.word	0x4001e000
1001454c:	1002c10c 	.word	0x1002c10c
10014550:	4001f000 	.word	0x4001f000
10014554:	1002c100 	.word	0x1002c100

10014558 <MXC_I2C_SetFrequency>:
    return E_NO_ERROR;
}

int MXC_I2C_SetFrequency(mxc_i2c_regs_t *i2c, unsigned int hz)
{
    return MXC_I2C_RevA_SetFrequency((mxc_i2c_reva_regs_t *)i2c, hz);
10014558:	f000 b89a 	b.w	10014690 <MXC_I2C_RevA_SetFrequency>

1001455c <MXC_I2C_GetFrequency>:
}

int MXC_I2C_GetFrequency(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_GetFrequency((mxc_i2c_reva_regs_t *)i2c);
1001455c:	f000 b8e0 	b.w	10014720 <MXC_I2C_RevA_GetFrequency>

10014560 <MXC_I2C_Start>:
/* ************************************************************************* */
/* Low-level functions                                                       */
/* ************************************************************************* */
int MXC_I2C_Start(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_Start((mxc_i2c_reva_regs_t *)i2c);
10014560:	f000 b8ee 	b.w	10014740 <MXC_I2C_RevA_Start>

10014564 <MXC_I2C_Stop>:
}

int MXC_I2C_Stop(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_Stop((mxc_i2c_reva_regs_t *)i2c);
10014564:	f000 b8fd 	b.w	10014762 <MXC_I2C_RevA_Stop>

10014568 <MXC_I2C_ReadRXFIFO>:
    return MXC_I2C_RevA_Read((mxc_i2c_reva_regs_t *)i2c, bytes, len, ack);
}

int MXC_I2C_ReadRXFIFO(mxc_i2c_regs_t *i2c, volatile unsigned char *bytes, unsigned int len)
{
    return MXC_I2C_RevA_ReadRXFIFO((mxc_i2c_reva_regs_t *)i2c, bytes, len);
10014568:	f000 b909 	b.w	1001477e <MXC_I2C_RevA_ReadRXFIFO>

1001456c <MXC_I2C_WriteTXFIFO>:
    return MXC_I2C_RevA_GetRXFIFOAvailable((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_WriteTXFIFO(mxc_i2c_regs_t *i2c, volatile unsigned char *bytes, unsigned int len)
{
    return MXC_I2C_RevA_WriteTXFIFO((mxc_i2c_reva_regs_t *)i2c, bytes, len);
1001456c:	f000 b91a 	b.w	100147a4 <MXC_I2C_RevA_WriteTXFIFO>

10014570 <MXC_I2C_ClearRXFIFO>:
    return MXC_I2C_RevA_GetTXFIFOAvailable((mxc_i2c_reva_regs_t *)i2c);
}

void MXC_I2C_ClearRXFIFO(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_ClearRXFIFO((mxc_i2c_reva_regs_t *)i2c);
10014570:	f000 b92b 	b.w	100147ca <MXC_I2C_RevA_ClearRXFIFO>

10014574 <MXC_I2C_ClearTXFIFO>:
}

void MXC_I2C_ClearTXFIFO(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_ClearTXFIFO((mxc_i2c_reva_regs_t *)i2c);
10014574:	f000 b931 	b.w	100147da <MXC_I2C_RevA_ClearTXFIFO>

10014578 <MXC_I2C_ClearFlags>:
    return MXC_I2C_RevA_GetFlags((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
}

void MXC_I2C_ClearFlags(mxc_i2c_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    MXC_I2C_RevA_ClearFlags((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
10014578:	f000 b937 	b.w	100147ea <MXC_I2C_RevA_ClearFlags>

1001457c <MXC_I2C_Recover>:
    return MXC_I2C_RevA_GetTimeout((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_Recover(mxc_i2c_regs_t *i2c, unsigned int retries)
{
    return MXC_I2C_RevA_Recover((mxc_i2c_reva_regs_t *)i2c, retries);
1001457c:	f000 b938 	b.w	100147f0 <MXC_I2C_RevA_Recover>

10014580 <MXC_I2C_MasterTransaction>:
/* Transaction level functions                                               */
/* ************************************************************************* */

int MXC_I2C_MasterTransaction(mxc_i2c_req_t *req)
{
    return MXC_I2C_RevA_MasterTransaction((mxc_i2c_reva_req_t *)req);
10014580:	f000 b99a 	b.w	100148b8 <MXC_I2C_RevA_MasterTransaction>

10014584 <MXC_I2C_SetRXThreshold>:
        (mxc_i2c_reva_regs_t *)i2c, (mxc_i2c_reva_slave_handler_t)callback, interruptCheck);
}

int MXC_I2C_SetRXThreshold(mxc_i2c_regs_t *i2c, unsigned int numBytes)
{
    return MXC_I2C_RevA_SetRXThreshold((mxc_i2c_reva_regs_t *)i2c, numBytes);
10014584:	f000 ba52 	b.w	10014a2c <MXC_I2C_RevA_SetRXThreshold>

10014588 <MXC_I2C_SetTXThreshold>:
    return MXC_I2C_RevA_GetRXThreshold((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_SetTXThreshold(mxc_i2c_regs_t *i2c, unsigned int numBytes)
{
    return MXC_I2C_RevA_SetTXThreshold((mxc_i2c_reva_regs_t *)i2c, numBytes);
10014588:	f000 ba5f 	b.w	10014a4a <MXC_I2C_RevA_SetTXThreshold>

1001458c <MXC_I2C_AsyncHandler>:
    MXC_I2C_RevA_AbortAsync((mxc_i2c_reva_regs_t *)i2c);
}

void MXC_I2C_AsyncHandler(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_AsyncHandler((mxc_i2c_reva_regs_t *)i2c, interruptCheck);
1001458c:	4b01      	ldr	r3, [pc, #4]	@ (10014594 <MXC_I2C_AsyncHandler+0x8>)
1001458e:	6819      	ldr	r1, [r3, #0]
10014590:	f000 bd02 	b.w	10014f98 <MXC_I2C_RevA_AsyncHandler>
10014594:	20000050 	.word	0x20000050

10014598 <MXC_I2C_RevA_Init>:

/* ************************************************************************* */
/* Control/Configuration functions                                           */
/* ************************************************************************* */
int MXC_I2C_RevA_Init(mxc_i2c_reva_regs_t *i2c, int masterMode, unsigned int slaveAddr)
{
10014598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001459c:	460d      	mov	r5, r1
1001459e:	4690      	mov	r8, r2
    int err;

    if (i2c == NULL) {
100145a0:	4604      	mov	r4, r0
100145a2:	2800      	cmp	r0, #0
100145a4:	d04e      	beq.n	10014644 <MXC_I2C_RevA_Init+0xac>
        return E_NULL_PTR;
    }

    if ((err = MXC_I2C_Recover((mxc_i2c_regs_t *)i2c, 16)) != E_NO_ERROR) {
100145a6:	2110      	movs	r1, #16
100145a8:	f7ff ffe8 	bl	1001457c <MXC_I2C_Recover>
100145ac:	4606      	mov	r6, r0
100145ae:	bb50      	cbnz	r0, 10014606 <MXC_I2C_RevA_Init+0x6e>
        return err;
    }

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_EN;
100145b0:	6823      	ldr	r3, [r4, #0]
100145b2:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 1001464c <MXC_I2C_RevA_Init+0xb4>
100145b6:	4f26      	ldr	r7, [pc, #152]	@ (10014650 <MXC_I2C_RevA_Init+0xb8>)
100145b8:	f043 0301 	orr.w	r3, r3, #1
100145bc:	6023      	str	r3, [r4, #0]

    MXC_I2C_ClearRXFIFO((mxc_i2c_regs_t *)i2c);
100145be:	4620      	mov	r0, r4
100145c0:	f7ff ffd6 	bl	10014570 <MXC_I2C_ClearRXFIFO>
    MXC_I2C_ClearTXFIFO((mxc_i2c_regs_t *)i2c);
100145c4:	4620      	mov	r0, r4
100145c6:	f7ff ffd5 	bl	10014574 <MXC_I2C_ClearTXFIFO>
    // Set the thresholds here and allow the user to change them as needed
    MXC_I2C_SetTXThreshold((mxc_i2c_regs_t *)i2c, 2); // set TX threshold to 2 bytes
100145ca:	2102      	movs	r1, #2
100145cc:	4620      	mov	r0, r4
100145ce:	f7ff ffdb 	bl	10014588 <MXC_I2C_SetTXThreshold>
    MXC_I2C_SetRXThreshold((mxc_i2c_regs_t *)i2c, 6); // set RX threshold to 6 bytes
100145d2:	2106      	movs	r1, #6
100145d4:	4620      	mov	r0, r4
100145d6:	f7ff ffd5 	bl	10014584 <MXC_I2C_SetRXThreshold>

    if (!masterMode) {
100145da:	b9cd      	cbnz	r5, 10014610 <MXC_I2C_RevA_Init+0x78>
        MXC_I2C_SetSlaveAddr((mxc_i2c_regs_t *)i2c, slaveAddr, 0);
100145dc:	462a      	mov	r2, r5
100145de:	4641      	mov	r1, r8
100145e0:	4620      	mov	r0, r4
100145e2:	f7ff ff56 	bl	10014492 <MXC_I2C_SetSlaveAddr>
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 0;
100145e6:	454c      	cmp	r4, r9
100145e8:	d008      	beq.n	100145fc <MXC_I2C_RevA_Init+0x64>
100145ea:	4b1a      	ldr	r3, [pc, #104]	@ (10014654 <MXC_I2C_RevA_Init+0xbc>)
100145ec:	429c      	cmp	r4, r3
100145ee:	d00d      	beq.n	1001460c <MXC_I2C_RevA_Init+0x74>
100145f0:	4d19      	ldr	r5, [pc, #100]	@ (10014658 <MXC_I2C_RevA_Init+0xc0>)
100145f2:	42ac      	cmp	r4, r5
100145f4:	bf14      	ite	ne
100145f6:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
100145fa:	2502      	moveq	r5, #2
100145fc:	2318      	movs	r3, #24
100145fe:	fb03 7505 	mla	r5, r3, r5, r7
10014602:	2300      	movs	r3, #0
10014604:	606b      	str	r3, [r5, #4]
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
    }

    return E_NO_ERROR;
}
10014606:	4630      	mov	r0, r6
10014608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 0;
1001460c:	2501      	movs	r5, #1
1001460e:	e7f5      	b.n	100145fc <MXC_I2C_RevA_Init+0x64>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
10014610:	6823      	ldr	r3, [r4, #0]
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
10014612:	454c      	cmp	r4, r9
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
10014614:	f043 0302 	orr.w	r3, r3, #2
10014618:	6023      	str	r3, [r4, #0]
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
1001461a:	d00f      	beq.n	1001463c <MXC_I2C_RevA_Init+0xa4>
1001461c:	4b0d      	ldr	r3, [pc, #52]	@ (10014654 <MXC_I2C_RevA_Init+0xbc>)
1001461e:	429c      	cmp	r4, r3
10014620:	d00e      	beq.n	10014640 <MXC_I2C_RevA_Init+0xa8>
10014622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014626:	429c      	cmp	r4, r3
10014628:	bf14      	ite	ne
1001462a:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
1001462e:	2402      	moveq	r4, #2
10014630:	2318      	movs	r3, #24
10014632:	fb03 7704 	mla	r7, r3, r4, r7
10014636:	2301      	movs	r3, #1
10014638:	607b      	str	r3, [r7, #4]
1001463a:	e7e4      	b.n	10014606 <MXC_I2C_RevA_Init+0x6e>
1001463c:	4634      	mov	r4, r6
1001463e:	e7f7      	b.n	10014630 <MXC_I2C_RevA_Init+0x98>
10014640:	2401      	movs	r4, #1
10014642:	e7f5      	b.n	10014630 <MXC_I2C_RevA_Init+0x98>
        return E_NULL_PTR;
10014644:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
10014648:	e7dd      	b.n	10014606 <MXC_I2C_RevA_Init+0x6e>
1001464a:	bf00      	nop
1001464c:	4001d000 	.word	0x4001d000
10014650:	2000114c 	.word	0x2000114c
10014654:	4001e000 	.word	0x4001e000
10014658:	4001f000 	.word	0x4001f000

1001465c <MXC_I2C_RevA_SetSlaveAddr>:

int MXC_I2C_RevA_SetSlaveAddr(mxc_i2c_reva_regs_t *i2c, unsigned int slaveAddr, int idx)
{
    if (i2c == NULL) {
1001465c:	b178      	cbz	r0, 1001467e <MXC_I2C_RevA_SetSlaveAddr+0x22>
        return E_NULL_PTR;
    }

    if (idx != 0) {
1001465e:	b98a      	cbnz	r2, 10014684 <MXC_I2C_RevA_SetSlaveAddr+0x28>
        // Multiple slaves are not supported yet
        return E_NOT_SUPPORTED;
    }

    if (slaveAddr > MXC_F_I2C_REVA_SLAVE_ADDR) {
10014660:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
10014664:	d211      	bcs.n	1001468a <MXC_I2C_RevA_SetSlaveAddr+0x2e>
        return E_BAD_PARAM;
    }

    i2c->slave = 0;

    if (slaveAddr > MXC_I2C_REVA_MAX_ADDR_WIDTH) {
10014666:	297f      	cmp	r1, #127	@ 0x7f
        // Set for 10bit addressing mode
        i2c->slave = MXC_F_I2C_REVA_SLAVE_EXT_ADDR_EN;
10014668:	bf88      	it	hi
1001466a:	f44f 4300 	movhi.w	r3, #32768	@ 0x8000
    i2c->slave = 0;
1001466e:	64c2      	str	r2, [r0, #76]	@ 0x4c
        i2c->slave = MXC_F_I2C_REVA_SLAVE_EXT_ADDR_EN;
10014670:	bf88      	it	hi
10014672:	64c3      	strhi	r3, [r0, #76]	@ 0x4c
    }

    i2c->slave |= slaveAddr;
10014674:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
10014676:	430b      	orrs	r3, r1
10014678:	64c3      	str	r3, [r0, #76]	@ 0x4c

    return E_NO_ERROR;
}
1001467a:	4610      	mov	r0, r2
1001467c:	4770      	bx	lr
        return E_NULL_PTR;
1001467e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10014682:	e7fa      	b.n	1001467a <MXC_I2C_RevA_SetSlaveAddr+0x1e>
        return E_NOT_SUPPORTED;
10014684:	f06f 0210 	mvn.w	r2, #16
10014688:	e7f7      	b.n	1001467a <MXC_I2C_RevA_SetSlaveAddr+0x1e>
        return E_BAD_PARAM;
1001468a:	f06f 0202 	mvn.w	r2, #2
1001468e:	e7f4      	b.n	1001467a <MXC_I2C_RevA_SetSlaveAddr+0x1e>

10014690 <MXC_I2C_RevA_SetFrequency>:

int MXC_I2C_RevA_SetFrequency(mxc_i2c_reva_regs_t *i2c, unsigned int hz)
{
    unsigned int ticksTotal, hiClks, lowClks;

    if (i2c == NULL) {
10014690:	2800      	cmp	r0, #0
10014692:	d039      	beq.n	10014708 <MXC_I2C_RevA_SetFrequency+0x78>
        return E_NULL_PTR;
    }

    if (hz > MXC_I2C_REVA_FASTPLUS_SPEED && hz <= MXC_I2C_REVA_HIGH_SPEED) {
10014694:	f46f 7210 	mvn.w	r2, #576	@ 0x240
10014698:	f5a1 2374 	sub.w	r3, r1, #999424	@ 0xf4000
1001469c:	4413      	add	r3, r2
1001469e:	4a1c      	ldr	r2, [pc, #112]	@ (10014710 <MXC_I2C_RevA_SetFrequency+0x80>)
100146a0:	4293      	cmp	r3, r2
100146a2:	d22d      	bcs.n	10014700 <MXC_I2C_RevA_SetFrequency+0x70>
        // Enable high speed mode
        int hsLowClks, hsHiClks;

        // Calculate the period of SCL and set up 33% duty cycle
        ticksTotal = PeripheralClock / hz;
100146a4:	4b1b      	ldr	r3, [pc, #108]	@ (10014714 <MXC_I2C_RevA_SetFrequency+0x84>)
100146a6:	681b      	ldr	r3, [r3, #0]
100146a8:	085b      	lsrs	r3, r3, #1
100146aa:	fbb3 f1f1 	udiv	r1, r3, r1
        hsLowClks = (ticksTotal * 2) / 3 - 1;
100146ae:	2303      	movs	r3, #3
100146b0:	004a      	lsls	r2, r1, #1
100146b2:	fbb2 f2f3 	udiv	r2, r2, r3
        hsHiClks = ticksTotal / 3 - 1;
100146b6:	fbb1 f3f3 	udiv	r3, r1, r3
100146ba:	3b01      	subs	r3, #1
        if (ticksTotal % 1) {
            hsHiClks++;
        }

        // If we're too slow for high speed, bail out
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
100146bc:	2b0f      	cmp	r3, #15
        hsLowClks = (ticksTotal * 2) / 3 - 1;
100146be:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
100146c2:	dd02      	ble.n	100146ca <MXC_I2C_RevA_SetFrequency+0x3a>
            return E_BAD_PARAM;
100146c4:	f06f 0002 	mvn.w	r0, #2
100146c8:	4770      	bx	lr
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
100146ca:	2a0f      	cmp	r2, #15
100146cc:	dcfa      	bgt.n	100146c4 <MXC_I2C_RevA_SetFrequency+0x34>
        }

        hsLowClks = (hsLowClks << MXC_F_I2C_REVA_HSCLK_LO_POS) & MXC_F_I2C_REVA_HSCLK_LO;
        hsHiClks = (hsHiClks << MXC_F_I2C_REVA_HSCLK_HI_POS) & MXC_F_I2C_REVA_HSCLK_HI;
100146ce:	021b      	lsls	r3, r3, #8
100146d0:	b29b      	uxth	r3, r3

        i2c->hsclk = (hsLowClks | hsHiClks);
100146d2:	b2d2      	uxtb	r2, r2
100146d4:	431a      	orrs	r2, r3
100146d6:	63c2      	str	r2, [r0, #60]	@ 0x3c

        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_HS_EN;
100146d8:	6803      	ldr	r3, [r0, #0]

        hz = MXC_I2C_REVA_FAST_SPEED; // High speed preambles will be sent at 400kHz
100146da:	490f      	ldr	r1, [pc, #60]	@ (10014718 <MXC_I2C_RevA_SetFrequency+0x88>)
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_HS_EN;
100146dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
100146e0:	6003      	str	r3, [r0, #0]
    } else if (hz > MXC_I2C_REVA_HIGH_SPEED) {
        return E_BAD_PARAM;
    }

    // Calculate the period of SCL, 50% duty cycle
    ticksTotal = PeripheralClock / hz;
100146e2:	4b0c      	ldr	r3, [pc, #48]	@ (10014714 <MXC_I2C_RevA_SetFrequency+0x84>)
100146e4:	681b      	ldr	r3, [r3, #0]
100146e6:	085b      	lsrs	r3, r3, #1
100146e8:	fbb3 f3f1 	udiv	r3, r3, r1
    hiClks = (ticksTotal >> 1) - 1;
100146ec:	085b      	lsrs	r3, r3, #1
100146ee:	1e5a      	subs	r2, r3, #1
    if (ticksTotal % 1) {
        hiClks++;
    }

    // Check for maximum/minimum supported speeds
    if ((hiClks > MXC_F_I2C_REVA_CLKHI_HI) || (lowClks == 0)) {
100146f0:	3b02      	subs	r3, #2
100146f2:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
100146f6:	d8e5      	bhi.n	100146c4 <MXC_I2C_RevA_SetFrequency+0x34>
        return E_BAD_PARAM;
    }

    i2c->clklo = lowClks & MXC_F_I2C_REVA_CLKLO_LO;
100146f8:	6342      	str	r2, [r0, #52]	@ 0x34
    i2c->clkhi = hiClks & MXC_F_I2C_REVA_CLKHI_HI;
100146fa:	6382      	str	r2, [r0, #56]	@ 0x38

    // Return the actual speed set, since it won't be exactly what's requested
    return MXC_I2C_GetFrequency((mxc_i2c_regs_t *)i2c);
100146fc:	f7ff bf2e 	b.w	1001455c <MXC_I2C_GetFrequency>
    } else if (hz > MXC_I2C_REVA_HIGH_SPEED) {
10014700:	4b06      	ldr	r3, [pc, #24]	@ (1001471c <MXC_I2C_RevA_SetFrequency+0x8c>)
10014702:	4299      	cmp	r1, r3
10014704:	d9ed      	bls.n	100146e2 <MXC_I2C_RevA_SetFrequency+0x52>
10014706:	e7dd      	b.n	100146c4 <MXC_I2C_RevA_SetFrequency+0x34>
        return E_NULL_PTR;
10014708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1001470c:	4770      	bx	lr
1001470e:	bf00      	nop
10014710:	00249f00 	.word	0x00249f00
10014714:	200018ac 	.word	0x200018ac
10014718:	00061a80 	.word	0x00061a80
1001471c:	0033e140 	.word	0x0033e140

10014720 <MXC_I2C_RevA_GetFrequency>:
    unsigned int sclCycles = 0;

    // Calculate the speed based on what we've written into registers
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);

    return PeripheralClock / sclCycles;
10014720:	4906      	ldr	r1, [pc, #24]	@ (1001473c <MXC_I2C_RevA_GetFrequency+0x1c>)
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);
10014722:	6b43      	ldr	r3, [r0, #52]	@ 0x34
10014724:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    return PeripheralClock / sclCycles;
10014726:	6808      	ldr	r0, [r1, #0]
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);
10014728:	f3c2 0208 	ubfx	r2, r2, #0, #9
1001472c:	f3c3 0308 	ubfx	r3, r3, #0, #9
10014730:	4413      	add	r3, r2
    return PeripheralClock / sclCycles;
10014732:	0840      	lsrs	r0, r0, #1
}
10014734:	fbb0 f0f3 	udiv	r0, r0, r3
10014738:	4770      	bx	lr
1001473a:	bf00      	nop
1001473c:	200018ac 	.word	0x200018ac

10014740 <MXC_I2C_RevA_Start>:
/* ************************************************************************* */
/* Low-level functions                                                       */
/* ************************************************************************* */
int MXC_I2C_RevA_Start(mxc_i2c_reva_regs_t *i2c)
{
    if (i2c == NULL) {
10014740:	b160      	cbz	r0, 1001475c <MXC_I2C_RevA_Start+0x1c>
        return E_NULL_PTR;
    }

    // If we have an incomplete transfer, we need to do a restart
    if (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_START) {
10014742:	6b03      	ldr	r3, [r0, #48]	@ 0x30
10014744:	f013 0f01 	tst.w	r3, #1
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10014748:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_START) {
1001474a:	d004      	beq.n	10014756 <MXC_I2C_RevA_Start+0x16>
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
1001474c:	f043 0302 	orr.w	r3, r3, #2
10014750:	6303      	str	r3, [r0, #48]	@ 0x30
    } else {
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_START; // No check for start generation
    }

    return E_NO_ERROR;
10014752:	2000      	movs	r0, #0
10014754:	4770      	bx	lr
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_START; // No check for start generation
10014756:	f043 0301 	orr.w	r3, r3, #1
1001475a:	e7f9      	b.n	10014750 <MXC_I2C_RevA_Start+0x10>
        return E_NULL_PTR;
1001475c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10014760:	4770      	bx	lr

10014762 <MXC_I2C_RevA_Stop>:

int MXC_I2C_RevA_Stop(mxc_i2c_reva_regs_t *i2c)
{
    if (i2c == NULL) {
10014762:	4602      	mov	r2, r0
10014764:	b140      	cbz	r0, 10014778 <MXC_I2C_RevA_Stop+0x16>
        return E_NULL_PTR;
    }

    i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10014766:	6b03      	ldr	r3, [r0, #48]	@ 0x30
10014768:	f043 0304 	orr.w	r3, r3, #4
1001476c:	6303      	str	r3, [r0, #48]	@ 0x30

    while (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_STOP) {}
1001476e:	6b10      	ldr	r0, [r2, #48]	@ 0x30
10014770:	f010 0004 	ands.w	r0, r0, #4
10014774:	d1fb      	bne.n	1001476e <MXC_I2C_RevA_Stop+0xc>
10014776:	4770      	bx	lr
        return E_NULL_PTR;
10014778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

    return E_NO_ERROR;
}
1001477c:	4770      	bx	lr

1001477e <MXC_I2C_RevA_ReadRXFIFO>:
    return MXC_I2C_ReadByte((mxc_i2c_regs_t *)i2c, &(bytes[read]), ack);
}

int MXC_I2C_RevA_ReadRXFIFO(mxc_i2c_reva_regs_t *i2c, volatile unsigned char *bytes,
                            unsigned int len)
{
1001477e:	b510      	push	{r4, lr}
    unsigned read = 0;

    if ((i2c == NULL) || (bytes == NULL)) {
10014780:	b168      	cbz	r0, 1001479e <MXC_I2C_RevA_ReadRXFIFO+0x20>
10014782:	b161      	cbz	r1, 1001479e <MXC_I2C_RevA_ReadRXFIFO+0x20>
10014784:	2300      	movs	r3, #0
        return E_NULL_PTR;
    }

    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10014786:	429a      	cmp	r2, r3
10014788:	d101      	bne.n	1001478e <MXC_I2C_RevA_ReadRXFIFO+0x10>
        bytes[read++] = i2c->fifo;
    }

    return read;
1001478a:	4618      	mov	r0, r3
}
1001478c:	bd10      	pop	{r4, pc}
    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
1001478e:	6844      	ldr	r4, [r0, #4]
10014790:	07a4      	lsls	r4, r4, #30
10014792:	d4fa      	bmi.n	1001478a <MXC_I2C_RevA_ReadRXFIFO+0xc>
        bytes[read++] = i2c->fifo;
10014794:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
10014796:	b2e4      	uxtb	r4, r4
10014798:	54cc      	strb	r4, [r1, r3]
1001479a:	3301      	adds	r3, #1
1001479c:	e7f3      	b.n	10014786 <MXC_I2C_RevA_ReadRXFIFO+0x8>
        return E_NULL_PTR;
1001479e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100147a2:	e7f3      	b.n	1001478c <MXC_I2C_RevA_ReadRXFIFO+0xe>

100147a4 <MXC_I2C_RevA_WriteTXFIFO>:
    return (i2c->rxctrl1 & MXC_F_I2C_REVA_RXCTRL1_LVL) >> MXC_F_I2C_REVA_RXCTRL1_LVL_POS;
}

int MXC_I2C_RevA_WriteTXFIFO(mxc_i2c_reva_regs_t *i2c, volatile unsigned char *bytes,
                             unsigned int len)
{
100147a4:	b510      	push	{r4, lr}
    unsigned written = 0;

    if ((i2c == NULL) || (bytes == NULL)) {
100147a6:	b168      	cbz	r0, 100147c4 <MXC_I2C_RevA_WriteTXFIFO+0x20>
100147a8:	b161      	cbz	r1, 100147c4 <MXC_I2C_RevA_WriteTXFIFO+0x20>
100147aa:	2300      	movs	r3, #0
        return E_NULL_PTR;
    }

    while ((len > written) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
100147ac:	429a      	cmp	r2, r3
100147ae:	d101      	bne.n	100147b4 <MXC_I2C_RevA_WriteTXFIFO+0x10>
        i2c->fifo = bytes[written++];
    }

    return written;
100147b0:	4618      	mov	r0, r3
}
100147b2:	bd10      	pop	{r4, pc}
    while ((len > written) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
100147b4:	6844      	ldr	r4, [r0, #4]
100147b6:	06e4      	lsls	r4, r4, #27
100147b8:	d4fa      	bmi.n	100147b0 <MXC_I2C_RevA_WriteTXFIFO+0xc>
        i2c->fifo = bytes[written++];
100147ba:	5ccc      	ldrb	r4, [r1, r3]
100147bc:	b2e4      	uxtb	r4, r4
100147be:	62c4      	str	r4, [r0, #44]	@ 0x2c
100147c0:	3301      	adds	r3, #1
100147c2:	e7f3      	b.n	100147ac <MXC_I2C_RevA_WriteTXFIFO+0x8>
        return E_NULL_PTR;
100147c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100147c8:	e7f3      	b.n	100147b2 <MXC_I2C_RevA_WriteTXFIFO+0xe>

100147ca <MXC_I2C_RevA_ClearRXFIFO>:
           ((i2c->txctrl1 & MXC_F_I2C_REVA_TXCTRL1_LVL) >> MXC_F_I2C_REVA_TXCTRL1_LVL_POS);
}

void MXC_I2C_RevA_ClearRXFIFO(mxc_i2c_reva_regs_t *i2c)
{
    i2c->rxctrl0 |= MXC_F_I2C_REVA_RXCTRL0_FLUSH;
100147ca:	69c3      	ldr	r3, [r0, #28]
100147cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100147d0:	61c3      	str	r3, [r0, #28]

    while (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_FLUSH) {}
100147d2:	69c3      	ldr	r3, [r0, #28]
100147d4:	061b      	lsls	r3, r3, #24
100147d6:	d4fc      	bmi.n	100147d2 <MXC_I2C_RevA_ClearRXFIFO+0x8>
}
100147d8:	4770      	bx	lr

100147da <MXC_I2C_RevA_ClearTXFIFO>:

void MXC_I2C_RevA_ClearTXFIFO(mxc_i2c_reva_regs_t *i2c)
{
    i2c->txctrl0 |= MXC_F_I2C_REVA_TXCTRL0_FLUSH;
100147da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
100147dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100147e0:	6243      	str	r3, [r0, #36]	@ 0x24

    while (i2c->txctrl0 & MXC_F_I2C_REVA_TXCTRL0_FLUSH) {}
100147e2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
100147e4:	061b      	lsls	r3, r3, #24
100147e6:	d4fc      	bmi.n	100147e2 <MXC_I2C_RevA_ClearTXFIFO+0x8>
}
100147e8:	4770      	bx	lr

100147ea <MXC_I2C_RevA_ClearFlags>:
    return E_NO_ERROR;
}

void MXC_I2C_RevA_ClearFlags(mxc_i2c_reva_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    i2c->intfl0 = flags0;
100147ea:	6081      	str	r1, [r0, #8]
    i2c->intfl1 = flags1;
100147ec:	6102      	str	r2, [r0, #16]
}
100147ee:	4770      	bx	lr

100147f0 <MXC_I2C_RevA_Recover>:
    i2c->inten0 &= ~flags0;
    i2c->inten1 &= ~flags1;
}

int MXC_I2C_RevA_Recover(mxc_i2c_reva_regs_t *i2c, unsigned int retries)
{
100147f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100147f4:	460f      	mov	r7, r1
    int err;
    unsigned int i;

    if (i2c == NULL) {
100147f6:	4604      	mov	r4, r0
100147f8:	2800      	cmp	r0, #0
100147fa:	d059      	beq.n	100148b0 <MXC_I2C_RevA_Recover+0xc0>
        return E_NULL_PTR;
    }

    err = E_COMM_ERR;

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_EN;
100147fc:	6803      	ldr	r3, [r0, #0]
100147fe:	f043 0301 	orr.w	r3, r3, #1
10014802:	6003      	str	r3, [r0, #0]
    int swBit = i2c->ctrl & MXC_F_I2C_REVA_CTRL_BB_MODE;
10014804:	6806      	ldr	r6, [r0, #0]

    if (i2c == NULL) {
        return E_NULL_PTR;
    }

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_BB_MODE;
10014806:	6803      	ldr	r3, [r0, #0]
10014808:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
1001480c:	f406 6680 	and.w	r6, r6, #1024	@ 0x400
10014810:	6003      	str	r3, [r0, #0]

    // Follow the procedure detailed in the header file
    // Delay 10uS between each step to give the line/slaves time to react
    for (i = 0; i < retries; i++) {
10014812:	f04f 0800 	mov.w	r8, #0
10014816:	45b8      	cmp	r8, r7
10014818:	d10c      	bne.n	10014834 <MXC_I2C_RevA_Recover+0x44>
    err = E_COMM_ERR;
1001481a:	f06f 0008 	mvn.w	r0, #8
            err = E_NO_ERROR; // We have control
            break;
        }
    }

    if (swBit == 0) {
1001481e:	b91e      	cbnz	r6, 10014828 <MXC_I2C_RevA_Recover+0x38>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_BB_MODE;
10014820:	6823      	ldr	r3, [r4, #0]
10014822:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
10014826:	6023      	str	r3, [r4, #0]
    }

    i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_EN;
10014828:	6823      	ldr	r3, [r4, #0]
1001482a:	f023 0301 	bic.w	r3, r3, #1
1001482e:	6023      	str	r3, [r4, #0]

    return err;
}
10014830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MXC_Delay(10);
10014834:	200a      	movs	r0, #10
10014836:	f7ff f82d 	bl	10013894 <MXC_Delay>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_SCL_OUT;
1001483a:	6823      	ldr	r3, [r4, #0]
1001483c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
10014840:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
10014842:	200a      	movs	r0, #10
10014844:	f7ff f826 	bl	10013894 <MXC_Delay>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
10014848:	6823      	ldr	r3, [r4, #0]
1001484a:	05d9      	lsls	r1, r3, #23
1001484c:	d506      	bpl.n	1001485c <MXC_I2C_RevA_Recover+0x6c>
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
1001484e:	6823      	ldr	r3, [r4, #0]
10014850:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
10014854:	6023      	str	r3, [r4, #0]
    for (i = 0; i < retries; i++) {
10014856:	f108 0801 	add.w	r8, r8, #1
1001485a:	e7dc      	b.n	10014816 <MXC_I2C_RevA_Recover+0x26>
        MXC_Delay(10);
1001485c:	200a      	movs	r0, #10
1001485e:	f7ff f819 	bl	10013894 <MXC_Delay>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_SDA_OUT;
10014862:	6823      	ldr	r3, [r4, #0]
10014864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
10014868:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
1001486a:	200a      	movs	r0, #10
1001486c:	f7ff f812 	bl	10013894 <MXC_Delay>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA) {
10014870:	6825      	ldr	r5, [r4, #0]
10014872:	f415 7500 	ands.w	r5, r5, #512	@ 0x200
10014876:	d1ea      	bne.n	1001484e <MXC_I2C_RevA_Recover+0x5e>
        MXC_Delay(10);
10014878:	200a      	movs	r0, #10
1001487a:	f7ff f80b 	bl	10013894 <MXC_Delay>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SDA_OUT;
1001487e:	6823      	ldr	r3, [r4, #0]
10014880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10014884:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
10014886:	200a      	movs	r0, #10
10014888:	f7ff f804 	bl	10013894 <MXC_Delay>
        if (!(i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA)) {
1001488c:	6823      	ldr	r3, [r4, #0]
1001488e:	059a      	lsls	r2, r3, #22
10014890:	d5dd      	bpl.n	1001484e <MXC_I2C_RevA_Recover+0x5e>
        MXC_Delay(10);
10014892:	200a      	movs	r0, #10
10014894:	f7fe fffe 	bl	10013894 <MXC_Delay>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT;
10014898:	6823      	ldr	r3, [r4, #0]
1001489a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001489e:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
100148a0:	200a      	movs	r0, #10
100148a2:	f7fe fff7 	bl	10013894 <MXC_Delay>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
100148a6:	6823      	ldr	r3, [r4, #0]
100148a8:	05db      	lsls	r3, r3, #23
100148aa:	d5d4      	bpl.n	10014856 <MXC_I2C_RevA_Recover+0x66>
            err = E_NO_ERROR; // We have control
100148ac:	4628      	mov	r0, r5
100148ae:	e7b6      	b.n	1001481e <MXC_I2C_RevA_Recover+0x2e>
        return E_NULL_PTR;
100148b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100148b4:	e7bc      	b.n	10014830 <MXC_I2C_RevA_Recover+0x40>
	...

100148b8 <MXC_I2C_RevA_MasterTransaction>:
/* ************************************************************************* */
/* Transaction level functions                                               */
/* ************************************************************************* */

int MXC_I2C_RevA_MasterTransaction(mxc_i2c_reva_req_t *req)
{
100148b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mxc_i2c_reva_regs_t *i2c = req->i2c; // Save off pointer for faster access
    unsigned int written = 0;
    unsigned int read = 0;

    if (req->addr > MXC_I2C_REVA_MAX_ADDR_WIDTH) {
100148bc:	e9d0 4300 	ldrd	r4, r3, [r0]
100148c0:	2b7f      	cmp	r3, #127	@ 0x7f
{
100148c2:	4605      	mov	r5, r0
    if (req->addr > MXC_I2C_REVA_MAX_ADDR_WIDTH) {
100148c4:	f200 80a7 	bhi.w	10014a16 <MXC_I2C_RevA_MasterTransaction+0x15e>
        return E_NOT_SUPPORTED;
    }

    if (MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c) < 0) {
100148c8:	4b57      	ldr	r3, [pc, #348]	@ (10014a28 <MXC_I2C_RevA_MasterTransaction+0x170>)
100148ca:	429c      	cmp	r4, r3
100148cc:	d008      	beq.n	100148e0 <MXC_I2C_RevA_MasterTransaction+0x28>
100148ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100148d2:	429c      	cmp	r4, r3
100148d4:	d004      	beq.n	100148e0 <MXC_I2C_RevA_MasterTransaction+0x28>
100148d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100148da:	429c      	cmp	r4, r3
100148dc:	f040 809e 	bne.w	10014a1c <MXC_I2C_RevA_MasterTransaction+0x164>
        return E_BAD_PARAM;
    }

    if (!(i2c->ctrl & MXC_F_I2C_REVA_CTRL_MST_MODE)) {
100148e0:	6823      	ldr	r3, [r4, #0]
100148e2:	079a      	lsls	r2, r3, #30
100148e4:	f140 809d 	bpl.w	10014a22 <MXC_I2C_RevA_MasterTransaction+0x16a>
    //  send addr w/ read bit
    //  read rx_len bytes acking all
    // stop or restart
    // return good or error

    MXC_I2C_ClearFlags((mxc_i2c_regs_t *)i2c, MXC_I2C_REVA_INTFL0_MASK,
100148e8:	2207      	movs	r2, #7
100148ea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
100148ee:	4620      	mov	r0, r4
100148f0:	f7ff fe42 	bl	10014578 <MXC_I2C_ClearFlags>
                       MXC_I2C_REVA_INTFL1_MASK); // Clear all I2C Interrupts
    MXC_I2C_ClearTXFIFO((mxc_i2c_regs_t *)i2c);
100148f4:	4620      	mov	r0, r4
100148f6:	f7ff fe3d 	bl	10014574 <MXC_I2C_ClearTXFIFO>
    MXC_I2C_ClearRXFIFO((mxc_i2c_regs_t *)i2c);
100148fa:	4620      	mov	r0, r4
100148fc:	f7ff fe38 	bl	10014570 <MXC_I2C_ClearRXFIFO>
    i2c->inten0 = 0;
10014900:	2300      	movs	r3, #0
10014902:	60e3      	str	r3, [r4, #12]
    i2c->inten1 = 0;
10014904:	6163      	str	r3, [r4, #20]

    if ((req->rx_len == 0) || (req->tx_len != 0)) {
10014906:	696b      	ldr	r3, [r5, #20]
10014908:	b10b      	cbz	r3, 1001490e <MXC_I2C_RevA_MasterTransaction+0x56>
1001490a:	68eb      	ldr	r3, [r5, #12]
1001490c:	b133      	cbz	r3, 1001491c <MXC_I2C_RevA_MasterTransaction+0x64>
        // Load the slave address with write bit set
        i2c->fifo = (req->addr << 1) & ~0x1;
1001490e:	686b      	ldr	r3, [r5, #4]
10014910:	005b      	lsls	r3, r3, #1
10014912:	62e3      	str	r3, [r4, #44]	@ 0x2c
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_START;
10014914:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10014916:	f043 0301 	orr.w	r3, r3, #1
1001491a:	6323      	str	r3, [r4, #48]	@ 0x30
{
1001491c:	2600      	movs	r6, #0

    while (req->tx_len > written) {
        if (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_TX_THD) {
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
                                           req->tx_len - written);
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
1001491e:	2720      	movs	r7, #32
    while (req->tx_len > written) {
10014920:	68ea      	ldr	r2, [r5, #12]
10014922:	42b2      	cmp	r2, r6
10014924:	d82e      	bhi.n	10014984 <MXC_I2C_RevA_MasterTransaction+0xcc>
            MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
            return E_COMM_ERR;
        }
    }

    MXC_I2C_ClearFlags((mxc_i2c_regs_t *)i2c,
10014926:	2200      	movs	r2, #0
10014928:	2111      	movs	r1, #17
1001492a:	4620      	mov	r0, r4
1001492c:	f7ff fe24 	bl	10014578 <MXC_I2C_ClearFlags>
                       MXC_F_I2C_REVA_INTFL0_DONE | MXC_F_I2C_REVA_INTFL0_RX_THD, 0);

    if (req->rx_len != 0) {
10014930:	696b      	ldr	r3, [r5, #20]
10014932:	b17b      	cbz	r3, 10014954 <MXC_I2C_RevA_MasterTransaction+0x9c>
        if (req->rx_len > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10014934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
            i2c->rxctrl1 = 0;
10014938:	bf88      	it	hi
1001493a:	2300      	movhi	r3, #0
        } else {
            i2c->rxctrl1 = req->rx_len; // 0 for 256, otherwise number of bytes to read
1001493c:	6223      	str	r3, [r4, #32]
        }

        MXC_I2C_Start((mxc_i2c_regs_t *)i2c); // Start or Restart as needed
1001493e:	4620      	mov	r0, r4
10014940:	f7ff fe0e 	bl	10014560 <MXC_I2C_Start>

        while (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_RESTART) {}
10014944:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10014946:	0798      	lsls	r0, r3, #30
10014948:	d4fc      	bmi.n	10014944 <MXC_I2C_RevA_MasterTransaction+0x8c>

        i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
1001494a:	686b      	ldr	r3, [r5, #4]
1001494c:	005b      	lsls	r3, r3, #1
1001494e:	f043 0301 	orr.w	r3, r3, #1
10014952:	62e3      	str	r3, [r4, #44]	@ 0x2c
{
10014954:	2600      	movs	r6, #0

    while (req->rx_len > read) {
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
            read +=
                MXC_I2C_ReadRXFIFO((mxc_i2c_regs_t *)i2c, &req->rx_buf[read], req->rx_len - read);
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10014956:	2710      	movs	r7, #16
            } else {
                i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
            }

            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10014958:	f04f 0801 	mov.w	r8, #1
    while (req->rx_len > read) {
1001495c:	696a      	ldr	r2, [r5, #20]
1001495e:	42b2      	cmp	r2, r6
10014960:	d827      	bhi.n	100149b2 <MXC_I2C_RevA_MasterTransaction+0xfa>
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
        }
    }

    if (req->restart) {
10014962:	69ab      	ldr	r3, [r5, #24]
10014964:	2b00      	cmp	r3, #0
10014966:	d04e      	beq.n	10014a06 <MXC_I2C_RevA_MasterTransaction+0x14e>
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10014968:	6b23      	ldr	r3, [r4, #48]	@ 0x30
1001496a:	f043 0302 	orr.w	r3, r3, #2
1001496e:	6323      	str	r3, [r4, #48]	@ 0x30

        while (!(i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_STOP)) {}
        // Wait for Transaction to finish
    }

    while (!(i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE)) {}
10014970:	68a3      	ldr	r3, [r4, #8]
10014972:	07db      	lsls	r3, r3, #31
10014974:	d5fc      	bpl.n	10014970 <MXC_I2C_RevA_MasterTransaction+0xb8>
    // Wait for Transaction to finish

    i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE | MXC_F_I2C_REVA_INTFL0_STOP;
10014976:	2341      	movs	r3, #65	@ 0x41
10014978:	60a3      	str	r3, [r4, #8]

    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
1001497a:	68a0      	ldr	r0, [r4, #8]
1001497c:	f410 40fe 	ands.w	r0, r0, #32512	@ 0x7f00
10014980:	d015      	beq.n	100149ae <MXC_I2C_RevA_MasterTransaction+0xf6>
10014982:	e012      	b.n	100149aa <MXC_I2C_RevA_MasterTransaction+0xf2>
        if (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10014984:	68a3      	ldr	r3, [r4, #8]
10014986:	069b      	lsls	r3, r3, #26
10014988:	d507      	bpl.n	1001499a <MXC_I2C_RevA_MasterTransaction+0xe2>
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
1001498a:	68a9      	ldr	r1, [r5, #8]
1001498c:	1b92      	subs	r2, r2, r6
1001498e:	4431      	add	r1, r6
10014990:	4620      	mov	r0, r4
10014992:	f7ff fdeb 	bl	1001456c <MXC_I2C_WriteTXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10014996:	60a7      	str	r7, [r4, #8]
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
10014998:	4406      	add	r6, r0
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
1001499a:	68a3      	ldr	r3, [r4, #8]
1001499c:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
100149a0:	d0be      	beq.n	10014920 <MXC_I2C_RevA_MasterTransaction+0x68>
            req->tx_len = written;
100149a2:	60ee      	str	r6, [r5, #12]
            MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
100149a4:	4620      	mov	r0, r4
100149a6:	f7ff fddd 	bl	10014564 <MXC_I2C_Stop>
            return E_COMM_ERR;
100149aa:	f06f 0008 	mvn.w	r0, #8
        return E_COMM_ERR;
    }

    return E_NO_ERROR;
}
100149ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
100149b2:	68a3      	ldr	r3, [r4, #8]
100149b4:	f013 0f11 	tst.w	r3, #17
100149b8:	d007      	beq.n	100149ca <MXC_I2C_RevA_MasterTransaction+0x112>
                MXC_I2C_ReadRXFIFO((mxc_i2c_regs_t *)i2c, &req->rx_buf[read], req->rx_len - read);
100149ba:	6929      	ldr	r1, [r5, #16]
100149bc:	1b92      	subs	r2, r2, r6
100149be:	4431      	add	r1, r6
100149c0:	4620      	mov	r0, r4
100149c2:	f7ff fdd1 	bl	10014568 <MXC_I2C_ReadRXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
100149c6:	60a7      	str	r7, [r4, #8]
            read +=
100149c8:	4406      	add	r6, r0
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
100149ca:	68a2      	ldr	r2, [r4, #8]
100149cc:	f412 42fe 	ands.w	r2, r2, #32512	@ 0x7f00
100149d0:	d001      	beq.n	100149d6 <MXC_I2C_RevA_MasterTransaction+0x11e>
            req->rx_len = read;
100149d2:	616e      	str	r6, [r5, #20]
100149d4:	e7e6      	b.n	100149a4 <MXC_I2C_RevA_MasterTransaction+0xec>
        if ((i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE) && (req->rx_len < read)) {
100149d6:	68a3      	ldr	r3, [r4, #8]
100149d8:	07d9      	lsls	r1, r3, #31
100149da:	d5bf      	bpl.n	1001495c <MXC_I2C_RevA_MasterTransaction+0xa4>
100149dc:	696b      	ldr	r3, [r5, #20]
100149de:	42b3      	cmp	r3, r6
100149e0:	d2bc      	bcs.n	1001495c <MXC_I2C_RevA_MasterTransaction+0xa4>
            if ((req->rx_len - read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
100149e2:	1b9b      	subs	r3, r3, r6
100149e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
                i2c->rxctrl1 = 0;
100149e8:	bf8c      	ite	hi
100149ea:	6222      	strhi	r2, [r4, #32]
                i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
100149ec:	6223      	strls	r3, [r4, #32]
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
100149ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
100149f0:	f043 0302 	orr.w	r3, r3, #2
100149f4:	6323      	str	r3, [r4, #48]	@ 0x30
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
100149f6:	686b      	ldr	r3, [r5, #4]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
100149f8:	f8c4 8008 	str.w	r8, [r4, #8]
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
100149fc:	005b      	lsls	r3, r3, #1
100149fe:	f043 0301 	orr.w	r3, r3, #1
10014a02:	62e3      	str	r3, [r4, #44]	@ 0x2c
10014a04:	e7aa      	b.n	1001495c <MXC_I2C_RevA_MasterTransaction+0xa4>
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10014a06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10014a08:	f043 0304 	orr.w	r3, r3, #4
10014a0c:	6323      	str	r3, [r4, #48]	@ 0x30
        while (!(i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_STOP)) {}
10014a0e:	68a3      	ldr	r3, [r4, #8]
10014a10:	065a      	lsls	r2, r3, #25
10014a12:	d5fc      	bpl.n	10014a0e <MXC_I2C_RevA_MasterTransaction+0x156>
10014a14:	e7ac      	b.n	10014970 <MXC_I2C_RevA_MasterTransaction+0xb8>
        return E_NOT_SUPPORTED;
10014a16:	f06f 0010 	mvn.w	r0, #16
10014a1a:	e7c8      	b.n	100149ae <MXC_I2C_RevA_MasterTransaction+0xf6>
        return E_BAD_PARAM;
10014a1c:	f06f 0002 	mvn.w	r0, #2
10014a20:	e7c5      	b.n	100149ae <MXC_I2C_RevA_MasterTransaction+0xf6>
        return E_BAD_STATE;
10014a22:	f06f 0006 	mvn.w	r0, #6
10014a26:	e7c2      	b.n	100149ae <MXC_I2C_RevA_MasterTransaction+0xf6>
10014a28:	4001d000 	.word	0x4001d000

10014a2c <MXC_I2C_RevA_SetRXThreshold>:
    return E_NO_ERROR;
}

int MXC_I2C_RevA_SetRXThreshold(mxc_i2c_reva_regs_t *i2c, unsigned int numBytes)
{
    unsigned int rxFIFOlen = (i2c->fifolen & MXC_F_I2C_REVA_FIFOLEN_RX_DEPTH) >>
10014a2c:	6983      	ldr	r3, [r0, #24]
10014a2e:	b2db      	uxtb	r3, r3
                             MXC_F_I2C_REVA_FIFOLEN_RX_DEPTH_POS;

    if (numBytes > rxFIFOlen) {
10014a30:	428b      	cmp	r3, r1
        return E_BAD_PARAM;
    }

    i2c->rxctrl0 = (i2c->rxctrl0 & ~MXC_F_I2C_REVA_RXCTRL0_THD_LVL) |
10014a32:	bf21      	itttt	cs
10014a34:	69c3      	ldrcs	r3, [r0, #28]
10014a36:	f423 6370 	biccs.w	r3, r3, #3840	@ 0xf00
10014a3a:	ea43 2101 	orrcs.w	r1, r3, r1, lsl #8
10014a3e:	61c1      	strcs	r1, [r0, #28]
                   (numBytes << MXC_F_I2C_REVA_RXCTRL0_THD_LVL_POS);
    return E_NO_ERROR;
10014a40:	bf2c      	ite	cs
10014a42:	2000      	movcs	r0, #0
        return E_BAD_PARAM;
10014a44:	f06f 0002 	mvncc.w	r0, #2
}
10014a48:	4770      	bx	lr

10014a4a <MXC_I2C_RevA_SetTXThreshold>:
    return (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_THD_LVL) >> MXC_F_I2C_REVA_RXCTRL0_THD_LVL_POS;
}

int MXC_I2C_RevA_SetTXThreshold(mxc_i2c_reva_regs_t *i2c, unsigned int numBytes)
{
    unsigned int txFIFOlen = (i2c->fifolen & MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH) >>
10014a4a:	6983      	ldr	r3, [r0, #24]
10014a4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
                             MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH_POS;

    if (numBytes > txFIFOlen) {
10014a50:	428b      	cmp	r3, r1
        return E_BAD_PARAM;
    }

    i2c->txctrl0 = (i2c->txctrl0 & ~MXC_F_I2C_REVA_TXCTRL0_THD_LVL) |
10014a52:	bf21      	itttt	cs
10014a54:	6a43      	ldrcs	r3, [r0, #36]	@ 0x24
10014a56:	f423 6370 	biccs.w	r3, r3, #3840	@ 0xf00
10014a5a:	ea43 2101 	orrcs.w	r1, r3, r1, lsl #8
10014a5e:	6241      	strcs	r1, [r0, #36]	@ 0x24
                   (numBytes << MXC_F_I2C_REVA_TXCTRL0_THD_LVL_POS);
    return E_NO_ERROR;
10014a60:	bf2c      	ite	cs
10014a62:	2000      	movcs	r0, #0
        return E_BAD_PARAM;
10014a64:	f06f 0002 	mvncc.w	r0, #2
}
10014a68:	4770      	bx	lr
	...

10014a6c <MXC_I2C_RevA_AsyncCallback>:
void MXC_I2C_RevA_AsyncCallback(mxc_i2c_reva_regs_t *i2c, int retVal)
{
    // Don't need to check for return value as this function is not accessible to user
    // i2c is already cheked for NULL from where this function is being called
    mxc_i2c_reva_req_t *req =
        (mxc_i2c_reva_req_t *)AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)];
10014a6c:	4b0c      	ldr	r3, [pc, #48]	@ (10014aa0 <MXC_I2C_RevA_AsyncCallback+0x34>)
10014a6e:	4298      	cmp	r0, r3
10014a70:	d010      	beq.n	10014a94 <MXC_I2C_RevA_AsyncCallback+0x28>
10014a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014a76:	4298      	cmp	r0, r3
10014a78:	d00e      	beq.n	10014a98 <MXC_I2C_RevA_AsyncCallback+0x2c>
10014a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014a7e:	4298      	cmp	r0, r3
10014a80:	bf14      	ite	ne
10014a82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
10014a86:	2002      	moveq	r0, #2
    mxc_i2c_reva_req_t *req =
10014a88:	4b06      	ldr	r3, [pc, #24]	@ (10014aa4 <MXC_I2C_RevA_AsyncCallback+0x38>)
10014a8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    if (req->callback != NULL) {
10014a8e:	69c3      	ldr	r3, [r0, #28]
10014a90:	b123      	cbz	r3, 10014a9c <MXC_I2C_RevA_AsyncCallback+0x30>
        req->callback(req, retVal);
10014a92:	4718      	bx	r3
        (mxc_i2c_reva_req_t *)AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)];
10014a94:	2000      	movs	r0, #0
10014a96:	e7f7      	b.n	10014a88 <MXC_I2C_RevA_AsyncCallback+0x1c>
10014a98:	2001      	movs	r0, #1
10014a9a:	e7f5      	b.n	10014a88 <MXC_I2C_RevA_AsyncCallback+0x1c>
    }
}
10014a9c:	4770      	bx	lr
10014a9e:	bf00      	nop
10014aa0:	4001d000 	.word	0x4001d000
10014aa4:	20001140 	.word	0x20001140

10014aa8 <MXC_I2C_RevA_AsyncStop>:

void MXC_I2C_RevA_AsyncStop(mxc_i2c_reva_regs_t *i2c)
{
    /* Disable and clear interrupts */
    i2c->inten0 = 0;
10014aa8:	2300      	movs	r3, #0
10014aaa:	60c3      	str	r3, [r0, #12]
    i2c->inten1 = 0;
10014aac:	6143      	str	r3, [r0, #20]

    i2c->intfl0 = i2c->intfl0;
10014aae:	6882      	ldr	r2, [r0, #8]
10014ab0:	6082      	str	r2, [r0, #8]
    i2c->intfl1 = i2c->intfl1;
10014ab2:	6902      	ldr	r2, [r0, #16]
10014ab4:	6102      	str	r2, [r0, #16]

    // Don't need to check for return value as this function is not accessible to user
    // i2c is already cheked for NULL from where this function is being called
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014ab6:	4a0a      	ldr	r2, [pc, #40]	@ (10014ae0 <MXC_I2C_RevA_AsyncStop+0x38>)
10014ab8:	4290      	cmp	r0, r2
10014aba:	d009      	beq.n	10014ad0 <MXC_I2C_RevA_AsyncStop+0x28>
10014abc:	4b09      	ldr	r3, [pc, #36]	@ (10014ae4 <MXC_I2C_RevA_AsyncStop+0x3c>)
10014abe:	4298      	cmp	r0, r3
10014ac0:	d00b      	beq.n	10014ada <MXC_I2C_RevA_AsyncStop+0x32>
10014ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014ac6:	4298      	cmp	r0, r3
10014ac8:	bf14      	ite	ne
10014aca:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014ace:	2302      	moveq	r3, #2
10014ad0:	4a05      	ldr	r2, [pc, #20]	@ (10014ae8 <MXC_I2C_RevA_AsyncStop+0x40>)
10014ad2:	2100      	movs	r1, #0
10014ad4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
10014ad8:	4770      	bx	lr
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014ada:	2301      	movs	r3, #1
10014adc:	e7f8      	b.n	10014ad0 <MXC_I2C_RevA_AsyncStop+0x28>
10014ade:	bf00      	nop
10014ae0:	4001d000 	.word	0x4001d000
10014ae4:	4001e000 	.word	0x4001e000
10014ae8:	20001140 	.word	0x20001140

10014aec <MXC_I2C_RevA_MasterAsyncHandler>:
    MXC_I2C_RevA_AsyncCallback(i2c, E_ABORT);
    MXC_I2C_RevA_AsyncStop(i2c);
}

void MXC_I2C_RevA_MasterAsyncHandler(int i2cNum)
{
10014aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int written = AsyncWritten[i2cNum];
10014af0:	f8df a150 	ldr.w	sl, [pc, #336]	@ 10014c44 <MXC_I2C_RevA_MasterAsyncHandler+0x158>
    unsigned int read = AsyncRead[i2cNum];
10014af4:	f8df 9150 	ldr.w	r9, [pc, #336]	@ 10014c48 <MXC_I2C_RevA_MasterAsyncHandler+0x15c>
    unsigned int written = AsyncWritten[i2cNum];
10014af8:	f85a 8020 	ldr.w	r8, [sl, r0, lsl #2]
    unsigned int read = AsyncRead[i2cNum];
10014afc:	f859 5020 	ldr.w	r5, [r9, r0, lsl #2]
{
10014b00:	4607      	mov	r7, r0
    mxc_i2c_reva_regs_t *i2c = (mxc_i2c_reva_regs_t *)MXC_I2C_GET_BASE(i2cNum);
10014b02:	b1c8      	cbz	r0, 10014b38 <MXC_I2C_RevA_MasterAsyncHandler+0x4c>
10014b04:	2801      	cmp	r0, #1
10014b06:	d019      	beq.n	10014b3c <MXC_I2C_RevA_MasterAsyncHandler+0x50>
10014b08:	2802      	cmp	r0, #2
10014b0a:	4c50      	ldr	r4, [pc, #320]	@ (10014c4c <MXC_I2C_RevA_MasterAsyncHandler+0x160>)
10014b0c:	bf18      	it	ne
10014b0e:	2400      	movne	r4, #0
    mxc_i2c_reva_req_t *req = (mxc_i2c_reva_req_t *)AsyncRequests[i2cNum];
10014b10:	4b4f      	ldr	r3, [pc, #316]	@ (10014c50 <MXC_I2C_RevA_MasterAsyncHandler+0x164>)
10014b12:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]

    /* Check for errors */
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10014b16:	68a3      	ldr	r3, [r4, #8]
10014b18:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
10014b1c:	d010      	beq.n	10014b40 <MXC_I2C_RevA_MasterAsyncHandler+0x54>
        /* Clear and disable interrupts */
        i2c->intfl0 = i2c->intfl0;
10014b1e:	68a3      	ldr	r3, [r4, #8]
10014b20:	60a3      	str	r3, [r4, #8]
        i2c->intfl1 = i2c->intfl1;
10014b22:	6923      	ldr	r3, [r4, #16]
10014b24:	6123      	str	r3, [r4, #16]
        i2c->inten0 = 0;
10014b26:	2300      	movs	r3, #0
10014b28:	60e3      	str	r3, [r4, #12]
        i2c->inten1 = 0;

        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10014b2a:	4620      	mov	r0, r4
        i2c->inten1 = 0;
10014b2c:	6163      	str	r3, [r4, #20]
        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10014b2e:	f7ff fd19 	bl	10014564 <MXC_I2C_Stop>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
        }

        /* Call the callback */
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
            MXC_I2C_RevA_AsyncCallback(i2c, E_COMM_ERR);
10014b32:	f06f 0108 	mvn.w	r1, #8
10014b36:	e06f      	b.n	10014c18 <MXC_I2C_RevA_MasterAsyncHandler+0x12c>
    mxc_i2c_reva_regs_t *i2c = (mxc_i2c_reva_regs_t *)MXC_I2C_GET_BASE(i2cNum);
10014b38:	4c46      	ldr	r4, [pc, #280]	@ (10014c54 <MXC_I2C_RevA_MasterAsyncHandler+0x168>)
10014b3a:	e7e9      	b.n	10014b10 <MXC_I2C_RevA_MasterAsyncHandler+0x24>
10014b3c:	4c46      	ldr	r4, [pc, #280]	@ (10014c58 <MXC_I2C_RevA_MasterAsyncHandler+0x16c>)
10014b3e:	e7e7      	b.n	10014b10 <MXC_I2C_RevA_MasterAsyncHandler+0x24>
    if (req->tx_len > written) {
10014b40:	68f2      	ldr	r2, [r6, #12]
10014b42:	4542      	cmp	r2, r8
10014b44:	d914      	bls.n	10014b70 <MXC_I2C_RevA_MasterAsyncHandler+0x84>
        if (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10014b46:	68a3      	ldr	r3, [r4, #8]
10014b48:	0699      	lsls	r1, r3, #26
10014b4a:	d509      	bpl.n	10014b60 <MXC_I2C_RevA_MasterAsyncHandler+0x74>
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
10014b4c:	68b1      	ldr	r1, [r6, #8]
10014b4e:	eba2 0208 	sub.w	r2, r2, r8
10014b52:	4441      	add	r1, r8
10014b54:	4620      	mov	r0, r4
10014b56:	f7ff fd09 	bl	1001456c <MXC_I2C_WriteTXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10014b5a:	2320      	movs	r3, #32
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
10014b5c:	4480      	add	r8, r0
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10014b5e:	60a3      	str	r3, [r4, #8]
        if (written < req->tx_len) {
10014b60:	68f3      	ldr	r3, [r6, #12]
        if ((req->tx_len == written) && (req->rx_len)) {
10014b62:	6972      	ldr	r2, [r6, #20]
        if (written < req->tx_len) {
10014b64:	4543      	cmp	r3, r8
            i2c->inten0 |= MXC_F_I2C_REVA_INTEN0_TX_THD;
10014b66:	68e3      	ldr	r3, [r4, #12]
        if (written < req->tx_len) {
10014b68:	d932      	bls.n	10014bd0 <MXC_I2C_RevA_MasterAsyncHandler+0xe4>
            i2c->inten0 |= MXC_F_I2C_REVA_INTEN0_TX_THD;
10014b6a:	f043 0320 	orr.w	r3, r3, #32
            i2c->inten0 |= (MXC_F_I2C_REVA_INTEN0_DONE);
10014b6e:	60e3      	str	r3, [r4, #12]
    if (req->rx_len > read) {
10014b70:	6972      	ldr	r2, [r6, #20]
10014b72:	42aa      	cmp	r2, r5
10014b74:	d90c      	bls.n	10014b90 <MXC_I2C_RevA_MasterAsyncHandler+0xa4>
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
10014b76:	68a3      	ldr	r3, [r4, #8]
10014b78:	f013 0f11 	tst.w	r3, #17
10014b7c:	d008      	beq.n	10014b90 <MXC_I2C_RevA_MasterAsyncHandler+0xa4>
                MXC_I2C_ReadRXFIFO((mxc_i2c_regs_t *)i2c, &req->rx_buf[read], req->rx_len - read);
10014b7e:	6931      	ldr	r1, [r6, #16]
10014b80:	1b52      	subs	r2, r2, r5
10014b82:	4429      	add	r1, r5
10014b84:	4620      	mov	r0, r4
10014b86:	f7ff fcef 	bl	10014568 <MXC_I2C_ReadRXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10014b8a:	2310      	movs	r3, #16
            read +=
10014b8c:	4405      	add	r5, r0
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10014b8e:	60a3      	str	r3, [r4, #8]
    if ((req->tx_len == written) && (req->rx_len - read) &&
10014b90:	68f3      	ldr	r3, [r6, #12]
10014b92:	4543      	cmp	r3, r8
10014b94:	d116      	bne.n	10014bc4 <MXC_I2C_RevA_MasterAsyncHandler+0xd8>
10014b96:	6973      	ldr	r3, [r6, #20]
10014b98:	429d      	cmp	r5, r3
10014b9a:	d045      	beq.n	10014c28 <MXC_I2C_RevA_MasterAsyncHandler+0x13c>
        (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE)) {
10014b9c:	68a2      	ldr	r2, [r4, #8]
    if ((req->tx_len == written) && (req->rx_len - read) &&
10014b9e:	07d2      	lsls	r2, r2, #31
10014ba0:	d510      	bpl.n	10014bc4 <MXC_I2C_RevA_MasterAsyncHandler+0xd8>
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10014ba2:	2201      	movs	r2, #1
10014ba4:	60a2      	str	r2, [r4, #8]
        if (read == 0) {
10014ba6:	bb1d      	cbnz	r5, 10014bf0 <MXC_I2C_RevA_MasterAsyncHandler+0x104>
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10014ba8:	6872      	ldr	r2, [r6, #4]
10014baa:	0052      	lsls	r2, r2, #1
        if ((req->rx_len - read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10014bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10014bb0:	f042 0201 	orr.w	r2, r2, #1
10014bb4:	62e2      	str	r2, [r4, #44]	@ 0x2c
            i2c->rxctrl1 = 0;
10014bb6:	bf8c      	ite	hi
10014bb8:	6225      	strhi	r5, [r4, #32]
            i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
10014bba:	6223      	strls	r3, [r4, #32]
            i2c->inten0 |= (MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE);
10014bbc:	68e3      	ldr	r3, [r4, #12]
10014bbe:	f043 0311 	orr.w	r3, r3, #17
            i2c->inten0 &= ~(MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE);
10014bc2:	60e3      	str	r3, [r4, #12]

        /* Clear the async state */
        MXC_I2C_RevA_AsyncStop(i2c);

    } else {
        AsyncWritten[i2cNum] = written;
10014bc4:	f84a 8027 	str.w	r8, [sl, r7, lsl #2]
        AsyncRead[i2cNum] = read;
10014bc8:	f849 5027 	str.w	r5, [r9, r7, lsl #2]
    }
}
10014bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            i2c->inten0 &= ~(MXC_F_I2C_REVA_INTEN0_TX_THD);
10014bd0:	f023 0320 	bic.w	r3, r3, #32
10014bd4:	60e3      	str	r3, [r4, #12]
        if ((req->tx_len == written) && (req->rx_len)) {
10014bd6:	d1cb      	bne.n	10014b70 <MXC_I2C_RevA_MasterAsyncHandler+0x84>
10014bd8:	2a00      	cmp	r2, #0
10014bda:	d0c9      	beq.n	10014b70 <MXC_I2C_RevA_MasterAsyncHandler+0x84>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10014bdc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10014bde:	f043 0302 	orr.w	r3, r3, #2
10014be2:	6323      	str	r3, [r4, #48]	@ 0x30
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10014be4:	2301      	movs	r3, #1
10014be6:	60a3      	str	r3, [r4, #8]
            i2c->inten0 |= (MXC_F_I2C_REVA_INTEN0_DONE);
10014be8:	68e3      	ldr	r3, [r4, #12]
10014bea:	f043 0301 	orr.w	r3, r3, #1
10014bee:	e7be      	b.n	10014b6e <MXC_I2C_RevA_MasterAsyncHandler+0x82>
        if ((req->rx_len - read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10014bf0:	1b5a      	subs	r2, r3, r5
10014bf2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
            i2c->rxctrl1 = 0;
10014bf6:	bf88      	it	hi
10014bf8:	2200      	movhi	r2, #0
        if (read < req->rx_len) {
10014bfa:	429d      	cmp	r5, r3
            i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
10014bfc:	6222      	str	r2, [r4, #32]
        if (read < req->rx_len) {
10014bfe:	d3dd      	bcc.n	10014bbc <MXC_I2C_RevA_MasterAsyncHandler+0xd0>
            i2c->inten0 &= ~(MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE);
10014c00:	68e3      	ldr	r3, [r4, #12]
10014c02:	f023 0311 	bic.w	r3, r3, #17
10014c06:	e7dc      	b.n	10014bc2 <MXC_I2C_RevA_MasterAsyncHandler+0xd6>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10014c08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10014c0a:	f043 0302 	orr.w	r3, r3, #2
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10014c0e:	6323      	str	r3, [r4, #48]	@ 0x30
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10014c10:	68a1      	ldr	r1, [r4, #8]
10014c12:	f411 41fe 	ands.w	r1, r1, #32512	@ 0x7f00
10014c16:	d18c      	bne.n	10014b32 <MXC_I2C_RevA_MasterAsyncHandler+0x46>
            MXC_I2C_RevA_AsyncCallback(i2c, E_NO_ERROR);
10014c18:	4620      	mov	r0, r4
10014c1a:	f7ff ff27 	bl	10014a6c <MXC_I2C_RevA_AsyncCallback>
        MXC_I2C_RevA_AsyncStop(i2c);
10014c1e:	4620      	mov	r0, r4
}
10014c20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        MXC_I2C_RevA_AsyncStop(i2c);
10014c24:	f7ff bf40 	b.w	10014aa8 <MXC_I2C_RevA_AsyncStop>
        i2c->inten0 = 0;
10014c28:	2300      	movs	r3, #0
10014c2a:	60e3      	str	r3, [r4, #12]
        i2c->inten1 = 0;
10014c2c:	6163      	str	r3, [r4, #20]
        i2c->intfl0 = i2c->intfl0;
10014c2e:	68a3      	ldr	r3, [r4, #8]
10014c30:	60a3      	str	r3, [r4, #8]
        i2c->intfl1 = i2c->intfl1;
10014c32:	6923      	ldr	r3, [r4, #16]
10014c34:	6123      	str	r3, [r4, #16]
        if (req->restart) {
10014c36:	69b3      	ldr	r3, [r6, #24]
10014c38:	2b00      	cmp	r3, #0
10014c3a:	d1e5      	bne.n	10014c08 <MXC_I2C_RevA_MasterAsyncHandler+0x11c>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10014c3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10014c3e:	f043 0304 	orr.w	r3, r3, #4
10014c42:	e7e4      	b.n	10014c0e <MXC_I2C_RevA_MasterAsyncHandler+0x122>
10014c44:	20001134 	.word	0x20001134
10014c48:	20001128 	.word	0x20001128
10014c4c:	4001f000 	.word	0x4001f000
10014c50:	20001140 	.word	0x20001140
10014c54:	4001d000 	.word	0x4001d000
10014c58:	4001e000 	.word	0x4001e000

10014c5c <MXC_I2C_RevA_SlaveAsyncHandler>:

void MXC_I2C_RevA_SlaveAsyncHandler(mxc_i2c_reva_regs_t *i2c, mxc_i2c_reva_slave_handler_t callback,
                                    uint32_t *int_en, int *retVal)
{
10014c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10014c60:	461f      	mov	r7, r3
    uint32_t tFlags = i2c->intfl0;
    *retVal = E_NO_ERROR;
10014c62:	2300      	movs	r3, #0
    uint32_t tFlags = i2c->intfl0;
10014c64:	f8d0 8008 	ldr.w	r8, [r0, #8]
    *retVal = E_NO_ERROR;
10014c68:	603b      	str	r3, [r7, #0]
{
10014c6a:	4616      	mov	r6, r2
    // I2C_EVT_RX_THRESH
    // I2C_EVT_TX_THRESH
    // I2C_EVT_TRANS_COMP
    // I2C_EVT_UNDERFLOW
    // I2C_EVT_OVERFLOW
    if (!(int_en[0] & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH |
10014c6c:	4ba5      	ldr	r3, [pc, #660]	@ (10014f04 <MXC_I2C_RevA_SlaveAsyncHandler+0x2a8>)
10014c6e:	6812      	ldr	r2, [r2, #0]
    uint32_t readFlag = i2c->ctrl & MXC_F_I2C_REVA_CTRL_READ;
10014c70:	f8d0 9000 	ldr.w	r9, [r0]
    if (!(int_en[0] & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH |
10014c74:	4013      	ands	r3, r2
{
10014c76:	4604      	mov	r4, r0
10014c78:	460d      	mov	r5, r1
    if (!(int_en[0] & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH |
10014c7a:	2b00      	cmp	r3, #0
10014c7c:	d164      	bne.n	10014d48 <MXC_I2C_RevA_SlaveAsyncHandler+0xec>
                       MXC_F_I2C_REVA_INTFL0_ADDR_MATCH))) {
        // The STOPERR/STARTERR interrupt that's enabled here could fire before we are addressed
        // (fires anytime a stop/start is detected out of sequence).
        if (tFlags & MXC_I2C_REVA_ERROR) {
10014c7e:	f418 4ffe 	tst.w	r8, #32512	@ 0x7f00
10014c82:	f008 0a40 	and.w	sl, r8, #64	@ 0x40
10014c86:	f000 80a4 	beq.w	10014dd2 <MXC_I2C_RevA_SlaveAsyncHandler+0x176>
            *retVal = E_COMM_ERR;
10014c8a:	f06f 0308 	mvn.w	r3, #8
10014c8e:	603b      	str	r3, [r7, #0]

            if (callback != NULL) {
10014c90:	b111      	cbz	r1, 10014c98 <MXC_I2C_RevA_SlaveAsyncHandler+0x3c>
                callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10014c92:	463a      	mov	r2, r7
10014c94:	2104      	movs	r1, #4
10014c96:	47a8      	blx	r5
            }

            MXC_I2C_ClearFlags((mxc_i2c_regs_t *)i2c, MXC_I2C_REVA_INTFL0_MASK,
10014c98:	2207      	movs	r2, #7
10014c9a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
10014c9e:	4620      	mov	r0, r4
10014ca0:	f7ff fc6a 	bl	10014578 <MXC_I2C_ClearFlags>
                               MXC_I2C_REVA_INTFL1_MASK); // Clear all I2C Interrupts
            MXC_I2C_ClearTXFIFO((mxc_i2c_regs_t *)i2c);
10014ca4:	4620      	mov	r0, r4
10014ca6:	f7ff fc65 	bl	10014574 <MXC_I2C_ClearTXFIFO>
            MXC_I2C_ClearRXFIFO((mxc_i2c_regs_t *)i2c);
10014caa:	4620      	mov	r0, r4
10014cac:	f7ff fc60 	bl	10014570 <MXC_I2C_ClearRXFIFO>
            int_en[0] = 0;
            int_en[1] = 0;
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014cb0:	4a95      	ldr	r2, [pc, #596]	@ (10014f08 <MXC_I2C_RevA_SlaveAsyncHandler+0x2ac>)
            int_en[0] = 0;
10014cb2:	2300      	movs	r3, #0
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014cb4:	4294      	cmp	r4, r2
            int_en[1] = 0;
10014cb6:	e9c6 3300 	strd	r3, r3, [r6]
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014cba:	d00a      	beq.n	10014cd2 <MXC_I2C_RevA_SlaveAsyncHandler+0x76>
10014cbc:	4b93      	ldr	r3, [pc, #588]	@ (10014f0c <MXC_I2C_RevA_SlaveAsyncHandler+0x2b0>)
10014cbe:	429c      	cmp	r4, r3
10014cc0:	f000 8085 	beq.w	10014dce <MXC_I2C_RevA_SlaveAsyncHandler+0x172>
10014cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014cc8:	429c      	cmp	r4, r3
10014cca:	bf0c      	ite	eq
10014ccc:	2302      	moveq	r3, #2
10014cce:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014cd2:	4a8f      	ldr	r2, [pc, #572]	@ (10014f10 <MXC_I2C_RevA_SlaveAsyncHandler+0x2b4>)
10014cd4:	2100      	movs	r1, #0
10014cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_RX_OV;
            }
        }

        if (int_en[0] & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) ||
10014cda:	6833      	ldr	r3, [r6, #0]
10014cdc:	f248 0220 	movw	r2, #32800	@ 0x8020
10014ce0:	421a      	tst	r2, r3
10014ce2:	d103      	bne.n	10014cec <MXC_I2C_RevA_SlaveAsyncHandler+0x90>
            int_en[1] & MXC_F_I2C_REVA_INTFL1_TX_UN) {
10014ce4:	6873      	ldr	r3, [r6, #4]
        if (int_en[0] & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) ||
10014ce6:	0798      	lsls	r0, r3, #30
10014ce8:	f140 80e4 	bpl.w	10014eb4 <MXC_I2C_RevA_SlaveAsyncHandler+0x258>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10014cec:	f018 0f20 	tst.w	r8, #32
10014cf0:	f000 8095 	beq.w	10014e1e <MXC_I2C_RevA_SlaveAsyncHandler+0x1c2>
                if (callback != NULL) {
10014cf4:	2d00      	cmp	r5, #0
10014cf6:	f040 80ca 	bne.w	10014e8e <MXC_I2C_RevA_SlaveAsyncHandler+0x232>
                    callback(i2c, MXC_I2C_REVA_EVT_TX_THRESH, NULL);
                }

                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10014cfa:	2320      	movs	r3, #32
10014cfc:	60a3      	str	r3, [r4, #8]
            }

            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_TX_UN) {
10014cfe:	6923      	ldr	r3, [r4, #16]
10014d00:	f013 0302 	ands.w	r3, r3, #2
10014d04:	f040 8091 	bne.w	10014e2a <MXC_I2C_RevA_SlaveAsyncHandler+0x1ce>
                }

                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
            }

            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014d08:	f418 4200 	ands.w	r2, r8, #32768	@ 0x8000
10014d0c:	f040 8093 	bne.w	10014e36 <MXC_I2C_RevA_SlaveAsyncHandler+0x1da>
                int_en[1] = 0;
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
            }
        }

        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
10014d10:	f1ba 0f00 	cmp.w	sl, #0
10014d14:	d018      	beq.n	10014d48 <MXC_I2C_RevA_SlaveAsyncHandler+0xec>
            *retVal = E_NO_ERROR;
10014d16:	603a      	str	r2, [r7, #0]
            }

            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_STOP;
            int_en[0] = 0;
            int_en[1] = 0;
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014d18:	4a7b      	ldr	r2, [pc, #492]	@ (10014f08 <MXC_I2C_RevA_SlaveAsyncHandler+0x2ac>)
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_STOP;
10014d1a:	2340      	movs	r3, #64	@ 0x40
10014d1c:	60a3      	str	r3, [r4, #8]
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014d1e:	4294      	cmp	r4, r2
            int_en[0] = 0;
10014d20:	f04f 0300 	mov.w	r3, #0
            int_en[1] = 0;
10014d24:	e9c6 3300 	strd	r3, r3, [r6]
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014d28:	d00a      	beq.n	10014d40 <MXC_I2C_RevA_SlaveAsyncHandler+0xe4>
10014d2a:	4b78      	ldr	r3, [pc, #480]	@ (10014f0c <MXC_I2C_RevA_SlaveAsyncHandler+0x2b0>)
10014d2c:	429c      	cmp	r4, r3
10014d2e:	f000 80e6 	beq.w	10014efe <MXC_I2C_RevA_SlaveAsyncHandler+0x2a2>
10014d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014d36:	429c      	cmp	r4, r3
10014d38:	bf0c      	ite	eq
10014d3a:	2302      	moveq	r3, #2
10014d3c:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014d40:	4a73      	ldr	r2, [pc, #460]	@ (10014f10 <MXC_I2C_RevA_SlaveAsyncHandler+0x2b4>)
10014d42:	2100      	movs	r1, #0
10014d44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH) {
10014d48:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
10014d4c:	d011      	beq.n	10014d72 <MXC_I2C_RevA_SlaveAsyncHandler+0x116>
        if (callback != NULL) {
10014d4e:	b11d      	cbz	r5, 10014d58 <MXC_I2C_RevA_SlaveAsyncHandler+0xfc>
            callback(i2c, MXC_I2C_REVA_EVT_MASTER_WR, NULL);
10014d50:	2200      	movs	r2, #0
10014d52:	4611      	mov	r1, r2
10014d54:	4620      	mov	r0, r4
10014d56:	47a8      	blx	r5
        }

        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH;
10014d58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
10014d5c:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10014d5e:	2308      	movs	r3, #8
10014d60:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10014d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
10014d66:	60a3      	str	r3, [r4, #8]

        int_en[0] = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE | MXC_I2C_REVA_ERROR;
        int_en[1] = MXC_F_I2C_REVA_INTFL1_RX_OV;
10014d68:	f647 7111 	movw	r1, #32529	@ 0x7f11
10014d6c:	2301      	movs	r3, #1
10014d6e:	e9c6 1300 	strd	r1, r3, [r6]
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH) {
10014d72:	f418 0f00 	tst.w	r8, #8388608	@ 0x800000
10014d76:	d00e      	beq.n	10014d96 <MXC_I2C_RevA_SlaveAsyncHandler+0x13a>
        if (callback != NULL) {
10014d78:	b11d      	cbz	r5, 10014d82 <MXC_I2C_RevA_SlaveAsyncHandler+0x126>
            callback(i2c, MXC_I2C_REVA_EVT_MASTER_RD, NULL);
10014d7a:	2200      	movs	r2, #0
10014d7c:	2101      	movs	r1, #1
10014d7e:	4620      	mov	r0, r4
10014d80:	47a8      	blx	r5
        }

        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH;
10014d82:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
10014d86:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10014d88:	2308      	movs	r3, #8
10014d8a:	60a3      	str	r3, [r4, #8]
        int_en[0] = MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT |
                    MXC_I2C_REVA_ERROR;
        int_en[1] = MXC_F_I2C_REVA_INTFL1_TX_UN;
10014d8c:	f64f 7220 	movw	r2, #65312	@ 0xff20
10014d90:	2302      	movs	r3, #2
10014d92:	e9c6 2300 	strd	r2, r3, [r6]
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_ADDR_MATCH) {
10014d96:	f018 0f08 	tst.w	r8, #8
10014d9a:	f000 80c9 	beq.w	10014f30 <MXC_I2C_RevA_SlaveAsyncHandler+0x2d4>
        if (readFlag & MXC_F_I2C_REVA_CTRL_READ) {
10014d9e:	f419 6200 	ands.w	r2, r9, #2048	@ 0x800
10014da2:	f000 80b7 	beq.w	10014f14 <MXC_I2C_RevA_SlaveAsyncHandler+0x2b8>
            if (callback != NULL) {
10014da6:	b11d      	cbz	r5, 10014db0 <MXC_I2C_RevA_SlaveAsyncHandler+0x154>
                callback(i2c, MXC_I2C_REVA_EVT_MASTER_RD, NULL);
10014da8:	2200      	movs	r2, #0
10014daa:	2101      	movs	r1, #1
10014dac:	4620      	mov	r0, r4
10014dae:	47a8      	blx	r5
            }

            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH;
10014db0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
10014db4:	60a3      	str	r3, [r4, #8]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10014db6:	2308      	movs	r3, #8
10014db8:	60a3      	str	r3, [r4, #8]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10014dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
10014dbe:	60a3      	str	r3, [r4, #8]

            int_en[0] = MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT |
10014dc0:	f64f 7320 	movw	r3, #65312	@ 0xff20
10014dc4:	6033      	str	r3, [r6, #0]
                        MXC_I2C_REVA_ERROR;
            int_en[1] = MXC_F_I2C_REVA_INTFL1_TX_UN;
10014dc6:	2302      	movs	r3, #2

            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH;
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
            int_en[0] = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE |
                        MXC_I2C_REVA_ERROR;
            int_en[1] = MXC_F_I2C_REVA_INTFL1_RX_OV;
10014dc8:	6073      	str	r3, [r6, #4]
        MXC_I2C_RevA_ClearRXFIFO(i2c);
        int_en[0] = 0;
        int_en[1] = 0;
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
    }
}
10014dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014dce:	2301      	movs	r3, #1
10014dd0:	e77f      	b.n	10014cd2 <MXC_I2C_RevA_SlaveAsyncHandler+0x76>
        if (int_en[0] & MXC_F_I2C_REVA_INTFL0_RX_THD || int_en[1] & MXC_F_I2C_REVA_INTFL1_RX_OV) {
10014dd2:	06d3      	lsls	r3, r2, #27
10014dd4:	d50e      	bpl.n	10014df4 <MXC_I2C_RevA_SlaveAsyncHandler+0x198>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_RX_THD) {
10014dd6:	f018 0f10 	tst.w	r8, #16
10014dda:	d10f      	bne.n	10014dfc <MXC_I2C_RevA_SlaveAsyncHandler+0x1a0>
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_RX_OV) {
10014ddc:	6923      	ldr	r3, [r4, #16]
10014dde:	07db      	lsls	r3, r3, #31
10014de0:	f57f af7b 	bpl.w	10014cda <MXC_I2C_RevA_SlaveAsyncHandler+0x7e>
                if (callback != NULL) {
10014de4:	b11d      	cbz	r5, 10014dee <MXC_I2C_RevA_SlaveAsyncHandler+0x192>
                    callback(i2c, MXC_I2C_REVA_EVT_OVERFLOW, NULL);
10014de6:	2200      	movs	r2, #0
10014de8:	2106      	movs	r1, #6
10014dea:	4620      	mov	r0, r4
10014dec:	47a8      	blx	r5
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_RX_OV;
10014dee:	2301      	movs	r3, #1
10014df0:	6123      	str	r3, [r4, #16]
10014df2:	e772      	b.n	10014cda <MXC_I2C_RevA_SlaveAsyncHandler+0x7e>
        if (int_en[0] & MXC_F_I2C_REVA_INTFL0_RX_THD || int_en[1] & MXC_F_I2C_REVA_INTFL1_RX_OV) {
10014df4:	6873      	ldr	r3, [r6, #4]
10014df6:	07d8      	lsls	r0, r3, #31
10014df8:	d4ed      	bmi.n	10014dd6 <MXC_I2C_RevA_SlaveAsyncHandler+0x17a>
10014dfa:	e76e      	b.n	10014cda <MXC_I2C_RevA_SlaveAsyncHandler+0x7e>
                if (callback != NULL) {
10014dfc:	2d00      	cmp	r5, #0
10014dfe:	d134      	bne.n	10014e6a <MXC_I2C_RevA_SlaveAsyncHandler+0x20e>
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10014e00:	2310      	movs	r3, #16
10014e02:	60a3      	str	r3, [r4, #8]
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_RX_OV) {
10014e04:	6923      	ldr	r3, [r4, #16]
10014e06:	07d9      	lsls	r1, r3, #31
10014e08:	d4f1      	bmi.n	10014dee <MXC_I2C_RevA_SlaveAsyncHandler+0x192>
        if (int_en[0] & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) ||
10014e0a:	6833      	ldr	r3, [r6, #0]
10014e0c:	f248 0220 	movw	r2, #32800	@ 0x8020
10014e10:	421a      	tst	r2, r3
10014e12:	f43f af67 	beq.w	10014ce4 <MXC_I2C_RevA_SlaveAsyncHandler+0x88>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10014e16:	f018 0f20 	tst.w	r8, #32
10014e1a:	f47f af6e 	bne.w	10014cfa <MXC_I2C_RevA_SlaveAsyncHandler+0x9e>
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_TX_UN) {
10014e1e:	6923      	ldr	r3, [r4, #16]
10014e20:	f013 0302 	ands.w	r3, r3, #2
10014e24:	d062      	beq.n	10014eec <MXC_I2C_RevA_SlaveAsyncHandler+0x290>
                if (callback != NULL) {
10014e26:	2d00      	cmp	r5, #0
10014e28:	d13b      	bne.n	10014ea2 <MXC_I2C_RevA_SlaveAsyncHandler+0x246>
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
10014e2a:	2302      	movs	r3, #2
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014e2c:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
10014e30:	6123      	str	r3, [r4, #16]
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014e32:	d03f      	beq.n	10014eb4 <MXC_I2C_RevA_SlaveAsyncHandler+0x258>
                *retVal = E_NO_ERROR;
10014e34:	2300      	movs	r3, #0
10014e36:	603b      	str	r3, [r7, #0]
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014e38:	4a33      	ldr	r2, [pc, #204]	@ (10014f08 <MXC_I2C_RevA_SlaveAsyncHandler+0x2ac>)
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10014e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
10014e3e:	60a3      	str	r3, [r4, #8]
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014e40:	4294      	cmp	r4, r2
                int_en[0] = 0;
10014e42:	f04f 0300 	mov.w	r3, #0
                int_en[1] = 0;
10014e46:	e9c6 3300 	strd	r3, r3, [r6]
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014e4a:	d009      	beq.n	10014e60 <MXC_I2C_RevA_SlaveAsyncHandler+0x204>
10014e4c:	4b2f      	ldr	r3, [pc, #188]	@ (10014f0c <MXC_I2C_RevA_SlaveAsyncHandler+0x2b0>)
10014e4e:	429c      	cmp	r4, r3
10014e50:	d053      	beq.n	10014efa <MXC_I2C_RevA_SlaveAsyncHandler+0x29e>
10014e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014e56:	429c      	cmp	r4, r3
10014e58:	bf0c      	ite	eq
10014e5a:	2302      	moveq	r3, #2
10014e5c:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014e60:	4a2b      	ldr	r2, [pc, #172]	@ (10014f10 <MXC_I2C_RevA_SlaveAsyncHandler+0x2b4>)
10014e62:	2100      	movs	r1, #0
10014e64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
10014e68:	e024      	b.n	10014eb4 <MXC_I2C_RevA_SlaveAsyncHandler+0x258>
                    callback(i2c, MXC_I2C_REVA_EVT_RX_THRESH, NULL);
10014e6a:	2200      	movs	r2, #0
10014e6c:	2102      	movs	r1, #2
10014e6e:	4620      	mov	r0, r4
10014e70:	47a8      	blx	r5
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10014e72:	2310      	movs	r3, #16
10014e74:	60a3      	str	r3, [r4, #8]
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_RX_OV) {
10014e76:	6923      	ldr	r3, [r4, #16]
10014e78:	07da      	lsls	r2, r3, #31
10014e7a:	d4b4      	bmi.n	10014de6 <MXC_I2C_RevA_SlaveAsyncHandler+0x18a>
        if (int_en[0] & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) ||
10014e7c:	6833      	ldr	r3, [r6, #0]
10014e7e:	f248 0220 	movw	r2, #32800	@ 0x8020
10014e82:	421a      	tst	r2, r3
10014e84:	f43f af2e 	beq.w	10014ce4 <MXC_I2C_RevA_SlaveAsyncHandler+0x88>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10014e88:	f018 0f20 	tst.w	r8, #32
10014e8c:	d0c7      	beq.n	10014e1e <MXC_I2C_RevA_SlaveAsyncHandler+0x1c2>
                    callback(i2c, MXC_I2C_REVA_EVT_TX_THRESH, NULL);
10014e8e:	2200      	movs	r2, #0
10014e90:	2103      	movs	r1, #3
10014e92:	4620      	mov	r0, r4
10014e94:	47a8      	blx	r5
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10014e96:	2320      	movs	r3, #32
10014e98:	60a3      	str	r3, [r4, #8]
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_TX_UN) {
10014e9a:	6923      	ldr	r3, [r4, #16]
10014e9c:	f013 0302 	ands.w	r3, r3, #2
10014ea0:	d017      	beq.n	10014ed2 <MXC_I2C_RevA_SlaveAsyncHandler+0x276>
                    callback(i2c, MXC_I2C_REVA_EVT_UNDERFLOW, NULL);
10014ea2:	2200      	movs	r2, #0
10014ea4:	2105      	movs	r1, #5
10014ea6:	4620      	mov	r0, r4
10014ea8:	47a8      	blx	r5
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
10014eaa:	2302      	movs	r3, #2
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014eac:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
10014eb0:	6123      	str	r3, [r4, #16]
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014eb2:	d107      	bne.n	10014ec4 <MXC_I2C_RevA_SlaveAsyncHandler+0x268>
        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
10014eb4:	f1ba 0f00 	cmp.w	sl, #0
10014eb8:	f43f af46 	beq.w	10014d48 <MXC_I2C_RevA_SlaveAsyncHandler+0xec>
            *retVal = E_NO_ERROR;
10014ebc:	2300      	movs	r3, #0
10014ebe:	603b      	str	r3, [r7, #0]
            if (callback != NULL) {
10014ec0:	b97d      	cbnz	r5, 10014ee2 <MXC_I2C_RevA_SlaveAsyncHandler+0x286>
10014ec2:	e729      	b.n	10014d18 <MXC_I2C_RevA_SlaveAsyncHandler+0xbc>
                *retVal = E_NO_ERROR;
10014ec4:	2300      	movs	r3, #0
10014ec6:	603b      	str	r3, [r7, #0]
                    callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10014ec8:	463a      	mov	r2, r7
10014eca:	2104      	movs	r1, #4
10014ecc:	4620      	mov	r0, r4
10014ece:	47a8      	blx	r5
10014ed0:	e7b2      	b.n	10014e38 <MXC_I2C_RevA_SlaveAsyncHandler+0x1dc>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014ed2:	f418 4200 	ands.w	r2, r8, #32768	@ 0x8000
10014ed6:	d1f6      	bne.n	10014ec6 <MXC_I2C_RevA_SlaveAsyncHandler+0x26a>
        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
10014ed8:	f1ba 0f00 	cmp.w	sl, #0
10014edc:	f43f af34 	beq.w	10014d48 <MXC_I2C_RevA_SlaveAsyncHandler+0xec>
            *retVal = E_NO_ERROR;
10014ee0:	603a      	str	r2, [r7, #0]
                callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10014ee2:	463a      	mov	r2, r7
10014ee4:	2104      	movs	r1, #4
10014ee6:	4620      	mov	r0, r4
10014ee8:	47a8      	blx	r5
10014eea:	e715      	b.n	10014d18 <MXC_I2C_RevA_SlaveAsyncHandler+0xbc>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014eec:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
10014ef0:	d0e0      	beq.n	10014eb4 <MXC_I2C_RevA_SlaveAsyncHandler+0x258>
                *retVal = E_NO_ERROR;
10014ef2:	603b      	str	r3, [r7, #0]
                if (callback != NULL) {
10014ef4:	2d00      	cmp	r5, #0
10014ef6:	d09f      	beq.n	10014e38 <MXC_I2C_RevA_SlaveAsyncHandler+0x1dc>
10014ef8:	e7e6      	b.n	10014ec8 <MXC_I2C_RevA_SlaveAsyncHandler+0x26c>
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014efa:	2301      	movs	r3, #1
10014efc:	e7b0      	b.n	10014e60 <MXC_I2C_RevA_SlaveAsyncHandler+0x204>
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014efe:	2301      	movs	r3, #1
10014f00:	e71e      	b.n	10014d40 <MXC_I2C_RevA_SlaveAsyncHandler+0xe4>
10014f02:	bf00      	nop
10014f04:	00c00008 	.word	0x00c00008
10014f08:	4001d000 	.word	0x4001d000
10014f0c:	4001e000 	.word	0x4001e000
10014f10:	20001140 	.word	0x20001140
            if (callback != NULL) {
10014f14:	b115      	cbz	r5, 10014f1c <MXC_I2C_RevA_SlaveAsyncHandler+0x2c0>
                callback(i2c, MXC_I2C_REVA_EVT_MASTER_WR, NULL);
10014f16:	4611      	mov	r1, r2
10014f18:	4620      	mov	r0, r4
10014f1a:	47a8      	blx	r5
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH;
10014f1c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
10014f20:	60a3      	str	r3, [r4, #8]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10014f22:	2308      	movs	r3, #8
10014f24:	60a3      	str	r3, [r4, #8]
            int_en[0] = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE |
10014f26:	f647 7311 	movw	r3, #32529	@ 0x7f11
10014f2a:	6033      	str	r3, [r6, #0]
            int_en[1] = MXC_F_I2C_REVA_INTFL1_RX_OV;
10014f2c:	2301      	movs	r3, #1
10014f2e:	e74b      	b.n	10014dc8 <MXC_I2C_RevA_SlaveAsyncHandler+0x16c>
    } else if (tFlags & MXC_I2C_REVA_ERROR) {
10014f30:	f418 4ffe 	tst.w	r8, #32512	@ 0x7f00
10014f34:	f43f af49 	beq.w	10014dca <MXC_I2C_RevA_SlaveAsyncHandler+0x16e>
        *retVal = E_COMM_ERR;
10014f38:	f06f 0308 	mvn.w	r3, #8
10014f3c:	603b      	str	r3, [r7, #0]
        if (callback != NULL) {
10014f3e:	b11d      	cbz	r5, 10014f48 <MXC_I2C_RevA_SlaveAsyncHandler+0x2ec>
            callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10014f40:	463a      	mov	r2, r7
10014f42:	2104      	movs	r1, #4
10014f44:	4620      	mov	r0, r4
10014f46:	47a8      	blx	r5
    i2c->intfl0 = flags0;
10014f48:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
10014f4c:	60a3      	str	r3, [r4, #8]
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014f4e:	4a0f      	ldr	r2, [pc, #60]	@ (10014f8c <MXC_I2C_RevA_SlaveAsyncHandler+0x330>)
    i2c->intfl1 = flags1;
10014f50:	2307      	movs	r3, #7
10014f52:	6123      	str	r3, [r4, #16]
        MXC_I2C_RevA_ClearTXFIFO(i2c);
10014f54:	4620      	mov	r0, r4
10014f56:	f7ff fc40 	bl	100147da <MXC_I2C_RevA_ClearTXFIFO>
        MXC_I2C_RevA_ClearRXFIFO(i2c);
10014f5a:	f7ff fc36 	bl	100147ca <MXC_I2C_RevA_ClearRXFIFO>
        int_en[0] = 0;
10014f5e:	2300      	movs	r3, #0
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014f60:	4294      	cmp	r4, r2
        int_en[1] = 0;
10014f62:	e9c6 3300 	strd	r3, r3, [r6]
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014f66:	d009      	beq.n	10014f7c <MXC_I2C_RevA_SlaveAsyncHandler+0x320>
10014f68:	4b09      	ldr	r3, [pc, #36]	@ (10014f90 <MXC_I2C_RevA_SlaveAsyncHandler+0x334>)
10014f6a:	429c      	cmp	r4, r3
10014f6c:	d00b      	beq.n	10014f86 <MXC_I2C_RevA_SlaveAsyncHandler+0x32a>
10014f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014f72:	429c      	cmp	r4, r3
10014f74:	bf14      	ite	ne
10014f76:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014f7a:	2302      	moveq	r3, #2
10014f7c:	4a05      	ldr	r2, [pc, #20]	@ (10014f94 <MXC_I2C_RevA_SlaveAsyncHandler+0x338>)
10014f7e:	2100      	movs	r1, #0
10014f80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
10014f84:	e721      	b.n	10014dca <MXC_I2C_RevA_SlaveAsyncHandler+0x16e>
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014f86:	2301      	movs	r3, #1
10014f88:	e7f8      	b.n	10014f7c <MXC_I2C_RevA_SlaveAsyncHandler+0x320>
10014f8a:	bf00      	nop
10014f8c:	4001d000 	.word	0x4001d000
10014f90:	4001e000 	.word	0x4001e000
10014f94:	20001140 	.word	0x20001140

10014f98 <MXC_I2C_RevA_AsyncHandler>:

void MXC_I2C_RevA_AsyncHandler(mxc_i2c_reva_regs_t *i2c, uint32_t interruptCheck)
{
10014f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int i2cNum = MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c);
10014f9a:	4b15      	ldr	r3, [pc, #84]	@ (10014ff0 <MXC_I2C_RevA_AsyncHandler+0x58>)
10014f9c:	4298      	cmp	r0, r3
{
10014f9e:	4604      	mov	r4, r0
    int i2cNum = MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c);
10014fa0:	d009      	beq.n	10014fb6 <MXC_I2C_RevA_AsyncHandler+0x1e>
10014fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014fa6:	4298      	cmp	r0, r3
10014fa8:	d00e      	beq.n	10014fc8 <MXC_I2C_RevA_AsyncHandler+0x30>
10014faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014fae:	4298      	cmp	r0, r3
10014fb0:	d11c      	bne.n	10014fec <MXC_I2C_RevA_AsyncHandler+0x54>
10014fb2:	2002      	movs	r0, #2
10014fb4:	e000      	b.n	10014fb8 <MXC_I2C_RevA_AsyncHandler+0x20>
10014fb6:	2000      	movs	r0, #0

    if (i2cNum < 0) {
        return;
    }

    if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_MST_MODE) {
10014fb8:	6823      	ldr	r3, [r4, #0]
10014fba:	079b      	lsls	r3, r3, #30
10014fbc:	d506      	bpl.n	10014fcc <MXC_I2C_RevA_AsyncHandler+0x34>
        MXC_I2C_RevA_SlaveAsyncHandler(i2c, callback, int_en, &slaveRetVal);

        i2c->inten0 = int_en[0];
        i2c->inten1 = int_en[1];
    }
}
10014fbe:	b004      	add	sp, #16
10014fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MXC_I2C_RevA_MasterAsyncHandler(i2cNum);
10014fc4:	f7ff bd92 	b.w	10014aec <MXC_I2C_RevA_MasterAsyncHandler>
    int i2cNum = MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c);
10014fc8:	2001      	movs	r0, #1
10014fca:	e7f5      	b.n	10014fb8 <MXC_I2C_RevA_AsyncHandler+0x20>
        int_en[0] = i2c->inten0;
10014fcc:	68e3      	ldr	r3, [r4, #12]
        MXC_I2C_RevA_SlaveAsyncHandler(i2c, callback, int_en, &slaveRetVal);
10014fce:	4909      	ldr	r1, [pc, #36]	@ (10014ff4 <MXC_I2C_RevA_AsyncHandler+0x5c>)
        int_en[0] = i2c->inten0;
10014fd0:	9302      	str	r3, [sp, #8]
        int_en[1] = i2c->inten1;
10014fd2:	6963      	ldr	r3, [r4, #20]
        MXC_I2C_RevA_SlaveAsyncHandler(i2c, callback, int_en, &slaveRetVal);
10014fd4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
        int_en[1] = i2c->inten1;
10014fd8:	9303      	str	r3, [sp, #12]
        MXC_I2C_RevA_SlaveAsyncHandler(i2c, callback, int_en, &slaveRetVal);
10014fda:	aa02      	add	r2, sp, #8
10014fdc:	ab01      	add	r3, sp, #4
10014fde:	4620      	mov	r0, r4
10014fe0:	f7ff fe3c 	bl	10014c5c <MXC_I2C_RevA_SlaveAsyncHandler>
        i2c->inten0 = int_en[0];
10014fe4:	9b02      	ldr	r3, [sp, #8]
10014fe6:	60e3      	str	r3, [r4, #12]
        i2c->inten1 = int_en[1];
10014fe8:	9b03      	ldr	r3, [sp, #12]
10014fea:	6163      	str	r3, [r4, #20]
}
10014fec:	b004      	add	sp, #16
10014fee:	bd10      	pop	{r4, pc}
10014ff0:	4001d000 	.word	0x4001d000
10014ff4:	20001140 	.word	0x20001140

10014ff8 <MXC_ICC_Enable>:
    return MXC_ICC_RevA_ID((mxc_icc_reva_regs_t *)icc, cid);
}

void MXC_ICC_Enable(mxc_icc_regs_t *icc)
{
    MXC_ICC_RevA_Enable((mxc_icc_reva_regs_t *)icc);
10014ff8:	f000 b802 	b.w	10015000 <MXC_ICC_RevA_Enable>

10014ffc <MXC_ICC_Disable>:
}

void MXC_ICC_Disable(mxc_icc_regs_t *icc)
{
    MXC_ICC_RevA_Disable((mxc_icc_reva_regs_t *)icc);
10014ffc:	f000 b818 	b.w	10015030 <MXC_ICC_RevA_Disable>

10015000 <MXC_ICC_RevA_Enable>:
}

void MXC_ICC_RevA_Enable(mxc_icc_reva_regs_t *icc)
{
    // Invalidate cache and wait until ready
    icc->ctrl &= ~MXC_F_ICC_REVA_CTRL_EN;
10015000:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
10015004:	f023 0301 	bic.w	r3, r3, #1
10015008:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
    icc->invalidate = 1;
1001500c:	2301      	movs	r3, #1
1001500e:	f8c0 3700 	str.w	r3, [r0, #1792]	@ 0x700
    return (icc->ctrl & MXC_F_ICC_REVA_CTRL_RDY);
10015012:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100

    while (!(MXC_ICC_Ready(icc))) {}
10015016:	03da      	lsls	r2, r3, #15
10015018:	d5fb      	bpl.n	10015012 <MXC_ICC_RevA_Enable+0x12>

    // Enable Cache
    icc->ctrl |= MXC_F_ICC_REVA_CTRL_EN;
1001501a:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
1001501e:	f043 0301 	orr.w	r3, r3, #1
10015022:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
    return (icc->ctrl & MXC_F_ICC_REVA_CTRL_RDY);
10015026:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
    while (!(MXC_ICC_Ready(icc))) {}
1001502a:	03db      	lsls	r3, r3, #15
1001502c:	d5fb      	bpl.n	10015026 <MXC_ICC_RevA_Enable+0x26>
}
1001502e:	4770      	bx	lr

10015030 <MXC_ICC_RevA_Disable>:

void MXC_ICC_RevA_Disable(mxc_icc_reva_regs_t *icc)
{
    // Disable Cache
    icc->ctrl &= ~MXC_F_ICC_REVA_CTRL_EN;
10015030:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
10015034:	f023 0301 	bic.w	r3, r3, #1
10015038:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
}
1001503c:	4770      	bx	lr

1001503e <MXC_TRNG_Init>:
/* ************************************************************************* */

/********************************************************/

int MXC_TRNG_Init()
{
1001503e:	b508      	push	{r3, lr}
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TRNG);
10015040:	2022      	movs	r0, #34	@ 0x22
10015042:	f7fe fd41 	bl	10013ac8 <MXC_SYS_ClockEnable>

    MXC_TRNG_RevB_Init();
10015046:	f000 f813 	bl	10015070 <MXC_TRNG_RevB_Init>

    return E_NO_ERROR;
}
1001504a:	2000      	movs	r0, #0
1001504c:	bd08      	pop	{r3, pc}

1001504e <MXC_TRNG_Shutdown>:
{
    MXC_TRNG_RevB_DisableInt((mxc_trng_revb_regs_t *)MXC_TRNG);
}

int MXC_TRNG_Shutdown(void)
{
1001504e:	b510      	push	{r4, lr}
    int error = MXC_TRNG_RevB_Shutdown();
10015050:	f000 f810 	bl	10015074 <MXC_TRNG_RevB_Shutdown>
10015054:	4604      	mov	r4, r0

    MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_TRNG);
10015056:	2022      	movs	r0, #34	@ 0x22
10015058:	f7fe fd16 	bl	10013a88 <MXC_SYS_ClockDisable>

    return error;
}
1001505c:	4620      	mov	r0, r4
1001505e:	bd10      	pop	{r4, pc}

10015060 <MXC_TRNG_RandomInt>:
/* True Random Number Generator (TRNG) functions                             */
/* ************************************************************************* */

int MXC_TRNG_RandomInt(void)
{
    return MXC_TRNG_RevB_RandomInt((mxc_trng_revb_regs_t *)MXC_TRNG);
10015060:	4801      	ldr	r0, [pc, #4]	@ (10015068 <MXC_TRNG_RandomInt+0x8>)
10015062:	f000 b809 	b.w	10015078 <MXC_TRNG_RevB_RandomInt>
10015066:	bf00      	nop
10015068:	4004d000 	.word	0x4004d000

1001506c <MXC_TRNG_Random>:
}

int MXC_TRNG_Random(uint8_t *data, uint32_t len)
{
    return MXC_TRNG_RevB_Random(data, len);
1001506c:	f000 b809 	b.w	10015082 <MXC_TRNG_RevB_Random>

10015070 <MXC_TRNG_RevB_Init>:
/* ************************************************************************* */

int MXC_TRNG_RevB_Init(void)
{
    return E_NO_ERROR;
}
10015070:	2000      	movs	r0, #0
10015072:	4770      	bx	lr

10015074 <MXC_TRNG_RevB_Shutdown>:
void MXC_TRNG_RevB_DisableInt(mxc_trng_revb_regs_t *trng)
{
    trng->ctrl &= ~MXC_F_TRNG_REVB_CTRL_RND_IE;
}

int MXC_TRNG_RevB_Shutdown(void)
10015074:	2000      	movs	r0, #0
10015076:	4770      	bx	lr

10015078 <MXC_TRNG_RevB_RandomInt>:
/* True Random Number Generator(TRNG) functions                             */
/* ************************************************************************* */

int MXC_TRNG_RevB_RandomInt(mxc_trng_revb_regs_t *trng)
{
    while (!(trng->status & MXC_F_TRNG_REVB_STATUS_RDY)) {}
10015078:	6843      	ldr	r3, [r0, #4]
1001507a:	07db      	lsls	r3, r3, #31
1001507c:	d5fc      	bpl.n	10015078 <MXC_TRNG_RevB_RandomInt>

    return (int)trng->data;
1001507e:	6880      	ldr	r0, [r0, #8]
}
10015080:	4770      	bx	lr

10015082 <MXC_TRNG_RevB_Random>:

int MXC_TRNG_RevB_Random(uint8_t *data, uint32_t len)
{
10015082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015084:	460c      	mov	r4, r1
    unsigned int i, temp;

    if (data == NULL) {
10015086:	4606      	mov	r6, r0
10015088:	b1c8      	cbz	r0, 100150be <MXC_TRNG_RevB_Random+0x3c>
1001508a:	f021 0703 	bic.w	r7, r1, #3
        return E_NULL_PTR;
    }

    for (i = 0; (i + 3) < len; i += 4) {
1001508e:	2500      	movs	r5, #0
10015090:	42bd      	cmp	r5, r7
10015092:	d105      	bne.n	100150a0 <MXC_TRNG_RevB_Random+0x1e>
        temp = MXC_TRNG_RandomInt();
        memcpy(&(data[i]), (uint8_t *)(&temp), 4);
    }

    if (len & 0x03) {
10015094:	f014 0403 	ands.w	r4, r4, #3
10015098:	d108      	bne.n	100150ac <MXC_TRNG_RevB_Random+0x2a>
        temp = MXC_TRNG_RandomInt();
        memcpy(&(data[i]), (uint8_t *)(&temp), len & 0x03);
    }

    return E_NO_ERROR;
1001509a:	2000      	movs	r0, #0
}
1001509c:	b003      	add	sp, #12
1001509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = MXC_TRNG_RandomInt();
100150a0:	f7ff ffde 	bl	10015060 <MXC_TRNG_RandomInt>
        memcpy(&(data[i]), (uint8_t *)(&temp), 4);
100150a4:	5170      	str	r0, [r6, r5]
        temp = MXC_TRNG_RandomInt();
100150a6:	9001      	str	r0, [sp, #4]
    for (i = 0; (i + 3) < len; i += 4) {
100150a8:	3504      	adds	r5, #4
100150aa:	e7f1      	b.n	10015090 <MXC_TRNG_RevB_Random+0xe>
        temp = MXC_TRNG_RandomInt();
100150ac:	f7ff ffd8 	bl	10015060 <MXC_TRNG_RandomInt>
        memcpy(&(data[i]), (uint8_t *)(&temp), len & 0x03);
100150b0:	4622      	mov	r2, r4
        temp = MXC_TRNG_RandomInt();
100150b2:	9001      	str	r0, [sp, #4]
        memcpy(&(data[i]), (uint8_t *)(&temp), len & 0x03);
100150b4:	a901      	add	r1, sp, #4
100150b6:	1970      	adds	r0, r6, r5
100150b8:	f005 f802 	bl	1001a0c0 <memcpy>
100150bc:	e7ed      	b.n	1001509a <MXC_TRNG_RevB_Random+0x18>
        return E_NULL_PTR;
100150be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100150c2:	e7eb      	b.n	1001509c <MXC_TRNG_RevB_Random+0x1a>

100150c4 <MXC_UART_GetFrequency.part.0>:
        return E_BAD_PARAM;
    }

    // check if UARt is LP UART
    if (uart == MXC_UART3) {
        if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) == MXC_S_UART_CTRL_BCLKSRC_EXTERNAL_CLOCK) {
100150c4:	4b09      	ldr	r3, [pc, #36]	@ (100150ec <MXC_UART_GetFrequency.part.0+0x28>)
100150c6:	6818      	ldr	r0, [r3, #0]
100150c8:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
100150cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
100150d0:	d005      	beq.n	100150de <MXC_UART_GetFrequency.part.0+0x1a>
            periphClock = ERTCO_FREQ * 2;
        } else if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) ==
100150d2:	681a      	ldr	r2, [r3, #0]
100150d4:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
100150d8:	d105      	bne.n	100150e6 <MXC_UART_GetFrequency.part.0+0x22>
                   MXC_S_UART_CTRL_BCLKSRC_PERIPHERAL_CLOCK) {
            periphClock = IBRO_FREQ;
100150da:	f44f 00e1 	mov.w	r0, #7372800	@ 0x708000
        } else {
            return E_BAD_PARAM;
        }
        return (periphClock / uart->clkdiv);
100150de:	691b      	ldr	r3, [r3, #16]
100150e0:	fbb0 f0f3 	udiv	r0, r0, r3
100150e4:	4770      	bx	lr
        return E_BAD_PARAM;
100150e6:	f06f 0002 	mvn.w	r0, #2
    } else {
        return MXC_UART_RevB_GetFrequency((mxc_uart_revb_regs_t *)uart);
    }
}
100150ea:	4770      	bx	lr
100150ec:	40081400 	.word	0x40081400

100150f0 <MXC_UART_Shutdown>:
{
100150f0:	b508      	push	{r3, lr}
    switch (MXC_UART_GET_IDX(uart)) {
100150f2:	4b13      	ldr	r3, [pc, #76]	@ (10015140 <MXC_UART_Shutdown+0x50>)
100150f4:	4298      	cmp	r0, r3
100150f6:	d107      	bne.n	10015108 <MXC_UART_Shutdown+0x18>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART0);
100150f8:	200b      	movs	r0, #11
100150fa:	f7fe fd57 	bl	10013bac <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART0);
100150fe:	2009      	movs	r0, #9
10015100:	f7fe fcc2 	bl	10013a88 <MXC_SYS_ClockDisable>
    return E_NO_ERROR;
10015104:	2000      	movs	r0, #0
}
10015106:	bd08      	pop	{r3, pc}
    switch (MXC_UART_GET_IDX(uart)) {
10015108:	4b0e      	ldr	r3, [pc, #56]	@ (10015144 <MXC_UART_Shutdown+0x54>)
1001510a:	4298      	cmp	r0, r3
1001510c:	d104      	bne.n	10015118 <MXC_UART_Shutdown+0x28>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART1);
1001510e:	200c      	movs	r0, #12
10015110:	f7fe fd4c 	bl	10013bac <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART1);
10015114:	200a      	movs	r0, #10
10015116:	e7f3      	b.n	10015100 <MXC_UART_Shutdown+0x10>
    switch (MXC_UART_GET_IDX(uart)) {
10015118:	4b0b      	ldr	r3, [pc, #44]	@ (10015148 <MXC_UART_Shutdown+0x58>)
1001511a:	4298      	cmp	r0, r3
1001511c:	d104      	bne.n	10015128 <MXC_UART_Shutdown+0x38>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART2);
1001511e:	201c      	movs	r0, #28
10015120:	f7fe fd44 	bl	10013bac <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART2);
10015124:	2021      	movs	r0, #33	@ 0x21
10015126:	e7eb      	b.n	10015100 <MXC_UART_Shutdown+0x10>
    switch (MXC_UART_GET_IDX(uart)) {
10015128:	4b08      	ldr	r3, [pc, #32]	@ (1001514c <MXC_UART_Shutdown+0x5c>)
1001512a:	4298      	cmp	r0, r3
1001512c:	d104      	bne.n	10015138 <MXC_UART_Shutdown+0x48>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET_UART3);
1001512e:	2044      	movs	r0, #68	@ 0x44
10015130:	f7fe fd3c 	bl	10013bac <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART3);
10015134:	2044      	movs	r0, #68	@ 0x44
10015136:	e7e3      	b.n	10015100 <MXC_UART_Shutdown+0x10>
        return E_BAD_PARAM;
10015138:	f06f 0002 	mvn.w	r0, #2
1001513c:	e7e3      	b.n	10015106 <MXC_UART_Shutdown+0x16>
1001513e:	bf00      	nop
10015140:	40042000 	.word	0x40042000
10015144:	40043000 	.word	0x40043000
10015148:	40044000 	.word	0x40044000
1001514c:	40081400 	.word	0x40081400

10015150 <MXC_UART_Init>:
{
10015150:	b570      	push	{r4, r5, r6, lr}
10015152:	4604      	mov	r4, r0
10015154:	460e      	mov	r6, r1
10015156:	4615      	mov	r5, r2
    retval = MXC_UART_Shutdown(uart);
10015158:	f7ff ffca 	bl	100150f0 <MXC_UART_Shutdown>
    if (retval) {
1001515c:	bb90      	cbnz	r0, 100151c4 <MXC_UART_Init+0x74>
    switch (clock) {
1001515e:	2d02      	cmp	r5, #2
10015160:	d014      	beq.n	1001518c <MXC_UART_Init+0x3c>
10015162:	2d04      	cmp	r5, #4
10015164:	d102      	bne.n	1001516c <MXC_UART_Init+0x1c>
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_ERTCO);
10015166:	2006      	movs	r0, #6
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_IBRO);
10015168:	f7fe fce8 	bl	10013b3c <MXC_SYS_ClockSourceEnable>
    switch (MXC_UART_GET_IDX(uart)) {
1001516c:	4b16      	ldr	r3, [pc, #88]	@ (100151c8 <MXC_UART_Init+0x78>)
1001516e:	429c      	cmp	r4, r3
10015170:	d10e      	bne.n	10015190 <MXC_UART_Init+0x40>
        MXC_GPIO_Config(&gpio_cfg_uart0);
10015172:	4816      	ldr	r0, [pc, #88]	@ (100151cc <MXC_UART_Init+0x7c>)
10015174:	f7ff f860 	bl	10014238 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART0);
10015178:	2009      	movs	r0, #9
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART3);
1001517a:	f7fe fca5 	bl	10013ac8 <MXC_SYS_ClockEnable>
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
1001517e:	462a      	mov	r2, r5
10015180:	4631      	mov	r1, r6
10015182:	4620      	mov	r0, r4
}
10015184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
10015188:	f000 b8ca 	b.w	10015320 <MXC_UART_RevB_Init>
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_IBRO);
1001518c:	2005      	movs	r0, #5
1001518e:	e7eb      	b.n	10015168 <MXC_UART_Init+0x18>
    switch (MXC_UART_GET_IDX(uart)) {
10015190:	4b0f      	ldr	r3, [pc, #60]	@ (100151d0 <MXC_UART_Init+0x80>)
10015192:	429c      	cmp	r4, r3
10015194:	d104      	bne.n	100151a0 <MXC_UART_Init+0x50>
        MXC_GPIO_Config(&gpio_cfg_uart1);
10015196:	480f      	ldr	r0, [pc, #60]	@ (100151d4 <MXC_UART_Init+0x84>)
10015198:	f7ff f84e 	bl	10014238 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART1);
1001519c:	200a      	movs	r0, #10
1001519e:	e7ec      	b.n	1001517a <MXC_UART_Init+0x2a>
    switch (MXC_UART_GET_IDX(uart)) {
100151a0:	4b0d      	ldr	r3, [pc, #52]	@ (100151d8 <MXC_UART_Init+0x88>)
100151a2:	429c      	cmp	r4, r3
100151a4:	d104      	bne.n	100151b0 <MXC_UART_Init+0x60>
        MXC_GPIO_Config(&gpio_cfg_uart2);
100151a6:	480d      	ldr	r0, [pc, #52]	@ (100151dc <MXC_UART_Init+0x8c>)
100151a8:	f7ff f846 	bl	10014238 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART2);
100151ac:	2021      	movs	r0, #33	@ 0x21
100151ae:	e7e4      	b.n	1001517a <MXC_UART_Init+0x2a>
    switch (MXC_UART_GET_IDX(uart)) {
100151b0:	4b0b      	ldr	r3, [pc, #44]	@ (100151e0 <MXC_UART_Init+0x90>)
100151b2:	429c      	cmp	r4, r3
100151b4:	d104      	bne.n	100151c0 <MXC_UART_Init+0x70>
        MXC_GPIO_Config(&gpio_cfg_uart3);
100151b6:	480b      	ldr	r0, [pc, #44]	@ (100151e4 <MXC_UART_Init+0x94>)
100151b8:	f7ff f83e 	bl	10014238 <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART3);
100151bc:	2044      	movs	r0, #68	@ 0x44
100151be:	e7dc      	b.n	1001517a <MXC_UART_Init+0x2a>
        return E_BAD_PARAM;
100151c0:	f06f 0002 	mvn.w	r0, #2
}
100151c4:	bd70      	pop	{r4, r5, r6, pc}
100151c6:	bf00      	nop
100151c8:	40042000 	.word	0x40042000
100151cc:	1002c0f4 	.word	0x1002c0f4
100151d0:	40043000 	.word	0x40043000
100151d4:	1002c0e8 	.word	0x1002c0e8
100151d8:	40044000 	.word	0x40044000
100151dc:	1002c0dc 	.word	0x1002c0dc
100151e0:	40081400 	.word	0x40081400
100151e4:	1002c0d0 	.word	0x1002c0d0

100151e8 <MXC_UART_SetFrequency>:
    if (MXC_UART_GET_IDX(uart) < 0) {
100151e8:	4b28      	ldr	r3, [pc, #160]	@ (1001528c <MXC_UART_SetFrequency+0xa4>)
100151ea:	4298      	cmp	r0, r3
{
100151ec:	b510      	push	{r4, lr}
100151ee:	4604      	mov	r4, r0
    if (MXC_UART_GET_IDX(uart) < 0) {
100151f0:	d046      	beq.n	10015280 <MXC_UART_SetFrequency+0x98>
100151f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100151f6:	4298      	cmp	r0, r3
100151f8:	d042      	beq.n	10015280 <MXC_UART_SetFrequency+0x98>
100151fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100151fe:	4298      	cmp	r0, r3
10015200:	d03e      	beq.n	10015280 <MXC_UART_SetFrequency+0x98>
10015202:	4823      	ldr	r0, [pc, #140]	@ (10015290 <MXC_UART_SetFrequency+0xa8>)
10015204:	4284      	cmp	r4, r0
10015206:	d106      	bne.n	10015216 <MXC_UART_SetFrequency+0x2e>
        uart->osr = 5;
10015208:	2305      	movs	r3, #5
        switch (clock) {
1001520a:	2a02      	cmp	r2, #2
        uart->osr = 5;
1001520c:	6163      	str	r3, [r4, #20]
        switch (clock) {
1001520e:	d005      	beq.n	1001521c <MXC_UART_SetFrequency+0x34>
10015210:	2a04      	cmp	r2, #4
10015212:	d01d      	beq.n	10015250 <MXC_UART_SetFrequency+0x68>
10015214:	b112      	cbz	r2, 1001521c <MXC_UART_SetFrequency+0x34>
        return E_BAD_PARAM;
10015216:	f06f 0002 	mvn.w	r0, #2
}
1001521a:	bd10      	pop	{r4, pc}
            clkDiv = ((IBRO_FREQ) / baud);
1001521c:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
10015220:	fbb3 f3f1 	udiv	r3, r3, r1
            mod = ((IBRO_FREQ) % baud);
10015224:	fb01 f203 	mul.w	r2, r1, r3
10015228:	f5c2 02e1 	rsb	r2, r2, #7372800	@ 0x708000
        if (!clkDiv || mod > (baud / 2)) {
1001522c:	b113      	cbz	r3, 10015234 <MXC_UART_SetFrequency+0x4c>
1001522e:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
10015232:	d900      	bls.n	10015236 <MXC_UART_SetFrequency+0x4e>
            clkDiv++;
10015234:	3301      	adds	r3, #1
        uart->clkdiv = clkDiv;
10015236:	6103      	str	r3, [r0, #16]
    if (MXC_UART_GET_IDX(uart) < 0) {
10015238:	f7ff ff44 	bl	100150c4 <MXC_UART_GetFrequency.part.0>
    if (frequency > 0) {
1001523c:	2800      	cmp	r0, #0
1001523e:	ddec      	ble.n	1001521a <MXC_UART_SetFrequency+0x32>
        uart->ctrl |= MXC_F_UART_CTRL_BCLKEN;
10015240:	6823      	ldr	r3, [r4, #0]
10015242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
10015246:	6023      	str	r3, [r4, #0]
        while (((uart->ctrl & MXC_F_UART_CTRL_BCLKRDY) >> MXC_F_UART_CTRL_BCLKRDY_POS) == 0) {}
10015248:	6823      	ldr	r3, [r4, #0]
1001524a:	031b      	lsls	r3, r3, #12
1001524c:	d5fc      	bpl.n	10015248 <MXC_UART_SetFrequency+0x60>
1001524e:	e7e4      	b.n	1001521a <MXC_UART_SetFrequency+0x32>
            uart->ctrl |= MXC_S_UART_CTRL_BCLKSRC_EXTERNAL_CLOCK;
10015250:	6823      	ldr	r3, [r4, #0]
10015252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10015256:	6023      	str	r3, [r4, #0]
            uart->ctrl |= MXC_F_UART_CTRL_FDM;
10015258:	6823      	ldr	r3, [r4, #0]
            if (baud > 2400) {
1001525a:	f5b1 6f16 	cmp.w	r1, #2400	@ 0x960
            uart->ctrl |= MXC_F_UART_CTRL_FDM;
1001525e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
10015262:	6023      	str	r3, [r4, #0]
            if (baud > 2400) {
10015264:	d90a      	bls.n	1001527c <MXC_UART_SetFrequency+0x94>
                uart->osr = 0;
10015266:	2300      	movs	r3, #0
10015268:	6163      	str	r3, [r4, #20]
            clkDiv = ((ERTCO_FREQ * 2) / baud);
1001526a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
1001526e:	fbb3 f3f1 	udiv	r3, r3, r1
            mod = ((ERTCO_FREQ * 2) % baud);
10015272:	fb01 f203 	mul.w	r2, r1, r3
10015276:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
1001527a:	e7d7      	b.n	1001522c <MXC_UART_SetFrequency+0x44>
                uart->osr = 1;
1001527c:	2301      	movs	r3, #1
1001527e:	e7f3      	b.n	10015268 <MXC_UART_SetFrequency+0x80>
        if (clock == MXC_UART_ERTCO_CLK) {
10015280:	2a04      	cmp	r2, #4
10015282:	d0c8      	beq.n	10015216 <MXC_UART_SetFrequency+0x2e>
        frequency = MXC_UART_RevB_SetFrequency((mxc_uart_revb_regs_t *)uart, baud, clock);
10015284:	4620      	mov	r0, r4
10015286:	f000 f87f 	bl	10015388 <MXC_UART_RevB_SetFrequency>
1001528a:	e7d7      	b.n	1001523c <MXC_UART_SetFrequency+0x54>
1001528c:	40042000 	.word	0x40042000
10015290:	40081400 	.word	0x40081400

10015294 <MXC_UART_GetFrequency>:
    if (MXC_UART_GET_IDX(uart) < 0) {
10015294:	4b0a      	ldr	r3, [pc, #40]	@ (100152c0 <MXC_UART_GetFrequency+0x2c>)
10015296:	4298      	cmp	r0, r3
10015298:	d00d      	beq.n	100152b6 <MXC_UART_GetFrequency+0x22>
1001529a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001529e:	4298      	cmp	r0, r3
100152a0:	d009      	beq.n	100152b6 <MXC_UART_GetFrequency+0x22>
100152a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100152a6:	4298      	cmp	r0, r3
100152a8:	d005      	beq.n	100152b6 <MXC_UART_GetFrequency+0x22>
100152aa:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100152ae:	4298      	cmp	r0, r3
100152b0:	d103      	bne.n	100152ba <MXC_UART_GetFrequency+0x26>
100152b2:	f7ff bf07 	b.w	100150c4 <MXC_UART_GetFrequency.part.0>
        return MXC_UART_RevB_GetFrequency((mxc_uart_revb_regs_t *)uart);
100152b6:	f000 b8ab 	b.w	10015410 <MXC_UART_RevB_GetFrequency>
}
100152ba:	f06f 0002 	mvn.w	r0, #2
100152be:	4770      	bx	lr
100152c0:	40042000 	.word	0x40042000

100152c4 <MXC_UART_SetDataSize>:

int MXC_UART_SetDataSize(mxc_uart_regs_t *uart, int dataSize)
{
    return MXC_UART_RevB_SetDataSize((mxc_uart_revb_regs_t *)uart, dataSize);
100152c4:	f000 b8da 	b.w	1001547c <MXC_UART_RevB_SetDataSize>

100152c8 <MXC_UART_SetStopBits>:
}

int MXC_UART_SetStopBits(mxc_uart_regs_t *uart, mxc_uart_stop_t stopBits)
{
    return MXC_UART_RevB_SetStopBits((mxc_uart_revb_regs_t *)uart, stopBits);
100152c8:	f000 b8f8 	b.w	100154bc <MXC_UART_RevB_SetStopBits>

100152cc <MXC_UART_SetParity>:
}

int MXC_UART_SetParity(mxc_uart_regs_t *uart, mxc_uart_parity_t parity)
{
    return MXC_UART_RevB_SetParity((mxc_uart_revb_regs_t *)uart, parity);
100152cc:	f000 b918 	b.w	10015500 <MXC_UART_RevB_SetParity>

100152d0 <MXC_UART_ReadCharacterRaw>:
    return MXC_UART_RevB_AbortTransmission((mxc_uart_revb_regs_t *)uart);
}

int MXC_UART_ReadCharacterRaw(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_ReadCharacterRaw((mxc_uart_revb_regs_t *)uart);
100152d0:	f000 b960 	b.w	10015594 <MXC_UART_RevB_ReadCharacterRaw>

100152d4 <MXC_UART_WriteCharacterRaw>:
}

int MXC_UART_WriteCharacterRaw(mxc_uart_regs_t *uart, uint8_t character)
{
    return MXC_UART_RevB_WriteCharacterRaw((mxc_uart_revb_regs_t *)uart, character);
100152d4:	f000 b97a 	b.w	100155cc <MXC_UART_RevB_WriteCharacterRaw>

100152d8 <MXC_UART_ReadCharacter>:
}

int MXC_UART_ReadCharacter(mxc_uart_regs_t *uart)
{
    return MXC_UART_Common_ReadCharacter(uart);
100152d8:	f000 b808 	b.w	100152ec <MXC_UART_Common_ReadCharacter>

100152dc <MXC_UART_WriteCharacter>:
}

int MXC_UART_WriteCharacter(mxc_uart_regs_t *uart, uint8_t character)
{
    return MXC_UART_Common_WriteCharacter(uart, character);
100152dc:	f000 b812 	b.w	10015304 <MXC_UART_Common_WriteCharacter>

100152e0 <MXC_UART_GetRXFIFOAvailable>:
    return MXC_UART_RevB_ReadRXFIFODMA((mxc_uart_revb_regs_t *)uart, bytes, len, callback, config);
}

unsigned int MXC_UART_GetRXFIFOAvailable(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_GetRXFIFOAvailable((mxc_uart_revb_regs_t *)uart);
100152e0:	f000 b992 	b.w	10015608 <MXC_UART_RevB_GetRXFIFOAvailable>

100152e4 <MXC_UART_GetTXFIFOAvailable>:
    return MXC_UART_RevB_WriteTXFIFODMA((mxc_uart_revb_regs_t *)uart, bytes, len, callback, config);
}

unsigned int MXC_UART_GetTXFIFOAvailable(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_GetTXFIFOAvailable((mxc_uart_revb_regs_t *)uart);
100152e4:	f000 b994 	b.w	10015610 <MXC_UART_RevB_GetTXFIFOAvailable>

100152e8 <MXC_UART_SetRXThreshold>:
    return MXC_UART_RevB_ClearTXFIFO((mxc_uart_revb_regs_t *)uart);
}

int MXC_UART_SetRXThreshold(mxc_uart_regs_t *uart, unsigned int numBytes)
{
    return MXC_UART_RevB_SetRXThreshold((mxc_uart_revb_regs_t *)uart, numBytes);
100152e8:	f000 b998 	b.w	1001561c <MXC_UART_RevB_SetRXThreshold>

100152ec <MXC_UART_Common_ReadCharacter>:

#include "uart_common.h"
#include "uart.h"

int MXC_UART_Common_ReadCharacter(mxc_uart_regs_t *uart)
{
100152ec:	b510      	push	{r4, lr}
100152ee:	4604      	mov	r4, r0
    // Wait until FIFO has a character ready.
    while (MXC_UART_GetRXFIFOAvailable(uart) < 1) {}
100152f0:	4620      	mov	r0, r4
100152f2:	f7ff fff5 	bl	100152e0 <MXC_UART_GetRXFIFOAvailable>
100152f6:	2800      	cmp	r0, #0
100152f8:	d0fa      	beq.n	100152f0 <MXC_UART_Common_ReadCharacter+0x4>

    // Read the character using the non-blocking function.
    return MXC_UART_ReadCharacterRaw(uart);
100152fa:	4620      	mov	r0, r4
}
100152fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_UART_ReadCharacterRaw(uart);
10015300:	f7ff bfe6 	b.w	100152d0 <MXC_UART_ReadCharacterRaw>

10015304 <MXC_UART_Common_WriteCharacter>:

int MXC_UART_Common_WriteCharacter(mxc_uart_regs_t *uart, uint8_t character)
{
10015304:	b538      	push	{r3, r4, r5, lr}
10015306:	4604      	mov	r4, r0
10015308:	460d      	mov	r5, r1
    // Wait until FIFO has space for the character.
    while (MXC_UART_GetTXFIFOAvailable(uart) < 1) {}
1001530a:	4620      	mov	r0, r4
1001530c:	f7ff ffea 	bl	100152e4 <MXC_UART_GetTXFIFOAvailable>
10015310:	2800      	cmp	r0, #0
10015312:	d0fa      	beq.n	1001530a <MXC_UART_Common_WriteCharacter+0x6>

    // Write the character using the non-blocking function.
    return MXC_UART_WriteCharacterRaw(uart, character);
10015314:	4629      	mov	r1, r5
10015316:	4620      	mov	r0, r4
}
10015318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return MXC_UART_WriteCharacterRaw(uart, character);
1001531c:	f7ff bfda 	b.w	100152d4 <MXC_UART_WriteCharacterRaw>

10015320 <MXC_UART_RevB_Init>:
/* ************************************************************************* */
int MXC_UART_RevB_Init(mxc_uart_revb_regs_t *uart, unsigned int baud, mxc_uart_revb_clock_t clock)
{
    int err;

    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10015320:	4b18      	ldr	r3, [pc, #96]	@ (10015384 <MXC_UART_RevB_Init+0x64>)
10015322:	4298      	cmp	r0, r3
{
10015324:	b570      	push	{r4, r5, r6, lr}
10015326:	4604      	mov	r4, r0
10015328:	460d      	mov	r5, r1
1001532a:	4616      	mov	r6, r2
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001532c:	d00b      	beq.n	10015346 <MXC_UART_RevB_Init+0x26>
1001532e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10015332:	4298      	cmp	r0, r3
10015334:	d007      	beq.n	10015346 <MXC_UART_RevB_Init+0x26>
10015336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001533a:	4298      	cmp	r0, r3
1001533c:	d003      	beq.n	10015346 <MXC_UART_RevB_Init+0x26>
1001533e:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10015342:	4298      	cmp	r0, r3
10015344:	d11b      	bne.n	1001537e <MXC_UART_RevB_Init+0x5e>
        return E_BAD_PARAM;
    }

    // Initialize UART
    if ((err = MXC_UART_SetRXThreshold((mxc_uart_regs_t *)uart, 1)) !=
10015346:	2101      	movs	r1, #1
10015348:	4620      	mov	r0, r4
1001534a:	f7ff ffcd 	bl	100152e8 <MXC_UART_SetRXThreshold>
1001534e:	b9a8      	cbnz	r0, 1001537c <MXC_UART_RevB_Init+0x5c>
        E_NO_ERROR) { // Set RX threshold to 1 byte
        return err;
    }

    if ((err = MXC_UART_SetDataSize((mxc_uart_regs_t *)uart, 8)) !=
10015350:	2108      	movs	r1, #8
10015352:	4620      	mov	r0, r4
10015354:	f7ff ffb6 	bl	100152c4 <MXC_UART_SetDataSize>
10015358:	b980      	cbnz	r0, 1001537c <MXC_UART_RevB_Init+0x5c>
        E_NO_ERROR) { // Set Datasize to 8 bits
        return err;
    }

    if ((err = MXC_UART_SetParity((mxc_uart_regs_t *)uart, MXC_UART_PARITY_DISABLE)) !=
1001535a:	4601      	mov	r1, r0
1001535c:	4620      	mov	r0, r4
1001535e:	f7ff ffb5 	bl	100152cc <MXC_UART_SetParity>
10015362:	b958      	cbnz	r0, 1001537c <MXC_UART_RevB_Init+0x5c>
        E_NO_ERROR) {
        return err;
    }

    if ((err = MXC_UART_SetStopBits((mxc_uart_regs_t *)uart, MXC_UART_STOP_1)) != E_NO_ERROR) {
10015364:	4601      	mov	r1, r0
10015366:	4620      	mov	r0, r4
10015368:	f7ff ffae 	bl	100152c8 <MXC_UART_SetStopBits>
1001536c:	b930      	cbnz	r0, 1001537c <MXC_UART_RevB_Init+0x5c>
        return err;
    }

    if ((err = MXC_UART_SetFrequency((mxc_uart_regs_t *)uart, baud, (mxc_uart_clock_t)clock)) <
1001536e:	4632      	mov	r2, r6
10015370:	4629      	mov	r1, r5
10015372:	4620      	mov	r0, r4
10015374:	f7ff ff38 	bl	100151e8 <MXC_UART_SetFrequency>
10015378:	ea00 70e0 	and.w	r0, r0, r0, asr #31
        E_NO_ERROR) {
        return err;
    }

    return E_NO_ERROR;
}
1001537c:	bd70      	pop	{r4, r5, r6, pc}
        return E_BAD_PARAM;
1001537e:	f06f 0002 	mvn.w	r0, #2
10015382:	e7fb      	b.n	1001537c <MXC_UART_RevB_Init+0x5c>
10015384:	40042000 	.word	0x40042000

10015388 <MXC_UART_RevB_SetFrequency>:

int MXC_UART_RevB_SetFrequency(mxc_uart_revb_regs_t *uart, unsigned int baud,
                               mxc_uart_revb_clock_t clock)
{
    unsigned clkDiv = 0, mod = 0;
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10015388:	4b1e      	ldr	r3, [pc, #120]	@ (10015404 <MXC_UART_RevB_SetFrequency+0x7c>)
1001538a:	4298      	cmp	r0, r3
{
1001538c:	b410      	push	{r4}
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001538e:	d00b      	beq.n	100153a8 <MXC_UART_RevB_SetFrequency+0x20>
10015390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10015394:	4298      	cmp	r0, r3
10015396:	d007      	beq.n	100153a8 <MXC_UART_RevB_SetFrequency+0x20>
10015398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001539c:	4298      	cmp	r0, r3
1001539e:	d003      	beq.n	100153a8 <MXC_UART_RevB_SetFrequency+0x20>
100153a0:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100153a4:	4298      	cmp	r0, r3
100153a6:	d129      	bne.n	100153fc <MXC_UART_RevB_SetFrequency+0x74>
        return E_BAD_PARAM;
    }

    // OSR default value
    uart->osr = 5;
100153a8:	2305      	movs	r3, #5

    switch (clock) {
100153aa:	2a01      	cmp	r2, #1
    uart->osr = 5;
100153ac:	6143      	str	r3, [r0, #20]
    switch (clock) {
100153ae:	d012      	beq.n	100153d6 <MXC_UART_RevB_SetFrequency+0x4e>
100153b0:	2a02      	cmp	r2, #2
100153b2:	d016      	beq.n	100153e2 <MXC_UART_RevB_SetFrequency+0x5a>
100153b4:	bb12      	cbnz	r2, 100153fc <MXC_UART_RevB_SetFrequency+0x74>
    case MXC_UART_REVB_APB_CLK:
        clkDiv = (PeripheralClock / baud);
100153b6:	4b14      	ldr	r3, [pc, #80]	@ (10015408 <MXC_UART_RevB_SetFrequency+0x80>)
100153b8:	681b      	ldr	r3, [r3, #0]
100153ba:	085b      	lsrs	r3, r3, #1
        mod = (PeripheralClock % baud);
        break;

    case MXC_UART_REVB_EXT_CLK:
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK;
        clkDiv = UART_EXTCLK_FREQ / baud;
100153bc:	fbb3 f2f1 	udiv	r2, r3, r1
        mod = UART_EXTCLK_FREQ % baud;
100153c0:	fb01 3312 	mls	r3, r1, r2, r3

    default:
        return E_BAD_PARAM;
    }

    if (!clkDiv || mod > (baud / 2)) {
100153c4:	b112      	cbz	r2, 100153cc <MXC_UART_RevB_SetFrequency+0x44>
100153c6:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
100153ca:	d900      	bls.n	100153ce <MXC_UART_RevB_SetFrequency+0x46>
        clkDiv++;
100153cc:	3201      	adds	r2, #1
    }
    uart->clkdiv = clkDiv;
    return MXC_UART_GetFrequency((mxc_uart_regs_t *)uart);
}
100153ce:	bc10      	pop	{r4}
    uart->clkdiv = clkDiv;
100153d0:	6102      	str	r2, [r0, #16]
    return MXC_UART_GetFrequency((mxc_uart_regs_t *)uart);
100153d2:	f7ff bf5f 	b.w	10015294 <MXC_UART_GetFrequency>
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK;
100153d6:	6803      	ldr	r3, [r0, #0]
100153d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100153dc:	6003      	str	r3, [r0, #0]
        clkDiv = UART_EXTCLK_FREQ / baud;
100153de:	4b0b      	ldr	r3, [pc, #44]	@ (1001540c <MXC_UART_RevB_SetFrequency+0x84>)
100153e0:	e7ec      	b.n	100153bc <MXC_UART_RevB_SetFrequency+0x34>
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
100153e2:	6804      	ldr	r4, [r0, #0]
        clkDiv = (IBRO_FREQ / baud);
100153e4:	f44f 02e1 	mov.w	r2, #7372800	@ 0x708000
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
100153e8:	f444 3400 	orr.w	r4, r4, #131072	@ 0x20000
        clkDiv = (IBRO_FREQ / baud);
100153ec:	fbb2 f2f1 	udiv	r2, r2, r1
        mod = (IBRO_FREQ % baud);
100153f0:	fb01 f302 	mul.w	r3, r1, r2
100153f4:	f5c3 03e1 	rsb	r3, r3, #7372800	@ 0x708000
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
100153f8:	6004      	str	r4, [r0, #0]
        break;
100153fa:	e7e3      	b.n	100153c4 <MXC_UART_RevB_SetFrequency+0x3c>
}
100153fc:	f06f 0002 	mvn.w	r0, #2
10015400:	bc10      	pop	{r4}
10015402:	4770      	bx	lr
10015404:	40042000 	.word	0x40042000
10015408:	200018ac 	.word	0x200018ac
1001540c:	047868c0 	.word	0x047868c0

10015410 <MXC_UART_RevB_GetFrequency>:

int MXC_UART_RevB_GetFrequency(mxc_uart_revb_regs_t *uart)
{
    int periphClock = 0;

    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10015410:	4b17      	ldr	r3, [pc, #92]	@ (10015470 <MXC_UART_RevB_GetFrequency+0x60>)
10015412:	4298      	cmp	r0, r3
10015414:	d00b      	beq.n	1001542e <MXC_UART_RevB_GetFrequency+0x1e>
10015416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001541a:	4298      	cmp	r0, r3
1001541c:	d007      	beq.n	1001542e <MXC_UART_RevB_GetFrequency+0x1e>
1001541e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10015422:	4298      	cmp	r0, r3
10015424:	d003      	beq.n	1001542e <MXC_UART_RevB_GetFrequency+0x1e>
10015426:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
1001542a:	4298      	cmp	r0, r3
1001542c:	d117      	bne.n	1001545e <MXC_UART_RevB_GetFrequency+0x4e>
        return E_BAD_PARAM;
    }

    if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) ==
1001542e:	6803      	ldr	r3, [r0, #0]
10015430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10015434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
10015438:	d014      	beq.n	10015464 <MXC_UART_RevB_GetFrequency+0x54>
        MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK) {
        periphClock = UART_EXTCLK_FREQ;
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) ==
1001543a:	6803      	ldr	r3, [r0, #0]
1001543c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
10015440:	d106      	bne.n	10015450 <MXC_UART_RevB_GetFrequency+0x40>
               MXC_S_UART_REVB_CTRL_BCLKSRC_PERIPHERAL_CLOCK) {
        periphClock = PeripheralClock;
10015442:	4b0c      	ldr	r3, [pc, #48]	@ (10015474 <MXC_UART_RevB_GetFrequency+0x64>)
10015444:	681b      	ldr	r3, [r3, #0]
10015446:	085b      	lsrs	r3, r3, #1
#endif
    } else {
        return E_BAD_PARAM;
    }

    return (periphClock / uart->clkdiv);
10015448:	6900      	ldr	r0, [r0, #16]
1001544a:	fbb3 f0f0 	udiv	r0, r3, r0
1001544e:	4770      	bx	lr
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) == MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2) {
10015450:	6803      	ldr	r3, [r0, #0]
10015452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10015456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
1001545a:	d005      	beq.n	10015468 <MXC_UART_RevB_GetFrequency+0x58>
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) == MXC_S_UART_REVB_CTRL_BCLKSRC_CLK3) {
1001545c:	6803      	ldr	r3, [r0, #0]
        return E_BAD_PARAM;
1001545e:	f06f 0002 	mvn.w	r0, #2
}
10015462:	4770      	bx	lr
        periphClock = UART_EXTCLK_FREQ;
10015464:	4b04      	ldr	r3, [pc, #16]	@ (10015478 <MXC_UART_RevB_GetFrequency+0x68>)
10015466:	e7ef      	b.n	10015448 <MXC_UART_RevB_GetFrequency+0x38>
        periphClock = IBRO_FREQ;
10015468:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
1001546c:	e7ec      	b.n	10015448 <MXC_UART_RevB_GetFrequency+0x38>
1001546e:	bf00      	nop
10015470:	40042000 	.word	0x40042000
10015474:	200018ac 	.word	0x200018ac
10015478:	047868c0 	.word	0x047868c0

1001547c <MXC_UART_RevB_SetDataSize>:

int MXC_UART_RevB_SetDataSize(mxc_uart_revb_regs_t *uart, int dataSize)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001547c:	4b0e      	ldr	r3, [pc, #56]	@ (100154b8 <MXC_UART_RevB_SetDataSize+0x3c>)
1001547e:	4298      	cmp	r0, r3
10015480:	d00b      	beq.n	1001549a <MXC_UART_RevB_SetDataSize+0x1e>
10015482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10015486:	4298      	cmp	r0, r3
10015488:	d007      	beq.n	1001549a <MXC_UART_RevB_SetDataSize+0x1e>
1001548a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001548e:	4298      	cmp	r0, r3
10015490:	d003      	beq.n	1001549a <MXC_UART_RevB_SetDataSize+0x1e>
10015492:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10015496:	4298      	cmp	r0, r3
10015498:	d10a      	bne.n	100154b0 <MXC_UART_RevB_SetDataSize+0x34>
        return E_BAD_PARAM;
    }

    if (dataSize < 5 || dataSize > 8) {
1001549a:	3905      	subs	r1, #5
1001549c:	2903      	cmp	r1, #3
1001549e:	d807      	bhi.n	100154b0 <MXC_UART_RevB_SetDataSize+0x34>
        return E_BAD_PARAM;
    }

    dataSize = (dataSize - 5) << MXC_F_UART_REVB_CTRL_CHAR_SIZE_POS;

    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_CHAR_SIZE, dataSize);
100154a0:	6803      	ldr	r3, [r0, #0]
100154a2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
100154a6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
100154aa:	6003      	str	r3, [r0, #0]

    return E_NO_ERROR;
100154ac:	2000      	movs	r0, #0
100154ae:	4770      	bx	lr
        return E_BAD_PARAM;
100154b0:	f06f 0002 	mvn.w	r0, #2
}
100154b4:	4770      	bx	lr
100154b6:	bf00      	nop
100154b8:	40042000 	.word	0x40042000

100154bc <MXC_UART_RevB_SetStopBits>:

int MXC_UART_RevB_SetStopBits(mxc_uart_revb_regs_t *uart, mxc_uart_stop_t stopBits)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100154bc:	4b0f      	ldr	r3, [pc, #60]	@ (100154fc <MXC_UART_RevB_SetStopBits+0x40>)
100154be:	4298      	cmp	r0, r3
100154c0:	d00b      	beq.n	100154da <MXC_UART_RevB_SetStopBits+0x1e>
100154c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100154c6:	4298      	cmp	r0, r3
100154c8:	d007      	beq.n	100154da <MXC_UART_RevB_SetStopBits+0x1e>
100154ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100154ce:	4298      	cmp	r0, r3
100154d0:	d003      	beq.n	100154da <MXC_UART_RevB_SetStopBits+0x1e>
100154d2:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100154d6:	4298      	cmp	r0, r3
100154d8:	d102      	bne.n	100154e0 <MXC_UART_RevB_SetStopBits+0x24>
        return E_BAD_PARAM;
    }

    switch (stopBits) {
100154da:	b121      	cbz	r1, 100154e6 <MXC_UART_RevB_SetStopBits+0x2a>
100154dc:	2901      	cmp	r1, #1
100154de:	d008      	beq.n	100154f2 <MXC_UART_RevB_SetStopBits+0x36>
100154e0:	f06f 0002 	mvn.w	r0, #2
        return E_BAD_PARAM;
        break;
    }

    return E_NO_ERROR;
}
100154e4:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_STOPBITS,
100154e6:	6803      	ldr	r3, [r0, #0]
100154e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
100154ec:	6003      	str	r3, [r0, #0]
    return E_NO_ERROR;
100154ee:	2000      	movs	r0, #0
100154f0:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_STOPBITS,
100154f2:	6803      	ldr	r3, [r0, #0]
100154f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
100154f8:	e7f8      	b.n	100154ec <MXC_UART_RevB_SetStopBits+0x30>
100154fa:	bf00      	nop
100154fc:	40042000 	.word	0x40042000

10015500 <MXC_UART_RevB_SetParity>:

int MXC_UART_RevB_SetParity(mxc_uart_revb_regs_t *uart, mxc_uart_parity_t parity)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10015500:	4b23      	ldr	r3, [pc, #140]	@ (10015590 <MXC_UART_RevB_SetParity+0x90>)
10015502:	4298      	cmp	r0, r3
10015504:	d00b      	beq.n	1001551e <MXC_UART_RevB_SetParity+0x1e>
10015506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001550a:	4298      	cmp	r0, r3
1001550c:	d007      	beq.n	1001551e <MXC_UART_RevB_SetParity+0x1e>
1001550e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10015512:	4298      	cmp	r0, r3
10015514:	d003      	beq.n	1001551e <MXC_UART_RevB_SetParity+0x1e>
10015516:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
1001551a:	4298      	cmp	r0, r3
1001551c:	d134      	bne.n	10015588 <MXC_UART_RevB_SetParity+0x88>
        return E_BAD_PARAM;
    }

    switch (parity) {
1001551e:	2904      	cmp	r1, #4
10015520:	d832      	bhi.n	10015588 <MXC_UART_RevB_SetParity+0x88>
10015522:	e8df f001 	tbb	[pc, r1]
10015526:	0903      	.short	0x0903
10015528:	2115      	.short	0x2115
1001552a:	29          	.byte	0x29
1001552b:	00          	.byte	0x00
    case MXC_UART_PARITY_DISABLE:
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 0 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
1001552c:	6803      	ldr	r3, [r0, #0]
1001552e:	f023 0310 	bic.w	r3, r3, #16
10015532:	6003      	str	r3, [r0, #0]
    default:
        return E_BAD_PARAM;
        break;
    }

    return E_NO_ERROR;
10015534:	2000      	movs	r0, #0
10015536:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
10015538:	6803      	ldr	r3, [r0, #0]
1001553a:	f043 0310 	orr.w	r3, r3, #16
1001553e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 0 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10015540:	6803      	ldr	r3, [r0, #0]
10015542:	f023 0320 	bic.w	r3, r3, #32
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10015546:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 0 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
10015548:	6803      	ldr	r3, [r0, #0]
1001554a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
1001554e:	e7f0      	b.n	10015532 <MXC_UART_RevB_SetParity+0x32>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
10015550:	6803      	ldr	r3, [r0, #0]
10015552:	f043 0310 	orr.w	r3, r3, #16
10015556:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 0 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10015558:	6803      	ldr	r3, [r0, #0]
1001555a:	f023 0320 	bic.w	r3, r3, #32
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
1001555e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 1 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
10015560:	6803      	ldr	r3, [r0, #0]
10015562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10015566:	e7e4      	b.n	10015532 <MXC_UART_RevB_SetParity+0x32>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
10015568:	6803      	ldr	r3, [r0, #0]
1001556a:	f043 0310 	orr.w	r3, r3, #16
1001556e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10015570:	6803      	ldr	r3, [r0, #0]
10015572:	f043 0320 	orr.w	r3, r3, #32
10015576:	e7e6      	b.n	10015546 <MXC_UART_RevB_SetParity+0x46>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
10015578:	6803      	ldr	r3, [r0, #0]
1001557a:	f043 0310 	orr.w	r3, r3, #16
1001557e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
10015580:	6803      	ldr	r3, [r0, #0]
10015582:	f043 0320 	orr.w	r3, r3, #32
10015586:	e7ea      	b.n	1001555e <MXC_UART_RevB_SetParity+0x5e>
    switch (parity) {
10015588:	f06f 0002 	mvn.w	r0, #2
}
1001558c:	4770      	bx	lr
1001558e:	bf00      	nop
10015590:	40042000 	.word	0x40042000

10015594 <MXC_UART_RevB_ReadCharacterRaw>:
    return E_NO_ERROR;
}

int MXC_UART_RevB_ReadCharacterRaw(mxc_uart_revb_regs_t *uart)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10015594:	4b0c      	ldr	r3, [pc, #48]	@ (100155c8 <MXC_UART_RevB_ReadCharacterRaw+0x34>)
10015596:	4298      	cmp	r0, r3
10015598:	d00b      	beq.n	100155b2 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
1001559a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001559e:	4298      	cmp	r0, r3
100155a0:	d007      	beq.n	100155b2 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
100155a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100155a6:	4298      	cmp	r0, r3
100155a8:	d003      	beq.n	100155b2 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
100155aa:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100155ae:	4298      	cmp	r0, r3
100155b0:	d104      	bne.n	100155bc <MXC_UART_RevB_ReadCharacterRaw+0x28>
        return E_BAD_PARAM;
    }

    if (uart->status & MXC_F_UART_REVB_STATUS_RX_EM) {
100155b2:	6843      	ldr	r3, [r0, #4]
100155b4:	06db      	lsls	r3, r3, #27
100155b6:	d404      	bmi.n	100155c2 <MXC_UART_RevB_ReadCharacterRaw+0x2e>
        return E_UNDERFLOW;
    }

    return uart->fifo;
100155b8:	6a00      	ldr	r0, [r0, #32]
100155ba:	4770      	bx	lr
        return E_BAD_PARAM;
100155bc:	f06f 0002 	mvn.w	r0, #2
100155c0:	4770      	bx	lr
        return E_UNDERFLOW;
100155c2:	f06f 000c 	mvn.w	r0, #12
}
100155c6:	4770      	bx	lr
100155c8:	40042000 	.word	0x40042000

100155cc <MXC_UART_RevB_WriteCharacterRaw>:

int MXC_UART_RevB_WriteCharacterRaw(mxc_uart_revb_regs_t *uart, uint8_t character)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100155cc:	4b0d      	ldr	r3, [pc, #52]	@ (10015604 <MXC_UART_RevB_WriteCharacterRaw+0x38>)
100155ce:	4298      	cmp	r0, r3
{
100155d0:	4602      	mov	r2, r0
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100155d2:	d00b      	beq.n	100155ec <MXC_UART_RevB_WriteCharacterRaw+0x20>
100155d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100155d8:	4298      	cmp	r0, r3
100155da:	d007      	beq.n	100155ec <MXC_UART_RevB_WriteCharacterRaw+0x20>
100155dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100155e0:	4298      	cmp	r0, r3
100155e2:	d003      	beq.n	100155ec <MXC_UART_RevB_WriteCharacterRaw+0x20>
100155e4:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100155e8:	4298      	cmp	r0, r3
100155ea:	d105      	bne.n	100155f8 <MXC_UART_RevB_WriteCharacterRaw+0x2c>
        return E_BAD_PARAM;
    }

    // Require the TX FIFO to be empty, so that we write out the expected character
    // Return error if the FIFO is full
    if (uart->status & MXC_F_UART_REVB_STATUS_TX_FULL) {
100155ec:	6850      	ldr	r0, [r2, #4]
100155ee:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
100155f2:	d104      	bne.n	100155fe <MXC_UART_RevB_WriteCharacterRaw+0x32>
        return E_OVERFLOW;
    }

    uart->fifo = character;
100155f4:	6211      	str	r1, [r2, #32]

    return E_NO_ERROR;
100155f6:	4770      	bx	lr
        return E_BAD_PARAM;
100155f8:	f06f 0002 	mvn.w	r0, #2
100155fc:	4770      	bx	lr
        return E_OVERFLOW;
100155fe:	f06f 000b 	mvn.w	r0, #11
}
10015602:	4770      	bx	lr
10015604:	40042000 	.word	0x40042000

10015608 <MXC_UART_RevB_GetRXFIFOAvailable>:
    return read;
}

unsigned int MXC_UART_RevB_GetRXFIFOAvailable(mxc_uart_revb_regs_t *uart)
{
    return (uart->status & MXC_F_UART_REVB_STATUS_RX_LVL) >> MXC_F_UART_REVB_STATUS_RX_LVL_POS;
10015608:	6840      	ldr	r0, [r0, #4]
}
1001560a:	f3c0 2003 	ubfx	r0, r0, #8, #4
1001560e:	4770      	bx	lr

10015610 <MXC_UART_RevB_GetTXFIFOAvailable>:
    return written;
}

unsigned int MXC_UART_RevB_GetTXFIFOAvailable(mxc_uart_revb_regs_t *uart)
{
    int txCnt = (uart->status & MXC_F_UART_REVB_STATUS_TX_LVL) >> MXC_F_UART_REVB_STATUS_TX_LVL_POS;
10015610:	6840      	ldr	r0, [r0, #4]
10015612:	f3c0 3003 	ubfx	r0, r0, #12, #4
    return MXC_UART_FIFO_DEPTH - txCnt;
}
10015616:	f1c0 0008 	rsb	r0, r0, #8
1001561a:	4770      	bx	lr

1001561c <MXC_UART_RevB_SetRXThreshold>:
    return E_NO_ERROR;
}

int MXC_UART_RevB_SetRXThreshold(mxc_uart_revb_regs_t *uart, unsigned int numBytes)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001561c:	4b0d      	ldr	r3, [pc, #52]	@ (10015654 <MXC_UART_RevB_SetRXThreshold+0x38>)
1001561e:	4298      	cmp	r0, r3
10015620:	d00b      	beq.n	1001563a <MXC_UART_RevB_SetRXThreshold+0x1e>
10015622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10015626:	4298      	cmp	r0, r3
10015628:	d007      	beq.n	1001563a <MXC_UART_RevB_SetRXThreshold+0x1e>
1001562a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001562e:	4298      	cmp	r0, r3
10015630:	d003      	beq.n	1001563a <MXC_UART_RevB_SetRXThreshold+0x1e>
10015632:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10015636:	4298      	cmp	r0, r3
10015638:	d109      	bne.n	1001564e <MXC_UART_RevB_SetRXThreshold+0x32>
        return E_BAD_PARAM;
    }

    if (numBytes < 1 || numBytes > MXC_UART_FIFO_DEPTH) {
1001563a:	1e4b      	subs	r3, r1, #1
1001563c:	2b07      	cmp	r3, #7
1001563e:	d806      	bhi.n	1001564e <MXC_UART_RevB_SetRXThreshold+0x32>
        return E_BAD_PARAM;
    }

    numBytes <<= MXC_F_UART_REVB_CTRL_RX_THD_VAL_POS;
    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_RX_THD_VAL, numBytes);
10015640:	6803      	ldr	r3, [r0, #0]
10015642:	f023 030f 	bic.w	r3, r3, #15
10015646:	4319      	orrs	r1, r3
10015648:	6001      	str	r1, [r0, #0]

    return E_NO_ERROR;
1001564a:	2000      	movs	r0, #0
1001564c:	4770      	bx	lr
        return E_BAD_PARAM;
1001564e:	f06f 0002 	mvn.w	r0, #2
}
10015652:	4770      	bx	lr
10015654:	40042000 	.word	0x40042000

10015658 <MXC_GetLock>:
#include "mxc_lock.h"

#ifndef __riscv
/* ************************************************************************** */
int MXC_GetLock(uint32_t *lock, uint32_t value)
{
10015658:	4603      	mov	r3, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
1001565a:	e853 2f00 	ldrex	r2, [r3]
    do {
        // Return if the lock is taken by a different thread
        if (__LDREXW((volatile uint32_t *)lock) != 0) {
1001565e:	b932      	cbnz	r2, 1001566e <MXC_GetLock+0x16>
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
10015660:	e843 1000 	strex	r0, r1, [r3]
            return E_BUSY;
        }

        // Attempt to take the lock
    } while (__STREXW(value, (volatile uint32_t *)lock) != 0);
10015664:	2800      	cmp	r0, #0
10015666:	d1f8      	bne.n	1001565a <MXC_GetLock+0x2>
  __ASM volatile ("dmb 0xF":::"memory");
10015668:	f3bf 8f5f 	dmb	sy

    // Do not start any other memory access until memory barrier is complete
    __DMB();

    return E_NO_ERROR;
1001566c:	4770      	bx	lr
            return E_BUSY;
1001566e:	f06f 0005 	mvn.w	r0, #5
}
10015672:	4770      	bx	lr

10015674 <MXC_FreeLock>:
10015674:	f3bf 8f5f 	dmb	sy
/* ************************************************************************** */
void MXC_FreeLock(uint32_t *lock)
{
    // Ensure memory operations complete before releasing lock
    __DMB();
    *lock = 0;
10015678:	2300      	movs	r3, #0
1001567a:	6003      	str	r3, [r0, #0]
}
1001567c:	4770      	bx	lr
	...

10015680 <MXC_GPIO_Common_Init>:
static void *cbparam[MXC_CFG_GPIO_INSTANCES][MXC_CFG_GPIO_PINS_PORT];
static uint8_t initialized = 0;

/* **** Functions **** */
int MXC_GPIO_Common_Init(uint32_t portmask)
{
10015680:	b510      	push	{r4, lr}
    if (!initialized) {
10015682:	4c06      	ldr	r4, [pc, #24]	@ (1001569c <MXC_GPIO_Common_Init+0x1c>)
10015684:	7821      	ldrb	r1, [r4, #0]
10015686:	b931      	cbnz	r1, 10015696 <MXC_GPIO_Common_Init+0x16>
        int i, j;

        for (i = 0; i < MXC_CFG_GPIO_INSTANCES; i++) {
            // Initialize call back arrays
            for (j = 0; j < MXC_CFG_GPIO_PINS_PORT; j++) {
                callback[i][j] = NULL;
10015688:	4805      	ldr	r0, [pc, #20]	@ (100156a0 <MXC_GPIO_Common_Init+0x20>)
1001568a:	f44f 7200 	mov.w	r2, #512	@ 0x200
1001568e:	f004 f9d5 	bl	10019a3c <memset>
            }
        }

        initialized = 1;
10015692:	2301      	movs	r3, #1
10015694:	7023      	strb	r3, [r4, #0]
    }

    return E_NO_ERROR;
}
10015696:	2000      	movs	r0, #0
10015698:	bd10      	pop	{r4, pc}
1001569a:	bf00      	nop
1001569c:	20001194 	.word	0x20001194
100156a0:	20001398 	.word	0x20001398

100156a4 <MXC_GPIO_Common_Handler>:
    uint32_t stat;
    unsigned int pin;

    MXC_ASSERT(port < MXC_CFG_GPIO_INSTANCES);

    mxc_gpio_regs_t *gpio = MXC_GPIO_GET_GPIO(port);
100156a4:	2803      	cmp	r0, #3
100156a6:	bf98      	it	ls
100156a8:	4b10      	ldrls	r3, [pc, #64]	@ (100156ec <MXC_GPIO_Common_Handler+0x48>)
{
100156aa:	b570      	push	{r4, r5, r6, lr}
100156ac:	bf94      	ite	ls
100156ae:	f853 6020 	ldrls.w	r6, [r3, r0, lsl #2]
100156b2:	2600      	movhi	r6, #0
100156b4:	4605      	mov	r5, r0

    stat = MXC_GPIO_GetFlags(gpio);
100156b6:	4630      	mov	r0, r6
100156b8:	f7fe fda2 	bl	10014200 <MXC_GPIO_GetFlags>
    MXC_GPIO_ClearFlags(gpio, stat);
100156bc:	4601      	mov	r1, r0
    stat = MXC_GPIO_GetFlags(gpio);
100156be:	4604      	mov	r4, r0
    MXC_GPIO_ClearFlags(gpio, stat);
100156c0:	4630      	mov	r0, r6
100156c2:	f7fe fd91 	bl	100141e8 <MXC_GPIO_ClearFlags>

    pin = 0;

    while (stat) {
100156c6:	4e0a      	ldr	r6, [pc, #40]	@ (100156f0 <MXC_GPIO_Common_Handler+0x4c>)
100156c8:	4b0a      	ldr	r3, [pc, #40]	@ (100156f4 <MXC_GPIO_Common_Handler+0x50>)
100156ca:	eb06 16c5 	add.w	r6, r6, r5, lsl #7
100156ce:	eb03 15c5 	add.w	r5, r3, r5, lsl #7
100156d2:	b904      	cbnz	r4, 100156d6 <MXC_GPIO_Common_Handler+0x32>
        }

        pin++;
        stat >>= 1;
    }
}
100156d4:	bd70      	pop	{r4, r5, r6, pc}
        if (stat & 1) {
100156d6:	07e3      	lsls	r3, r4, #31
100156d8:	d503      	bpl.n	100156e2 <MXC_GPIO_Common_Handler+0x3e>
            if (callback[port][pin]) {
100156da:	682b      	ldr	r3, [r5, #0]
100156dc:	b10b      	cbz	r3, 100156e2 <MXC_GPIO_Common_Handler+0x3e>
                callback[port][pin](cbparam[port][pin]);
100156de:	6830      	ldr	r0, [r6, #0]
100156e0:	4798      	blx	r3
        stat >>= 1;
100156e2:	0864      	lsrs	r4, r4, #1
100156e4:	3604      	adds	r6, #4
100156e6:	3504      	adds	r5, #4
100156e8:	e7f3      	b.n	100156d2 <MXC_GPIO_Common_Handler+0x2e>
100156ea:	bf00      	nop
100156ec:	1002c130 	.word	0x1002c130
100156f0:	20001198 	.word	0x20001198
100156f4:	20001398 	.word	0x20001398

100156f8 <malloc>:
100156f8:	4b02      	ldr	r3, [pc, #8]	@ (10015704 <malloc+0xc>)
100156fa:	4601      	mov	r1, r0
100156fc:	6818      	ldr	r0, [r3, #0]
100156fe:	f000 b80b 	b.w	10015718 <_malloc_r>
10015702:	bf00      	nop
10015704:	200005e0 	.word	0x200005e0

10015708 <free>:
10015708:	4b02      	ldr	r3, [pc, #8]	@ (10015714 <free+0xc>)
1001570a:	4601      	mov	r1, r0
1001570c:	6818      	ldr	r0, [r3, #0]
1001570e:	f005 be77 	b.w	1001b400 <_free_r>
10015712:	bf00      	nop
10015714:	200005e0 	.word	0x200005e0

10015718 <_malloc_r>:
10015718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001571c:	f101 050b 	add.w	r5, r1, #11
10015720:	2d16      	cmp	r5, #22
10015722:	b085      	sub	sp, #20
10015724:	4606      	mov	r6, r0
10015726:	d824      	bhi.n	10015772 <_malloc_r+0x5a>
10015728:	2910      	cmp	r1, #16
1001572a:	f200 80b1 	bhi.w	10015890 <_malloc_r+0x178>
1001572e:	f003 f981 	bl	10018a34 <__malloc_lock>
10015732:	2510      	movs	r5, #16
10015734:	2318      	movs	r3, #24
10015736:	f04f 0c02 	mov.w	ip, #2
1001573a:	4fba      	ldr	r7, [pc, #744]	@ (10015a24 <_malloc_r+0x30c>)
1001573c:	443b      	add	r3, r7
1001573e:	f1a3 0208 	sub.w	r2, r3, #8
10015742:	685c      	ldr	r4, [r3, #4]
10015744:	4294      	cmp	r4, r2
10015746:	f000 8122 	beq.w	1001598e <_malloc_r+0x276>
1001574a:	6863      	ldr	r3, [r4, #4]
1001574c:	68e2      	ldr	r2, [r4, #12]
1001574e:	68a1      	ldr	r1, [r4, #8]
10015750:	f023 0303 	bic.w	r3, r3, #3
10015754:	60ca      	str	r2, [r1, #12]
10015756:	4423      	add	r3, r4
10015758:	4630      	mov	r0, r6
1001575a:	6091      	str	r1, [r2, #8]
1001575c:	685a      	ldr	r2, [r3, #4]
1001575e:	f042 0201 	orr.w	r2, r2, #1
10015762:	605a      	str	r2, [r3, #4]
10015764:	3408      	adds	r4, #8
10015766:	f003 f96b 	bl	10018a40 <__malloc_unlock>
1001576a:	4620      	mov	r0, r4
1001576c:	b005      	add	sp, #20
1001576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10015772:	f035 0507 	bics.w	r5, r5, #7
10015776:	f100 808b 	bmi.w	10015890 <_malloc_r+0x178>
1001577a:	42a9      	cmp	r1, r5
1001577c:	f200 8088 	bhi.w	10015890 <_malloc_r+0x178>
10015780:	f003 f958 	bl	10018a34 <__malloc_lock>
10015784:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
10015788:	f0c0 8173 	bcc.w	10015a72 <_malloc_r+0x35a>
1001578c:	0a6b      	lsrs	r3, r5, #9
1001578e:	f000 8083 	beq.w	10015898 <_malloc_r+0x180>
10015792:	2b04      	cmp	r3, #4
10015794:	f200 8122 	bhi.w	100159dc <_malloc_r+0x2c4>
10015798:	09ab      	lsrs	r3, r5, #6
1001579a:	f103 0c39 	add.w	ip, r3, #57	@ 0x39
1001579e:	f103 0e38 	add.w	lr, r3, #56	@ 0x38
100157a2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
100157a6:	4f9f      	ldr	r7, [pc, #636]	@ (10015a24 <_malloc_r+0x30c>)
100157a8:	443b      	add	r3, r7
100157aa:	f1a3 0008 	sub.w	r0, r3, #8
100157ae:	685c      	ldr	r4, [r3, #4]
100157b0:	42a0      	cmp	r0, r4
100157b2:	d107      	bne.n	100157c4 <_malloc_r+0xac>
100157b4:	e00d      	b.n	100157d2 <_malloc_r+0xba>
100157b6:	2a00      	cmp	r2, #0
100157b8:	68e1      	ldr	r1, [r4, #12]
100157ba:	f280 80e2 	bge.w	10015982 <_malloc_r+0x26a>
100157be:	4288      	cmp	r0, r1
100157c0:	d007      	beq.n	100157d2 <_malloc_r+0xba>
100157c2:	460c      	mov	r4, r1
100157c4:	6863      	ldr	r3, [r4, #4]
100157c6:	f023 0303 	bic.w	r3, r3, #3
100157ca:	1b5a      	subs	r2, r3, r5
100157cc:	2a0f      	cmp	r2, #15
100157ce:	ddf2      	ble.n	100157b6 <_malloc_r+0x9e>
100157d0:	46f4      	mov	ip, lr
100157d2:	f8df 8254 	ldr.w	r8, [pc, #596]	@ 10015a28 <_malloc_r+0x310>
100157d6:	693c      	ldr	r4, [r7, #16]
100157d8:	4544      	cmp	r4, r8
100157da:	f000 80bf 	beq.w	1001595c <_malloc_r+0x244>
100157de:	6863      	ldr	r3, [r4, #4]
100157e0:	f023 0903 	bic.w	r9, r3, #3
100157e4:	eba9 0305 	sub.w	r3, r9, r5
100157e8:	2b0f      	cmp	r3, #15
100157ea:	f300 8147 	bgt.w	10015a7c <_malloc_r+0x364>
100157ee:	2b00      	cmp	r3, #0
100157f0:	e9c7 8804 	strd	r8, r8, [r7, #16]
100157f4:	f280 8131 	bge.w	10015a5a <_malloc_r+0x342>
100157f8:	f5b9 7f00 	cmp.w	r9, #512	@ 0x200
100157fc:	f8d7 e004 	ldr.w	lr, [r7, #4]
10015800:	f080 80cc 	bcs.w	1001599c <_malloc_r+0x284>
10015804:	ea4f 01d9 	mov.w	r1, r9, lsr #3
10015808:	3101      	adds	r1, #1
1001580a:	ea4f 1959 	mov.w	r9, r9, lsr #5
1001580e:	2301      	movs	r3, #1
10015810:	fa03 f309 	lsl.w	r3, r3, r9
10015814:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
10015818:	60a2      	str	r2, [r4, #8]
1001581a:	ea4e 0e03 	orr.w	lr, lr, r3
1001581e:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
10015822:	3b08      	subs	r3, #8
10015824:	60e3      	str	r3, [r4, #12]
10015826:	f8c7 e004 	str.w	lr, [r7, #4]
1001582a:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1001582e:	60d4      	str	r4, [r2, #12]
10015830:	ea4f 03ac 	mov.w	r3, ip, asr #2
10015834:	2001      	movs	r0, #1
10015836:	4098      	lsls	r0, r3
10015838:	4570      	cmp	r0, lr
1001583a:	d834      	bhi.n	100158a6 <_malloc_r+0x18e>
1001583c:	ea10 0f0e 	tst.w	r0, lr
10015840:	d107      	bne.n	10015852 <_malloc_r+0x13a>
10015842:	f02c 0c03 	bic.w	ip, ip, #3
10015846:	0040      	lsls	r0, r0, #1
10015848:	ea10 0f0e 	tst.w	r0, lr
1001584c:	f10c 0c04 	add.w	ip, ip, #4
10015850:	d0f9      	beq.n	10015846 <_malloc_r+0x12e>
10015852:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
10015856:	4652      	mov	r2, sl
10015858:	46e1      	mov	r9, ip
1001585a:	68d1      	ldr	r1, [r2, #12]
1001585c:	e00e      	b.n	1001587c <_malloc_r+0x164>
1001585e:	684b      	ldr	r3, [r1, #4]
10015860:	f023 0303 	bic.w	r3, r3, #3
10015864:	eba3 0e05 	sub.w	lr, r3, r5
10015868:	f1be 0f0f 	cmp.w	lr, #15
1001586c:	460c      	mov	r4, r1
1001586e:	68c9      	ldr	r1, [r1, #12]
10015870:	f300 80c1 	bgt.w	100159f6 <_malloc_r+0x2de>
10015874:	f1be 0f00 	cmp.w	lr, #0
10015878:	f280 80e2 	bge.w	10015a40 <_malloc_r+0x328>
1001587c:	428a      	cmp	r2, r1
1001587e:	d1ee      	bne.n	1001585e <_malloc_r+0x146>
10015880:	f109 0901 	add.w	r9, r9, #1
10015884:	f019 0f03 	tst.w	r9, #3
10015888:	f102 0208 	add.w	r2, r2, #8
1001588c:	d1e5      	bne.n	1001585a <_malloc_r+0x142>
1001588e:	e121      	b.n	10015ad4 <_malloc_r+0x3bc>
10015890:	230c      	movs	r3, #12
10015892:	6033      	str	r3, [r6, #0]
10015894:	2400      	movs	r4, #0
10015896:	e768      	b.n	1001576a <_malloc_r+0x52>
10015898:	f44f 7300 	mov.w	r3, #512	@ 0x200
1001589c:	f04f 0c40 	mov.w	ip, #64	@ 0x40
100158a0:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
100158a4:	e77f      	b.n	100157a6 <_malloc_r+0x8e>
100158a6:	68bc      	ldr	r4, [r7, #8]
100158a8:	6863      	ldr	r3, [r4, #4]
100158aa:	f023 0903 	bic.w	r9, r3, #3
100158ae:	45a9      	cmp	r9, r5
100158b0:	d303      	bcc.n	100158ba <_malloc_r+0x1a2>
100158b2:	eba9 0305 	sub.w	r3, r9, r5
100158b6:	2b0f      	cmp	r3, #15
100158b8:	dc53      	bgt.n	10015962 <_malloc_r+0x24a>
100158ba:	4b5c      	ldr	r3, [pc, #368]	@ (10015a2c <_malloc_r+0x314>)
100158bc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 10015a30 <_malloc_r+0x318>
100158c0:	681b      	ldr	r3, [r3, #0]
100158c2:	2008      	movs	r0, #8
100158c4:	f103 0810 	add.w	r8, r3, #16
100158c8:	f004 f9f6 	bl	10019cb8 <sysconf>
100158cc:	f8db 3000 	ldr.w	r3, [fp]
100158d0:	9001      	str	r0, [sp, #4]
100158d2:	3301      	adds	r3, #1
100158d4:	44a8      	add	r8, r5
100158d6:	eb04 0209 	add.w	r2, r4, r9
100158da:	d005      	beq.n	100158e8 <_malloc_r+0x1d0>
100158dc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
100158e0:	4480      	add	r8, r0
100158e2:	4243      	negs	r3, r0
100158e4:	ea03 0808 	and.w	r8, r3, r8
100158e8:	4641      	mov	r1, r8
100158ea:	4630      	mov	r0, r6
100158ec:	9202      	str	r2, [sp, #8]
100158ee:	f004 f9b5 	bl	10019c5c <_sbrk_r>
100158f2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
100158f6:	9a02      	ldr	r2, [sp, #8]
100158f8:	4682      	mov	sl, r0
100158fa:	f000 80dc 	beq.w	10015ab6 <_malloc_r+0x39e>
100158fe:	4282      	cmp	r2, r0
10015900:	f200 80d7 	bhi.w	10015ab2 <_malloc_r+0x39a>
10015904:	4b4b      	ldr	r3, [pc, #300]	@ (10015a34 <_malloc_r+0x31c>)
10015906:	9901      	ldr	r1, [sp, #4]
10015908:	6818      	ldr	r0, [r3, #0]
1001590a:	4440      	add	r0, r8
1001590c:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
10015910:	6018      	str	r0, [r3, #0]
10015912:	4684      	mov	ip, r0
10015914:	f040 80fc 	bne.w	10015b10 <_malloc_r+0x3f8>
10015918:	ea1a 0f01 	tst.w	sl, r1
1001591c:	f040 80f8 	bne.w	10015b10 <_malloc_r+0x3f8>
10015920:	f8d7 a008 	ldr.w	sl, [r7, #8]
10015924:	44c8      	add	r8, r9
10015926:	f048 0201 	orr.w	r2, r8, #1
1001592a:	f8ca 2004 	str.w	r2, [sl, #4]
1001592e:	4b42      	ldr	r3, [pc, #264]	@ (10015a38 <_malloc_r+0x320>)
10015930:	6819      	ldr	r1, [r3, #0]
10015932:	4281      	cmp	r1, r0
10015934:	bf38      	it	cc
10015936:	6018      	strcc	r0, [r3, #0]
10015938:	4b40      	ldr	r3, [pc, #256]	@ (10015a3c <_malloc_r+0x324>)
1001593a:	6819      	ldr	r1, [r3, #0]
1001593c:	4281      	cmp	r1, r0
1001593e:	bf38      	it	cc
10015940:	6018      	strcc	r0, [r3, #0]
10015942:	4654      	mov	r4, sl
10015944:	f022 0803 	bic.w	r8, r2, #3
10015948:	45a8      	cmp	r8, r5
1001594a:	eba8 0305 	sub.w	r3, r8, r5
1001594e:	d301      	bcc.n	10015954 <_malloc_r+0x23c>
10015950:	2b0f      	cmp	r3, #15
10015952:	dc06      	bgt.n	10015962 <_malloc_r+0x24a>
10015954:	4630      	mov	r0, r6
10015956:	f003 f873 	bl	10018a40 <__malloc_unlock>
1001595a:	e79b      	b.n	10015894 <_malloc_r+0x17c>
1001595c:	f8d7 e004 	ldr.w	lr, [r7, #4]
10015960:	e766      	b.n	10015830 <_malloc_r+0x118>
10015962:	1962      	adds	r2, r4, r5
10015964:	f043 0301 	orr.w	r3, r3, #1
10015968:	f045 0501 	orr.w	r5, r5, #1
1001596c:	6065      	str	r5, [r4, #4]
1001596e:	4630      	mov	r0, r6
10015970:	60ba      	str	r2, [r7, #8]
10015972:	6053      	str	r3, [r2, #4]
10015974:	f003 f864 	bl	10018a40 <__malloc_unlock>
10015978:	3408      	adds	r4, #8
1001597a:	4620      	mov	r0, r4
1001597c:	b005      	add	sp, #20
1001597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10015982:	68a2      	ldr	r2, [r4, #8]
10015984:	4423      	add	r3, r4
10015986:	60d1      	str	r1, [r2, #12]
10015988:	4630      	mov	r0, r6
1001598a:	608a      	str	r2, [r1, #8]
1001598c:	e6e6      	b.n	1001575c <_malloc_r+0x44>
1001598e:	68dc      	ldr	r4, [r3, #12]
10015990:	42a3      	cmp	r3, r4
10015992:	f47f aeda 	bne.w	1001574a <_malloc_r+0x32>
10015996:	f10c 0c02 	add.w	ip, ip, #2
1001599a:	e71a      	b.n	100157d2 <_malloc_r+0xba>
1001599c:	f5b9 6f20 	cmp.w	r9, #2560	@ 0xa00
100159a0:	ea4f 2259 	mov.w	r2, r9, lsr #9
100159a4:	d37e      	bcc.n	10015aa4 <_malloc_r+0x38c>
100159a6:	2a14      	cmp	r2, #20
100159a8:	f200 8115 	bhi.w	10015bd6 <_malloc_r+0x4be>
100159ac:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
100159b0:	00db      	lsls	r3, r3, #3
100159b2:	325b      	adds	r2, #91	@ 0x5b
100159b4:	18f9      	adds	r1, r7, r3
100159b6:	58fb      	ldr	r3, [r7, r3]
100159b8:	3908      	subs	r1, #8
100159ba:	4299      	cmp	r1, r3
100159bc:	d103      	bne.n	100159c6 <_malloc_r+0x2ae>
100159be:	e0f0      	b.n	10015ba2 <_malloc_r+0x48a>
100159c0:	689b      	ldr	r3, [r3, #8]
100159c2:	4299      	cmp	r1, r3
100159c4:	d004      	beq.n	100159d0 <_malloc_r+0x2b8>
100159c6:	685a      	ldr	r2, [r3, #4]
100159c8:	f022 0203 	bic.w	r2, r2, #3
100159cc:	454a      	cmp	r2, r9
100159ce:	d8f7      	bhi.n	100159c0 <_malloc_r+0x2a8>
100159d0:	68d9      	ldr	r1, [r3, #12]
100159d2:	e9c4 3102 	strd	r3, r1, [r4, #8]
100159d6:	608c      	str	r4, [r1, #8]
100159d8:	60dc      	str	r4, [r3, #12]
100159da:	e729      	b.n	10015830 <_malloc_r+0x118>
100159dc:	2b14      	cmp	r3, #20
100159de:	d96d      	bls.n	10015abc <_malloc_r+0x3a4>
100159e0:	2b54      	cmp	r3, #84	@ 0x54
100159e2:	f200 8101 	bhi.w	10015be8 <_malloc_r+0x4d0>
100159e6:	0b2b      	lsrs	r3, r5, #12
100159e8:	f103 0c6f 	add.w	ip, r3, #111	@ 0x6f
100159ec:	f103 0e6e 	add.w	lr, r3, #110	@ 0x6e
100159f0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
100159f4:	e6d7      	b.n	100157a6 <_malloc_r+0x8e>
100159f6:	4630      	mov	r0, r6
100159f8:	68a6      	ldr	r6, [r4, #8]
100159fa:	1962      	adds	r2, r4, r5
100159fc:	f045 0501 	orr.w	r5, r5, #1
10015a00:	6065      	str	r5, [r4, #4]
10015a02:	60f1      	str	r1, [r6, #12]
10015a04:	608e      	str	r6, [r1, #8]
10015a06:	f04e 0101 	orr.w	r1, lr, #1
10015a0a:	e9c7 2204 	strd	r2, r2, [r7, #16]
10015a0e:	f8c2 8008 	str.w	r8, [r2, #8]
10015a12:	f8c2 800c 	str.w	r8, [r2, #12]
10015a16:	6051      	str	r1, [r2, #4]
10015a18:	f844 e003 	str.w	lr, [r4, r3]
10015a1c:	f003 f810 	bl	10018a40 <__malloc_unlock>
10015a20:	3408      	adds	r4, #8
10015a22:	e6a2      	b.n	1001576a <_malloc_r+0x52>
10015a24:	20000060 	.word	0x20000060
10015a28:	20000068 	.word	0x20000068
10015a2c:	200015c8 	.word	0x200015c8
10015a30:	20000054 	.word	0x20000054
10015a34:	20001598 	.word	0x20001598
10015a38:	200015c4 	.word	0x200015c4
10015a3c:	200015c0 	.word	0x200015c0
10015a40:	4423      	add	r3, r4
10015a42:	4630      	mov	r0, r6
10015a44:	685a      	ldr	r2, [r3, #4]
10015a46:	f042 0201 	orr.w	r2, r2, #1
10015a4a:	605a      	str	r2, [r3, #4]
10015a4c:	f854 3f08 	ldr.w	r3, [r4, #8]!
10015a50:	60d9      	str	r1, [r3, #12]
10015a52:	608b      	str	r3, [r1, #8]
10015a54:	f002 fff4 	bl	10018a40 <__malloc_unlock>
10015a58:	e687      	b.n	1001576a <_malloc_r+0x52>
10015a5a:	44a1      	add	r9, r4
10015a5c:	4630      	mov	r0, r6
10015a5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
10015a62:	f043 0301 	orr.w	r3, r3, #1
10015a66:	f8c9 3004 	str.w	r3, [r9, #4]
10015a6a:	3408      	adds	r4, #8
10015a6c:	f002 ffe8 	bl	10018a40 <__malloc_unlock>
10015a70:	e67b      	b.n	1001576a <_malloc_r+0x52>
10015a72:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
10015a76:	f105 0308 	add.w	r3, r5, #8
10015a7a:	e65e      	b.n	1001573a <_malloc_r+0x22>
10015a7c:	1962      	adds	r2, r4, r5
10015a7e:	f043 0101 	orr.w	r1, r3, #1
10015a82:	f045 0501 	orr.w	r5, r5, #1
10015a86:	6065      	str	r5, [r4, #4]
10015a88:	4630      	mov	r0, r6
10015a8a:	e9c7 2204 	strd	r2, r2, [r7, #16]
10015a8e:	f8c2 8008 	str.w	r8, [r2, #8]
10015a92:	f8c2 800c 	str.w	r8, [r2, #12]
10015a96:	6051      	str	r1, [r2, #4]
10015a98:	f844 3009 	str.w	r3, [r4, r9]
10015a9c:	f002 ffd0 	bl	10018a40 <__malloc_unlock>
10015aa0:	3408      	adds	r4, #8
10015aa2:	e662      	b.n	1001576a <_malloc_r+0x52>
10015aa4:	ea4f 1299 	mov.w	r2, r9, lsr #6
10015aa8:	f102 0339 	add.w	r3, r2, #57	@ 0x39
10015aac:	00db      	lsls	r3, r3, #3
10015aae:	3238      	adds	r2, #56	@ 0x38
10015ab0:	e780      	b.n	100159b4 <_malloc_r+0x29c>
10015ab2:	42bc      	cmp	r4, r7
10015ab4:	d024      	beq.n	10015b00 <_malloc_r+0x3e8>
10015ab6:	68bc      	ldr	r4, [r7, #8]
10015ab8:	6862      	ldr	r2, [r4, #4]
10015aba:	e743      	b.n	10015944 <_malloc_r+0x22c>
10015abc:	f103 0c5c 	add.w	ip, r3, #92	@ 0x5c
10015ac0:	f103 0e5b 	add.w	lr, r3, #91	@ 0x5b
10015ac4:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10015ac8:	e66d      	b.n	100157a6 <_malloc_r+0x8e>
10015aca:	f85a 3908 	ldr.w	r3, [sl], #-8
10015ace:	4553      	cmp	r3, sl
10015ad0:	f040 80d8 	bne.w	10015c84 <_malloc_r+0x56c>
10015ad4:	f01c 0f03 	tst.w	ip, #3
10015ad8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
10015adc:	d1f5      	bne.n	10015aca <_malloc_r+0x3b2>
10015ade:	687b      	ldr	r3, [r7, #4]
10015ae0:	ea23 0300 	bic.w	r3, r3, r0
10015ae4:	607b      	str	r3, [r7, #4]
10015ae6:	0040      	lsls	r0, r0, #1
10015ae8:	4298      	cmp	r0, r3
10015aea:	f63f aedc 	bhi.w	100158a6 <_malloc_r+0x18e>
10015aee:	b918      	cbnz	r0, 10015af8 <_malloc_r+0x3e0>
10015af0:	e6d9      	b.n	100158a6 <_malloc_r+0x18e>
10015af2:	0040      	lsls	r0, r0, #1
10015af4:	f109 0904 	add.w	r9, r9, #4
10015af8:	4218      	tst	r0, r3
10015afa:	d0fa      	beq.n	10015af2 <_malloc_r+0x3da>
10015afc:	46cc      	mov	ip, r9
10015afe:	e6a8      	b.n	10015852 <_malloc_r+0x13a>
10015b00:	4b61      	ldr	r3, [pc, #388]	@ (10015c88 <_malloc_r+0x570>)
10015b02:	9901      	ldr	r1, [sp, #4]
10015b04:	6818      	ldr	r0, [r3, #0]
10015b06:	eb08 0c00 	add.w	ip, r8, r0
10015b0a:	3901      	subs	r1, #1
10015b0c:	f8c3 c000 	str.w	ip, [r3]
10015b10:	f8db 0000 	ldr.w	r0, [fp]
10015b14:	3001      	adds	r0, #1
10015b16:	bf1b      	ittet	ne
10015b18:	ebaa 0202 	subne.w	r2, sl, r2
10015b1c:	4462      	addne	r2, ip
10015b1e:	f8cb a000 	streq.w	sl, [fp]
10015b22:	601a      	strne	r2, [r3, #0]
10015b24:	f01a 0207 	ands.w	r2, sl, #7
10015b28:	e9cd 2302 	strd	r2, r3, [sp, #8]
10015b2c:	d042      	beq.n	10015bb4 <_malloc_r+0x49c>
10015b2e:	f1c2 0208 	rsb	r2, r2, #8
10015b32:	9b01      	ldr	r3, [sp, #4]
10015b34:	4492      	add	sl, r2
10015b36:	44d0      	add	r8, sl
10015b38:	4413      	add	r3, r2
10015b3a:	ea08 0001 	and.w	r0, r8, r1
10015b3e:	1a1a      	subs	r2, r3, r0
10015b40:	ea02 0b01 	and.w	fp, r2, r1
10015b44:	4659      	mov	r1, fp
10015b46:	4630      	mov	r0, r6
10015b48:	f004 f888 	bl	10019c5c <_sbrk_r>
10015b4c:	1c42      	adds	r2, r0, #1
10015b4e:	9b03      	ldr	r3, [sp, #12]
10015b50:	d07a      	beq.n	10015c48 <_malloc_r+0x530>
10015b52:	eba0 000a 	sub.w	r0, r0, sl
10015b56:	eb00 080b 	add.w	r8, r0, fp
10015b5a:	6818      	ldr	r0, [r3, #0]
10015b5c:	f8c7 a008 	str.w	sl, [r7, #8]
10015b60:	f048 0201 	orr.w	r2, r8, #1
10015b64:	4458      	add	r0, fp
10015b66:	42bc      	cmp	r4, r7
10015b68:	f8ca 2004 	str.w	r2, [sl, #4]
10015b6c:	6018      	str	r0, [r3, #0]
10015b6e:	f43f aede 	beq.w	1001592e <_malloc_r+0x216>
10015b72:	f1b9 0f0f 	cmp.w	r9, #15
10015b76:	d942      	bls.n	10015bfe <_malloc_r+0x4e6>
10015b78:	6861      	ldr	r1, [r4, #4]
10015b7a:	f1a9 020c 	sub.w	r2, r9, #12
10015b7e:	f022 0207 	bic.w	r2, r2, #7
10015b82:	f001 0101 	and.w	r1, r1, #1
10015b86:	4311      	orrs	r1, r2
10015b88:	6061      	str	r1, [r4, #4]
10015b8a:	18a1      	adds	r1, r4, r2
10015b8c:	f04f 0c05 	mov.w	ip, #5
10015b90:	2a0f      	cmp	r2, #15
10015b92:	f8c1 c004 	str.w	ip, [r1, #4]
10015b96:	f8c1 c008 	str.w	ip, [r1, #8]
10015b9a:	d84a      	bhi.n	10015c32 <_malloc_r+0x51a>
10015b9c:	f8da 2004 	ldr.w	r2, [sl, #4]
10015ba0:	e6c5      	b.n	1001592e <_malloc_r+0x216>
10015ba2:	1092      	asrs	r2, r2, #2
10015ba4:	2001      	movs	r0, #1
10015ba6:	fa00 f202 	lsl.w	r2, r0, r2
10015baa:	ea4e 0e02 	orr.w	lr, lr, r2
10015bae:	f8c7 e004 	str.w	lr, [r7, #4]
10015bb2:	e70e      	b.n	100159d2 <_malloc_r+0x2ba>
10015bb4:	9b01      	ldr	r3, [sp, #4]
10015bb6:	eb0a 0208 	add.w	r2, sl, r8
10015bba:	400a      	ands	r2, r1
10015bbc:	1a9a      	subs	r2, r3, r2
10015bbe:	ea02 0b01 	and.w	fp, r2, r1
10015bc2:	4659      	mov	r1, fp
10015bc4:	4630      	mov	r0, r6
10015bc6:	f004 f849 	bl	10019c5c <_sbrk_r>
10015bca:	1c43      	adds	r3, r0, #1
10015bcc:	9b03      	ldr	r3, [sp, #12]
10015bce:	d1c0      	bne.n	10015b52 <_malloc_r+0x43a>
10015bd0:	f8dd b008 	ldr.w	fp, [sp, #8]
10015bd4:	e7c1      	b.n	10015b5a <_malloc_r+0x442>
10015bd6:	2a54      	cmp	r2, #84	@ 0x54
10015bd8:	d815      	bhi.n	10015c06 <_malloc_r+0x4ee>
10015bda:	ea4f 3219 	mov.w	r2, r9, lsr #12
10015bde:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
10015be2:	00db      	lsls	r3, r3, #3
10015be4:	326e      	adds	r2, #110	@ 0x6e
10015be6:	e6e5      	b.n	100159b4 <_malloc_r+0x29c>
10015be8:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
10015bec:	d815      	bhi.n	10015c1a <_malloc_r+0x502>
10015bee:	0beb      	lsrs	r3, r5, #15
10015bf0:	f103 0c78 	add.w	ip, r3, #120	@ 0x78
10015bf4:	f103 0e77 	add.w	lr, r3, #119	@ 0x77
10015bf8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10015bfc:	e5d3      	b.n	100157a6 <_malloc_r+0x8e>
10015bfe:	2301      	movs	r3, #1
10015c00:	f8ca 3004 	str.w	r3, [sl, #4]
10015c04:	e6a6      	b.n	10015954 <_malloc_r+0x23c>
10015c06:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
10015c0a:	d825      	bhi.n	10015c58 <_malloc_r+0x540>
10015c0c:	ea4f 32d9 	mov.w	r2, r9, lsr #15
10015c10:	f102 0378 	add.w	r3, r2, #120	@ 0x78
10015c14:	00db      	lsls	r3, r3, #3
10015c16:	3277      	adds	r2, #119	@ 0x77
10015c18:	e6cc      	b.n	100159b4 <_malloc_r+0x29c>
10015c1a:	f240 5254 	movw	r2, #1364	@ 0x554
10015c1e:	4293      	cmp	r3, r2
10015c20:	d825      	bhi.n	10015c6e <_malloc_r+0x556>
10015c22:	0cab      	lsrs	r3, r5, #18
10015c24:	f103 0c7d 	add.w	ip, r3, #125	@ 0x7d
10015c28:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
10015c2c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10015c30:	e5b9      	b.n	100157a6 <_malloc_r+0x8e>
10015c32:	4630      	mov	r0, r6
10015c34:	f104 0108 	add.w	r1, r4, #8
10015c38:	9301      	str	r3, [sp, #4]
10015c3a:	f005 fbe1 	bl	1001b400 <_free_r>
10015c3e:	9b01      	ldr	r3, [sp, #4]
10015c40:	f8d7 a008 	ldr.w	sl, [r7, #8]
10015c44:	6818      	ldr	r0, [r3, #0]
10015c46:	e7a9      	b.n	10015b9c <_malloc_r+0x484>
10015c48:	9a02      	ldr	r2, [sp, #8]
10015c4a:	3a08      	subs	r2, #8
10015c4c:	4490      	add	r8, r2
10015c4e:	eba8 080a 	sub.w	r8, r8, sl
10015c52:	f04f 0b00 	mov.w	fp, #0
10015c56:	e780      	b.n	10015b5a <_malloc_r+0x442>
10015c58:	f240 5354 	movw	r3, #1364	@ 0x554
10015c5c:	429a      	cmp	r2, r3
10015c5e:	d80d      	bhi.n	10015c7c <_malloc_r+0x564>
10015c60:	ea4f 4299 	mov.w	r2, r9, lsr #18
10015c64:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
10015c68:	00db      	lsls	r3, r3, #3
10015c6a:	327c      	adds	r2, #124	@ 0x7c
10015c6c:	e6a2      	b.n	100159b4 <_malloc_r+0x29c>
10015c6e:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
10015c72:	f04f 0c7f 	mov.w	ip, #127	@ 0x7f
10015c76:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
10015c7a:	e594      	b.n	100157a6 <_malloc_r+0x8e>
10015c7c:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
10015c80:	227e      	movs	r2, #126	@ 0x7e
10015c82:	e697      	b.n	100159b4 <_malloc_r+0x29c>
10015c84:	687b      	ldr	r3, [r7, #4]
10015c86:	e72e      	b.n	10015ae6 <_malloc_r+0x3ce>
10015c88:	20001598 	.word	0x20001598

10015c8c <printf>:
10015c8c:	b40f      	push	{r0, r1, r2, r3}
10015c8e:	b500      	push	{lr}
10015c90:	4907      	ldr	r1, [pc, #28]	@ (10015cb0 <printf+0x24>)
10015c92:	b083      	sub	sp, #12
10015c94:	ab04      	add	r3, sp, #16
10015c96:	6808      	ldr	r0, [r1, #0]
10015c98:	f853 2b04 	ldr.w	r2, [r3], #4
10015c9c:	6881      	ldr	r1, [r0, #8]
10015c9e:	9301      	str	r3, [sp, #4]
10015ca0:	f000 f808 	bl	10015cb4 <_vfprintf_r>
10015ca4:	b003      	add	sp, #12
10015ca6:	f85d eb04 	ldr.w	lr, [sp], #4
10015caa:	b004      	add	sp, #16
10015cac:	4770      	bx	lr
10015cae:	bf00      	nop
10015cb0:	200005e0 	.word	0x200005e0

10015cb4 <_vfprintf_r>:
10015cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10015cb8:	b0df      	sub	sp, #380	@ 0x17c
10015cba:	461c      	mov	r4, r3
10015cbc:	9107      	str	r1, [sp, #28]
10015cbe:	4691      	mov	r9, r2
10015cc0:	4683      	mov	fp, r0
10015cc2:	f003 ff89 	bl	10019bd8 <_localeconv_r>
10015cc6:	6803      	ldr	r3, [r0, #0]
10015cc8:	9319      	str	r3, [sp, #100]	@ 0x64
10015cca:	4618      	mov	r0, r3
10015ccc:	f004 fa98 	bl	1001a200 <strlen>
10015cd0:	2208      	movs	r2, #8
10015cd2:	9018      	str	r0, [sp, #96]	@ 0x60
10015cd4:	2100      	movs	r1, #0
10015cd6:	a82e      	add	r0, sp, #184	@ 0xb8
10015cd8:	940d      	str	r4, [sp, #52]	@ 0x34
10015cda:	f003 feaf 	bl	10019a3c <memset>
10015cde:	f1bb 0f00 	cmp.w	fp, #0
10015ce2:	d004      	beq.n	10015cee <_vfprintf_r+0x3a>
10015ce4:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
10015ce8:	2b00      	cmp	r3, #0
10015cea:	f001 807f 	beq.w	10016dec <_vfprintf_r+0x1138>
10015cee:	9b07      	ldr	r3, [sp, #28]
10015cf0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
10015cf2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
10015cf6:	07d5      	lsls	r5, r2, #31
10015cf8:	d402      	bmi.n	10015d00 <_vfprintf_r+0x4c>
10015cfa:	0598      	lsls	r0, r3, #22
10015cfc:	f140 869f 	bpl.w	10016a3e <_vfprintf_r+0xd8a>
10015d00:	0499      	lsls	r1, r3, #18
10015d02:	d407      	bmi.n	10015d14 <_vfprintf_r+0x60>
10015d04:	9907      	ldr	r1, [sp, #28]
10015d06:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
10015d08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
10015d0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
10015d10:	818b      	strh	r3, [r1, #12]
10015d12:	664a      	str	r2, [r1, #100]	@ 0x64
10015d14:	071a      	lsls	r2, r3, #28
10015d16:	f140 80cc 	bpl.w	10015eb2 <_vfprintf_r+0x1fe>
10015d1a:	9a07      	ldr	r2, [sp, #28]
10015d1c:	6912      	ldr	r2, [r2, #16]
10015d1e:	2a00      	cmp	r2, #0
10015d20:	f000 80c7 	beq.w	10015eb2 <_vfprintf_r+0x1fe>
10015d24:	f003 021a 	and.w	r2, r3, #26
10015d28:	2a0a      	cmp	r2, #10
10015d2a:	f000 80d1 	beq.w	10015ed0 <_vfprintf_r+0x21c>
10015d2e:	2300      	movs	r3, #0
10015d30:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
10015d34:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
10015d38:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
10015d3c:	9313      	str	r3, [sp, #76]	@ 0x4c
10015d3e:	931a      	str	r3, [sp, #104]	@ 0x68
10015d40:	930a      	str	r3, [sp, #40]	@ 0x28
10015d42:	2400      	movs	r4, #0
10015d44:	2300      	movs	r3, #0
10015d46:	e9cd 3416 	strd	r3, r4, [sp, #88]	@ 0x58
10015d4a:	aa35      	add	r2, sp, #212	@ 0xd4
10015d4c:	9232      	str	r2, [sp, #200]	@ 0xc8
10015d4e:	4690      	mov	r8, r2
10015d50:	f8cd b020 	str.w	fp, [sp, #32]
10015d54:	464d      	mov	r5, r9
10015d56:	9f08      	ldr	r7, [sp, #32]
10015d58:	462e      	mov	r6, r5
10015d5a:	4b8d      	ldr	r3, [pc, #564]	@ (10015f90 <_vfprintf_r+0x2dc>)
10015d5c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
10015d60:	f003 ff34 	bl	10019bcc <__locale_mb_cur_max>
10015d64:	4603      	mov	r3, r0
10015d66:	a82e      	add	r0, sp, #184	@ 0xb8
10015d68:	9000      	str	r0, [sp, #0]
10015d6a:	4632      	mov	r2, r6
10015d6c:	a92a      	add	r1, sp, #168	@ 0xa8
10015d6e:	4638      	mov	r0, r7
10015d70:	47a0      	blx	r4
10015d72:	2800      	cmp	r0, #0
10015d74:	f000 80cb 	beq.w	10015f0e <_vfprintf_r+0x25a>
10015d78:	f2c0 80c1 	blt.w	10015efe <_vfprintf_r+0x24a>
10015d7c:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
10015d7e:	2a25      	cmp	r2, #37	@ 0x25
10015d80:	4603      	mov	r3, r0
10015d82:	d001      	beq.n	10015d88 <_vfprintf_r+0xd4>
10015d84:	441e      	add	r6, r3
10015d86:	e7e8      	b.n	10015d5a <_vfprintf_r+0xa6>
10015d88:	1b77      	subs	r7, r6, r5
10015d8a:	4604      	mov	r4, r0
10015d8c:	f040 80c2 	bne.w	10015f14 <_vfprintf_r+0x260>
10015d90:	2300      	movs	r3, #0
10015d92:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
10015d96:	4699      	mov	r9, r3
10015d98:	930b      	str	r3, [sp, #44]	@ 0x2c
10015d9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10015d9e:	7873      	ldrb	r3, [r6, #1]
10015da0:	9209      	str	r2, [sp, #36]	@ 0x24
10015da2:	1c74      	adds	r4, r6, #1
10015da4:	3401      	adds	r4, #1
10015da6:	f1a3 0220 	sub.w	r2, r3, #32
10015daa:	2a5a      	cmp	r2, #90	@ 0x5a
10015dac:	f200 80f2 	bhi.w	10015f94 <_vfprintf_r+0x2e0>
10015db0:	e8df f012 	tbh	[pc, r2, lsl #1]
10015db4:	00f002c7 	.word	0x00f002c7
10015db8:	02c300f0 	.word	0x02c300f0
10015dbc:	00f000f0 	.word	0x00f000f0
10015dc0:	006a00f0 	.word	0x006a00f0
10015dc4:	00f000f0 	.word	0x00f000f0
10015dc8:	02a0027d 	.word	0x02a0027d
10015dcc:	028800f0 	.word	0x028800f0
10015dd0:	00f002a9 	.word	0x00f002a9
10015dd4:	005b02a5 	.word	0x005b02a5
10015dd8:	005b005b 	.word	0x005b005b
10015ddc:	005b005b 	.word	0x005b005b
10015de0:	005b005b 	.word	0x005b005b
10015de4:	005b005b 	.word	0x005b005b
10015de8:	00f000f0 	.word	0x00f000f0
10015dec:	00f000f0 	.word	0x00f000f0
10015df0:	00f000f0 	.word	0x00f000f0
10015df4:	017100f0 	.word	0x017100f0
10015df8:	020800f0 	.word	0x020800f0
10015dfc:	01710322 	.word	0x01710322
10015e00:	01710171 	.word	0x01710171
10015e04:	00f000f0 	.word	0x00f000f0
10015e08:	00f000f0 	.word	0x00f000f0
10015e0c:	00f0031e 	.word	0x00f0031e
10015e10:	02da00f0 	.word	0x02da00f0
10015e14:	00f000f0 	.word	0x00f000f0
10015e18:	022600f0 	.word	0x022600f0
10015e1c:	030b00f0 	.word	0x030b00f0
10015e20:	00f000f0 	.word	0x00f000f0
10015e24:	00f00717 	.word	0x00f00717
10015e28:	00f000f0 	.word	0x00f000f0
10015e2c:	00f000f0 	.word	0x00f000f0
10015e30:	00f000f0 	.word	0x00f000f0
10015e34:	017100f0 	.word	0x017100f0
10015e38:	020800f0 	.word	0x020800f0
10015e3c:	01710258 	.word	0x01710258
10015e40:	01710171 	.word	0x01710171
10015e44:	02580296 	.word	0x02580296
10015e48:	00f00204 	.word	0x00f00204
10015e4c:	00f0028c 	.word	0x00f0028c
10015e50:	073f034d 	.word	0x073f034d
10015e54:	0204033b 	.word	0x0204033b
10015e58:	022600f0 	.word	0x022600f0
10015e5c:	073a007d 	.word	0x073a007d
10015e60:	00f000f0 	.word	0x00f000f0
10015e64:	00f00743 	.word	0x00f00743
10015e68:	007d      	.short	0x007d
10015e6a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10015e6e:	2100      	movs	r1, #0
10015e70:	f814 3b01 	ldrb.w	r3, [r4], #1
10015e74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
10015e78:	eb02 0141 	add.w	r1, r2, r1, lsl #1
10015e7c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10015e80:	2a09      	cmp	r2, #9
10015e82:	d9f5      	bls.n	10015e70 <_vfprintf_r+0x1bc>
10015e84:	910b      	str	r1, [sp, #44]	@ 0x2c
10015e86:	e78e      	b.n	10015da6 <_vfprintf_r+0xf2>
10015e88:	9f08      	ldr	r7, [sp, #32]
10015e8a:	4638      	mov	r0, r7
10015e8c:	f003 fea4 	bl	10019bd8 <_localeconv_r>
10015e90:	6843      	ldr	r3, [r0, #4]
10015e92:	931d      	str	r3, [sp, #116]	@ 0x74
10015e94:	4618      	mov	r0, r3
10015e96:	f004 f9b3 	bl	1001a200 <strlen>
10015e9a:	901e      	str	r0, [sp, #120]	@ 0x78
10015e9c:	4606      	mov	r6, r0
10015e9e:	4638      	mov	r0, r7
10015ea0:	f003 fe9a 	bl	10019bd8 <_localeconv_r>
10015ea4:	6883      	ldr	r3, [r0, #8]
10015ea6:	931b      	str	r3, [sp, #108]	@ 0x6c
10015ea8:	2e00      	cmp	r6, #0
10015eaa:	f040 8621 	bne.w	10016af0 <_vfprintf_r+0xe3c>
10015eae:	7823      	ldrb	r3, [r4, #0]
10015eb0:	e778      	b.n	10015da4 <_vfprintf_r+0xf0>
10015eb2:	9d07      	ldr	r5, [sp, #28]
10015eb4:	4658      	mov	r0, fp
10015eb6:	4629      	mov	r1, r5
10015eb8:	f003 fbf0 	bl	1001969c <__swsetup_r>
10015ebc:	2800      	cmp	r0, #0
10015ebe:	f041 83a6 	bne.w	1001760e <_vfprintf_r+0x195a>
10015ec2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
10015ec6:	f003 021a 	and.w	r2, r3, #26
10015eca:	2a0a      	cmp	r2, #10
10015ecc:	f47f af2f 	bne.w	10015d2e <_vfprintf_r+0x7a>
10015ed0:	9907      	ldr	r1, [sp, #28]
10015ed2:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
10015ed6:	2a00      	cmp	r2, #0
10015ed8:	f6ff af29 	blt.w	10015d2e <_vfprintf_r+0x7a>
10015edc:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
10015ede:	07d5      	lsls	r5, r2, #31
10015ee0:	d402      	bmi.n	10015ee8 <_vfprintf_r+0x234>
10015ee2:	0598      	lsls	r0, r3, #22
10015ee4:	f141 81bf 	bpl.w	10017266 <_vfprintf_r+0x15b2>
10015ee8:	9907      	ldr	r1, [sp, #28]
10015eea:	4623      	mov	r3, r4
10015eec:	464a      	mov	r2, r9
10015eee:	4658      	mov	r0, fp
10015ef0:	f001 fd04 	bl	100178fc <__sbprintf>
10015ef4:	900a      	str	r0, [sp, #40]	@ 0x28
10015ef6:	980a      	ldr	r0, [sp, #40]	@ 0x28
10015ef8:	b05f      	add	sp, #380	@ 0x17c
10015efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10015efe:	2208      	movs	r2, #8
10015f00:	2100      	movs	r1, #0
10015f02:	a82e      	add	r0, sp, #184	@ 0xb8
10015f04:	f003 fd9a 	bl	10019a3c <memset>
10015f08:	2301      	movs	r3, #1
10015f0a:	441e      	add	r6, r3
10015f0c:	e725      	b.n	10015d5a <_vfprintf_r+0xa6>
10015f0e:	1b77      	subs	r7, r6, r5
10015f10:	4604      	mov	r4, r0
10015f12:	d011      	beq.n	10015f38 <_vfprintf_r+0x284>
10015f14:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
10015f16:	443b      	add	r3, r7
10015f18:	9334      	str	r3, [sp, #208]	@ 0xd0
10015f1a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015f1c:	3301      	adds	r3, #1
10015f1e:	2b07      	cmp	r3, #7
10015f20:	e9c8 5700 	strd	r5, r7, [r8]
10015f24:	9333      	str	r3, [sp, #204]	@ 0xcc
10015f26:	dc13      	bgt.n	10015f50 <_vfprintf_r+0x29c>
10015f28:	f108 0808 	add.w	r8, r8, #8
10015f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10015f2e:	443b      	add	r3, r7
10015f30:	930a      	str	r3, [sp, #40]	@ 0x28
10015f32:	2c00      	cmp	r4, #0
10015f34:	f47f af2c 	bne.w	10015d90 <_vfprintf_r+0xdc>
10015f38:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
10015f3a:	f8dd b020 	ldr.w	fp, [sp, #32]
10015f3e:	2b00      	cmp	r3, #0
10015f40:	f041 80d6 	bne.w	100170f0 <_vfprintf_r+0x143c>
10015f44:	9b07      	ldr	r3, [sp, #28]
10015f46:	2200      	movs	r2, #0
10015f48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
10015f4c:	9233      	str	r2, [sp, #204]	@ 0xcc
10015f4e:	e012      	b.n	10015f76 <_vfprintf_r+0x2c2>
10015f50:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015f54:	aa32      	add	r2, sp, #200	@ 0xc8
10015f56:	f001 fd4d 	bl	100179f4 <__sprint_r>
10015f5a:	b948      	cbnz	r0, 10015f70 <_vfprintf_r+0x2bc>
10015f5c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015f60:	e7e4      	b.n	10015f2c <_vfprintf_r+0x278>
10015f62:	46bb      	mov	fp, r7
10015f64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10015f66:	b11b      	cbz	r3, 10015f70 <_vfprintf_r+0x2bc>
10015f68:	990c      	ldr	r1, [sp, #48]	@ 0x30
10015f6a:	4658      	mov	r0, fp
10015f6c:	f005 fa48 	bl	1001b400 <_free_r>
10015f70:	9b07      	ldr	r3, [sp, #28]
10015f72:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
10015f76:	9a07      	ldr	r2, [sp, #28]
10015f78:	6e52      	ldr	r2, [r2, #100]	@ 0x64
10015f7a:	07d4      	lsls	r4, r2, #31
10015f7c:	f140 8114 	bpl.w	100161a8 <_vfprintf_r+0x4f4>
10015f80:	0659      	lsls	r1, r3, #25
10015f82:	f101 8350 	bmi.w	10017626 <_vfprintf_r+0x1972>
10015f86:	980a      	ldr	r0, [sp, #40]	@ 0x28
10015f88:	b05f      	add	sp, #380	@ 0x17c
10015f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10015f8e:	bf00      	nop
10015f90:	20000474 	.word	0x20000474
10015f94:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10015f98:	2b00      	cmp	r3, #0
10015f9a:	d0cd      	beq.n	10015f38 <_vfprintf_r+0x284>
10015f9c:	2200      	movs	r2, #0
10015f9e:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
10015fa2:	2301      	movs	r3, #1
10015fa4:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10015fa8:	9306      	str	r3, [sp, #24]
10015faa:	920c      	str	r2, [sp, #48]	@ 0x30
10015fac:	469b      	mov	fp, r3
10015fae:	9209      	str	r2, [sp, #36]	@ 0x24
10015fb0:	9214      	str	r2, [sp, #80]	@ 0x50
10015fb2:	9210      	str	r2, [sp, #64]	@ 0x40
10015fb4:	9212      	str	r2, [sp, #72]	@ 0x48
10015fb6:	ad45      	add	r5, sp, #276	@ 0x114
10015fb8:	f019 0302 	ands.w	r3, r9, #2
10015fbc:	d002      	beq.n	10015fc4 <_vfprintf_r+0x310>
10015fbe:	9906      	ldr	r1, [sp, #24]
10015fc0:	3102      	adds	r1, #2
10015fc2:	9106      	str	r1, [sp, #24]
10015fc4:	f019 0784 	ands.w	r7, r9, #132	@ 0x84
10015fc8:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10015fca:	d105      	bne.n	10015fd8 <_vfprintf_r+0x324>
10015fcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10015fce:	9806      	ldr	r0, [sp, #24]
10015fd0:	1a0e      	subs	r6, r1, r0
10015fd2:	2e00      	cmp	r6, #0
10015fd4:	f300 80a7 	bgt.w	10016126 <_vfprintf_r+0x472>
10015fd8:	b182      	cbz	r2, 10015ffc <_vfprintf_r+0x348>
10015fda:	2201      	movs	r2, #1
10015fdc:	f8c8 2004 	str.w	r2, [r8, #4]
10015fe0:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
10015fe2:	3201      	adds	r2, #1
10015fe4:	3401      	adds	r4, #1
10015fe6:	f10d 019f 	add.w	r1, sp, #159	@ 0x9f
10015fea:	2a07      	cmp	r2, #7
10015fec:	9434      	str	r4, [sp, #208]	@ 0xd0
10015fee:	9233      	str	r2, [sp, #204]	@ 0xcc
10015ff0:	f8c8 1000 	str.w	r1, [r8]
10015ff4:	f300 83e1 	bgt.w	100167ba <_vfprintf_r+0xb06>
10015ff8:	f108 0808 	add.w	r8, r8, #8
10015ffc:	b183      	cbz	r3, 10016020 <_vfprintf_r+0x36c>
10015ffe:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10016000:	aa28      	add	r2, sp, #160	@ 0xa0
10016002:	3301      	adds	r3, #1
10016004:	3402      	adds	r4, #2
10016006:	f8c8 2000 	str.w	r2, [r8]
1001600a:	2b07      	cmp	r3, #7
1001600c:	f04f 0202 	mov.w	r2, #2
10016010:	9434      	str	r4, [sp, #208]	@ 0xd0
10016012:	9333      	str	r3, [sp, #204]	@ 0xcc
10016014:	f8c8 2004 	str.w	r2, [r8, #4]
10016018:	f300 83dd 	bgt.w	100167d6 <_vfprintf_r+0xb22>
1001601c:	f108 0808 	add.w	r8, r8, #8
10016020:	2f80      	cmp	r7, #128	@ 0x80
10016022:	f000 82be 	beq.w	100165a2 <_vfprintf_r+0x8ee>
10016026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10016028:	eba3 060b 	sub.w	r6, r3, fp
1001602c:	2e00      	cmp	r6, #0
1001602e:	f300 82fd 	bgt.w	1001662c <_vfprintf_r+0x978>
10016032:	f419 7f80 	tst.w	r9, #256	@ 0x100
10016036:	f040 8219 	bne.w	1001646c <_vfprintf_r+0x7b8>
1001603a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001603c:	f8c8 5000 	str.w	r5, [r8]
10016040:	3301      	adds	r3, #1
10016042:	445c      	add	r4, fp
10016044:	2b07      	cmp	r3, #7
10016046:	f8c8 b004 	str.w	fp, [r8, #4]
1001604a:	9434      	str	r4, [sp, #208]	@ 0xd0
1001604c:	9333      	str	r3, [sp, #204]	@ 0xcc
1001604e:	f300 834d 	bgt.w	100166ec <_vfprintf_r+0xa38>
10016052:	f108 0808 	add.w	r8, r8, #8
10016056:	f019 0f04 	tst.w	r9, #4
1001605a:	d005      	beq.n	10016068 <_vfprintf_r+0x3b4>
1001605c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001605e:	9a06      	ldr	r2, [sp, #24]
10016060:	1a9d      	subs	r5, r3, r2
10016062:	2d00      	cmp	r5, #0
10016064:	f300 83c3 	bgt.w	100167ee <_vfprintf_r+0xb3a>
10016068:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
1001606c:	9906      	ldr	r1, [sp, #24]
1001606e:	428a      	cmp	r2, r1
10016070:	bfac      	ite	ge
10016072:	189b      	addge	r3, r3, r2
10016074:	185b      	addlt	r3, r3, r1
10016076:	930a      	str	r3, [sp, #40]	@ 0x28
10016078:	2c00      	cmp	r4, #0
1001607a:	f040 830f 	bne.w	1001669c <_vfprintf_r+0x9e8>
1001607e:	2300      	movs	r3, #0
10016080:	9333      	str	r3, [sp, #204]	@ 0xcc
10016082:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10016084:	b11b      	cbz	r3, 1001608e <_vfprintf_r+0x3da>
10016086:	990c      	ldr	r1, [sp, #48]	@ 0x30
10016088:	9808      	ldr	r0, [sp, #32]
1001608a:	f005 f9b9 	bl	1001b400 <_free_r>
1001608e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016092:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10016094:	e65f      	b.n	10015d56 <_vfprintf_r+0xa2>
10016096:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001609a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001609c:	3307      	adds	r3, #7
1001609e:	f023 0307 	bic.w	r3, r3, #7
100160a2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
100160a6:	930d      	str	r3, [sp, #52]	@ 0x34
100160a8:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
100160ac:	9323      	str	r3, [sp, #140]	@ 0x8c
100160ae:	9622      	str	r6, [sp, #136]	@ 0x88
100160b0:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	@ 0x88
100160b4:	4ba8      	ldr	r3, [pc, #672]	@ (10016358 <_vfprintf_r+0x6a4>)
100160b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100160ba:	4650      	mov	r0, sl
100160bc:	4659      	mov	r1, fp
100160be:	e9cd 6716 	strd	r6, r7, [sp, #88]	@ 0x58
100160c2:	f00c fbf7 	bl	100228b4 <__aeabi_dcmpun>
100160c6:	2800      	cmp	r0, #0
100160c8:	f040 8530 	bne.w	10016b2c <_vfprintf_r+0xe78>
100160cc:	4ba2      	ldr	r3, [pc, #648]	@ (10016358 <_vfprintf_r+0x6a4>)
100160ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100160d2:	4650      	mov	r0, sl
100160d4:	4659      	mov	r1, fp
100160d6:	f00c fbcf 	bl	10022878 <__aeabi_dcmple>
100160da:	2800      	cmp	r0, #0
100160dc:	f040 8526 	bne.w	10016b2c <_vfprintf_r+0xe78>
100160e0:	2200      	movs	r2, #0
100160e2:	2300      	movs	r3, #0
100160e4:	4630      	mov	r0, r6
100160e6:	4639      	mov	r1, r7
100160e8:	f00c fbbc 	bl	10022864 <__aeabi_dcmplt>
100160ec:	2800      	cmp	r0, #0
100160ee:	f041 810f 	bne.w	10017310 <_vfprintf_r+0x165c>
100160f2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100160f6:	4d99      	ldr	r5, [pc, #612]	@ (1001635c <_vfprintf_r+0x6a8>)
100160f8:	4b99      	ldr	r3, [pc, #612]	@ (10016360 <_vfprintf_r+0x6ac>)
100160fa:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
100160fe:	990e      	ldr	r1, [sp, #56]	@ 0x38
10016100:	2947      	cmp	r1, #71	@ 0x47
10016102:	bfc8      	it	gt
10016104:	461d      	movgt	r5, r3
10016106:	2300      	movs	r3, #0
10016108:	2103      	movs	r1, #3
1001610a:	930c      	str	r3, [sp, #48]	@ 0x30
1001610c:	9106      	str	r1, [sp, #24]
1001610e:	468b      	mov	fp, r1
10016110:	9309      	str	r3, [sp, #36]	@ 0x24
10016112:	9314      	str	r3, [sp, #80]	@ 0x50
10016114:	9310      	str	r3, [sp, #64]	@ 0x40
10016116:	9312      	str	r3, [sp, #72]	@ 0x48
10016118:	2a00      	cmp	r2, #0
1001611a:	f43f af4d 	beq.w	10015fb8 <_vfprintf_r+0x304>
1001611e:	9b06      	ldr	r3, [sp, #24]
10016120:	3301      	adds	r3, #1
10016122:	9306      	str	r3, [sp, #24]
10016124:	e748      	b.n	10015fb8 <_vfprintf_r+0x304>
10016126:	2e10      	cmp	r6, #16
10016128:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
1001612a:	f341 823d 	ble.w	100175a8 <_vfprintf_r+0x18f4>
1001612e:	488d      	ldr	r0, [pc, #564]	@ (10016364 <_vfprintf_r+0x6b0>)
10016130:	9521      	str	r5, [sp, #132]	@ 0x84
10016132:	e9cd 371f 	strd	r3, r7, [sp, #124]	@ 0x7c
10016136:	4621      	mov	r1, r4
10016138:	9d07      	ldr	r5, [sp, #28]
1001613a:	9c08      	ldr	r4, [sp, #32]
1001613c:	9015      	str	r0, [sp, #84]	@ 0x54
1001613e:	f04f 0a10 	mov.w	sl, #16
10016142:	4607      	mov	r7, r0
10016144:	e004      	b.n	10016150 <_vfprintf_r+0x49c>
10016146:	3e10      	subs	r6, #16
10016148:	2e10      	cmp	r6, #16
1001614a:	f108 0808 	add.w	r8, r8, #8
1001614e:	dd16      	ble.n	1001617e <_vfprintf_r+0x4ca>
10016150:	3201      	adds	r2, #1
10016152:	3110      	adds	r1, #16
10016154:	2a07      	cmp	r2, #7
10016156:	e9c8 7a00 	strd	r7, sl, [r8]
1001615a:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
1001615e:	ddf2      	ble.n	10016146 <_vfprintf_r+0x492>
10016160:	aa32      	add	r2, sp, #200	@ 0xc8
10016162:	4629      	mov	r1, r5
10016164:	4620      	mov	r0, r4
10016166:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001616a:	f001 fc43 	bl	100179f4 <__sprint_r>
1001616e:	2800      	cmp	r0, #0
10016170:	f040 8636 	bne.w	10016de0 <_vfprintf_r+0x112c>
10016174:	3e10      	subs	r6, #16
10016176:	2e10      	cmp	r6, #16
10016178:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
1001617c:	dce8      	bgt.n	10016150 <_vfprintf_r+0x49c>
1001617e:	e9dd 371f 	ldrd	r3, r7, [sp, #124]	@ 0x7c
10016182:	9d21      	ldr	r5, [sp, #132]	@ 0x84
10016184:	460c      	mov	r4, r1
10016186:	3201      	adds	r2, #1
10016188:	9915      	ldr	r1, [sp, #84]	@ 0x54
1001618a:	f8c8 1000 	str.w	r1, [r8]
1001618e:	4434      	add	r4, r6
10016190:	2a07      	cmp	r2, #7
10016192:	e9cd 2433 	strd	r2, r4, [sp, #204]	@ 0xcc
10016196:	f8c8 6004 	str.w	r6, [r8, #4]
1001619a:	f300 8610 	bgt.w	10016dbe <_vfprintf_r+0x110a>
1001619e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100161a2:	f108 0808 	add.w	r8, r8, #8
100161a6:	e717      	b.n	10015fd8 <_vfprintf_r+0x324>
100161a8:	0598      	lsls	r0, r3, #22
100161aa:	f53f aee9 	bmi.w	10015f80 <_vfprintf_r+0x2cc>
100161ae:	9c07      	ldr	r4, [sp, #28]
100161b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100161b2:	f003 ff33 	bl	1001a01c <__retarget_lock_release_recursive>
100161b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100161ba:	e6e1      	b.n	10015f80 <_vfprintf_r+0x2cc>
100161bc:	7823      	ldrb	r3, [r4, #0]
100161be:	f049 0920 	orr.w	r9, r9, #32
100161c2:	e5ef      	b.n	10015da4 <_vfprintf_r+0xf0>
100161c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100161c6:	2b43      	cmp	r3, #67	@ 0x43
100161c8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100161cc:	f102 0404 	add.w	r4, r2, #4
100161d0:	f000 8562 	beq.w	10016c98 <_vfprintf_r+0xfe4>
100161d4:	f019 0f10 	tst.w	r9, #16
100161d8:	f040 855e 	bne.w	10016c98 <_vfprintf_r+0xfe4>
100161dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100161de:	681b      	ldr	r3, [r3, #0]
100161e0:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
100161e4:	2301      	movs	r3, #1
100161e6:	9306      	str	r3, [sp, #24]
100161e8:	469b      	mov	fp, r3
100161ea:	ad45      	add	r5, sp, #276	@ 0x114
100161ec:	2200      	movs	r2, #0
100161ee:	940d      	str	r4, [sp, #52]	@ 0x34
100161f0:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
100161f4:	920c      	str	r2, [sp, #48]	@ 0x30
100161f6:	9209      	str	r2, [sp, #36]	@ 0x24
100161f8:	9214      	str	r2, [sp, #80]	@ 0x50
100161fa:	9210      	str	r2, [sp, #64]	@ 0x40
100161fc:	9212      	str	r2, [sp, #72]	@ 0x48
100161fe:	e6db      	b.n	10015fb8 <_vfprintf_r+0x304>
10016200:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10016202:	f856 5b04 	ldr.w	r5, [r6], #4
10016206:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001620a:	2300      	movs	r3, #0
1001620c:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
10016210:	2d00      	cmp	r5, #0
10016212:	f000 8530 	beq.w	10016c76 <_vfprintf_r+0xfc2>
10016216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016218:	2b53      	cmp	r3, #83	@ 0x53
1001621a:	f000 8601 	beq.w	10016e20 <_vfprintf_r+0x116c>
1001621e:	f019 0310 	ands.w	r3, r9, #16
10016222:	9312      	str	r3, [sp, #72]	@ 0x48
10016224:	f040 85fc 	bne.w	10016e20 <_vfprintf_r+0x116c>
10016228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001622a:	1c5a      	adds	r2, r3, #1
1001622c:	f000 876a 	beq.w	10017104 <_vfprintf_r+0x1450>
10016230:	9912      	ldr	r1, [sp, #72]	@ 0x48
10016232:	461a      	mov	r2, r3
10016234:	4628      	mov	r0, r5
10016236:	f003 fef3 	bl	1001a020 <memchr>
1001623a:	900c      	str	r0, [sp, #48]	@ 0x30
1001623c:	2800      	cmp	r0, #0
1001623e:	f001 82c5 	beq.w	100177cc <_vfprintf_r+0x1b18>
10016242:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10016244:	960d      	str	r6, [sp, #52]	@ 0x34
10016246:	eba3 0b05 	sub.w	fp, r3, r5
1001624a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001624c:	9309      	str	r3, [sp, #36]	@ 0x24
1001624e:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
10016252:	9314      	str	r3, [sp, #80]	@ 0x50
10016254:	9310      	str	r3, [sp, #64]	@ 0x40
10016256:	930c      	str	r3, [sp, #48]	@ 0x30
10016258:	2373      	movs	r3, #115	@ 0x73
1001625a:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001625e:	9106      	str	r1, [sp, #24]
10016260:	930e      	str	r3, [sp, #56]	@ 0x38
10016262:	e759      	b.n	10016118 <_vfprintf_r+0x464>
10016264:	f019 0f20 	tst.w	r9, #32
10016268:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001626c:	f000 80cc 	beq.w	10016408 <_vfprintf_r+0x754>
10016270:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016272:	3307      	adds	r3, #7
10016274:	f023 0307 	bic.w	r3, r3, #7
10016278:	461a      	mov	r2, r3
1001627a:	6859      	ldr	r1, [r3, #4]
1001627c:	f852 3b08 	ldr.w	r3, [r2], #8
10016280:	920d      	str	r2, [sp, #52]	@ 0x34
10016282:	460a      	mov	r2, r1
10016284:	2900      	cmp	r1, #0
10016286:	f2c0 8425 	blt.w	10016ad4 <_vfprintf_r+0xe20>
1001628a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001628c:	3101      	adds	r1, #1
1001628e:	f000 8285 	beq.w	1001679c <_vfprintf_r+0xae8>
10016292:	ea53 0102 	orrs.w	r1, r3, r2
10016296:	f029 0480 	bic.w	r4, r9, #128	@ 0x80
1001629a:	f040 8280 	bne.w	1001679e <_vfprintf_r+0xaea>
1001629e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100162a0:	2a00      	cmp	r2, #0
100162a2:	f040 8281 	bne.w	100167a8 <_vfprintf_r+0xaf4>
100162a6:	46a1      	mov	r9, r4
100162a8:	4693      	mov	fp, r2
100162aa:	ad5e      	add	r5, sp, #376	@ 0x178
100162ac:	e150      	b.n	10016550 <_vfprintf_r+0x89c>
100162ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100162b0:	f853 2b04 	ldr.w	r2, [r3], #4
100162b4:	920b      	str	r2, [sp, #44]	@ 0x2c
100162b6:	2a00      	cmp	r2, #0
100162b8:	f280 83ce 	bge.w	10016a58 <_vfprintf_r+0xda4>
100162bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
100162be:	930d      	str	r3, [sp, #52]	@ 0x34
100162c0:	4252      	negs	r2, r2
100162c2:	920b      	str	r2, [sp, #44]	@ 0x2c
100162c4:	7823      	ldrb	r3, [r4, #0]
100162c6:	f049 0904 	orr.w	r9, r9, #4
100162ca:	e56b      	b.n	10015da4 <_vfprintf_r+0xf0>
100162cc:	7823      	ldrb	r3, [r4, #0]
100162ce:	2b6c      	cmp	r3, #108	@ 0x6c
100162d0:	bf03      	ittte	eq
100162d2:	7863      	ldrbeq	r3, [r4, #1]
100162d4:	f049 0920 	orreq.w	r9, r9, #32
100162d8:	3401      	addeq	r4, #1
100162da:	f049 0910 	orrne.w	r9, r9, #16
100162de:	e561      	b.n	10015da4 <_vfprintf_r+0xf0>
100162e0:	7823      	ldrb	r3, [r4, #0]
100162e2:	2b68      	cmp	r3, #104	@ 0x68
100162e4:	bf03      	ittte	eq
100162e6:	7863      	ldrbeq	r3, [r4, #1]
100162e8:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
100162ec:	3401      	addeq	r4, #1
100162ee:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
100162f2:	e557      	b.n	10015da4 <_vfprintf_r+0xf0>
100162f4:	232b      	movs	r3, #43	@ 0x2b
100162f6:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
100162fa:	7823      	ldrb	r3, [r4, #0]
100162fc:	e552      	b.n	10015da4 <_vfprintf_r+0xf0>
100162fe:	7823      	ldrb	r3, [r4, #0]
10016300:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
10016304:	e54e      	b.n	10015da4 <_vfprintf_r+0xf0>
10016306:	4621      	mov	r1, r4
10016308:	f811 3b01 	ldrb.w	r3, [r1], #1
1001630c:	2b2a      	cmp	r3, #42	@ 0x2a
1001630e:	f001 82db 	beq.w	100178c8 <_vfprintf_r+0x1c14>
10016312:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10016316:	2a09      	cmp	r2, #9
10016318:	460c      	mov	r4, r1
1001631a:	bf98      	it	ls
1001631c:	2100      	movls	r1, #0
1001631e:	f201 8172 	bhi.w	10017606 <_vfprintf_r+0x1952>
10016322:	f814 3b01 	ldrb.w	r3, [r4], #1
10016326:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1001632a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
1001632e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10016332:	2a09      	cmp	r2, #9
10016334:	d9f5      	bls.n	10016322 <_vfprintf_r+0x66e>
10016336:	9109      	str	r1, [sp, #36]	@ 0x24
10016338:	e535      	b.n	10015da6 <_vfprintf_r+0xf2>
1001633a:	7823      	ldrb	r3, [r4, #0]
1001633c:	f049 0901 	orr.w	r9, r9, #1
10016340:	e530      	b.n	10015da4 <_vfprintf_r+0xf0>
10016342:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016346:	7823      	ldrb	r3, [r4, #0]
10016348:	2a00      	cmp	r2, #0
1001634a:	f47f ad2b 	bne.w	10015da4 <_vfprintf_r+0xf0>
1001634e:	2220      	movs	r2, #32
10016350:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10016354:	e526      	b.n	10015da4 <_vfprintf_r+0xf0>
10016356:	bf00      	nop
10016358:	7fefffff 	.word	0x7fefffff
1001635c:	1002c140 	.word	0x1002c140
10016360:	1002c144 	.word	0x1002c144
10016364:	1002c194 	.word	0x1002c194
10016368:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001636c:	f049 0910 	orr.w	r9, r9, #16
10016370:	f019 0220 	ands.w	r2, r9, #32
10016374:	f000 8354 	beq.w	10016a20 <_vfprintf_r+0xd6c>
10016378:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001637a:	3307      	adds	r3, #7
1001637c:	f023 0307 	bic.w	r3, r3, #7
10016380:	4619      	mov	r1, r3
10016382:	685a      	ldr	r2, [r3, #4]
10016384:	f851 3b08 	ldr.w	r3, [r1], #8
10016388:	910d      	str	r1, [sp, #52]	@ 0x34
1001638a:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
1001638e:	2100      	movs	r1, #0
10016390:	2000      	movs	r0, #0
10016392:	9d09      	ldr	r5, [sp, #36]	@ 0x24
10016394:	f88d 009f 	strb.w	r0, [sp, #159]	@ 0x9f
10016398:	1c6f      	adds	r7, r5, #1
1001639a:	f000 80c2 	beq.w	10016522 <_vfprintf_r+0x86e>
1001639e:	ea53 0002 	orrs.w	r0, r3, r2
100163a2:	f024 0980 	bic.w	r9, r4, #128	@ 0x80
100163a6:	f040 80bb 	bne.w	10016520 <_vfprintf_r+0x86c>
100163aa:	2d00      	cmp	r5, #0
100163ac:	f040 8523 	bne.w	10016df6 <_vfprintf_r+0x1142>
100163b0:	2900      	cmp	r1, #0
100163b2:	f040 8496 	bne.w	10016ce2 <_vfprintf_r+0x102e>
100163b6:	f014 0b01 	ands.w	fp, r4, #1
100163ba:	f000 8351 	beq.w	10016a60 <_vfprintf_r+0xdac>
100163be:	2330      	movs	r3, #48	@ 0x30
100163c0:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
100163c4:	f20d 1577 	addw	r5, sp, #375	@ 0x177
100163c8:	e0c2      	b.n	10016550 <_vfprintf_r+0x89c>
100163ca:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100163ce:	f049 0410 	orr.w	r4, r9, #16
100163d2:	f014 0220 	ands.w	r2, r4, #32
100163d6:	f000 8315 	beq.w	10016a04 <_vfprintf_r+0xd50>
100163da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100163dc:	3307      	adds	r3, #7
100163de:	f023 0307 	bic.w	r3, r3, #7
100163e2:	4619      	mov	r1, r3
100163e4:	685a      	ldr	r2, [r3, #4]
100163e6:	f851 3b08 	ldr.w	r3, [r1], #8
100163ea:	910d      	str	r1, [sp, #52]	@ 0x34
100163ec:	2101      	movs	r1, #1
100163ee:	e7cf      	b.n	10016390 <_vfprintf_r+0x6dc>
100163f0:	7823      	ldrb	r3, [r4, #0]
100163f2:	f049 0908 	orr.w	r9, r9, #8
100163f6:	e4d5      	b.n	10015da4 <_vfprintf_r+0xf0>
100163f8:	f049 0910 	orr.w	r9, r9, #16
100163fc:	f019 0f20 	tst.w	r9, #32
10016400:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10016404:	f47f af34 	bne.w	10016270 <_vfprintf_r+0x5bc>
10016408:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001640a:	f019 0f10 	tst.w	r9, #16
1001640e:	f852 3b04 	ldr.w	r3, [r2], #4
10016412:	920d      	str	r2, [sp, #52]	@ 0x34
10016414:	f040 8359 	bne.w	10016aca <_vfprintf_r+0xe16>
10016418:	f019 0f40 	tst.w	r9, #64	@ 0x40
1001641c:	f000 8351 	beq.w	10016ac2 <_vfprintf_r+0xe0e>
10016420:	f343 32c0 	sbfx	r2, r3, #15, #1
10016424:	4611      	mov	r1, r2
10016426:	b21b      	sxth	r3, r3
10016428:	e72c      	b.n	10016284 <_vfprintf_r+0x5d0>
1001642a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001642c:	940f      	str	r4, [sp, #60]	@ 0x3c
1001642e:	f852 3b04 	ldr.w	r3, [r2], #4
10016432:	920d      	str	r2, [sp, #52]	@ 0x34
10016434:	f647 0230 	movw	r2, #30768	@ 0x7830
10016438:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
1001643c:	2078      	movs	r0, #120	@ 0x78
1001643e:	4ab1      	ldr	r2, [pc, #708]	@ (10016704 <_vfprintf_r+0xa50>)
10016440:	921a      	str	r2, [sp, #104]	@ 0x68
10016442:	f049 0402 	orr.w	r4, r9, #2
10016446:	2200      	movs	r2, #0
10016448:	2102      	movs	r1, #2
1001644a:	900e      	str	r0, [sp, #56]	@ 0x38
1001644c:	e7a0      	b.n	10016390 <_vfprintf_r+0x6dc>
1001644e:	f019 0f20 	tst.w	r9, #32
10016452:	940f      	str	r4, [sp, #60]	@ 0x3c
10016454:	f000 8359 	beq.w	10016b0a <_vfprintf_r+0xe56>
10016458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001645a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001645c:	681b      	ldr	r3, [r3, #0]
1001645e:	601a      	str	r2, [r3, #0]
10016460:	17d2      	asrs	r2, r2, #31
10016462:	605a      	str	r2, [r3, #4]
10016464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016466:	3304      	adds	r3, #4
10016468:	930d      	str	r3, [sp, #52]	@ 0x34
1001646a:	e612      	b.n	10016092 <_vfprintf_r+0x3de>
1001646c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001646e:	2b65      	cmp	r3, #101	@ 0x65
10016470:	f340 814e 	ble.w	10016710 <_vfprintf_r+0xa5c>
10016474:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10016478:	2200      	movs	r2, #0
1001647a:	2300      	movs	r3, #0
1001647c:	f00c f9e8 	bl	10022850 <__aeabi_dcmpeq>
10016480:	2800      	cmp	r0, #0
10016482:	f000 81ee 	beq.w	10016862 <_vfprintf_r+0xbae>
10016486:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10016488:	4a9f      	ldr	r2, [pc, #636]	@ (10016708 <_vfprintf_r+0xa54>)
1001648a:	f8c8 2000 	str.w	r2, [r8]
1001648e:	3301      	adds	r3, #1
10016490:	3401      	adds	r4, #1
10016492:	2201      	movs	r2, #1
10016494:	2b07      	cmp	r3, #7
10016496:	9434      	str	r4, [sp, #208]	@ 0xd0
10016498:	9333      	str	r3, [sp, #204]	@ 0xcc
1001649a:	f8c8 2004 	str.w	r2, [r8, #4]
1001649e:	f300 84af 	bgt.w	10016e00 <_vfprintf_r+0x114c>
100164a2:	f108 0808 	add.w	r8, r8, #8
100164a6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
100164a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
100164aa:	4293      	cmp	r3, r2
100164ac:	f280 82cf 	bge.w	10016a4e <_vfprintf_r+0xd9a>
100164b0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
100164b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
100164b4:	441c      	add	r4, r3
100164b6:	e9c8 2300 	strd	r2, r3, [r8]
100164ba:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100164bc:	9434      	str	r4, [sp, #208]	@ 0xd0
100164be:	3301      	adds	r3, #1
100164c0:	2b07      	cmp	r3, #7
100164c2:	9333      	str	r3, [sp, #204]	@ 0xcc
100164c4:	f300 83cb 	bgt.w	10016c5e <_vfprintf_r+0xfaa>
100164c8:	f108 0808 	add.w	r8, r8, #8
100164cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100164ce:	1e5d      	subs	r5, r3, #1
100164d0:	2d00      	cmp	r5, #0
100164d2:	f77f adc0 	ble.w	10016056 <_vfprintf_r+0x3a2>
100164d6:	2d10      	cmp	r5, #16
100164d8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100164da:	f340 84fa 	ble.w	10016ed2 <_vfprintf_r+0x121e>
100164de:	4f8b      	ldr	r7, [pc, #556]	@ (1001670c <_vfprintf_r+0xa58>)
100164e0:	9715      	str	r7, [sp, #84]	@ 0x54
100164e2:	e9dd ab07 	ldrd	sl, fp, [sp, #28]
100164e6:	2610      	movs	r6, #16
100164e8:	e005      	b.n	100164f6 <_vfprintf_r+0x842>
100164ea:	f108 0808 	add.w	r8, r8, #8
100164ee:	3d10      	subs	r5, #16
100164f0:	2d10      	cmp	r5, #16
100164f2:	f340 84f0 	ble.w	10016ed6 <_vfprintf_r+0x1222>
100164f6:	3301      	adds	r3, #1
100164f8:	3410      	adds	r4, #16
100164fa:	2b07      	cmp	r3, #7
100164fc:	e9c8 7600 	strd	r7, r6, [r8]
10016500:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10016504:	ddf1      	ble.n	100164ea <_vfprintf_r+0x836>
10016506:	aa32      	add	r2, sp, #200	@ 0xc8
10016508:	4651      	mov	r1, sl
1001650a:	4658      	mov	r0, fp
1001650c:	f001 fa72 	bl	100179f4 <__sprint_r>
10016510:	2800      	cmp	r0, #0
10016512:	f47f ad27 	bne.w	10015f64 <_vfprintf_r+0x2b0>
10016516:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001651a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001651e:	e7e6      	b.n	100164ee <_vfprintf_r+0x83a>
10016520:	464c      	mov	r4, r9
10016522:	2901      	cmp	r1, #1
10016524:	f000 813b 	beq.w	1001679e <_vfprintf_r+0xaea>
10016528:	2902      	cmp	r1, #2
1001652a:	ad5e      	add	r5, sp, #376	@ 0x178
1001652c:	d11e      	bne.n	1001656c <_vfprintf_r+0x8b8>
1001652e:	981a      	ldr	r0, [sp, #104]	@ 0x68
10016530:	f003 010f 	and.w	r1, r3, #15
10016534:	091b      	lsrs	r3, r3, #4
10016536:	5c41      	ldrb	r1, [r0, r1]
10016538:	f805 1d01 	strb.w	r1, [r5, #-1]!
1001653c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
10016540:	0912      	lsrs	r2, r2, #4
10016542:	ea53 0102 	orrs.w	r1, r3, r2
10016546:	d1f3      	bne.n	10016530 <_vfprintf_r+0x87c>
10016548:	ab5e      	add	r3, sp, #376	@ 0x178
1001654a:	46a1      	mov	r9, r4
1001654c:	eba3 0b05 	sub.w	fp, r3, r5
10016550:	9909      	ldr	r1, [sp, #36]	@ 0x24
10016552:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016556:	4559      	cmp	r1, fp
10016558:	f04f 0300 	mov.w	r3, #0
1001655c:	bfb8      	it	lt
1001655e:	4659      	movlt	r1, fp
10016560:	930c      	str	r3, [sp, #48]	@ 0x30
10016562:	9106      	str	r1, [sp, #24]
10016564:	9314      	str	r3, [sp, #80]	@ 0x50
10016566:	9310      	str	r3, [sp, #64]	@ 0x40
10016568:	9312      	str	r3, [sp, #72]	@ 0x48
1001656a:	e5d5      	b.n	10016118 <_vfprintf_r+0x464>
1001656c:	f003 0107 	and.w	r1, r3, #7
10016570:	08db      	lsrs	r3, r3, #3
10016572:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
10016576:	08d2      	lsrs	r2, r2, #3
10016578:	3130      	adds	r1, #48	@ 0x30
1001657a:	ea53 0602 	orrs.w	r6, r3, r2
1001657e:	4628      	mov	r0, r5
10016580:	f805 1d01 	strb.w	r1, [r5, #-1]!
10016584:	d1f2      	bne.n	1001656c <_vfprintf_r+0x8b8>
10016586:	07e6      	lsls	r6, r4, #31
10016588:	d5de      	bpl.n	10016548 <_vfprintf_r+0x894>
1001658a:	2930      	cmp	r1, #48	@ 0x30
1001658c:	d0dc      	beq.n	10016548 <_vfprintf_r+0x894>
1001658e:	2330      	movs	r3, #48	@ 0x30
10016590:	3802      	subs	r0, #2
10016592:	f805 3c01 	strb.w	r3, [r5, #-1]
10016596:	ab5e      	add	r3, sp, #376	@ 0x178
10016598:	46a1      	mov	r9, r4
1001659a:	eba3 0b00 	sub.w	fp, r3, r0
1001659e:	4605      	mov	r5, r0
100165a0:	e7d6      	b.n	10016550 <_vfprintf_r+0x89c>
100165a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100165a4:	9a06      	ldr	r2, [sp, #24]
100165a6:	1a9e      	subs	r6, r3, r2
100165a8:	2e00      	cmp	r6, #0
100165aa:	f77f ad3c 	ble.w	10016026 <_vfprintf_r+0x372>
100165ae:	2e10      	cmp	r6, #16
100165b0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100165b2:	f341 80ad 	ble.w	10017710 <_vfprintf_r+0x1a5c>
100165b6:	4855      	ldr	r0, [pc, #340]	@ (1001670c <_vfprintf_r+0xa58>)
100165b8:	f8dd a020 	ldr.w	sl, [sp, #32]
100165bc:	9015      	str	r0, [sp, #84]	@ 0x54
100165be:	4621      	mov	r1, r4
100165c0:	2710      	movs	r7, #16
100165c2:	461a      	mov	r2, r3
100165c4:	4604      	mov	r4, r0
100165c6:	e004      	b.n	100165d2 <_vfprintf_r+0x91e>
100165c8:	3e10      	subs	r6, #16
100165ca:	2e10      	cmp	r6, #16
100165cc:	f108 0808 	add.w	r8, r8, #8
100165d0:	dd16      	ble.n	10016600 <_vfprintf_r+0x94c>
100165d2:	3201      	adds	r2, #1
100165d4:	3110      	adds	r1, #16
100165d6:	2a07      	cmp	r2, #7
100165d8:	e9c8 4700 	strd	r4, r7, [r8]
100165dc:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
100165e0:	ddf2      	ble.n	100165c8 <_vfprintf_r+0x914>
100165e2:	9907      	ldr	r1, [sp, #28]
100165e4:	aa32      	add	r2, sp, #200	@ 0xc8
100165e6:	4650      	mov	r0, sl
100165e8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100165ec:	f001 fa02 	bl	100179f4 <__sprint_r>
100165f0:	2800      	cmp	r0, #0
100165f2:	f040 83f8 	bne.w	10016de6 <_vfprintf_r+0x1132>
100165f6:	3e10      	subs	r6, #16
100165f8:	2e10      	cmp	r6, #16
100165fa:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
100165fe:	dce8      	bgt.n	100165d2 <_vfprintf_r+0x91e>
10016600:	460c      	mov	r4, r1
10016602:	4613      	mov	r3, r2
10016604:	3301      	adds	r3, #1
10016606:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10016608:	f8c8 2000 	str.w	r2, [r8]
1001660c:	4434      	add	r4, r6
1001660e:	2b07      	cmp	r3, #7
10016610:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10016614:	f8c8 6004 	str.w	r6, [r8, #4]
10016618:	f300 8314 	bgt.w	10016c44 <_vfprintf_r+0xf90>
1001661c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001661e:	eba3 060b 	sub.w	r6, r3, fp
10016622:	2e00      	cmp	r6, #0
10016624:	f108 0808 	add.w	r8, r8, #8
10016628:	f77f ad03 	ble.w	10016032 <_vfprintf_r+0x37e>
1001662c:	4a37      	ldr	r2, [pc, #220]	@ (1001670c <_vfprintf_r+0xa58>)
1001662e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10016630:	9215      	str	r2, [sp, #84]	@ 0x54
10016632:	2e10      	cmp	r6, #16
10016634:	dd23      	ble.n	1001667e <_vfprintf_r+0x9ca>
10016636:	4622      	mov	r2, r4
10016638:	f04f 0a10 	mov.w	sl, #16
1001663c:	e9dd 4707 	ldrd	r4, r7, [sp, #28]
10016640:	e004      	b.n	1001664c <_vfprintf_r+0x998>
10016642:	3e10      	subs	r6, #16
10016644:	2e10      	cmp	r6, #16
10016646:	f108 0808 	add.w	r8, r8, #8
1001664a:	dd17      	ble.n	1001667c <_vfprintf_r+0x9c8>
1001664c:	3301      	adds	r3, #1
1001664e:	492f      	ldr	r1, [pc, #188]	@ (1001670c <_vfprintf_r+0xa58>)
10016650:	3210      	adds	r2, #16
10016652:	2b07      	cmp	r3, #7
10016654:	e9c8 1a00 	strd	r1, sl, [r8]
10016658:	e9cd 3233 	strd	r3, r2, [sp, #204]	@ 0xcc
1001665c:	ddf1      	ble.n	10016642 <_vfprintf_r+0x98e>
1001665e:	aa32      	add	r2, sp, #200	@ 0xc8
10016660:	4621      	mov	r1, r4
10016662:	4638      	mov	r0, r7
10016664:	f001 f9c6 	bl	100179f4 <__sprint_r>
10016668:	2800      	cmp	r0, #0
1001666a:	f47f ac7a 	bne.w	10015f62 <_vfprintf_r+0x2ae>
1001666e:	3e10      	subs	r6, #16
10016670:	2e10      	cmp	r6, #16
10016672:	e9dd 3233 	ldrd	r3, r2, [sp, #204]	@ 0xcc
10016676:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001667a:	dce7      	bgt.n	1001664c <_vfprintf_r+0x998>
1001667c:	4614      	mov	r4, r2
1001667e:	3301      	adds	r3, #1
10016680:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10016682:	f8c8 2000 	str.w	r2, [r8]
10016686:	4434      	add	r4, r6
10016688:	2b07      	cmp	r3, #7
1001668a:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001668e:	f8c8 6004 	str.w	r6, [r8, #4]
10016692:	f300 81aa 	bgt.w	100169ea <_vfprintf_r+0xd36>
10016696:	f108 0808 	add.w	r8, r8, #8
1001669a:	e4ca      	b.n	10016032 <_vfprintf_r+0x37e>
1001669c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100166a0:	aa32      	add	r2, sp, #200	@ 0xc8
100166a2:	f001 f9a7 	bl	100179f4 <__sprint_r>
100166a6:	2800      	cmp	r0, #0
100166a8:	f43f ace9 	beq.w	1001607e <_vfprintf_r+0x3ca>
100166ac:	f8dd b020 	ldr.w	fp, [sp, #32]
100166b0:	e458      	b.n	10015f64 <_vfprintf_r+0x2b0>
100166b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
100166b4:	9919      	ldr	r1, [sp, #100]	@ 0x64
100166b6:	441c      	add	r4, r3
100166b8:	e9c8 1300 	strd	r1, r3, [r8]
100166bc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100166be:	9434      	str	r4, [sp, #208]	@ 0xd0
100166c0:	3301      	adds	r3, #1
100166c2:	2b07      	cmp	r3, #7
100166c4:	9333      	str	r3, [sp, #204]	@ 0xcc
100166c6:	f300 85bf 	bgt.w	10017248 <_vfprintf_r+0x1594>
100166ca:	f108 0808 	add.w	r8, r8, #8
100166ce:	2a00      	cmp	r2, #0
100166d0:	f2c0 87ae 	blt.w	10017630 <_vfprintf_r+0x197c>
100166d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
100166d6:	f8c8 5000 	str.w	r5, [r8]
100166da:	3301      	adds	r3, #1
100166dc:	4414      	add	r4, r2
100166de:	2b07      	cmp	r3, #7
100166e0:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100166e4:	f8c8 2004 	str.w	r2, [r8, #4]
100166e8:	f77f acb3 	ble.w	10016052 <_vfprintf_r+0x39e>
100166ec:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100166f0:	aa32      	add	r2, sp, #200	@ 0xc8
100166f2:	f001 f97f 	bl	100179f4 <__sprint_r>
100166f6:	2800      	cmp	r0, #0
100166f8:	d1d8      	bne.n	100166ac <_vfprintf_r+0x9f8>
100166fa:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100166fc:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016700:	e4a9      	b.n	10016056 <_vfprintf_r+0x3a2>
10016702:	bf00      	nop
10016704:	1002c150 	.word	0x1002c150
10016708:	1002c180 	.word	0x1002c180
1001670c:	1002c184 	.word	0x1002c184
10016710:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10016712:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
10016714:	2b01      	cmp	r3, #1
10016716:	f104 0401 	add.w	r4, r4, #1
1001671a:	f106 0601 	add.w	r6, r6, #1
1001671e:	f108 0708 	add.w	r7, r8, #8
10016722:	f340 811d 	ble.w	10016960 <_vfprintf_r+0xcac>
10016726:	2301      	movs	r3, #1
10016728:	2e07      	cmp	r6, #7
1001672a:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001672e:	f8c8 5000 	str.w	r5, [r8]
10016732:	f8c8 3004 	str.w	r3, [r8, #4]
10016736:	f300 82e4 	bgt.w	10016d02 <_vfprintf_r+0x104e>
1001673a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001673c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1001673e:	3601      	adds	r6, #1
10016740:	441c      	add	r4, r3
10016742:	2e07      	cmp	r6, #7
10016744:	e9c7 2300 	strd	r2, r3, [r7]
10016748:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001674c:	f300 82cd 	bgt.w	10016cea <_vfprintf_r+0x1036>
10016750:	3708      	adds	r7, #8
10016752:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10016754:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10016758:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
1001675c:	2200      	movs	r2, #0
1001675e:	2300      	movs	r3, #0
10016760:	f00c f876 	bl	10022850 <__aeabi_dcmpeq>
10016764:	2800      	cmp	r0, #0
10016766:	f040 8115 	bne.w	10016994 <_vfprintf_r+0xce0>
1001676a:	3601      	adds	r6, #1
1001676c:	3501      	adds	r5, #1
1001676e:	4444      	add	r4, r8
10016770:	2e07      	cmp	r6, #7
10016772:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10016776:	603d      	str	r5, [r7, #0]
10016778:	f8c7 8004 	str.w	r8, [r7, #4]
1001677c:	f300 80fe 	bgt.w	1001697c <_vfprintf_r+0xcc8>
10016780:	3708      	adds	r7, #8
10016782:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10016784:	607b      	str	r3, [r7, #4]
10016786:	3601      	adds	r6, #1
10016788:	441c      	add	r4, r3
1001678a:	2e07      	cmp	r6, #7
1001678c:	ab2c      	add	r3, sp, #176	@ 0xb0
1001678e:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10016792:	603b      	str	r3, [r7, #0]
10016794:	dcaa      	bgt.n	100166ec <_vfprintf_r+0xa38>
10016796:	f107 0808 	add.w	r8, r7, #8
1001679a:	e45c      	b.n	10016056 <_vfprintf_r+0x3a2>
1001679c:	464c      	mov	r4, r9
1001679e:	2b0a      	cmp	r3, #10
100167a0:	f172 0100 	sbcs.w	r1, r2, #0
100167a4:	f080 82b9 	bcs.w	10016d1a <_vfprintf_r+0x1066>
100167a8:	3330      	adds	r3, #48	@ 0x30
100167aa:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
100167ae:	46a1      	mov	r9, r4
100167b0:	f04f 0b01 	mov.w	fp, #1
100167b4:	f20d 1577 	addw	r5, sp, #375	@ 0x177
100167b8:	e6ca      	b.n	10016550 <_vfprintf_r+0x89c>
100167ba:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100167be:	aa32      	add	r2, sp, #200	@ 0xc8
100167c0:	9315      	str	r3, [sp, #84]	@ 0x54
100167c2:	f001 f917 	bl	100179f4 <__sprint_r>
100167c6:	2800      	cmp	r0, #0
100167c8:	f47f af70 	bne.w	100166ac <_vfprintf_r+0x9f8>
100167cc:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100167ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
100167d0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100167d4:	e412      	b.n	10015ffc <_vfprintf_r+0x348>
100167d6:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100167da:	aa32      	add	r2, sp, #200	@ 0xc8
100167dc:	f001 f90a 	bl	100179f4 <__sprint_r>
100167e0:	2800      	cmp	r0, #0
100167e2:	f47f af63 	bne.w	100166ac <_vfprintf_r+0x9f8>
100167e6:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100167e8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100167ec:	e418      	b.n	10016020 <_vfprintf_r+0x36c>
100167ee:	2d10      	cmp	r5, #16
100167f0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100167f2:	f340 8752 	ble.w	1001769a <_vfprintf_r+0x19e6>
100167f6:	4fbb      	ldr	r7, [pc, #748]	@ (10016ae4 <_vfprintf_r+0xe30>)
100167f8:	9715      	str	r7, [sp, #84]	@ 0x54
100167fa:	e9dd a907 	ldrd	sl, r9, [sp, #28]
100167fe:	2610      	movs	r6, #16
10016800:	e004      	b.n	1001680c <_vfprintf_r+0xb58>
10016802:	3d10      	subs	r5, #16
10016804:	2d10      	cmp	r5, #16
10016806:	f108 0808 	add.w	r8, r8, #8
1001680a:	dd16      	ble.n	1001683a <_vfprintf_r+0xb86>
1001680c:	3301      	adds	r3, #1
1001680e:	3410      	adds	r4, #16
10016810:	2b07      	cmp	r3, #7
10016812:	e9c8 7600 	strd	r7, r6, [r8]
10016816:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001681a:	ddf2      	ble.n	10016802 <_vfprintf_r+0xb4e>
1001681c:	aa32      	add	r2, sp, #200	@ 0xc8
1001681e:	4651      	mov	r1, sl
10016820:	4648      	mov	r0, r9
10016822:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016826:	f001 f8e5 	bl	100179f4 <__sprint_r>
1001682a:	2800      	cmp	r0, #0
1001682c:	f040 82f5 	bne.w	10016e1a <_vfprintf_r+0x1166>
10016830:	3d10      	subs	r5, #16
10016832:	2d10      	cmp	r5, #16
10016834:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10016838:	dce8      	bgt.n	1001680c <_vfprintf_r+0xb58>
1001683a:	3301      	adds	r3, #1
1001683c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001683e:	442c      	add	r4, r5
10016840:	2b07      	cmp	r3, #7
10016842:	e9c8 2500 	strd	r2, r5, [r8]
10016846:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001684a:	f77f ac0d 	ble.w	10016068 <_vfprintf_r+0x3b4>
1001684e:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016852:	aa32      	add	r2, sp, #200	@ 0xc8
10016854:	f001 f8ce 	bl	100179f4 <__sprint_r>
10016858:	2800      	cmp	r0, #0
1001685a:	f47f af27 	bne.w	100166ac <_vfprintf_r+0x9f8>
1001685e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016860:	e402      	b.n	10016068 <_vfprintf_r+0x3b4>
10016862:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10016864:	2a00      	cmp	r2, #0
10016866:	f340 80fd 	ble.w	10016a64 <_vfprintf_r+0xdb0>
1001686a:	e9dd 7312 	ldrd	r7, r3, [sp, #72]	@ 0x48
1001686e:	429f      	cmp	r7, r3
10016870:	bfa8      	it	ge
10016872:	461f      	movge	r7, r3
10016874:	2f00      	cmp	r7, #0
10016876:	eb05 0b03 	add.w	fp, r5, r3
1001687a:	dd0b      	ble.n	10016894 <_vfprintf_r+0xbe0>
1001687c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001687e:	3301      	adds	r3, #1
10016880:	443c      	add	r4, r7
10016882:	2b07      	cmp	r3, #7
10016884:	e9c8 5700 	strd	r5, r7, [r8]
10016888:	9434      	str	r4, [sp, #208]	@ 0xd0
1001688a:	9333      	str	r3, [sp, #204]	@ 0xcc
1001688c:	f300 866f 	bgt.w	1001756e <_vfprintf_r+0x18ba>
10016890:	f108 0808 	add.w	r8, r8, #8
10016894:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10016896:	2f00      	cmp	r7, #0
10016898:	bfa8      	it	ge
1001689a:	1bf6      	subge	r6, r6, r7
1001689c:	2e00      	cmp	r6, #0
1001689e:	f300 8347 	bgt.w	10016f30 <_vfprintf_r+0x127c>
100168a2:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
100168a6:	f419 6f80 	tst.w	r9, #1024	@ 0x400
100168aa:	44aa      	add	sl, r5
100168ac:	f040 857a 	bne.w	100173a4 <_vfprintf_r+0x16f0>
100168b0:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
100168b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100168b4:	429d      	cmp	r5, r3
100168b6:	db03      	blt.n	100168c0 <_vfprintf_r+0xc0c>
100168b8:	f019 0f01 	tst.w	r9, #1
100168bc:	f000 8404 	beq.w	100170c8 <_vfprintf_r+0x1414>
100168c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
100168c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
100168c4:	441c      	add	r4, r3
100168c6:	e9c8 2300 	strd	r2, r3, [r8]
100168ca:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100168cc:	9434      	str	r4, [sp, #208]	@ 0xd0
100168ce:	3301      	adds	r3, #1
100168d0:	2b07      	cmp	r3, #7
100168d2:	9333      	str	r3, [sp, #204]	@ 0xcc
100168d4:	f300 865a 	bgt.w	1001758c <_vfprintf_r+0x18d8>
100168d8:	f108 0808 	add.w	r8, r8, #8
100168dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100168de:	ebab 060a 	sub.w	r6, fp, sl
100168e2:	1b5d      	subs	r5, r3, r5
100168e4:	42ae      	cmp	r6, r5
100168e6:	bfa8      	it	ge
100168e8:	462e      	movge	r6, r5
100168ea:	2e00      	cmp	r6, #0
100168ec:	dd0d      	ble.n	1001690a <_vfprintf_r+0xc56>
100168ee:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100168f0:	f8c8 a000 	str.w	sl, [r8]
100168f4:	3301      	adds	r3, #1
100168f6:	4434      	add	r4, r6
100168f8:	2b07      	cmp	r3, #7
100168fa:	f8c8 6004 	str.w	r6, [r8, #4]
100168fe:	9434      	str	r4, [sp, #208]	@ 0xd0
10016900:	9333      	str	r3, [sp, #204]	@ 0xcc
10016902:	f300 8655 	bgt.w	100175b0 <_vfprintf_r+0x18fc>
10016906:	f108 0808 	add.w	r8, r8, #8
1001690a:	2e00      	cmp	r6, #0
1001690c:	bfa8      	it	ge
1001690e:	1bad      	subge	r5, r5, r6
10016910:	2d00      	cmp	r5, #0
10016912:	f77f aba0 	ble.w	10016056 <_vfprintf_r+0x3a2>
10016916:	2d10      	cmp	r5, #16
10016918:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001691a:	f340 82da 	ble.w	10016ed2 <_vfprintf_r+0x121e>
1001691e:	4f72      	ldr	r7, [pc, #456]	@ (10016ae8 <_vfprintf_r+0xe34>)
10016920:	9715      	str	r7, [sp, #84]	@ 0x54
10016922:	e9dd ab07 	ldrd	sl, fp, [sp, #28]
10016926:	2610      	movs	r6, #16
10016928:	e005      	b.n	10016936 <_vfprintf_r+0xc82>
1001692a:	f108 0808 	add.w	r8, r8, #8
1001692e:	3d10      	subs	r5, #16
10016930:	2d10      	cmp	r5, #16
10016932:	f340 82d0 	ble.w	10016ed6 <_vfprintf_r+0x1222>
10016936:	3301      	adds	r3, #1
10016938:	3410      	adds	r4, #16
1001693a:	2b07      	cmp	r3, #7
1001693c:	e9c8 7600 	strd	r7, r6, [r8]
10016940:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10016944:	ddf1      	ble.n	1001692a <_vfprintf_r+0xc76>
10016946:	aa32      	add	r2, sp, #200	@ 0xc8
10016948:	4651      	mov	r1, sl
1001694a:	4658      	mov	r0, fp
1001694c:	f001 f852 	bl	100179f4 <__sprint_r>
10016950:	2800      	cmp	r0, #0
10016952:	f47f ab07 	bne.w	10015f64 <_vfprintf_r+0x2b0>
10016956:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001695a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001695e:	e7e6      	b.n	1001692e <_vfprintf_r+0xc7a>
10016960:	f019 0f01 	tst.w	r9, #1
10016964:	f47f aedf 	bne.w	10016726 <_vfprintf_r+0xa72>
10016968:	2301      	movs	r3, #1
1001696a:	2e07      	cmp	r6, #7
1001696c:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10016970:	f8c8 5000 	str.w	r5, [r8]
10016974:	f8c8 3004 	str.w	r3, [r8, #4]
10016978:	f77f af03 	ble.w	10016782 <_vfprintf_r+0xace>
1001697c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016980:	aa32      	add	r2, sp, #200	@ 0xc8
10016982:	f001 f837 	bl	100179f4 <__sprint_r>
10016986:	2800      	cmp	r0, #0
10016988:	f47f ae90 	bne.w	100166ac <_vfprintf_r+0x9f8>
1001698c:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10016990:	af35      	add	r7, sp, #212	@ 0xd4
10016992:	e6f6      	b.n	10016782 <_vfprintf_r+0xace>
10016994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10016996:	2b01      	cmp	r3, #1
10016998:	f77f aef3 	ble.w	10016782 <_vfprintf_r+0xace>
1001699c:	2b11      	cmp	r3, #17
1001699e:	4b52      	ldr	r3, [pc, #328]	@ (10016ae8 <_vfprintf_r+0xe34>)
100169a0:	9315      	str	r3, [sp, #84]	@ 0x54
100169a2:	f340 82b9 	ble.w	10016f18 <_vfprintf_r+0x1264>
100169a6:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
100169aa:	e9dd ba07 	ldrd	fp, sl, [sp, #28]
100169ae:	2510      	movs	r5, #16
100169b0:	4699      	mov	r9, r3
100169b2:	e006      	b.n	100169c2 <_vfprintf_r+0xd0e>
100169b4:	3708      	adds	r7, #8
100169b6:	f1a8 0810 	sub.w	r8, r8, #16
100169ba:	f1b8 0f10 	cmp.w	r8, #16
100169be:	f340 82a9 	ble.w	10016f14 <_vfprintf_r+0x1260>
100169c2:	3601      	adds	r6, #1
100169c4:	3410      	adds	r4, #16
100169c6:	2e07      	cmp	r6, #7
100169c8:	e9c7 9500 	strd	r9, r5, [r7]
100169cc:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
100169d0:	ddf0      	ble.n	100169b4 <_vfprintf_r+0xd00>
100169d2:	aa32      	add	r2, sp, #200	@ 0xc8
100169d4:	4659      	mov	r1, fp
100169d6:	4650      	mov	r0, sl
100169d8:	f001 f80c 	bl	100179f4 <__sprint_r>
100169dc:	2800      	cmp	r0, #0
100169de:	f040 8202 	bne.w	10016de6 <_vfprintf_r+0x1132>
100169e2:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
100169e6:	af35      	add	r7, sp, #212	@ 0xd4
100169e8:	e7e5      	b.n	100169b6 <_vfprintf_r+0xd02>
100169ea:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100169ee:	aa32      	add	r2, sp, #200	@ 0xc8
100169f0:	f001 f800 	bl	100179f4 <__sprint_r>
100169f4:	2800      	cmp	r0, #0
100169f6:	f47f ae59 	bne.w	100166ac <_vfprintf_r+0x9f8>
100169fa:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100169fc:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016a00:	f7ff bb17 	b.w	10016032 <_vfprintf_r+0x37e>
10016a04:	990d      	ldr	r1, [sp, #52]	@ 0x34
10016a06:	f851 3b04 	ldr.w	r3, [r1], #4
10016a0a:	910d      	str	r1, [sp, #52]	@ 0x34
10016a0c:	f014 0110 	ands.w	r1, r4, #16
10016a10:	d155      	bne.n	10016abe <_vfprintf_r+0xe0a>
10016a12:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
10016a16:	d04d      	beq.n	10016ab4 <_vfprintf_r+0xe00>
10016a18:	460a      	mov	r2, r1
10016a1a:	b29b      	uxth	r3, r3
10016a1c:	2101      	movs	r1, #1
10016a1e:	e4b7      	b.n	10016390 <_vfprintf_r+0x6dc>
10016a20:	990d      	ldr	r1, [sp, #52]	@ 0x34
10016a22:	f851 3b04 	ldr.w	r3, [r1], #4
10016a26:	910d      	str	r1, [sp, #52]	@ 0x34
10016a28:	f019 0110 	ands.w	r1, r9, #16
10016a2c:	f47f acad 	bne.w	1001638a <_vfprintf_r+0x6d6>
10016a30:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
10016a34:	f000 82a9 	beq.w	10016f8a <_vfprintf_r+0x12d6>
10016a38:	b29b      	uxth	r3, r3
10016a3a:	460a      	mov	r2, r1
10016a3c:	e4a5      	b.n	1001638a <_vfprintf_r+0x6d6>
10016a3e:	9d07      	ldr	r5, [sp, #28]
10016a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10016a42:	f003 fae9 	bl	1001a018 <__retarget_lock_acquire_recursive>
10016a46:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
10016a4a:	f7ff b959 	b.w	10015d00 <_vfprintf_r+0x4c>
10016a4e:	f019 0f01 	tst.w	r9, #1
10016a52:	f43f ab00 	beq.w	10016056 <_vfprintf_r+0x3a2>
10016a56:	e52b      	b.n	100164b0 <_vfprintf_r+0x7fc>
10016a58:	930d      	str	r3, [sp, #52]	@ 0x34
10016a5a:	7823      	ldrb	r3, [r4, #0]
10016a5c:	f7ff b9a2 	b.w	10015da4 <_vfprintf_r+0xf0>
10016a60:	ad5e      	add	r5, sp, #376	@ 0x178
10016a62:	e575      	b.n	10016550 <_vfprintf_r+0x89c>
10016a64:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10016a66:	4921      	ldr	r1, [pc, #132]	@ (10016aec <_vfprintf_r+0xe38>)
10016a68:	f8c8 1000 	str.w	r1, [r8]
10016a6c:	3301      	adds	r3, #1
10016a6e:	3401      	adds	r4, #1
10016a70:	2101      	movs	r1, #1
10016a72:	2b07      	cmp	r3, #7
10016a74:	9434      	str	r4, [sp, #208]	@ 0xd0
10016a76:	9333      	str	r3, [sp, #204]	@ 0xcc
10016a78:	f8c8 1004 	str.w	r1, [r8, #4]
10016a7c:	f300 8551 	bgt.w	10017522 <_vfprintf_r+0x186e>
10016a80:	f108 0808 	add.w	r8, r8, #8
10016a84:	2a00      	cmp	r2, #0
10016a86:	f47f ae14 	bne.w	100166b2 <_vfprintf_r+0x9fe>
10016a8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10016a8c:	f009 0301 	and.w	r3, r9, #1
10016a90:	4313      	orrs	r3, r2
10016a92:	f43f aae0 	beq.w	10016056 <_vfprintf_r+0x3a2>
10016a96:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10016a98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10016a9a:	441c      	add	r4, r3
10016a9c:	e9c8 2300 	strd	r2, r3, [r8]
10016aa0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10016aa2:	9434      	str	r4, [sp, #208]	@ 0xd0
10016aa4:	3301      	adds	r3, #1
10016aa6:	2b07      	cmp	r3, #7
10016aa8:	9333      	str	r3, [sp, #204]	@ 0xcc
10016aaa:	f300 83cd 	bgt.w	10017248 <_vfprintf_r+0x1594>
10016aae:	f108 0808 	add.w	r8, r8, #8
10016ab2:	e60f      	b.n	100166d4 <_vfprintf_r+0xa20>
10016ab4:	f414 7200 	ands.w	r2, r4, #512	@ 0x200
10016ab8:	bf1c      	itt	ne
10016aba:	b2db      	uxtbne	r3, r3
10016abc:	4602      	movne	r2, r0
10016abe:	2101      	movs	r1, #1
10016ac0:	e466      	b.n	10016390 <_vfprintf_r+0x6dc>
10016ac2:	f419 7f00 	tst.w	r9, #512	@ 0x200
10016ac6:	f040 8307 	bne.w	100170d8 <_vfprintf_r+0x1424>
10016aca:	17da      	asrs	r2, r3, #31
10016acc:	4611      	mov	r1, r2
10016ace:	2900      	cmp	r1, #0
10016ad0:	f6bf abdb 	bge.w	1001628a <_vfprintf_r+0x5d6>
10016ad4:	425b      	negs	r3, r3
10016ad6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
10016ada:	464c      	mov	r4, r9
10016adc:	202d      	movs	r0, #45	@ 0x2d
10016ade:	2101      	movs	r1, #1
10016ae0:	e457      	b.n	10016392 <_vfprintf_r+0x6de>
10016ae2:	bf00      	nop
10016ae4:	1002c194 	.word	0x1002c194
10016ae8:	1002c184 	.word	0x1002c184
10016aec:	1002c180 	.word	0x1002c180
10016af0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
10016af2:	7823      	ldrb	r3, [r4, #0]
10016af4:	2a00      	cmp	r2, #0
10016af6:	f43f a955 	beq.w	10015da4 <_vfprintf_r+0xf0>
10016afa:	7812      	ldrb	r2, [r2, #0]
10016afc:	2a00      	cmp	r2, #0
10016afe:	f43f a951 	beq.w	10015da4 <_vfprintf_r+0xf0>
10016b02:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
10016b06:	f7ff b94d 	b.w	10015da4 <_vfprintf_r+0xf0>
10016b0a:	f019 0f10 	tst.w	r9, #16
10016b0e:	f040 81fb 	bne.w	10016f08 <_vfprintf_r+0x1254>
10016b12:	f019 0f40 	tst.w	r9, #64	@ 0x40
10016b16:	f040 82e5 	bne.w	100170e4 <_vfprintf_r+0x1430>
10016b1a:	f419 7f00 	tst.w	r9, #512	@ 0x200
10016b1e:	f000 81f3 	beq.w	10016f08 <_vfprintf_r+0x1254>
10016b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10016b26:	681b      	ldr	r3, [r3, #0]
10016b28:	701a      	strb	r2, [r3, #0]
10016b2a:	e49b      	b.n	10016464 <_vfprintf_r+0x7b0>
10016b2c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10016b30:	4602      	mov	r2, r0
10016b32:	460b      	mov	r3, r1
10016b34:	f00b febe 	bl	100228b4 <__aeabi_dcmpun>
10016b38:	2800      	cmp	r0, #0
10016b3a:	f040 8638 	bne.w	100177ae <_vfprintf_r+0x1afa>
10016b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016b40:	2b61      	cmp	r3, #97	@ 0x61
10016b42:	f000 8521 	beq.w	10017588 <_vfprintf_r+0x18d4>
10016b46:	2b41      	cmp	r3, #65	@ 0x41
10016b48:	f000 82e3 	beq.w	10017112 <_vfprintf_r+0x145e>
10016b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10016b4e:	3301      	adds	r3, #1
10016b50:	f000 8617 	beq.w	10017782 <_vfprintf_r+0x1ace>
10016b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016b56:	f023 0320 	bic.w	r3, r3, #32
10016b5a:	2b47      	cmp	r3, #71	@ 0x47
10016b5c:	d104      	bne.n	10016b68 <_vfprintf_r+0xeb4>
10016b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10016b60:	2b00      	cmp	r3, #0
10016b62:	bf08      	it	eq
10016b64:	2301      	moveq	r3, #1
10016b66:	9309      	str	r3, [sp, #36]	@ 0x24
10016b68:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	@ 0x58
10016b6c:	f449 7080 	orr.w	r0, r9, #256	@ 0x100
10016b70:	2a00      	cmp	r2, #0
10016b72:	9015      	str	r0, [sp, #84]	@ 0x54
10016b74:	f8cd 9018 	str.w	r9, [sp, #24]
10016b78:	f04f 0300 	mov.w	r3, #0
10016b7c:	f2c0 84df 	blt.w	1001753e <_vfprintf_r+0x188a>
10016b80:	e9cd 1224 	strd	r1, r2, [sp, #144]	@ 0x90
10016b84:	931f      	str	r3, [sp, #124]	@ 0x7c
10016b86:	930c      	str	r3, [sp, #48]	@ 0x30
10016b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016b8a:	3b41      	subs	r3, #65	@ 0x41
10016b8c:	2b25      	cmp	r3, #37	@ 0x25
10016b8e:	f200 8203 	bhi.w	10016f98 <_vfprintf_r+0x12e4>
10016b92:	e8df f013 	tbh	[pc, r3, lsl #1]
10016b96:	0374      	.short	0x0374
10016b98:	02010201 	.word	0x02010201
10016b9c:	036d0201 	.word	0x036d0201
10016ba0:	02010371 	.word	0x02010371
10016ba4:	02010201 	.word	0x02010201
10016ba8:	02010201 	.word	0x02010201
10016bac:	02010201 	.word	0x02010201
10016bb0:	02010201 	.word	0x02010201
10016bb4:	02010201 	.word	0x02010201
10016bb8:	02010201 	.word	0x02010201
10016bbc:	02010201 	.word	0x02010201
10016bc0:	02010201 	.word	0x02010201
10016bc4:	02010201 	.word	0x02010201
10016bc8:	02010201 	.word	0x02010201
10016bcc:	02010201 	.word	0x02010201
10016bd0:	02010201 	.word	0x02010201
10016bd4:	02010201 	.word	0x02010201
10016bd8:	02010201 	.word	0x02010201
10016bdc:	036d0201 	.word	0x036d0201
10016be0:	0371      	.short	0x0371
10016be2:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10016be6:	4bc3      	ldr	r3, [pc, #780]	@ (10016ef4 <_vfprintf_r+0x1240>)
10016be8:	931a      	str	r3, [sp, #104]	@ 0x68
10016bea:	f019 0220 	ands.w	r2, r9, #32
10016bee:	d06a      	beq.n	10016cc6 <_vfprintf_r+0x1012>
10016bf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016bf2:	3307      	adds	r3, #7
10016bf4:	f023 0307 	bic.w	r3, r3, #7
10016bf8:	4619      	mov	r1, r3
10016bfa:	685a      	ldr	r2, [r3, #4]
10016bfc:	f851 3b08 	ldr.w	r3, [r1], #8
10016c00:	910d      	str	r1, [sp, #52]	@ 0x34
10016c02:	f019 0f01 	tst.w	r9, #1
10016c06:	d00a      	beq.n	10016c1e <_vfprintf_r+0xf6a>
10016c08:	ea53 0102 	orrs.w	r1, r3, r2
10016c0c:	d007      	beq.n	10016c1e <_vfprintf_r+0xf6a>
10016c0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
10016c10:	f88d 10a1 	strb.w	r1, [sp, #161]	@ 0xa1
10016c14:	2130      	movs	r1, #48	@ 0x30
10016c16:	f049 0902 	orr.w	r9, r9, #2
10016c1a:	f88d 10a0 	strb.w	r1, [sp, #160]	@ 0xa0
10016c1e:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
10016c22:	2102      	movs	r1, #2
10016c24:	f7ff bbb4 	b.w	10016390 <_vfprintf_r+0x6dc>
10016c28:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10016c2c:	464c      	mov	r4, r9
10016c2e:	f7ff bbd0 	b.w	100163d2 <_vfprintf_r+0x71e>
10016c32:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10016c36:	f7ff bb9b 	b.w	10016370 <_vfprintf_r+0x6bc>
10016c3a:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10016c3e:	4bae      	ldr	r3, [pc, #696]	@ (10016ef8 <_vfprintf_r+0x1244>)
10016c40:	931a      	str	r3, [sp, #104]	@ 0x68
10016c42:	e7d2      	b.n	10016bea <_vfprintf_r+0xf36>
10016c44:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016c48:	aa32      	add	r2, sp, #200	@ 0xc8
10016c4a:	f000 fed3 	bl	100179f4 <__sprint_r>
10016c4e:	2800      	cmp	r0, #0
10016c50:	f47f ad2c 	bne.w	100166ac <_vfprintf_r+0x9f8>
10016c54:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016c56:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016c5a:	f7ff b9e4 	b.w	10016026 <_vfprintf_r+0x372>
10016c5e:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016c62:	aa32      	add	r2, sp, #200	@ 0xc8
10016c64:	f000 fec6 	bl	100179f4 <__sprint_r>
10016c68:	2800      	cmp	r0, #0
10016c6a:	f47f ad1f 	bne.w	100166ac <_vfprintf_r+0x9f8>
10016c6e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016c70:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016c74:	e42a      	b.n	100164cc <_vfprintf_r+0x818>
10016c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10016c78:	950c      	str	r5, [sp, #48]	@ 0x30
10016c7a:	2b06      	cmp	r3, #6
10016c7c:	4629      	mov	r1, r5
10016c7e:	bf28      	it	cs
10016c80:	2306      	movcs	r3, #6
10016c82:	9509      	str	r5, [sp, #36]	@ 0x24
10016c84:	462a      	mov	r2, r5
10016c86:	9306      	str	r3, [sp, #24]
10016c88:	4d9c      	ldr	r5, [pc, #624]	@ (10016efc <_vfprintf_r+0x1248>)
10016c8a:	960d      	str	r6, [sp, #52]	@ 0x34
10016c8c:	469b      	mov	fp, r3
10016c8e:	9114      	str	r1, [sp, #80]	@ 0x50
10016c90:	9110      	str	r1, [sp, #64]	@ 0x40
10016c92:	9112      	str	r1, [sp, #72]	@ 0x48
10016c94:	f7ff ba40 	b.w	10016118 <_vfprintf_r+0x464>
10016c98:	2208      	movs	r2, #8
10016c9a:	2100      	movs	r1, #0
10016c9c:	a830      	add	r0, sp, #192	@ 0xc0
10016c9e:	f002 fecd 	bl	10019a3c <memset>
10016ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016ca4:	9808      	ldr	r0, [sp, #32]
10016ca6:	681a      	ldr	r2, [r3, #0]
10016ca8:	ad45      	add	r5, sp, #276	@ 0x114
10016caa:	ab30      	add	r3, sp, #192	@ 0xc0
10016cac:	4629      	mov	r1, r5
10016cae:	f003 fb13 	bl	1001a2d8 <_wcrtomb_r>
10016cb2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
10016cb6:	4683      	mov	fp, r0
10016cb8:	f000 8544 	beq.w	10017744 <_vfprintf_r+0x1a90>
10016cbc:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
10016cc0:	9306      	str	r3, [sp, #24]
10016cc2:	f7ff ba93 	b.w	100161ec <_vfprintf_r+0x538>
10016cc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
10016cc8:	f851 3b04 	ldr.w	r3, [r1], #4
10016ccc:	910d      	str	r1, [sp, #52]	@ 0x34
10016cce:	f019 0110 	ands.w	r1, r9, #16
10016cd2:	d196      	bne.n	10016c02 <_vfprintf_r+0xf4e>
10016cd4:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
10016cd8:	f000 8151 	beq.w	10016f7e <_vfprintf_r+0x12ca>
10016cdc:	b29b      	uxth	r3, r3
10016cde:	460a      	mov	r2, r1
10016ce0:	e78f      	b.n	10016c02 <_vfprintf_r+0xf4e>
10016ce2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10016ce6:	ad5e      	add	r5, sp, #376	@ 0x178
10016ce8:	e432      	b.n	10016550 <_vfprintf_r+0x89c>
10016cea:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016cee:	aa32      	add	r2, sp, #200	@ 0xc8
10016cf0:	f000 fe80 	bl	100179f4 <__sprint_r>
10016cf4:	2800      	cmp	r0, #0
10016cf6:	f47f acd9 	bne.w	100166ac <_vfprintf_r+0x9f8>
10016cfa:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10016cfe:	af35      	add	r7, sp, #212	@ 0xd4
10016d00:	e527      	b.n	10016752 <_vfprintf_r+0xa9e>
10016d02:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016d06:	aa32      	add	r2, sp, #200	@ 0xc8
10016d08:	f000 fe74 	bl	100179f4 <__sprint_r>
10016d0c:	2800      	cmp	r0, #0
10016d0e:	f47f accd 	bne.w	100166ac <_vfprintf_r+0x9f8>
10016d12:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10016d16:	af35      	add	r7, sp, #212	@ 0xd4
10016d18:	e50f      	b.n	1001673a <_vfprintf_r+0xa86>
10016d1a:	f404 6b80 	and.w	fp, r4, #1024	@ 0x400
10016d1e:	2100      	movs	r1, #0
10016d20:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
10016d24:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 10016f00 <_vfprintf_r+0x124c>
10016d28:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
10016d2c:	9406      	str	r4, [sp, #24]
10016d2e:	ad5e      	add	r5, sp, #376	@ 0x178
10016d30:	f04f 3acc 	mov.w	sl, #3435973836	@ 0xcccccccc
10016d34:	2705      	movs	r7, #5
10016d36:	468c      	mov	ip, r1
10016d38:	465e      	mov	r6, fp
10016d3a:	e005      	b.n	10016d48 <_vfprintf_r+0x1094>
10016d3c:	2b0a      	cmp	r3, #10
10016d3e:	f172 0200 	sbcs.w	r2, r2, #0
10016d42:	d333      	bcc.n	10016dac <_vfprintf_r+0x10f8>
10016d44:	465b      	mov	r3, fp
10016d46:	4622      	mov	r2, r4
10016d48:	1899      	adds	r1, r3, r2
10016d4a:	f141 0100 	adc.w	r1, r1, #0
10016d4e:	fba9 0401 	umull	r0, r4, r9, r1
10016d52:	f024 0003 	bic.w	r0, r4, #3
10016d56:	eb00 0094 	add.w	r0, r0, r4, lsr #2
10016d5a:	1a09      	subs	r1, r1, r0
10016d5c:	1a58      	subs	r0, r3, r1
10016d5e:	f162 0e00 	sbc.w	lr, r2, #0
10016d62:	fb0a f400 	mul.w	r4, sl, r0
10016d66:	fba0 b009 	umull	fp, r0, r0, r9
10016d6a:	fb09 440e 	mla	r4, r9, lr, r4
10016d6e:	f00b 0e01 	and.w	lr, fp, #1
10016d72:	4404      	add	r4, r0
10016d74:	fbae 0e07 	umull	r0, lr, lr, r7
10016d78:	1840      	adds	r0, r0, r1
10016d7a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
10016d7e:	3030      	adds	r0, #48	@ 0x30
10016d80:	f805 0c01 	strb.w	r0, [r5, #-1]
10016d84:	ea4b 7bc4 	orr.w	fp, fp, r4, lsl #31
10016d88:	f10c 0c01 	add.w	ip, ip, #1
10016d8c:	3d01      	subs	r5, #1
10016d8e:	0864      	lsrs	r4, r4, #1
10016d90:	2e00      	cmp	r6, #0
10016d92:	d0d3      	beq.n	10016d3c <_vfprintf_r+0x1088>
10016d94:	f898 1000 	ldrb.w	r1, [r8]
10016d98:	458c      	cmp	ip, r1
10016d9a:	d1cf      	bne.n	10016d3c <_vfprintf_r+0x1088>
10016d9c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
10016da0:	d0cc      	beq.n	10016d3c <_vfprintf_r+0x1088>
10016da2:	2b0a      	cmp	r3, #10
10016da4:	f172 0200 	sbcs.w	r2, r2, #0
10016da8:	f080 82c5 	bcs.w	10017336 <_vfprintf_r+0x1682>
10016dac:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
10016db0:	9c06      	ldr	r4, [sp, #24]
10016db2:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
10016db6:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
10016dba:	f7ff bbc5 	b.w	10016548 <_vfprintf_r+0x894>
10016dbe:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016dc2:	aa32      	add	r2, sp, #200	@ 0xc8
10016dc4:	9315      	str	r3, [sp, #84]	@ 0x54
10016dc6:	f000 fe15 	bl	100179f4 <__sprint_r>
10016dca:	2800      	cmp	r0, #0
10016dcc:	f47f ac6e 	bne.w	100166ac <_vfprintf_r+0x9f8>
10016dd0:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016dd4:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016dd6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10016dd8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016ddc:	f7ff b8fc 	b.w	10015fd8 <_vfprintf_r+0x324>
10016de0:	46a3      	mov	fp, r4
10016de2:	f7ff b8bf 	b.w	10015f64 <_vfprintf_r+0x2b0>
10016de6:	46d3      	mov	fp, sl
10016de8:	f7ff b8bc 	b.w	10015f64 <_vfprintf_r+0x2b0>
10016dec:	4658      	mov	r0, fp
10016dee:	f002 fa3f 	bl	10019270 <__sinit>
10016df2:	f7fe bf7c 	b.w	10015cee <_vfprintf_r+0x3a>
10016df6:	2901      	cmp	r1, #1
10016df8:	464c      	mov	r4, r9
10016dfa:	f47f ab95 	bne.w	10016528 <_vfprintf_r+0x874>
10016dfe:	e4d3      	b.n	100167a8 <_vfprintf_r+0xaf4>
10016e00:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016e04:	aa32      	add	r2, sp, #200	@ 0xc8
10016e06:	f000 fdf5 	bl	100179f4 <__sprint_r>
10016e0a:	2800      	cmp	r0, #0
10016e0c:	f47f ac4e 	bne.w	100166ac <_vfprintf_r+0x9f8>
10016e10:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016e12:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016e16:	f7ff bb46 	b.w	100164a6 <_vfprintf_r+0x7f2>
10016e1a:	46cb      	mov	fp, r9
10016e1c:	f7ff b8a2 	b.w	10015f64 <_vfprintf_r+0x2b0>
10016e20:	af30      	add	r7, sp, #192	@ 0xc0
10016e22:	2208      	movs	r2, #8
10016e24:	2100      	movs	r1, #0
10016e26:	4638      	mov	r0, r7
10016e28:	952b      	str	r5, [sp, #172]	@ 0xac
10016e2a:	f002 fe07 	bl	10019a3c <memset>
10016e2e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
10016e32:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
10016e36:	f000 8270 	beq.w	1001731a <_vfprintf_r+0x1666>
10016e3a:	2400      	movs	r4, #0
10016e3c:	f8cd 9018 	str.w	r9, [sp, #24]
10016e40:	46a3      	mov	fp, r4
10016e42:	f8dd 9020 	ldr.w	r9, [sp, #32]
10016e46:	e00c      	b.n	10016e62 <_vfprintf_r+0x11ae>
10016e48:	a945      	add	r1, sp, #276	@ 0x114
10016e4a:	4648      	mov	r0, r9
10016e4c:	f003 fa44 	bl	1001a2d8 <_wcrtomb_r>
10016e50:	1c41      	adds	r1, r0, #1
10016e52:	4458      	add	r0, fp
10016e54:	f000 8476 	beq.w	10017744 <_vfprintf_r+0x1a90>
10016e58:	4550      	cmp	r0, sl
10016e5a:	dc08      	bgt.n	10016e6e <_vfprintf_r+0x11ba>
10016e5c:	f000 84c3 	beq.w	100177e6 <_vfprintf_r+0x1b32>
10016e60:	4683      	mov	fp, r0
10016e62:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
10016e64:	5912      	ldr	r2, [r2, r4]
10016e66:	463b      	mov	r3, r7
10016e68:	3404      	adds	r4, #4
10016e6a:	2a00      	cmp	r2, #0
10016e6c:	d1ec      	bne.n	10016e48 <_vfprintf_r+0x1194>
10016e6e:	f8dd 9018 	ldr.w	r9, [sp, #24]
10016e72:	f1bb 0f00 	cmp.w	fp, #0
10016e76:	f000 8343 	beq.w	10017500 <_vfprintf_r+0x184c>
10016e7a:	f1bb 0f63 	cmp.w	fp, #99	@ 0x63
10016e7e:	f340 83fa 	ble.w	10017676 <_vfprintf_r+0x19c2>
10016e82:	9808      	ldr	r0, [sp, #32]
10016e84:	f10b 0101 	add.w	r1, fp, #1
10016e88:	f7fe fc46 	bl	10015718 <_malloc_r>
10016e8c:	4605      	mov	r5, r0
10016e8e:	2800      	cmp	r0, #0
10016e90:	f000 8458 	beq.w	10017744 <_vfprintf_r+0x1a90>
10016e94:	900c      	str	r0, [sp, #48]	@ 0x30
10016e96:	2208      	movs	r2, #8
10016e98:	2100      	movs	r1, #0
10016e9a:	4638      	mov	r0, r7
10016e9c:	f002 fdce 	bl	10019a3c <memset>
10016ea0:	9808      	ldr	r0, [sp, #32]
10016ea2:	9700      	str	r7, [sp, #0]
10016ea4:	465b      	mov	r3, fp
10016ea6:	aa2b      	add	r2, sp, #172	@ 0xac
10016ea8:	4629      	mov	r1, r5
10016eaa:	f003 fa3b 	bl	1001a324 <_wcsrtombs_r>
10016eae:	4583      	cmp	fp, r0
10016eb0:	f040 8519 	bne.w	100178e6 <_vfprintf_r+0x1c32>
10016eb4:	2300      	movs	r3, #0
10016eb6:	f805 300b 	strb.w	r3, [r5, fp]
10016eba:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
10016ebe:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016ec2:	960d      	str	r6, [sp, #52]	@ 0x34
10016ec4:	9309      	str	r3, [sp, #36]	@ 0x24
10016ec6:	9106      	str	r1, [sp, #24]
10016ec8:	9314      	str	r3, [sp, #80]	@ 0x50
10016eca:	9310      	str	r3, [sp, #64]	@ 0x40
10016ecc:	9312      	str	r3, [sp, #72]	@ 0x48
10016ece:	f7ff b923 	b.w	10016118 <_vfprintf_r+0x464>
10016ed2:	4a0c      	ldr	r2, [pc, #48]	@ (10016f04 <_vfprintf_r+0x1250>)
10016ed4:	9215      	str	r2, [sp, #84]	@ 0x54
10016ed6:	3301      	adds	r3, #1
10016ed8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10016eda:	f8c8 2000 	str.w	r2, [r8]
10016ede:	442c      	add	r4, r5
10016ee0:	2b07      	cmp	r3, #7
10016ee2:	f8c8 5004 	str.w	r5, [r8, #4]
10016ee6:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10016eea:	f77f a8b2 	ble.w	10016052 <_vfprintf_r+0x39e>
10016eee:	f7ff bbfd 	b.w	100166ec <_vfprintf_r+0xa38>
10016ef2:	bf00      	nop
10016ef4:	1002c164 	.word	0x1002c164
10016ef8:	1002c150 	.word	0x1002c150
10016efc:	1002c178 	.word	0x1002c178
10016f00:	cccccccd 	.word	0xcccccccd
10016f04:	1002c184 	.word	0x1002c184
10016f08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016f0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10016f0c:	681b      	ldr	r3, [r3, #0]
10016f0e:	601a      	str	r2, [r3, #0]
10016f10:	f7ff baa8 	b.w	10016464 <_vfprintf_r+0x7b0>
10016f14:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
10016f18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10016f1a:	603b      	str	r3, [r7, #0]
10016f1c:	3601      	adds	r6, #1
10016f1e:	4444      	add	r4, r8
10016f20:	2e07      	cmp	r6, #7
10016f22:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10016f26:	f8c7 8004 	str.w	r8, [r7, #4]
10016f2a:	f77f ac29 	ble.w	10016780 <_vfprintf_r+0xacc>
10016f2e:	e525      	b.n	1001697c <_vfprintf_r+0xcc8>
10016f30:	2e10      	cmp	r6, #16
10016f32:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10016f34:	f340 84ad 	ble.w	10017892 <_vfprintf_r+0x1bde>
10016f38:	4898      	ldr	r0, [pc, #608]	@ (1001719c <_vfprintf_r+0x14e8>)
10016f3a:	9015      	str	r0, [sp, #84]	@ 0x54
10016f3c:	4642      	mov	r2, r8
10016f3e:	4621      	mov	r1, r4
10016f40:	46a8      	mov	r8, r5
10016f42:	e9dd 4a07 	ldrd	r4, sl, [sp, #28]
10016f46:	2710      	movs	r7, #16
10016f48:	4605      	mov	r5, r0
10016f4a:	e004      	b.n	10016f56 <_vfprintf_r+0x12a2>
10016f4c:	3208      	adds	r2, #8
10016f4e:	3e10      	subs	r6, #16
10016f50:	2e10      	cmp	r6, #16
10016f52:	f340 81ca 	ble.w	100172ea <_vfprintf_r+0x1636>
10016f56:	3301      	adds	r3, #1
10016f58:	3110      	adds	r1, #16
10016f5a:	2b07      	cmp	r3, #7
10016f5c:	e9c2 5700 	strd	r5, r7, [r2]
10016f60:	e9cd 3133 	strd	r3, r1, [sp, #204]	@ 0xcc
10016f64:	ddf2      	ble.n	10016f4c <_vfprintf_r+0x1298>
10016f66:	aa32      	add	r2, sp, #200	@ 0xc8
10016f68:	4621      	mov	r1, r4
10016f6a:	4650      	mov	r0, sl
10016f6c:	f000 fd42 	bl	100179f4 <__sprint_r>
10016f70:	2800      	cmp	r0, #0
10016f72:	f47f af38 	bne.w	10016de6 <_vfprintf_r+0x1132>
10016f76:	e9dd 3133 	ldrd	r3, r1, [sp, #204]	@ 0xcc
10016f7a:	aa35      	add	r2, sp, #212	@ 0xd4
10016f7c:	e7e7      	b.n	10016f4e <_vfprintf_r+0x129a>
10016f7e:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
10016f82:	bf1c      	itt	ne
10016f84:	b2db      	uxtbne	r3, r3
10016f86:	4602      	movne	r2, r0
10016f88:	e63b      	b.n	10016c02 <_vfprintf_r+0xf4e>
10016f8a:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
10016f8e:	bf1c      	itt	ne
10016f90:	b2db      	uxtbne	r3, r3
10016f92:	4602      	movne	r2, r0
10016f94:	f7ff b9f9 	b.w	1001638a <_vfprintf_r+0x6d6>
10016f98:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10016f9a:	2302      	movs	r3, #2
10016f9c:	e9cd 3600 	strd	r3, r6, [sp]
10016fa0:	ab30      	add	r3, sp, #192	@ 0xc0
10016fa2:	9304      	str	r3, [sp, #16]
10016fa4:	ab2b      	add	r3, sp, #172	@ 0xac
10016fa6:	9303      	str	r3, [sp, #12]
10016fa8:	ab29      	add	r3, sp, #164	@ 0xa4
10016faa:	9302      	str	r3, [sp, #8]
10016fac:	9808      	ldr	r0, [sp, #32]
10016fae:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
10016fb2:	f003 faa5 	bl	1001a500 <_dtoa_r>
10016fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016fb8:	2b67      	cmp	r3, #103	@ 0x67
10016fba:	4605      	mov	r5, r0
10016fbc:	f000 8177 	beq.w	100172ae <_vfprintf_r+0x15fa>
10016fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016fc2:	2b47      	cmp	r3, #71	@ 0x47
10016fc4:	f000 8173 	beq.w	100172ae <_vfprintf_r+0x15fa>
10016fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016fca:	f023 0720 	bic.w	r7, r3, #32
10016fce:	2f46      	cmp	r7, #70	@ 0x46
10016fd0:	eb00 0406 	add.w	r4, r0, r6
10016fd4:	d105      	bne.n	10016fe2 <_vfprintf_r+0x132e>
10016fd6:	7803      	ldrb	r3, [r0, #0]
10016fd8:	2b30      	cmp	r3, #48	@ 0x30
10016fda:	f000 83db 	beq.w	10017794 <_vfprintf_r+0x1ae0>
10016fde:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
10016fe0:	4434      	add	r4, r6
10016fe2:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10016fe6:	2200      	movs	r2, #0
10016fe8:	2300      	movs	r3, #0
10016fea:	f00b fc31 	bl	10022850 <__aeabi_dcmpeq>
10016fee:	2800      	cmp	r0, #0
10016ff0:	f000 81cc 	beq.w	1001738c <_vfprintf_r+0x16d8>
10016ff4:	4623      	mov	r3, r4
10016ff6:	1b5b      	subs	r3, r3, r5
10016ff8:	9313      	str	r3, [sp, #76]	@ 0x4c
10016ffa:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10016ffc:	9212      	str	r2, [sp, #72]	@ 0x48
10016ffe:	2f47      	cmp	r7, #71	@ 0x47
10017000:	f000 815d 	beq.w	100172be <_vfprintf_r+0x160a>
10017004:	2f46      	cmp	r7, #70	@ 0x46
10017006:	f000 82e3 	beq.w	100175d0 <_vfprintf_r+0x191c>
1001700a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001700c:	1e53      	subs	r3, r2, #1
1001700e:	2961      	cmp	r1, #97	@ 0x61
10017010:	9329      	str	r3, [sp, #164]	@ 0xa4
10017012:	f000 8441 	beq.w	10017898 <_vfprintf_r+0x1be4>
10017016:	2941      	cmp	r1, #65	@ 0x41
10017018:	f040 815c 	bne.w	100172d4 <_vfprintf_r+0x1620>
1001701c:	2150      	movs	r1, #80	@ 0x50
1001701e:	2001      	movs	r0, #1
10017020:	2b00      	cmp	r3, #0
10017022:	bfb6      	itet	lt
10017024:	f1c2 0301 	rsblt	r3, r2, #1
10017028:	222b      	movge	r2, #43	@ 0x2b
1001702a:	222d      	movlt	r2, #45	@ 0x2d
1001702c:	2b09      	cmp	r3, #9
1001702e:	f88d 10b0 	strb.w	r1, [sp, #176]	@ 0xb0
10017032:	f88d 20b1 	strb.w	r2, [sp, #177]	@ 0xb1
10017036:	f340 8377 	ble.w	10017728 <_vfprintf_r+0x1a74>
1001703a:	f10d 04c7 	add.w	r4, sp, #199	@ 0xc7
1001703e:	4e58      	ldr	r6, [pc, #352]	@ (100171a0 <_vfprintf_r+0x14ec>)
10017040:	4622      	mov	r2, r4
10017042:	4610      	mov	r0, r2
10017044:	fba6 1203 	umull	r1, r2, r6, r3
10017048:	08d2      	lsrs	r2, r2, #3
1001704a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1001704e:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
10017052:	3130      	adds	r1, #48	@ 0x30
10017054:	f800 1c01 	strb.w	r1, [r0, #-1]
10017058:	4619      	mov	r1, r3
1001705a:	2963      	cmp	r1, #99	@ 0x63
1001705c:	4613      	mov	r3, r2
1001705e:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
10017062:	dcee      	bgt.n	10017042 <_vfprintf_r+0x138e>
10017064:	3330      	adds	r3, #48	@ 0x30
10017066:	f802 3c01 	strb.w	r3, [r2, #-1]
1001706a:	1e83      	subs	r3, r0, #2
1001706c:	42a3      	cmp	r3, r4
1001706e:	f080 840c 	bcs.w	1001788a <_vfprintf_r+0x1bd6>
10017072:	f10d 02b1 	add.w	r2, sp, #177	@ 0xb1
10017076:	f813 1b01 	ldrb.w	r1, [r3], #1
1001707a:	f802 1f01 	strb.w	r1, [r2, #1]!
1001707e:	42a3      	cmp	r3, r4
10017080:	d1f9      	bne.n	10017076 <_vfprintf_r+0x13c2>
10017082:	ab5e      	add	r3, sp, #376	@ 0x178
10017084:	1a18      	subs	r0, r3, r0
10017086:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
1001708a:	931c      	str	r3, [sp, #112]	@ 0x70
1001708c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001708e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
10017090:	2b01      	cmp	r3, #1
10017092:	eb03 0b02 	add.w	fp, r3, r2
10017096:	f340 8378 	ble.w	1001778a <_vfprintf_r+0x1ad6>
1001709a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001709c:	449b      	add	fp, r3
1001709e:	9b06      	ldr	r3, [sp, #24]
100170a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
100170a4:	f443 7980 	orr.w	r9, r3, #256	@ 0x100
100170a8:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
100170ac:	2300      	movs	r3, #0
100170ae:	9314      	str	r3, [sp, #80]	@ 0x50
100170b0:	9206      	str	r2, [sp, #24]
100170b2:	9310      	str	r3, [sp, #64]	@ 0x40
100170b4:	9312      	str	r3, [sp, #72]	@ 0x48
100170b6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
100170b8:	2b00      	cmp	r3, #0
100170ba:	f040 810f 	bne.w	100172dc <_vfprintf_r+0x1628>
100170be:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100170c2:	9309      	str	r3, [sp, #36]	@ 0x24
100170c4:	f7ff b828 	b.w	10016118 <_vfprintf_r+0x464>
100170c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100170ca:	ebab 060a 	sub.w	r6, fp, sl
100170ce:	1b5d      	subs	r5, r3, r5
100170d0:	42ae      	cmp	r6, r5
100170d2:	bfa8      	it	ge
100170d4:	462e      	movge	r6, r5
100170d6:	e418      	b.n	1001690a <_vfprintf_r+0xc56>
100170d8:	f343 12c0 	sbfx	r2, r3, #7, #1
100170dc:	4611      	mov	r1, r2
100170de:	b25b      	sxtb	r3, r3
100170e0:	f7ff b8d0 	b.w	10016284 <_vfprintf_r+0x5d0>
100170e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100170e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100170e8:	681b      	ldr	r3, [r3, #0]
100170ea:	801a      	strh	r2, [r3, #0]
100170ec:	f7ff b9ba 	b.w	10016464 <_vfprintf_r+0x7b0>
100170f0:	9907      	ldr	r1, [sp, #28]
100170f2:	aa32      	add	r2, sp, #200	@ 0xc8
100170f4:	4658      	mov	r0, fp
100170f6:	f000 fc7d 	bl	100179f4 <__sprint_r>
100170fa:	2800      	cmp	r0, #0
100170fc:	f43e af22 	beq.w	10015f44 <_vfprintf_r+0x290>
10017100:	f7fe bf36 	b.w	10015f70 <_vfprintf_r+0x2bc>
10017104:	4628      	mov	r0, r5
10017106:	960d      	str	r6, [sp, #52]	@ 0x34
10017108:	f003 f87a 	bl	1001a200 <strlen>
1001710c:	4683      	mov	fp, r0
1001710e:	f7ff b89c 	b.w	1001624a <_vfprintf_r+0x596>
10017112:	2358      	movs	r3, #88	@ 0x58
10017114:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
10017118:	2330      	movs	r3, #48	@ 0x30
1001711a:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
1001711e:	f049 0302 	orr.w	r3, r9, #2
10017122:	9306      	str	r3, [sp, #24]
10017124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017126:	2b63      	cmp	r3, #99	@ 0x63
10017128:	f300 82f6 	bgt.w	10017718 <_vfprintf_r+0x1a64>
1001712c:	2300      	movs	r3, #0
1001712e:	930c      	str	r3, [sp, #48]	@ 0x30
10017130:	ad45      	add	r5, sp, #276	@ 0x114
10017132:	f449 7381 	orr.w	r3, r9, #258	@ 0x102
10017136:	9315      	str	r3, [sp, #84]	@ 0x54
10017138:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1001713a:	2b00      	cmp	r3, #0
1001713c:	f2c0 8200 	blt.w	10017540 <_vfprintf_r+0x188c>
10017140:	2300      	movs	r3, #0
10017142:	931f      	str	r3, [sp, #124]	@ 0x7c
10017144:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
10017148:	e9cd 3424 	strd	r3, r4, [sp, #144]	@ 0x90
1001714c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001714e:	2b61      	cmp	r3, #97	@ 0x61
10017150:	f47f ad1a 	bne.w	10016b88 <_vfprintf_r+0xed4>
10017154:	aa29      	add	r2, sp, #164	@ 0xa4
10017156:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001715a:	f003 f8f1 	bl	1001a340 <frexp>
1001715e:	2200      	movs	r2, #0
10017160:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
10017164:	f00b f90c 	bl	10022380 <__aeabi_dmul>
10017168:	4602      	mov	r2, r0
1001716a:	460b      	mov	r3, r1
1001716c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
10017170:	2200      	movs	r2, #0
10017172:	2300      	movs	r3, #0
10017174:	f00b fb6c 	bl	10022850 <__aeabi_dcmpeq>
10017178:	2800      	cmp	r0, #0
1001717a:	f040 82f8 	bne.w	1001776e <_vfprintf_r+0x1aba>
1001717e:	4b09      	ldr	r3, [pc, #36]	@ (100171a4 <_vfprintf_r+0x14f0>)
10017180:	9312      	str	r3, [sp, #72]	@ 0x48
10017182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017184:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
10017188:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
1001718c:	462e      	mov	r6, r5
1001718e:	9514      	str	r5, [sp, #80]	@ 0x50
10017190:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10017194:	464d      	mov	r5, r9
10017196:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
1001719a:	e00b      	b.n	100171b4 <_vfprintf_r+0x1500>
1001719c:	1002c184 	.word	0x1002c184
100171a0:	cccccccd 	.word	0xcccccccd
100171a4:	1002c150 	.word	0x1002c150
100171a8:	2200      	movs	r2, #0
100171aa:	2300      	movs	r3, #0
100171ac:	f00b fb50 	bl	10022850 <__aeabi_dcmpeq>
100171b0:	b9f0      	cbnz	r0, 100171f0 <_vfprintf_r+0x153c>
100171b2:	463d      	mov	r5, r7
100171b4:	4ba9      	ldr	r3, [pc, #676]	@ (1001745c <_vfprintf_r+0x17a8>)
100171b6:	2200      	movs	r2, #0
100171b8:	4640      	mov	r0, r8
100171ba:	4649      	mov	r1, r9
100171bc:	f00b f8e0 	bl	10022380 <__aeabi_dmul>
100171c0:	4689      	mov	r9, r1
100171c2:	4680      	mov	r8, r0
100171c4:	f00b fb8c 	bl	100228e0 <__aeabi_d2iz>
100171c8:	4604      	mov	r4, r0
100171ca:	f00b f86f 	bl	100222ac <__aeabi_i2d>
100171ce:	4602      	mov	r2, r0
100171d0:	460b      	mov	r3, r1
100171d2:	4640      	mov	r0, r8
100171d4:	4649      	mov	r1, r9
100171d6:	f00a ff1b 	bl	10022010 <__aeabi_dsub>
100171da:	f81b 3004 	ldrb.w	r3, [fp, r4]
100171de:	1c6a      	adds	r2, r5, #1
100171e0:	46b2      	mov	sl, r6
100171e2:	f105 37ff 	add.w	r7, r5, #4294967295	@ 0xffffffff
100171e6:	f806 3b01 	strb.w	r3, [r6], #1
100171ea:	4680      	mov	r8, r0
100171ec:	4689      	mov	r9, r1
100171ee:	d1db      	bne.n	100171a8 <_vfprintf_r+0x14f4>
100171f0:	46cb      	mov	fp, r9
100171f2:	4657      	mov	r7, sl
100171f4:	46c2      	mov	sl, r8
100171f6:	4b9a      	ldr	r3, [pc, #616]	@ (10017460 <_vfprintf_r+0x17ac>)
100171f8:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
100171fc:	2200      	movs	r2, #0
100171fe:	4650      	mov	r0, sl
10017200:	4659      	mov	r1, fp
10017202:	46a9      	mov	r9, r5
10017204:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10017206:	f00b fb4b 	bl	100228a0 <__aeabi_dcmpgt>
1001720a:	2800      	cmp	r0, #0
1001720c:	f040 8264 	bne.w	100176d8 <_vfprintf_r+0x1a24>
10017210:	4b93      	ldr	r3, [pc, #588]	@ (10017460 <_vfprintf_r+0x17ac>)
10017212:	4650      	mov	r0, sl
10017214:	4659      	mov	r1, fp
10017216:	2200      	movs	r2, #0
10017218:	f00b fb1a 	bl	10022850 <__aeabi_dcmpeq>
1001721c:	b110      	cbz	r0, 10017224 <_vfprintf_r+0x1570>
1001721e:	07e3      	lsls	r3, r4, #31
10017220:	f100 825a 	bmi.w	100176d8 <_vfprintf_r+0x1a24>
10017224:	f1b9 0f00 	cmp.w	r9, #0
10017228:	f2c0 8270 	blt.w	1001770c <_vfprintf_r+0x1a58>
1001722c:	f109 0301 	add.w	r3, r9, #1
10017230:	4433      	add	r3, r6
10017232:	2230      	movs	r2, #48	@ 0x30
10017234:	f806 2b01 	strb.w	r2, [r6], #1
10017238:	42b3      	cmp	r3, r6
1001723a:	d1fb      	bne.n	10017234 <_vfprintf_r+0x1580>
1001723c:	1b5b      	subs	r3, r3, r5
1001723e:	9313      	str	r3, [sp, #76]	@ 0x4c
10017240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10017242:	f023 0720 	bic.w	r7, r3, #32
10017246:	e6d8      	b.n	10016ffa <_vfprintf_r+0x1346>
10017248:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
1001724c:	aa32      	add	r2, sp, #200	@ 0xc8
1001724e:	f000 fbd1 	bl	100179f4 <__sprint_r>
10017252:	2800      	cmp	r0, #0
10017254:	f47f aa2a 	bne.w	100166ac <_vfprintf_r+0x9f8>
10017258:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001725c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001725e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10017262:	f7ff ba34 	b.w	100166ce <_vfprintf_r+0xa1a>
10017266:	6d88      	ldr	r0, [r1, #88]	@ 0x58
10017268:	f002 fed8 	bl	1001a01c <__retarget_lock_release_recursive>
1001726c:	f7fe be3c 	b.w	10015ee8 <_vfprintf_r+0x234>
10017270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017272:	1c5e      	adds	r6, r3, #1
10017274:	2302      	movs	r3, #2
10017276:	e691      	b.n	10016f9c <_vfprintf_r+0x12e8>
10017278:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1001727a:	2303      	movs	r3, #3
1001727c:	e68e      	b.n	10016f9c <_vfprintf_r+0x12e8>
1001727e:	aa29      	add	r2, sp, #164	@ 0xa4
10017280:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10017284:	f003 f85c 	bl	1001a340 <frexp>
10017288:	2200      	movs	r2, #0
1001728a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
1001728e:	f00b f877 	bl	10022380 <__aeabi_dmul>
10017292:	4602      	mov	r2, r0
10017294:	460b      	mov	r3, r1
10017296:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1001729a:	2200      	movs	r2, #0
1001729c:	2300      	movs	r3, #0
1001729e:	f00b fad7 	bl	10022850 <__aeabi_dcmpeq>
100172a2:	2800      	cmp	r0, #0
100172a4:	f040 8263 	bne.w	1001776e <_vfprintf_r+0x1aba>
100172a8:	4b6e      	ldr	r3, [pc, #440]	@ (10017464 <_vfprintf_r+0x17b0>)
100172aa:	9312      	str	r3, [sp, #72]	@ 0x48
100172ac:	e769      	b.n	10017182 <_vfprintf_r+0x14ce>
100172ae:	9b06      	ldr	r3, [sp, #24]
100172b0:	07df      	lsls	r7, r3, #31
100172b2:	f100 81e4 	bmi.w	1001767e <_vfprintf_r+0x19ca>
100172b6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
100172b8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
100172ba:	1b5b      	subs	r3, r3, r5
100172bc:	9313      	str	r3, [sp, #76]	@ 0x4c
100172be:	1cd3      	adds	r3, r2, #3
100172c0:	9212      	str	r2, [sp, #72]	@ 0x48
100172c2:	db02      	blt.n	100172ca <_vfprintf_r+0x1616>
100172c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100172c6:	4293      	cmp	r3, r2
100172c8:	da44      	bge.n	10017354 <_vfprintf_r+0x16a0>
100172ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100172cc:	3b02      	subs	r3, #2
100172ce:	930e      	str	r3, [sp, #56]	@ 0x38
100172d0:	1e53      	subs	r3, r2, #1
100172d2:	9329      	str	r3, [sp, #164]	@ 0xa4
100172d4:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
100172d8:	2000      	movs	r0, #0
100172da:	e6a1      	b.n	10017020 <_vfprintf_r+0x136c>
100172dc:	222d      	movs	r2, #45	@ 0x2d
100172de:	2300      	movs	r3, #0
100172e0:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
100172e4:	9309      	str	r3, [sp, #36]	@ 0x24
100172e6:	f7fe bf1a 	b.w	1001611e <_vfprintf_r+0x46a>
100172ea:	4645      	mov	r5, r8
100172ec:	460c      	mov	r4, r1
100172ee:	4690      	mov	r8, r2
100172f0:	3301      	adds	r3, #1
100172f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100172f4:	f8c8 2000 	str.w	r2, [r8]
100172f8:	4434      	add	r4, r6
100172fa:	2b07      	cmp	r3, #7
100172fc:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10017300:	f8c8 6004 	str.w	r6, [r8, #4]
10017304:	f300 8226 	bgt.w	10017754 <_vfprintf_r+0x1aa0>
10017308:	f108 0808 	add.w	r8, r8, #8
1001730c:	f7ff bac9 	b.w	100168a2 <_vfprintf_r+0xbee>
10017310:	222d      	movs	r2, #45	@ 0x2d
10017312:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10017316:	f7fe beee 	b.w	100160f6 <_vfprintf_r+0x442>
1001731a:	2300      	movs	r3, #0
1001731c:	9808      	ldr	r0, [sp, #32]
1001731e:	9700      	str	r7, [sp, #0]
10017320:	aa2b      	add	r2, sp, #172	@ 0xac
10017322:	4619      	mov	r1, r3
10017324:	f002 fffe 	bl	1001a324 <_wcsrtombs_r>
10017328:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
1001732c:	4683      	mov	fp, r0
1001732e:	f000 8209 	beq.w	10017744 <_vfprintf_r+0x1a90>
10017332:	952b      	str	r5, [sp, #172]	@ 0xac
10017334:	e59d      	b.n	10016e72 <_vfprintf_r+0x11be>
10017336:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
10017338:	991d      	ldr	r1, [sp, #116]	@ 0x74
1001733a:	1aed      	subs	r5, r5, r3
1001733c:	461a      	mov	r2, r3
1001733e:	4628      	mov	r0, r5
10017340:	f002 fc10 	bl	10019b64 <strncpy>
10017344:	f898 3001 	ldrb.w	r3, [r8, #1]
10017348:	b10b      	cbz	r3, 1001734e <_vfprintf_r+0x169a>
1001734a:	f108 0801 	add.w	r8, r8, #1
1001734e:	f04f 0c00 	mov.w	ip, #0
10017352:	e4f7      	b.n	10016d44 <_vfprintf_r+0x1090>
10017354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10017356:	4293      	cmp	r3, r2
10017358:	f300 8194 	bgt.w	10017684 <_vfprintf_r+0x19d0>
1001735c:	9b06      	ldr	r3, [sp, #24]
1001735e:	07dc      	lsls	r4, r3, #31
10017360:	f140 824a 	bpl.w	100177f8 <_vfprintf_r+0x1b44>
10017364:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10017366:	eb02 0b03 	add.w	fp, r2, r3
1001736a:	9b06      	ldr	r3, [sp, #24]
1001736c:	0558      	lsls	r0, r3, #21
1001736e:	d502      	bpl.n	10017376 <_vfprintf_r+0x16c2>
10017370:	2a00      	cmp	r2, #0
10017372:	f300 824a 	bgt.w	1001780a <_vfprintf_r+0x1b56>
10017376:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001737a:	9306      	str	r3, [sp, #24]
1001737c:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10017380:	2367      	movs	r3, #103	@ 0x67
10017382:	930e      	str	r3, [sp, #56]	@ 0x38
10017384:	2300      	movs	r3, #0
10017386:	9314      	str	r3, [sp, #80]	@ 0x50
10017388:	9310      	str	r3, [sp, #64]	@ 0x40
1001738a:	e694      	b.n	100170b6 <_vfprintf_r+0x1402>
1001738c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001738e:	42a3      	cmp	r3, r4
10017390:	f4bf ae31 	bcs.w	10016ff6 <_vfprintf_r+0x1342>
10017394:	2130      	movs	r1, #48	@ 0x30
10017396:	1c5a      	adds	r2, r3, #1
10017398:	9230      	str	r2, [sp, #192]	@ 0xc0
1001739a:	7019      	strb	r1, [r3, #0]
1001739c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001739e:	429c      	cmp	r4, r3
100173a0:	d8f9      	bhi.n	10017396 <_vfprintf_r+0x16e2>
100173a2:	e628      	b.n	10016ff6 <_vfprintf_r+0x1342>
100173a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100173a6:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
100173aa:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
100173ae:	4642      	mov	r2, r8
100173b0:	4621      	mov	r1, r4
100173b2:	4f2d      	ldr	r7, [pc, #180]	@ (10017468 <_vfprintf_r+0x17b4>)
100173b4:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
100173b8:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
100173bc:	f8dd b020 	ldr.w	fp, [sp, #32]
100173c0:	4654      	mov	r4, sl
100173c2:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
100173c6:	b37b      	cbz	r3, 10017428 <_vfprintf_r+0x1774>
100173c8:	f1b9 0f00 	cmp.w	r9, #0
100173cc:	f000 8085 	beq.w	100174da <_vfprintf_r+0x1826>
100173d0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
100173d4:	9833      	ldr	r0, [sp, #204]	@ 0xcc
100173d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100173d8:	3001      	adds	r0, #1
100173da:	4441      	add	r1, r8
100173dc:	2807      	cmp	r0, #7
100173de:	e9c2 3800 	strd	r3, r8, [r2]
100173e2:	9134      	str	r1, [sp, #208]	@ 0xd0
100173e4:	9033      	str	r0, [sp, #204]	@ 0xcc
100173e6:	dc6d      	bgt.n	100174c4 <_vfprintf_r+0x1810>
100173e8:	3208      	adds	r2, #8
100173ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100173ec:	f89a 0000 	ldrb.w	r0, [sl]
100173f0:	1b1e      	subs	r6, r3, r4
100173f2:	4286      	cmp	r6, r0
100173f4:	bfa8      	it	ge
100173f6:	4606      	movge	r6, r0
100173f8:	2e00      	cmp	r6, #0
100173fa:	dd0b      	ble.n	10017414 <_vfprintf_r+0x1760>
100173fc:	9833      	ldr	r0, [sp, #204]	@ 0xcc
100173fe:	3001      	adds	r0, #1
10017400:	4431      	add	r1, r6
10017402:	2807      	cmp	r0, #7
10017404:	e9c2 4600 	strd	r4, r6, [r2]
10017408:	9134      	str	r1, [sp, #208]	@ 0xd0
1001740a:	9033      	str	r0, [sp, #204]	@ 0xcc
1001740c:	dc6b      	bgt.n	100174e6 <_vfprintf_r+0x1832>
1001740e:	f89a 0000 	ldrb.w	r0, [sl]
10017412:	3208      	adds	r2, #8
10017414:	2e00      	cmp	r6, #0
10017416:	bfac      	ite	ge
10017418:	1b85      	subge	r5, r0, r6
1001741a:	4605      	movlt	r5, r0
1001741c:	2d00      	cmp	r5, #0
1001741e:	dc14      	bgt.n	1001744a <_vfprintf_r+0x1796>
10017420:	4404      	add	r4, r0
10017422:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10017424:	2b00      	cmp	r3, #0
10017426:	d1cf      	bne.n	100173c8 <_vfprintf_r+0x1714>
10017428:	f1b9 0f00 	cmp.w	r9, #0
1001742c:	d1d0      	bne.n	100173d0 <_vfprintf_r+0x171c>
1001742e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10017432:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
10017436:	46a2      	mov	sl, r4
10017438:	45da      	cmp	sl, fp
1001743a:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
1001743e:	4690      	mov	r8, r2
10017440:	460c      	mov	r4, r1
10017442:	bf28      	it	cs
10017444:	46da      	movcs	sl, fp
10017446:	f7ff ba33 	b.w	100168b0 <_vfprintf_r+0xbfc>
1001744a:	2d10      	cmp	r5, #16
1001744c:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001744e:	f340 821a 	ble.w	10017886 <_vfprintf_r+0x1bd2>
10017452:	4623      	mov	r3, r4
10017454:	463e      	mov	r6, r7
10017456:	462c      	mov	r4, r5
10017458:	461d      	mov	r5, r3
1001745a:	e00c      	b.n	10017476 <_vfprintf_r+0x17c2>
1001745c:	40300000 	.word	0x40300000
10017460:	3fe00000 	.word	0x3fe00000
10017464:	1002c164 	.word	0x1002c164
10017468:	1002c184 	.word	0x1002c184
1001746c:	3c10      	subs	r4, #16
1001746e:	2c10      	cmp	r4, #16
10017470:	f102 0208 	add.w	r2, r2, #8
10017474:	dd16      	ble.n	100174a4 <_vfprintf_r+0x17f0>
10017476:	3001      	adds	r0, #1
10017478:	3110      	adds	r1, #16
1001747a:	2310      	movs	r3, #16
1001747c:	2807      	cmp	r0, #7
1001747e:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
10017482:	6017      	str	r7, [r2, #0]
10017484:	6053      	str	r3, [r2, #4]
10017486:	ddf1      	ble.n	1001746c <_vfprintf_r+0x17b8>
10017488:	9907      	ldr	r1, [sp, #28]
1001748a:	aa32      	add	r2, sp, #200	@ 0xc8
1001748c:	4658      	mov	r0, fp
1001748e:	f000 fab1 	bl	100179f4 <__sprint_r>
10017492:	2800      	cmp	r0, #0
10017494:	f47e ad66 	bne.w	10015f64 <_vfprintf_r+0x2b0>
10017498:	3c10      	subs	r4, #16
1001749a:	2c10      	cmp	r4, #16
1001749c:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
100174a0:	aa35      	add	r2, sp, #212	@ 0xd4
100174a2:	dce8      	bgt.n	10017476 <_vfprintf_r+0x17c2>
100174a4:	462b      	mov	r3, r5
100174a6:	4625      	mov	r5, r4
100174a8:	461c      	mov	r4, r3
100174aa:	3001      	adds	r0, #1
100174ac:	4429      	add	r1, r5
100174ae:	2807      	cmp	r0, #7
100174b0:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
100174b4:	6016      	str	r6, [r2, #0]
100174b6:	6055      	str	r5, [r2, #4]
100174b8:	dc4b      	bgt.n	10017552 <_vfprintf_r+0x189e>
100174ba:	f89a 0000 	ldrb.w	r0, [sl]
100174be:	3208      	adds	r2, #8
100174c0:	4404      	add	r4, r0
100174c2:	e7ae      	b.n	10017422 <_vfprintf_r+0x176e>
100174c4:	9907      	ldr	r1, [sp, #28]
100174c6:	aa32      	add	r2, sp, #200	@ 0xc8
100174c8:	4658      	mov	r0, fp
100174ca:	f000 fa93 	bl	100179f4 <__sprint_r>
100174ce:	2800      	cmp	r0, #0
100174d0:	f47e ad48 	bne.w	10015f64 <_vfprintf_r+0x2b0>
100174d4:	9934      	ldr	r1, [sp, #208]	@ 0xd0
100174d6:	aa35      	add	r2, sp, #212	@ 0xd4
100174d8:	e787      	b.n	100173ea <_vfprintf_r+0x1736>
100174da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100174dc:	3b01      	subs	r3, #1
100174de:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
100174e2:	9310      	str	r3, [sp, #64]	@ 0x40
100174e4:	e776      	b.n	100173d4 <_vfprintf_r+0x1720>
100174e6:	9907      	ldr	r1, [sp, #28]
100174e8:	aa32      	add	r2, sp, #200	@ 0xc8
100174ea:	4658      	mov	r0, fp
100174ec:	f000 fa82 	bl	100179f4 <__sprint_r>
100174f0:	2800      	cmp	r0, #0
100174f2:	f47e ad37 	bne.w	10015f64 <_vfprintf_r+0x2b0>
100174f6:	f89a 0000 	ldrb.w	r0, [sl]
100174fa:	9934      	ldr	r1, [sp, #208]	@ 0xd0
100174fc:	aa35      	add	r2, sp, #212	@ 0xd4
100174fe:	e789      	b.n	10017414 <_vfprintf_r+0x1760>
10017500:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10017504:	960d      	str	r6, [sp, #52]	@ 0x34
10017506:	f8cd b018 	str.w	fp, [sp, #24]
1001750a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
1001750e:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
10017512:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
10017516:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
1001751a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
1001751e:	f7fe bdfb 	b.w	10016118 <_vfprintf_r+0x464>
10017522:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10017526:	aa32      	add	r2, sp, #200	@ 0xc8
10017528:	f000 fa64 	bl	100179f4 <__sprint_r>
1001752c:	2800      	cmp	r0, #0
1001752e:	f47f a8bd 	bne.w	100166ac <_vfprintf_r+0x9f8>
10017532:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10017534:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10017536:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001753a:	f7ff baa3 	b.w	10016a84 <_vfprintf_r+0xdd0>
1001753e:	930c      	str	r3, [sp, #48]	@ 0x30
10017540:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
10017544:	9324      	str	r3, [sp, #144]	@ 0x90
10017546:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
1001754a:	9325      	str	r3, [sp, #148]	@ 0x94
1001754c:	232d      	movs	r3, #45	@ 0x2d
1001754e:	931f      	str	r3, [sp, #124]	@ 0x7c
10017550:	e5fc      	b.n	1001714c <_vfprintf_r+0x1498>
10017552:	9907      	ldr	r1, [sp, #28]
10017554:	aa32      	add	r2, sp, #200	@ 0xc8
10017556:	4658      	mov	r0, fp
10017558:	f000 fa4c 	bl	100179f4 <__sprint_r>
1001755c:	2800      	cmp	r0, #0
1001755e:	f47e ad01 	bne.w	10015f64 <_vfprintf_r+0x2b0>
10017562:	f89a 0000 	ldrb.w	r0, [sl]
10017566:	9934      	ldr	r1, [sp, #208]	@ 0xd0
10017568:	aa35      	add	r2, sp, #212	@ 0xd4
1001756a:	4404      	add	r4, r0
1001756c:	e759      	b.n	10017422 <_vfprintf_r+0x176e>
1001756e:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10017572:	aa32      	add	r2, sp, #200	@ 0xc8
10017574:	f000 fa3e 	bl	100179f4 <__sprint_r>
10017578:	2800      	cmp	r0, #0
1001757a:	f47f a897 	bne.w	100166ac <_vfprintf_r+0x9f8>
1001757e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10017580:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10017584:	f7ff b986 	b.w	10016894 <_vfprintf_r+0xbe0>
10017588:	2378      	movs	r3, #120	@ 0x78
1001758a:	e5c3      	b.n	10017114 <_vfprintf_r+0x1460>
1001758c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10017590:	aa32      	add	r2, sp, #200	@ 0xc8
10017592:	f000 fa2f 	bl	100179f4 <__sprint_r>
10017596:	2800      	cmp	r0, #0
10017598:	f47f a888 	bne.w	100166ac <_vfprintf_r+0x9f8>
1001759c:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001759e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100175a0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100175a4:	f7ff b99a 	b.w	100168dc <_vfprintf_r+0xc28>
100175a8:	49ab      	ldr	r1, [pc, #684]	@ (10017858 <_vfprintf_r+0x1ba4>)
100175aa:	9115      	str	r1, [sp, #84]	@ 0x54
100175ac:	f7fe bdeb 	b.w	10016186 <_vfprintf_r+0x4d2>
100175b0:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100175b4:	aa32      	add	r2, sp, #200	@ 0xc8
100175b6:	f000 fa1d 	bl	100179f4 <__sprint_r>
100175ba:	2800      	cmp	r0, #0
100175bc:	f47f a876 	bne.w	100166ac <_vfprintf_r+0x9f8>
100175c0:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
100175c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100175c4:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100175c6:	1b5d      	subs	r5, r3, r5
100175c8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100175cc:	f7ff b99d 	b.w	1001690a <_vfprintf_r+0xc56>
100175d0:	9b06      	ldr	r3, [sp, #24]
100175d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
100175d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100175d6:	f003 0301 	and.w	r3, r3, #1
100175da:	2900      	cmp	r1, #0
100175dc:	ea43 0302 	orr.w	r3, r3, r2
100175e0:	f340 815d 	ble.w	1001789e <_vfprintf_r+0x1bea>
100175e4:	2b00      	cmp	r3, #0
100175e6:	f040 8109 	bne.w	100177fc <_vfprintf_r+0x1b48>
100175ea:	2366      	movs	r3, #102	@ 0x66
100175ec:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
100175f0:	930e      	str	r3, [sp, #56]	@ 0x38
100175f2:	9b06      	ldr	r3, [sp, #24]
100175f4:	055a      	lsls	r2, r3, #21
100175f6:	f100 810a 	bmi.w	1001780e <_vfprintf_r+0x1b5a>
100175fa:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
100175fe:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10017602:	9306      	str	r3, [sp, #24]
10017604:	e6be      	b.n	10017384 <_vfprintf_r+0x16d0>
10017606:	2200      	movs	r2, #0
10017608:	9209      	str	r2, [sp, #36]	@ 0x24
1001760a:	f7fe bbcc 	b.w	10015da6 <_vfprintf_r+0xf2>
1001760e:	9b07      	ldr	r3, [sp, #28]
10017610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10017612:	07df      	lsls	r7, r3, #31
10017614:	d407      	bmi.n	10017626 <_vfprintf_r+0x1972>
10017616:	9b07      	ldr	r3, [sp, #28]
10017618:	899b      	ldrh	r3, [r3, #12]
1001761a:	059e      	lsls	r6, r3, #22
1001761c:	d403      	bmi.n	10017626 <_vfprintf_r+0x1972>
1001761e:	9b07      	ldr	r3, [sp, #28]
10017620:	6d98      	ldr	r0, [r3, #88]	@ 0x58
10017622:	f002 fcfb 	bl	1001a01c <__retarget_lock_release_recursive>
10017626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001762a:	930a      	str	r3, [sp, #40]	@ 0x28
1001762c:	f7fe bcab 	b.w	10015f86 <_vfprintf_r+0x2d2>
10017630:	4256      	negs	r6, r2
10017632:	3210      	adds	r2, #16
10017634:	4a89      	ldr	r2, [pc, #548]	@ (1001785c <_vfprintf_r+0x1ba8>)
10017636:	9215      	str	r2, [sp, #84]	@ 0x54
10017638:	da34      	bge.n	100176a4 <_vfprintf_r+0x19f0>
1001763a:	46aa      	mov	sl, r5
1001763c:	2710      	movs	r7, #16
1001763e:	4615      	mov	r5, r2
10017640:	e004      	b.n	1001764c <_vfprintf_r+0x1998>
10017642:	f108 0808 	add.w	r8, r8, #8
10017646:	3e10      	subs	r6, #16
10017648:	2e10      	cmp	r6, #16
1001764a:	dd2a      	ble.n	100176a2 <_vfprintf_r+0x19ee>
1001764c:	3301      	adds	r3, #1
1001764e:	3410      	adds	r4, #16
10017650:	2b07      	cmp	r3, #7
10017652:	e9c8 5700 	strd	r5, r7, [r8]
10017656:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001765a:	ddf2      	ble.n	10017642 <_vfprintf_r+0x198e>
1001765c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10017660:	aa32      	add	r2, sp, #200	@ 0xc8
10017662:	f000 f9c7 	bl	100179f4 <__sprint_r>
10017666:	2800      	cmp	r0, #0
10017668:	f47f a820 	bne.w	100166ac <_vfprintf_r+0x9f8>
1001766c:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10017670:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10017674:	e7e7      	b.n	10017646 <_vfprintf_r+0x1992>
10017676:	2300      	movs	r3, #0
10017678:	930c      	str	r3, [sp, #48]	@ 0x30
1001767a:	ad45      	add	r5, sp, #276	@ 0x114
1001767c:	e40b      	b.n	10016e96 <_vfprintf_r+0x11e2>
1001767e:	19ac      	adds	r4, r5, r6
10017680:	2747      	movs	r7, #71	@ 0x47
10017682:	e4ae      	b.n	10016fe2 <_vfprintf_r+0x132e>
10017684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10017686:	9a18      	ldr	r2, [sp, #96]	@ 0x60
10017688:	eb03 0b02 	add.w	fp, r3, r2
1001768c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001768e:	2b00      	cmp	r3, #0
10017690:	f340 80ee 	ble.w	10017870 <_vfprintf_r+0x1bbc>
10017694:	2367      	movs	r3, #103	@ 0x67
10017696:	930e      	str	r3, [sp, #56]	@ 0x38
10017698:	e7ab      	b.n	100175f2 <_vfprintf_r+0x193e>
1001769a:	4a6f      	ldr	r2, [pc, #444]	@ (10017858 <_vfprintf_r+0x1ba4>)
1001769c:	9215      	str	r2, [sp, #84]	@ 0x54
1001769e:	f7ff b8cc 	b.w	1001683a <_vfprintf_r+0xb86>
100176a2:	4655      	mov	r5, sl
100176a4:	3301      	adds	r3, #1
100176a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100176a8:	f8c8 2000 	str.w	r2, [r8]
100176ac:	4434      	add	r4, r6
100176ae:	2b07      	cmp	r3, #7
100176b0:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
100176b4:	f8c8 6004 	str.w	r6, [r8, #4]
100176b8:	f77f a9f9 	ble.w	10016aae <_vfprintf_r+0xdfa>
100176bc:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100176c0:	aa32      	add	r2, sp, #200	@ 0xc8
100176c2:	f000 f997 	bl	100179f4 <__sprint_r>
100176c6:	2800      	cmp	r0, #0
100176c8:	f47e aff0 	bne.w	100166ac <_vfprintf_r+0x9f8>
100176cc:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
100176d0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100176d4:	f7fe bffe 	b.w	100166d4 <_vfprintf_r+0xa20>
100176d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
100176da:	9730      	str	r7, [sp, #192]	@ 0xc0
100176dc:	7bd9      	ldrb	r1, [r3, #15]
100176de:	f816 2c01 	ldrb.w	r2, [r6, #-1]
100176e2:	428a      	cmp	r2, r1
100176e4:	4633      	mov	r3, r6
100176e6:	d109      	bne.n	100176fc <_vfprintf_r+0x1a48>
100176e8:	2030      	movs	r0, #48	@ 0x30
100176ea:	f803 0c01 	strb.w	r0, [r3, #-1]
100176ee:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
100176f0:	1e5a      	subs	r2, r3, #1
100176f2:	9230      	str	r2, [sp, #192]	@ 0xc0
100176f4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
100176f8:	4291      	cmp	r1, r2
100176fa:	d0f6      	beq.n	100176ea <_vfprintf_r+0x1a36>
100176fc:	2a39      	cmp	r2, #57	@ 0x39
100176fe:	bf0b      	itete	eq
10017700:	9a12      	ldreq	r2, [sp, #72]	@ 0x48
10017702:	3201      	addne	r2, #1
10017704:	7a92      	ldrbeq	r2, [r2, #10]
10017706:	b2d2      	uxtbne	r2, r2
10017708:	f803 2c01 	strb.w	r2, [r3, #-1]
1001770c:	4633      	mov	r3, r6
1001770e:	e595      	b.n	1001723c <_vfprintf_r+0x1588>
10017710:	4a52      	ldr	r2, [pc, #328]	@ (1001785c <_vfprintf_r+0x1ba8>)
10017712:	9215      	str	r2, [sp, #84]	@ 0x54
10017714:	f7fe bf76 	b.w	10016604 <_vfprintf_r+0x950>
10017718:	9808      	ldr	r0, [sp, #32]
1001771a:	1c59      	adds	r1, r3, #1
1001771c:	f7fd fffc 	bl	10015718 <_malloc_r>
10017720:	4605      	mov	r5, r0
10017722:	b178      	cbz	r0, 10017744 <_vfprintf_r+0x1a90>
10017724:	900c      	str	r0, [sp, #48]	@ 0x30
10017726:	e504      	b.n	10017132 <_vfprintf_r+0x147e>
10017728:	2800      	cmp	r0, #0
1001772a:	d162      	bne.n	100177f2 <_vfprintf_r+0x1b3e>
1001772c:	2230      	movs	r2, #48	@ 0x30
1001772e:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
10017732:	f10d 02b3 	add.w	r2, sp, #179	@ 0xb3
10017736:	3330      	adds	r3, #48	@ 0x30
10017738:	f802 3b01 	strb.w	r3, [r2], #1
1001773c:	ab2c      	add	r3, sp, #176	@ 0xb0
1001773e:	1ad3      	subs	r3, r2, r3
10017740:	931c      	str	r3, [sp, #112]	@ 0x70
10017742:	e4a3      	b.n	1001708c <_vfprintf_r+0x13d8>
10017744:	9a07      	ldr	r2, [sp, #28]
10017746:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1001774a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001774e:	8193      	strh	r3, [r2, #12]
10017750:	f7fe bc11 	b.w	10015f76 <_vfprintf_r+0x2c2>
10017754:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10017758:	aa32      	add	r2, sp, #200	@ 0xc8
1001775a:	f000 f94b 	bl	100179f4 <__sprint_r>
1001775e:	2800      	cmp	r0, #0
10017760:	f47e afa4 	bne.w	100166ac <_vfprintf_r+0x9f8>
10017764:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10017766:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001776a:	f7ff b89a 	b.w	100168a2 <_vfprintf_r+0xbee>
1001776e:	4b3c      	ldr	r3, [pc, #240]	@ (10017860 <_vfprintf_r+0x1bac>)
10017770:	4a3c      	ldr	r2, [pc, #240]	@ (10017864 <_vfprintf_r+0x1bb0>)
10017772:	990e      	ldr	r1, [sp, #56]	@ 0x38
10017774:	2961      	cmp	r1, #97	@ 0x61
10017776:	bf18      	it	ne
10017778:	461a      	movne	r2, r3
1001777a:	2301      	movs	r3, #1
1001777c:	9212      	str	r2, [sp, #72]	@ 0x48
1001777e:	9329      	str	r3, [sp, #164]	@ 0xa4
10017780:	e4ff      	b.n	10017182 <_vfprintf_r+0x14ce>
10017782:	2306      	movs	r3, #6
10017784:	9309      	str	r3, [sp, #36]	@ 0x24
10017786:	f7ff b9ef 	b.w	10016b68 <_vfprintf_r+0xeb4>
1001778a:	9b06      	ldr	r3, [sp, #24]
1001778c:	07de      	lsls	r6, r3, #31
1001778e:	f57f ac86 	bpl.w	1001709e <_vfprintf_r+0x13ea>
10017792:	e482      	b.n	1001709a <_vfprintf_r+0x13e6>
10017794:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10017798:	2200      	movs	r2, #0
1001779a:	2300      	movs	r3, #0
1001779c:	f00b f858 	bl	10022850 <__aeabi_dcmpeq>
100177a0:	2800      	cmp	r0, #0
100177a2:	f47f ac1c 	bne.w	10016fde <_vfprintf_r+0x132a>
100177a6:	f1c6 0601 	rsb	r6, r6, #1
100177aa:	9629      	str	r6, [sp, #164]	@ 0xa4
100177ac:	e418      	b.n	10016fe0 <_vfprintf_r+0x132c>
100177ae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
100177b0:	4d2d      	ldr	r5, [pc, #180]	@ (10017868 <_vfprintf_r+0x1bb4>)
100177b2:	2b00      	cmp	r3, #0
100177b4:	bfb4      	ite	lt
100177b6:	222d      	movlt	r2, #45	@ 0x2d
100177b8:	f89d 209f 	ldrbge.w	r2, [sp, #159]	@ 0x9f
100177bc:	4b2b      	ldr	r3, [pc, #172]	@ (1001786c <_vfprintf_r+0x1bb8>)
100177be:	bfb8      	it	lt
100177c0:	f88d 209f 	strblt.w	r2, [sp, #159]	@ 0x9f
100177c4:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
100177c8:	f7fe bc99 	b.w	100160fe <_vfprintf_r+0x44a>
100177cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100177ce:	9306      	str	r3, [sp, #24]
100177d0:	469b      	mov	fp, r3
100177d2:	2373      	movs	r3, #115	@ 0x73
100177d4:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100177d8:	960d      	str	r6, [sp, #52]	@ 0x34
100177da:	9009      	str	r0, [sp, #36]	@ 0x24
100177dc:	9014      	str	r0, [sp, #80]	@ 0x50
100177de:	9010      	str	r0, [sp, #64]	@ 0x40
100177e0:	930e      	str	r3, [sp, #56]	@ 0x38
100177e2:	f7fe bc99 	b.w	10016118 <_vfprintf_r+0x464>
100177e6:	f8dd 9018 	ldr.w	r9, [sp, #24]
100177ea:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
100177ee:	f7ff bb40 	b.w	10016e72 <_vfprintf_r+0x11be>
100177f2:	f10d 02b2 	add.w	r2, sp, #178	@ 0xb2
100177f6:	e79e      	b.n	10017736 <_vfprintf_r+0x1a82>
100177f8:	4693      	mov	fp, r2
100177fa:	e5b6      	b.n	1001736a <_vfprintf_r+0x16b6>
100177fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
100177fe:	18cf      	adds	r7, r1, r3
10017800:	443a      	add	r2, r7
10017802:	2366      	movs	r3, #102	@ 0x66
10017804:	4693      	mov	fp, r2
10017806:	930e      	str	r3, [sp, #56]	@ 0x38
10017808:	e6f3      	b.n	100175f2 <_vfprintf_r+0x193e>
1001780a:	2367      	movs	r3, #103	@ 0x67
1001780c:	930e      	str	r3, [sp, #56]	@ 0x38
1001780e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10017810:	780b      	ldrb	r3, [r1, #0]
10017812:	2bff      	cmp	r3, #255	@ 0xff
10017814:	d063      	beq.n	100178de <_vfprintf_r+0x1c2a>
10017816:	2400      	movs	r4, #0
10017818:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1001781a:	4620      	mov	r0, r4
1001781c:	e003      	b.n	10017826 <_vfprintf_r+0x1b72>
1001781e:	3001      	adds	r0, #1
10017820:	3101      	adds	r1, #1
10017822:	2bff      	cmp	r3, #255	@ 0xff
10017824:	d008      	beq.n	10017838 <_vfprintf_r+0x1b84>
10017826:	4293      	cmp	r3, r2
10017828:	da06      	bge.n	10017838 <_vfprintf_r+0x1b84>
1001782a:	1ad2      	subs	r2, r2, r3
1001782c:	784b      	ldrb	r3, [r1, #1]
1001782e:	2b00      	cmp	r3, #0
10017830:	d1f5      	bne.n	1001781e <_vfprintf_r+0x1b6a>
10017832:	780b      	ldrb	r3, [r1, #0]
10017834:	3401      	adds	r4, #1
10017836:	e7f4      	b.n	10017822 <_vfprintf_r+0x1b6e>
10017838:	911b      	str	r1, [sp, #108]	@ 0x6c
1001783a:	9212      	str	r2, [sp, #72]	@ 0x48
1001783c:	9010      	str	r0, [sp, #64]	@ 0x40
1001783e:	9414      	str	r4, [sp, #80]	@ 0x50
10017840:	e9dd 3914 	ldrd	r3, r9, [sp, #80]	@ 0x50
10017844:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10017846:	4413      	add	r3, r2
10017848:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
1001784a:	fb02 bb03 	mla	fp, r2, r3, fp
1001784e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10017852:	9306      	str	r3, [sp, #24]
10017854:	e42f      	b.n	100170b6 <_vfprintf_r+0x1402>
10017856:	bf00      	nop
10017858:	1002c194 	.word	0x1002c194
1001785c:	1002c184 	.word	0x1002c184
10017860:	1002c164 	.word	0x1002c164
10017864:	1002c150 	.word	0x1002c150
10017868:	1002c148 	.word	0x1002c148
1001786c:	1002c14c 	.word	0x1002c14c
10017870:	f1c3 0301 	rsb	r3, r3, #1
10017874:	449b      	add	fp, r3
10017876:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001787a:	9306      	str	r3, [sp, #24]
1001787c:	2367      	movs	r3, #103	@ 0x67
1001787e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10017882:	930e      	str	r3, [sp, #56]	@ 0x38
10017884:	e57e      	b.n	10017384 <_vfprintf_r+0x16d0>
10017886:	4e1c      	ldr	r6, [pc, #112]	@ (100178f8 <_vfprintf_r+0x1c44>)
10017888:	e60f      	b.n	100174aa <_vfprintf_r+0x17f6>
1001788a:	2302      	movs	r3, #2
1001788c:	931c      	str	r3, [sp, #112]	@ 0x70
1001788e:	f7ff bbfd 	b.w	1001708c <_vfprintf_r+0x13d8>
10017892:	4a19      	ldr	r2, [pc, #100]	@ (100178f8 <_vfprintf_r+0x1c44>)
10017894:	9215      	str	r2, [sp, #84]	@ 0x54
10017896:	e52b      	b.n	100172f0 <_vfprintf_r+0x163c>
10017898:	2170      	movs	r1, #112	@ 0x70
1001789a:	f7ff bbc0 	b.w	1001701e <_vfprintf_r+0x136a>
1001789e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
100178a2:	b933      	cbnz	r3, 100178b2 <_vfprintf_r+0x1bfe>
100178a4:	f04f 0b01 	mov.w	fp, #1
100178a8:	2366      	movs	r3, #102	@ 0x66
100178aa:	f8cd b018 	str.w	fp, [sp, #24]
100178ae:	930e      	str	r3, [sp, #56]	@ 0x38
100178b0:	e568      	b.n	10017384 <_vfprintf_r+0x16d0>
100178b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
100178b4:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
100178b8:	1c5f      	adds	r7, r3, #1
100178ba:	44bb      	add	fp, r7
100178bc:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
100178c0:	9306      	str	r3, [sp, #24]
100178c2:	2366      	movs	r3, #102	@ 0x66
100178c4:	930e      	str	r3, [sp, #56]	@ 0x38
100178c6:	e55d      	b.n	10017384 <_vfprintf_r+0x16d0>
100178c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100178ca:	7863      	ldrb	r3, [r4, #1]
100178cc:	460c      	mov	r4, r1
100178ce:	f852 1b04 	ldr.w	r1, [r2], #4
100178d2:	920d      	str	r2, [sp, #52]	@ 0x34
100178d4:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
100178d8:	9109      	str	r1, [sp, #36]	@ 0x24
100178da:	f7fe ba63 	b.w	10015da4 <_vfprintf_r+0xf0>
100178de:	2300      	movs	r3, #0
100178e0:	9314      	str	r3, [sp, #80]	@ 0x50
100178e2:	9310      	str	r3, [sp, #64]	@ 0x40
100178e4:	e7ac      	b.n	10017840 <_vfprintf_r+0x1b8c>
100178e6:	e9dd 2b07 	ldrd	r2, fp, [sp, #28]
100178ea:	8993      	ldrh	r3, [r2, #12]
100178ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100178f0:	8193      	strh	r3, [r2, #12]
100178f2:	f7fe bb37 	b.w	10015f64 <_vfprintf_r+0x2b0>
100178f6:	bf00      	nop
100178f8:	1002c184 	.word	0x1002c184

100178fc <__sbprintf>:
100178fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100178fe:	461f      	mov	r7, r3
10017900:	898b      	ldrh	r3, [r1, #12]
10017902:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
10017906:	f023 0302 	bic.w	r3, r3, #2
1001790a:	f8ad 300c 	strh.w	r3, [sp, #12]
1001790e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10017910:	9319      	str	r3, [sp, #100]	@ 0x64
10017912:	89cb      	ldrh	r3, [r1, #14]
10017914:	f8ad 300e 	strh.w	r3, [sp, #14]
10017918:	69cb      	ldr	r3, [r1, #28]
1001791a:	9307      	str	r3, [sp, #28]
1001791c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
1001791e:	9309      	str	r3, [sp, #36]	@ 0x24
10017920:	ab1a      	add	r3, sp, #104	@ 0x68
10017922:	9300      	str	r3, [sp, #0]
10017924:	9304      	str	r3, [sp, #16]
10017926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1001792a:	4615      	mov	r5, r2
1001792c:	4606      	mov	r6, r0
1001792e:	9302      	str	r3, [sp, #8]
10017930:	9305      	str	r3, [sp, #20]
10017932:	a816      	add	r0, sp, #88	@ 0x58
10017934:	2300      	movs	r3, #0
10017936:	460c      	mov	r4, r1
10017938:	9306      	str	r3, [sp, #24]
1001793a:	f002 fb69 	bl	1001a010 <__retarget_lock_init_recursive>
1001793e:	462a      	mov	r2, r5
10017940:	463b      	mov	r3, r7
10017942:	4669      	mov	r1, sp
10017944:	4630      	mov	r0, r6
10017946:	f7fe f9b5 	bl	10015cb4 <_vfprintf_r>
1001794a:	1e05      	subs	r5, r0, #0
1001794c:	db07      	blt.n	1001795e <__sbprintf+0x62>
1001794e:	4669      	mov	r1, sp
10017950:	4630      	mov	r0, r6
10017952:	f001 fb11 	bl	10018f78 <_fflush_r>
10017956:	2800      	cmp	r0, #0
10017958:	bf18      	it	ne
1001795a:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
1001795e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
10017962:	065b      	lsls	r3, r3, #25
10017964:	d503      	bpl.n	1001796e <__sbprintf+0x72>
10017966:	89a3      	ldrh	r3, [r4, #12]
10017968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001796c:	81a3      	strh	r3, [r4, #12]
1001796e:	9816      	ldr	r0, [sp, #88]	@ 0x58
10017970:	f002 fb50 	bl	1001a014 <__retarget_lock_close_recursive>
10017974:	4628      	mov	r0, r5
10017976:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
1001797a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1001797c <__sprint_r.part.0>:
1001797c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10017980:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10017982:	049c      	lsls	r4, r3, #18
10017984:	4690      	mov	r8, r2
10017986:	d52e      	bpl.n	100179e6 <__sprint_r.part.0+0x6a>
10017988:	6893      	ldr	r3, [r2, #8]
1001798a:	6812      	ldr	r2, [r2, #0]
1001798c:	b34b      	cbz	r3, 100179e2 <__sprint_r.part.0+0x66>
1001798e:	460d      	mov	r5, r1
10017990:	4606      	mov	r6, r0
10017992:	f102 0908 	add.w	r9, r2, #8
10017996:	e959 2a02 	ldrd	r2, sl, [r9, #-8]
1001799a:	ea5f 079a 	movs.w	r7, sl, lsr #2
1001799e:	d016      	beq.n	100179ce <__sprint_r.part.0+0x52>
100179a0:	f1a2 0b04 	sub.w	fp, r2, #4
100179a4:	2400      	movs	r4, #0
100179a6:	e001      	b.n	100179ac <__sprint_r.part.0+0x30>
100179a8:	42a7      	cmp	r7, r4
100179aa:	d00e      	beq.n	100179ca <__sprint_r.part.0+0x4e>
100179ac:	f85b 1f04 	ldr.w	r1, [fp, #4]!
100179b0:	462a      	mov	r2, r5
100179b2:	4630      	mov	r0, r6
100179b4:	f001 ff92 	bl	100198dc <_fputwc_r>
100179b8:	1c43      	adds	r3, r0, #1
100179ba:	f104 0401 	add.w	r4, r4, #1
100179be:	d1f3      	bne.n	100179a8 <__sprint_r.part.0+0x2c>
100179c0:	2300      	movs	r3, #0
100179c2:	e9c8 3301 	strd	r3, r3, [r8, #4]
100179c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
100179ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
100179ce:	f02a 0a03 	bic.w	sl, sl, #3
100179d2:	eba3 030a 	sub.w	r3, r3, sl
100179d6:	f8c8 3008 	str.w	r3, [r8, #8]
100179da:	f109 0908 	add.w	r9, r9, #8
100179de:	2b00      	cmp	r3, #0
100179e0:	d1d9      	bne.n	10017996 <__sprint_r.part.0+0x1a>
100179e2:	2000      	movs	r0, #0
100179e4:	e7ec      	b.n	100179c0 <__sprint_r.part.0+0x44>
100179e6:	f001 fcb9 	bl	1001935c <__sfvwrite_r>
100179ea:	2300      	movs	r3, #0
100179ec:	e9c8 3301 	strd	r3, r3, [r8, #4]
100179f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

100179f4 <__sprint_r>:
100179f4:	b410      	push	{r4}
100179f6:	6894      	ldr	r4, [r2, #8]
100179f8:	b114      	cbz	r4, 10017a00 <__sprint_r+0xc>
100179fa:	bc10      	pop	{r4}
100179fc:	f7ff bfbe 	b.w	1001797c <__sprint_r.part.0>
10017a00:	4620      	mov	r0, r4
10017a02:	6054      	str	r4, [r2, #4]
10017a04:	bc10      	pop	{r4}
10017a06:	4770      	bx	lr

10017a08 <_vfiprintf_r>:
10017a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10017a0c:	b0c7      	sub	sp, #284	@ 0x11c
10017a0e:	af16      	add	r7, sp, #88	@ 0x58
10017a10:	4683      	mov	fp, r0
10017a12:	9103      	str	r1, [sp, #12]
10017a14:	9206      	str	r2, [sp, #24]
10017a16:	2100      	movs	r1, #0
10017a18:	2208      	movs	r2, #8
10017a1a:	4638      	mov	r0, r7
10017a1c:	461c      	mov	r4, r3
10017a1e:	930a      	str	r3, [sp, #40]	@ 0x28
10017a20:	f002 f80c 	bl	10019a3c <memset>
10017a24:	f1bb 0f00 	cmp.w	fp, #0
10017a28:	d004      	beq.n	10017a34 <_vfiprintf_r+0x2c>
10017a2a:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
10017a2e:	2b00      	cmp	r3, #0
10017a30:	f000 86bb 	beq.w	100187aa <_vfiprintf_r+0xda2>
10017a34:	9a03      	ldr	r2, [sp, #12]
10017a36:	6e53      	ldr	r3, [r2, #100]	@ 0x64
10017a38:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
10017a3c:	07db      	lsls	r3, r3, #31
10017a3e:	d402      	bmi.n	10017a46 <_vfiprintf_r+0x3e>
10017a40:	0596      	lsls	r6, r2, #22
10017a42:	f140 859f 	bpl.w	10018584 <_vfiprintf_r+0xb7c>
10017a46:	0495      	lsls	r5, r2, #18
10017a48:	d407      	bmi.n	10017a5a <_vfiprintf_r+0x52>
10017a4a:	9903      	ldr	r1, [sp, #12]
10017a4c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10017a4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10017a52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
10017a56:	818a      	strh	r2, [r1, #12]
10017a58:	664b      	str	r3, [r1, #100]	@ 0x64
10017a5a:	0710      	lsls	r0, r2, #28
10017a5c:	f140 80c9 	bpl.w	10017bf2 <_vfiprintf_r+0x1ea>
10017a60:	9b03      	ldr	r3, [sp, #12]
10017a62:	691b      	ldr	r3, [r3, #16]
10017a64:	2b00      	cmp	r3, #0
10017a66:	f000 80c4 	beq.w	10017bf2 <_vfiprintf_r+0x1ea>
10017a6a:	f002 031a 	and.w	r3, r2, #26
10017a6e:	2b0a      	cmp	r3, #10
10017a70:	f000 80ce 	beq.w	10017c10 <_vfiprintf_r+0x208>
10017a74:	2300      	movs	r3, #0
10017a76:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
10017a7a:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
10017a7e:	aa1d      	add	r2, sp, #116	@ 0x74
10017a80:	f8df a260 	ldr.w	sl, [pc, #608]	@ 10017ce4 <_vfiprintf_r+0x2dc>
10017a84:	930d      	str	r3, [sp, #52]	@ 0x34
10017a86:	921a      	str	r2, [sp, #104]	@ 0x68
10017a88:	4691      	mov	r9, r2
10017a8a:	9310      	str	r3, [sp, #64]	@ 0x40
10017a8c:	9307      	str	r3, [sp, #28]
10017a8e:	9d06      	ldr	r5, [sp, #24]
10017a90:	f8da 40e4 	ldr.w	r4, [sl, #228]	@ 0xe4
10017a94:	f002 f89a 	bl	10019bcc <__locale_mb_cur_max>
10017a98:	462a      	mov	r2, r5
10017a9a:	4603      	mov	r3, r0
10017a9c:	a914      	add	r1, sp, #80	@ 0x50
10017a9e:	9700      	str	r7, [sp, #0]
10017aa0:	4658      	mov	r0, fp
10017aa2:	47a0      	blx	r4
10017aa4:	2800      	cmp	r0, #0
10017aa6:	f000 80d2 	beq.w	10017c4e <_vfiprintf_r+0x246>
10017aaa:	f2c0 80c8 	blt.w	10017c3e <_vfiprintf_r+0x236>
10017aae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10017ab0:	2a25      	cmp	r2, #37	@ 0x25
10017ab2:	4603      	mov	r3, r0
10017ab4:	d001      	beq.n	10017aba <_vfiprintf_r+0xb2>
10017ab6:	441d      	add	r5, r3
10017ab8:	e7ea      	b.n	10017a90 <_vfiprintf_r+0x88>
10017aba:	9b06      	ldr	r3, [sp, #24]
10017abc:	1aee      	subs	r6, r5, r3
10017abe:	4604      	mov	r4, r0
10017ac0:	f040 80c9 	bne.w	10017c56 <_vfiprintf_r+0x24e>
10017ac4:	2300      	movs	r3, #0
10017ac6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10017aca:	786a      	ldrb	r2, [r5, #1]
10017acc:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10017ad0:	9308      	str	r3, [sp, #32]
10017ad2:	1c6c      	adds	r4, r5, #1
10017ad4:	9105      	str	r1, [sp, #20]
10017ad6:	9302      	str	r3, [sp, #8]
10017ad8:	3401      	adds	r4, #1
10017ada:	f1a2 0320 	sub.w	r3, r2, #32
10017ade:	2b5a      	cmp	r3, #90	@ 0x5a
10017ae0:	f200 8102 	bhi.w	10017ce8 <_vfiprintf_r+0x2e0>
10017ae4:	e8df f013 	tbh	[pc, r3, lsl #1]
10017ae8:	01000303 	.word	0x01000303
10017aec:	02fd0100 	.word	0x02fd0100
10017af0:	01000100 	.word	0x01000100
10017af4:	006b0100 	.word	0x006b0100
10017af8:	01000100 	.word	0x01000100
10017afc:	032d0218 	.word	0x032d0218
10017b00:	02230100 	.word	0x02230100
10017b04:	01000313 	.word	0x01000313
10017b08:	005b030d 	.word	0x005b030d
10017b0c:	005b005b 	.word	0x005b005b
10017b10:	005b005b 	.word	0x005b005b
10017b14:	005b005b 	.word	0x005b005b
10017b18:	005b005b 	.word	0x005b005b
10017b1c:	01000100 	.word	0x01000100
10017b20:	01000100 	.word	0x01000100
10017b24:	01000100 	.word	0x01000100
10017b28:	01000100 	.word	0x01000100
10017b2c:	01ce0100 	.word	0x01ce0100
10017b30:	0100025d 	.word	0x0100025d
10017b34:	01000100 	.word	0x01000100
10017b38:	01000100 	.word	0x01000100
10017b3c:	01000100 	.word	0x01000100
10017b40:	01000100 	.word	0x01000100
10017b44:	02290100 	.word	0x02290100
10017b48:	01000100 	.word	0x01000100
10017b4c:	01a60100 	.word	0x01a60100
10017b50:	02760100 	.word	0x02760100
10017b54:	01000100 	.word	0x01000100
10017b58:	0100058e 	.word	0x0100058e
10017b5c:	01000100 	.word	0x01000100
10017b60:	01000100 	.word	0x01000100
10017b64:	01000100 	.word	0x01000100
10017b68:	01000100 	.word	0x01000100
10017b6c:	01ce0100 	.word	0x01ce0100
10017b70:	010001f3 	.word	0x010001f3
10017b74:	01000100 	.word	0x01000100
10017b78:	01f302c4 	.word	0x01f302c4
10017b7c:	0100007f 	.word	0x0100007f
10017b80:	01000332 	.word	0x01000332
10017b84:	058b02ee 	.word	0x058b02ee
10017b88:	007f02cd 	.word	0x007f02cd
10017b8c:	01a60100 	.word	0x01a60100
10017b90:	0588007d 	.word	0x0588007d
10017b94:	01000100 	.word	0x01000100
10017b98:	010005b1 	.word	0x010005b1
10017b9c:	007d      	.short	0x007d
10017b9e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
10017ba2:	2200      	movs	r2, #0
10017ba4:	4611      	mov	r1, r2
10017ba6:	f814 2b01 	ldrb.w	r2, [r4], #1
10017baa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
10017bae:	eb03 0141 	add.w	r1, r3, r1, lsl #1
10017bb2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
10017bb6:	2b09      	cmp	r3, #9
10017bb8:	d9f5      	bls.n	10017ba6 <_vfiprintf_r+0x19e>
10017bba:	9108      	str	r1, [sp, #32]
10017bbc:	e78d      	b.n	10017ada <_vfiprintf_r+0xd2>
10017bbe:	4658      	mov	r0, fp
10017bc0:	f002 f80a 	bl	10019bd8 <_localeconv_r>
10017bc4:	6843      	ldr	r3, [r0, #4]
10017bc6:	9310      	str	r3, [sp, #64]	@ 0x40
10017bc8:	4618      	mov	r0, r3
10017bca:	f002 fb19 	bl	1001a200 <strlen>
10017bce:	900f      	str	r0, [sp, #60]	@ 0x3c
10017bd0:	4605      	mov	r5, r0
10017bd2:	4658      	mov	r0, fp
10017bd4:	f002 f800 	bl	10019bd8 <_localeconv_r>
10017bd8:	6883      	ldr	r3, [r0, #8]
10017bda:	930e      	str	r3, [sp, #56]	@ 0x38
10017bdc:	2d00      	cmp	r5, #0
10017bde:	f040 84e5 	bne.w	100185ac <_vfiprintf_r+0xba4>
10017be2:	7822      	ldrb	r2, [r4, #0]
10017be4:	e778      	b.n	10017ad8 <_vfiprintf_r+0xd0>
10017be6:	9b02      	ldr	r3, [sp, #8]
10017be8:	7822      	ldrb	r2, [r4, #0]
10017bea:	f043 0320 	orr.w	r3, r3, #32
10017bee:	9302      	str	r3, [sp, #8]
10017bf0:	e772      	b.n	10017ad8 <_vfiprintf_r+0xd0>
10017bf2:	9d03      	ldr	r5, [sp, #12]
10017bf4:	4658      	mov	r0, fp
10017bf6:	4629      	mov	r1, r5
10017bf8:	f001 fd50 	bl	1001969c <__swsetup_r>
10017bfc:	2800      	cmp	r0, #0
10017bfe:	f040 86a6 	bne.w	1001894e <_vfiprintf_r+0xf46>
10017c02:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
10017c06:	f002 031a 	and.w	r3, r2, #26
10017c0a:	2b0a      	cmp	r3, #10
10017c0c:	f47f af32 	bne.w	10017a74 <_vfiprintf_r+0x6c>
10017c10:	9903      	ldr	r1, [sp, #12]
10017c12:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
10017c16:	2b00      	cmp	r3, #0
10017c18:	f6ff af2c 	blt.w	10017a74 <_vfiprintf_r+0x6c>
10017c1c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10017c1e:	07db      	lsls	r3, r3, #31
10017c20:	d402      	bmi.n	10017c28 <_vfiprintf_r+0x220>
10017c22:	0597      	lsls	r7, r2, #22
10017c24:	f140 865e 	bpl.w	100188e4 <_vfiprintf_r+0xedc>
10017c28:	9a06      	ldr	r2, [sp, #24]
10017c2a:	9903      	ldr	r1, [sp, #12]
10017c2c:	4623      	mov	r3, r4
10017c2e:	4658      	mov	r0, fp
10017c30:	f000 fec0 	bl	100189b4 <__sbprintf>
10017c34:	9007      	str	r0, [sp, #28]
10017c36:	9807      	ldr	r0, [sp, #28]
10017c38:	b047      	add	sp, #284	@ 0x11c
10017c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10017c3e:	2208      	movs	r2, #8
10017c40:	2100      	movs	r1, #0
10017c42:	4638      	mov	r0, r7
10017c44:	f001 fefa 	bl	10019a3c <memset>
10017c48:	2301      	movs	r3, #1
10017c4a:	441d      	add	r5, r3
10017c4c:	e720      	b.n	10017a90 <_vfiprintf_r+0x88>
10017c4e:	9b06      	ldr	r3, [sp, #24]
10017c50:	1aee      	subs	r6, r5, r3
10017c52:	4604      	mov	r4, r0
10017c54:	d012      	beq.n	10017c7c <_vfiprintf_r+0x274>
10017c56:	9b06      	ldr	r3, [sp, #24]
10017c58:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
10017c5a:	e9c9 3600 	strd	r3, r6, [r9]
10017c5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10017c60:	3301      	adds	r3, #1
10017c62:	4432      	add	r2, r6
10017c64:	2b07      	cmp	r3, #7
10017c66:	921c      	str	r2, [sp, #112]	@ 0x70
10017c68:	931b      	str	r3, [sp, #108]	@ 0x6c
10017c6a:	dc11      	bgt.n	10017c90 <_vfiprintf_r+0x288>
10017c6c:	f109 0908 	add.w	r9, r9, #8
10017c70:	9b07      	ldr	r3, [sp, #28]
10017c72:	4433      	add	r3, r6
10017c74:	9307      	str	r3, [sp, #28]
10017c76:	2c00      	cmp	r4, #0
10017c78:	f47f af24 	bne.w	10017ac4 <_vfiprintf_r+0xbc>
10017c7c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10017c7e:	2b00      	cmp	r3, #0
10017c80:	f040 8650 	bne.w	10018924 <_vfiprintf_r+0xf1c>
10017c84:	9b03      	ldr	r3, [sp, #12]
10017c86:	2200      	movs	r2, #0
10017c88:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
10017c8c:	921b      	str	r2, [sp, #108]	@ 0x6c
10017c8e:	e01c      	b.n	10017cca <_vfiprintf_r+0x2c2>
10017c90:	2a00      	cmp	r2, #0
10017c92:	f000 842f 	beq.w	100184f4 <_vfiprintf_r+0xaec>
10017c96:	9903      	ldr	r1, [sp, #12]
10017c98:	aa1a      	add	r2, sp, #104	@ 0x68
10017c9a:	4658      	mov	r0, fp
10017c9c:	f7ff fe6e 	bl	1001797c <__sprint_r.part.0>
10017ca0:	b980      	cbnz	r0, 10017cc4 <_vfiprintf_r+0x2bc>
10017ca2:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017ca6:	e7e3      	b.n	10017c70 <_vfiprintf_r+0x268>
10017ca8:	9903      	ldr	r1, [sp, #12]
10017caa:	aa1a      	add	r2, sp, #104	@ 0x68
10017cac:	4658      	mov	r0, fp
10017cae:	f7ff fe65 	bl	1001797c <__sprint_r.part.0>
10017cb2:	2800      	cmp	r0, #0
10017cb4:	f000 80a9 	beq.w	10017e0a <_vfiprintf_r+0x402>
10017cb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10017cba:	b11b      	cbz	r3, 10017cc4 <_vfiprintf_r+0x2bc>
10017cbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10017cbe:	4658      	mov	r0, fp
10017cc0:	f003 fb9e 	bl	1001b400 <_free_r>
10017cc4:	9b03      	ldr	r3, [sp, #12]
10017cc6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
10017cca:	9a03      	ldr	r2, [sp, #12]
10017ccc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
10017cce:	07d1      	lsls	r1, r2, #31
10017cd0:	f140 80a6 	bpl.w	10017e20 <_vfiprintf_r+0x418>
10017cd4:	065b      	lsls	r3, r3, #25
10017cd6:	f100 8646 	bmi.w	10018966 <_vfiprintf_r+0xf5e>
10017cda:	9807      	ldr	r0, [sp, #28]
10017cdc:	b047      	add	sp, #284	@ 0x11c
10017cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10017ce2:	bf00      	nop
10017ce4:	20000474 	.word	0x20000474
10017ce8:	9406      	str	r4, [sp, #24]
10017cea:	2a00      	cmp	r2, #0
10017cec:	d0c6      	beq.n	10017c7c <_vfiprintf_r+0x274>
10017cee:	2300      	movs	r3, #0
10017cf0:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10017cf4:	2301      	movs	r3, #1
10017cf6:	f88d 20b4 	strb.w	r2, [sp, #180]	@ 0xb4
10017cfa:	9304      	str	r3, [sp, #16]
10017cfc:	9309      	str	r3, [sp, #36]	@ 0x24
10017cfe:	ac2d      	add	r4, sp, #180	@ 0xb4
10017d00:	2300      	movs	r3, #0
10017d02:	930b      	str	r3, [sp, #44]	@ 0x2c
10017d04:	9305      	str	r3, [sp, #20]
10017d06:	9b02      	ldr	r3, [sp, #8]
10017d08:	f013 0302 	ands.w	r3, r3, #2
10017d0c:	d002      	beq.n	10017d14 <_vfiprintf_r+0x30c>
10017d0e:	9a04      	ldr	r2, [sp, #16]
10017d10:	3202      	adds	r2, #2
10017d12:	9204      	str	r2, [sp, #16]
10017d14:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
10017d18:	9d02      	ldr	r5, [sp, #8]
10017d1a:	1c50      	adds	r0, r2, #1
10017d1c:	f015 0584 	ands.w	r5, r5, #132	@ 0x84
10017d20:	4601      	mov	r1, r0
10017d22:	950c      	str	r5, [sp, #48]	@ 0x30
10017d24:	d105      	bne.n	10017d32 <_vfiprintf_r+0x32a>
10017d26:	9d08      	ldr	r5, [sp, #32]
10017d28:	9e04      	ldr	r6, [sp, #16]
10017d2a:	1bad      	subs	r5, r5, r6
10017d2c:	2d00      	cmp	r5, #0
10017d2e:	f300 8331 	bgt.w	10018394 <_vfiprintf_r+0x98c>
10017d32:	f89d 004b 	ldrb.w	r0, [sp, #75]	@ 0x4b
10017d36:	b188      	cbz	r0, 10017d5c <_vfiprintf_r+0x354>
10017d38:	2201      	movs	r2, #1
10017d3a:	f10c 0c01 	add.w	ip, ip, #1
10017d3e:	f8c9 2004 	str.w	r2, [r9, #4]
10017d42:	2907      	cmp	r1, #7
10017d44:	f10d 024b 	add.w	r2, sp, #75	@ 0x4b
10017d48:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
10017d4c:	f8c9 2000 	str.w	r2, [r9]
10017d50:	f300 82e1 	bgt.w	10018316 <_vfiprintf_r+0x90e>
10017d54:	460a      	mov	r2, r1
10017d56:	f109 0908 	add.w	r9, r9, #8
10017d5a:	3101      	adds	r1, #1
10017d5c:	b1eb      	cbz	r3, 10017d9a <_vfiprintf_r+0x392>
10017d5e:	ab13      	add	r3, sp, #76	@ 0x4c
10017d60:	f10c 0c02 	add.w	ip, ip, #2
10017d64:	f8c9 3000 	str.w	r3, [r9]
10017d68:	2907      	cmp	r1, #7
10017d6a:	f04f 0302 	mov.w	r3, #2
10017d6e:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
10017d72:	f8c9 3004 	str.w	r3, [r9, #4]
10017d76:	f340 82ec 	ble.w	10018352 <_vfiprintf_r+0x94a>
10017d7a:	f1bc 0f00 	cmp.w	ip, #0
10017d7e:	f000 83da 	beq.w	10018536 <_vfiprintf_r+0xb2e>
10017d82:	9903      	ldr	r1, [sp, #12]
10017d84:	aa1a      	add	r2, sp, #104	@ 0x68
10017d86:	4658      	mov	r0, fp
10017d88:	f7ff fdf8 	bl	1001797c <__sprint_r.part.0>
10017d8c:	2800      	cmp	r0, #0
10017d8e:	d193      	bne.n	10017cb8 <_vfiprintf_r+0x2b0>
10017d90:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
10017d94:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017d98:	1c51      	adds	r1, r2, #1
10017d9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10017d9c:	2b80      	cmp	r3, #128	@ 0x80
10017d9e:	f000 8213 	beq.w	100181c8 <_vfiprintf_r+0x7c0>
10017da2:	9b05      	ldr	r3, [sp, #20]
10017da4:	9809      	ldr	r0, [sp, #36]	@ 0x24
10017da6:	1a1d      	subs	r5, r3, r0
10017da8:	2d00      	cmp	r5, #0
10017daa:	f300 8268 	bgt.w	1001827e <_vfiprintf_r+0x876>
10017dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10017db0:	f8c9 4000 	str.w	r4, [r9]
10017db4:	eb02 030c 	add.w	r3, r2, ip
10017db8:	2907      	cmp	r1, #7
10017dba:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
10017dbe:	f8c9 2004 	str.w	r2, [r9, #4]
10017dc2:	f340 81fe 	ble.w	100181c2 <_vfiprintf_r+0x7ba>
10017dc6:	2b00      	cmp	r3, #0
10017dc8:	f000 832b 	beq.w	10018422 <_vfiprintf_r+0xa1a>
10017dcc:	9903      	ldr	r1, [sp, #12]
10017dce:	aa1a      	add	r2, sp, #104	@ 0x68
10017dd0:	4658      	mov	r0, fp
10017dd2:	f7ff fdd3 	bl	1001797c <__sprint_r.part.0>
10017dd6:	2800      	cmp	r0, #0
10017dd8:	f47f af6e 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
10017ddc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10017dde:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017de2:	9a02      	ldr	r2, [sp, #8]
10017de4:	0750      	lsls	r0, r2, #29
10017de6:	d505      	bpl.n	10017df4 <_vfiprintf_r+0x3ec>
10017de8:	9a08      	ldr	r2, [sp, #32]
10017dea:	9904      	ldr	r1, [sp, #16]
10017dec:	1a54      	subs	r4, r2, r1
10017dee:	2c00      	cmp	r4, #0
10017df0:	f300 8322 	bgt.w	10018438 <_vfiprintf_r+0xa30>
10017df4:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
10017df8:	9804      	ldr	r0, [sp, #16]
10017dfa:	4281      	cmp	r1, r0
10017dfc:	bfac      	ite	ge
10017dfe:	1852      	addge	r2, r2, r1
10017e00:	1812      	addlt	r2, r2, r0
10017e02:	9207      	str	r2, [sp, #28]
10017e04:	2b00      	cmp	r3, #0
10017e06:	f47f af4f 	bne.w	10017ca8 <_vfiprintf_r+0x2a0>
10017e0a:	2300      	movs	r3, #0
10017e0c:	931b      	str	r3, [sp, #108]	@ 0x6c
10017e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10017e10:	b11b      	cbz	r3, 10017e1a <_vfiprintf_r+0x412>
10017e12:	4619      	mov	r1, r3
10017e14:	4658      	mov	r0, fp
10017e16:	f003 faf3 	bl	1001b400 <_free_r>
10017e1a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017e1e:	e636      	b.n	10017a8e <_vfiprintf_r+0x86>
10017e20:	059a      	lsls	r2, r3, #22
10017e22:	f53f af57 	bmi.w	10017cd4 <_vfiprintf_r+0x2cc>
10017e26:	9c03      	ldr	r4, [sp, #12]
10017e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10017e2a:	f002 f8f7 	bl	1001a01c <__retarget_lock_release_recursive>
10017e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10017e32:	e74f      	b.n	10017cd4 <_vfiprintf_r+0x2cc>
10017e34:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10017e36:	9406      	str	r4, [sp, #24]
10017e38:	f856 4b04 	ldr.w	r4, [r6], #4
10017e3c:	2300      	movs	r3, #0
10017e3e:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10017e42:	2c00      	cmp	r4, #0
10017e44:	f000 84c9 	beq.w	100187da <_vfiprintf_r+0xdd2>
10017e48:	2a53      	cmp	r2, #83	@ 0x53
10017e4a:	f000 8421 	beq.w	10018690 <_vfiprintf_r+0xc88>
10017e4e:	9b02      	ldr	r3, [sp, #8]
10017e50:	f013 0510 	ands.w	r5, r3, #16
10017e54:	f040 841c 	bne.w	10018690 <_vfiprintf_r+0xc88>
10017e58:	9b05      	ldr	r3, [sp, #20]
10017e5a:	1c5a      	adds	r2, r3, #1
10017e5c:	f000 854e 	beq.w	100188fc <_vfiprintf_r+0xef4>
10017e60:	461a      	mov	r2, r3
10017e62:	4629      	mov	r1, r5
10017e64:	4620      	mov	r0, r4
10017e66:	f002 f8db 	bl	1001a020 <memchr>
10017e6a:	900b      	str	r0, [sp, #44]	@ 0x2c
10017e6c:	2800      	cmp	r0, #0
10017e6e:	f000 853e 	beq.w	100188ee <_vfiprintf_r+0xee6>
10017e72:	1b03      	subs	r3, r0, r4
10017e74:	9309      	str	r3, [sp, #36]	@ 0x24
10017e76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10017e7a:	9505      	str	r5, [sp, #20]
10017e7c:	960a      	str	r6, [sp, #40]	@ 0x28
10017e7e:	9304      	str	r3, [sp, #16]
10017e80:	950b      	str	r5, [sp, #44]	@ 0x2c
10017e82:	e18d      	b.n	100181a0 <_vfiprintf_r+0x798>
10017e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017e86:	9406      	str	r4, [sp, #24]
10017e88:	2a43      	cmp	r2, #67	@ 0x43
10017e8a:	f103 0504 	add.w	r5, r3, #4
10017e8e:	d003      	beq.n	10017e98 <_vfiprintf_r+0x490>
10017e90:	9b02      	ldr	r3, [sp, #8]
10017e92:	06de      	lsls	r6, r3, #27
10017e94:	f140 83e4 	bpl.w	10018660 <_vfiprintf_r+0xc58>
10017e98:	2208      	movs	r2, #8
10017e9a:	2100      	movs	r1, #0
10017e9c:	a818      	add	r0, sp, #96	@ 0x60
10017e9e:	f001 fdcd 	bl	10019a3c <memset>
10017ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017ea4:	ac2d      	add	r4, sp, #180	@ 0xb4
10017ea6:	681a      	ldr	r2, [r3, #0]
10017ea8:	4621      	mov	r1, r4
10017eaa:	ab18      	add	r3, sp, #96	@ 0x60
10017eac:	4658      	mov	r0, fp
10017eae:	f002 fa13 	bl	1001a2d8 <_wcrtomb_r>
10017eb2:	4603      	mov	r3, r0
10017eb4:	3301      	adds	r3, #1
10017eb6:	9009      	str	r0, [sp, #36]	@ 0x24
10017eb8:	f000 8541 	beq.w	1001893e <_vfiprintf_r+0xf36>
10017ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017ebe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10017ec2:	9304      	str	r3, [sp, #16]
10017ec4:	2300      	movs	r3, #0
10017ec6:	950a      	str	r5, [sp, #40]	@ 0x28
10017ec8:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10017ecc:	e718      	b.n	10017d00 <_vfiprintf_r+0x2f8>
10017ece:	9b02      	ldr	r3, [sp, #8]
10017ed0:	9406      	str	r4, [sp, #24]
10017ed2:	069c      	lsls	r4, r3, #26
10017ed4:	d56d      	bpl.n	10017fb2 <_vfiprintf_r+0x5aa>
10017ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017ed8:	3307      	adds	r3, #7
10017eda:	f023 0307 	bic.w	r3, r3, #7
10017ede:	4619      	mov	r1, r3
10017ee0:	685a      	ldr	r2, [r3, #4]
10017ee2:	f851 3b08 	ldr.w	r3, [r1], #8
10017ee6:	910a      	str	r1, [sp, #40]	@ 0x28
10017ee8:	4611      	mov	r1, r2
10017eea:	2a00      	cmp	r2, #0
10017eec:	f2c0 8137 	blt.w	1001815e <_vfiprintf_r+0x756>
10017ef0:	9a05      	ldr	r2, [sp, #20]
10017ef2:	3201      	adds	r2, #1
10017ef4:	f000 8140 	beq.w	10018178 <_vfiprintf_r+0x770>
10017ef8:	9a02      	ldr	r2, [sp, #8]
10017efa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
10017efe:	9202      	str	r2, [sp, #8]
10017f00:	ea53 0201 	orrs.w	r2, r3, r1
10017f04:	f040 8138 	bne.w	10018178 <_vfiprintf_r+0x770>
10017f08:	9b05      	ldr	r3, [sp, #20]
10017f0a:	2b00      	cmp	r3, #0
10017f0c:	f040 8508 	bne.w	10018920 <_vfiprintf_r+0xf18>
10017f10:	9304      	str	r3, [sp, #16]
10017f12:	9309      	str	r3, [sp, #36]	@ 0x24
10017f14:	ac46      	add	r4, sp, #280	@ 0x118
10017f16:	e141      	b.n	1001819c <_vfiprintf_r+0x794>
10017f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017f1a:	f853 2b04 	ldr.w	r2, [r3], #4
10017f1e:	9208      	str	r2, [sp, #32]
10017f20:	2a00      	cmp	r2, #0
10017f22:	f280 8327 	bge.w	10018574 <_vfiprintf_r+0xb6c>
10017f26:	9a08      	ldr	r2, [sp, #32]
10017f28:	930a      	str	r3, [sp, #40]	@ 0x28
10017f2a:	4252      	negs	r2, r2
10017f2c:	9208      	str	r2, [sp, #32]
10017f2e:	9b02      	ldr	r3, [sp, #8]
10017f30:	7822      	ldrb	r2, [r4, #0]
10017f32:	f043 0304 	orr.w	r3, r3, #4
10017f36:	9302      	str	r3, [sp, #8]
10017f38:	e5ce      	b.n	10017ad8 <_vfiprintf_r+0xd0>
10017f3a:	9b02      	ldr	r3, [sp, #8]
10017f3c:	9406      	str	r4, [sp, #24]
10017f3e:	f043 0210 	orr.w	r2, r3, #16
10017f42:	f012 0120 	ands.w	r1, r2, #32
10017f46:	f000 82e7 	beq.w	10018518 <_vfiprintf_r+0xb10>
10017f4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017f4c:	3307      	adds	r3, #7
10017f4e:	f023 0307 	bic.w	r3, r3, #7
10017f52:	4618      	mov	r0, r3
10017f54:	6859      	ldr	r1, [r3, #4]
10017f56:	f850 3b08 	ldr.w	r3, [r0], #8
10017f5a:	900a      	str	r0, [sp, #40]	@ 0x28
10017f5c:	f422 6480 	bic.w	r4, r2, #1024	@ 0x400
10017f60:	9402      	str	r4, [sp, #8]
10017f62:	9c05      	ldr	r4, [sp, #20]
10017f64:	2000      	movs	r0, #0
10017f66:	3401      	adds	r4, #1
10017f68:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
10017f6c:	d05d      	beq.n	1001802a <_vfiprintf_r+0x622>
10017f6e:	ea53 0401 	orrs.w	r4, r3, r1
10017f72:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
10017f76:	f040 8414 	bne.w	100187a2 <_vfiprintf_r+0xd9a>
10017f7a:	9c02      	ldr	r4, [sp, #8]
10017f7c:	9202      	str	r2, [sp, #8]
10017f7e:	9b05      	ldr	r3, [sp, #20]
10017f80:	2b00      	cmp	r3, #0
10017f82:	d14a      	bne.n	1001801a <_vfiprintf_r+0x612>
10017f84:	2800      	cmp	r0, #0
10017f86:	f040 82f0 	bne.w	1001856a <_vfiprintf_r+0xb62>
10017f8a:	f014 0201 	ands.w	r2, r4, #1
10017f8e:	9209      	str	r2, [sp, #36]	@ 0x24
10017f90:	f000 82f4 	beq.w	1001857c <_vfiprintf_r+0xb74>
10017f94:	2330      	movs	r3, #48	@ 0x30
10017f96:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
10017f9a:	9204      	str	r2, [sp, #16]
10017f9c:	f20d 1417 	addw	r4, sp, #279	@ 0x117
10017fa0:	e0fc      	b.n	1001819c <_vfiprintf_r+0x794>
10017fa2:	9b02      	ldr	r3, [sp, #8]
10017fa4:	9406      	str	r4, [sp, #24]
10017fa6:	f043 0310 	orr.w	r3, r3, #16
10017faa:	9302      	str	r3, [sp, #8]
10017fac:	9b02      	ldr	r3, [sp, #8]
10017fae:	069c      	lsls	r4, r3, #26
10017fb0:	d491      	bmi.n	10017ed6 <_vfiprintf_r+0x4ce>
10017fb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10017fb4:	f852 3b04 	ldr.w	r3, [r2], #4
10017fb8:	920a      	str	r2, [sp, #40]	@ 0x28
10017fba:	9a02      	ldr	r2, [sp, #8]
10017fbc:	06d0      	lsls	r0, r2, #27
10017fbe:	f100 82f2 	bmi.w	100185a6 <_vfiprintf_r+0xb9e>
10017fc2:	9a02      	ldr	r2, [sp, #8]
10017fc4:	0651      	lsls	r1, r2, #25
10017fc6:	f140 82ea 	bpl.w	1001859e <_vfiprintf_r+0xb96>
10017fca:	f343 31c0 	sbfx	r1, r3, #15, #1
10017fce:	460a      	mov	r2, r1
10017fd0:	b21b      	sxth	r3, r3
10017fd2:	e78a      	b.n	10017eea <_vfiprintf_r+0x4e2>
10017fd4:	9b02      	ldr	r3, [sp, #8]
10017fd6:	9406      	str	r4, [sp, #24]
10017fd8:	f043 0410 	orr.w	r4, r3, #16
10017fdc:	f014 0120 	ands.w	r1, r4, #32
10017fe0:	f000 828b 	beq.w	100184fa <_vfiprintf_r+0xaf2>
10017fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017fe6:	3307      	adds	r3, #7
10017fe8:	f023 0307 	bic.w	r3, r3, #7
10017fec:	461a      	mov	r2, r3
10017fee:	6859      	ldr	r1, [r3, #4]
10017ff0:	f852 3b08 	ldr.w	r3, [r2], #8
10017ff4:	920a      	str	r2, [sp, #40]	@ 0x28
10017ff6:	2200      	movs	r2, #0
10017ff8:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
10017ffc:	9a05      	ldr	r2, [sp, #20]
10017ffe:	3201      	adds	r2, #1
10018000:	f000 83d1 	beq.w	100187a6 <_vfiprintf_r+0xd9e>
10018004:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
10018008:	9202      	str	r2, [sp, #8]
1001800a:	ea53 0201 	orrs.w	r2, r3, r1
1001800e:	f040 80b3 	bne.w	10018178 <_vfiprintf_r+0x770>
10018012:	9b05      	ldr	r3, [sp, #20]
10018014:	2001      	movs	r0, #1
10018016:	2b00      	cmp	r3, #0
10018018:	d0b4      	beq.n	10017f84 <_vfiprintf_r+0x57c>
1001801a:	2801      	cmp	r0, #1
1001801c:	f000 8480 	beq.w	10018920 <_vfiprintf_r+0xf18>
10018020:	2300      	movs	r3, #0
10018022:	2802      	cmp	r0, #2
10018024:	4619      	mov	r1, r3
10018026:	f000 8199 	beq.w	1001835c <_vfiprintf_r+0x954>
1001802a:	ac46      	add	r4, sp, #280	@ 0x118
1001802c:	f003 0207 	and.w	r2, r3, #7
10018030:	08db      	lsrs	r3, r3, #3
10018032:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
10018036:	08c9      	lsrs	r1, r1, #3
10018038:	3230      	adds	r2, #48	@ 0x30
1001803a:	ea53 0501 	orrs.w	r5, r3, r1
1001803e:	4620      	mov	r0, r4
10018040:	f804 2d01 	strb.w	r2, [r4, #-1]!
10018044:	d1f2      	bne.n	1001802c <_vfiprintf_r+0x624>
10018046:	9b02      	ldr	r3, [sp, #8]
10018048:	07dd      	lsls	r5, r3, #31
1001804a:	f140 8195 	bpl.w	10018378 <_vfiprintf_r+0x970>
1001804e:	2a30      	cmp	r2, #48	@ 0x30
10018050:	f000 8192 	beq.w	10018378 <_vfiprintf_r+0x970>
10018054:	2330      	movs	r3, #48	@ 0x30
10018056:	9a05      	ldr	r2, [sp, #20]
10018058:	f804 3c01 	strb.w	r3, [r4, #-1]
1001805c:	3802      	subs	r0, #2
1001805e:	ab46      	add	r3, sp, #280	@ 0x118
10018060:	1a1b      	subs	r3, r3, r0
10018062:	429a      	cmp	r2, r3
10018064:	bfb8      	it	lt
10018066:	461a      	movlt	r2, r3
10018068:	9309      	str	r3, [sp, #36]	@ 0x24
1001806a:	4604      	mov	r4, r0
1001806c:	9204      	str	r2, [sp, #16]
1001806e:	e095      	b.n	1001819c <_vfiprintf_r+0x794>
10018070:	7822      	ldrb	r2, [r4, #0]
10018072:	9b02      	ldr	r3, [sp, #8]
10018074:	2a68      	cmp	r2, #104	@ 0x68
10018076:	f000 839d 	beq.w	100187b4 <_vfiprintf_r+0xdac>
1001807a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001807e:	9302      	str	r3, [sp, #8]
10018080:	e52a      	b.n	10017ad8 <_vfiprintf_r+0xd0>
10018082:	9b02      	ldr	r3, [sp, #8]
10018084:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10018086:	9406      	str	r4, [sp, #24]
10018088:	f043 0302 	orr.w	r3, r3, #2
1001808c:	9302      	str	r3, [sp, #8]
1001808e:	f852 3b04 	ldr.w	r3, [r2], #4
10018092:	920a      	str	r2, [sp, #40]	@ 0x28
10018094:	f647 0230 	movw	r2, #30768	@ 0x7830
10018098:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
1001809c:	4abb      	ldr	r2, [pc, #748]	@ (1001838c <_vfiprintf_r+0x984>)
1001809e:	920d      	str	r2, [sp, #52]	@ 0x34
100180a0:	2100      	movs	r1, #0
100180a2:	2200      	movs	r2, #0
100180a4:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
100180a8:	9a05      	ldr	r2, [sp, #20]
100180aa:	3201      	adds	r2, #1
100180ac:	f000 8156 	beq.w	1001835c <_vfiprintf_r+0x954>
100180b0:	9c02      	ldr	r4, [sp, #8]
100180b2:	ea53 0001 	orrs.w	r0, r3, r1
100180b6:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
100180ba:	9202      	str	r2, [sp, #8]
100180bc:	f040 814e 	bne.w	1001835c <_vfiprintf_r+0x954>
100180c0:	2002      	movs	r0, #2
100180c2:	e75c      	b.n	10017f7e <_vfiprintf_r+0x576>
100180c4:	9b02      	ldr	r3, [sp, #8]
100180c6:	9406      	str	r4, [sp, #24]
100180c8:	069e      	lsls	r6, r3, #26
100180ca:	f140 827e 	bpl.w	100185ca <_vfiprintf_r+0xbc2>
100180ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100180d0:	9a07      	ldr	r2, [sp, #28]
100180d2:	681b      	ldr	r3, [r3, #0]
100180d4:	601a      	str	r2, [r3, #0]
100180d6:	17d2      	asrs	r2, r2, #31
100180d8:	605a      	str	r2, [r3, #4]
100180da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100180dc:	3304      	adds	r3, #4
100180de:	930a      	str	r3, [sp, #40]	@ 0x28
100180e0:	e4d5      	b.n	10017a8e <_vfiprintf_r+0x86>
100180e2:	9b02      	ldr	r3, [sp, #8]
100180e4:	7822      	ldrb	r2, [r4, #0]
100180e6:	f043 0301 	orr.w	r3, r3, #1
100180ea:	9302      	str	r3, [sp, #8]
100180ec:	e4f4      	b.n	10017ad8 <_vfiprintf_r+0xd0>
100180ee:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
100180f2:	7822      	ldrb	r2, [r4, #0]
100180f4:	2b00      	cmp	r3, #0
100180f6:	f47f acef 	bne.w	10017ad8 <_vfiprintf_r+0xd0>
100180fa:	2320      	movs	r3, #32
100180fc:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10018100:	e4ea      	b.n	10017ad8 <_vfiprintf_r+0xd0>
10018102:	9b02      	ldr	r3, [sp, #8]
10018104:	7822      	ldrb	r2, [r4, #0]
10018106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001810a:	9302      	str	r3, [sp, #8]
1001810c:	e4e4      	b.n	10017ad8 <_vfiprintf_r+0xd0>
1001810e:	4621      	mov	r1, r4
10018110:	f811 2b01 	ldrb.w	r2, [r1], #1
10018114:	2a2a      	cmp	r2, #42	@ 0x2a
10018116:	f000 8433 	beq.w	10018980 <_vfiprintf_r+0xf78>
1001811a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
1001811e:	2b09      	cmp	r3, #9
10018120:	460c      	mov	r4, r1
10018122:	f200 83f6 	bhi.w	10018912 <_vfiprintf_r+0xf0a>
10018126:	2200      	movs	r2, #0
10018128:	4611      	mov	r1, r2
1001812a:	f814 2b01 	ldrb.w	r2, [r4], #1
1001812e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
10018132:	eb03 0141 	add.w	r1, r3, r1, lsl #1
10018136:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
1001813a:	2b09      	cmp	r3, #9
1001813c:	d9f5      	bls.n	1001812a <_vfiprintf_r+0x722>
1001813e:	9105      	str	r1, [sp, #20]
10018140:	e4cb      	b.n	10017ada <_vfiprintf_r+0xd2>
10018142:	232b      	movs	r3, #43	@ 0x2b
10018144:	7822      	ldrb	r2, [r4, #0]
10018146:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
1001814a:	e4c5      	b.n	10017ad8 <_vfiprintf_r+0xd0>
1001814c:	7822      	ldrb	r2, [r4, #0]
1001814e:	9b02      	ldr	r3, [sp, #8]
10018150:	2a6c      	cmp	r2, #108	@ 0x6c
10018152:	f000 8336 	beq.w	100187c2 <_vfiprintf_r+0xdba>
10018156:	f043 0310 	orr.w	r3, r3, #16
1001815a:	9302      	str	r3, [sp, #8]
1001815c:	e4bc      	b.n	10017ad8 <_vfiprintf_r+0xd0>
1001815e:	222d      	movs	r2, #45	@ 0x2d
10018160:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
10018164:	9a05      	ldr	r2, [sp, #20]
10018166:	425b      	negs	r3, r3
10018168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1001816c:	3201      	adds	r2, #1
1001816e:	d003      	beq.n	10018178 <_vfiprintf_r+0x770>
10018170:	9a02      	ldr	r2, [sp, #8]
10018172:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
10018176:	9202      	str	r2, [sp, #8]
10018178:	2b0a      	cmp	r3, #10
1001817a:	f171 0200 	sbcs.w	r2, r1, #0
1001817e:	f080 82bd 	bcs.w	100186fc <_vfiprintf_r+0xcf4>
10018182:	3330      	adds	r3, #48	@ 0x30
10018184:	b2db      	uxtb	r3, r3
10018186:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
1001818a:	9b05      	ldr	r3, [sp, #20]
1001818c:	2b01      	cmp	r3, #1
1001818e:	bfb8      	it	lt
10018190:	2301      	movlt	r3, #1
10018192:	9304      	str	r3, [sp, #16]
10018194:	2301      	movs	r3, #1
10018196:	9309      	str	r3, [sp, #36]	@ 0x24
10018198:	f20d 1417 	addw	r4, sp, #279	@ 0x117
1001819c:	2300      	movs	r3, #0
1001819e:	930b      	str	r3, [sp, #44]	@ 0x2c
100181a0:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
100181a4:	2b00      	cmp	r3, #0
100181a6:	f43f adae 	beq.w	10017d06 <_vfiprintf_r+0x2fe>
100181aa:	9b04      	ldr	r3, [sp, #16]
100181ac:	3301      	adds	r3, #1
100181ae:	9304      	str	r3, [sp, #16]
100181b0:	e5a9      	b.n	10017d06 <_vfiprintf_r+0x2fe>
100181b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100181b4:	941d      	str	r4, [sp, #116]	@ 0x74
100181b6:	2201      	movs	r2, #1
100181b8:	931e      	str	r3, [sp, #120]	@ 0x78
100181ba:	931c      	str	r3, [sp, #112]	@ 0x70
100181bc:	921b      	str	r2, [sp, #108]	@ 0x6c
100181be:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100181c2:	f109 0908 	add.w	r9, r9, #8
100181c6:	e60c      	b.n	10017de2 <_vfiprintf_r+0x3da>
100181c8:	9b08      	ldr	r3, [sp, #32]
100181ca:	9804      	ldr	r0, [sp, #16]
100181cc:	1a1d      	subs	r5, r3, r0
100181ce:	2d00      	cmp	r5, #0
100181d0:	f77f ade7 	ble.w	10017da2 <_vfiprintf_r+0x39a>
100181d4:	2d10      	cmp	r5, #16
100181d6:	f340 83cb 	ble.w	10018970 <_vfiprintf_r+0xf68>
100181da:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 10018390 <_vfiprintf_r+0x988>
100181de:	4643      	mov	r3, r8
100181e0:	2610      	movs	r6, #16
100181e2:	46a0      	mov	r8, r4
100181e4:	4661      	mov	r1, ip
100181e6:	461c      	mov	r4, r3
100181e8:	e007      	b.n	100181fa <_vfiprintf_r+0x7f2>
100181ea:	f102 0c02 	add.w	ip, r2, #2
100181ee:	f109 0908 	add.w	r9, r9, #8
100181f2:	4602      	mov	r2, r0
100181f4:	3d10      	subs	r5, #16
100181f6:	2d10      	cmp	r5, #16
100181f8:	dd1a      	ble.n	10018230 <_vfiprintf_r+0x828>
100181fa:	1c50      	adds	r0, r2, #1
100181fc:	3110      	adds	r1, #16
100181fe:	2807      	cmp	r0, #7
10018200:	e9c9 4600 	strd	r4, r6, [r9]
10018204:	e9cd 011b 	strd	r0, r1, [sp, #108]	@ 0x6c
10018208:	ddef      	ble.n	100181ea <_vfiprintf_r+0x7e2>
1001820a:	aa1a      	add	r2, sp, #104	@ 0x68
1001820c:	2900      	cmp	r1, #0
1001820e:	d07c      	beq.n	1001830a <_vfiprintf_r+0x902>
10018210:	9903      	ldr	r1, [sp, #12]
10018212:	4658      	mov	r0, fp
10018214:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10018218:	f7ff fbb0 	bl	1001797c <__sprint_r.part.0>
1001821c:	2800      	cmp	r0, #0
1001821e:	f47f ad4b 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
10018222:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
10018226:	3d10      	subs	r5, #16
10018228:	2d10      	cmp	r5, #16
1001822a:	f102 0c01 	add.w	ip, r2, #1
1001822e:	dce4      	bgt.n	100181fa <_vfiprintf_r+0x7f2>
10018230:	4623      	mov	r3, r4
10018232:	4660      	mov	r0, ip
10018234:	4644      	mov	r4, r8
10018236:	468c      	mov	ip, r1
10018238:	4698      	mov	r8, r3
1001823a:	44ac      	add	ip, r5
1001823c:	2807      	cmp	r0, #7
1001823e:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	@ 0x6c
10018242:	f8c9 8000 	str.w	r8, [r9]
10018246:	f8c9 5004 	str.w	r5, [r9, #4]
1001824a:	f340 81a3 	ble.w	10018594 <_vfiprintf_r+0xb8c>
1001824e:	f1bc 0f00 	cmp.w	ip, #0
10018252:	f000 8327 	beq.w	100188a4 <_vfiprintf_r+0xe9c>
10018256:	9903      	ldr	r1, [sp, #12]
10018258:	aa1a      	add	r2, sp, #104	@ 0x68
1001825a:	4658      	mov	r0, fp
1001825c:	f7ff fb8e 	bl	1001797c <__sprint_r.part.0>
10018260:	2800      	cmp	r0, #0
10018262:	f47f ad29 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
10018266:	9b05      	ldr	r3, [sp, #20]
10018268:	9809      	ldr	r0, [sp, #36]	@ 0x24
1001826a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
1001826e:	1a1d      	subs	r5, r3, r0
10018270:	2d00      	cmp	r5, #0
10018272:	f102 0101 	add.w	r1, r2, #1
10018276:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001827a:	f77f ad98 	ble.w	10017dae <_vfiprintf_r+0x3a6>
1001827e:	2d10      	cmp	r5, #16
10018280:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 10018390 <_vfiprintf_r+0x988>
10018284:	dd2d      	ble.n	100182e2 <_vfiprintf_r+0x8da>
10018286:	462b      	mov	r3, r5
10018288:	2610      	movs	r6, #16
1001828a:	4625      	mov	r5, r4
1001828c:	4660      	mov	r0, ip
1001828e:	461c      	mov	r4, r3
10018290:	e007      	b.n	100182a2 <_vfiprintf_r+0x89a>
10018292:	f102 0c02 	add.w	ip, r2, #2
10018296:	f109 0908 	add.w	r9, r9, #8
1001829a:	460a      	mov	r2, r1
1001829c:	3c10      	subs	r4, #16
1001829e:	2c10      	cmp	r4, #16
100182a0:	dd1a      	ble.n	100182d8 <_vfiprintf_r+0x8d0>
100182a2:	1c51      	adds	r1, r2, #1
100182a4:	4b3a      	ldr	r3, [pc, #232]	@ (10018390 <_vfiprintf_r+0x988>)
100182a6:	3010      	adds	r0, #16
100182a8:	2907      	cmp	r1, #7
100182aa:	e9c9 3600 	strd	r3, r6, [r9]
100182ae:	e9cd 101b 	strd	r1, r0, [sp, #108]	@ 0x6c
100182b2:	ddee      	ble.n	10018292 <_vfiprintf_r+0x88a>
100182b4:	aa1a      	add	r2, sp, #104	@ 0x68
100182b6:	b310      	cbz	r0, 100182fe <_vfiprintf_r+0x8f6>
100182b8:	9903      	ldr	r1, [sp, #12]
100182ba:	4658      	mov	r0, fp
100182bc:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100182c0:	f7ff fb5c 	bl	1001797c <__sprint_r.part.0>
100182c4:	2800      	cmp	r0, #0
100182c6:	f47f acf7 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
100182ca:	e9dd 201b 	ldrd	r2, r0, [sp, #108]	@ 0x6c
100182ce:	3c10      	subs	r4, #16
100182d0:	2c10      	cmp	r4, #16
100182d2:	f102 0c01 	add.w	ip, r2, #1
100182d6:	dce4      	bgt.n	100182a2 <_vfiprintf_r+0x89a>
100182d8:	4623      	mov	r3, r4
100182da:	4661      	mov	r1, ip
100182dc:	462c      	mov	r4, r5
100182de:	4684      	mov	ip, r0
100182e0:	461d      	mov	r5, r3
100182e2:	44ac      	add	ip, r5
100182e4:	2907      	cmp	r1, #7
100182e6:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
100182ea:	f8c9 8000 	str.w	r8, [r9]
100182ee:	f8c9 5004 	str.w	r5, [r9, #4]
100182f2:	f300 80ec 	bgt.w	100184ce <_vfiprintf_r+0xac6>
100182f6:	f109 0908 	add.w	r9, r9, #8
100182fa:	3101      	adds	r1, #1
100182fc:	e557      	b.n	10017dae <_vfiprintf_r+0x3a6>
100182fe:	f04f 0c01 	mov.w	ip, #1
10018302:	4602      	mov	r2, r0
10018304:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10018308:	e7c8      	b.n	1001829c <_vfiprintf_r+0x894>
1001830a:	f04f 0c01 	mov.w	ip, #1
1001830e:	460a      	mov	r2, r1
10018310:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10018314:	e76e      	b.n	100181f4 <_vfiprintf_r+0x7ec>
10018316:	f1bc 0f00 	cmp.w	ip, #0
1001831a:	d00f      	beq.n	1001833c <_vfiprintf_r+0x934>
1001831c:	9903      	ldr	r1, [sp, #12]
1001831e:	9311      	str	r3, [sp, #68]	@ 0x44
10018320:	aa1a      	add	r2, sp, #104	@ 0x68
10018322:	4658      	mov	r0, fp
10018324:	f7ff fb2a 	bl	1001797c <__sprint_r.part.0>
10018328:	2800      	cmp	r0, #0
1001832a:	f47f acc5 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
1001832e:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
10018332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10018334:	1c51      	adds	r1, r2, #1
10018336:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001833a:	e50f      	b.n	10017d5c <_vfiprintf_r+0x354>
1001833c:	2b00      	cmp	r3, #0
1001833e:	f000 8155 	beq.w	100185ec <_vfiprintf_r+0xbe4>
10018342:	2302      	movs	r3, #2
10018344:	931e      	str	r3, [sp, #120]	@ 0x78
10018346:	469c      	mov	ip, r3
10018348:	ab13      	add	r3, sp, #76	@ 0x4c
1001834a:	931d      	str	r3, [sp, #116]	@ 0x74
1001834c:	2101      	movs	r1, #1
1001834e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10018352:	460a      	mov	r2, r1
10018354:	f109 0908 	add.w	r9, r9, #8
10018358:	3101      	adds	r1, #1
1001835a:	e51e      	b.n	10017d9a <_vfiprintf_r+0x392>
1001835c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1001835e:	ac46      	add	r4, sp, #280	@ 0x118
10018360:	f003 020f 	and.w	r2, r3, #15
10018364:	091b      	lsrs	r3, r3, #4
10018366:	5c82      	ldrb	r2, [r0, r2]
10018368:	f804 2d01 	strb.w	r2, [r4, #-1]!
1001836c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
10018370:	0909      	lsrs	r1, r1, #4
10018372:	ea53 0201 	orrs.w	r2, r3, r1
10018376:	d1f3      	bne.n	10018360 <_vfiprintf_r+0x958>
10018378:	9a05      	ldr	r2, [sp, #20]
1001837a:	ab46      	add	r3, sp, #280	@ 0x118
1001837c:	1b1b      	subs	r3, r3, r4
1001837e:	429a      	cmp	r2, r3
10018380:	bfb8      	it	lt
10018382:	461a      	movlt	r2, r3
10018384:	9309      	str	r3, [sp, #36]	@ 0x24
10018386:	9204      	str	r2, [sp, #16]
10018388:	e708      	b.n	1001819c <_vfiprintf_r+0x794>
1001838a:	bf00      	nop
1001838c:	1002c150 	.word	0x1002c150
10018390:	1002c1a4 	.word	0x1002c1a4
10018394:	2d10      	cmp	r5, #16
10018396:	f340 82c0 	ble.w	1001891a <_vfiprintf_r+0xf12>
1001839a:	4eae      	ldr	r6, [pc, #696]	@ (10018654 <_vfiprintf_r+0xc4c>)
1001839c:	9311      	str	r3, [sp, #68]	@ 0x44
1001839e:	4649      	mov	r1, r9
100183a0:	f04f 0810 	mov.w	r8, #16
100183a4:	46a1      	mov	r9, r4
100183a6:	4634      	mov	r4, r6
100183a8:	4666      	mov	r6, ip
100183aa:	e007      	b.n	100183bc <_vfiprintf_r+0x9b4>
100183ac:	f102 0e02 	add.w	lr, r2, #2
100183b0:	3108      	adds	r1, #8
100183b2:	4602      	mov	r2, r0
100183b4:	3d10      	subs	r5, #16
100183b6:	2d10      	cmp	r5, #16
100183b8:	dd18      	ble.n	100183ec <_vfiprintf_r+0x9e4>
100183ba:	1c50      	adds	r0, r2, #1
100183bc:	3610      	adds	r6, #16
100183be:	2807      	cmp	r0, #7
100183c0:	e9c1 4800 	strd	r4, r8, [r1]
100183c4:	e9cd 061b 	strd	r0, r6, [sp, #108]	@ 0x6c
100183c8:	ddf0      	ble.n	100183ac <_vfiprintf_r+0x9a4>
100183ca:	9903      	ldr	r1, [sp, #12]
100183cc:	aa1a      	add	r2, sp, #104	@ 0x68
100183ce:	4658      	mov	r0, fp
100183d0:	b316      	cbz	r6, 10018418 <_vfiprintf_r+0xa10>
100183d2:	f7ff fad3 	bl	1001797c <__sprint_r.part.0>
100183d6:	2800      	cmp	r0, #0
100183d8:	f47f ac6e 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
100183dc:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	@ 0x6c
100183e0:	3d10      	subs	r5, #16
100183e2:	2d10      	cmp	r5, #16
100183e4:	f102 0e01 	add.w	lr, r2, #1
100183e8:	a91d      	add	r1, sp, #116	@ 0x74
100183ea:	dce6      	bgt.n	100183ba <_vfiprintf_r+0x9b2>
100183ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100183ee:	46b4      	mov	ip, r6
100183f0:	4626      	mov	r6, r4
100183f2:	464c      	mov	r4, r9
100183f4:	4689      	mov	r9, r1
100183f6:	44ac      	add	ip, r5
100183f8:	f1be 0f07 	cmp.w	lr, #7
100183fc:	e9cd ec1b 	strd	lr, ip, [sp, #108]	@ 0x6c
10018400:	f8c9 6000 	str.w	r6, [r9]
10018404:	f8c9 5004 	str.w	r5, [r9, #4]
10018408:	f300 809a 	bgt.w	10018540 <_vfiprintf_r+0xb38>
1001840c:	f109 0908 	add.w	r9, r9, #8
10018410:	f10e 0101 	add.w	r1, lr, #1
10018414:	4672      	mov	r2, lr
10018416:	e48c      	b.n	10017d32 <_vfiprintf_r+0x32a>
10018418:	4632      	mov	r2, r6
1001841a:	f04f 0e01 	mov.w	lr, #1
1001841e:	a91d      	add	r1, sp, #116	@ 0x74
10018420:	e7c8      	b.n	100183b4 <_vfiprintf_r+0x9ac>
10018422:	9a02      	ldr	r2, [sp, #8]
10018424:	931b      	str	r3, [sp, #108]	@ 0x6c
10018426:	0754      	lsls	r4, r2, #29
10018428:	d548      	bpl.n	100184bc <_vfiprintf_r+0xab4>
1001842a:	9a08      	ldr	r2, [sp, #32]
1001842c:	9904      	ldr	r1, [sp, #16]
1001842e:	1a54      	subs	r4, r2, r1
10018430:	2c00      	cmp	r4, #0
10018432:	dd43      	ble.n	100184bc <_vfiprintf_r+0xab4>
10018434:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10018438:	2c10      	cmp	r4, #16
1001843a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1001843c:	f340 827c 	ble.w	10018938 <_vfiprintf_r+0xf30>
10018440:	4e84      	ldr	r6, [pc, #528]	@ (10018654 <_vfiprintf_r+0xc4c>)
10018442:	f8dd 800c 	ldr.w	r8, [sp, #12]
10018446:	2510      	movs	r5, #16
10018448:	e006      	b.n	10018458 <_vfiprintf_r+0xa50>
1001844a:	1c88      	adds	r0, r1, #2
1001844c:	f109 0908 	add.w	r9, r9, #8
10018450:	4611      	mov	r1, r2
10018452:	3c10      	subs	r4, #16
10018454:	2c10      	cmp	r4, #16
10018456:	dd19      	ble.n	1001848c <_vfiprintf_r+0xa84>
10018458:	1c4a      	adds	r2, r1, #1
1001845a:	3310      	adds	r3, #16
1001845c:	2a07      	cmp	r2, #7
1001845e:	e9c9 6500 	strd	r6, r5, [r9]
10018462:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
10018466:	ddf0      	ble.n	1001844a <_vfiprintf_r+0xa42>
10018468:	aa1a      	add	r2, sp, #104	@ 0x68
1001846a:	b313      	cbz	r3, 100184b2 <_vfiprintf_r+0xaaa>
1001846c:	4641      	mov	r1, r8
1001846e:	4658      	mov	r0, fp
10018470:	f7ff fa84 	bl	1001797c <__sprint_r.part.0>
10018474:	2800      	cmp	r0, #0
10018476:	f47f ac1f 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
1001847a:	e9dd 131b 	ldrd	r1, r3, [sp, #108]	@ 0x6c
1001847e:	3c10      	subs	r4, #16
10018480:	2c10      	cmp	r4, #16
10018482:	f101 0001 	add.w	r0, r1, #1
10018486:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001848a:	dce5      	bgt.n	10018458 <_vfiprintf_r+0xa50>
1001848c:	4423      	add	r3, r4
1001848e:	2807      	cmp	r0, #7
10018490:	e9c9 6400 	strd	r6, r4, [r9]
10018494:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
10018498:	f77f acac 	ble.w	10017df4 <_vfiprintf_r+0x3ec>
1001849c:	b173      	cbz	r3, 100184bc <_vfiprintf_r+0xab4>
1001849e:	9903      	ldr	r1, [sp, #12]
100184a0:	aa1a      	add	r2, sp, #104	@ 0x68
100184a2:	4658      	mov	r0, fp
100184a4:	f7ff fa6a 	bl	1001797c <__sprint_r.part.0>
100184a8:	2800      	cmp	r0, #0
100184aa:	f47f ac05 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
100184ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
100184b0:	e4a0      	b.n	10017df4 <_vfiprintf_r+0x3ec>
100184b2:	2001      	movs	r0, #1
100184b4:	4619      	mov	r1, r3
100184b6:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100184ba:	e7ca      	b.n	10018452 <_vfiprintf_r+0xa4a>
100184bc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
100184c0:	9904      	ldr	r1, [sp, #16]
100184c2:	428a      	cmp	r2, r1
100184c4:	bfac      	ite	ge
100184c6:	189b      	addge	r3, r3, r2
100184c8:	185b      	addlt	r3, r3, r1
100184ca:	9307      	str	r3, [sp, #28]
100184cc:	e49d      	b.n	10017e0a <_vfiprintf_r+0x402>
100184ce:	f1bc 0f00 	cmp.w	ip, #0
100184d2:	f43f ae6e 	beq.w	100181b2 <_vfiprintf_r+0x7aa>
100184d6:	9903      	ldr	r1, [sp, #12]
100184d8:	aa1a      	add	r2, sp, #104	@ 0x68
100184da:	4658      	mov	r0, fp
100184dc:	f7ff fa4e 	bl	1001797c <__sprint_r.part.0>
100184e0:	2800      	cmp	r0, #0
100184e2:	f47f abe9 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
100184e6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
100184e8:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
100184ec:	3101      	adds	r1, #1
100184ee:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100184f2:	e45c      	b.n	10017dae <_vfiprintf_r+0x3a6>
100184f4:	921b      	str	r2, [sp, #108]	@ 0x6c
100184f6:	f7ff bbd4 	b.w	10017ca2 <_vfiprintf_r+0x29a>
100184fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100184fc:	f852 3b04 	ldr.w	r3, [r2], #4
10018500:	920a      	str	r2, [sp, #40]	@ 0x28
10018502:	f014 0210 	ands.w	r2, r4, #16
10018506:	f47f ad76 	bne.w	10017ff6 <_vfiprintf_r+0x5ee>
1001850a:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
1001850e:	f000 816e 	beq.w	100187ee <_vfiprintf_r+0xde6>
10018512:	b29b      	uxth	r3, r3
10018514:	4611      	mov	r1, r2
10018516:	e56e      	b.n	10017ff6 <_vfiprintf_r+0x5ee>
10018518:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001851a:	f850 3b04 	ldr.w	r3, [r0], #4
1001851e:	900a      	str	r0, [sp, #40]	@ 0x28
10018520:	f012 0010 	ands.w	r0, r2, #16
10018524:	f47f ad1a 	bne.w	10017f5c <_vfiprintf_r+0x554>
10018528:	f012 0440 	ands.w	r4, r2, #64	@ 0x40
1001852c:	f000 8167 	beq.w	100187fe <_vfiprintf_r+0xdf6>
10018530:	b29b      	uxth	r3, r3
10018532:	4601      	mov	r1, r0
10018534:	e512      	b.n	10017f5c <_vfiprintf_r+0x554>
10018536:	2101      	movs	r1, #1
10018538:	4662      	mov	r2, ip
1001853a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001853e:	e42c      	b.n	10017d9a <_vfiprintf_r+0x392>
10018540:	f1bc 0f00 	cmp.w	ip, #0
10018544:	f000 8095 	beq.w	10018672 <_vfiprintf_r+0xc6a>
10018548:	9903      	ldr	r1, [sp, #12]
1001854a:	9311      	str	r3, [sp, #68]	@ 0x44
1001854c:	aa1a      	add	r2, sp, #104	@ 0x68
1001854e:	4658      	mov	r0, fp
10018550:	f7ff fa14 	bl	1001797c <__sprint_r.part.0>
10018554:	2800      	cmp	r0, #0
10018556:	f47f abaf 	bne.w	10017cb8 <_vfiprintf_r+0x2b0>
1001855a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
1001855e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10018560:	1c51      	adds	r1, r2, #1
10018562:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10018566:	f7ff bbe4 	b.w	10017d32 <_vfiprintf_r+0x32a>
1001856a:	9b05      	ldr	r3, [sp, #20]
1001856c:	9304      	str	r3, [sp, #16]
1001856e:	9309      	str	r3, [sp, #36]	@ 0x24
10018570:	ac46      	add	r4, sp, #280	@ 0x118
10018572:	e613      	b.n	1001819c <_vfiprintf_r+0x794>
10018574:	7822      	ldrb	r2, [r4, #0]
10018576:	930a      	str	r3, [sp, #40]	@ 0x28
10018578:	f7ff baae 	b.w	10017ad8 <_vfiprintf_r+0xd0>
1001857c:	9b05      	ldr	r3, [sp, #20]
1001857e:	9304      	str	r3, [sp, #16]
10018580:	ac46      	add	r4, sp, #280	@ 0x118
10018582:	e60b      	b.n	1001819c <_vfiprintf_r+0x794>
10018584:	9d03      	ldr	r5, [sp, #12]
10018586:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10018588:	f001 fd46 	bl	1001a018 <__retarget_lock_acquire_recursive>
1001858c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
10018590:	f7ff ba59 	b.w	10017a46 <_vfiprintf_r+0x3e>
10018594:	f109 0908 	add.w	r9, r9, #8
10018598:	1c41      	adds	r1, r0, #1
1001859a:	4602      	mov	r2, r0
1001859c:	e401      	b.n	10017da2 <_vfiprintf_r+0x39a>
1001859e:	9a02      	ldr	r2, [sp, #8]
100185a0:	0592      	lsls	r2, r2, #22
100185a2:	f100 8185 	bmi.w	100188b0 <_vfiprintf_r+0xea8>
100185a6:	17d9      	asrs	r1, r3, #31
100185a8:	460a      	mov	r2, r1
100185aa:	e49e      	b.n	10017eea <_vfiprintf_r+0x4e2>
100185ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100185ae:	7822      	ldrb	r2, [r4, #0]
100185b0:	2b00      	cmp	r3, #0
100185b2:	f43f aa91 	beq.w	10017ad8 <_vfiprintf_r+0xd0>
100185b6:	781b      	ldrb	r3, [r3, #0]
100185b8:	2b00      	cmp	r3, #0
100185ba:	f43f aa8d 	beq.w	10017ad8 <_vfiprintf_r+0xd0>
100185be:	9b02      	ldr	r3, [sp, #8]
100185c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100185c4:	9302      	str	r3, [sp, #8]
100185c6:	f7ff ba87 	b.w	10017ad8 <_vfiprintf_r+0xd0>
100185ca:	9b02      	ldr	r3, [sp, #8]
100185cc:	06dd      	lsls	r5, r3, #27
100185ce:	f100 80ff 	bmi.w	100187d0 <_vfiprintf_r+0xdc8>
100185d2:	9b02      	ldr	r3, [sp, #8]
100185d4:	065c      	lsls	r4, r3, #25
100185d6:	f100 8177 	bmi.w	100188c8 <_vfiprintf_r+0xec0>
100185da:	9b02      	ldr	r3, [sp, #8]
100185dc:	0598      	lsls	r0, r3, #22
100185de:	f140 80f7 	bpl.w	100187d0 <_vfiprintf_r+0xdc8>
100185e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100185e4:	9a07      	ldr	r2, [sp, #28]
100185e6:	681b      	ldr	r3, [r3, #0]
100185e8:	701a      	strb	r2, [r3, #0]
100185ea:	e576      	b.n	100180da <_vfiprintf_r+0x6d2>
100185ec:	4662      	mov	r2, ip
100185ee:	2101      	movs	r1, #1
100185f0:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100185f4:	f7ff bbd1 	b.w	10017d9a <_vfiprintf_r+0x392>
100185f8:	9406      	str	r4, [sp, #24]
100185fa:	9c02      	ldr	r4, [sp, #8]
100185fc:	e4ee      	b.n	10017fdc <_vfiprintf_r+0x5d4>
100185fe:	9a02      	ldr	r2, [sp, #8]
10018600:	9406      	str	r4, [sp, #24]
10018602:	e49e      	b.n	10017f42 <_vfiprintf_r+0x53a>
10018604:	4b14      	ldr	r3, [pc, #80]	@ (10018658 <_vfiprintf_r+0xc50>)
10018606:	9406      	str	r4, [sp, #24]
10018608:	930d      	str	r3, [sp, #52]	@ 0x34
1001860a:	9b02      	ldr	r3, [sp, #8]
1001860c:	f013 0120 	ands.w	r1, r3, #32
10018610:	d064      	beq.n	100186dc <_vfiprintf_r+0xcd4>
10018612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10018614:	3307      	adds	r3, #7
10018616:	f023 0307 	bic.w	r3, r3, #7
1001861a:	4618      	mov	r0, r3
1001861c:	6859      	ldr	r1, [r3, #4]
1001861e:	f850 3b08 	ldr.w	r3, [r0], #8
10018622:	900a      	str	r0, [sp, #40]	@ 0x28
10018624:	9c02      	ldr	r4, [sp, #8]
10018626:	07e6      	lsls	r6, r4, #31
10018628:	d50a      	bpl.n	10018640 <_vfiprintf_r+0xc38>
1001862a:	ea53 0001 	orrs.w	r0, r3, r1
1001862e:	d007      	beq.n	10018640 <_vfiprintf_r+0xc38>
10018630:	f88d 204d 	strb.w	r2, [sp, #77]	@ 0x4d
10018634:	f044 0202 	orr.w	r2, r4, #2
10018638:	9202      	str	r2, [sp, #8]
1001863a:	2230      	movs	r2, #48	@ 0x30
1001863c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
10018640:	9a02      	ldr	r2, [sp, #8]
10018642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
10018646:	9202      	str	r2, [sp, #8]
10018648:	e52b      	b.n	100180a2 <_vfiprintf_r+0x69a>
1001864a:	4b04      	ldr	r3, [pc, #16]	@ (1001865c <_vfiprintf_r+0xc54>)
1001864c:	9406      	str	r4, [sp, #24]
1001864e:	930d      	str	r3, [sp, #52]	@ 0x34
10018650:	e7db      	b.n	1001860a <_vfiprintf_r+0xc02>
10018652:	bf00      	nop
10018654:	1002c1b4 	.word	0x1002c1b4
10018658:	1002c164 	.word	0x1002c164
1001865c:	1002c150 	.word	0x1002c150
10018660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10018662:	681b      	ldr	r3, [r3, #0]
10018664:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
10018668:	2301      	movs	r3, #1
1001866a:	9304      	str	r3, [sp, #16]
1001866c:	9309      	str	r3, [sp, #36]	@ 0x24
1001866e:	ac2d      	add	r4, sp, #180	@ 0xb4
10018670:	e428      	b.n	10017ec4 <_vfiprintf_r+0x4bc>
10018672:	f89d 204b 	ldrb.w	r2, [sp, #75]	@ 0x4b
10018676:	2a00      	cmp	r2, #0
10018678:	f000 8120 	beq.w	100188bc <_vfiprintf_r+0xeb4>
1001867c:	2101      	movs	r1, #1
1001867e:	f10d 024b 	add.w	r2, sp, #75	@ 0x4b
10018682:	911e      	str	r1, [sp, #120]	@ 0x78
10018684:	921d      	str	r2, [sp, #116]	@ 0x74
10018686:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001868a:	468c      	mov	ip, r1
1001868c:	f7ff bb62 	b.w	10017d54 <_vfiprintf_r+0x34c>
10018690:	2208      	movs	r2, #8
10018692:	2100      	movs	r1, #0
10018694:	a818      	add	r0, sp, #96	@ 0x60
10018696:	9415      	str	r4, [sp, #84]	@ 0x54
10018698:	f001 f9d0 	bl	10019a3c <memset>
1001869c:	f8dd 8014 	ldr.w	r8, [sp, #20]
100186a0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
100186a4:	f000 80b9 	beq.w	1001881a <_vfiprintf_r+0xe12>
100186a8:	2500      	movs	r5, #0
100186aa:	9404      	str	r4, [sp, #16]
100186ac:	462c      	mov	r4, r5
100186ae:	e00c      	b.n	100186ca <_vfiprintf_r+0xcc2>
100186b0:	a92d      	add	r1, sp, #180	@ 0xb4
100186b2:	4658      	mov	r0, fp
100186b4:	f001 fe10 	bl	1001a2d8 <_wcrtomb_r>
100186b8:	1c41      	adds	r1, r0, #1
100186ba:	4420      	add	r0, r4
100186bc:	f000 813f 	beq.w	1001893e <_vfiprintf_r+0xf36>
100186c0:	4540      	cmp	r0, r8
100186c2:	dc08      	bgt.n	100186d6 <_vfiprintf_r+0xcce>
100186c4:	f000 8158 	beq.w	10018978 <_vfiprintf_r+0xf70>
100186c8:	4604      	mov	r4, r0
100186ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100186cc:	5952      	ldr	r2, [r2, r5]
100186ce:	ab18      	add	r3, sp, #96	@ 0x60
100186d0:	3504      	adds	r5, #4
100186d2:	2a00      	cmp	r2, #0
100186d4:	d1ec      	bne.n	100186b0 <_vfiprintf_r+0xca8>
100186d6:	9409      	str	r4, [sp, #36]	@ 0x24
100186d8:	9c04      	ldr	r4, [sp, #16]
100186da:	e0ac      	b.n	10018836 <_vfiprintf_r+0xe2e>
100186dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
100186de:	f850 3b04 	ldr.w	r3, [r0], #4
100186e2:	900a      	str	r0, [sp, #40]	@ 0x28
100186e4:	9802      	ldr	r0, [sp, #8]
100186e6:	f010 0010 	ands.w	r0, r0, #16
100186ea:	d19b      	bne.n	10018624 <_vfiprintf_r+0xc1c>
100186ec:	9902      	ldr	r1, [sp, #8]
100186ee:	f011 0440 	ands.w	r4, r1, #64	@ 0x40
100186f2:	f000 808b 	beq.w	1001880c <_vfiprintf_r+0xe04>
100186f6:	b29b      	uxth	r3, r3
100186f8:	4601      	mov	r1, r0
100186fa:	e793      	b.n	10018624 <_vfiprintf_r+0xc1c>
100186fc:	9a02      	ldr	r2, [sp, #8]
100186fe:	f8cd 9010 	str.w	r9, [sp, #16]
10018702:	ac46      	add	r4, sp, #280	@ 0x118
10018704:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
10018708:	46a1      	mov	r9, r4
1001870a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
1001870e:	4ea5      	ldr	r6, [pc, #660]	@ (100189a4 <_vfiprintf_r+0xf9c>)
10018710:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
10018714:	f04f 0c00 	mov.w	ip, #0
10018718:	4614      	mov	r4, r2
1001871a:	e005      	b.n	10018728 <_vfiprintf_r+0xd20>
1001871c:	2b0a      	cmp	r3, #10
1001871e:	f171 0100 	sbcs.w	r1, r1, #0
10018722:	d336      	bcc.n	10018792 <_vfiprintf_r+0xd8a>
10018724:	4643      	mov	r3, r8
10018726:	4629      	mov	r1, r5
10018728:	185a      	adds	r2, r3, r1
1001872a:	f142 0200 	adc.w	r2, r2, #0
1001872e:	fba6 0502 	umull	r0, r5, r6, r2
10018732:	f025 0003 	bic.w	r0, r5, #3
10018736:	eb00 0095 	add.w	r0, r0, r5, lsr #2
1001873a:	1a12      	subs	r2, r2, r0
1001873c:	1a98      	subs	r0, r3, r2
1001873e:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
10018742:	f161 0e00 	sbc.w	lr, r1, #0
10018746:	fb05 f500 	mul.w	r5, r5, r0
1001874a:	fb06 550e 	mla	r5, r6, lr, r5
1001874e:	fba0 8006 	umull	r8, r0, r0, r6
10018752:	4405      	add	r5, r0
10018754:	f008 0e01 	and.w	lr, r8, #1
10018758:	2005      	movs	r0, #5
1001875a:	fbae 0e00 	umull	r0, lr, lr, r0
1001875e:	1880      	adds	r0, r0, r2
10018760:	ea4f 0858 	mov.w	r8, r8, lsr #1
10018764:	3030      	adds	r0, #48	@ 0x30
10018766:	f809 0c01 	strb.w	r0, [r9, #-1]
1001876a:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
1001876e:	f10c 0c01 	add.w	ip, ip, #1
10018772:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
10018776:	086d      	lsrs	r5, r5, #1
10018778:	2c00      	cmp	r4, #0
1001877a:	d0cf      	beq.n	1001871c <_vfiprintf_r+0xd14>
1001877c:	f89b 2000 	ldrb.w	r2, [fp]
10018780:	4562      	cmp	r2, ip
10018782:	d1cb      	bne.n	1001871c <_vfiprintf_r+0xd14>
10018784:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
10018788:	d0c8      	beq.n	1001871c <_vfiprintf_r+0xd14>
1001878a:	2b0a      	cmp	r3, #10
1001878c:	f171 0100 	sbcs.w	r1, r1, #0
10018790:	d272      	bcs.n	10018878 <_vfiprintf_r+0xe70>
10018792:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
10018796:	464c      	mov	r4, r9
10018798:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
1001879c:	f8dd 9010 	ldr.w	r9, [sp, #16]
100187a0:	e5ea      	b.n	10018378 <_vfiprintf_r+0x970>
100187a2:	9202      	str	r2, [sp, #8]
100187a4:	e441      	b.n	1001802a <_vfiprintf_r+0x622>
100187a6:	9402      	str	r4, [sp, #8]
100187a8:	e4e6      	b.n	10018178 <_vfiprintf_r+0x770>
100187aa:	4658      	mov	r0, fp
100187ac:	f000 fd60 	bl	10019270 <__sinit>
100187b0:	f7ff b940 	b.w	10017a34 <_vfiprintf_r+0x2c>
100187b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
100187b8:	7862      	ldrb	r2, [r4, #1]
100187ba:	9302      	str	r3, [sp, #8]
100187bc:	3401      	adds	r4, #1
100187be:	f7ff b98b 	b.w	10017ad8 <_vfiprintf_r+0xd0>
100187c2:	f043 0320 	orr.w	r3, r3, #32
100187c6:	7862      	ldrb	r2, [r4, #1]
100187c8:	9302      	str	r3, [sp, #8]
100187ca:	3401      	adds	r4, #1
100187cc:	f7ff b984 	b.w	10017ad8 <_vfiprintf_r+0xd0>
100187d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100187d2:	9a07      	ldr	r2, [sp, #28]
100187d4:	681b      	ldr	r3, [r3, #0]
100187d6:	601a      	str	r2, [r3, #0]
100187d8:	e47f      	b.n	100180da <_vfiprintf_r+0x6d2>
100187da:	9b05      	ldr	r3, [sp, #20]
100187dc:	4c72      	ldr	r4, [pc, #456]	@ (100189a8 <_vfiprintf_r+0xfa0>)
100187de:	2b06      	cmp	r3, #6
100187e0:	bf28      	it	cs
100187e2:	2306      	movcs	r3, #6
100187e4:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
100187e8:	9304      	str	r3, [sp, #16]
100187ea:	f7ff ba89 	b.w	10017d00 <_vfiprintf_r+0x2f8>
100187ee:	f414 7100 	ands.w	r1, r4, #512	@ 0x200
100187f2:	f43f ac00 	beq.w	10017ff6 <_vfiprintf_r+0x5ee>
100187f6:	b2db      	uxtb	r3, r3
100187f8:	4601      	mov	r1, r0
100187fa:	f7ff bbfc 	b.w	10017ff6 <_vfiprintf_r+0x5ee>
100187fe:	f412 7100 	ands.w	r1, r2, #512	@ 0x200
10018802:	bf1c      	itt	ne
10018804:	b2db      	uxtbne	r3, r3
10018806:	4621      	movne	r1, r4
10018808:	f7ff bba8 	b.w	10017f5c <_vfiprintf_r+0x554>
1001880c:	9902      	ldr	r1, [sp, #8]
1001880e:	f411 7100 	ands.w	r1, r1, #512	@ 0x200
10018812:	bf1c      	itt	ne
10018814:	b2db      	uxtbne	r3, r3
10018816:	4621      	movne	r1, r4
10018818:	e704      	b.n	10018624 <_vfiprintf_r+0xc1c>
1001881a:	ab18      	add	r3, sp, #96	@ 0x60
1001881c:	9300      	str	r3, [sp, #0]
1001881e:	2300      	movs	r3, #0
10018820:	4619      	mov	r1, r3
10018822:	aa15      	add	r2, sp, #84	@ 0x54
10018824:	4658      	mov	r0, fp
10018826:	f001 fd7d 	bl	1001a324 <_wcsrtombs_r>
1001882a:	4603      	mov	r3, r0
1001882c:	3301      	adds	r3, #1
1001882e:	9009      	str	r0, [sp, #36]	@ 0x24
10018830:	f000 8085 	beq.w	1001893e <_vfiprintf_r+0xf36>
10018834:	9415      	str	r4, [sp, #84]	@ 0x54
10018836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10018838:	b373      	cbz	r3, 10018898 <_vfiprintf_r+0xe90>
1001883a:	2b63      	cmp	r3, #99	@ 0x63
1001883c:	dc49      	bgt.n	100188d2 <_vfiprintf_r+0xeca>
1001883e:	2300      	movs	r3, #0
10018840:	930b      	str	r3, [sp, #44]	@ 0x2c
10018842:	ac2d      	add	r4, sp, #180	@ 0xb4
10018844:	2208      	movs	r2, #8
10018846:	2100      	movs	r1, #0
10018848:	a818      	add	r0, sp, #96	@ 0x60
1001884a:	f001 f8f7 	bl	10019a3c <memset>
1001884e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
10018850:	ab18      	add	r3, sp, #96	@ 0x60
10018852:	9300      	str	r3, [sp, #0]
10018854:	aa15      	add	r2, sp, #84	@ 0x54
10018856:	462b      	mov	r3, r5
10018858:	4621      	mov	r1, r4
1001885a:	4658      	mov	r0, fp
1001885c:	f001 fd62 	bl	1001a324 <_wcsrtombs_r>
10018860:	4285      	cmp	r5, r0
10018862:	f040 8098 	bne.w	10018996 <_vfiprintf_r+0xf8e>
10018866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10018868:	960a      	str	r6, [sp, #40]	@ 0x28
1001886a:	2300      	movs	r3, #0
1001886c:	54a3      	strb	r3, [r4, r2]
1001886e:	9305      	str	r3, [sp, #20]
10018870:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
10018874:	9304      	str	r3, [sp, #16]
10018876:	e493      	b.n	100181a0 <_vfiprintf_r+0x798>
10018878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001887a:	9910      	ldr	r1, [sp, #64]	@ 0x40
1001887c:	eba9 0903 	sub.w	r9, r9, r3
10018880:	461a      	mov	r2, r3
10018882:	4648      	mov	r0, r9
10018884:	f001 f96e 	bl	10019b64 <strncpy>
10018888:	f89b 3001 	ldrb.w	r3, [fp, #1]
1001888c:	b10b      	cbz	r3, 10018892 <_vfiprintf_r+0xe8a>
1001888e:	f10b 0b01 	add.w	fp, fp, #1
10018892:	f04f 0c00 	mov.w	ip, #0
10018896:	e745      	b.n	10018724 <_vfiprintf_r+0xd1c>
10018898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001889a:	960a      	str	r6, [sp, #40]	@ 0x28
1001889c:	e9cd 3304 	strd	r3, r3, [sp, #16]
100188a0:	930b      	str	r3, [sp, #44]	@ 0x2c
100188a2:	e47d      	b.n	100181a0 <_vfiprintf_r+0x798>
100188a4:	2101      	movs	r1, #1
100188a6:	4662      	mov	r2, ip
100188a8:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100188ac:	f7ff ba79 	b.w	10017da2 <_vfiprintf_r+0x39a>
100188b0:	f343 11c0 	sbfx	r1, r3, #7, #1
100188b4:	460a      	mov	r2, r1
100188b6:	b25b      	sxtb	r3, r3
100188b8:	f7ff bb17 	b.w	10017eea <_vfiprintf_r+0x4e2>
100188bc:	4662      	mov	r2, ip
100188be:	2101      	movs	r1, #1
100188c0:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100188c4:	f7ff ba4a 	b.w	10017d5c <_vfiprintf_r+0x354>
100188c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100188ca:	9a07      	ldr	r2, [sp, #28]
100188cc:	681b      	ldr	r3, [r3, #0]
100188ce:	801a      	strh	r2, [r3, #0]
100188d0:	e403      	b.n	100180da <_vfiprintf_r+0x6d2>
100188d2:	1c59      	adds	r1, r3, #1
100188d4:	4658      	mov	r0, fp
100188d6:	f7fc ff1f 	bl	10015718 <_malloc_r>
100188da:	4604      	mov	r4, r0
100188dc:	2800      	cmp	r0, #0
100188de:	d02e      	beq.n	1001893e <_vfiprintf_r+0xf36>
100188e0:	900b      	str	r0, [sp, #44]	@ 0x2c
100188e2:	e7af      	b.n	10018844 <_vfiprintf_r+0xe3c>
100188e4:	6d88      	ldr	r0, [r1, #88]	@ 0x58
100188e6:	f001 fb99 	bl	1001a01c <__retarget_lock_release_recursive>
100188ea:	f7ff b99d 	b.w	10017c28 <_vfiprintf_r+0x220>
100188ee:	9b05      	ldr	r3, [sp, #20]
100188f0:	9304      	str	r3, [sp, #16]
100188f2:	9309      	str	r3, [sp, #36]	@ 0x24
100188f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100188f6:	960a      	str	r6, [sp, #40]	@ 0x28
100188f8:	9305      	str	r3, [sp, #20]
100188fa:	e451      	b.n	100181a0 <_vfiprintf_r+0x798>
100188fc:	4620      	mov	r0, r4
100188fe:	9505      	str	r5, [sp, #20]
10018900:	960a      	str	r6, [sp, #40]	@ 0x28
10018902:	f001 fc7d 	bl	1001a200 <strlen>
10018906:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
1001890a:	9009      	str	r0, [sp, #36]	@ 0x24
1001890c:	9304      	str	r3, [sp, #16]
1001890e:	950b      	str	r5, [sp, #44]	@ 0x2c
10018910:	e446      	b.n	100181a0 <_vfiprintf_r+0x798>
10018912:	2300      	movs	r3, #0
10018914:	9305      	str	r3, [sp, #20]
10018916:	f7ff b8e0 	b.w	10017ada <_vfiprintf_r+0xd2>
1001891a:	4e24      	ldr	r6, [pc, #144]	@ (100189ac <_vfiprintf_r+0xfa4>)
1001891c:	4686      	mov	lr, r0
1001891e:	e56a      	b.n	100183f6 <_vfiprintf_r+0x9ee>
10018920:	2330      	movs	r3, #48	@ 0x30
10018922:	e430      	b.n	10018186 <_vfiprintf_r+0x77e>
10018924:	9903      	ldr	r1, [sp, #12]
10018926:	aa1a      	add	r2, sp, #104	@ 0x68
10018928:	4658      	mov	r0, fp
1001892a:	f7ff f827 	bl	1001797c <__sprint_r.part.0>
1001892e:	2800      	cmp	r0, #0
10018930:	f43f a9a8 	beq.w	10017c84 <_vfiprintf_r+0x27c>
10018934:	f7ff b9c6 	b.w	10017cc4 <_vfiprintf_r+0x2bc>
10018938:	4e1c      	ldr	r6, [pc, #112]	@ (100189ac <_vfiprintf_r+0xfa4>)
1001893a:	1c48      	adds	r0, r1, #1
1001893c:	e5a6      	b.n	1001848c <_vfiprintf_r+0xa84>
1001893e:	9a03      	ldr	r2, [sp, #12]
10018940:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
10018944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10018948:	8193      	strh	r3, [r2, #12]
1001894a:	f7ff b9be 	b.w	10017cca <_vfiprintf_r+0x2c2>
1001894e:	9b03      	ldr	r3, [sp, #12]
10018950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10018952:	07d9      	lsls	r1, r3, #31
10018954:	d407      	bmi.n	10018966 <_vfiprintf_r+0xf5e>
10018956:	9b03      	ldr	r3, [sp, #12]
10018958:	899b      	ldrh	r3, [r3, #12]
1001895a:	059a      	lsls	r2, r3, #22
1001895c:	d403      	bmi.n	10018966 <_vfiprintf_r+0xf5e>
1001895e:	9b03      	ldr	r3, [sp, #12]
10018960:	6d98      	ldr	r0, [r3, #88]	@ 0x58
10018962:	f001 fb5b 	bl	1001a01c <__retarget_lock_release_recursive>
10018966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001896a:	9307      	str	r3, [sp, #28]
1001896c:	f7ff b9b5 	b.w	10017cda <_vfiprintf_r+0x2d2>
10018970:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 100189b0 <_vfiprintf_r+0xfa8>
10018974:	4608      	mov	r0, r1
10018976:	e460      	b.n	1001823a <_vfiprintf_r+0x832>
10018978:	e9dd 4304 	ldrd	r4, r3, [sp, #16]
1001897c:	9309      	str	r3, [sp, #36]	@ 0x24
1001897e:	e75a      	b.n	10018836 <_vfiprintf_r+0xe2e>
10018980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10018982:	7862      	ldrb	r2, [r4, #1]
10018984:	460c      	mov	r4, r1
10018986:	f853 1b04 	ldr.w	r1, [r3], #4
1001898a:	930a      	str	r3, [sp, #40]	@ 0x28
1001898c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
10018990:	9105      	str	r1, [sp, #20]
10018992:	f7ff b8a1 	b.w	10017ad8 <_vfiprintf_r+0xd0>
10018996:	9a03      	ldr	r2, [sp, #12]
10018998:	8993      	ldrh	r3, [r2, #12]
1001899a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001899e:	8193      	strh	r3, [r2, #12]
100189a0:	f7ff b98a 	b.w	10017cb8 <_vfiprintf_r+0x2b0>
100189a4:	cccccccd 	.word	0xcccccccd
100189a8:	1002c178 	.word	0x1002c178
100189ac:	1002c1b4 	.word	0x1002c1b4
100189b0:	1002c1a4 	.word	0x1002c1a4

100189b4 <__sbprintf>:
100189b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100189b6:	461f      	mov	r7, r3
100189b8:	898b      	ldrh	r3, [r1, #12]
100189ba:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
100189be:	f023 0302 	bic.w	r3, r3, #2
100189c2:	f8ad 300c 	strh.w	r3, [sp, #12]
100189c6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
100189c8:	9319      	str	r3, [sp, #100]	@ 0x64
100189ca:	89cb      	ldrh	r3, [r1, #14]
100189cc:	f8ad 300e 	strh.w	r3, [sp, #14]
100189d0:	69cb      	ldr	r3, [r1, #28]
100189d2:	9307      	str	r3, [sp, #28]
100189d4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
100189d6:	9309      	str	r3, [sp, #36]	@ 0x24
100189d8:	ab1a      	add	r3, sp, #104	@ 0x68
100189da:	9300      	str	r3, [sp, #0]
100189dc:	9304      	str	r3, [sp, #16]
100189de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
100189e2:	4615      	mov	r5, r2
100189e4:	4606      	mov	r6, r0
100189e6:	9302      	str	r3, [sp, #8]
100189e8:	9305      	str	r3, [sp, #20]
100189ea:	a816      	add	r0, sp, #88	@ 0x58
100189ec:	2300      	movs	r3, #0
100189ee:	460c      	mov	r4, r1
100189f0:	9306      	str	r3, [sp, #24]
100189f2:	f001 fb0d 	bl	1001a010 <__retarget_lock_init_recursive>
100189f6:	462a      	mov	r2, r5
100189f8:	463b      	mov	r3, r7
100189fa:	4669      	mov	r1, sp
100189fc:	4630      	mov	r0, r6
100189fe:	f7ff f803 	bl	10017a08 <_vfiprintf_r>
10018a02:	1e05      	subs	r5, r0, #0
10018a04:	db07      	blt.n	10018a16 <__sbprintf+0x62>
10018a06:	4669      	mov	r1, sp
10018a08:	4630      	mov	r0, r6
10018a0a:	f000 fab5 	bl	10018f78 <_fflush_r>
10018a0e:	2800      	cmp	r0, #0
10018a10:	bf18      	it	ne
10018a12:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10018a16:	f8bd 300c 	ldrh.w	r3, [sp, #12]
10018a1a:	065b      	lsls	r3, r3, #25
10018a1c:	d503      	bpl.n	10018a26 <__sbprintf+0x72>
10018a1e:	89a3      	ldrh	r3, [r4, #12]
10018a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10018a24:	81a3      	strh	r3, [r4, #12]
10018a26:	9816      	ldr	r0, [sp, #88]	@ 0x58
10018a28:	f001 faf4 	bl	1001a014 <__retarget_lock_close_recursive>
10018a2c:	4628      	mov	r0, r5
10018a2e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
10018a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

10018a34 <__malloc_lock>:
10018a34:	4801      	ldr	r0, [pc, #4]	@ (10018a3c <__malloc_lock+0x8>)
10018a36:	f001 baef 	b.w	1001a018 <__retarget_lock_acquire_recursive>
10018a3a:	bf00      	nop
10018a3c:	2000170c 	.word	0x2000170c

10018a40 <__malloc_unlock>:
10018a40:	4801      	ldr	r0, [pc, #4]	@ (10018a48 <__malloc_unlock+0x8>)
10018a42:	f001 baeb 	b.w	1001a01c <__retarget_lock_release_recursive>
10018a46:	bf00      	nop
10018a48:	2000170c 	.word	0x2000170c

10018a4c <_puts_r>:
10018a4c:	b570      	push	{r4, r5, r6, lr}
10018a4e:	4605      	mov	r5, r0
10018a50:	b088      	sub	sp, #32
10018a52:	4608      	mov	r0, r1
10018a54:	460c      	mov	r4, r1
10018a56:	f001 fbd3 	bl	1001a200 <strlen>
10018a5a:	4e21      	ldr	r6, [pc, #132]	@ (10018ae0 <_puts_r+0x94>)
10018a5c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
10018a5e:	9005      	str	r0, [sp, #20]
10018a60:	2101      	movs	r1, #1
10018a62:	1843      	adds	r3, r0, r1
10018a64:	e9cd 6106 	strd	r6, r1, [sp, #24]
10018a68:	a804      	add	r0, sp, #16
10018a6a:	2102      	movs	r1, #2
10018a6c:	9404      	str	r4, [sp, #16]
10018a6e:	9303      	str	r3, [sp, #12]
10018a70:	68ac      	ldr	r4, [r5, #8]
10018a72:	9001      	str	r0, [sp, #4]
10018a74:	9102      	str	r1, [sp, #8]
10018a76:	2a00      	cmp	r2, #0
10018a78:	d02e      	beq.n	10018ad8 <_puts_r+0x8c>
10018a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10018a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018a80:	07d6      	lsls	r6, r2, #31
10018a82:	d401      	bmi.n	10018a88 <_puts_r+0x3c>
10018a84:	0598      	lsls	r0, r3, #22
10018a86:	d521      	bpl.n	10018acc <_puts_r+0x80>
10018a88:	0499      	lsls	r1, r3, #18
10018a8a:	d406      	bmi.n	10018a9a <_puts_r+0x4e>
10018a8c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10018a8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
10018a92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
10018a96:	81a3      	strh	r3, [r4, #12]
10018a98:	6662      	str	r2, [r4, #100]	@ 0x64
10018a9a:	4628      	mov	r0, r5
10018a9c:	aa01      	add	r2, sp, #4
10018a9e:	4621      	mov	r1, r4
10018aa0:	f000 fc5c 	bl	1001935c <__sfvwrite_r>
10018aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018aa6:	2800      	cmp	r0, #0
10018aa8:	bf0c      	ite	eq
10018aaa:	250a      	moveq	r5, #10
10018aac:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10018ab0:	07da      	lsls	r2, r3, #31
10018ab2:	d402      	bmi.n	10018aba <_puts_r+0x6e>
10018ab4:	89a3      	ldrh	r3, [r4, #12]
10018ab6:	059b      	lsls	r3, r3, #22
10018ab8:	d502      	bpl.n	10018ac0 <_puts_r+0x74>
10018aba:	4628      	mov	r0, r5
10018abc:	b008      	add	sp, #32
10018abe:	bd70      	pop	{r4, r5, r6, pc}
10018ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018ac2:	f001 faab 	bl	1001a01c <__retarget_lock_release_recursive>
10018ac6:	4628      	mov	r0, r5
10018ac8:	b008      	add	sp, #32
10018aca:	bd70      	pop	{r4, r5, r6, pc}
10018acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018ace:	f001 faa3 	bl	1001a018 <__retarget_lock_acquire_recursive>
10018ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018ad6:	e7d7      	b.n	10018a88 <_puts_r+0x3c>
10018ad8:	4628      	mov	r0, r5
10018ada:	f000 fbc9 	bl	10019270 <__sinit>
10018ade:	e7cc      	b.n	10018a7a <_puts_r+0x2e>
10018ae0:	1002c1c4 	.word	0x1002c1c4

10018ae4 <puts>:
10018ae4:	4b02      	ldr	r3, [pc, #8]	@ (10018af0 <puts+0xc>)
10018ae6:	4601      	mov	r1, r0
10018ae8:	6818      	ldr	r0, [r3, #0]
10018aea:	f7ff bfaf 	b.w	10018a4c <_puts_r>
10018aee:	bf00      	nop
10018af0:	200005e0 	.word	0x200005e0

10018af4 <realloc>:
10018af4:	b410      	push	{r4}
10018af6:	4c04      	ldr	r4, [pc, #16]	@ (10018b08 <realloc+0x14>)
10018af8:	4603      	mov	r3, r0
10018afa:	460a      	mov	r2, r1
10018afc:	6820      	ldr	r0, [r4, #0]
10018afe:	bc10      	pop	{r4}
10018b00:	4619      	mov	r1, r3
10018b02:	f000 b803 	b.w	10018b0c <_realloc_r>
10018b06:	bf00      	nop
10018b08:	200005e0 	.word	0x200005e0

10018b0c <_realloc_r>:
10018b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10018b10:	4616      	mov	r6, r2
10018b12:	2900      	cmp	r1, #0
10018b14:	f000 8096 	beq.w	10018c44 <_realloc_r+0x138>
10018b18:	460c      	mov	r4, r1
10018b1a:	4680      	mov	r8, r0
10018b1c:	f106 050b 	add.w	r5, r6, #11
10018b20:	f7ff ff88 	bl	10018a34 <__malloc_lock>
10018b24:	f854 1c04 	ldr.w	r1, [r4, #-4]
10018b28:	2d16      	cmp	r5, #22
10018b2a:	f1a4 0908 	sub.w	r9, r4, #8
10018b2e:	f021 0703 	bic.w	r7, r1, #3
10018b32:	d858      	bhi.n	10018be6 <_realloc_r+0xda>
10018b34:	2510      	movs	r5, #16
10018b36:	42ae      	cmp	r6, r5
10018b38:	d858      	bhi.n	10018bec <_realloc_r+0xe0>
10018b3a:	42af      	cmp	r7, r5
10018b3c:	da60      	bge.n	10018c00 <_realloc_r+0xf4>
10018b3e:	4bbe      	ldr	r3, [pc, #760]	@ (10018e38 <_realloc_r+0x32c>)
10018b40:	689a      	ldr	r2, [r3, #8]
10018b42:	eb09 0c07 	add.w	ip, r9, r7
10018b46:	4562      	cmp	r2, ip
10018b48:	f8dc 0004 	ldr.w	r0, [ip, #4]
10018b4c:	f000 8090 	beq.w	10018c70 <_realloc_r+0x164>
10018b50:	f020 0301 	bic.w	r3, r0, #1
10018b54:	4463      	add	r3, ip
10018b56:	685b      	ldr	r3, [r3, #4]
10018b58:	07da      	lsls	r2, r3, #31
10018b5a:	d468      	bmi.n	10018c2e <_realloc_r+0x122>
10018b5c:	f020 0003 	bic.w	r0, r0, #3
10018b60:	183b      	adds	r3, r7, r0
10018b62:	429d      	cmp	r5, r3
10018b64:	dd47      	ble.n	10018bf6 <_realloc_r+0xea>
10018b66:	07cb      	lsls	r3, r1, #31
10018b68:	d412      	bmi.n	10018b90 <_realloc_r+0x84>
10018b6a:	f854 3c08 	ldr.w	r3, [r4, #-8]
10018b6e:	eba9 0b03 	sub.w	fp, r9, r3
10018b72:	f8db 3004 	ldr.w	r3, [fp, #4]
10018b76:	f023 0203 	bic.w	r2, r3, #3
10018b7a:	4410      	add	r0, r2
10018b7c:	eb00 0a07 	add.w	sl, r0, r7
10018b80:	4555      	cmp	r5, sl
10018b82:	f340 80f6 	ble.w	10018d72 <_realloc_r+0x266>
10018b86:	eb07 0a02 	add.w	sl, r7, r2
10018b8a:	4555      	cmp	r5, sl
10018b8c:	f340 80cc 	ble.w	10018d28 <_realloc_r+0x21c>
10018b90:	4631      	mov	r1, r6
10018b92:	4640      	mov	r0, r8
10018b94:	f7fc fdc0 	bl	10015718 <_malloc_r>
10018b98:	4606      	mov	r6, r0
10018b9a:	2800      	cmp	r0, #0
10018b9c:	f000 8120 	beq.w	10018de0 <_realloc_r+0x2d4>
10018ba0:	f854 3c04 	ldr.w	r3, [r4, #-4]
10018ba4:	f023 0301 	bic.w	r3, r3, #1
10018ba8:	444b      	add	r3, r9
10018baa:	f1a0 0208 	sub.w	r2, r0, #8
10018bae:	4293      	cmp	r3, r2
10018bb0:	f000 80b4 	beq.w	10018d1c <_realloc_r+0x210>
10018bb4:	1f3a      	subs	r2, r7, #4
10018bb6:	2a24      	cmp	r2, #36	@ 0x24
10018bb8:	f200 80d7 	bhi.w	10018d6a <_realloc_r+0x25e>
10018bbc:	2a13      	cmp	r2, #19
10018bbe:	f200 80a2 	bhi.w	10018d06 <_realloc_r+0x1fa>
10018bc2:	4603      	mov	r3, r0
10018bc4:	4622      	mov	r2, r4
10018bc6:	6811      	ldr	r1, [r2, #0]
10018bc8:	6019      	str	r1, [r3, #0]
10018bca:	6851      	ldr	r1, [r2, #4]
10018bcc:	6059      	str	r1, [r3, #4]
10018bce:	6892      	ldr	r2, [r2, #8]
10018bd0:	609a      	str	r2, [r3, #8]
10018bd2:	4621      	mov	r1, r4
10018bd4:	4640      	mov	r0, r8
10018bd6:	f002 fc13 	bl	1001b400 <_free_r>
10018bda:	4640      	mov	r0, r8
10018bdc:	f7ff ff30 	bl	10018a40 <__malloc_unlock>
10018be0:	4630      	mov	r0, r6
10018be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018be6:	f035 0507 	bics.w	r5, r5, #7
10018bea:	d5a4      	bpl.n	10018b36 <_realloc_r+0x2a>
10018bec:	230c      	movs	r3, #12
10018bee:	f8c8 3000 	str.w	r3, [r8]
10018bf2:	2600      	movs	r6, #0
10018bf4:	e018      	b.n	10018c28 <_realloc_r+0x11c>
10018bf6:	461f      	mov	r7, r3
10018bf8:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
10018bfc:	60d3      	str	r3, [r2, #12]
10018bfe:	609a      	str	r2, [r3, #8]
10018c00:	f8d9 3004 	ldr.w	r3, [r9, #4]
10018c04:	1b7a      	subs	r2, r7, r5
10018c06:	2a0f      	cmp	r2, #15
10018c08:	f003 0301 	and.w	r3, r3, #1
10018c0c:	eb09 0007 	add.w	r0, r9, r7
10018c10:	d81d      	bhi.n	10018c4e <_realloc_r+0x142>
10018c12:	433b      	orrs	r3, r7
10018c14:	f8c9 3004 	str.w	r3, [r9, #4]
10018c18:	6843      	ldr	r3, [r0, #4]
10018c1a:	f043 0301 	orr.w	r3, r3, #1
10018c1e:	6043      	str	r3, [r0, #4]
10018c20:	4640      	mov	r0, r8
10018c22:	f7ff ff0d 	bl	10018a40 <__malloc_unlock>
10018c26:	4626      	mov	r6, r4
10018c28:	4630      	mov	r0, r6
10018c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018c2e:	07c9      	lsls	r1, r1, #31
10018c30:	d4ae      	bmi.n	10018b90 <_realloc_r+0x84>
10018c32:	f854 3c08 	ldr.w	r3, [r4, #-8]
10018c36:	eba9 0b03 	sub.w	fp, r9, r3
10018c3a:	f8db 3004 	ldr.w	r3, [fp, #4]
10018c3e:	f023 0203 	bic.w	r2, r3, #3
10018c42:	e7a0      	b.n	10018b86 <_realloc_r+0x7a>
10018c44:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10018c48:	4611      	mov	r1, r2
10018c4a:	f7fc bd65 	b.w	10015718 <_malloc_r>
10018c4e:	eb09 0105 	add.w	r1, r9, r5
10018c52:	432b      	orrs	r3, r5
10018c54:	f042 0201 	orr.w	r2, r2, #1
10018c58:	f8c9 3004 	str.w	r3, [r9, #4]
10018c5c:	604a      	str	r2, [r1, #4]
10018c5e:	6843      	ldr	r3, [r0, #4]
10018c60:	f043 0301 	orr.w	r3, r3, #1
10018c64:	6043      	str	r3, [r0, #4]
10018c66:	3108      	adds	r1, #8
10018c68:	4640      	mov	r0, r8
10018c6a:	f002 fbc9 	bl	1001b400 <_free_r>
10018c6e:	e7d7      	b.n	10018c20 <_realloc_r+0x114>
10018c70:	f020 0003 	bic.w	r0, r0, #3
10018c74:	19c2      	adds	r2, r0, r7
10018c76:	f105 0c10 	add.w	ip, r5, #16
10018c7a:	4562      	cmp	r2, ip
10018c7c:	f280 8091 	bge.w	10018da2 <_realloc_r+0x296>
10018c80:	07ca      	lsls	r2, r1, #31
10018c82:	d485      	bmi.n	10018b90 <_realloc_r+0x84>
10018c84:	f854 2c08 	ldr.w	r2, [r4, #-8]
10018c88:	eba9 0b02 	sub.w	fp, r9, r2
10018c8c:	f8db 2004 	ldr.w	r2, [fp, #4]
10018c90:	f022 0203 	bic.w	r2, r2, #3
10018c94:	4410      	add	r0, r2
10018c96:	eb00 0a07 	add.w	sl, r0, r7
10018c9a:	45d4      	cmp	ip, sl
10018c9c:	f73f af73 	bgt.w	10018b86 <_realloc_r+0x7a>
10018ca0:	465e      	mov	r6, fp
10018ca2:	f8db 100c 	ldr.w	r1, [fp, #12]
10018ca6:	f856 0f08 	ldr.w	r0, [r6, #8]!
10018caa:	1f3a      	subs	r2, r7, #4
10018cac:	2a24      	cmp	r2, #36	@ 0x24
10018cae:	60c1      	str	r1, [r0, #12]
10018cb0:	6088      	str	r0, [r1, #8]
10018cb2:	f200 80ae 	bhi.w	10018e12 <_realloc_r+0x306>
10018cb6:	2a13      	cmp	r2, #19
10018cb8:	f240 80a9 	bls.w	10018e0e <_realloc_r+0x302>
10018cbc:	6821      	ldr	r1, [r4, #0]
10018cbe:	f8cb 1008 	str.w	r1, [fp, #8]
10018cc2:	6861      	ldr	r1, [r4, #4]
10018cc4:	f8cb 100c 	str.w	r1, [fp, #12]
10018cc8:	2a1b      	cmp	r2, #27
10018cca:	f200 80a8 	bhi.w	10018e1e <_realloc_r+0x312>
10018cce:	3408      	adds	r4, #8
10018cd0:	f10b 0210 	add.w	r2, fp, #16
10018cd4:	6821      	ldr	r1, [r4, #0]
10018cd6:	6011      	str	r1, [r2, #0]
10018cd8:	6861      	ldr	r1, [r4, #4]
10018cda:	6051      	str	r1, [r2, #4]
10018cdc:	68a1      	ldr	r1, [r4, #8]
10018cde:	6091      	str	r1, [r2, #8]
10018ce0:	eb0b 0105 	add.w	r1, fp, r5
10018ce4:	ebaa 0205 	sub.w	r2, sl, r5
10018ce8:	f042 0201 	orr.w	r2, r2, #1
10018cec:	6099      	str	r1, [r3, #8]
10018cee:	604a      	str	r2, [r1, #4]
10018cf0:	f8db 3004 	ldr.w	r3, [fp, #4]
10018cf4:	f003 0301 	and.w	r3, r3, #1
10018cf8:	432b      	orrs	r3, r5
10018cfa:	4640      	mov	r0, r8
10018cfc:	f8cb 3004 	str.w	r3, [fp, #4]
10018d00:	f7ff fe9e 	bl	10018a40 <__malloc_unlock>
10018d04:	e790      	b.n	10018c28 <_realloc_r+0x11c>
10018d06:	6823      	ldr	r3, [r4, #0]
10018d08:	6003      	str	r3, [r0, #0]
10018d0a:	6863      	ldr	r3, [r4, #4]
10018d0c:	6043      	str	r3, [r0, #4]
10018d0e:	2a1b      	cmp	r2, #27
10018d10:	d83c      	bhi.n	10018d8c <_realloc_r+0x280>
10018d12:	f104 0208 	add.w	r2, r4, #8
10018d16:	f100 0308 	add.w	r3, r0, #8
10018d1a:	e754      	b.n	10018bc6 <_realloc_r+0xba>
10018d1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
10018d20:	f023 0303 	bic.w	r3, r3, #3
10018d24:	441f      	add	r7, r3
10018d26:	e76b      	b.n	10018c00 <_realloc_r+0xf4>
10018d28:	1f3a      	subs	r2, r7, #4
10018d2a:	465e      	mov	r6, fp
10018d2c:	f8db 300c 	ldr.w	r3, [fp, #12]
10018d30:	f856 1f08 	ldr.w	r1, [r6, #8]!
10018d34:	2a24      	cmp	r2, #36	@ 0x24
10018d36:	60cb      	str	r3, [r1, #12]
10018d38:	6099      	str	r1, [r3, #8]
10018d3a:	d822      	bhi.n	10018d82 <_realloc_r+0x276>
10018d3c:	2a13      	cmp	r2, #19
10018d3e:	d91e      	bls.n	10018d7e <_realloc_r+0x272>
10018d40:	6823      	ldr	r3, [r4, #0]
10018d42:	f8cb 3008 	str.w	r3, [fp, #8]
10018d46:	6863      	ldr	r3, [r4, #4]
10018d48:	f8cb 300c 	str.w	r3, [fp, #12]
10018d4c:	2a1b      	cmp	r2, #27
10018d4e:	d83b      	bhi.n	10018dc8 <_realloc_r+0x2bc>
10018d50:	3408      	adds	r4, #8
10018d52:	f10b 0310 	add.w	r3, fp, #16
10018d56:	6822      	ldr	r2, [r4, #0]
10018d58:	601a      	str	r2, [r3, #0]
10018d5a:	6862      	ldr	r2, [r4, #4]
10018d5c:	605a      	str	r2, [r3, #4]
10018d5e:	68a2      	ldr	r2, [r4, #8]
10018d60:	609a      	str	r2, [r3, #8]
10018d62:	4634      	mov	r4, r6
10018d64:	4657      	mov	r7, sl
10018d66:	46d9      	mov	r9, fp
10018d68:	e74a      	b.n	10018c00 <_realloc_r+0xf4>
10018d6a:	4621      	mov	r1, r4
10018d6c:	f000 fde6 	bl	1001993c <memmove>
10018d70:	e72f      	b.n	10018bd2 <_realloc_r+0xc6>
10018d72:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
10018d76:	1f3a      	subs	r2, r7, #4
10018d78:	60cb      	str	r3, [r1, #12]
10018d7a:	6099      	str	r1, [r3, #8]
10018d7c:	e7d5      	b.n	10018d2a <_realloc_r+0x21e>
10018d7e:	4633      	mov	r3, r6
10018d80:	e7e9      	b.n	10018d56 <_realloc_r+0x24a>
10018d82:	4621      	mov	r1, r4
10018d84:	4630      	mov	r0, r6
10018d86:	f000 fdd9 	bl	1001993c <memmove>
10018d8a:	e7ea      	b.n	10018d62 <_realloc_r+0x256>
10018d8c:	68a3      	ldr	r3, [r4, #8]
10018d8e:	6083      	str	r3, [r0, #8]
10018d90:	68e3      	ldr	r3, [r4, #12]
10018d92:	60c3      	str	r3, [r0, #12]
10018d94:	2a24      	cmp	r2, #36	@ 0x24
10018d96:	d027      	beq.n	10018de8 <_realloc_r+0x2dc>
10018d98:	f104 0210 	add.w	r2, r4, #16
10018d9c:	f100 0310 	add.w	r3, r0, #16
10018da0:	e711      	b.n	10018bc6 <_realloc_r+0xba>
10018da2:	eb09 0105 	add.w	r1, r9, r5
10018da6:	6099      	str	r1, [r3, #8]
10018da8:	1b53      	subs	r3, r2, r5
10018daa:	f043 0301 	orr.w	r3, r3, #1
10018dae:	604b      	str	r3, [r1, #4]
10018db0:	f854 3c04 	ldr.w	r3, [r4, #-4]
10018db4:	f003 0301 	and.w	r3, r3, #1
10018db8:	432b      	orrs	r3, r5
10018dba:	4640      	mov	r0, r8
10018dbc:	f844 3c04 	str.w	r3, [r4, #-4]
10018dc0:	f7ff fe3e 	bl	10018a40 <__malloc_unlock>
10018dc4:	4626      	mov	r6, r4
10018dc6:	e72f      	b.n	10018c28 <_realloc_r+0x11c>
10018dc8:	68a3      	ldr	r3, [r4, #8]
10018dca:	f8cb 3010 	str.w	r3, [fp, #16]
10018dce:	68e3      	ldr	r3, [r4, #12]
10018dd0:	f8cb 3014 	str.w	r3, [fp, #20]
10018dd4:	2a24      	cmp	r2, #36	@ 0x24
10018dd6:	d010      	beq.n	10018dfa <_realloc_r+0x2ee>
10018dd8:	3410      	adds	r4, #16
10018dda:	f10b 0318 	add.w	r3, fp, #24
10018dde:	e7ba      	b.n	10018d56 <_realloc_r+0x24a>
10018de0:	4640      	mov	r0, r8
10018de2:	f7ff fe2d 	bl	10018a40 <__malloc_unlock>
10018de6:	e704      	b.n	10018bf2 <_realloc_r+0xe6>
10018de8:	6923      	ldr	r3, [r4, #16]
10018dea:	6103      	str	r3, [r0, #16]
10018dec:	6961      	ldr	r1, [r4, #20]
10018dee:	6141      	str	r1, [r0, #20]
10018df0:	f104 0218 	add.w	r2, r4, #24
10018df4:	f100 0318 	add.w	r3, r0, #24
10018df8:	e6e5      	b.n	10018bc6 <_realloc_r+0xba>
10018dfa:	6923      	ldr	r3, [r4, #16]
10018dfc:	f8cb 3018 	str.w	r3, [fp, #24]
10018e00:	6963      	ldr	r3, [r4, #20]
10018e02:	f8cb 301c 	str.w	r3, [fp, #28]
10018e06:	3418      	adds	r4, #24
10018e08:	f10b 0320 	add.w	r3, fp, #32
10018e0c:	e7a3      	b.n	10018d56 <_realloc_r+0x24a>
10018e0e:	4632      	mov	r2, r6
10018e10:	e760      	b.n	10018cd4 <_realloc_r+0x1c8>
10018e12:	4621      	mov	r1, r4
10018e14:	4630      	mov	r0, r6
10018e16:	f000 fd91 	bl	1001993c <memmove>
10018e1a:	4b07      	ldr	r3, [pc, #28]	@ (10018e38 <_realloc_r+0x32c>)
10018e1c:	e760      	b.n	10018ce0 <_realloc_r+0x1d4>
10018e1e:	68a1      	ldr	r1, [r4, #8]
10018e20:	f8cb 1010 	str.w	r1, [fp, #16]
10018e24:	68e1      	ldr	r1, [r4, #12]
10018e26:	f8cb 1014 	str.w	r1, [fp, #20]
10018e2a:	2a24      	cmp	r2, #36	@ 0x24
10018e2c:	d006      	beq.n	10018e3c <_realloc_r+0x330>
10018e2e:	3410      	adds	r4, #16
10018e30:	f10b 0218 	add.w	r2, fp, #24
10018e34:	e74e      	b.n	10018cd4 <_realloc_r+0x1c8>
10018e36:	bf00      	nop
10018e38:	20000060 	.word	0x20000060
10018e3c:	6922      	ldr	r2, [r4, #16]
10018e3e:	f8cb 2018 	str.w	r2, [fp, #24]
10018e42:	6962      	ldr	r2, [r4, #20]
10018e44:	f8cb 201c 	str.w	r2, [fp, #28]
10018e48:	3418      	adds	r4, #24
10018e4a:	f10b 0220 	add.w	r2, fp, #32
10018e4e:	e741      	b.n	10018cd4 <_realloc_r+0x1c8>

10018e50 <__sflush_r>:
10018e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10018e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018e56:	4607      	mov	r7, r0
10018e58:	0710      	lsls	r0, r2, #28
10018e5a:	460c      	mov	r4, r1
10018e5c:	d446      	bmi.n	10018eec <__sflush_r+0x9c>
10018e5e:	6849      	ldr	r1, [r1, #4]
10018e60:	f442 6300 	orr.w	r3, r2, #2048	@ 0x800
10018e64:	2900      	cmp	r1, #0
10018e66:	81a3      	strh	r3, [r4, #12]
10018e68:	dd5c      	ble.n	10018f24 <__sflush_r+0xd4>
10018e6a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
10018e6c:	2d00      	cmp	r5, #0
10018e6e:	d03b      	beq.n	10018ee8 <__sflush_r+0x98>
10018e70:	2100      	movs	r1, #0
10018e72:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
10018e76:	683e      	ldr	r6, [r7, #0]
10018e78:	6039      	str	r1, [r7, #0]
10018e7a:	69e1      	ldr	r1, [r4, #28]
10018e7c:	d15e      	bne.n	10018f3c <__sflush_r+0xec>
10018e7e:	2301      	movs	r3, #1
10018e80:	4638      	mov	r0, r7
10018e82:	47a8      	blx	r5
10018e84:	1c41      	adds	r1, r0, #1
10018e86:	4602      	mov	r2, r0
10018e88:	d068      	beq.n	10018f5c <__sflush_r+0x10c>
10018e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018e8e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
10018e90:	69e1      	ldr	r1, [r4, #28]
10018e92:	075b      	lsls	r3, r3, #29
10018e94:	d505      	bpl.n	10018ea2 <__sflush_r+0x52>
10018e96:	6863      	ldr	r3, [r4, #4]
10018e98:	1ad2      	subs	r2, r2, r3
10018e9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10018e9c:	b10b      	cbz	r3, 10018ea2 <__sflush_r+0x52>
10018e9e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
10018ea0:	1ad2      	subs	r2, r2, r3
10018ea2:	2300      	movs	r3, #0
10018ea4:	4638      	mov	r0, r7
10018ea6:	47a8      	blx	r5
10018ea8:	1c45      	adds	r5, r0, #1
10018eaa:	d149      	bne.n	10018f40 <__sflush_r+0xf0>
10018eac:	6839      	ldr	r1, [r7, #0]
10018eae:	291d      	cmp	r1, #29
10018eb0:	d83c      	bhi.n	10018f2c <__sflush_r+0xdc>
10018eb2:	4a30      	ldr	r2, [pc, #192]	@ (10018f74 <__sflush_r+0x124>)
10018eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018eb8:	410a      	asrs	r2, r1
10018eba:	f012 0201 	ands.w	r2, r2, #1
10018ebe:	d137      	bne.n	10018f30 <__sflush_r+0xe0>
10018ec0:	6062      	str	r2, [r4, #4]
10018ec2:	6922      	ldr	r2, [r4, #16]
10018ec4:	6022      	str	r2, [r4, #0]
10018ec6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
10018eca:	81a2      	strh	r2, [r4, #12]
10018ecc:	04da      	lsls	r2, r3, #19
10018ece:	d44e      	bmi.n	10018f6e <__sflush_r+0x11e>
10018ed0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10018ed2:	603e      	str	r6, [r7, #0]
10018ed4:	b141      	cbz	r1, 10018ee8 <__sflush_r+0x98>
10018ed6:	f104 0340 	add.w	r3, r4, #64	@ 0x40
10018eda:	4299      	cmp	r1, r3
10018edc:	d002      	beq.n	10018ee4 <__sflush_r+0x94>
10018ede:	4638      	mov	r0, r7
10018ee0:	f002 fa8e 	bl	1001b400 <_free_r>
10018ee4:	2300      	movs	r3, #0
10018ee6:	6323      	str	r3, [r4, #48]	@ 0x30
10018ee8:	2000      	movs	r0, #0
10018eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10018eec:	690e      	ldr	r6, [r1, #16]
10018eee:	2e00      	cmp	r6, #0
10018ef0:	d0fa      	beq.n	10018ee8 <__sflush_r+0x98>
10018ef2:	680d      	ldr	r5, [r1, #0]
10018ef4:	600e      	str	r6, [r1, #0]
10018ef6:	0791      	lsls	r1, r2, #30
10018ef8:	bf0c      	ite	eq
10018efa:	6963      	ldreq	r3, [r4, #20]
10018efc:	2300      	movne	r3, #0
10018efe:	1bad      	subs	r5, r5, r6
10018f00:	60a3      	str	r3, [r4, #8]
10018f02:	e00c      	b.n	10018f1e <__sflush_r+0xce>
10018f04:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
10018f08:	69e1      	ldr	r1, [r4, #28]
10018f0a:	462b      	mov	r3, r5
10018f0c:	4632      	mov	r2, r6
10018f0e:	4638      	mov	r0, r7
10018f10:	47e0      	blx	ip
10018f12:	f1b0 0c00 	subs.w	ip, r0, #0
10018f16:	eba5 050c 	sub.w	r5, r5, ip
10018f1a:	4466      	add	r6, ip
10018f1c:	dd06      	ble.n	10018f2c <__sflush_r+0xdc>
10018f1e:	2d00      	cmp	r5, #0
10018f20:	dcf0      	bgt.n	10018f04 <__sflush_r+0xb4>
10018f22:	e7e1      	b.n	10018ee8 <__sflush_r+0x98>
10018f24:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
10018f26:	2900      	cmp	r1, #0
10018f28:	dc9f      	bgt.n	10018e6a <__sflush_r+0x1a>
10018f2a:	e7dd      	b.n	10018ee8 <__sflush_r+0x98>
10018f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10018f34:	81a3      	strh	r3, [r4, #12]
10018f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10018f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10018f3c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
10018f3e:	e7a8      	b.n	10018e92 <__sflush_r+0x42>
10018f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018f44:	6922      	ldr	r2, [r4, #16]
10018f46:	6022      	str	r2, [r4, #0]
10018f48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
10018f4c:	81a2      	strh	r2, [r4, #12]
10018f4e:	04db      	lsls	r3, r3, #19
10018f50:	f04f 0200 	mov.w	r2, #0
10018f54:	6062      	str	r2, [r4, #4]
10018f56:	d5bb      	bpl.n	10018ed0 <__sflush_r+0x80>
10018f58:	6520      	str	r0, [r4, #80]	@ 0x50
10018f5a:	e7b9      	b.n	10018ed0 <__sflush_r+0x80>
10018f5c:	683b      	ldr	r3, [r7, #0]
10018f5e:	2b00      	cmp	r3, #0
10018f60:	d093      	beq.n	10018e8a <__sflush_r+0x3a>
10018f62:	2b1d      	cmp	r3, #29
10018f64:	d001      	beq.n	10018f6a <__sflush_r+0x11a>
10018f66:	2b16      	cmp	r3, #22
10018f68:	d1e0      	bne.n	10018f2c <__sflush_r+0xdc>
10018f6a:	603e      	str	r6, [r7, #0]
10018f6c:	e7bc      	b.n	10018ee8 <__sflush_r+0x98>
10018f6e:	2900      	cmp	r1, #0
10018f70:	d1ae      	bne.n	10018ed0 <__sflush_r+0x80>
10018f72:	e7f1      	b.n	10018f58 <__sflush_r+0x108>
10018f74:	dfbffffe 	.word	0xdfbffffe

10018f78 <_fflush_r>:
10018f78:	b538      	push	{r3, r4, r5, lr}
10018f7a:	460c      	mov	r4, r1
10018f7c:	4605      	mov	r5, r0
10018f7e:	b108      	cbz	r0, 10018f84 <_fflush_r+0xc>
10018f80:	6b43      	ldr	r3, [r0, #52]	@ 0x34
10018f82:	b303      	cbz	r3, 10018fc6 <_fflush_r+0x4e>
10018f84:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
10018f88:	b188      	cbz	r0, 10018fae <_fflush_r+0x36>
10018f8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018f8c:	07db      	lsls	r3, r3, #31
10018f8e:	d401      	bmi.n	10018f94 <_fflush_r+0x1c>
10018f90:	0581      	lsls	r1, r0, #22
10018f92:	d50f      	bpl.n	10018fb4 <_fflush_r+0x3c>
10018f94:	4628      	mov	r0, r5
10018f96:	4621      	mov	r1, r4
10018f98:	f7ff ff5a 	bl	10018e50 <__sflush_r>
10018f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018f9e:	07da      	lsls	r2, r3, #31
10018fa0:	4605      	mov	r5, r0
10018fa2:	d402      	bmi.n	10018faa <_fflush_r+0x32>
10018fa4:	89a3      	ldrh	r3, [r4, #12]
10018fa6:	059b      	lsls	r3, r3, #22
10018fa8:	d508      	bpl.n	10018fbc <_fflush_r+0x44>
10018faa:	4628      	mov	r0, r5
10018fac:	bd38      	pop	{r3, r4, r5, pc}
10018fae:	4605      	mov	r5, r0
10018fb0:	4628      	mov	r0, r5
10018fb2:	bd38      	pop	{r3, r4, r5, pc}
10018fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018fb6:	f001 f82f 	bl	1001a018 <__retarget_lock_acquire_recursive>
10018fba:	e7eb      	b.n	10018f94 <_fflush_r+0x1c>
10018fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018fbe:	f001 f82d 	bl	1001a01c <__retarget_lock_release_recursive>
10018fc2:	4628      	mov	r0, r5
10018fc4:	bd38      	pop	{r3, r4, r5, pc}
10018fc6:	f000 f953 	bl	10019270 <__sinit>
10018fca:	e7db      	b.n	10018f84 <_fflush_r+0xc>

10018fcc <fflush>:
10018fcc:	b350      	cbz	r0, 10019024 <fflush+0x58>
10018fce:	b538      	push	{r3, r4, r5, lr}
10018fd0:	4b17      	ldr	r3, [pc, #92]	@ (10019030 <fflush+0x64>)
10018fd2:	681d      	ldr	r5, [r3, #0]
10018fd4:	4604      	mov	r4, r0
10018fd6:	b10d      	cbz	r5, 10018fdc <fflush+0x10>
10018fd8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
10018fda:	b1bb      	cbz	r3, 1001900c <fflush+0x40>
10018fdc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
10018fe0:	b188      	cbz	r0, 10019006 <fflush+0x3a>
10018fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018fe4:	07db      	lsls	r3, r3, #31
10018fe6:	d401      	bmi.n	10018fec <fflush+0x20>
10018fe8:	0581      	lsls	r1, r0, #22
10018fea:	d513      	bpl.n	10019014 <fflush+0x48>
10018fec:	4628      	mov	r0, r5
10018fee:	4621      	mov	r1, r4
10018ff0:	f7ff ff2e 	bl	10018e50 <__sflush_r>
10018ff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018ff6:	07da      	lsls	r2, r3, #31
10018ff8:	4605      	mov	r5, r0
10018ffa:	d402      	bmi.n	10019002 <fflush+0x36>
10018ffc:	89a3      	ldrh	r3, [r4, #12]
10018ffe:	059b      	lsls	r3, r3, #22
10019000:	d50c      	bpl.n	1001901c <fflush+0x50>
10019002:	4628      	mov	r0, r5
10019004:	bd38      	pop	{r3, r4, r5, pc}
10019006:	4605      	mov	r5, r0
10019008:	4628      	mov	r0, r5
1001900a:	bd38      	pop	{r3, r4, r5, pc}
1001900c:	4628      	mov	r0, r5
1001900e:	f000 f92f 	bl	10019270 <__sinit>
10019012:	e7e3      	b.n	10018fdc <fflush+0x10>
10019014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10019016:	f000 ffff 	bl	1001a018 <__retarget_lock_acquire_recursive>
1001901a:	e7e7      	b.n	10018fec <fflush+0x20>
1001901c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001901e:	f000 fffd 	bl	1001a01c <__retarget_lock_release_recursive>
10019022:	e7ee      	b.n	10019002 <fflush+0x36>
10019024:	4a03      	ldr	r2, [pc, #12]	@ (10019034 <fflush+0x68>)
10019026:	4904      	ldr	r1, [pc, #16]	@ (10019038 <fflush+0x6c>)
10019028:	4804      	ldr	r0, [pc, #16]	@ (1001903c <fflush+0x70>)
1001902a:	f000 bb13 	b.w	10019654 <_fwalk_sglue>
1001902e:	bf00      	nop
10019030:	200005e0 	.word	0x200005e0
10019034:	20000468 	.word	0x20000468
10019038:	10018f79 	.word	0x10018f79
1001903c:	200005e8 	.word	0x200005e8

10019040 <sscanf>:
10019040:	b40e      	push	{r1, r2, r3}
10019042:	b530      	push	{r4, r5, lr}
10019044:	b09c      	sub	sp, #112	@ 0x70
10019046:	ac1f      	add	r4, sp, #124	@ 0x7c
10019048:	f44f 7201 	mov.w	r2, #516	@ 0x204
1001904c:	f854 5b04 	ldr.w	r5, [r4], #4
10019050:	f8ad 2014 	strh.w	r2, [sp, #20]
10019054:	9002      	str	r0, [sp, #8]
10019056:	9006      	str	r0, [sp, #24]
10019058:	f001 f8d2 	bl	1001a200 <strlen>
1001905c:	9003      	str	r0, [sp, #12]
1001905e:	9007      	str	r0, [sp, #28]
10019060:	480a      	ldr	r0, [pc, #40]	@ (1001908c <sscanf+0x4c>)
10019062:	490b      	ldr	r1, [pc, #44]	@ (10019090 <sscanf+0x50>)
10019064:	910a      	str	r1, [sp, #40]	@ 0x28
10019066:	2300      	movs	r3, #0
10019068:	f64f 7cff 	movw	ip, #65535	@ 0xffff
1001906c:	930e      	str	r3, [sp, #56]	@ 0x38
1001906e:	9313      	str	r3, [sp, #76]	@ 0x4c
10019070:	462a      	mov	r2, r5
10019072:	4623      	mov	r3, r4
10019074:	a902      	add	r1, sp, #8
10019076:	6800      	ldr	r0, [r0, #0]
10019078:	f8ad c016 	strh.w	ip, [sp, #22]
1001907c:	9401      	str	r4, [sp, #4]
1001907e:	f004 f90d 	bl	1001d29c <__ssvfscanf_r>
10019082:	b01c      	add	sp, #112	@ 0x70
10019084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
10019088:	b003      	add	sp, #12
1001908a:	4770      	bx	lr
1001908c:	200005e0 	.word	0x200005e0
10019090:	100190b9 	.word	0x100190b9

10019094 <__sread>:
10019094:	b510      	push	{r4, lr}
10019096:	460c      	mov	r4, r1
10019098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1001909c:	f000 fdc8 	bl	10019c30 <_read_r>
100190a0:	2800      	cmp	r0, #0
100190a2:	db03      	blt.n	100190ac <__sread+0x18>
100190a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
100190a6:	4403      	add	r3, r0
100190a8:	6523      	str	r3, [r4, #80]	@ 0x50
100190aa:	bd10      	pop	{r4, pc}
100190ac:	89a3      	ldrh	r3, [r4, #12]
100190ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
100190b2:	81a3      	strh	r3, [r4, #12]
100190b4:	bd10      	pop	{r4, pc}
100190b6:	bf00      	nop

100190b8 <__seofread>:
100190b8:	2000      	movs	r0, #0
100190ba:	4770      	bx	lr

100190bc <__swrite>:
100190bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100190c0:	460c      	mov	r4, r1
100190c2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
100190c6:	461f      	mov	r7, r3
100190c8:	05cb      	lsls	r3, r1, #23
100190ca:	4605      	mov	r5, r0
100190cc:	4616      	mov	r6, r2
100190ce:	d40b      	bmi.n	100190e8 <__swrite+0x2c>
100190d0:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
100190d4:	81a1      	strh	r1, [r4, #12]
100190d6:	463b      	mov	r3, r7
100190d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100190dc:	4632      	mov	r2, r6
100190de:	4628      	mov	r0, r5
100190e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100190e4:	f000 bdcc 	b.w	10019c80 <_write_r>
100190e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100190ec:	2302      	movs	r3, #2
100190ee:	2200      	movs	r2, #0
100190f0:	f000 fd88 	bl	10019c04 <_lseek_r>
100190f4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
100190f8:	e7ea      	b.n	100190d0 <__swrite+0x14>
100190fa:	bf00      	nop

100190fc <__sseek>:
100190fc:	b510      	push	{r4, lr}
100190fe:	460c      	mov	r4, r1
10019100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10019104:	f000 fd7e 	bl	10019c04 <_lseek_r>
10019108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001910c:	1c42      	adds	r2, r0, #1
1001910e:	bf0e      	itee	eq
10019110:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10019114:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10019118:	6520      	strne	r0, [r4, #80]	@ 0x50
1001911a:	81a3      	strh	r3, [r4, #12]
1001911c:	bd10      	pop	{r4, pc}
1001911e:	bf00      	nop

10019120 <__sclose>:
10019120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10019124:	f000 bd5c 	b.w	10019be0 <_close_r>

10019128 <stdio_exit_handler>:
10019128:	4a02      	ldr	r2, [pc, #8]	@ (10019134 <stdio_exit_handler+0xc>)
1001912a:	4903      	ldr	r1, [pc, #12]	@ (10019138 <stdio_exit_handler+0x10>)
1001912c:	4803      	ldr	r0, [pc, #12]	@ (1001913c <stdio_exit_handler+0x14>)
1001912e:	f000 ba91 	b.w	10019654 <_fwalk_sglue>
10019132:	bf00      	nop
10019134:	20000468 	.word	0x20000468
10019138:	1001f6ad 	.word	0x1001f6ad
1001913c:	200005e8 	.word	0x200005e8

10019140 <cleanup_stdio>:
10019140:	4b0c      	ldr	r3, [pc, #48]	@ (10019174 <cleanup_stdio+0x34>)
10019142:	6841      	ldr	r1, [r0, #4]
10019144:	4299      	cmp	r1, r3
10019146:	b510      	push	{r4, lr}
10019148:	4604      	mov	r4, r0
1001914a:	d001      	beq.n	10019150 <cleanup_stdio+0x10>
1001914c:	f006 faae 	bl	1001f6ac <_fclose_r>
10019150:	68a1      	ldr	r1, [r4, #8]
10019152:	4b09      	ldr	r3, [pc, #36]	@ (10019178 <cleanup_stdio+0x38>)
10019154:	4299      	cmp	r1, r3
10019156:	d002      	beq.n	1001915e <cleanup_stdio+0x1e>
10019158:	4620      	mov	r0, r4
1001915a:	f006 faa7 	bl	1001f6ac <_fclose_r>
1001915e:	68e1      	ldr	r1, [r4, #12]
10019160:	4b06      	ldr	r3, [pc, #24]	@ (1001917c <cleanup_stdio+0x3c>)
10019162:	4299      	cmp	r1, r3
10019164:	d004      	beq.n	10019170 <cleanup_stdio+0x30>
10019166:	4620      	mov	r0, r4
10019168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1001916c:	f006 ba9e 	b.w	1001f6ac <_fclose_r>
10019170:	bd10      	pop	{r4, pc}
10019172:	bf00      	nop
10019174:	200015cc 	.word	0x200015cc
10019178:	20001634 	.word	0x20001634
1001917c:	2000169c 	.word	0x2000169c

10019180 <global_stdio_init.part.0>:
10019180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10019184:	4c31      	ldr	r4, [pc, #196]	@ (1001924c <global_stdio_init.part.0+0xcc>)
10019186:	4b32      	ldr	r3, [pc, #200]	@ (10019250 <global_stdio_init.part.0+0xd0>)
10019188:	4832      	ldr	r0, [pc, #200]	@ (10019254 <global_stdio_init.part.0+0xd4>)
1001918a:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 10019258 <global_stdio_init.part.0+0xd8>
1001918e:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 1001925c <global_stdio_init.part.0+0xdc>
10019192:	4f33      	ldr	r7, [pc, #204]	@ (10019260 <global_stdio_init.part.0+0xe0>)
10019194:	6018      	str	r0, [r3, #0]
10019196:	2500      	movs	r5, #0
10019198:	4629      	mov	r1, r5
1001919a:	2304      	movs	r3, #4
1001919c:	2208      	movs	r2, #8
1001919e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
100191a2:	4e30      	ldr	r6, [pc, #192]	@ (10019264 <global_stdio_init.part.0+0xe4>)
100191a4:	60e3      	str	r3, [r4, #12]
100191a6:	e9c4 5500 	strd	r5, r5, [r4]
100191aa:	e9c4 5504 	strd	r5, r5, [r4, #16]
100191ae:	60a5      	str	r5, [r4, #8]
100191b0:	6665      	str	r5, [r4, #100]	@ 0x64
100191b2:	61a5      	str	r5, [r4, #24]
100191b4:	f000 fc42 	bl	10019a3c <memset>
100191b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
100191bc:	e9c4 4907 	strd	r4, r9, [r4, #28]
100191c0:	e9c4 8709 	strd	r8, r7, [r4, #36]	@ 0x24
100191c4:	62e6      	str	r6, [r4, #44]	@ 0x2c
100191c6:	f000 ff23 	bl	1001a010 <__retarget_lock_init_recursive>
100191ca:	4629      	mov	r1, r5
100191cc:	4b26      	ldr	r3, [pc, #152]	@ (10019268 <global_stdio_init.part.0+0xe8>)
100191ce:	6763      	str	r3, [r4, #116]	@ 0x74
100191d0:	2208      	movs	r2, #8
100191d2:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
100191d6:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
100191da:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
100191de:	6725      	str	r5, [r4, #112]	@ 0x70
100191e0:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
100191e4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
100191e8:	f000 fc28 	bl	10019a3c <memset>
100191ec:	f104 0368 	add.w	r3, r4, #104	@ 0x68
100191f0:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
100191f4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
100191f8:	e9c4 9822 	strd	r9, r8, [r4, #136]	@ 0x88
100191fc:	e9c4 7624 	strd	r7, r6, [r4, #144]	@ 0x90
10019200:	f000 ff06 	bl	1001a010 <__retarget_lock_init_recursive>
10019204:	4b19      	ldr	r3, [pc, #100]	@ (1001926c <global_stdio_init.part.0+0xec>)
10019206:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
1001920a:	4629      	mov	r1, r5
1001920c:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
10019210:	2208      	movs	r2, #8
10019212:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
10019216:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
1001921a:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
1001921e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
10019222:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
10019226:	f000 fc09 	bl	10019a3c <memset>
1001922a:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
1001922e:	e9c4 873d 	strd	r8, r7, [r4, #244]	@ 0xf4
10019232:	f8c4 90f0 	str.w	r9, [r4, #240]	@ 0xf0
10019236:	f504 7094 	add.w	r0, r4, #296	@ 0x128
1001923a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
1001923e:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
10019242:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10019246:	f000 bee3 	b.w	1001a010 <__retarget_lock_init_recursive>
1001924a:	bf00      	nop
1001924c:	200015cc 	.word	0x200015cc
10019250:	20001704 	.word	0x20001704
10019254:	10019129 	.word	0x10019129
10019258:	10019095 	.word	0x10019095
1001925c:	100190bd 	.word	0x100190bd
10019260:	100190fd 	.word	0x100190fd
10019264:	10019121 	.word	0x10019121
10019268:	00010009 	.word	0x00010009
1001926c:	00020012 	.word	0x00020012

10019270 <__sinit>:
10019270:	b510      	push	{r4, lr}
10019272:	4604      	mov	r4, r0
10019274:	480a      	ldr	r0, [pc, #40]	@ (100192a0 <__sinit+0x30>)
10019276:	f000 fecf 	bl	1001a018 <__retarget_lock_acquire_recursive>
1001927a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1001927c:	b923      	cbnz	r3, 10019288 <__sinit+0x18>
1001927e:	4b09      	ldr	r3, [pc, #36]	@ (100192a4 <__sinit+0x34>)
10019280:	4a09      	ldr	r2, [pc, #36]	@ (100192a8 <__sinit+0x38>)
10019282:	681b      	ldr	r3, [r3, #0]
10019284:	6362      	str	r2, [r4, #52]	@ 0x34
10019286:	b123      	cbz	r3, 10019292 <__sinit+0x22>
10019288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1001928c:	4804      	ldr	r0, [pc, #16]	@ (100192a0 <__sinit+0x30>)
1001928e:	f000 bec5 	b.w	1001a01c <__retarget_lock_release_recursive>
10019292:	f7ff ff75 	bl	10019180 <global_stdio_init.part.0>
10019296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1001929a:	4801      	ldr	r0, [pc, #4]	@ (100192a0 <__sinit+0x30>)
1001929c:	f000 bebe 	b.w	1001a01c <__retarget_lock_release_recursive>
100192a0:	20001714 	.word	0x20001714
100192a4:	20001704 	.word	0x20001704
100192a8:	10019141 	.word	0x10019141

100192ac <__sfp_lock_acquire>:
100192ac:	4801      	ldr	r0, [pc, #4]	@ (100192b4 <__sfp_lock_acquire+0x8>)
100192ae:	f000 beb3 	b.w	1001a018 <__retarget_lock_acquire_recursive>
100192b2:	bf00      	nop
100192b4:	20001714 	.word	0x20001714

100192b8 <__sfp_lock_release>:
100192b8:	4801      	ldr	r0, [pc, #4]	@ (100192c0 <__sfp_lock_release+0x8>)
100192ba:	f000 beaf 	b.w	1001a01c <__retarget_lock_release_recursive>
100192be:	bf00      	nop
100192c0:	20001714 	.word	0x20001714

100192c4 <_fputs_r>:
100192c4:	b530      	push	{r4, r5, lr}
100192c6:	b087      	sub	sp, #28
100192c8:	4605      	mov	r5, r0
100192ca:	4608      	mov	r0, r1
100192cc:	4614      	mov	r4, r2
100192ce:	9101      	str	r1, [sp, #4]
100192d0:	f000 ff96 	bl	1001a200 <strlen>
100192d4:	aa01      	add	r2, sp, #4
100192d6:	2301      	movs	r3, #1
100192d8:	e9cd 0202 	strd	r0, r2, [sp, #8]
100192dc:	9005      	str	r0, [sp, #20]
100192de:	9304      	str	r3, [sp, #16]
100192e0:	b10d      	cbz	r5, 100192e6 <_fputs_r+0x22>
100192e2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
100192e4:	b353      	cbz	r3, 1001933c <_fputs_r+0x78>
100192e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100192e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100192ec:	07d2      	lsls	r2, r2, #31
100192ee:	d401      	bmi.n	100192f4 <_fputs_r+0x30>
100192f0:	0598      	lsls	r0, r3, #22
100192f2:	d51d      	bpl.n	10019330 <_fputs_r+0x6c>
100192f4:	0499      	lsls	r1, r3, #18
100192f6:	d406      	bmi.n	10019306 <_fputs_r+0x42>
100192f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100192fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
100192fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
10019302:	81a3      	strh	r3, [r4, #12]
10019304:	6662      	str	r2, [r4, #100]	@ 0x64
10019306:	aa03      	add	r2, sp, #12
10019308:	4628      	mov	r0, r5
1001930a:	4621      	mov	r1, r4
1001930c:	f000 f826 	bl	1001935c <__sfvwrite_r>
10019310:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10019312:	07da      	lsls	r2, r3, #31
10019314:	4605      	mov	r5, r0
10019316:	d402      	bmi.n	1001931e <_fputs_r+0x5a>
10019318:	89a3      	ldrh	r3, [r4, #12]
1001931a:	059b      	lsls	r3, r3, #22
1001931c:	d502      	bpl.n	10019324 <_fputs_r+0x60>
1001931e:	4628      	mov	r0, r5
10019320:	b007      	add	sp, #28
10019322:	bd30      	pop	{r4, r5, pc}
10019324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10019326:	f000 fe79 	bl	1001a01c <__retarget_lock_release_recursive>
1001932a:	4628      	mov	r0, r5
1001932c:	b007      	add	sp, #28
1001932e:	bd30      	pop	{r4, r5, pc}
10019330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10019332:	f000 fe71 	bl	1001a018 <__retarget_lock_acquire_recursive>
10019336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001933a:	e7db      	b.n	100192f4 <_fputs_r+0x30>
1001933c:	4628      	mov	r0, r5
1001933e:	f7ff ff97 	bl	10019270 <__sinit>
10019342:	e7d0      	b.n	100192e6 <_fputs_r+0x22>

10019344 <fputs>:
10019344:	b410      	push	{r4}
10019346:	4c04      	ldr	r4, [pc, #16]	@ (10019358 <fputs+0x14>)
10019348:	4603      	mov	r3, r0
1001934a:	460a      	mov	r2, r1
1001934c:	6820      	ldr	r0, [r4, #0]
1001934e:	bc10      	pop	{r4}
10019350:	4619      	mov	r1, r3
10019352:	f7ff bfb7 	b.w	100192c4 <_fputs_r>
10019356:	bf00      	nop
10019358:	200005e0 	.word	0x200005e0

1001935c <__sfvwrite_r>:
1001935c:	6893      	ldr	r3, [r2, #8]
1001935e:	2b00      	cmp	r3, #0
10019360:	f000 80f6 	beq.w	10019550 <__sfvwrite_r+0x1f4>
10019364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10019368:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
1001936c:	f01c 0f08 	tst.w	ip, #8
10019370:	b083      	sub	sp, #12
10019372:	4690      	mov	r8, r2
10019374:	4681      	mov	r9, r0
10019376:	460c      	mov	r4, r1
10019378:	d031      	beq.n	100193de <__sfvwrite_r+0x82>
1001937a:	690b      	ldr	r3, [r1, #16]
1001937c:	b37b      	cbz	r3, 100193de <__sfvwrite_r+0x82>
1001937e:	f01c 0702 	ands.w	r7, ip, #2
10019382:	f8d8 6000 	ldr.w	r6, [r8]
10019386:	d038      	beq.n	100193fa <__sfvwrite_r+0x9e>
10019388:	2700      	movs	r7, #0
1001938a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
1001938e:	69e1      	ldr	r1, [r4, #28]
10019390:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 10019650 <__sfvwrite_r+0x2f4>
10019394:	463d      	mov	r5, r7
10019396:	4555      	cmp	r5, sl
10019398:	462b      	mov	r3, r5
1001939a:	463a      	mov	r2, r7
1001939c:	bf28      	it	cs
1001939e:	4653      	movcs	r3, sl
100193a0:	4648      	mov	r0, r9
100193a2:	b1c5      	cbz	r5, 100193d6 <__sfvwrite_r+0x7a>
100193a4:	47d8      	blx	fp
100193a6:	2800      	cmp	r0, #0
100193a8:	f340 80c8 	ble.w	1001953c <__sfvwrite_r+0x1e0>
100193ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
100193b0:	1a1b      	subs	r3, r3, r0
100193b2:	4407      	add	r7, r0
100193b4:	1a2d      	subs	r5, r5, r0
100193b6:	f8c8 3008 	str.w	r3, [r8, #8]
100193ba:	2b00      	cmp	r3, #0
100193bc:	f000 80b4 	beq.w	10019528 <__sfvwrite_r+0x1cc>
100193c0:	4555      	cmp	r5, sl
100193c2:	462b      	mov	r3, r5
100193c4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
100193c8:	69e1      	ldr	r1, [r4, #28]
100193ca:	bf28      	it	cs
100193cc:	4653      	movcs	r3, sl
100193ce:	463a      	mov	r2, r7
100193d0:	4648      	mov	r0, r9
100193d2:	2d00      	cmp	r5, #0
100193d4:	d1e6      	bne.n	100193a4 <__sfvwrite_r+0x48>
100193d6:	e9d6 7500 	ldrd	r7, r5, [r6]
100193da:	3608      	adds	r6, #8
100193dc:	e7db      	b.n	10019396 <__sfvwrite_r+0x3a>
100193de:	4621      	mov	r1, r4
100193e0:	4648      	mov	r0, r9
100193e2:	f000 f95b 	bl	1001969c <__swsetup_r>
100193e6:	2800      	cmp	r0, #0
100193e8:	f040 80ad 	bne.w	10019546 <__sfvwrite_r+0x1ea>
100193ec:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
100193f0:	f8d8 6000 	ldr.w	r6, [r8]
100193f4:	f01c 0702 	ands.w	r7, ip, #2
100193f8:	d1c6      	bne.n	10019388 <__sfvwrite_r+0x2c>
100193fa:	f01c 0a01 	ands.w	sl, ip, #1
100193fe:	d163      	bne.n	100194c8 <__sfvwrite_r+0x16c>
10019400:	6823      	ldr	r3, [r4, #0]
10019402:	68a1      	ldr	r1, [r4, #8]
10019404:	4657      	mov	r7, sl
10019406:	4618      	mov	r0, r3
10019408:	468b      	mov	fp, r1
1001940a:	2f00      	cmp	r7, #0
1001940c:	d058      	beq.n	100194c0 <__sfvwrite_r+0x164>
1001940e:	f41c 7f00 	tst.w	ip, #512	@ 0x200
10019412:	f000 80b1 	beq.w	10019578 <__sfvwrite_r+0x21c>
10019416:	42b9      	cmp	r1, r7
10019418:	460a      	mov	r2, r1
1001941a:	f200 80dd 	bhi.w	100195d8 <__sfvwrite_r+0x27c>
1001941e:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
10019422:	d02f      	beq.n	10019484 <__sfvwrite_r+0x128>
10019424:	6921      	ldr	r1, [r4, #16]
10019426:	6962      	ldr	r2, [r4, #20]
10019428:	1a5d      	subs	r5, r3, r1
1001942a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1001942e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
10019432:	1c6b      	adds	r3, r5, #1
10019434:	1052      	asrs	r2, r2, #1
10019436:	443b      	add	r3, r7
10019438:	4293      	cmp	r3, r2
1001943a:	bf92      	itee	ls
1001943c:	4693      	movls	fp, r2
1001943e:	469b      	movhi	fp, r3
10019440:	461a      	movhi	r2, r3
10019442:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
10019446:	f000 80e6 	beq.w	10019616 <__sfvwrite_r+0x2ba>
1001944a:	4611      	mov	r1, r2
1001944c:	4648      	mov	r0, r9
1001944e:	f7fc f963 	bl	10015718 <_malloc_r>
10019452:	2800      	cmp	r0, #0
10019454:	f000 80f5 	beq.w	10019642 <__sfvwrite_r+0x2e6>
10019458:	462a      	mov	r2, r5
1001945a:	6921      	ldr	r1, [r4, #16]
1001945c:	9001      	str	r0, [sp, #4]
1001945e:	f000 fe2f 	bl	1001a0c0 <memcpy>
10019462:	89a2      	ldrh	r2, [r4, #12]
10019464:	9b01      	ldr	r3, [sp, #4]
10019466:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
1001946a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
1001946e:	81a2      	strh	r2, [r4, #12]
10019470:	1958      	adds	r0, r3, r5
10019472:	ebab 0505 	sub.w	r5, fp, r5
10019476:	f8c4 b014 	str.w	fp, [r4, #20]
1001947a:	6123      	str	r3, [r4, #16]
1001947c:	60a5      	str	r5, [r4, #8]
1001947e:	6020      	str	r0, [r4, #0]
10019480:	46bb      	mov	fp, r7
10019482:	463a      	mov	r2, r7
10019484:	4651      	mov	r1, sl
10019486:	9201      	str	r2, [sp, #4]
10019488:	f000 fa58 	bl	1001993c <memmove>
1001948c:	68a1      	ldr	r1, [r4, #8]
1001948e:	6823      	ldr	r3, [r4, #0]
10019490:	9a01      	ldr	r2, [sp, #4]
10019492:	eba1 010b 	sub.w	r1, r1, fp
10019496:	441a      	add	r2, r3
10019498:	463d      	mov	r5, r7
1001949a:	60a1      	str	r1, [r4, #8]
1001949c:	6022      	str	r2, [r4, #0]
1001949e:	2700      	movs	r7, #0
100194a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
100194a4:	1b5b      	subs	r3, r3, r5
100194a6:	44aa      	add	sl, r5
100194a8:	f8c8 3008 	str.w	r3, [r8, #8]
100194ac:	2b00      	cmp	r3, #0
100194ae:	d03b      	beq.n	10019528 <__sfvwrite_r+0x1cc>
100194b0:	6823      	ldr	r3, [r4, #0]
100194b2:	68a1      	ldr	r1, [r4, #8]
100194b4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
100194b8:	4618      	mov	r0, r3
100194ba:	468b      	mov	fp, r1
100194bc:	2f00      	cmp	r7, #0
100194be:	d1a6      	bne.n	1001940e <__sfvwrite_r+0xb2>
100194c0:	e9d6 a700 	ldrd	sl, r7, [r6]
100194c4:	3608      	adds	r6, #8
100194c6:	e79e      	b.n	10019406 <__sfvwrite_r+0xaa>
100194c8:	4638      	mov	r0, r7
100194ca:	46bb      	mov	fp, r7
100194cc:	463d      	mov	r5, r7
100194ce:	2d00      	cmp	r5, #0
100194d0:	d040      	beq.n	10019554 <__sfvwrite_r+0x1f8>
100194d2:	2800      	cmp	r0, #0
100194d4:	d045      	beq.n	10019562 <__sfvwrite_r+0x206>
100194d6:	463a      	mov	r2, r7
100194d8:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
100194dc:	6820      	ldr	r0, [r4, #0]
100194de:	68a1      	ldr	r1, [r4, #8]
100194e0:	42aa      	cmp	r2, r5
100194e2:	bf28      	it	cs
100194e4:	462a      	movcs	r2, r5
100194e6:	4560      	cmp	r0, ip
100194e8:	d904      	bls.n	100194f4 <__sfvwrite_r+0x198>
100194ea:	eb01 0a03 	add.w	sl, r1, r3
100194ee:	4552      	cmp	r2, sl
100194f0:	f300 8082 	bgt.w	100195f8 <__sfvwrite_r+0x29c>
100194f4:	4293      	cmp	r3, r2
100194f6:	dc72      	bgt.n	100195de <__sfvwrite_r+0x282>
100194f8:	69e1      	ldr	r1, [r4, #28]
100194fa:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
100194fe:	465a      	mov	r2, fp
10019500:	4648      	mov	r0, r9
10019502:	47e0      	blx	ip
10019504:	f1b0 0a00 	subs.w	sl, r0, #0
10019508:	dd18      	ble.n	1001953c <__sfvwrite_r+0x1e0>
1001950a:	ebb7 070a 	subs.w	r7, r7, sl
1001950e:	d00f      	beq.n	10019530 <__sfvwrite_r+0x1d4>
10019510:	2001      	movs	r0, #1
10019512:	f8d8 3008 	ldr.w	r3, [r8, #8]
10019516:	eba3 030a 	sub.w	r3, r3, sl
1001951a:	44d3      	add	fp, sl
1001951c:	eba5 050a 	sub.w	r5, r5, sl
10019520:	f8c8 3008 	str.w	r3, [r8, #8]
10019524:	2b00      	cmp	r3, #0
10019526:	d1d2      	bne.n	100194ce <__sfvwrite_r+0x172>
10019528:	2000      	movs	r0, #0
1001952a:	b003      	add	sp, #12
1001952c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10019530:	4621      	mov	r1, r4
10019532:	4648      	mov	r0, r9
10019534:	f7ff fd20 	bl	10018f78 <_fflush_r>
10019538:	2800      	cmp	r0, #0
1001953a:	d0ea      	beq.n	10019512 <__sfvwrite_r+0x1b6>
1001953c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10019544:	81a3      	strh	r3, [r4, #12]
10019546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001954a:	b003      	add	sp, #12
1001954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10019550:	2000      	movs	r0, #0
10019552:	4770      	bx	lr
10019554:	6875      	ldr	r5, [r6, #4]
10019556:	4633      	mov	r3, r6
10019558:	3608      	adds	r6, #8
1001955a:	2d00      	cmp	r5, #0
1001955c:	d0fa      	beq.n	10019554 <__sfvwrite_r+0x1f8>
1001955e:	f8d3 b000 	ldr.w	fp, [r3]
10019562:	462a      	mov	r2, r5
10019564:	210a      	movs	r1, #10
10019566:	4658      	mov	r0, fp
10019568:	f000 fd5a 	bl	1001a020 <memchr>
1001956c:	2800      	cmp	r0, #0
1001956e:	d065      	beq.n	1001963c <__sfvwrite_r+0x2e0>
10019570:	3001      	adds	r0, #1
10019572:	eba0 070b 	sub.w	r7, r0, fp
10019576:	e7ae      	b.n	100194d6 <__sfvwrite_r+0x17a>
10019578:	6922      	ldr	r2, [r4, #16]
1001957a:	429a      	cmp	r2, r3
1001957c:	d314      	bcc.n	100195a8 <__sfvwrite_r+0x24c>
1001957e:	6962      	ldr	r2, [r4, #20]
10019580:	42ba      	cmp	r2, r7
10019582:	d811      	bhi.n	100195a8 <__sfvwrite_r+0x24c>
10019584:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
10019588:	42bb      	cmp	r3, r7
1001958a:	bf28      	it	cs
1001958c:	463b      	movcs	r3, r7
1001958e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
10019590:	fb93 f3f2 	sdiv	r3, r3, r2
10019594:	69e1      	ldr	r1, [r4, #28]
10019596:	fb02 f303 	mul.w	r3, r2, r3
1001959a:	4648      	mov	r0, r9
1001959c:	4652      	mov	r2, sl
1001959e:	47a8      	blx	r5
100195a0:	1e05      	subs	r5, r0, #0
100195a2:	ddcb      	ble.n	1001953c <__sfvwrite_r+0x1e0>
100195a4:	1b7f      	subs	r7, r7, r5
100195a6:	e77b      	b.n	100194a0 <__sfvwrite_r+0x144>
100195a8:	42b9      	cmp	r1, r7
100195aa:	bf28      	it	cs
100195ac:	4639      	movcs	r1, r7
100195ae:	460d      	mov	r5, r1
100195b0:	4618      	mov	r0, r3
100195b2:	460a      	mov	r2, r1
100195b4:	4651      	mov	r1, sl
100195b6:	f000 f9c1 	bl	1001993c <memmove>
100195ba:	68a1      	ldr	r1, [r4, #8]
100195bc:	6823      	ldr	r3, [r4, #0]
100195be:	1b49      	subs	r1, r1, r5
100195c0:	442b      	add	r3, r5
100195c2:	60a1      	str	r1, [r4, #8]
100195c4:	6023      	str	r3, [r4, #0]
100195c6:	2900      	cmp	r1, #0
100195c8:	d1ec      	bne.n	100195a4 <__sfvwrite_r+0x248>
100195ca:	4621      	mov	r1, r4
100195cc:	4648      	mov	r0, r9
100195ce:	f7ff fcd3 	bl	10018f78 <_fflush_r>
100195d2:	2800      	cmp	r0, #0
100195d4:	d0e6      	beq.n	100195a4 <__sfvwrite_r+0x248>
100195d6:	e7b1      	b.n	1001953c <__sfvwrite_r+0x1e0>
100195d8:	46bb      	mov	fp, r7
100195da:	463a      	mov	r2, r7
100195dc:	e752      	b.n	10019484 <__sfvwrite_r+0x128>
100195de:	4659      	mov	r1, fp
100195e0:	9201      	str	r2, [sp, #4]
100195e2:	f000 f9ab 	bl	1001993c <memmove>
100195e6:	9a01      	ldr	r2, [sp, #4]
100195e8:	68a3      	ldr	r3, [r4, #8]
100195ea:	1a9b      	subs	r3, r3, r2
100195ec:	60a3      	str	r3, [r4, #8]
100195ee:	6823      	ldr	r3, [r4, #0]
100195f0:	4413      	add	r3, r2
100195f2:	6023      	str	r3, [r4, #0]
100195f4:	4692      	mov	sl, r2
100195f6:	e788      	b.n	1001950a <__sfvwrite_r+0x1ae>
100195f8:	4659      	mov	r1, fp
100195fa:	4652      	mov	r2, sl
100195fc:	f000 f99e 	bl	1001993c <memmove>
10019600:	6823      	ldr	r3, [r4, #0]
10019602:	4453      	add	r3, sl
10019604:	6023      	str	r3, [r4, #0]
10019606:	4621      	mov	r1, r4
10019608:	4648      	mov	r0, r9
1001960a:	f7ff fcb5 	bl	10018f78 <_fflush_r>
1001960e:	2800      	cmp	r0, #0
10019610:	f43f af7b 	beq.w	1001950a <__sfvwrite_r+0x1ae>
10019614:	e792      	b.n	1001953c <__sfvwrite_r+0x1e0>
10019616:	4648      	mov	r0, r9
10019618:	f7ff fa78 	bl	10018b0c <_realloc_r>
1001961c:	4603      	mov	r3, r0
1001961e:	2800      	cmp	r0, #0
10019620:	f47f af26 	bne.w	10019470 <__sfvwrite_r+0x114>
10019624:	6921      	ldr	r1, [r4, #16]
10019626:	4648      	mov	r0, r9
10019628:	f001 feea 	bl	1001b400 <_free_r>
1001962c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019630:	220c      	movs	r2, #12
10019632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
10019636:	f8c9 2000 	str.w	r2, [r9]
1001963a:	e781      	b.n	10019540 <__sfvwrite_r+0x1e4>
1001963c:	1c6a      	adds	r2, r5, #1
1001963e:	4617      	mov	r7, r2
10019640:	e74a      	b.n	100194d8 <__sfvwrite_r+0x17c>
10019642:	220c      	movs	r2, #12
10019644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019648:	f8c9 2000 	str.w	r2, [r9]
1001964c:	e778      	b.n	10019540 <__sfvwrite_r+0x1e4>
1001964e:	bf00      	nop
10019650:	7ffffc00 	.word	0x7ffffc00

10019654 <_fwalk_sglue>:
10019654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10019658:	4680      	mov	r8, r0
1001965a:	460f      	mov	r7, r1
1001965c:	4616      	mov	r6, r2
1001965e:	f04f 0900 	mov.w	r9, #0
10019662:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
10019666:	3d01      	subs	r5, #1
10019668:	d411      	bmi.n	1001968e <_fwalk_sglue+0x3a>
1001966a:	89a3      	ldrh	r3, [r4, #12]
1001966c:	2b01      	cmp	r3, #1
1001966e:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
10019672:	d908      	bls.n	10019686 <_fwalk_sglue+0x32>
10019674:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
10019678:	3301      	adds	r3, #1
1001967a:	4621      	mov	r1, r4
1001967c:	d003      	beq.n	10019686 <_fwalk_sglue+0x32>
1001967e:	4640      	mov	r0, r8
10019680:	47b8      	blx	r7
10019682:	ea49 0900 	orr.w	r9, r9, r0
10019686:	1c6b      	adds	r3, r5, #1
10019688:	f104 0468 	add.w	r4, r4, #104	@ 0x68
1001968c:	d1ed      	bne.n	1001966a <_fwalk_sglue+0x16>
1001968e:	6836      	ldr	r6, [r6, #0]
10019690:	2e00      	cmp	r6, #0
10019692:	d1e6      	bne.n	10019662 <_fwalk_sglue+0xe>
10019694:	4648      	mov	r0, r9
10019696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001969a:	bf00      	nop

1001969c <__swsetup_r>:
1001969c:	b538      	push	{r3, r4, r5, lr}
1001969e:	4b2e      	ldr	r3, [pc, #184]	@ (10019758 <__swsetup_r+0xbc>)
100196a0:	681b      	ldr	r3, [r3, #0]
100196a2:	4605      	mov	r5, r0
100196a4:	460c      	mov	r4, r1
100196a6:	b113      	cbz	r3, 100196ae <__swsetup_r+0x12>
100196a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100196aa:	2a00      	cmp	r2, #0
100196ac:	d04b      	beq.n	10019746 <__swsetup_r+0xaa>
100196ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100196b2:	0718      	lsls	r0, r3, #28
100196b4:	d51c      	bpl.n	100196f0 <__swsetup_r+0x54>
100196b6:	6922      	ldr	r2, [r4, #16]
100196b8:	b322      	cbz	r2, 10019704 <__swsetup_r+0x68>
100196ba:	f013 0101 	ands.w	r1, r3, #1
100196be:	d007      	beq.n	100196d0 <__swsetup_r+0x34>
100196c0:	6961      	ldr	r1, [r4, #20]
100196c2:	2000      	movs	r0, #0
100196c4:	4249      	negs	r1, r1
100196c6:	60a0      	str	r0, [r4, #8]
100196c8:	61a1      	str	r1, [r4, #24]
100196ca:	b13a      	cbz	r2, 100196dc <__swsetup_r+0x40>
100196cc:	2000      	movs	r0, #0
100196ce:	bd38      	pop	{r3, r4, r5, pc}
100196d0:	0798      	lsls	r0, r3, #30
100196d2:	bf58      	it	pl
100196d4:	6961      	ldrpl	r1, [r4, #20]
100196d6:	60a1      	str	r1, [r4, #8]
100196d8:	2a00      	cmp	r2, #0
100196da:	d1f7      	bne.n	100196cc <__swsetup_r+0x30>
100196dc:	0619      	lsls	r1, r3, #24
100196de:	bf58      	it	pl
100196e0:	4610      	movpl	r0, r2
100196e2:	d5f4      	bpl.n	100196ce <__swsetup_r+0x32>
100196e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100196e8:	81a3      	strh	r3, [r4, #12]
100196ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100196ee:	bd38      	pop	{r3, r4, r5, pc}
100196f0:	06d9      	lsls	r1, r3, #27
100196f2:	d52c      	bpl.n	1001974e <__swsetup_r+0xb2>
100196f4:	075a      	lsls	r2, r3, #29
100196f6:	d412      	bmi.n	1001971e <__swsetup_r+0x82>
100196f8:	6922      	ldr	r2, [r4, #16]
100196fa:	f043 0308 	orr.w	r3, r3, #8
100196fe:	81a3      	strh	r3, [r4, #12]
10019700:	2a00      	cmp	r2, #0
10019702:	d1da      	bne.n	100196ba <__swsetup_r+0x1e>
10019704:	f403 7120 	and.w	r1, r3, #640	@ 0x280
10019708:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
1001970c:	d0d5      	beq.n	100196ba <__swsetup_r+0x1e>
1001970e:	4621      	mov	r1, r4
10019710:	4628      	mov	r0, r5
10019712:	f003 fd55 	bl	1001d1c0 <__smakebuf_r>
10019716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001971a:	6922      	ldr	r2, [r4, #16]
1001971c:	e7cd      	b.n	100196ba <__swsetup_r+0x1e>
1001971e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10019720:	b151      	cbz	r1, 10019738 <__swsetup_r+0x9c>
10019722:	f104 0240 	add.w	r2, r4, #64	@ 0x40
10019726:	4291      	cmp	r1, r2
10019728:	d004      	beq.n	10019734 <__swsetup_r+0x98>
1001972a:	4628      	mov	r0, r5
1001972c:	f001 fe68 	bl	1001b400 <_free_r>
10019730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019734:	2200      	movs	r2, #0
10019736:	6322      	str	r2, [r4, #48]	@ 0x30
10019738:	6922      	ldr	r2, [r4, #16]
1001973a:	2100      	movs	r1, #0
1001973c:	e9c4 2100 	strd	r2, r1, [r4]
10019740:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
10019744:	e7d9      	b.n	100196fa <__swsetup_r+0x5e>
10019746:	4618      	mov	r0, r3
10019748:	f7ff fd92 	bl	10019270 <__sinit>
1001974c:	e7af      	b.n	100196ae <__swsetup_r+0x12>
1001974e:	2209      	movs	r2, #9
10019750:	602a      	str	r2, [r5, #0]
10019752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10019756:	e7c7      	b.n	100196e8 <__swsetup_r+0x4c>
10019758:	200005e0 	.word	0x200005e0

1001975c <_gets_r>:
1001975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001975e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
10019760:	6844      	ldr	r4, [r0, #4]
10019762:	4607      	mov	r7, r0
10019764:	460d      	mov	r5, r1
10019766:	2b00      	cmp	r3, #0
10019768:	d033      	beq.n	100197d2 <_gets_r+0x76>
1001976a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001976c:	07d9      	lsls	r1, r3, #31
1001976e:	d402      	bmi.n	10019776 <_gets_r+0x1a>
10019770:	89a3      	ldrh	r3, [r4, #12]
10019772:	059a      	lsls	r2, r3, #22
10019774:	d524      	bpl.n	100197c0 <_gets_r+0x64>
10019776:	462e      	mov	r6, r5
10019778:	e007      	b.n	1001978a <_gets_r+0x2e>
1001977a:	6823      	ldr	r3, [r4, #0]
1001977c:	1c5a      	adds	r2, r3, #1
1001977e:	6022      	str	r2, [r4, #0]
10019780:	781b      	ldrb	r3, [r3, #0]
10019782:	2b0a      	cmp	r3, #10
10019784:	d012      	beq.n	100197ac <_gets_r+0x50>
10019786:	f806 3b01 	strb.w	r3, [r6], #1
1001978a:	6863      	ldr	r3, [r4, #4]
1001978c:	3b01      	subs	r3, #1
1001978e:	2b00      	cmp	r3, #0
10019790:	6063      	str	r3, [r4, #4]
10019792:	daf2      	bge.n	1001977a <_gets_r+0x1e>
10019794:	4621      	mov	r1, r4
10019796:	4638      	mov	r0, r7
10019798:	f005 ff6e 	bl	1001f678 <__srget_r>
1001979c:	280a      	cmp	r0, #10
1001979e:	d005      	beq.n	100197ac <_gets_r+0x50>
100197a0:	1c43      	adds	r3, r0, #1
100197a2:	d001      	beq.n	100197a8 <_gets_r+0x4c>
100197a4:	b2c3      	uxtb	r3, r0
100197a6:	e7ee      	b.n	10019786 <_gets_r+0x2a>
100197a8:	42ae      	cmp	r6, r5
100197aa:	d015      	beq.n	100197d8 <_gets_r+0x7c>
100197ac:	2300      	movs	r3, #0
100197ae:	7033      	strb	r3, [r6, #0]
100197b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100197b2:	07d8      	lsls	r0, r3, #31
100197b4:	d402      	bmi.n	100197bc <_gets_r+0x60>
100197b6:	89a3      	ldrh	r3, [r4, #12]
100197b8:	059b      	lsls	r3, r3, #22
100197ba:	d505      	bpl.n	100197c8 <_gets_r+0x6c>
100197bc:	4628      	mov	r0, r5
100197be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100197c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100197c2:	f000 fc29 	bl	1001a018 <__retarget_lock_acquire_recursive>
100197c6:	e7d6      	b.n	10019776 <_gets_r+0x1a>
100197c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100197ca:	f000 fc27 	bl	1001a01c <__retarget_lock_release_recursive>
100197ce:	4628      	mov	r0, r5
100197d0:	e7f5      	b.n	100197be <_gets_r+0x62>
100197d2:	f7ff fd4d 	bl	10019270 <__sinit>
100197d6:	e7c8      	b.n	1001976a <_gets_r+0xe>
100197d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100197da:	07d9      	lsls	r1, r3, #31
100197dc:	d501      	bpl.n	100197e2 <_gets_r+0x86>
100197de:	2000      	movs	r0, #0
100197e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100197e2:	89a3      	ldrh	r3, [r4, #12]
100197e4:	059a      	lsls	r2, r3, #22
100197e6:	d4fa      	bmi.n	100197de <_gets_r+0x82>
100197e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100197ea:	f000 fc17 	bl	1001a01c <__retarget_lock_release_recursive>
100197ee:	e7f6      	b.n	100197de <_gets_r+0x82>

100197f0 <gets>:
100197f0:	4b02      	ldr	r3, [pc, #8]	@ (100197fc <gets+0xc>)
100197f2:	4601      	mov	r1, r0
100197f4:	6818      	ldr	r0, [r3, #0]
100197f6:	f7ff bfb1 	b.w	1001975c <_gets_r>
100197fa:	bf00      	nop
100197fc:	200005e0 	.word	0x200005e0

10019800 <memcmp>:
10019800:	2a03      	cmp	r2, #3
10019802:	b570      	push	{r4, r5, r6, lr}
10019804:	d911      	bls.n	1001982a <memcmp+0x2a>
10019806:	ea40 0301 	orr.w	r3, r0, r1
1001980a:	079b      	lsls	r3, r3, #30
1001980c:	d11f      	bne.n	1001984e <memcmp+0x4e>
1001980e:	4604      	mov	r4, r0
10019810:	460b      	mov	r3, r1
10019812:	e002      	b.n	1001981a <memcmp+0x1a>
10019814:	3a04      	subs	r2, #4
10019816:	2a03      	cmp	r2, #3
10019818:	d91d      	bls.n	10019856 <memcmp+0x56>
1001981a:	4619      	mov	r1, r3
1001981c:	4620      	mov	r0, r4
1001981e:	f853 5b04 	ldr.w	r5, [r3], #4
10019822:	f854 6b04 	ldr.w	r6, [r4], #4
10019826:	42ae      	cmp	r6, r5
10019828:	d0f4      	beq.n	10019814 <memcmp+0x14>
1001982a:	1e54      	subs	r4, r2, #1
1001982c:	b1b2      	cbz	r2, 1001985c <memcmp+0x5c>
1001982e:	1e42      	subs	r2, r0, #1
10019830:	3901      	subs	r1, #1
10019832:	e001      	b.n	10019838 <memcmp+0x38>
10019834:	18c3      	adds	r3, r0, r3
10019836:	d00c      	beq.n	10019852 <memcmp+0x52>
10019838:	f812 ef01 	ldrb.w	lr, [r2, #1]!
1001983c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
10019840:	45e6      	cmp	lr, ip
10019842:	eba4 0302 	sub.w	r3, r4, r2
10019846:	d0f5      	beq.n	10019834 <memcmp+0x34>
10019848:	ebae 000c 	sub.w	r0, lr, ip
1001984c:	bd70      	pop	{r4, r5, r6, pc}
1001984e:	1e54      	subs	r4, r2, #1
10019850:	e7ed      	b.n	1001982e <memcmp+0x2e>
10019852:	4618      	mov	r0, r3
10019854:	bd70      	pop	{r4, r5, r6, pc}
10019856:	4620      	mov	r0, r4
10019858:	4619      	mov	r1, r3
1001985a:	e7e6      	b.n	1001982a <memcmp+0x2a>
1001985c:	4610      	mov	r0, r2
1001985e:	bd70      	pop	{r4, r5, r6, pc}

10019860 <__fputwc>:
10019860:	b570      	push	{r4, r5, r6, lr}
10019862:	b082      	sub	sp, #8
10019864:	4606      	mov	r6, r0
10019866:	460d      	mov	r5, r1
10019868:	4614      	mov	r4, r2
1001986a:	f000 f9af 	bl	10019bcc <__locale_mb_cur_max>
1001986e:	2801      	cmp	r0, #1
10019870:	d102      	bne.n	10019878 <__fputwc+0x18>
10019872:	1e6b      	subs	r3, r5, #1
10019874:	2bfe      	cmp	r3, #254	@ 0xfe
10019876:	d926      	bls.n	100198c6 <__fputwc+0x66>
10019878:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
1001987c:	462a      	mov	r2, r5
1001987e:	a901      	add	r1, sp, #4
10019880:	4630      	mov	r0, r6
10019882:	f000 fd29 	bl	1001a2d8 <_wcrtomb_r>
10019886:	1c43      	adds	r3, r0, #1
10019888:	d020      	beq.n	100198cc <__fputwc+0x6c>
1001988a:	b178      	cbz	r0, 100198ac <__fputwc+0x4c>
1001988c:	68a3      	ldr	r3, [r4, #8]
1001988e:	f89d 1004 	ldrb.w	r1, [sp, #4]
10019892:	3b01      	subs	r3, #1
10019894:	2b00      	cmp	r3, #0
10019896:	60a3      	str	r3, [r4, #8]
10019898:	da04      	bge.n	100198a4 <__fputwc+0x44>
1001989a:	69a2      	ldr	r2, [r4, #24]
1001989c:	4293      	cmp	r3, r2
1001989e:	db08      	blt.n	100198b2 <__fputwc+0x52>
100198a0:	290a      	cmp	r1, #10
100198a2:	d006      	beq.n	100198b2 <__fputwc+0x52>
100198a4:	6823      	ldr	r3, [r4, #0]
100198a6:	1c5a      	adds	r2, r3, #1
100198a8:	6022      	str	r2, [r4, #0]
100198aa:	7019      	strb	r1, [r3, #0]
100198ac:	4628      	mov	r0, r5
100198ae:	b002      	add	sp, #8
100198b0:	bd70      	pop	{r4, r5, r6, pc}
100198b2:	4622      	mov	r2, r4
100198b4:	4630      	mov	r0, r6
100198b6:	f007 f8f7 	bl	10020aa8 <__swbuf_r>
100198ba:	3001      	adds	r0, #1
100198bc:	d1f6      	bne.n	100198ac <__fputwc+0x4c>
100198be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100198c2:	b002      	add	sp, #8
100198c4:	bd70      	pop	{r4, r5, r6, pc}
100198c6:	f88d 5004 	strb.w	r5, [sp, #4]
100198ca:	e7df      	b.n	1001988c <__fputwc+0x2c>
100198cc:	89a3      	ldrh	r3, [r4, #12]
100198ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100198d2:	81a3      	strh	r3, [r4, #12]
100198d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100198d8:	e7f3      	b.n	100198c2 <__fputwc+0x62>
100198da:	bf00      	nop

100198dc <_fputwc_r>:
100198dc:	b530      	push	{r4, r5, lr}
100198de:	4614      	mov	r4, r2
100198e0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
100198e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100198e6:	4605      	mov	r5, r0
100198e8:	07d0      	lsls	r0, r2, #31
100198ea:	b083      	sub	sp, #12
100198ec:	d401      	bmi.n	100198f2 <_fputwc_r+0x16>
100198ee:	059a      	lsls	r2, r3, #22
100198f0:	d51c      	bpl.n	1001992c <_fputwc_r+0x50>
100198f2:	0498      	lsls	r0, r3, #18
100198f4:	d406      	bmi.n	10019904 <_fputwc_r+0x28>
100198f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100198f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
100198fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10019900:	81a3      	strh	r3, [r4, #12]
10019902:	6662      	str	r2, [r4, #100]	@ 0x64
10019904:	4622      	mov	r2, r4
10019906:	4628      	mov	r0, r5
10019908:	f7ff ffaa 	bl	10019860 <__fputwc>
1001990c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001990e:	07da      	lsls	r2, r3, #31
10019910:	4605      	mov	r5, r0
10019912:	d402      	bmi.n	1001991a <_fputwc_r+0x3e>
10019914:	89a3      	ldrh	r3, [r4, #12]
10019916:	059b      	lsls	r3, r3, #22
10019918:	d502      	bpl.n	10019920 <_fputwc_r+0x44>
1001991a:	4628      	mov	r0, r5
1001991c:	b003      	add	sp, #12
1001991e:	bd30      	pop	{r4, r5, pc}
10019920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10019922:	f000 fb7b 	bl	1001a01c <__retarget_lock_release_recursive>
10019926:	4628      	mov	r0, r5
10019928:	b003      	add	sp, #12
1001992a:	bd30      	pop	{r4, r5, pc}
1001992c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001992e:	9101      	str	r1, [sp, #4]
10019930:	f000 fb72 	bl	1001a018 <__retarget_lock_acquire_recursive>
10019934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019938:	9901      	ldr	r1, [sp, #4]
1001993a:	e7da      	b.n	100198f2 <_fputwc_r+0x16>

1001993c <memmove>:
1001993c:	4288      	cmp	r0, r1
1001993e:	d90e      	bls.n	1001995e <memmove+0x22>
10019940:	188b      	adds	r3, r1, r2
10019942:	4283      	cmp	r3, r0
10019944:	d90b      	bls.n	1001995e <memmove+0x22>
10019946:	eb00 0c02 	add.w	ip, r0, r2
1001994a:	2a00      	cmp	r2, #0
1001994c:	d06e      	beq.n	10019a2c <memmove+0xf0>
1001994e:	4662      	mov	r2, ip
10019950:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
10019954:	f802 cd01 	strb.w	ip, [r2, #-1]!
10019958:	4299      	cmp	r1, r3
1001995a:	d1f9      	bne.n	10019950 <memmove+0x14>
1001995c:	4770      	bx	lr
1001995e:	2a0f      	cmp	r2, #15
10019960:	d80f      	bhi.n	10019982 <memmove+0x46>
10019962:	4603      	mov	r3, r0
10019964:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
10019968:	2a00      	cmp	r2, #0
1001996a:	d05f      	beq.n	10019a2c <memmove+0xf0>
1001996c:	f10c 0c01 	add.w	ip, ip, #1
10019970:	3b01      	subs	r3, #1
10019972:	448c      	add	ip, r1
10019974:	f811 2b01 	ldrb.w	r2, [r1], #1
10019978:	f803 2f01 	strb.w	r2, [r3, #1]!
1001997c:	4561      	cmp	r1, ip
1001997e:	d1f9      	bne.n	10019974 <memmove+0x38>
10019980:	4770      	bx	lr
10019982:	ea40 0301 	orr.w	r3, r0, r1
10019986:	079b      	lsls	r3, r3, #30
10019988:	d151      	bne.n	10019a2e <memmove+0xf2>
1001998a:	f1a2 0310 	sub.w	r3, r2, #16
1001998e:	b570      	push	{r4, r5, r6, lr}
10019990:	f101 0c20 	add.w	ip, r1, #32
10019994:	f023 050f 	bic.w	r5, r3, #15
10019998:	f101 0e10 	add.w	lr, r1, #16
1001999c:	f100 0410 	add.w	r4, r0, #16
100199a0:	44ac      	add	ip, r5
100199a2:	091b      	lsrs	r3, r3, #4
100199a4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
100199a8:	f844 5c10 	str.w	r5, [r4, #-16]
100199ac:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
100199b0:	f844 5c0c 	str.w	r5, [r4, #-12]
100199b4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
100199b8:	f844 5c08 	str.w	r5, [r4, #-8]
100199bc:	f85e 5c04 	ldr.w	r5, [lr, #-4]
100199c0:	f844 5c04 	str.w	r5, [r4, #-4]
100199c4:	f10e 0e10 	add.w	lr, lr, #16
100199c8:	45e6      	cmp	lr, ip
100199ca:	f104 0410 	add.w	r4, r4, #16
100199ce:	d1e9      	bne.n	100199a4 <memmove+0x68>
100199d0:	3301      	adds	r3, #1
100199d2:	f012 0f0c 	tst.w	r2, #12
100199d6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
100199da:	f002 040f 	and.w	r4, r2, #15
100199de:	eb00 1303 	add.w	r3, r0, r3, lsl #4
100199e2:	d028      	beq.n	10019a36 <memmove+0xfa>
100199e4:	3c04      	subs	r4, #4
100199e6:	f024 0603 	bic.w	r6, r4, #3
100199ea:	ea4f 0c94 	mov.w	ip, r4, lsr #2
100199ee:	441e      	add	r6, r3
100199f0:	1f1c      	subs	r4, r3, #4
100199f2:	468e      	mov	lr, r1
100199f4:	f85e 5b04 	ldr.w	r5, [lr], #4
100199f8:	f844 5f04 	str.w	r5, [r4, #4]!
100199fc:	42b4      	cmp	r4, r6
100199fe:	d1f9      	bne.n	100199f4 <memmove+0xb8>
10019a00:	f10c 0401 	add.w	r4, ip, #1
10019a04:	f002 0203 	and.w	r2, r2, #3
10019a08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
10019a0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
10019a10:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
10019a14:	b14a      	cbz	r2, 10019a2a <memmove+0xee>
10019a16:	f10c 0c01 	add.w	ip, ip, #1
10019a1a:	3b01      	subs	r3, #1
10019a1c:	448c      	add	ip, r1
10019a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
10019a22:	f803 2f01 	strb.w	r2, [r3, #1]!
10019a26:	4561      	cmp	r1, ip
10019a28:	d1f9      	bne.n	10019a1e <memmove+0xe2>
10019a2a:	bd70      	pop	{r4, r5, r6, pc}
10019a2c:	4770      	bx	lr
10019a2e:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
10019a32:	4603      	mov	r3, r0
10019a34:	e79a      	b.n	1001996c <memmove+0x30>
10019a36:	4622      	mov	r2, r4
10019a38:	e7ea      	b.n	10019a10 <memmove+0xd4>
10019a3a:	bf00      	nop

10019a3c <memset>:
10019a3c:	0783      	lsls	r3, r0, #30
10019a3e:	b530      	push	{r4, r5, lr}
10019a40:	d047      	beq.n	10019ad2 <memset+0x96>
10019a42:	1e54      	subs	r4, r2, #1
10019a44:	2a00      	cmp	r2, #0
10019a46:	d03e      	beq.n	10019ac6 <memset+0x8a>
10019a48:	b2ca      	uxtb	r2, r1
10019a4a:	4603      	mov	r3, r0
10019a4c:	e001      	b.n	10019a52 <memset+0x16>
10019a4e:	3c01      	subs	r4, #1
10019a50:	d339      	bcc.n	10019ac6 <memset+0x8a>
10019a52:	f803 2b01 	strb.w	r2, [r3], #1
10019a56:	079d      	lsls	r5, r3, #30
10019a58:	d1f9      	bne.n	10019a4e <memset+0x12>
10019a5a:	2c03      	cmp	r4, #3
10019a5c:	d92c      	bls.n	10019ab8 <memset+0x7c>
10019a5e:	b2cd      	uxtb	r5, r1
10019a60:	eb05 2505 	add.w	r5, r5, r5, lsl #8
10019a64:	2c0f      	cmp	r4, #15
10019a66:	eb05 4505 	add.w	r5, r5, r5, lsl #16
10019a6a:	d935      	bls.n	10019ad8 <memset+0x9c>
10019a6c:	f1a4 0210 	sub.w	r2, r4, #16
10019a70:	f022 0c0f 	bic.w	ip, r2, #15
10019a74:	f103 0e10 	add.w	lr, r3, #16
10019a78:	44e6      	add	lr, ip
10019a7a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
10019a7e:	461a      	mov	r2, r3
10019a80:	6015      	str	r5, [r2, #0]
10019a82:	6055      	str	r5, [r2, #4]
10019a84:	6095      	str	r5, [r2, #8]
10019a86:	60d5      	str	r5, [r2, #12]
10019a88:	3210      	adds	r2, #16
10019a8a:	4572      	cmp	r2, lr
10019a8c:	d1f8      	bne.n	10019a80 <memset+0x44>
10019a8e:	f10c 0201 	add.w	r2, ip, #1
10019a92:	f014 0f0c 	tst.w	r4, #12
10019a96:	eb03 1202 	add.w	r2, r3, r2, lsl #4
10019a9a:	f004 0c0f 	and.w	ip, r4, #15
10019a9e:	d013      	beq.n	10019ac8 <memset+0x8c>
10019aa0:	f1ac 0304 	sub.w	r3, ip, #4
10019aa4:	f023 0303 	bic.w	r3, r3, #3
10019aa8:	3304      	adds	r3, #4
10019aaa:	4413      	add	r3, r2
10019aac:	f842 5b04 	str.w	r5, [r2], #4
10019ab0:	429a      	cmp	r2, r3
10019ab2:	d1fb      	bne.n	10019aac <memset+0x70>
10019ab4:	f00c 0403 	and.w	r4, ip, #3
10019ab8:	b12c      	cbz	r4, 10019ac6 <memset+0x8a>
10019aba:	b2c9      	uxtb	r1, r1
10019abc:	441c      	add	r4, r3
10019abe:	f803 1b01 	strb.w	r1, [r3], #1
10019ac2:	429c      	cmp	r4, r3
10019ac4:	d1fb      	bne.n	10019abe <memset+0x82>
10019ac6:	bd30      	pop	{r4, r5, pc}
10019ac8:	4664      	mov	r4, ip
10019aca:	4613      	mov	r3, r2
10019acc:	2c00      	cmp	r4, #0
10019ace:	d1f4      	bne.n	10019aba <memset+0x7e>
10019ad0:	e7f9      	b.n	10019ac6 <memset+0x8a>
10019ad2:	4603      	mov	r3, r0
10019ad4:	4614      	mov	r4, r2
10019ad6:	e7c0      	b.n	10019a5a <memset+0x1e>
10019ad8:	461a      	mov	r2, r3
10019ada:	46a4      	mov	ip, r4
10019adc:	e7e0      	b.n	10019aa0 <memset+0x64>
10019ade:	bf00      	nop

10019ae0 <strncmp>:
10019ae0:	b3b2      	cbz	r2, 10019b50 <strncmp+0x70>
10019ae2:	ea40 0301 	orr.w	r3, r0, r1
10019ae6:	079b      	lsls	r3, r3, #30
10019ae8:	b530      	push	{r4, r5, lr}
10019aea:	4684      	mov	ip, r0
10019aec:	d118      	bne.n	10019b20 <strncmp+0x40>
10019aee:	2a03      	cmp	r2, #3
10019af0:	d916      	bls.n	10019b20 <strncmp+0x40>
10019af2:	4604      	mov	r4, r0
10019af4:	460b      	mov	r3, r1
10019af6:	e006      	b.n	10019b06 <strncmp+0x26>
10019af8:	3a04      	subs	r2, #4
10019afa:	d02b      	beq.n	10019b54 <strncmp+0x74>
10019afc:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
10019b00:	d128      	bne.n	10019b54 <strncmp+0x74>
10019b02:	2a03      	cmp	r2, #3
10019b04:	d92a      	bls.n	10019b5c <strncmp+0x7c>
10019b06:	6820      	ldr	r0, [r4, #0]
10019b08:	4619      	mov	r1, r3
10019b0a:	f853 5b04 	ldr.w	r5, [r3], #4
10019b0e:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
10019b12:	42a8      	cmp	r0, r5
10019b14:	46a4      	mov	ip, r4
10019b16:	ea2e 0e00 	bic.w	lr, lr, r0
10019b1a:	f104 0404 	add.w	r4, r4, #4
10019b1e:	d0eb      	beq.n	10019af8 <strncmp+0x18>
10019b20:	f89c 0000 	ldrb.w	r0, [ip]
10019b24:	780c      	ldrb	r4, [r1, #0]
10019b26:	4284      	cmp	r4, r0
10019b28:	d116      	bne.n	10019b58 <strncmp+0x78>
10019b2a:	2a01      	cmp	r2, #1
10019b2c:	d012      	beq.n	10019b54 <strncmp+0x74>
10019b2e:	46e6      	mov	lr, ip
10019b30:	b168      	cbz	r0, 10019b4e <strncmp+0x6e>
10019b32:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
10019b36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10019b3a:	eba2 030e 	sub.w	r3, r2, lr
10019b3e:	42a0      	cmp	r0, r4
10019b40:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
10019b44:	d108      	bne.n	10019b58 <strncmp+0x78>
10019b46:	eb1c 0303 	adds.w	r3, ip, r3
10019b4a:	d1f1      	bne.n	10019b30 <strncmp+0x50>
10019b4c:	4618      	mov	r0, r3
10019b4e:	bd30      	pop	{r4, r5, pc}
10019b50:	4610      	mov	r0, r2
10019b52:	4770      	bx	lr
10019b54:	2000      	movs	r0, #0
10019b56:	bd30      	pop	{r4, r5, pc}
10019b58:	1b00      	subs	r0, r0, r4
10019b5a:	bd30      	pop	{r4, r5, pc}
10019b5c:	46a4      	mov	ip, r4
10019b5e:	4619      	mov	r1, r3
10019b60:	e7de      	b.n	10019b20 <strncmp+0x40>
10019b62:	bf00      	nop

10019b64 <strncpy>:
10019b64:	ea40 0301 	orr.w	r3, r0, r1
10019b68:	079b      	lsls	r3, r3, #30
10019b6a:	b510      	push	{r4, lr}
10019b6c:	d101      	bne.n	10019b72 <strncpy+0xe>
10019b6e:	2a03      	cmp	r2, #3
10019b70:	d817      	bhi.n	10019ba2 <strncpy+0x3e>
10019b72:	4684      	mov	ip, r0
10019b74:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
10019b78:	e007      	b.n	10019b8a <strncpy+0x26>
10019b7a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
10019b7e:	f803 1b01 	strb.w	r1, [r3], #1
10019b82:	1e54      	subs	r4, r2, #1
10019b84:	b129      	cbz	r1, 10019b92 <strncpy+0x2e>
10019b86:	469c      	mov	ip, r3
10019b88:	4622      	mov	r2, r4
10019b8a:	4663      	mov	r3, ip
10019b8c:	2a00      	cmp	r2, #0
10019b8e:	d1f4      	bne.n	10019b7a <strncpy+0x16>
10019b90:	bd10      	pop	{r4, pc}
10019b92:	4494      	add	ip, r2
10019b94:	2c00      	cmp	r4, #0
10019b96:	d0fb      	beq.n	10019b90 <strncpy+0x2c>
10019b98:	f803 1b01 	strb.w	r1, [r3], #1
10019b9c:	4563      	cmp	r3, ip
10019b9e:	d1fb      	bne.n	10019b98 <strncpy+0x34>
10019ba0:	bd10      	pop	{r4, pc}
10019ba2:	468e      	mov	lr, r1
10019ba4:	4684      	mov	ip, r0
10019ba6:	f8de 4000 	ldr.w	r4, [lr]
10019baa:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
10019bae:	ea23 0304 	bic.w	r3, r3, r4
10019bb2:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
10019bb6:	4671      	mov	r1, lr
10019bb8:	f10e 0e04 	add.w	lr, lr, #4
10019bbc:	d1da      	bne.n	10019b74 <strncpy+0x10>
10019bbe:	3a04      	subs	r2, #4
10019bc0:	2a03      	cmp	r2, #3
10019bc2:	f84c 4b04 	str.w	r4, [ip], #4
10019bc6:	d8ee      	bhi.n	10019ba6 <strncpy+0x42>
10019bc8:	4671      	mov	r1, lr
10019bca:	e7d3      	b.n	10019b74 <strncpy+0x10>

10019bcc <__locale_mb_cur_max>:
10019bcc:	4b01      	ldr	r3, [pc, #4]	@ (10019bd4 <__locale_mb_cur_max+0x8>)
10019bce:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
10019bd2:	4770      	bx	lr
10019bd4:	20000474 	.word	0x20000474

10019bd8 <_localeconv_r>:
10019bd8:	4800      	ldr	r0, [pc, #0]	@ (10019bdc <_localeconv_r+0x4>)
10019bda:	4770      	bx	lr
10019bdc:	20000564 	.word	0x20000564

10019be0 <_close_r>:
10019be0:	b538      	push	{r3, r4, r5, lr}
10019be2:	4d07      	ldr	r5, [pc, #28]	@ (10019c00 <_close_r+0x20>)
10019be4:	2200      	movs	r2, #0
10019be6:	4604      	mov	r4, r0
10019be8:	4608      	mov	r0, r1
10019bea:	602a      	str	r2, [r5, #0]
10019bec:	f7f9 fbf8 	bl	100133e0 <_close>
10019bf0:	1c43      	adds	r3, r0, #1
10019bf2:	d000      	beq.n	10019bf6 <_close_r+0x16>
10019bf4:	bd38      	pop	{r3, r4, r5, pc}
10019bf6:	682b      	ldr	r3, [r5, #0]
10019bf8:	2b00      	cmp	r3, #0
10019bfa:	d0fb      	beq.n	10019bf4 <_close_r+0x14>
10019bfc:	6023      	str	r3, [r4, #0]
10019bfe:	bd38      	pop	{r3, r4, r5, pc}
10019c00:	20001708 	.word	0x20001708

10019c04 <_lseek_r>:
10019c04:	b538      	push	{r3, r4, r5, lr}
10019c06:	460c      	mov	r4, r1
10019c08:	4d08      	ldr	r5, [pc, #32]	@ (10019c2c <_lseek_r+0x28>)
10019c0a:	4684      	mov	ip, r0
10019c0c:	4611      	mov	r1, r2
10019c0e:	4620      	mov	r0, r4
10019c10:	461a      	mov	r2, r3
10019c12:	2300      	movs	r3, #0
10019c14:	602b      	str	r3, [r5, #0]
10019c16:	4664      	mov	r4, ip
10019c18:	f7f9 fbe8 	bl	100133ec <_lseek>
10019c1c:	1c43      	adds	r3, r0, #1
10019c1e:	d000      	beq.n	10019c22 <_lseek_r+0x1e>
10019c20:	bd38      	pop	{r3, r4, r5, pc}
10019c22:	682b      	ldr	r3, [r5, #0]
10019c24:	2b00      	cmp	r3, #0
10019c26:	d0fb      	beq.n	10019c20 <_lseek_r+0x1c>
10019c28:	6023      	str	r3, [r4, #0]
10019c2a:	bd38      	pop	{r3, r4, r5, pc}
10019c2c:	20001708 	.word	0x20001708

10019c30 <_read_r>:
10019c30:	b538      	push	{r3, r4, r5, lr}
10019c32:	460c      	mov	r4, r1
10019c34:	4d08      	ldr	r5, [pc, #32]	@ (10019c58 <_read_r+0x28>)
10019c36:	4684      	mov	ip, r0
10019c38:	4611      	mov	r1, r2
10019c3a:	4620      	mov	r0, r4
10019c3c:	461a      	mov	r2, r3
10019c3e:	2300      	movs	r3, #0
10019c40:	602b      	str	r3, [r5, #0]
10019c42:	4664      	mov	r4, ip
10019c44:	f7f9 fbd8 	bl	100133f8 <_read>
10019c48:	1c43      	adds	r3, r0, #1
10019c4a:	d000      	beq.n	10019c4e <_read_r+0x1e>
10019c4c:	bd38      	pop	{r3, r4, r5, pc}
10019c4e:	682b      	ldr	r3, [r5, #0]
10019c50:	2b00      	cmp	r3, #0
10019c52:	d0fb      	beq.n	10019c4c <_read_r+0x1c>
10019c54:	6023      	str	r3, [r4, #0]
10019c56:	bd38      	pop	{r3, r4, r5, pc}
10019c58:	20001708 	.word	0x20001708

10019c5c <_sbrk_r>:
10019c5c:	b538      	push	{r3, r4, r5, lr}
10019c5e:	4d07      	ldr	r5, [pc, #28]	@ (10019c7c <_sbrk_r+0x20>)
10019c60:	2200      	movs	r2, #0
10019c62:	4604      	mov	r4, r0
10019c64:	4608      	mov	r0, r1
10019c66:	602a      	str	r2, [r5, #0]
10019c68:	f7f9 fd08 	bl	1001367c <_sbrk>
10019c6c:	1c43      	adds	r3, r0, #1
10019c6e:	d000      	beq.n	10019c72 <_sbrk_r+0x16>
10019c70:	bd38      	pop	{r3, r4, r5, pc}
10019c72:	682b      	ldr	r3, [r5, #0]
10019c74:	2b00      	cmp	r3, #0
10019c76:	d0fb      	beq.n	10019c70 <_sbrk_r+0x14>
10019c78:	6023      	str	r3, [r4, #0]
10019c7a:	bd38      	pop	{r3, r4, r5, pc}
10019c7c:	20001708 	.word	0x20001708

10019c80 <_write_r>:
10019c80:	b538      	push	{r3, r4, r5, lr}
10019c82:	460c      	mov	r4, r1
10019c84:	4d08      	ldr	r5, [pc, #32]	@ (10019ca8 <_write_r+0x28>)
10019c86:	4684      	mov	ip, r0
10019c88:	4611      	mov	r1, r2
10019c8a:	4620      	mov	r0, r4
10019c8c:	461a      	mov	r2, r3
10019c8e:	2300      	movs	r3, #0
10019c90:	602b      	str	r3, [r5, #0]
10019c92:	4664      	mov	r4, ip
10019c94:	f7f9 fbd8 	bl	10013448 <_write>
10019c98:	1c43      	adds	r3, r0, #1
10019c9a:	d000      	beq.n	10019c9e <_write_r+0x1e>
10019c9c:	bd38      	pop	{r3, r4, r5, pc}
10019c9e:	682b      	ldr	r3, [r5, #0]
10019ca0:	2b00      	cmp	r3, #0
10019ca2:	d0fb      	beq.n	10019c9c <_write_r+0x1c>
10019ca4:	6023      	str	r3, [r4, #0]
10019ca6:	bd38      	pop	{r3, r4, r5, pc}
10019ca8:	20001708 	.word	0x20001708

10019cac <__errno>:
10019cac:	4b01      	ldr	r3, [pc, #4]	@ (10019cb4 <__errno+0x8>)
10019cae:	6818      	ldr	r0, [r3, #0]
10019cb0:	4770      	bx	lr
10019cb2:	bf00      	nop
10019cb4:	200005e0 	.word	0x200005e0

10019cb8 <sysconf>:
10019cb8:	2808      	cmp	r0, #8
10019cba:	d102      	bne.n	10019cc2 <sysconf+0xa>
10019cbc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
10019cc0:	4770      	bx	lr
10019cc2:	b508      	push	{r3, lr}
10019cc4:	f7ff fff2 	bl	10019cac <__errno>
10019cc8:	2316      	movs	r3, #22
10019cca:	6003      	str	r3, [r0, #0]
10019ccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10019cd0:	bd08      	pop	{r3, pc}
10019cd2:	bf00      	nop
	...

10019ce0 <strcmp>:
10019ce0:	7802      	ldrb	r2, [r0, #0]
10019ce2:	780b      	ldrb	r3, [r1, #0]
10019ce4:	2a01      	cmp	r2, #1
10019ce6:	bf28      	it	cs
10019ce8:	429a      	cmpcs	r2, r3
10019cea:	f040 80d8 	bne.w	10019e9e <strcmp+0x1be>
10019cee:	e96d 4504 	strd	r4, r5, [sp, #-16]!
10019cf2:	ea40 0401 	orr.w	r4, r0, r1
10019cf6:	e9cd 6702 	strd	r6, r7, [sp, #8]
10019cfa:	f06f 0c00 	mvn.w	ip, #0
10019cfe:	ea4f 7244 	mov.w	r2, r4, lsl #29
10019d02:	b31a      	cbz	r2, 10019d4c <strcmp+0x6c>
10019d04:	ea80 0401 	eor.w	r4, r0, r1
10019d08:	f014 0f07 	tst.w	r4, #7
10019d0c:	d16b      	bne.n	10019de6 <strcmp+0x106>
10019d0e:	f000 0407 	and.w	r4, r0, #7
10019d12:	f020 0007 	bic.w	r0, r0, #7
10019d16:	f004 0503 	and.w	r5, r4, #3
10019d1a:	f021 0107 	bic.w	r1, r1, #7
10019d1e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
10019d22:	e8f0 2304 	ldrd	r2, r3, [r0], #16
10019d26:	f014 0f04 	tst.w	r4, #4
10019d2a:	e8f1 6704 	ldrd	r6, r7, [r1], #16
10019d2e:	fa0c f405 	lsl.w	r4, ip, r5
10019d32:	ea62 0204 	orn	r2, r2, r4
10019d36:	ea66 0604 	orn	r6, r6, r4
10019d3a:	d00b      	beq.n	10019d54 <strcmp+0x74>
10019d3c:	ea63 0304 	orn	r3, r3, r4
10019d40:	4662      	mov	r2, ip
10019d42:	ea67 0704 	orn	r7, r7, r4
10019d46:	4666      	mov	r6, ip
10019d48:	e004      	b.n	10019d54 <strcmp+0x74>
10019d4a:	bf00      	nop
10019d4c:	e8f0 2304 	ldrd	r2, r3, [r0], #16
10019d50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
10019d54:	fa82 f54c 	uadd8	r5, r2, ip
10019d58:	ea82 0406 	eor.w	r4, r2, r6
10019d5c:	faa4 f48c 	sel	r4, r4, ip
10019d60:	bb6c      	cbnz	r4, 10019dbe <strcmp+0xde>
10019d62:	fa83 f54c 	uadd8	r5, r3, ip
10019d66:	ea83 0507 	eor.w	r5, r3, r7
10019d6a:	faa5 f58c 	sel	r5, r5, ip
10019d6e:	b995      	cbnz	r5, 10019d96 <strcmp+0xb6>
10019d70:	e950 2302 	ldrd	r2, r3, [r0, #-8]
10019d74:	e951 6702 	ldrd	r6, r7, [r1, #-8]
10019d78:	fa82 f54c 	uadd8	r5, r2, ip
10019d7c:	ea82 0406 	eor.w	r4, r2, r6
10019d80:	faa4 f48c 	sel	r4, r4, ip
10019d84:	fa83 f54c 	uadd8	r5, r3, ip
10019d88:	ea83 0507 	eor.w	r5, r3, r7
10019d8c:	faa5 f58c 	sel	r5, r5, ip
10019d90:	4325      	orrs	r5, r4
10019d92:	d0db      	beq.n	10019d4c <strcmp+0x6c>
10019d94:	b99c      	cbnz	r4, 10019dbe <strcmp+0xde>
10019d96:	ba2d      	rev	r5, r5
10019d98:	fab5 f485 	clz	r4, r5
10019d9c:	f024 0407 	bic.w	r4, r4, #7
10019da0:	fa27 f104 	lsr.w	r1, r7, r4
10019da4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10019da8:	fa23 f304 	lsr.w	r3, r3, r4
10019dac:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
10019db0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10019db4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019db8:	eba0 0001 	sub.w	r0, r0, r1
10019dbc:	4770      	bx	lr
10019dbe:	ba24      	rev	r4, r4
10019dc0:	fab4 f484 	clz	r4, r4
10019dc4:	f024 0407 	bic.w	r4, r4, #7
10019dc8:	fa26 f104 	lsr.w	r1, r6, r4
10019dcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10019dd0:	fa22 f204 	lsr.w	r2, r2, r4
10019dd4:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
10019dd8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10019ddc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019de0:	eba0 0001 	sub.w	r0, r0, r1
10019de4:	4770      	bx	lr
10019de6:	f014 0f03 	tst.w	r4, #3
10019dea:	d13c      	bne.n	10019e66 <strcmp+0x186>
10019dec:	f010 0403 	ands.w	r4, r0, #3
10019df0:	d128      	bne.n	10019e44 <strcmp+0x164>
10019df2:	f850 2b08 	ldr.w	r2, [r0], #8
10019df6:	f851 3b08 	ldr.w	r3, [r1], #8
10019dfa:	fa82 f54c 	uadd8	r5, r2, ip
10019dfe:	ea82 0503 	eor.w	r5, r2, r3
10019e02:	faa5 f58c 	sel	r5, r5, ip
10019e06:	b95d      	cbnz	r5, 10019e20 <strcmp+0x140>
10019e08:	f850 2c04 	ldr.w	r2, [r0, #-4]
10019e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
10019e10:	fa82 f54c 	uadd8	r5, r2, ip
10019e14:	ea82 0503 	eor.w	r5, r2, r3
10019e18:	faa5 f58c 	sel	r5, r5, ip
10019e1c:	2d00      	cmp	r5, #0
10019e1e:	d0e8      	beq.n	10019df2 <strcmp+0x112>
10019e20:	ba2d      	rev	r5, r5
10019e22:	fab5 f485 	clz	r4, r5
10019e26:	f024 0407 	bic.w	r4, r4, #7
10019e2a:	fa23 f104 	lsr.w	r1, r3, r4
10019e2e:	fa22 f204 	lsr.w	r2, r2, r4
10019e32:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
10019e36:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10019e3a:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019e3e:	eba0 0001 	sub.w	r0, r0, r1
10019e42:	4770      	bx	lr
10019e44:	ea4f 04c4 	mov.w	r4, r4, lsl #3
10019e48:	f020 0003 	bic.w	r0, r0, #3
10019e4c:	f850 2b08 	ldr.w	r2, [r0], #8
10019e50:	f021 0103 	bic.w	r1, r1, #3
10019e54:	f851 3b08 	ldr.w	r3, [r1], #8
10019e58:	fa0c f404 	lsl.w	r4, ip, r4
10019e5c:	ea62 0204 	orn	r2, r2, r4
10019e60:	ea63 0304 	orn	r3, r3, r4
10019e64:	e7c9      	b.n	10019dfa <strcmp+0x11a>
10019e66:	f010 0403 	ands.w	r4, r0, #3
10019e6a:	d01d      	beq.n	10019ea8 <strcmp+0x1c8>
10019e6c:	eba1 0104 	sub.w	r1, r1, r4
10019e70:	f020 0003 	bic.w	r0, r0, #3
10019e74:	07e4      	lsls	r4, r4, #31
10019e76:	f850 2b04 	ldr.w	r2, [r0], #4
10019e7a:	d006      	beq.n	10019e8a <strcmp+0x1aa>
10019e7c:	d212      	bcs.n	10019ea4 <strcmp+0x1c4>
10019e7e:	788b      	ldrb	r3, [r1, #2]
10019e80:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
10019e84:	1ae4      	subs	r4, r4, r3
10019e86:	d106      	bne.n	10019e96 <strcmp+0x1b6>
10019e88:	b12b      	cbz	r3, 10019e96 <strcmp+0x1b6>
10019e8a:	78cb      	ldrb	r3, [r1, #3]
10019e8c:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
10019e90:	1ae4      	subs	r4, r4, r3
10019e92:	d100      	bne.n	10019e96 <strcmp+0x1b6>
10019e94:	b933      	cbnz	r3, 10019ea4 <strcmp+0x1c4>
10019e96:	4620      	mov	r0, r4
10019e98:	f85d 4b10 	ldr.w	r4, [sp], #16
10019e9c:	4770      	bx	lr
10019e9e:	eba2 0003 	sub.w	r0, r2, r3
10019ea2:	4770      	bx	lr
10019ea4:	f101 0104 	add.w	r1, r1, #4
10019ea8:	f850 2b04 	ldr.w	r2, [r0], #4
10019eac:	07cc      	lsls	r4, r1, #31
10019eae:	f021 0103 	bic.w	r1, r1, #3
10019eb2:	f851 3b04 	ldr.w	r3, [r1], #4
10019eb6:	d848      	bhi.n	10019f4a <strcmp+0x26a>
10019eb8:	d224      	bcs.n	10019f04 <strcmp+0x224>
10019eba:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
10019ebe:	fa82 f54c 	uadd8	r5, r2, ip
10019ec2:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
10019ec6:	faa5 f58c 	sel	r5, r5, ip
10019eca:	d10a      	bne.n	10019ee2 <strcmp+0x202>
10019ecc:	b965      	cbnz	r5, 10019ee8 <strcmp+0x208>
10019ece:	f851 3b04 	ldr.w	r3, [r1], #4
10019ed2:	ea84 0402 	eor.w	r4, r4, r2
10019ed6:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
10019eda:	d10e      	bne.n	10019efa <strcmp+0x21a>
10019edc:	f850 2b04 	ldr.w	r2, [r0], #4
10019ee0:	e7eb      	b.n	10019eba <strcmp+0x1da>
10019ee2:	ea4f 2313 	mov.w	r3, r3, lsr #8
10019ee6:	e055      	b.n	10019f94 <strcmp+0x2b4>
10019ee8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
10019eec:	d14d      	bne.n	10019f8a <strcmp+0x2aa>
10019eee:	7808      	ldrb	r0, [r1, #0]
10019ef0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019ef4:	f1c0 0000 	rsb	r0, r0, #0
10019ef8:	4770      	bx	lr
10019efa:	ea4f 6212 	mov.w	r2, r2, lsr #24
10019efe:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
10019f02:	e047      	b.n	10019f94 <strcmp+0x2b4>
10019f04:	ea02 441c 	and.w	r4, r2, ip, lsr #16
10019f08:	fa82 f54c 	uadd8	r5, r2, ip
10019f0c:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
10019f10:	faa5 f58c 	sel	r5, r5, ip
10019f14:	d10a      	bne.n	10019f2c <strcmp+0x24c>
10019f16:	b965      	cbnz	r5, 10019f32 <strcmp+0x252>
10019f18:	f851 3b04 	ldr.w	r3, [r1], #4
10019f1c:	ea84 0402 	eor.w	r4, r4, r2
10019f20:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
10019f24:	d10c      	bne.n	10019f40 <strcmp+0x260>
10019f26:	f850 2b04 	ldr.w	r2, [r0], #4
10019f2a:	e7eb      	b.n	10019f04 <strcmp+0x224>
10019f2c:	ea4f 4313 	mov.w	r3, r3, lsr #16
10019f30:	e030      	b.n	10019f94 <strcmp+0x2b4>
10019f32:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
10019f36:	d128      	bne.n	10019f8a <strcmp+0x2aa>
10019f38:	880b      	ldrh	r3, [r1, #0]
10019f3a:	ea4f 4212 	mov.w	r2, r2, lsr #16
10019f3e:	e029      	b.n	10019f94 <strcmp+0x2b4>
10019f40:	ea4f 4212 	mov.w	r2, r2, lsr #16
10019f44:	ea03 431c 	and.w	r3, r3, ip, lsr #16
10019f48:	e024      	b.n	10019f94 <strcmp+0x2b4>
10019f4a:	f002 04ff 	and.w	r4, r2, #255	@ 0xff
10019f4e:	fa82 f54c 	uadd8	r5, r2, ip
10019f52:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
10019f56:	faa5 f58c 	sel	r5, r5, ip
10019f5a:	d10a      	bne.n	10019f72 <strcmp+0x292>
10019f5c:	b965      	cbnz	r5, 10019f78 <strcmp+0x298>
10019f5e:	f851 3b04 	ldr.w	r3, [r1], #4
10019f62:	ea84 0402 	eor.w	r4, r4, r2
10019f66:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
10019f6a:	d109      	bne.n	10019f80 <strcmp+0x2a0>
10019f6c:	f850 2b04 	ldr.w	r2, [r0], #4
10019f70:	e7eb      	b.n	10019f4a <strcmp+0x26a>
10019f72:	ea4f 6313 	mov.w	r3, r3, lsr #24
10019f76:	e00d      	b.n	10019f94 <strcmp+0x2b4>
10019f78:	f015 0fff 	tst.w	r5, #255	@ 0xff
10019f7c:	d105      	bne.n	10019f8a <strcmp+0x2aa>
10019f7e:	680b      	ldr	r3, [r1, #0]
10019f80:	ea4f 2212 	mov.w	r2, r2, lsr #8
10019f84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
10019f88:	e004      	b.n	10019f94 <strcmp+0x2b4>
10019f8a:	f04f 0000 	mov.w	r0, #0
10019f8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019f92:	4770      	bx	lr
10019f94:	ba12      	rev	r2, r2
10019f96:	ba1b      	rev	r3, r3
10019f98:	fa82 f44c 	uadd8	r4, r2, ip
10019f9c:	ea82 0403 	eor.w	r4, r2, r3
10019fa0:	faa4 f58c 	sel	r5, r4, ip
10019fa4:	fab5 f485 	clz	r4, r5
10019fa8:	fa02 f204 	lsl.w	r2, r2, r4
10019fac:	fa03 f304 	lsl.w	r3, r3, r4
10019fb0:	ea4f 6012 	mov.w	r0, r2, lsr #24
10019fb4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019fb8:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
10019fbc:	4770      	bx	lr
10019fbe:	bf00      	nop

10019fc0 <__libc_init_array>:
10019fc0:	b570      	push	{r4, r5, r6, lr}
10019fc2:	4b0f      	ldr	r3, [pc, #60]	@ (1001a000 <__libc_init_array+0x40>)
10019fc4:	4d0f      	ldr	r5, [pc, #60]	@ (1001a004 <__libc_init_array+0x44>)
10019fc6:	42ab      	cmp	r3, r5
10019fc8:	eba3 0605 	sub.w	r6, r3, r5
10019fcc:	d007      	beq.n	10019fde <__libc_init_array+0x1e>
10019fce:	10b6      	asrs	r6, r6, #2
10019fd0:	2400      	movs	r4, #0
10019fd2:	f855 3b04 	ldr.w	r3, [r5], #4
10019fd6:	3401      	adds	r4, #1
10019fd8:	4798      	blx	r3
10019fda:	42a6      	cmp	r6, r4
10019fdc:	d8f9      	bhi.n	10019fd2 <__libc_init_array+0x12>
10019fde:	f019 f919 	bl	10033214 <_init>
10019fe2:	4d09      	ldr	r5, [pc, #36]	@ (1001a008 <__libc_init_array+0x48>)
10019fe4:	4b09      	ldr	r3, [pc, #36]	@ (1001a00c <__libc_init_array+0x4c>)
10019fe6:	1b5e      	subs	r6, r3, r5
10019fe8:	42ab      	cmp	r3, r5
10019fea:	ea4f 06a6 	mov.w	r6, r6, asr #2
10019fee:	d006      	beq.n	10019ffe <__libc_init_array+0x3e>
10019ff0:	2400      	movs	r4, #0
10019ff2:	f855 3b04 	ldr.w	r3, [r5], #4
10019ff6:	3401      	adds	r4, #1
10019ff8:	4798      	blx	r3
10019ffa:	42a6      	cmp	r6, r4
10019ffc:	d8f9      	bhi.n	10019ff2 <__libc_init_array+0x32>
10019ffe:	bd70      	pop	{r4, r5, r6, pc}
1001a000:	20000ad0 	.word	0x20000ad0
1001a004:	20000ad0 	.word	0x20000ad0
1001a008:	20000ad0 	.word	0x20000ad0
1001a00c:	20000ad8 	.word	0x20000ad8

1001a010 <__retarget_lock_init_recursive>:
1001a010:	4770      	bx	lr
1001a012:	bf00      	nop

1001a014 <__retarget_lock_close_recursive>:
1001a014:	4770      	bx	lr
1001a016:	bf00      	nop

1001a018 <__retarget_lock_acquire_recursive>:
1001a018:	4770      	bx	lr
1001a01a:	bf00      	nop

1001a01c <__retarget_lock_release_recursive>:
1001a01c:	4770      	bx	lr
1001a01e:	bf00      	nop

1001a020 <memchr>:
1001a020:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1001a024:	2a10      	cmp	r2, #16
1001a026:	db2b      	blt.n	1001a080 <memchr+0x60>
1001a028:	f010 0f07 	tst.w	r0, #7
1001a02c:	d008      	beq.n	1001a040 <memchr+0x20>
1001a02e:	f810 3b01 	ldrb.w	r3, [r0], #1
1001a032:	3a01      	subs	r2, #1
1001a034:	428b      	cmp	r3, r1
1001a036:	d02d      	beq.n	1001a094 <memchr+0x74>
1001a038:	f010 0f07 	tst.w	r0, #7
1001a03c:	b342      	cbz	r2, 1001a090 <memchr+0x70>
1001a03e:	d1f6      	bne.n	1001a02e <memchr+0xe>
1001a040:	b4f0      	push	{r4, r5, r6, r7}
1001a042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1001a046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1001a04a:	f022 0407 	bic.w	r4, r2, #7
1001a04e:	f07f 0700 	mvns.w	r7, #0
1001a052:	2300      	movs	r3, #0
1001a054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1001a058:	3c08      	subs	r4, #8
1001a05a:	ea85 0501 	eor.w	r5, r5, r1
1001a05e:	ea86 0601 	eor.w	r6, r6, r1
1001a062:	fa85 f547 	uadd8	r5, r5, r7
1001a066:	faa3 f587 	sel	r5, r3, r7
1001a06a:	fa86 f647 	uadd8	r6, r6, r7
1001a06e:	faa5 f687 	sel	r6, r5, r7
1001a072:	b98e      	cbnz	r6, 1001a098 <memchr+0x78>
1001a074:	d1ee      	bne.n	1001a054 <memchr+0x34>
1001a076:	bcf0      	pop	{r4, r5, r6, r7}
1001a078:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1001a07c:	f002 0207 	and.w	r2, r2, #7
1001a080:	b132      	cbz	r2, 1001a090 <memchr+0x70>
1001a082:	f810 3b01 	ldrb.w	r3, [r0], #1
1001a086:	3a01      	subs	r2, #1
1001a088:	ea83 0301 	eor.w	r3, r3, r1
1001a08c:	b113      	cbz	r3, 1001a094 <memchr+0x74>
1001a08e:	d1f8      	bne.n	1001a082 <memchr+0x62>
1001a090:	2000      	movs	r0, #0
1001a092:	4770      	bx	lr
1001a094:	3801      	subs	r0, #1
1001a096:	4770      	bx	lr
1001a098:	2d00      	cmp	r5, #0
1001a09a:	bf06      	itte	eq
1001a09c:	4635      	moveq	r5, r6
1001a09e:	3803      	subeq	r0, #3
1001a0a0:	3807      	subne	r0, #7
1001a0a2:	f015 0f01 	tst.w	r5, #1
1001a0a6:	d107      	bne.n	1001a0b8 <memchr+0x98>
1001a0a8:	3001      	adds	r0, #1
1001a0aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
1001a0ae:	bf02      	ittt	eq
1001a0b0:	3001      	addeq	r0, #1
1001a0b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
1001a0b6:	3001      	addeq	r0, #1
1001a0b8:	bcf0      	pop	{r4, r5, r6, r7}
1001a0ba:	3801      	subs	r0, #1
1001a0bc:	4770      	bx	lr
1001a0be:	bf00      	nop

1001a0c0 <memcpy>:
1001a0c0:	4684      	mov	ip, r0
1001a0c2:	ea41 0300 	orr.w	r3, r1, r0
1001a0c6:	f013 0303 	ands.w	r3, r3, #3
1001a0ca:	d16d      	bne.n	1001a1a8 <memcpy+0xe8>
1001a0cc:	3a40      	subs	r2, #64	@ 0x40
1001a0ce:	d341      	bcc.n	1001a154 <memcpy+0x94>
1001a0d0:	f851 3b04 	ldr.w	r3, [r1], #4
1001a0d4:	f840 3b04 	str.w	r3, [r0], #4
1001a0d8:	f851 3b04 	ldr.w	r3, [r1], #4
1001a0dc:	f840 3b04 	str.w	r3, [r0], #4
1001a0e0:	f851 3b04 	ldr.w	r3, [r1], #4
1001a0e4:	f840 3b04 	str.w	r3, [r0], #4
1001a0e8:	f851 3b04 	ldr.w	r3, [r1], #4
1001a0ec:	f840 3b04 	str.w	r3, [r0], #4
1001a0f0:	f851 3b04 	ldr.w	r3, [r1], #4
1001a0f4:	f840 3b04 	str.w	r3, [r0], #4
1001a0f8:	f851 3b04 	ldr.w	r3, [r1], #4
1001a0fc:	f840 3b04 	str.w	r3, [r0], #4
1001a100:	f851 3b04 	ldr.w	r3, [r1], #4
1001a104:	f840 3b04 	str.w	r3, [r0], #4
1001a108:	f851 3b04 	ldr.w	r3, [r1], #4
1001a10c:	f840 3b04 	str.w	r3, [r0], #4
1001a110:	f851 3b04 	ldr.w	r3, [r1], #4
1001a114:	f840 3b04 	str.w	r3, [r0], #4
1001a118:	f851 3b04 	ldr.w	r3, [r1], #4
1001a11c:	f840 3b04 	str.w	r3, [r0], #4
1001a120:	f851 3b04 	ldr.w	r3, [r1], #4
1001a124:	f840 3b04 	str.w	r3, [r0], #4
1001a128:	f851 3b04 	ldr.w	r3, [r1], #4
1001a12c:	f840 3b04 	str.w	r3, [r0], #4
1001a130:	f851 3b04 	ldr.w	r3, [r1], #4
1001a134:	f840 3b04 	str.w	r3, [r0], #4
1001a138:	f851 3b04 	ldr.w	r3, [r1], #4
1001a13c:	f840 3b04 	str.w	r3, [r0], #4
1001a140:	f851 3b04 	ldr.w	r3, [r1], #4
1001a144:	f840 3b04 	str.w	r3, [r0], #4
1001a148:	f851 3b04 	ldr.w	r3, [r1], #4
1001a14c:	f840 3b04 	str.w	r3, [r0], #4
1001a150:	3a40      	subs	r2, #64	@ 0x40
1001a152:	d2bd      	bcs.n	1001a0d0 <memcpy+0x10>
1001a154:	3230      	adds	r2, #48	@ 0x30
1001a156:	d311      	bcc.n	1001a17c <memcpy+0xbc>
1001a158:	f851 3b04 	ldr.w	r3, [r1], #4
1001a15c:	f840 3b04 	str.w	r3, [r0], #4
1001a160:	f851 3b04 	ldr.w	r3, [r1], #4
1001a164:	f840 3b04 	str.w	r3, [r0], #4
1001a168:	f851 3b04 	ldr.w	r3, [r1], #4
1001a16c:	f840 3b04 	str.w	r3, [r0], #4
1001a170:	f851 3b04 	ldr.w	r3, [r1], #4
1001a174:	f840 3b04 	str.w	r3, [r0], #4
1001a178:	3a10      	subs	r2, #16
1001a17a:	d2ed      	bcs.n	1001a158 <memcpy+0x98>
1001a17c:	320c      	adds	r2, #12
1001a17e:	d305      	bcc.n	1001a18c <memcpy+0xcc>
1001a180:	f851 3b04 	ldr.w	r3, [r1], #4
1001a184:	f840 3b04 	str.w	r3, [r0], #4
1001a188:	3a04      	subs	r2, #4
1001a18a:	d2f9      	bcs.n	1001a180 <memcpy+0xc0>
1001a18c:	3204      	adds	r2, #4
1001a18e:	d008      	beq.n	1001a1a2 <memcpy+0xe2>
1001a190:	07d2      	lsls	r2, r2, #31
1001a192:	bf1c      	itt	ne
1001a194:	f811 3b01 	ldrbne.w	r3, [r1], #1
1001a198:	f800 3b01 	strbne.w	r3, [r0], #1
1001a19c:	d301      	bcc.n	1001a1a2 <memcpy+0xe2>
1001a19e:	880b      	ldrh	r3, [r1, #0]
1001a1a0:	8003      	strh	r3, [r0, #0]
1001a1a2:	4660      	mov	r0, ip
1001a1a4:	4770      	bx	lr
1001a1a6:	bf00      	nop
1001a1a8:	2a08      	cmp	r2, #8
1001a1aa:	d313      	bcc.n	1001a1d4 <memcpy+0x114>
1001a1ac:	078b      	lsls	r3, r1, #30
1001a1ae:	d08d      	beq.n	1001a0cc <memcpy+0xc>
1001a1b0:	f010 0303 	ands.w	r3, r0, #3
1001a1b4:	d08a      	beq.n	1001a0cc <memcpy+0xc>
1001a1b6:	f1c3 0304 	rsb	r3, r3, #4
1001a1ba:	1ad2      	subs	r2, r2, r3
1001a1bc:	07db      	lsls	r3, r3, #31
1001a1be:	bf1c      	itt	ne
1001a1c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
1001a1c4:	f800 3b01 	strbne.w	r3, [r0], #1
1001a1c8:	d380      	bcc.n	1001a0cc <memcpy+0xc>
1001a1ca:	f831 3b02 	ldrh.w	r3, [r1], #2
1001a1ce:	f820 3b02 	strh.w	r3, [r0], #2
1001a1d2:	e77b      	b.n	1001a0cc <memcpy+0xc>
1001a1d4:	3a04      	subs	r2, #4
1001a1d6:	d3d9      	bcc.n	1001a18c <memcpy+0xcc>
1001a1d8:	3a01      	subs	r2, #1
1001a1da:	f811 3b01 	ldrb.w	r3, [r1], #1
1001a1de:	f800 3b01 	strb.w	r3, [r0], #1
1001a1e2:	d2f9      	bcs.n	1001a1d8 <memcpy+0x118>
1001a1e4:	780b      	ldrb	r3, [r1, #0]
1001a1e6:	7003      	strb	r3, [r0, #0]
1001a1e8:	784b      	ldrb	r3, [r1, #1]
1001a1ea:	7043      	strb	r3, [r0, #1]
1001a1ec:	788b      	ldrb	r3, [r1, #2]
1001a1ee:	7083      	strb	r3, [r0, #2]
1001a1f0:	4660      	mov	r0, ip
1001a1f2:	4770      	bx	lr
	...

1001a200 <strlen>:
1001a200:	b430      	push	{r4, r5}
1001a202:	f890 f000 	pld	[r0]
1001a206:	f020 0107 	bic.w	r1, r0, #7
1001a20a:	f06f 0c00 	mvn.w	ip, #0
1001a20e:	f010 0407 	ands.w	r4, r0, #7
1001a212:	f891 f020 	pld	[r1, #32]
1001a216:	f040 8048 	bne.w	1001a2aa <strlen+0xaa>
1001a21a:	f04f 0400 	mov.w	r4, #0
1001a21e:	f06f 0007 	mvn.w	r0, #7
1001a222:	e9d1 2300 	ldrd	r2, r3, [r1]
1001a226:	f891 f040 	pld	[r1, #64]	@ 0x40
1001a22a:	f100 0008 	add.w	r0, r0, #8
1001a22e:	fa82 f24c 	uadd8	r2, r2, ip
1001a232:	faa4 f28c 	sel	r2, r4, ip
1001a236:	fa83 f34c 	uadd8	r3, r3, ip
1001a23a:	faa2 f38c 	sel	r3, r2, ip
1001a23e:	bb4b      	cbnz	r3, 1001a294 <strlen+0x94>
1001a240:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1001a244:	fa82 f24c 	uadd8	r2, r2, ip
1001a248:	f100 0008 	add.w	r0, r0, #8
1001a24c:	faa4 f28c 	sel	r2, r4, ip
1001a250:	fa83 f34c 	uadd8	r3, r3, ip
1001a254:	faa2 f38c 	sel	r3, r2, ip
1001a258:	b9e3      	cbnz	r3, 1001a294 <strlen+0x94>
1001a25a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1001a25e:	fa82 f24c 	uadd8	r2, r2, ip
1001a262:	f100 0008 	add.w	r0, r0, #8
1001a266:	faa4 f28c 	sel	r2, r4, ip
1001a26a:	fa83 f34c 	uadd8	r3, r3, ip
1001a26e:	faa2 f38c 	sel	r3, r2, ip
1001a272:	b97b      	cbnz	r3, 1001a294 <strlen+0x94>
1001a274:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1001a278:	f101 0120 	add.w	r1, r1, #32
1001a27c:	fa82 f24c 	uadd8	r2, r2, ip
1001a280:	f100 0008 	add.w	r0, r0, #8
1001a284:	faa4 f28c 	sel	r2, r4, ip
1001a288:	fa83 f34c 	uadd8	r3, r3, ip
1001a28c:	faa2 f38c 	sel	r3, r2, ip
1001a290:	2b00      	cmp	r3, #0
1001a292:	d0c6      	beq.n	1001a222 <strlen+0x22>
1001a294:	2a00      	cmp	r2, #0
1001a296:	bf04      	itt	eq
1001a298:	3004      	addeq	r0, #4
1001a29a:	461a      	moveq	r2, r3
1001a29c:	ba12      	rev	r2, r2
1001a29e:	fab2 f282 	clz	r2, r2
1001a2a2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1001a2a6:	bc30      	pop	{r4, r5}
1001a2a8:	4770      	bx	lr
1001a2aa:	e9d1 2300 	ldrd	r2, r3, [r1]
1001a2ae:	f004 0503 	and.w	r5, r4, #3
1001a2b2:	f1c4 0000 	rsb	r0, r4, #0
1001a2b6:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1001a2ba:	f014 0f04 	tst.w	r4, #4
1001a2be:	f891 f040 	pld	[r1, #64]	@ 0x40
1001a2c2:	fa0c f505 	lsl.w	r5, ip, r5
1001a2c6:	ea62 0205 	orn	r2, r2, r5
1001a2ca:	bf1c      	itt	ne
1001a2cc:	ea63 0305 	ornne	r3, r3, r5
1001a2d0:	4662      	movne	r2, ip
1001a2d2:	f04f 0400 	mov.w	r4, #0
1001a2d6:	e7aa      	b.n	1001a22e <strlen+0x2e>

1001a2d8 <_wcrtomb_r>:
1001a2d8:	b570      	push	{r4, r5, r6, lr}
1001a2da:	4605      	mov	r5, r0
1001a2dc:	b084      	sub	sp, #16
1001a2de:	b15b      	cbz	r3, 1001a2f8 <_wcrtomb_r+0x20>
1001a2e0:	461c      	mov	r4, r3
1001a2e2:	4b0f      	ldr	r3, [pc, #60]	@ (1001a320 <_wcrtomb_r+0x48>)
1001a2e4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
1001a2e8:	4623      	mov	r3, r4
1001a2ea:	b169      	cbz	r1, 1001a308 <_wcrtomb_r+0x30>
1001a2ec:	4628      	mov	r0, r5
1001a2ee:	47b0      	blx	r6
1001a2f0:	1c43      	adds	r3, r0, #1
1001a2f2:	d00f      	beq.n	1001a314 <_wcrtomb_r+0x3c>
1001a2f4:	b004      	add	sp, #16
1001a2f6:	bd70      	pop	{r4, r5, r6, pc}
1001a2f8:	4b09      	ldr	r3, [pc, #36]	@ (1001a320 <_wcrtomb_r+0x48>)
1001a2fa:	f500 7482 	add.w	r4, r0, #260	@ 0x104
1001a2fe:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
1001a302:	4623      	mov	r3, r4
1001a304:	2900      	cmp	r1, #0
1001a306:	d1f1      	bne.n	1001a2ec <_wcrtomb_r+0x14>
1001a308:	460a      	mov	r2, r1
1001a30a:	4628      	mov	r0, r5
1001a30c:	a901      	add	r1, sp, #4
1001a30e:	47b0      	blx	r6
1001a310:	1c43      	adds	r3, r0, #1
1001a312:	d1ef      	bne.n	1001a2f4 <_wcrtomb_r+0x1c>
1001a314:	2200      	movs	r2, #0
1001a316:	238a      	movs	r3, #138	@ 0x8a
1001a318:	6022      	str	r2, [r4, #0]
1001a31a:	602b      	str	r3, [r5, #0]
1001a31c:	b004      	add	sp, #16
1001a31e:	bd70      	pop	{r4, r5, r6, pc}
1001a320:	20000474 	.word	0x20000474

1001a324 <_wcsrtombs_r>:
1001a324:	b500      	push	{lr}
1001a326:	b083      	sub	sp, #12
1001a328:	f8dd c010 	ldr.w	ip, [sp, #16]
1001a32c:	e9cd 3c00 	strd	r3, ip, [sp]
1001a330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001a334:	f006 feb0 	bl	10021098 <_wcsnrtombs_r>
1001a338:	b003      	add	sp, #12
1001a33a:	f85d fb04 	ldr.w	pc, [sp], #4
1001a33e:	bf00      	nop

1001a340 <frexp>:
1001a340:	f8df c060 	ldr.w	ip, [pc, #96]	@ 1001a3a4 <frexp+0x64>
1001a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001a346:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
1001a34a:	2700      	movs	r7, #0
1001a34c:	4563      	cmp	r3, ip
1001a34e:	4604      	mov	r4, r0
1001a350:	460d      	mov	r5, r1
1001a352:	4616      	mov	r6, r2
1001a354:	6017      	str	r7, [r2, #0]
1001a356:	d822      	bhi.n	1001a39e <frexp+0x5e>
1001a358:	4684      	mov	ip, r0
1001a35a:	ea53 0c0c 	orrs.w	ip, r3, ip
1001a35e:	d01e      	beq.n	1001a39e <frexp+0x5e>
1001a360:	f8df c044 	ldr.w	ip, [pc, #68]	@ 1001a3a8 <frexp+0x68>
1001a364:	ea01 0c0c 	and.w	ip, r1, ip
1001a368:	460a      	mov	r2, r1
1001a36a:	f1bc 0f00 	cmp.w	ip, #0
1001a36e:	d109      	bne.n	1001a384 <frexp+0x44>
1001a370:	4b0e      	ldr	r3, [pc, #56]	@ (1001a3ac <frexp+0x6c>)
1001a372:	2200      	movs	r2, #0
1001a374:	f008 f804 	bl	10022380 <__aeabi_dmul>
1001a378:	f06f 0735 	mvn.w	r7, #53	@ 0x35
1001a37c:	4604      	mov	r4, r0
1001a37e:	460a      	mov	r2, r1
1001a380:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
1001a384:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
1001a388:	151b      	asrs	r3, r3, #20
1001a38a:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
1001a38e:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
1001a392:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
1001a396:	443b      	add	r3, r7
1001a398:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
1001a39c:	6033      	str	r3, [r6, #0]
1001a39e:	4620      	mov	r0, r4
1001a3a0:	4629      	mov	r1, r5
1001a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001a3a4:	7fefffff 	.word	0x7fefffff
1001a3a8:	7ff00000 	.word	0x7ff00000
1001a3ac:	43500000 	.word	0x43500000

1001a3b0 <register_fini>:
1001a3b0:	4b02      	ldr	r3, [pc, #8]	@ (1001a3bc <register_fini+0xc>)
1001a3b2:	b113      	cbz	r3, 1001a3ba <register_fini+0xa>
1001a3b4:	4802      	ldr	r0, [pc, #8]	@ (1001a3c0 <register_fini+0x10>)
1001a3b6:	f000 b805 	b.w	1001a3c4 <atexit>
1001a3ba:	4770      	bx	lr
1001a3bc:	00000000 	.word	0x00000000
1001a3c0:	10020d99 	.word	0x10020d99

1001a3c4 <atexit>:
1001a3c4:	2300      	movs	r3, #0
1001a3c6:	4601      	mov	r1, r0
1001a3c8:	461a      	mov	r2, r3
1001a3ca:	4618      	mov	r0, r3
1001a3cc:	f006 be8e 	b.w	100210ec <__register_exitproc>

1001a3d0 <quorem>:
1001a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001a3d4:	6903      	ldr	r3, [r0, #16]
1001a3d6:	690c      	ldr	r4, [r1, #16]
1001a3d8:	42a3      	cmp	r3, r4
1001a3da:	b083      	sub	sp, #12
1001a3dc:	f2c0 808a 	blt.w	1001a4f4 <quorem+0x124>
1001a3e0:	3c01      	subs	r4, #1
1001a3e2:	f101 0514 	add.w	r5, r1, #20
1001a3e6:	f100 0814 	add.w	r8, r0, #20
1001a3ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1001a3ee:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
1001a3f2:	3301      	adds	r3, #1
1001a3f4:	429a      	cmp	r2, r3
1001a3f6:	468e      	mov	lr, r1
1001a3f8:	4681      	mov	r9, r0
1001a3fa:	ea4f 0184 	mov.w	r1, r4, lsl #2
1001a3fe:	eb05 0784 	add.w	r7, r5, r4, lsl #2
1001a402:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
1001a406:	fbb2 f6f3 	udiv	r6, r2, r3
1001a40a:	d33a      	bcc.n	1001a482 <quorem+0xb2>
1001a40c:	e9cd 1500 	strd	r1, r5, [sp]
1001a410:	2200      	movs	r2, #0
1001a412:	46ac      	mov	ip, r5
1001a414:	4640      	mov	r0, r8
1001a416:	4613      	mov	r3, r2
1001a418:	f85c 1b04 	ldr.w	r1, [ip], #4
1001a41c:	6805      	ldr	r5, [r0, #0]
1001a41e:	fa1f fb81 	uxth.w	fp, r1
1001a422:	fb06 220b 	mla	r2, r6, fp, r2
1001a426:	0c09      	lsrs	r1, r1, #16
1001a428:	ea4f 4b12 	mov.w	fp, r2, lsr #16
1001a42c:	fb06 bb01 	mla	fp, r6, r1, fp
1001a430:	b292      	uxth	r2, r2
1001a432:	b2a9      	uxth	r1, r5
1001a434:	1a89      	subs	r1, r1, r2
1001a436:	4419      	add	r1, r3
1001a438:	fa1f f38b 	uxth.w	r3, fp
1001a43c:	ebc3 4321 	rsb	r3, r3, r1, asr #16
1001a440:	eb03 4315 	add.w	r3, r3, r5, lsr #16
1001a444:	b289      	uxth	r1, r1
1001a446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1001a44a:	4567      	cmp	r7, ip
1001a44c:	f840 1b04 	str.w	r1, [r0], #4
1001a450:	ea4f 421b 	mov.w	r2, fp, lsr #16
1001a454:	ea4f 4323 	mov.w	r3, r3, asr #16
1001a458:	d2de      	bcs.n	1001a418 <quorem+0x48>
1001a45a:	e9dd 1500 	ldrd	r1, r5, [sp]
1001a45e:	f858 3001 	ldr.w	r3, [r8, r1]
1001a462:	b973      	cbnz	r3, 1001a482 <quorem+0xb2>
1001a464:	f1aa 0a04 	sub.w	sl, sl, #4
1001a468:	45d0      	cmp	r8, sl
1001a46a:	d304      	bcc.n	1001a476 <quorem+0xa6>
1001a46c:	e007      	b.n	1001a47e <quorem+0xae>
1001a46e:	45d0      	cmp	r8, sl
1001a470:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
1001a474:	d203      	bcs.n	1001a47e <quorem+0xae>
1001a476:	f85a 3904 	ldr.w	r3, [sl], #-4
1001a47a:	2b00      	cmp	r3, #0
1001a47c:	d0f7      	beq.n	1001a46e <quorem+0x9e>
1001a47e:	f8c9 4010 	str.w	r4, [r9, #16]
1001a482:	4671      	mov	r1, lr
1001a484:	4648      	mov	r0, r9
1001a486:	f004 fe2b 	bl	1001f0e0 <__mcmp>
1001a48a:	2800      	cmp	r0, #0
1001a48c:	db2e      	blt.n	1001a4ec <quorem+0x11c>
1001a48e:	4641      	mov	r1, r8
1001a490:	2200      	movs	r2, #0
1001a492:	f855 0b04 	ldr.w	r0, [r5], #4
1001a496:	f8d1 c000 	ldr.w	ip, [r1]
1001a49a:	fa1f fe80 	uxth.w	lr, r0
1001a49e:	fa1f f38c 	uxth.w	r3, ip
1001a4a2:	eba3 030e 	sub.w	r3, r3, lr
1001a4a6:	4413      	add	r3, r2
1001a4a8:	0c02      	lsrs	r2, r0, #16
1001a4aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
1001a4ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
1001a4b2:	b29b      	uxth	r3, r3
1001a4b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1001a4b8:	42af      	cmp	r7, r5
1001a4ba:	f841 3b04 	str.w	r3, [r1], #4
1001a4be:	ea4f 4222 	mov.w	r2, r2, asr #16
1001a4c2:	d2e6      	bcs.n	1001a492 <quorem+0xc2>
1001a4c4:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
1001a4c8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
1001a4cc:	b96a      	cbnz	r2, 1001a4ea <quorem+0x11a>
1001a4ce:	3b04      	subs	r3, #4
1001a4d0:	4598      	cmp	r8, r3
1001a4d2:	d304      	bcc.n	1001a4de <quorem+0x10e>
1001a4d4:	e007      	b.n	1001a4e6 <quorem+0x116>
1001a4d6:	4598      	cmp	r8, r3
1001a4d8:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
1001a4dc:	d203      	bcs.n	1001a4e6 <quorem+0x116>
1001a4de:	f853 2904 	ldr.w	r2, [r3], #-4
1001a4e2:	2a00      	cmp	r2, #0
1001a4e4:	d0f7      	beq.n	1001a4d6 <quorem+0x106>
1001a4e6:	f8c9 4010 	str.w	r4, [r9, #16]
1001a4ea:	3601      	adds	r6, #1
1001a4ec:	4630      	mov	r0, r6
1001a4ee:	b003      	add	sp, #12
1001a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a4f4:	2000      	movs	r0, #0
1001a4f6:	b003      	add	sp, #12
1001a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a4fc:	0000      	movs	r0, r0
	...

1001a500 <_dtoa_r>:
1001a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001a504:	6b81      	ldr	r1, [r0, #56]	@ 0x38
1001a506:	b09f      	sub	sp, #124	@ 0x7c
1001a508:	4616      	mov	r6, r2
1001a50a:	461f      	mov	r7, r3
1001a50c:	e9cd 6704 	strd	r6, r7, [sp, #16]
1001a510:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
1001a512:	9003      	str	r0, [sp, #12]
1001a514:	b149      	cbz	r1, 1001a52a <_dtoa_r+0x2a>
1001a516:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1001a518:	604a      	str	r2, [r1, #4]
1001a51a:	2301      	movs	r3, #1
1001a51c:	4093      	lsls	r3, r2
1001a51e:	4604      	mov	r4, r0
1001a520:	608b      	str	r3, [r1, #8]
1001a522:	f004 fb23 	bl	1001eb6c <_Bfree>
1001a526:	2300      	movs	r3, #0
1001a528:	63a3      	str	r3, [r4, #56]	@ 0x38
1001a52a:	f1b7 0900 	subs.w	r9, r7, #0
1001a52e:	bfb4      	ite	lt
1001a530:	2301      	movlt	r3, #1
1001a532:	2300      	movge	r3, #0
1001a534:	602b      	str	r3, [r5, #0]
1001a536:	4b76      	ldr	r3, [pc, #472]	@ (1001a710 <_dtoa_r+0x210>)
1001a538:	bfbc      	itt	lt
1001a53a:	f029 4900 	biclt.w	r9, r9, #2147483648	@ 0x80000000
1001a53e:	f8cd 9014 	strlt.w	r9, [sp, #20]
1001a542:	ea33 0309 	bics.w	r3, r3, r9
1001a546:	f000 80aa 	beq.w	1001a69e <_dtoa_r+0x19e>
1001a54a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1001a54e:	2200      	movs	r2, #0
1001a550:	4618      	mov	r0, r3
1001a552:	4621      	mov	r1, r4
1001a554:	2300      	movs	r3, #0
1001a556:	e9cd 0108 	strd	r0, r1, [sp, #32]
1001a55a:	f008 f979 	bl	10022850 <__aeabi_dcmpeq>
1001a55e:	4680      	mov	r8, r0
1001a560:	b168      	cbz	r0, 1001a57e <_dtoa_r+0x7e>
1001a562:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
1001a564:	2301      	movs	r3, #1
1001a566:	6013      	str	r3, [r2, #0]
1001a568:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001a56a:	b113      	cbz	r3, 1001a572 <_dtoa_r+0x72>
1001a56c:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
1001a56e:	4b69      	ldr	r3, [pc, #420]	@ (1001a714 <_dtoa_r+0x214>)
1001a570:	6013      	str	r3, [r2, #0]
1001a572:	4b69      	ldr	r3, [pc, #420]	@ (1001a718 <_dtoa_r+0x218>)
1001a574:	930a      	str	r3, [sp, #40]	@ 0x28
1001a576:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001a578:	b01f      	add	sp, #124	@ 0x7c
1001a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a57e:	ab1c      	add	r3, sp, #112	@ 0x70
1001a580:	9301      	str	r3, [sp, #4]
1001a582:	ab1d      	add	r3, sp, #116	@ 0x74
1001a584:	9300      	str	r3, [sp, #0]
1001a586:	9803      	ldr	r0, [sp, #12]
1001a588:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1001a58c:	f004 ff00 	bl	1001f390 <__d2b>
1001a590:	ea5f 5519 	movs.w	r5, r9, lsr #20
1001a594:	4682      	mov	sl, r0
1001a596:	f040 8098 	bne.w	1001a6ca <_dtoa_r+0x1ca>
1001a59a:	e9dd 851c 	ldrd	r8, r5, [sp, #112]	@ 0x70
1001a59e:	4445      	add	r5, r8
1001a5a0:	f205 4332 	addw	r3, r5, #1074	@ 0x432
1001a5a4:	2b20      	cmp	r3, #32
1001a5a6:	f340 8383 	ble.w	1001acb0 <_dtoa_r+0x7b0>
1001a5aa:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
1001a5ae:	fa09 f903 	lsl.w	r9, r9, r3
1001a5b2:	f205 4312 	addw	r3, r5, #1042	@ 0x412
1001a5b6:	fa26 f303 	lsr.w	r3, r6, r3
1001a5ba:	ea49 0003 	orr.w	r0, r9, r3
1001a5be:	f007 fe65 	bl	1002228c <__aeabi_ui2d>
1001a5c2:	2301      	movs	r3, #1
1001a5c4:	3d01      	subs	r5, #1
1001a5c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
1001a5ca:	9311      	str	r3, [sp, #68]	@ 0x44
1001a5cc:	4b53      	ldr	r3, [pc, #332]	@ (1001a71c <_dtoa_r+0x21c>)
1001a5ce:	2200      	movs	r2, #0
1001a5d0:	f007 fd1e 	bl	10022010 <__aeabi_dsub>
1001a5d4:	a348      	add	r3, pc, #288	@ (adr r3, 1001a6f8 <_dtoa_r+0x1f8>)
1001a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
1001a5da:	f007 fed1 	bl	10022380 <__aeabi_dmul>
1001a5de:	a348      	add	r3, pc, #288	@ (adr r3, 1001a700 <_dtoa_r+0x200>)
1001a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
1001a5e4:	f007 fd16 	bl	10022014 <__adddf3>
1001a5e8:	4606      	mov	r6, r0
1001a5ea:	4628      	mov	r0, r5
1001a5ec:	460f      	mov	r7, r1
1001a5ee:	f007 fe5d 	bl	100222ac <__aeabi_i2d>
1001a5f2:	a345      	add	r3, pc, #276	@ (adr r3, 1001a708 <_dtoa_r+0x208>)
1001a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
1001a5f8:	f007 fec2 	bl	10022380 <__aeabi_dmul>
1001a5fc:	4602      	mov	r2, r0
1001a5fe:	460b      	mov	r3, r1
1001a600:	4630      	mov	r0, r6
1001a602:	4639      	mov	r1, r7
1001a604:	f007 fd06 	bl	10022014 <__adddf3>
1001a608:	4606      	mov	r6, r0
1001a60a:	460f      	mov	r7, r1
1001a60c:	f008 f968 	bl	100228e0 <__aeabi_d2iz>
1001a610:	2200      	movs	r2, #0
1001a612:	4683      	mov	fp, r0
1001a614:	2300      	movs	r3, #0
1001a616:	4630      	mov	r0, r6
1001a618:	4639      	mov	r1, r7
1001a61a:	f008 f923 	bl	10022864 <__aeabi_dcmplt>
1001a61e:	2800      	cmp	r0, #0
1001a620:	f040 831a 	bne.w	1001ac58 <_dtoa_r+0x758>
1001a624:	eba8 0805 	sub.w	r8, r8, r5
1001a628:	f1bb 0f16 	cmp.w	fp, #22
1001a62c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
1001a630:	f200 818b 	bhi.w	1001a94a <_dtoa_r+0x44a>
1001a634:	4d3a      	ldr	r5, [pc, #232]	@ (1001a720 <_dtoa_r+0x220>)
1001a636:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
1001a63a:	e9d5 2300 	ldrd	r2, r3, [r5]
1001a63e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001a642:	f008 f90f 	bl	10022864 <__aeabi_dcmplt>
1001a646:	2800      	cmp	r0, #0
1001a648:	d070      	beq.n	1001a72c <_dtoa_r+0x22c>
1001a64a:	2300      	movs	r3, #0
1001a64c:	2c00      	cmp	r4, #0
1001a64e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
1001a652:	9310      	str	r3, [sp, #64]	@ 0x40
1001a654:	f2c0 817e 	blt.w	1001a954 <_dtoa_r+0x454>
1001a658:	2300      	movs	r3, #0
1001a65a:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a65c:	f1bb 0f00 	cmp.w	fp, #0
1001a660:	da6a      	bge.n	1001a738 <_dtoa_r+0x238>
1001a662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001a664:	eba3 030b 	sub.w	r3, r3, fp
1001a668:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a66a:	f1cb 0300 	rsb	r3, fp, #0
1001a66e:	e9cd b30e 	strd	fp, r3, [sp, #56]	@ 0x38
1001a672:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a674:	2b09      	cmp	r3, #9
1001a676:	f04f 0b00 	mov.w	fp, #0
1001a67a:	d865      	bhi.n	1001a748 <_dtoa_r+0x248>
1001a67c:	2b05      	cmp	r3, #5
1001a67e:	f340 831c 	ble.w	1001acba <_dtoa_r+0x7ba>
1001a682:	3b04      	subs	r3, #4
1001a684:	9328      	str	r3, [sp, #160]	@ 0xa0
1001a686:	2500      	movs	r5, #0
1001a688:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a68a:	3b02      	subs	r3, #2
1001a68c:	2b03      	cmp	r3, #3
1001a68e:	f200 8623 	bhi.w	1001b2d8 <_dtoa_r+0xdd8>
1001a692:	e8df f013 	tbh	[pc, r3, lsl #1]
1001a696:	0460      	.short	0x0460
1001a698:	0454045d 	.word	0x0454045d
1001a69c:	0438      	.short	0x0438
1001a69e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
1001a6a0:	f3c9 0913 	ubfx	r9, r9, #0, #20
1001a6a4:	f242 730f 	movw	r3, #9999	@ 0x270f
1001a6a8:	ea59 0906 	orrs.w	r9, r9, r6
1001a6ac:	6013      	str	r3, [r2, #0]
1001a6ae:	d11c      	bne.n	1001a6ea <_dtoa_r+0x1ea>
1001a6b0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001a6b2:	2b00      	cmp	r3, #0
1001a6b4:	f000 862b 	beq.w	1001b30e <_dtoa_r+0xe0e>
1001a6b8:	4b1a      	ldr	r3, [pc, #104]	@ (1001a724 <_dtoa_r+0x224>)
1001a6ba:	930a      	str	r3, [sp, #40]	@ 0x28
1001a6bc:	3308      	adds	r3, #8
1001a6be:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
1001a6c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001a6c2:	6013      	str	r3, [r2, #0]
1001a6c4:	b01f      	add	sp, #124	@ 0x7c
1001a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a6ca:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
1001a6ce:	f3c2 0313 	ubfx	r3, r2, #0, #20
1001a6d2:	4608      	mov	r0, r1
1001a6d4:	f043 517f 	orr.w	r1, r3, #1069547520	@ 0x3fc00000
1001a6d8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
1001a6dc:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
1001a6e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
1001a6e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
1001a6e8:	e770      	b.n	1001a5cc <_dtoa_r+0xcc>
1001a6ea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001a6ec:	2b00      	cmp	r3, #0
1001a6ee:	f040 83e7 	bne.w	1001aec0 <_dtoa_r+0x9c0>
1001a6f2:	4b0d      	ldr	r3, [pc, #52]	@ (1001a728 <_dtoa_r+0x228>)
1001a6f4:	930a      	str	r3, [sp, #40]	@ 0x28
1001a6f6:	e73e      	b.n	1001a576 <_dtoa_r+0x76>
1001a6f8:	636f4361 	.word	0x636f4361
1001a6fc:	3fd287a7 	.word	0x3fd287a7
1001a700:	8b60c8b3 	.word	0x8b60c8b3
1001a704:	3fc68a28 	.word	0x3fc68a28
1001a708:	509f79fb 	.word	0x509f79fb
1001a70c:	3fd34413 	.word	0x3fd34413
1001a710:	7ff00000 	.word	0x7ff00000
1001a714:	1002c181 	.word	0x1002c181
1001a718:	1002c180 	.word	0x1002c180
1001a71c:	3ff80000 	.word	0x3ff80000
1001a720:	1002c480 	.word	0x1002c480
1001a724:	1002c314 	.word	0x1002c314
1001a728:	1002c320 	.word	0x1002c320
1001a72c:	f1b8 0f00 	cmp.w	r8, #0
1001a730:	f340 8460 	ble.w	1001aff4 <_dtoa_r+0xaf4>
1001a734:	9010      	str	r0, [sp, #64]	@ 0x40
1001a736:	900b      	str	r0, [sp, #44]	@ 0x2c
1001a738:	2300      	movs	r3, #0
1001a73a:	930f      	str	r3, [sp, #60]	@ 0x3c
1001a73c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a73e:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
1001a742:	2b09      	cmp	r3, #9
1001a744:	445c      	add	r4, fp
1001a746:	d999      	bls.n	1001a67c <_dtoa_r+0x17c>
1001a748:	2300      	movs	r3, #0
1001a74a:	e9cd 3328 	strd	r3, r3, [sp, #160]	@ 0xa0
1001a74e:	2501      	movs	r5, #1
1001a750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001a754:	950c      	str	r5, [sp, #48]	@ 0x30
1001a756:	9306      	str	r3, [sp, #24]
1001a758:	9b03      	ldr	r3, [sp, #12]
1001a75a:	2100      	movs	r1, #0
1001a75c:	63d9      	str	r1, [r3, #60]	@ 0x3c
1001a75e:	9b06      	ldr	r3, [sp, #24]
1001a760:	9318      	str	r3, [sp, #96]	@ 0x60
1001a762:	9803      	ldr	r0, [sp, #12]
1001a764:	f004 f9dc 	bl	1001eb20 <_Balloc>
1001a768:	900a      	str	r0, [sp, #40]	@ 0x28
1001a76a:	2800      	cmp	r0, #0
1001a76c:	f000 85bd 	beq.w	1001b2ea <_dtoa_r+0xdea>
1001a770:	9b03      	ldr	r3, [sp, #12]
1001a772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001a774:	639a      	str	r2, [r3, #56]	@ 0x38
1001a776:	9b06      	ldr	r3, [sp, #24]
1001a778:	2b0e      	cmp	r3, #14
1001a77a:	f200 8115 	bhi.w	1001a9a8 <_dtoa_r+0x4a8>
1001a77e:	2d00      	cmp	r5, #0
1001a780:	f000 8112 	beq.w	1001a9a8 <_dtoa_r+0x4a8>
1001a784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001a786:	2a00      	cmp	r2, #0
1001a788:	f340 843b 	ble.w	1001b002 <_dtoa_r+0xb02>
1001a78c:	4db2      	ldr	r5, [pc, #712]	@ (1001aa58 <_dtoa_r+0x558>)
1001a78e:	f002 030f 	and.w	r3, r2, #15
1001a792:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
1001a796:	e9d3 8900 	ldrd	r8, r9, [r3]
1001a79a:	4613      	mov	r3, r2
1001a79c:	1115      	asrs	r5, r2, #4
1001a79e:	05da      	lsls	r2, r3, #23
1001a7a0:	f140 83fa 	bpl.w	1001af98 <_dtoa_r+0xa98>
1001a7a4:	4bad      	ldr	r3, [pc, #692]	@ (1001aa5c <_dtoa_r+0x55c>)
1001a7a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001a7aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1001a7ae:	f007 ff11 	bl	100225d4 <__aeabi_ddiv>
1001a7b2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
1001a7b6:	f005 050f 	and.w	r5, r5, #15
1001a7ba:	2703      	movs	r7, #3
1001a7bc:	b17d      	cbz	r5, 1001a7de <_dtoa_r+0x2de>
1001a7be:	4ea7      	ldr	r6, [pc, #668]	@ (1001aa5c <_dtoa_r+0x55c>)
1001a7c0:	07eb      	lsls	r3, r5, #31
1001a7c2:	d508      	bpl.n	1001a7d6 <_dtoa_r+0x2d6>
1001a7c4:	4640      	mov	r0, r8
1001a7c6:	4649      	mov	r1, r9
1001a7c8:	e9d6 2300 	ldrd	r2, r3, [r6]
1001a7cc:	f007 fdd8 	bl	10022380 <__aeabi_dmul>
1001a7d0:	3701      	adds	r7, #1
1001a7d2:	4680      	mov	r8, r0
1001a7d4:	4689      	mov	r9, r1
1001a7d6:	106d      	asrs	r5, r5, #1
1001a7d8:	f106 0608 	add.w	r6, r6, #8
1001a7dc:	d1f0      	bne.n	1001a7c0 <_dtoa_r+0x2c0>
1001a7de:	4642      	mov	r2, r8
1001a7e0:	464b      	mov	r3, r9
1001a7e2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
1001a7e6:	f007 fef5 	bl	100225d4 <__aeabi_ddiv>
1001a7ea:	4680      	mov	r8, r0
1001a7ec:	4689      	mov	r9, r1
1001a7ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001a7f0:	b143      	cbz	r3, 1001a804 <_dtoa_r+0x304>
1001a7f2:	4b9b      	ldr	r3, [pc, #620]	@ (1001aa60 <_dtoa_r+0x560>)
1001a7f4:	2200      	movs	r2, #0
1001a7f6:	4640      	mov	r0, r8
1001a7f8:	4649      	mov	r1, r9
1001a7fa:	f008 f833 	bl	10022864 <__aeabi_dcmplt>
1001a7fe:	2800      	cmp	r0, #0
1001a800:	f040 84f1 	bne.w	1001b1e6 <_dtoa_r+0xce6>
1001a804:	4638      	mov	r0, r7
1001a806:	f007 fd51 	bl	100222ac <__aeabi_i2d>
1001a80a:	4642      	mov	r2, r8
1001a80c:	464b      	mov	r3, r9
1001a80e:	f007 fdb7 	bl	10022380 <__aeabi_dmul>
1001a812:	4b94      	ldr	r3, [pc, #592]	@ (1001aa64 <_dtoa_r+0x564>)
1001a814:	2200      	movs	r2, #0
1001a816:	f007 fbfd 	bl	10022014 <__adddf3>
1001a81a:	9b06      	ldr	r3, [sp, #24]
1001a81c:	4606      	mov	r6, r0
1001a81e:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
1001a822:	2b00      	cmp	r3, #0
1001a824:	f000 80a9 	beq.w	1001a97a <_dtoa_r+0x47a>
1001a828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001a82a:	9319      	str	r3, [sp, #100]	@ 0x64
1001a82c:	9b06      	ldr	r3, [sp, #24]
1001a82e:	9312      	str	r3, [sp, #72]	@ 0x48
1001a830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001a832:	4d89      	ldr	r5, [pc, #548]	@ (1001aa58 <_dtoa_r+0x558>)
1001a834:	4649      	mov	r1, r9
1001a836:	4640      	mov	r0, r8
1001a838:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
1001a83c:	1c5e      	adds	r6, r3, #1
1001a83e:	f008 f84f 	bl	100228e0 <__aeabi_d2iz>
1001a842:	9912      	ldr	r1, [sp, #72]	@ 0x48
1001a844:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
1001a848:	e953 1202 	ldrd	r1, r2, [r3, #-8]
1001a84c:	4607      	mov	r7, r0
1001a84e:	e9cd 1216 	strd	r1, r2, [sp, #88]	@ 0x58
1001a852:	f007 fd2b 	bl	100222ac <__aeabi_i2d>
1001a856:	4602      	mov	r2, r0
1001a858:	460b      	mov	r3, r1
1001a85a:	4640      	mov	r0, r8
1001a85c:	4649      	mov	r1, r9
1001a85e:	f007 fbd7 	bl	10022010 <__aeabi_dsub>
1001a862:	4689      	mov	r9, r1
1001a864:	990c      	ldr	r1, [sp, #48]	@ 0x30
1001a866:	3730      	adds	r7, #48	@ 0x30
1001a868:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
1001a86c:	4680      	mov	r8, r0
1001a86e:	b2ff      	uxtb	r7, r7
1001a870:	2900      	cmp	r1, #0
1001a872:	f000 8453 	beq.w	1001b11c <_dtoa_r+0xc1c>
1001a876:	497c      	ldr	r1, [pc, #496]	@ (1001aa68 <_dtoa_r+0x568>)
1001a878:	2000      	movs	r0, #0
1001a87a:	f007 feab 	bl	100225d4 <__aeabi_ddiv>
1001a87e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
1001a882:	f007 fbc5 	bl	10022010 <__aeabi_dsub>
1001a886:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1001a888:	4602      	mov	r2, r0
1001a88a:	460b      	mov	r3, r1
1001a88c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
1001a890:	702f      	strb	r7, [r5, #0]
1001a892:	4642      	mov	r2, r8
1001a894:	464b      	mov	r3, r9
1001a896:	f008 f803 	bl	100228a0 <__aeabi_dcmpgt>
1001a89a:	2800      	cmp	r0, #0
1001a89c:	f040 8497 	bne.w	1001b1ce <_dtoa_r+0xcce>
1001a8a0:	e9cd b41a 	strd	fp, r4, [sp, #104]	@ 0x68
1001a8a4:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
1001a8a8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1001a8aa:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
1001a8ae:	2700      	movs	r7, #0
1001a8b0:	e02a      	b.n	1001a908 <_dtoa_r+0x408>
1001a8b2:	3701      	adds	r7, #1
1001a8b4:	42af      	cmp	r7, r5
1001a8b6:	f280 84de 	bge.w	1001b276 <_dtoa_r+0xd76>
1001a8ba:	4b6c      	ldr	r3, [pc, #432]	@ (1001aa6c <_dtoa_r+0x56c>)
1001a8bc:	4650      	mov	r0, sl
1001a8be:	4659      	mov	r1, fp
1001a8c0:	2200      	movs	r2, #0
1001a8c2:	f007 fd5d 	bl	10022380 <__aeabi_dmul>
1001a8c6:	4b69      	ldr	r3, [pc, #420]	@ (1001aa6c <_dtoa_r+0x56c>)
1001a8c8:	2200      	movs	r2, #0
1001a8ca:	4682      	mov	sl, r0
1001a8cc:	468b      	mov	fp, r1
1001a8ce:	4640      	mov	r0, r8
1001a8d0:	4649      	mov	r1, r9
1001a8d2:	f007 fd55 	bl	10022380 <__aeabi_dmul>
1001a8d6:	4689      	mov	r9, r1
1001a8d8:	4680      	mov	r8, r0
1001a8da:	f008 f801 	bl	100228e0 <__aeabi_d2iz>
1001a8de:	4604      	mov	r4, r0
1001a8e0:	f007 fce4 	bl	100222ac <__aeabi_i2d>
1001a8e4:	4602      	mov	r2, r0
1001a8e6:	460b      	mov	r3, r1
1001a8e8:	4640      	mov	r0, r8
1001a8ea:	4649      	mov	r1, r9
1001a8ec:	f007 fb90 	bl	10022010 <__aeabi_dsub>
1001a8f0:	3430      	adds	r4, #48	@ 0x30
1001a8f2:	f806 4b01 	strb.w	r4, [r6], #1
1001a8f6:	4652      	mov	r2, sl
1001a8f8:	465b      	mov	r3, fp
1001a8fa:	4680      	mov	r8, r0
1001a8fc:	4689      	mov	r9, r1
1001a8fe:	f007 ffb1 	bl	10022864 <__aeabi_dcmplt>
1001a902:	2800      	cmp	r0, #0
1001a904:	f040 84b4 	bne.w	1001b270 <_dtoa_r+0xd70>
1001a908:	4642      	mov	r2, r8
1001a90a:	464b      	mov	r3, r9
1001a90c:	4954      	ldr	r1, [pc, #336]	@ (1001aa60 <_dtoa_r+0x560>)
1001a90e:	2000      	movs	r0, #0
1001a910:	f007 fb7e 	bl	10022010 <__aeabi_dsub>
1001a914:	4652      	mov	r2, sl
1001a916:	465b      	mov	r3, fp
1001a918:	f007 ffa4 	bl	10022864 <__aeabi_dcmplt>
1001a91c:	2800      	cmp	r0, #0
1001a91e:	d0c8      	beq.n	1001a8b2 <_dtoa_r+0x3b2>
1001a920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001a922:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
1001a926:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001a928:	4637      	mov	r7, r6
1001a92a:	f103 0801 	add.w	r8, r3, #1
1001a92e:	e002      	b.n	1001a936 <_dtoa_r+0x436>
1001a930:	4297      	cmp	r7, r2
1001a932:	f000 847c 	beq.w	1001b22e <_dtoa_r+0xd2e>
1001a936:	463e      	mov	r6, r7
1001a938:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
1001a93c:	2b39      	cmp	r3, #57	@ 0x39
1001a93e:	d0f7      	beq.n	1001a930 <_dtoa_r+0x430>
1001a940:	3301      	adds	r3, #1
1001a942:	b2db      	uxtb	r3, r3
1001a944:	703b      	strb	r3, [r7, #0]
1001a946:	4645      	mov	r5, r8
1001a948:	e175      	b.n	1001ac36 <_dtoa_r+0x736>
1001a94a:	2301      	movs	r3, #1
1001a94c:	2c00      	cmp	r4, #0
1001a94e:	9310      	str	r3, [sp, #64]	@ 0x40
1001a950:	f6bf ae82 	bge.w	1001a658 <_dtoa_r+0x158>
1001a954:	f1c8 0301 	rsb	r3, r8, #1
1001a958:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a95a:	2400      	movs	r4, #0
1001a95c:	e67e      	b.n	1001a65c <_dtoa_r+0x15c>
1001a95e:	4638      	mov	r0, r7
1001a960:	f007 fca4 	bl	100222ac <__aeabi_i2d>
1001a964:	4642      	mov	r2, r8
1001a966:	464b      	mov	r3, r9
1001a968:	f007 fd0a 	bl	10022380 <__aeabi_dmul>
1001a96c:	4b3d      	ldr	r3, [pc, #244]	@ (1001aa64 <_dtoa_r+0x564>)
1001a96e:	2200      	movs	r2, #0
1001a970:	f007 fb50 	bl	10022014 <__adddf3>
1001a974:	4606      	mov	r6, r0
1001a976:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
1001a97a:	4b3d      	ldr	r3, [pc, #244]	@ (1001aa70 <_dtoa_r+0x570>)
1001a97c:	4640      	mov	r0, r8
1001a97e:	4649      	mov	r1, r9
1001a980:	2200      	movs	r2, #0
1001a982:	f007 fb45 	bl	10022010 <__aeabi_dsub>
1001a986:	4632      	mov	r2, r6
1001a988:	463b      	mov	r3, r7
1001a98a:	4680      	mov	r8, r0
1001a98c:	4689      	mov	r9, r1
1001a98e:	f007 ff87 	bl	100228a0 <__aeabi_dcmpgt>
1001a992:	2800      	cmp	r0, #0
1001a994:	f040 845a 	bne.w	1001b24c <_dtoa_r+0xd4c>
1001a998:	4640      	mov	r0, r8
1001a99a:	4649      	mov	r1, r9
1001a99c:	4632      	mov	r2, r6
1001a99e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
1001a9a2:	f007 ff5f 	bl	10022864 <__aeabi_dcmplt>
1001a9a6:	bb28      	cbnz	r0, 1001a9f4 <_dtoa_r+0x4f4>
1001a9a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001a9aa:	2b00      	cmp	r3, #0
1001a9ac:	f2c0 8092 	blt.w	1001aad4 <_dtoa_r+0x5d4>
1001a9b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001a9b2:	2a0e      	cmp	r2, #14
1001a9b4:	f300 808e 	bgt.w	1001aad4 <_dtoa_r+0x5d4>
1001a9b8:	4d27      	ldr	r5, [pc, #156]	@ (1001aa58 <_dtoa_r+0x558>)
1001a9ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001a9bc:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
1001a9c0:	e9d5 3400 	ldrd	r3, r4, [r5]
1001a9c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
1001a9c8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001a9ca:	2b00      	cmp	r3, #0
1001a9cc:	da19      	bge.n	1001aa02 <_dtoa_r+0x502>
1001a9ce:	9b06      	ldr	r3, [sp, #24]
1001a9d0:	2b00      	cmp	r3, #0
1001a9d2:	dc16      	bgt.n	1001aa02 <_dtoa_r+0x502>
1001a9d4:	d10e      	bne.n	1001a9f4 <_dtoa_r+0x4f4>
1001a9d6:	4b26      	ldr	r3, [pc, #152]	@ (1001aa70 <_dtoa_r+0x570>)
1001a9d8:	2200      	movs	r2, #0
1001a9da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001a9de:	f007 fccf 	bl	10022380 <__aeabi_dmul>
1001a9e2:	4602      	mov	r2, r0
1001a9e4:	460b      	mov	r3, r1
1001a9e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001a9ea:	f007 ff45 	bl	10022878 <__aeabi_dcmple>
1001a9ee:	2800      	cmp	r0, #0
1001a9f0:	f000 842c 	beq.w	1001b24c <_dtoa_r+0xd4c>
1001a9f4:	f04f 0900 	mov.w	r9, #0
1001a9f8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001a9fa:	464f      	mov	r7, r9
1001a9fc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001a9fe:	43dd      	mvns	r5, r3
1001aa00:	e225      	b.n	1001ae4e <_dtoa_r+0x94e>
1001aa02:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1001aa06:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
1001aa0a:	4622      	mov	r2, r4
1001aa0c:	462b      	mov	r3, r5
1001aa0e:	4640      	mov	r0, r8
1001aa10:	4649      	mov	r1, r9
1001aa12:	f007 fddf 	bl	100225d4 <__aeabi_ddiv>
1001aa16:	f007 ff63 	bl	100228e0 <__aeabi_d2iz>
1001aa1a:	4606      	mov	r6, r0
1001aa1c:	f007 fc46 	bl	100222ac <__aeabi_i2d>
1001aa20:	4622      	mov	r2, r4
1001aa22:	462b      	mov	r3, r5
1001aa24:	f007 fcac 	bl	10022380 <__aeabi_dmul>
1001aa28:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1001aa2a:	460b      	mov	r3, r1
1001aa2c:	4602      	mov	r2, r0
1001aa2e:	4649      	mov	r1, r9
1001aa30:	4640      	mov	r0, r8
1001aa32:	f007 faed 	bl	10022010 <__aeabi_dsub>
1001aa36:	f106 0330 	add.w	r3, r6, #48	@ 0x30
1001aa3a:	f807 3b01 	strb.w	r3, [r7], #1
1001aa3e:	9b06      	ldr	r3, [sp, #24]
1001aa40:	2b01      	cmp	r3, #1
1001aa42:	f000 8312 	beq.w	1001b06a <_dtoa_r+0xb6a>
1001aa46:	2501      	movs	r5, #1
1001aa48:	f8cd a018 	str.w	sl, [sp, #24]
1001aa4c:	4699      	mov	r9, r3
1001aa4e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
1001aa52:	46a8      	mov	r8, r5
1001aa54:	e02c      	b.n	1001aab0 <_dtoa_r+0x5b0>
1001aa56:	bf00      	nop
1001aa58:	1002c480 	.word	0x1002c480
1001aa5c:	1002c458 	.word	0x1002c458
1001aa60:	3ff00000 	.word	0x3ff00000
1001aa64:	401c0000 	.word	0x401c0000
1001aa68:	3fe00000 	.word	0x3fe00000
1001aa6c:	40240000 	.word	0x40240000
1001aa70:	40140000 	.word	0x40140000
1001aa74:	4652      	mov	r2, sl
1001aa76:	465b      	mov	r3, fp
1001aa78:	4620      	mov	r0, r4
1001aa7a:	4629      	mov	r1, r5
1001aa7c:	f007 fdaa 	bl	100225d4 <__aeabi_ddiv>
1001aa80:	f007 ff2e 	bl	100228e0 <__aeabi_d2iz>
1001aa84:	4606      	mov	r6, r0
1001aa86:	f007 fc11 	bl	100222ac <__aeabi_i2d>
1001aa8a:	4652      	mov	r2, sl
1001aa8c:	465b      	mov	r3, fp
1001aa8e:	f007 fc77 	bl	10022380 <__aeabi_dmul>
1001aa92:	f108 0801 	add.w	r8, r8, #1
1001aa96:	460b      	mov	r3, r1
1001aa98:	4602      	mov	r2, r0
1001aa9a:	4629      	mov	r1, r5
1001aa9c:	4620      	mov	r0, r4
1001aa9e:	f007 fab7 	bl	10022010 <__aeabi_dsub>
1001aaa2:	f106 0330 	add.w	r3, r6, #48	@ 0x30
1001aaa6:	45c8      	cmp	r8, r9
1001aaa8:	f807 3b01 	strb.w	r3, [r7], #1
1001aaac:	f000 82db 	beq.w	1001b066 <_dtoa_r+0xb66>
1001aab0:	4bb9      	ldr	r3, [pc, #740]	@ (1001ad98 <_dtoa_r+0x898>)
1001aab2:	2200      	movs	r2, #0
1001aab4:	f007 fc64 	bl	10022380 <__aeabi_dmul>
1001aab8:	2200      	movs	r2, #0
1001aaba:	2300      	movs	r3, #0
1001aabc:	4604      	mov	r4, r0
1001aabe:	460d      	mov	r5, r1
1001aac0:	f007 fec6 	bl	10022850 <__aeabi_dcmpeq>
1001aac4:	2800      	cmp	r0, #0
1001aac6:	d0d5      	beq.n	1001aa74 <_dtoa_r+0x574>
1001aac8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001aaca:	f8dd a018 	ldr.w	sl, [sp, #24]
1001aace:	3501      	adds	r5, #1
1001aad0:	463e      	mov	r6, r7
1001aad2:	e0b0      	b.n	1001ac36 <_dtoa_r+0x736>
1001aad4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1001aad6:	2a00      	cmp	r2, #0
1001aad8:	f040 80d2 	bne.w	1001ac80 <_dtoa_r+0x780>
1001aadc:	2300      	movs	r3, #0
1001aade:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1001aae0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1001aae2:	930c      	str	r3, [sp, #48]	@ 0x30
1001aae4:	461f      	mov	r7, r3
1001aae6:	b156      	cbz	r6, 1001aafe <_dtoa_r+0x5fe>
1001aae8:	2c00      	cmp	r4, #0
1001aaea:	dd08      	ble.n	1001aafe <_dtoa_r+0x5fe>
1001aaec:	42a6      	cmp	r6, r4
1001aaee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001aaf0:	4633      	mov	r3, r6
1001aaf2:	bfa8      	it	ge
1001aaf4:	4623      	movge	r3, r4
1001aaf6:	1ad2      	subs	r2, r2, r3
1001aaf8:	920b      	str	r2, [sp, #44]	@ 0x2c
1001aafa:	1af6      	subs	r6, r6, r3
1001aafc:	1ae4      	subs	r4, r4, r3
1001aafe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001ab00:	b153      	cbz	r3, 1001ab18 <_dtoa_r+0x618>
1001ab02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001ab04:	b113      	cbz	r3, 1001ab0c <_dtoa_r+0x60c>
1001ab06:	2d00      	cmp	r5, #0
1001ab08:	f040 82e8 	bne.w	1001b0dc <_dtoa_r+0xbdc>
1001ab0c:	4651      	mov	r1, sl
1001ab0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1001ab10:	9803      	ldr	r0, [sp, #12]
1001ab12:	f004 fa13 	bl	1001ef3c <__pow5mult>
1001ab16:	4682      	mov	sl, r0
1001ab18:	9803      	ldr	r0, [sp, #12]
1001ab1a:	2101      	movs	r1, #1
1001ab1c:	f004 f92a 	bl	1001ed74 <__i2b>
1001ab20:	4681      	mov	r9, r0
1001ab22:	f1bb 0f00 	cmp.w	fp, #0
1001ab26:	f040 81b6 	bne.w	1001ae96 <_dtoa_r+0x996>
1001ab2a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001ab2c:	2b01      	cmp	r3, #1
1001ab2e:	f340 81cc 	ble.w	1001aeca <_dtoa_r+0x9ca>
1001ab32:	2001      	movs	r0, #1
1001ab34:	4420      	add	r0, r4
1001ab36:	f010 001f 	ands.w	r0, r0, #31
1001ab3a:	f000 809a 	beq.w	1001ac72 <_dtoa_r+0x772>
1001ab3e:	f1c0 0320 	rsb	r3, r0, #32
1001ab42:	2b04      	cmp	r3, #4
1001ab44:	f340 81da 	ble.w	1001aefc <_dtoa_r+0x9fc>
1001ab48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ab4a:	f1c0 001c 	rsb	r0, r0, #28
1001ab4e:	4403      	add	r3, r0
1001ab50:	930b      	str	r3, [sp, #44]	@ 0x2c
1001ab52:	4406      	add	r6, r0
1001ab54:	4404      	add	r4, r0
1001ab56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ab58:	2b00      	cmp	r3, #0
1001ab5a:	dd05      	ble.n	1001ab68 <_dtoa_r+0x668>
1001ab5c:	4651      	mov	r1, sl
1001ab5e:	9803      	ldr	r0, [sp, #12]
1001ab60:	461a      	mov	r2, r3
1001ab62:	f004 fa45 	bl	1001eff0 <__lshift>
1001ab66:	4682      	mov	sl, r0
1001ab68:	2c00      	cmp	r4, #0
1001ab6a:	dd05      	ble.n	1001ab78 <_dtoa_r+0x678>
1001ab6c:	4649      	mov	r1, r9
1001ab6e:	9803      	ldr	r0, [sp, #12]
1001ab70:	4622      	mov	r2, r4
1001ab72:	f004 fa3d 	bl	1001eff0 <__lshift>
1001ab76:	4681      	mov	r9, r0
1001ab78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001ab7a:	2b00      	cmp	r3, #0
1001ab7c:	f040 8170 	bne.w	1001ae60 <_dtoa_r+0x960>
1001ab80:	9b06      	ldr	r3, [sp, #24]
1001ab82:	2b00      	cmp	r3, #0
1001ab84:	f340 8148 	ble.w	1001ae18 <_dtoa_r+0x918>
1001ab88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001ab8a:	2b00      	cmp	r3, #0
1001ab8c:	f040 80a4 	bne.w	1001acd8 <_dtoa_r+0x7d8>
1001ab90:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001ab92:	3501      	adds	r5, #1
1001ab94:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
1001ab98:	9c06      	ldr	r4, [sp, #24]
1001ab9a:	f8dd b00c 	ldr.w	fp, [sp, #12]
1001ab9e:	2601      	movs	r6, #1
1001aba0:	e007      	b.n	1001abb2 <_dtoa_r+0x6b2>
1001aba2:	4651      	mov	r1, sl
1001aba4:	2300      	movs	r3, #0
1001aba6:	220a      	movs	r2, #10
1001aba8:	4658      	mov	r0, fp
1001abaa:	f003 ffe9 	bl	1001eb80 <__multadd>
1001abae:	3601      	adds	r6, #1
1001abb0:	4682      	mov	sl, r0
1001abb2:	4649      	mov	r1, r9
1001abb4:	4650      	mov	r0, sl
1001abb6:	f7ff fc0b 	bl	1001a3d0 <quorem>
1001abba:	42a6      	cmp	r6, r4
1001abbc:	f100 0330 	add.w	r3, r0, #48	@ 0x30
1001abc0:	f808 3b01 	strb.w	r3, [r8], #1
1001abc4:	dbed      	blt.n	1001aba2 <_dtoa_r+0x6a2>
1001abc6:	9a06      	ldr	r2, [sp, #24]
1001abc8:	2a00      	cmp	r2, #0
1001abca:	bfc8      	it	gt
1001abcc:	4616      	movgt	r6, r2
1001abce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001abd0:	bfd8      	it	le
1001abd2:	2601      	movle	r6, #1
1001abd4:	eb02 0b06 	add.w	fp, r2, r6
1001abd8:	2400      	movs	r4, #0
1001abda:	4651      	mov	r1, sl
1001abdc:	2201      	movs	r2, #1
1001abde:	9803      	ldr	r0, [sp, #12]
1001abe0:	9304      	str	r3, [sp, #16]
1001abe2:	f004 fa05 	bl	1001eff0 <__lshift>
1001abe6:	4649      	mov	r1, r9
1001abe8:	4682      	mov	sl, r0
1001abea:	f004 fa79 	bl	1001f0e0 <__mcmp>
1001abee:	2800      	cmp	r0, #0
1001abf0:	f340 81e3 	ble.w	1001afba <_dtoa_r+0xaba>
1001abf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001abf6:	e002      	b.n	1001abfe <_dtoa_r+0x6fe>
1001abf8:	455a      	cmp	r2, fp
1001abfa:	f000 81e9 	beq.w	1001afd0 <_dtoa_r+0xad0>
1001abfe:	465e      	mov	r6, fp
1001ac00:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
1001ac04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
1001ac08:	2b39      	cmp	r3, #57	@ 0x39
1001ac0a:	d0f5      	beq.n	1001abf8 <_dtoa_r+0x6f8>
1001ac0c:	3301      	adds	r3, #1
1001ac0e:	f88b 3000 	strb.w	r3, [fp]
1001ac12:	f8dd 800c 	ldr.w	r8, [sp, #12]
1001ac16:	4649      	mov	r1, r9
1001ac18:	4640      	mov	r0, r8
1001ac1a:	f003 ffa7 	bl	1001eb6c <_Bfree>
1001ac1e:	b157      	cbz	r7, 1001ac36 <_dtoa_r+0x736>
1001ac20:	b12c      	cbz	r4, 1001ac2e <_dtoa_r+0x72e>
1001ac22:	42bc      	cmp	r4, r7
1001ac24:	d003      	beq.n	1001ac2e <_dtoa_r+0x72e>
1001ac26:	4621      	mov	r1, r4
1001ac28:	4640      	mov	r0, r8
1001ac2a:	f003 ff9f 	bl	1001eb6c <_Bfree>
1001ac2e:	9803      	ldr	r0, [sp, #12]
1001ac30:	4639      	mov	r1, r7
1001ac32:	f003 ff9b 	bl	1001eb6c <_Bfree>
1001ac36:	9803      	ldr	r0, [sp, #12]
1001ac38:	4651      	mov	r1, sl
1001ac3a:	f003 ff97 	bl	1001eb6c <_Bfree>
1001ac3e:	2300      	movs	r3, #0
1001ac40:	7033      	strb	r3, [r6, #0]
1001ac42:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
1001ac44:	601d      	str	r5, [r3, #0]
1001ac46:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001ac48:	2b00      	cmp	r3, #0
1001ac4a:	f43f ac94 	beq.w	1001a576 <_dtoa_r+0x76>
1001ac4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001ac50:	601e      	str	r6, [r3, #0]
1001ac52:	b01f      	add	sp, #124	@ 0x7c
1001ac54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001ac58:	4658      	mov	r0, fp
1001ac5a:	f007 fb27 	bl	100222ac <__aeabi_i2d>
1001ac5e:	4632      	mov	r2, r6
1001ac60:	463b      	mov	r3, r7
1001ac62:	f007 fdf5 	bl	10022850 <__aeabi_dcmpeq>
1001ac66:	2800      	cmp	r0, #0
1001ac68:	f47f acdc 	bne.w	1001a624 <_dtoa_r+0x124>
1001ac6c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
1001ac70:	e4d8      	b.n	1001a624 <_dtoa_r+0x124>
1001ac72:	231c      	movs	r3, #28
1001ac74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001ac76:	441a      	add	r2, r3
1001ac78:	920b      	str	r2, [sp, #44]	@ 0x2c
1001ac7a:	441e      	add	r6, r3
1001ac7c:	441c      	add	r4, r3
1001ac7e:	e76a      	b.n	1001ab56 <_dtoa_r+0x656>
1001ac80:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
1001ac82:	2a01      	cmp	r2, #1
1001ac84:	f340 81a9 	ble.w	1001afda <_dtoa_r+0xada>
1001ac88:	9a06      	ldr	r2, [sp, #24]
1001ac8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001ac8c:	1e55      	subs	r5, r2, #1
1001ac8e:	42ab      	cmp	r3, r5
1001ac90:	f2c0 816b 	blt.w	1001af6a <_dtoa_r+0xa6a>
1001ac94:	2a00      	cmp	r2, #0
1001ac96:	eba3 0505 	sub.w	r5, r3, r5
1001ac9a:	f280 82dd 	bge.w	1001b258 <_dtoa_r+0xd58>
1001ac9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001aca0:	9a06      	ldr	r2, [sp, #24]
1001aca2:	1a9e      	subs	r6, r3, r2
1001aca4:	9803      	ldr	r0, [sp, #12]
1001aca6:	2101      	movs	r1, #1
1001aca8:	f004 f864 	bl	1001ed74 <__i2b>
1001acac:	4607      	mov	r7, r0
1001acae:	e71a      	b.n	1001aae6 <_dtoa_r+0x5e6>
1001acb0:	f1c3 0320 	rsb	r3, r3, #32
1001acb4:	fa06 f003 	lsl.w	r0, r6, r3
1001acb8:	e481      	b.n	1001a5be <_dtoa_r+0xbe>
1001acba:	2501      	movs	r5, #1
1001acbc:	e4e4      	b.n	1001a688 <_dtoa_r+0x188>
1001acbe:	4639      	mov	r1, r7
1001acc0:	2300      	movs	r3, #0
1001acc2:	9803      	ldr	r0, [sp, #12]
1001acc4:	220a      	movs	r2, #10
1001acc6:	f003 ff5b 	bl	1001eb80 <__multadd>
1001acca:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001accc:	2b00      	cmp	r3, #0
1001acce:	4607      	mov	r7, r0
1001acd0:	f340 82ef 	ble.w	1001b2b2 <_dtoa_r+0xdb2>
1001acd4:	950e      	str	r5, [sp, #56]	@ 0x38
1001acd6:	9306      	str	r3, [sp, #24]
1001acd8:	2e00      	cmp	r6, #0
1001acda:	f300 813f 	bgt.w	1001af5c <_dtoa_r+0xa5c>
1001acde:	f1bb 0f00 	cmp.w	fp, #0
1001ace2:	f040 81df 	bne.w	1001b0a4 <_dtoa_r+0xba4>
1001ace6:	46b8      	mov	r8, r7
1001ace8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001acea:	9c06      	ldr	r4, [sp, #24]
1001acec:	1e73      	subs	r3, r6, #1
1001acee:	441c      	add	r4, r3
1001acf0:	9b04      	ldr	r3, [sp, #16]
1001acf2:	940c      	str	r4, [sp, #48]	@ 0x30
1001acf4:	f003 0301 	and.w	r3, r3, #1
1001acf8:	9c03      	ldr	r4, [sp, #12]
1001acfa:	930f      	str	r3, [sp, #60]	@ 0x3c
1001acfc:	4649      	mov	r1, r9
1001acfe:	4650      	mov	r0, sl
1001ad00:	f7ff fb66 	bl	1001a3d0 <quorem>
1001ad04:	4639      	mov	r1, r7
1001ad06:	4683      	mov	fp, r0
1001ad08:	4650      	mov	r0, sl
1001ad0a:	f004 f9e9 	bl	1001f0e0 <__mcmp>
1001ad0e:	4642      	mov	r2, r8
1001ad10:	4649      	mov	r1, r9
1001ad12:	4605      	mov	r5, r0
1001ad14:	4620      	mov	r0, r4
1001ad16:	f004 fa03 	bl	1001f120 <__mdiff>
1001ad1a:	68c2      	ldr	r2, [r0, #12]
1001ad1c:	4601      	mov	r1, r0
1001ad1e:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
1001ad22:	2a00      	cmp	r2, #0
1001ad24:	d13a      	bne.n	1001ad9c <_dtoa_r+0x89c>
1001ad26:	9008      	str	r0, [sp, #32]
1001ad28:	4650      	mov	r0, sl
1001ad2a:	930b      	str	r3, [sp, #44]	@ 0x2c
1001ad2c:	f004 f9d8 	bl	1001f0e0 <__mcmp>
1001ad30:	9908      	ldr	r1, [sp, #32]
1001ad32:	9006      	str	r0, [sp, #24]
1001ad34:	4620      	mov	r0, r4
1001ad36:	f003 ff19 	bl	1001eb6c <_Bfree>
1001ad3a:	9a06      	ldr	r2, [sp, #24]
1001ad3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ad3e:	2a00      	cmp	r2, #0
1001ad40:	d15a      	bne.n	1001adf8 <_dtoa_r+0x8f8>
1001ad42:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
1001ad44:	b91a      	cbnz	r2, 1001ad4e <_dtoa_r+0x84e>
1001ad46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1001ad48:	2a00      	cmp	r2, #0
1001ad4a:	f000 829a 	beq.w	1001b282 <_dtoa_r+0xd82>
1001ad4e:	2d00      	cmp	r5, #0
1001ad50:	db45      	blt.n	1001adde <_dtoa_r+0x8de>
1001ad52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1001ad54:	46b3      	mov	fp, r6
1001ad56:	42b2      	cmp	r2, r6
1001ad58:	f80b 3b01 	strb.w	r3, [fp], #1
1001ad5c:	f000 81b9 	beq.w	1001b0d2 <_dtoa_r+0xbd2>
1001ad60:	4651      	mov	r1, sl
1001ad62:	2300      	movs	r3, #0
1001ad64:	220a      	movs	r2, #10
1001ad66:	4620      	mov	r0, r4
1001ad68:	f003 ff0a 	bl	1001eb80 <__multadd>
1001ad6c:	4547      	cmp	r7, r8
1001ad6e:	4682      	mov	sl, r0
1001ad70:	4639      	mov	r1, r7
1001ad72:	f04f 0300 	mov.w	r3, #0
1001ad76:	f04f 020a 	mov.w	r2, #10
1001ad7a:	4620      	mov	r0, r4
1001ad7c:	d036      	beq.n	1001adec <_dtoa_r+0x8ec>
1001ad7e:	f003 feff 	bl	1001eb80 <__multadd>
1001ad82:	4641      	mov	r1, r8
1001ad84:	4607      	mov	r7, r0
1001ad86:	2300      	movs	r3, #0
1001ad88:	220a      	movs	r2, #10
1001ad8a:	4620      	mov	r0, r4
1001ad8c:	f003 fef8 	bl	1001eb80 <__multadd>
1001ad90:	465e      	mov	r6, fp
1001ad92:	4680      	mov	r8, r0
1001ad94:	e7b2      	b.n	1001acfc <_dtoa_r+0x7fc>
1001ad96:	bf00      	nop
1001ad98:	40240000 	.word	0x40240000
1001ad9c:	9803      	ldr	r0, [sp, #12]
1001ad9e:	9306      	str	r3, [sp, #24]
1001ada0:	f003 fee4 	bl	1001eb6c <_Bfree>
1001ada4:	2d00      	cmp	r5, #0
1001ada6:	9b06      	ldr	r3, [sp, #24]
1001ada8:	db06      	blt.n	1001adb8 <_dtoa_r+0x8b8>
1001adaa:	9a04      	ldr	r2, [sp, #16]
1001adac:	9928      	ldr	r1, [sp, #160]	@ 0xa0
1001adae:	f002 0201 	and.w	r2, r2, #1
1001adb2:	430d      	orrs	r5, r1
1001adb4:	432a      	orrs	r2, r5
1001adb6:	d12a      	bne.n	1001ae0e <_dtoa_r+0x90e>
1001adb8:	4651      	mov	r1, sl
1001adba:	2201      	movs	r2, #1
1001adbc:	9803      	ldr	r0, [sp, #12]
1001adbe:	9304      	str	r3, [sp, #16]
1001adc0:	f004 f916 	bl	1001eff0 <__lshift>
1001adc4:	4649      	mov	r1, r9
1001adc6:	4682      	mov	sl, r0
1001adc8:	f004 f98a 	bl	1001f0e0 <__mcmp>
1001adcc:	2800      	cmp	r0, #0
1001adce:	9b04      	ldr	r3, [sp, #16]
1001add0:	f340 80e8 	ble.w	1001afa4 <_dtoa_r+0xaa4>
1001add4:	2b39      	cmp	r3, #57	@ 0x39
1001add6:	f000 822f 	beq.w	1001b238 <_dtoa_r+0xd38>
1001adda:	f10b 0331 	add.w	r3, fp, #49	@ 0x31
1001adde:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001ade0:	f806 3b01 	strb.w	r3, [r6], #1
1001ade4:	463c      	mov	r4, r7
1001ade6:	3501      	adds	r5, #1
1001ade8:	4647      	mov	r7, r8
1001adea:	e712      	b.n	1001ac12 <_dtoa_r+0x712>
1001adec:	f003 fec8 	bl	1001eb80 <__multadd>
1001adf0:	465e      	mov	r6, fp
1001adf2:	4607      	mov	r7, r0
1001adf4:	4680      	mov	r8, r0
1001adf6:	e781      	b.n	1001acfc <_dtoa_r+0x7fc>
1001adf8:	2d00      	cmp	r5, #0
1001adfa:	f2c0 827d 	blt.w	1001b2f8 <_dtoa_r+0xdf8>
1001adfe:	9928      	ldr	r1, [sp, #160]	@ 0xa0
1001ae00:	430d      	orrs	r5, r1
1001ae02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1001ae04:	430d      	orrs	r5, r1
1001ae06:	f000 8277 	beq.w	1001b2f8 <_dtoa_r+0xdf8>
1001ae0a:	2a00      	cmp	r2, #0
1001ae0c:	dda1      	ble.n	1001ad52 <_dtoa_r+0x852>
1001ae0e:	2b39      	cmp	r3, #57	@ 0x39
1001ae10:	f000 8212 	beq.w	1001b238 <_dtoa_r+0xd38>
1001ae14:	3301      	adds	r3, #1
1001ae16:	e7e2      	b.n	1001adde <_dtoa_r+0x8de>
1001ae18:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001ae1a:	2b02      	cmp	r3, #2
1001ae1c:	f77f aeb4 	ble.w	1001ab88 <_dtoa_r+0x688>
1001ae20:	9b06      	ldr	r3, [sp, #24]
1001ae22:	2b00      	cmp	r3, #0
1001ae24:	f040 811d 	bne.w	1001b062 <_dtoa_r+0xb62>
1001ae28:	4649      	mov	r1, r9
1001ae2a:	2205      	movs	r2, #5
1001ae2c:	9803      	ldr	r0, [sp, #12]
1001ae2e:	f003 fea7 	bl	1001eb80 <__multadd>
1001ae32:	4601      	mov	r1, r0
1001ae34:	4681      	mov	r9, r0
1001ae36:	4650      	mov	r0, sl
1001ae38:	f004 f952 	bl	1001f0e0 <__mcmp>
1001ae3c:	2800      	cmp	r0, #0
1001ae3e:	f340 8110 	ble.w	1001b062 <_dtoa_r+0xb62>
1001ae42:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001ae44:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001ae46:	2331      	movs	r3, #49	@ 0x31
1001ae48:	f806 3b01 	strb.w	r3, [r6], #1
1001ae4c:	3501      	adds	r5, #1
1001ae4e:	9803      	ldr	r0, [sp, #12]
1001ae50:	4649      	mov	r1, r9
1001ae52:	3501      	adds	r5, #1
1001ae54:	f003 fe8a 	bl	1001eb6c <_Bfree>
1001ae58:	2f00      	cmp	r7, #0
1001ae5a:	f47f aee8 	bne.w	1001ac2e <_dtoa_r+0x72e>
1001ae5e:	e6ea      	b.n	1001ac36 <_dtoa_r+0x736>
1001ae60:	4649      	mov	r1, r9
1001ae62:	4650      	mov	r0, sl
1001ae64:	f004 f93c 	bl	1001f0e0 <__mcmp>
1001ae68:	2800      	cmp	r0, #0
1001ae6a:	f6bf ae89 	bge.w	1001ab80 <_dtoa_r+0x680>
1001ae6e:	4651      	mov	r1, sl
1001ae70:	2300      	movs	r3, #0
1001ae72:	9803      	ldr	r0, [sp, #12]
1001ae74:	220a      	movs	r2, #10
1001ae76:	f003 fe83 	bl	1001eb80 <__multadd>
1001ae7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001ae7c:	1e5d      	subs	r5, r3, #1
1001ae7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001ae80:	4682      	mov	sl, r0
1001ae82:	2b00      	cmp	r3, #0
1001ae84:	f47f af1b 	bne.w	1001acbe <_dtoa_r+0x7be>
1001ae88:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001ae8a:	2b00      	cmp	r3, #0
1001ae8c:	f340 81ff 	ble.w	1001b28e <_dtoa_r+0xd8e>
1001ae90:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001ae92:	9306      	str	r3, [sp, #24]
1001ae94:	e67e      	b.n	1001ab94 <_dtoa_r+0x694>
1001ae96:	4601      	mov	r1, r0
1001ae98:	465a      	mov	r2, fp
1001ae9a:	9803      	ldr	r0, [sp, #12]
1001ae9c:	f004 f84e 	bl	1001ef3c <__pow5mult>
1001aea0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001aea2:	2b01      	cmp	r3, #1
1001aea4:	4681      	mov	r9, r0
1001aea6:	dd6c      	ble.n	1001af82 <_dtoa_r+0xa82>
1001aea8:	f04f 0b00 	mov.w	fp, #0
1001aeac:	f8d9 3010 	ldr.w	r3, [r9, #16]
1001aeb0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
1001aeb4:	6918      	ldr	r0, [r3, #16]
1001aeb6:	f003 ff0b 	bl	1001ecd0 <__hi0bits>
1001aeba:	f1c0 0020 	rsb	r0, r0, #32
1001aebe:	e639      	b.n	1001ab34 <_dtoa_r+0x634>
1001aec0:	4b92      	ldr	r3, [pc, #584]	@ (1001b10c <_dtoa_r+0xc0c>)
1001aec2:	930a      	str	r3, [sp, #40]	@ 0x28
1001aec4:	3303      	adds	r3, #3
1001aec6:	f7ff bbfa 	b.w	1001a6be <_dtoa_r+0x1be>
1001aeca:	9b04      	ldr	r3, [sp, #16]
1001aecc:	2b00      	cmp	r3, #0
1001aece:	f47f ae30 	bne.w	1001ab32 <_dtoa_r+0x632>
1001aed2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
1001aed6:	f3c2 0313 	ubfx	r3, r2, #0, #20
1001aeda:	2b00      	cmp	r3, #0
1001aedc:	f47f ae29 	bne.w	1001ab32 <_dtoa_r+0x632>
1001aee0:	4b8b      	ldr	r3, [pc, #556]	@ (1001b110 <_dtoa_r+0xc10>)
1001aee2:	4013      	ands	r3, r2
1001aee4:	b123      	cbz	r3, 1001aef0 <_dtoa_r+0x9f0>
1001aee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001aee8:	3301      	adds	r3, #1
1001aeea:	930b      	str	r3, [sp, #44]	@ 0x2c
1001aeec:	3401      	adds	r4, #1
1001aeee:	2301      	movs	r3, #1
1001aef0:	f1bb 0f00 	cmp.w	fp, #0
1001aef4:	f040 81ae 	bne.w	1001b254 <_dtoa_r+0xd54>
1001aef8:	469b      	mov	fp, r3
1001aefa:	e61a      	b.n	1001ab32 <_dtoa_r+0x632>
1001aefc:	f43f ae2b 	beq.w	1001ab56 <_dtoa_r+0x656>
1001af00:	f1c0 033c 	rsb	r3, r0, #60	@ 0x3c
1001af04:	e6b6      	b.n	1001ac74 <_dtoa_r+0x774>
1001af06:	2301      	movs	r3, #1
1001af08:	930c      	str	r3, [sp, #48]	@ 0x30
1001af0a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001af0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001af0e:	4413      	add	r3, r2
1001af10:	9318      	str	r3, [sp, #96]	@ 0x60
1001af12:	3301      	adds	r3, #1
1001af14:	2b01      	cmp	r3, #1
1001af16:	461e      	mov	r6, r3
1001af18:	9306      	str	r3, [sp, #24]
1001af1a:	bfb8      	it	lt
1001af1c:	2601      	movlt	r6, #1
1001af1e:	2e17      	cmp	r6, #23
1001af20:	f340 81d5 	ble.w	1001b2ce <_dtoa_r+0xdce>
1001af24:	2201      	movs	r2, #1
1001af26:	2304      	movs	r3, #4
1001af28:	005b      	lsls	r3, r3, #1
1001af2a:	f103 0014 	add.w	r0, r3, #20
1001af2e:	42b0      	cmp	r0, r6
1001af30:	4611      	mov	r1, r2
1001af32:	f102 0201 	add.w	r2, r2, #1
1001af36:	d9f7      	bls.n	1001af28 <_dtoa_r+0xa28>
1001af38:	9b03      	ldr	r3, [sp, #12]
1001af3a:	63d9      	str	r1, [r3, #60]	@ 0x3c
1001af3c:	e411      	b.n	1001a762 <_dtoa_r+0x262>
1001af3e:	2301      	movs	r3, #1
1001af40:	930c      	str	r3, [sp, #48]	@ 0x30
1001af42:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001af44:	2b00      	cmp	r3, #0
1001af46:	dd33      	ble.n	1001afb0 <_dtoa_r+0xab0>
1001af48:	9318      	str	r3, [sp, #96]	@ 0x60
1001af4a:	9306      	str	r3, [sp, #24]
1001af4c:	461e      	mov	r6, r3
1001af4e:	e7e6      	b.n	1001af1e <_dtoa_r+0xa1e>
1001af50:	2300      	movs	r3, #0
1001af52:	930c      	str	r3, [sp, #48]	@ 0x30
1001af54:	e7d9      	b.n	1001af0a <_dtoa_r+0xa0a>
1001af56:	2300      	movs	r3, #0
1001af58:	930c      	str	r3, [sp, #48]	@ 0x30
1001af5a:	e7f2      	b.n	1001af42 <_dtoa_r+0xa42>
1001af5c:	4639      	mov	r1, r7
1001af5e:	9803      	ldr	r0, [sp, #12]
1001af60:	4632      	mov	r2, r6
1001af62:	f004 f845 	bl	1001eff0 <__lshift>
1001af66:	4607      	mov	r7, r0
1001af68:	e6b9      	b.n	1001acde <_dtoa_r+0x7de>
1001af6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001af6c:	9a06      	ldr	r2, [sp, #24]
1001af6e:	950f      	str	r5, [sp, #60]	@ 0x3c
1001af70:	1aeb      	subs	r3, r5, r3
1001af72:	449b      	add	fp, r3
1001af74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001af76:	461e      	mov	r6, r3
1001af78:	4413      	add	r3, r2
1001af7a:	4414      	add	r4, r2
1001af7c:	930b      	str	r3, [sp, #44]	@ 0x2c
1001af7e:	2500      	movs	r5, #0
1001af80:	e690      	b.n	1001aca4 <_dtoa_r+0x7a4>
1001af82:	9b04      	ldr	r3, [sp, #16]
1001af84:	2b00      	cmp	r3, #0
1001af86:	d18f      	bne.n	1001aea8 <_dtoa_r+0x9a8>
1001af88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001af8c:	f3c1 0313 	ubfx	r3, r1, #0, #20
1001af90:	460a      	mov	r2, r1
1001af92:	2b00      	cmp	r3, #0
1001af94:	d188      	bne.n	1001aea8 <_dtoa_r+0x9a8>
1001af96:	e7a3      	b.n	1001aee0 <_dtoa_r+0x9e0>
1001af98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1001af9c:	2702      	movs	r7, #2
1001af9e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
1001afa2:	e40b      	b.n	1001a7bc <_dtoa_r+0x2bc>
1001afa4:	f47f af1b 	bne.w	1001adde <_dtoa_r+0x8de>
1001afa8:	07da      	lsls	r2, r3, #31
1001afaa:	f57f af18 	bpl.w	1001adde <_dtoa_r+0x8de>
1001afae:	e711      	b.n	1001add4 <_dtoa_r+0x8d4>
1001afb0:	2301      	movs	r3, #1
1001afb2:	9329      	str	r3, [sp, #164]	@ 0xa4
1001afb4:	9306      	str	r3, [sp, #24]
1001afb6:	f7ff bbcf 	b.w	1001a758 <_dtoa_r+0x258>
1001afba:	d103      	bne.n	1001afc4 <_dtoa_r+0xac4>
1001afbc:	9b04      	ldr	r3, [sp, #16]
1001afbe:	07db      	lsls	r3, r3, #31
1001afc0:	f53f ae18 	bmi.w	1001abf4 <_dtoa_r+0x6f4>
1001afc4:	465e      	mov	r6, fp
1001afc6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
1001afca:	2b30      	cmp	r3, #48	@ 0x30
1001afcc:	d0fa      	beq.n	1001afc4 <_dtoa_r+0xac4>
1001afce:	e620      	b.n	1001ac12 <_dtoa_r+0x712>
1001afd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001afd2:	2331      	movs	r3, #49	@ 0x31
1001afd4:	3501      	adds	r5, #1
1001afd6:	7013      	strb	r3, [r2, #0]
1001afd8:	e61b      	b.n	1001ac12 <_dtoa_r+0x712>
1001afda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1001afdc:	2a00      	cmp	r2, #0
1001afde:	f000 80f9 	beq.w	1001b1d4 <_dtoa_r+0xcd4>
1001afe2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
1001afe6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001afe8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1001afea:	4616      	mov	r6, r2
1001afec:	441a      	add	r2, r3
1001afee:	441c      	add	r4, r3
1001aff0:	920b      	str	r2, [sp, #44]	@ 0x2c
1001aff2:	e657      	b.n	1001aca4 <_dtoa_r+0x7a4>
1001aff4:	f1c8 0301 	rsb	r3, r8, #1
1001aff8:	4604      	mov	r4, r0
1001affa:	930b      	str	r3, [sp, #44]	@ 0x2c
1001affc:	9010      	str	r0, [sp, #64]	@ 0x40
1001affe:	f7ff bb9b 	b.w	1001a738 <_dtoa_r+0x238>
1001b002:	f000 80eb 	beq.w	1001b1dc <_dtoa_r+0xcdc>
1001b006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001b008:	4d42      	ldr	r5, [pc, #264]	@ (1001b114 <_dtoa_r+0xc14>)
1001b00a:	425e      	negs	r6, r3
1001b00c:	f006 030f 	and.w	r3, r6, #15
1001b010:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
1001b014:	e9d3 2300 	ldrd	r2, r3, [r3]
1001b018:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001b01c:	f007 f9b0 	bl	10022380 <__aeabi_dmul>
1001b020:	1135      	asrs	r5, r6, #4
1001b022:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
1001b026:	f000 814d 	beq.w	1001b2c4 <_dtoa_r+0xdc4>
1001b02a:	4e3b      	ldr	r6, [pc, #236]	@ (1001b118 <_dtoa_r+0xc18>)
1001b02c:	2300      	movs	r3, #0
1001b02e:	2702      	movs	r7, #2
1001b030:	4680      	mov	r8, r0
1001b032:	4689      	mov	r9, r1
1001b034:	07e8      	lsls	r0, r5, #31
1001b036:	d509      	bpl.n	1001b04c <_dtoa_r+0xb4c>
1001b038:	e9d6 2300 	ldrd	r2, r3, [r6]
1001b03c:	4640      	mov	r0, r8
1001b03e:	4649      	mov	r1, r9
1001b040:	f007 f99e 	bl	10022380 <__aeabi_dmul>
1001b044:	3701      	adds	r7, #1
1001b046:	4680      	mov	r8, r0
1001b048:	4689      	mov	r9, r1
1001b04a:	2301      	movs	r3, #1
1001b04c:	106d      	asrs	r5, r5, #1
1001b04e:	f106 0608 	add.w	r6, r6, #8
1001b052:	d1ef      	bne.n	1001b034 <_dtoa_r+0xb34>
1001b054:	2b00      	cmp	r3, #0
1001b056:	f47f abca 	bne.w	1001a7ee <_dtoa_r+0x2ee>
1001b05a:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
1001b05e:	f7ff bbc6 	b.w	1001a7ee <_dtoa_r+0x2ee>
1001b062:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001b064:	e4ca      	b.n	1001a9fc <_dtoa_r+0x4fc>
1001b066:	f8dd a018 	ldr.w	sl, [sp, #24]
1001b06a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001b06c:	4602      	mov	r2, r0
1001b06e:	460b      	mov	r3, r1
1001b070:	f006 ffd0 	bl	10022014 <__adddf3>
1001b074:	4602      	mov	r2, r0
1001b076:	460b      	mov	r3, r1
1001b078:	e9cd 2306 	strd	r2, r3, [sp, #24]
1001b07c:	3501      	adds	r5, #1
1001b07e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001b082:	46a8      	mov	r8, r5
1001b084:	f007 fc0c 	bl	100228a0 <__aeabi_dcmpgt>
1001b088:	b940      	cbnz	r0, 1001b09c <_dtoa_r+0xb9c>
1001b08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001b08e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1001b092:	f007 fbdd 	bl	10022850 <__aeabi_dcmpeq>
1001b096:	b118      	cbz	r0, 1001b0a0 <_dtoa_r+0xba0>
1001b098:	07f1      	lsls	r1, r6, #31
1001b09a:	d501      	bpl.n	1001b0a0 <_dtoa_r+0xba0>
1001b09c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001b09e:	e44a      	b.n	1001a936 <_dtoa_r+0x436>
1001b0a0:	463e      	mov	r6, r7
1001b0a2:	e5c8      	b.n	1001ac36 <_dtoa_r+0x736>
1001b0a4:	6879      	ldr	r1, [r7, #4]
1001b0a6:	9803      	ldr	r0, [sp, #12]
1001b0a8:	f003 fd3a 	bl	1001eb20 <_Balloc>
1001b0ac:	4605      	mov	r5, r0
1001b0ae:	2800      	cmp	r0, #0
1001b0b0:	f000 8126 	beq.w	1001b300 <_dtoa_r+0xe00>
1001b0b4:	693b      	ldr	r3, [r7, #16]
1001b0b6:	3302      	adds	r3, #2
1001b0b8:	009a      	lsls	r2, r3, #2
1001b0ba:	f107 010c 	add.w	r1, r7, #12
1001b0be:	300c      	adds	r0, #12
1001b0c0:	f7fe fffe 	bl	1001a0c0 <memcpy>
1001b0c4:	9803      	ldr	r0, [sp, #12]
1001b0c6:	4629      	mov	r1, r5
1001b0c8:	2201      	movs	r2, #1
1001b0ca:	f003 ff91 	bl	1001eff0 <__lshift>
1001b0ce:	4680      	mov	r8, r0
1001b0d0:	e60a      	b.n	1001ace8 <_dtoa_r+0x7e8>
1001b0d2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001b0d4:	463c      	mov	r4, r7
1001b0d6:	3501      	adds	r5, #1
1001b0d8:	4647      	mov	r7, r8
1001b0da:	e57e      	b.n	1001abda <_dtoa_r+0x6da>
1001b0dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
1001b0e0:	4639      	mov	r1, r7
1001b0e2:	462a      	mov	r2, r5
1001b0e4:	4640      	mov	r0, r8
1001b0e6:	f003 ff29 	bl	1001ef3c <__pow5mult>
1001b0ea:	4652      	mov	r2, sl
1001b0ec:	4601      	mov	r1, r0
1001b0ee:	4607      	mov	r7, r0
1001b0f0:	4640      	mov	r0, r8
1001b0f2:	f003 fe6d 	bl	1001edd0 <__multiply>
1001b0f6:	4651      	mov	r1, sl
1001b0f8:	4682      	mov	sl, r0
1001b0fa:	4640      	mov	r0, r8
1001b0fc:	f003 fd36 	bl	1001eb6c <_Bfree>
1001b100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001b102:	1b5b      	subs	r3, r3, r5
1001b104:	930f      	str	r3, [sp, #60]	@ 0x3c
1001b106:	f43f ad07 	beq.w	1001ab18 <_dtoa_r+0x618>
1001b10a:	e4ff      	b.n	1001ab0c <_dtoa_r+0x60c>
1001b10c:	1002c320 	.word	0x1002c320
1001b110:	7ff00000 	.word	0x7ff00000
1001b114:	1002c480 	.word	0x1002c480
1001b118:	1002c458 	.word	0x1002c458
1001b11c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
1001b120:	f007 f92e 	bl	10022380 <__aeabi_dmul>
1001b124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001b126:	701f      	strb	r7, [r3, #0]
1001b128:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001b12a:	2b01      	cmp	r3, #1
1001b12c:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
1001b130:	f000 80c6 	beq.w	1001b2c0 <_dtoa_r+0xdc0>
1001b134:	9f12      	ldr	r7, [sp, #72]	@ 0x48
1001b136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001b138:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
1001b13c:	441f      	add	r7, r3
1001b13e:	4b7c      	ldr	r3, [pc, #496]	@ (1001b330 <_dtoa_r+0xe30>)
1001b140:	2200      	movs	r2, #0
1001b142:	4640      	mov	r0, r8
1001b144:	4649      	mov	r1, r9
1001b146:	f007 f91b 	bl	10022380 <__aeabi_dmul>
1001b14a:	4689      	mov	r9, r1
1001b14c:	4680      	mov	r8, r0
1001b14e:	f007 fbc7 	bl	100228e0 <__aeabi_d2iz>
1001b152:	4683      	mov	fp, r0
1001b154:	f007 f8aa 	bl	100222ac <__aeabi_i2d>
1001b158:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
1001b15c:	4602      	mov	r2, r0
1001b15e:	460b      	mov	r3, r1
1001b160:	4640      	mov	r0, r8
1001b162:	4649      	mov	r1, r9
1001b164:	f006 ff54 	bl	10022010 <__aeabi_dsub>
1001b168:	f806 bb01 	strb.w	fp, [r6], #1
1001b16c:	42b7      	cmp	r7, r6
1001b16e:	4680      	mov	r8, r0
1001b170:	4689      	mov	r9, r1
1001b172:	d1e4      	bne.n	1001b13e <_dtoa_r+0xc3e>
1001b174:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
1001b178:	4b6e      	ldr	r3, [pc, #440]	@ (1001b334 <_dtoa_r+0xe34>)
1001b17a:	2200      	movs	r2, #0
1001b17c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
1001b180:	f006 ff48 	bl	10022014 <__adddf3>
1001b184:	4602      	mov	r2, r0
1001b186:	460b      	mov	r3, r1
1001b188:	4640      	mov	r0, r8
1001b18a:	4649      	mov	r1, r9
1001b18c:	f007 fb88 	bl	100228a0 <__aeabi_dcmpgt>
1001b190:	2800      	cmp	r0, #0
1001b192:	d167      	bne.n	1001b264 <_dtoa_r+0xd64>
1001b194:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
1001b198:	4966      	ldr	r1, [pc, #408]	@ (1001b334 <_dtoa_r+0xe34>)
1001b19a:	2000      	movs	r0, #0
1001b19c:	f006 ff38 	bl	10022010 <__aeabi_dsub>
1001b1a0:	4602      	mov	r2, r0
1001b1a2:	460b      	mov	r3, r1
1001b1a4:	4640      	mov	r0, r8
1001b1a6:	4649      	mov	r1, r9
1001b1a8:	f007 fb5c 	bl	10022864 <__aeabi_dcmplt>
1001b1ac:	b948      	cbnz	r0, 1001b1c2 <_dtoa_r+0xcc2>
1001b1ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001b1b0:	2b00      	cmp	r3, #0
1001b1b2:	f6ff ac93 	blt.w	1001aadc <_dtoa_r+0x5dc>
1001b1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001b1b8:	2b0e      	cmp	r3, #14
1001b1ba:	f73f ac8f 	bgt.w	1001aadc <_dtoa_r+0x5dc>
1001b1be:	f7ff bbfc 	b.w	1001a9ba <_dtoa_r+0x4ba>
1001b1c2:	463e      	mov	r6, r7
1001b1c4:	3f01      	subs	r7, #1
1001b1c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
1001b1ca:	2b30      	cmp	r3, #48	@ 0x30
1001b1cc:	d0f9      	beq.n	1001b1c2 <_dtoa_r+0xcc2>
1001b1ce:	9d19      	ldr	r5, [sp, #100]	@ 0x64
1001b1d0:	3501      	adds	r5, #1
1001b1d2:	e530      	b.n	1001ac36 <_dtoa_r+0x736>
1001b1d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
1001b1d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
1001b1da:	e704      	b.n	1001afe6 <_dtoa_r+0xae6>
1001b1dc:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
1001b1e0:	2702      	movs	r7, #2
1001b1e2:	f7ff bb04 	b.w	1001a7ee <_dtoa_r+0x2ee>
1001b1e6:	9b06      	ldr	r3, [sp, #24]
1001b1e8:	2b00      	cmp	r3, #0
1001b1ea:	f43f abb8 	beq.w	1001a95e <_dtoa_r+0x45e>
1001b1ee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001b1f0:	2b00      	cmp	r3, #0
1001b1f2:	f77f abd9 	ble.w	1001a9a8 <_dtoa_r+0x4a8>
1001b1f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001b1f8:	9312      	str	r3, [sp, #72]	@ 0x48
1001b1fa:	3a01      	subs	r2, #1
1001b1fc:	4b4c      	ldr	r3, [pc, #304]	@ (1001b330 <_dtoa_r+0xe30>)
1001b1fe:	9219      	str	r2, [sp, #100]	@ 0x64
1001b200:	4640      	mov	r0, r8
1001b202:	2200      	movs	r2, #0
1001b204:	4649      	mov	r1, r9
1001b206:	f007 f8bb 	bl	10022380 <__aeabi_dmul>
1001b20a:	4680      	mov	r8, r0
1001b20c:	4689      	mov	r9, r1
1001b20e:	1c78      	adds	r0, r7, #1
1001b210:	f007 f84c 	bl	100222ac <__aeabi_i2d>
1001b214:	4642      	mov	r2, r8
1001b216:	464b      	mov	r3, r9
1001b218:	f007 f8b2 	bl	10022380 <__aeabi_dmul>
1001b21c:	4b46      	ldr	r3, [pc, #280]	@ (1001b338 <_dtoa_r+0xe38>)
1001b21e:	2200      	movs	r2, #0
1001b220:	f006 fef8 	bl	10022014 <__adddf3>
1001b224:	4606      	mov	r6, r0
1001b226:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
1001b22a:	f7ff bb01 	b.w	1001a830 <_dtoa_r+0x330>
1001b22e:	f108 0801 	add.w	r8, r8, #1
1001b232:	2331      	movs	r3, #49	@ 0x31
1001b234:	f7ff bb86 	b.w	1001a944 <_dtoa_r+0x444>
1001b238:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001b23a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001b23c:	46b3      	mov	fp, r6
1001b23e:	2339      	movs	r3, #57	@ 0x39
1001b240:	463c      	mov	r4, r7
1001b242:	f80b 3b01 	strb.w	r3, [fp], #1
1001b246:	3501      	adds	r5, #1
1001b248:	4647      	mov	r7, r8
1001b24a:	e4d8      	b.n	1001abfe <_dtoa_r+0x6fe>
1001b24c:	f04f 0900 	mov.w	r9, #0
1001b250:	464f      	mov	r7, r9
1001b252:	e5f6      	b.n	1001ae42 <_dtoa_r+0x942>
1001b254:	469b      	mov	fp, r3
1001b256:	e629      	b.n	1001aeac <_dtoa_r+0x9ac>
1001b258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001b25a:	461e      	mov	r6, r3
1001b25c:	4413      	add	r3, r2
1001b25e:	4414      	add	r4, r2
1001b260:	930b      	str	r3, [sp, #44]	@ 0x2c
1001b262:	e51f      	b.n	1001aca4 <_dtoa_r+0x7a4>
1001b264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001b266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001b268:	f103 0801 	add.w	r8, r3, #1
1001b26c:	f7ff bb63 	b.w	1001a936 <_dtoa_r+0x436>
1001b270:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
1001b274:	e7ab      	b.n	1001b1ce <_dtoa_r+0xcce>
1001b276:	e9dd b41a 	ldrd	fp, r4, [sp, #104]	@ 0x68
1001b27a:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
1001b27e:	f7ff bb93 	b.w	1001a9a8 <_dtoa_r+0x4a8>
1001b282:	2b39      	cmp	r3, #57	@ 0x39
1001b284:	d0d8      	beq.n	1001b238 <_dtoa_r+0xd38>
1001b286:	2d00      	cmp	r5, #0
1001b288:	f73f ada7 	bgt.w	1001adda <_dtoa_r+0x8da>
1001b28c:	e5a7      	b.n	1001adde <_dtoa_r+0x8de>
1001b28e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001b290:	2b02      	cmp	r3, #2
1001b292:	dc0a      	bgt.n	1001b2aa <_dtoa_r+0xdaa>
1001b294:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001b296:	9306      	str	r3, [sp, #24]
1001b298:	4649      	mov	r1, r9
1001b29a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001b29c:	f7ff f898 	bl	1001a3d0 <quorem>
1001b2a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001b2a2:	f100 0330 	add.w	r3, r0, #48	@ 0x30
1001b2a6:	7013      	strb	r3, [r2, #0]
1001b2a8:	e48d      	b.n	1001abc6 <_dtoa_r+0x6c6>
1001b2aa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001b2ac:	9306      	str	r3, [sp, #24]
1001b2ae:	950e      	str	r5, [sp, #56]	@ 0x38
1001b2b0:	e5b6      	b.n	1001ae20 <_dtoa_r+0x920>
1001b2b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001b2b4:	2b02      	cmp	r3, #2
1001b2b6:	dcf8      	bgt.n	1001b2aa <_dtoa_r+0xdaa>
1001b2b8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001b2ba:	950e      	str	r5, [sp, #56]	@ 0x38
1001b2bc:	9306      	str	r3, [sp, #24]
1001b2be:	e50b      	b.n	1001acd8 <_dtoa_r+0x7d8>
1001b2c0:	4637      	mov	r7, r6
1001b2c2:	e759      	b.n	1001b178 <_dtoa_r+0xc78>
1001b2c4:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
1001b2c8:	2702      	movs	r7, #2
1001b2ca:	f7ff ba90 	b.w	1001a7ee <_dtoa_r+0x2ee>
1001b2ce:	9b03      	ldr	r3, [sp, #12]
1001b2d0:	2100      	movs	r1, #0
1001b2d2:	63d9      	str	r1, [r3, #60]	@ 0x3c
1001b2d4:	f7ff ba45 	b.w	1001a762 <_dtoa_r+0x262>
1001b2d8:	9b03      	ldr	r3, [sp, #12]
1001b2da:	2500      	movs	r5, #0
1001b2dc:	63dd      	str	r5, [r3, #60]	@ 0x3c
1001b2de:	4629      	mov	r1, r5
1001b2e0:	4618      	mov	r0, r3
1001b2e2:	f003 fc1d 	bl	1001eb20 <_Balloc>
1001b2e6:	900a      	str	r0, [sp, #40]	@ 0x28
1001b2e8:	b9a8      	cbnz	r0, 1001b316 <_dtoa_r+0xe16>
1001b2ea:	4b14      	ldr	r3, [pc, #80]	@ (1001b33c <_dtoa_r+0xe3c>)
1001b2ec:	4814      	ldr	r0, [pc, #80]	@ (1001b340 <_dtoa_r+0xe40>)
1001b2ee:	2200      	movs	r2, #0
1001b2f0:	f240 11af 	movw	r1, #431	@ 0x1af
1001b2f4:	f005 ff44 	bl	10021180 <__assert_func>
1001b2f8:	2a00      	cmp	r2, #0
1001b2fa:	f77f ad70 	ble.w	1001adde <_dtoa_r+0x8de>
1001b2fe:	e55b      	b.n	1001adb8 <_dtoa_r+0x8b8>
1001b300:	4b0e      	ldr	r3, [pc, #56]	@ (1001b33c <_dtoa_r+0xe3c>)
1001b302:	480f      	ldr	r0, [pc, #60]	@ (1001b340 <_dtoa_r+0xe40>)
1001b304:	462a      	mov	r2, r5
1001b306:	f240 21ef 	movw	r1, #751	@ 0x2ef
1001b30a:	f005 ff39 	bl	10021180 <__assert_func>
1001b30e:	4b0d      	ldr	r3, [pc, #52]	@ (1001b344 <_dtoa_r+0xe44>)
1001b310:	930a      	str	r3, [sp, #40]	@ 0x28
1001b312:	f7ff b930 	b.w	1001a576 <_dtoa_r+0x76>
1001b316:	9b03      	ldr	r3, [sp, #12]
1001b318:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001b31a:	639a      	str	r2, [r3, #56]	@ 0x38
1001b31c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001b320:	2201      	movs	r2, #1
1001b322:	9529      	str	r5, [sp, #164]	@ 0xa4
1001b324:	9318      	str	r3, [sp, #96]	@ 0x60
1001b326:	920c      	str	r2, [sp, #48]	@ 0x30
1001b328:	9306      	str	r3, [sp, #24]
1001b32a:	f7ff bb3d 	b.w	1001a9a8 <_dtoa_r+0x4a8>
1001b32e:	bf00      	nop
1001b330:	40240000 	.word	0x40240000
1001b334:	3fe00000 	.word	0x3fe00000
1001b338:	401c0000 	.word	0x401c0000
1001b33c:	1002c324 	.word	0x1002c324
1001b340:	1002c338 	.word	0x1002c338
1001b344:	1002c314 	.word	0x1002c314

1001b348 <_malloc_trim_r>:
1001b348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001b34c:	4606      	mov	r6, r0
1001b34e:	2008      	movs	r0, #8
1001b350:	4689      	mov	r9, r1
1001b352:	f7fe fcb1 	bl	10019cb8 <sysconf>
1001b356:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 1001b3f4 <_malloc_trim_r+0xac>
1001b35a:	4605      	mov	r5, r0
1001b35c:	4630      	mov	r0, r6
1001b35e:	f7fd fb69 	bl	10018a34 <__malloc_lock>
1001b362:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001b366:	685f      	ldr	r7, [r3, #4]
1001b368:	f027 0703 	bic.w	r7, r7, #3
1001b36c:	f1a7 0411 	sub.w	r4, r7, #17
1001b370:	eba4 0409 	sub.w	r4, r4, r9
1001b374:	442c      	add	r4, r5
1001b376:	fbb4 f4f5 	udiv	r4, r4, r5
1001b37a:	3c01      	subs	r4, #1
1001b37c:	fb05 f404 	mul.w	r4, r5, r4
1001b380:	42a5      	cmp	r5, r4
1001b382:	dc08      	bgt.n	1001b396 <_malloc_trim_r+0x4e>
1001b384:	2100      	movs	r1, #0
1001b386:	4630      	mov	r0, r6
1001b388:	f7fe fc68 	bl	10019c5c <_sbrk_r>
1001b38c:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001b390:	443b      	add	r3, r7
1001b392:	4298      	cmp	r0, r3
1001b394:	d005      	beq.n	1001b3a2 <_malloc_trim_r+0x5a>
1001b396:	4630      	mov	r0, r6
1001b398:	f7fd fb52 	bl	10018a40 <__malloc_unlock>
1001b39c:	2000      	movs	r0, #0
1001b39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001b3a2:	4261      	negs	r1, r4
1001b3a4:	4630      	mov	r0, r6
1001b3a6:	f7fe fc59 	bl	10019c5c <_sbrk_r>
1001b3aa:	3001      	adds	r0, #1
1001b3ac:	d00f      	beq.n	1001b3ce <_malloc_trim_r+0x86>
1001b3ae:	4a12      	ldr	r2, [pc, #72]	@ (1001b3f8 <_malloc_trim_r+0xb0>)
1001b3b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001b3b4:	1b3f      	subs	r7, r7, r4
1001b3b6:	f047 0701 	orr.w	r7, r7, #1
1001b3ba:	605f      	str	r7, [r3, #4]
1001b3bc:	6813      	ldr	r3, [r2, #0]
1001b3be:	4630      	mov	r0, r6
1001b3c0:	1b1b      	subs	r3, r3, r4
1001b3c2:	6013      	str	r3, [r2, #0]
1001b3c4:	f7fd fb3c 	bl	10018a40 <__malloc_unlock>
1001b3c8:	2001      	movs	r0, #1
1001b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001b3ce:	2100      	movs	r1, #0
1001b3d0:	4630      	mov	r0, r6
1001b3d2:	f7fe fc43 	bl	10019c5c <_sbrk_r>
1001b3d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
1001b3da:	1a83      	subs	r3, r0, r2
1001b3dc:	2b0f      	cmp	r3, #15
1001b3de:	ddda      	ble.n	1001b396 <_malloc_trim_r+0x4e>
1001b3e0:	f043 0301 	orr.w	r3, r3, #1
1001b3e4:	6053      	str	r3, [r2, #4]
1001b3e6:	4b05      	ldr	r3, [pc, #20]	@ (1001b3fc <_malloc_trim_r+0xb4>)
1001b3e8:	4903      	ldr	r1, [pc, #12]	@ (1001b3f8 <_malloc_trim_r+0xb0>)
1001b3ea:	681b      	ldr	r3, [r3, #0]
1001b3ec:	1ac0      	subs	r0, r0, r3
1001b3ee:	6008      	str	r0, [r1, #0]
1001b3f0:	e7d1      	b.n	1001b396 <_malloc_trim_r+0x4e>
1001b3f2:	bf00      	nop
1001b3f4:	20000060 	.word	0x20000060
1001b3f8:	20001598 	.word	0x20001598
1001b3fc:	20000054 	.word	0x20000054

1001b400 <_free_r>:
1001b400:	2900      	cmp	r1, #0
1001b402:	d07c      	beq.n	1001b4fe <_free_r+0xfe>
1001b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b406:	460c      	mov	r4, r1
1001b408:	4606      	mov	r6, r0
1001b40a:	f7fd fb13 	bl	10018a34 <__malloc_lock>
1001b40e:	f854 3c04 	ldr.w	r3, [r4, #-4]
1001b412:	4f77      	ldr	r7, [pc, #476]	@ (1001b5f0 <_free_r+0x1f0>)
1001b414:	f1a4 0508 	sub.w	r5, r4, #8
1001b418:	f023 0101 	bic.w	r1, r3, #1
1001b41c:	1868      	adds	r0, r5, r1
1001b41e:	f8d7 c008 	ldr.w	ip, [r7, #8]
1001b422:	6842      	ldr	r2, [r0, #4]
1001b424:	4584      	cmp	ip, r0
1001b426:	f022 0203 	bic.w	r2, r2, #3
1001b42a:	f000 8083 	beq.w	1001b534 <_free_r+0x134>
1001b42e:	07db      	lsls	r3, r3, #31
1001b430:	6042      	str	r2, [r0, #4]
1001b432:	eb00 0c02 	add.w	ip, r0, r2
1001b436:	d433      	bmi.n	1001b4a0 <_free_r+0xa0>
1001b438:	f854 4c08 	ldr.w	r4, [r4, #-8]
1001b43c:	f8dc 3004 	ldr.w	r3, [ip, #4]
1001b440:	1b2d      	subs	r5, r5, r4
1001b442:	4421      	add	r1, r4
1001b444:	68ac      	ldr	r4, [r5, #8]
1001b446:	f107 0c08 	add.w	ip, r7, #8
1001b44a:	4564      	cmp	r4, ip
1001b44c:	f003 0301 	and.w	r3, r3, #1
1001b450:	d064      	beq.n	1001b51c <_free_r+0x11c>
1001b452:	f8d5 e00c 	ldr.w	lr, [r5, #12]
1001b456:	f8c4 e00c 	str.w	lr, [r4, #12]
1001b45a:	f8ce 4008 	str.w	r4, [lr, #8]
1001b45e:	2b00      	cmp	r3, #0
1001b460:	f000 8081 	beq.w	1001b566 <_free_r+0x166>
1001b464:	f041 0301 	orr.w	r3, r1, #1
1001b468:	606b      	str	r3, [r5, #4]
1001b46a:	6001      	str	r1, [r0, #0]
1001b46c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
1001b470:	d222      	bcs.n	1001b4b8 <_free_r+0xb8>
1001b472:	6878      	ldr	r0, [r7, #4]
1001b474:	08cb      	lsrs	r3, r1, #3
1001b476:	2201      	movs	r2, #1
1001b478:	0949      	lsrs	r1, r1, #5
1001b47a:	3301      	adds	r3, #1
1001b47c:	408a      	lsls	r2, r1
1001b47e:	4302      	orrs	r2, r0
1001b480:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
1001b484:	607a      	str	r2, [r7, #4]
1001b486:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
1001b48a:	3a08      	subs	r2, #8
1001b48c:	e9c5 1202 	strd	r1, r2, [r5, #8]
1001b490:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
1001b494:	60cd      	str	r5, [r1, #12]
1001b496:	4630      	mov	r0, r6
1001b498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1001b49c:	f7fd bad0 	b.w	10018a40 <__malloc_unlock>
1001b4a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
1001b4a4:	07db      	lsls	r3, r3, #31
1001b4a6:	d52b      	bpl.n	1001b500 <_free_r+0x100>
1001b4a8:	f041 0301 	orr.w	r3, r1, #1
1001b4ac:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
1001b4b0:	f844 3c04 	str.w	r3, [r4, #-4]
1001b4b4:	6001      	str	r1, [r0, #0]
1001b4b6:	d3dc      	bcc.n	1001b472 <_free_r+0x72>
1001b4b8:	f5b1 6f20 	cmp.w	r1, #2560	@ 0xa00
1001b4bc:	ea4f 2351 	mov.w	r3, r1, lsr #9
1001b4c0:	d253      	bcs.n	1001b56a <_free_r+0x16a>
1001b4c2:	098b      	lsrs	r3, r1, #6
1001b4c4:	f103 0039 	add.w	r0, r3, #57	@ 0x39
1001b4c8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
1001b4cc:	00c3      	lsls	r3, r0, #3
1001b4ce:	18f8      	adds	r0, r7, r3
1001b4d0:	58fb      	ldr	r3, [r7, r3]
1001b4d2:	3808      	subs	r0, #8
1001b4d4:	4298      	cmp	r0, r3
1001b4d6:	d103      	bne.n	1001b4e0 <_free_r+0xe0>
1001b4d8:	e063      	b.n	1001b5a2 <_free_r+0x1a2>
1001b4da:	689b      	ldr	r3, [r3, #8]
1001b4dc:	4298      	cmp	r0, r3
1001b4de:	d004      	beq.n	1001b4ea <_free_r+0xea>
1001b4e0:	685a      	ldr	r2, [r3, #4]
1001b4e2:	f022 0203 	bic.w	r2, r2, #3
1001b4e6:	428a      	cmp	r2, r1
1001b4e8:	d8f7      	bhi.n	1001b4da <_free_r+0xda>
1001b4ea:	68d8      	ldr	r0, [r3, #12]
1001b4ec:	e9c5 3002 	strd	r3, r0, [r5, #8]
1001b4f0:	6085      	str	r5, [r0, #8]
1001b4f2:	60dd      	str	r5, [r3, #12]
1001b4f4:	4630      	mov	r0, r6
1001b4f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1001b4fa:	f7fd baa1 	b.w	10018a40 <__malloc_unlock>
1001b4fe:	4770      	bx	lr
1001b500:	4411      	add	r1, r2
1001b502:	f107 0c08 	add.w	ip, r7, #8
1001b506:	6883      	ldr	r3, [r0, #8]
1001b508:	4563      	cmp	r3, ip
1001b50a:	d03f      	beq.n	1001b58c <_free_r+0x18c>
1001b50c:	68c2      	ldr	r2, [r0, #12]
1001b50e:	60da      	str	r2, [r3, #12]
1001b510:	6093      	str	r3, [r2, #8]
1001b512:	f041 0301 	orr.w	r3, r1, #1
1001b516:	606b      	str	r3, [r5, #4]
1001b518:	5069      	str	r1, [r5, r1]
1001b51a:	e7a7      	b.n	1001b46c <_free_r+0x6c>
1001b51c:	2b00      	cmp	r3, #0
1001b51e:	d161      	bne.n	1001b5e4 <_free_r+0x1e4>
1001b520:	440a      	add	r2, r1
1001b522:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
1001b526:	60cb      	str	r3, [r1, #12]
1001b528:	6099      	str	r1, [r3, #8]
1001b52a:	f042 0301 	orr.w	r3, r2, #1
1001b52e:	606b      	str	r3, [r5, #4]
1001b530:	50aa      	str	r2, [r5, r2]
1001b532:	e7b0      	b.n	1001b496 <_free_r+0x96>
1001b534:	440a      	add	r2, r1
1001b536:	07d9      	lsls	r1, r3, #31
1001b538:	d407      	bmi.n	1001b54a <_free_r+0x14a>
1001b53a:	f854 3c08 	ldr.w	r3, [r4, #-8]
1001b53e:	1aed      	subs	r5, r5, r3
1001b540:	441a      	add	r2, r3
1001b542:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
1001b546:	60cb      	str	r3, [r1, #12]
1001b548:	6099      	str	r1, [r3, #8]
1001b54a:	f042 0301 	orr.w	r3, r2, #1
1001b54e:	606b      	str	r3, [r5, #4]
1001b550:	4b28      	ldr	r3, [pc, #160]	@ (1001b5f4 <_free_r+0x1f4>)
1001b552:	60bd      	str	r5, [r7, #8]
1001b554:	681b      	ldr	r3, [r3, #0]
1001b556:	4293      	cmp	r3, r2
1001b558:	d89d      	bhi.n	1001b496 <_free_r+0x96>
1001b55a:	4b27      	ldr	r3, [pc, #156]	@ (1001b5f8 <_free_r+0x1f8>)
1001b55c:	4630      	mov	r0, r6
1001b55e:	6819      	ldr	r1, [r3, #0]
1001b560:	f7ff fef2 	bl	1001b348 <_malloc_trim_r>
1001b564:	e797      	b.n	1001b496 <_free_r+0x96>
1001b566:	4411      	add	r1, r2
1001b568:	e7cd      	b.n	1001b506 <_free_r+0x106>
1001b56a:	2b14      	cmp	r3, #20
1001b56c:	d908      	bls.n	1001b580 <_free_r+0x180>
1001b56e:	2b54      	cmp	r3, #84	@ 0x54
1001b570:	d81f      	bhi.n	1001b5b2 <_free_r+0x1b2>
1001b572:	0b0b      	lsrs	r3, r1, #12
1001b574:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
1001b578:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
1001b57c:	00c3      	lsls	r3, r0, #3
1001b57e:	e7a6      	b.n	1001b4ce <_free_r+0xce>
1001b580:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
1001b584:	f103 025b 	add.w	r2, r3, #91	@ 0x5b
1001b588:	00c3      	lsls	r3, r0, #3
1001b58a:	e7a0      	b.n	1001b4ce <_free_r+0xce>
1001b58c:	f041 0301 	orr.w	r3, r1, #1
1001b590:	613d      	str	r5, [r7, #16]
1001b592:	617d      	str	r5, [r7, #20]
1001b594:	f8c5 c008 	str.w	ip, [r5, #8]
1001b598:	f8c5 c00c 	str.w	ip, [r5, #12]
1001b59c:	606b      	str	r3, [r5, #4]
1001b59e:	5069      	str	r1, [r5, r1]
1001b5a0:	e779      	b.n	1001b496 <_free_r+0x96>
1001b5a2:	6879      	ldr	r1, [r7, #4]
1001b5a4:	1092      	asrs	r2, r2, #2
1001b5a6:	2401      	movs	r4, #1
1001b5a8:	fa04 f202 	lsl.w	r2, r4, r2
1001b5ac:	430a      	orrs	r2, r1
1001b5ae:	607a      	str	r2, [r7, #4]
1001b5b0:	e79c      	b.n	1001b4ec <_free_r+0xec>
1001b5b2:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
1001b5b6:	d806      	bhi.n	1001b5c6 <_free_r+0x1c6>
1001b5b8:	0bcb      	lsrs	r3, r1, #15
1001b5ba:	f103 0078 	add.w	r0, r3, #120	@ 0x78
1001b5be:	f103 0277 	add.w	r2, r3, #119	@ 0x77
1001b5c2:	00c3      	lsls	r3, r0, #3
1001b5c4:	e783      	b.n	1001b4ce <_free_r+0xce>
1001b5c6:	f240 5254 	movw	r2, #1364	@ 0x554
1001b5ca:	4293      	cmp	r3, r2
1001b5cc:	d806      	bhi.n	1001b5dc <_free_r+0x1dc>
1001b5ce:	0c8b      	lsrs	r3, r1, #18
1001b5d0:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
1001b5d4:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
1001b5d8:	00c3      	lsls	r3, r0, #3
1001b5da:	e778      	b.n	1001b4ce <_free_r+0xce>
1001b5dc:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
1001b5e0:	227e      	movs	r2, #126	@ 0x7e
1001b5e2:	e774      	b.n	1001b4ce <_free_r+0xce>
1001b5e4:	f041 0301 	orr.w	r3, r1, #1
1001b5e8:	606b      	str	r3, [r5, #4]
1001b5ea:	6001      	str	r1, [r0, #0]
1001b5ec:	e753      	b.n	1001b496 <_free_r+0x96>
1001b5ee:	bf00      	nop
1001b5f0:	20000060 	.word	0x20000060
1001b5f4:	20000058 	.word	0x20000058
1001b5f8:	200015c8 	.word	0x200015c8

1001b5fc <__ascii_mbtowc>:
1001b5fc:	b082      	sub	sp, #8
1001b5fe:	b149      	cbz	r1, 1001b614 <__ascii_mbtowc+0x18>
1001b600:	b15a      	cbz	r2, 1001b61a <__ascii_mbtowc+0x1e>
1001b602:	b16b      	cbz	r3, 1001b620 <__ascii_mbtowc+0x24>
1001b604:	7813      	ldrb	r3, [r2, #0]
1001b606:	600b      	str	r3, [r1, #0]
1001b608:	7812      	ldrb	r2, [r2, #0]
1001b60a:	1e10      	subs	r0, r2, #0
1001b60c:	bf18      	it	ne
1001b60e:	2001      	movne	r0, #1
1001b610:	b002      	add	sp, #8
1001b612:	4770      	bx	lr
1001b614:	a901      	add	r1, sp, #4
1001b616:	2a00      	cmp	r2, #0
1001b618:	d1f3      	bne.n	1001b602 <__ascii_mbtowc+0x6>
1001b61a:	4610      	mov	r0, r2
1001b61c:	b002      	add	sp, #8
1001b61e:	4770      	bx	lr
1001b620:	f06f 0001 	mvn.w	r0, #1
1001b624:	e7f4      	b.n	1001b610 <__ascii_mbtowc+0x14>
1001b626:	bf00      	nop

1001b628 <_svfprintf_r>:
1001b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001b62c:	b0df      	sub	sp, #380	@ 0x17c
1001b62e:	460c      	mov	r4, r1
1001b630:	9109      	str	r1, [sp, #36]	@ 0x24
1001b632:	4691      	mov	r9, r2
1001b634:	930d      	str	r3, [sp, #52]	@ 0x34
1001b636:	4683      	mov	fp, r0
1001b638:	f7fe face 	bl	10019bd8 <_localeconv_r>
1001b63c:	6803      	ldr	r3, [r0, #0]
1001b63e:	931a      	str	r3, [sp, #104]	@ 0x68
1001b640:	4618      	mov	r0, r3
1001b642:	f7fe fddd 	bl	1001a200 <strlen>
1001b646:	2100      	movs	r1, #0
1001b648:	9018      	str	r0, [sp, #96]	@ 0x60
1001b64a:	2208      	movs	r2, #8
1001b64c:	a82e      	add	r0, sp, #184	@ 0xb8
1001b64e:	f7fe f9f5 	bl	10019a3c <memset>
1001b652:	89a3      	ldrh	r3, [r4, #12]
1001b654:	0619      	lsls	r1, r3, #24
1001b656:	d503      	bpl.n	1001b660 <_svfprintf_r+0x38>
1001b658:	6923      	ldr	r3, [r4, #16]
1001b65a:	2b00      	cmp	r3, #0
1001b65c:	f000 8788 	beq.w	1001c570 <_svfprintf_r+0xf48>
1001b660:	2300      	movs	r3, #0
1001b662:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
1001b666:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
1001b66a:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
1001b66e:	9313      	str	r3, [sp, #76]	@ 0x4c
1001b670:	9319      	str	r3, [sp, #100]	@ 0x64
1001b672:	930a      	str	r3, [sp, #40]	@ 0x28
1001b674:	2400      	movs	r4, #0
1001b676:	2300      	movs	r3, #0
1001b678:	e9cd 3416 	strd	r3, r4, [sp, #88]	@ 0x58
1001b67c:	aa35      	add	r2, sp, #212	@ 0xd4
1001b67e:	9232      	str	r2, [sp, #200]	@ 0xc8
1001b680:	4690      	mov	r8, r2
1001b682:	f8cd b01c 	str.w	fp, [sp, #28]
1001b686:	464d      	mov	r5, r9
1001b688:	9f07      	ldr	r7, [sp, #28]
1001b68a:	462e      	mov	r6, r5
1001b68c:	4b73      	ldr	r3, [pc, #460]	@ (1001b85c <_svfprintf_r+0x234>)
1001b68e:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
1001b692:	f7fe fa9b 	bl	10019bcc <__locale_mb_cur_max>
1001b696:	4603      	mov	r3, r0
1001b698:	a82e      	add	r0, sp, #184	@ 0xb8
1001b69a:	9000      	str	r0, [sp, #0]
1001b69c:	4632      	mov	r2, r6
1001b69e:	a92a      	add	r1, sp, #168	@ 0xa8
1001b6a0:	4638      	mov	r0, r7
1001b6a2:	47a0      	blx	r4
1001b6a4:	2800      	cmp	r0, #0
1001b6a6:	f000 80a9 	beq.w	1001b7fc <_svfprintf_r+0x1d4>
1001b6aa:	f2c0 809f 	blt.w	1001b7ec <_svfprintf_r+0x1c4>
1001b6ae:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
1001b6b0:	2a25      	cmp	r2, #37	@ 0x25
1001b6b2:	4603      	mov	r3, r0
1001b6b4:	d001      	beq.n	1001b6ba <_svfprintf_r+0x92>
1001b6b6:	441e      	add	r6, r3
1001b6b8:	e7e8      	b.n	1001b68c <_svfprintf_r+0x64>
1001b6ba:	1b77      	subs	r7, r6, r5
1001b6bc:	4604      	mov	r4, r0
1001b6be:	f040 80a0 	bne.w	1001b802 <_svfprintf_r+0x1da>
1001b6c2:	2300      	movs	r3, #0
1001b6c4:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001b6c8:	4699      	mov	r9, r3
1001b6ca:	930b      	str	r3, [sp, #44]	@ 0x2c
1001b6cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001b6d0:	7873      	ldrb	r3, [r6, #1]
1001b6d2:	9208      	str	r2, [sp, #32]
1001b6d4:	1c74      	adds	r4, r6, #1
1001b6d6:	3401      	adds	r4, #1
1001b6d8:	f1a3 0220 	sub.w	r2, r3, #32
1001b6dc:	2a5a      	cmp	r2, #90	@ 0x5a
1001b6de:	f200 80bf 	bhi.w	1001b860 <_svfprintf_r+0x238>
1001b6e2:	e8df f012 	tbh	[pc, r2, lsl #1]
1001b6e6:	02e6      	.short	0x02e6
1001b6e8:	00bd00bd 	.word	0x00bd00bd
1001b6ec:	00bd02e2 	.word	0x00bd02e2
1001b6f0:	00bd00bd 	.word	0x00bd00bd
1001b6f4:	00bd006a 	.word	0x00bd006a
1001b6f8:	024800bd 	.word	0x024800bd
1001b6fc:	00bd0257 	.word	0x00bd0257
1001b700:	02f40253 	.word	0x02f40253
1001b704:	02f000bd 	.word	0x02f000bd
1001b708:	005b005b 	.word	0x005b005b
1001b70c:	005b005b 	.word	0x005b005b
1001b710:	005b005b 	.word	0x005b005b
1001b714:	005b005b 	.word	0x005b005b
1001b718:	00bd005b 	.word	0x00bd005b
1001b71c:	00bd00bd 	.word	0x00bd00bd
1001b720:	00bd00bd 	.word	0x00bd00bd
1001b724:	00bd00bd 	.word	0x00bd00bd
1001b728:	00bd013e 	.word	0x00bd013e
1001b72c:	030e01c7 	.word	0x030e01c7
1001b730:	013e013e 	.word	0x013e013e
1001b734:	00bd013e 	.word	0x00bd013e
1001b738:	00bd00bd 	.word	0x00bd00bd
1001b73c:	02de00bd 	.word	0x02de00bd
1001b740:	00bd00bd 	.word	0x00bd00bd
1001b744:	00bd025c 	.word	0x00bd025c
1001b748:	00bd00bd 	.word	0x00bd00bd
1001b74c:	00bd01f1 	.word	0x00bd01f1
1001b750:	00bd02cb 	.word	0x00bd02cb
1001b754:	070600bd 	.word	0x070600bd
1001b758:	00bd00bd 	.word	0x00bd00bd
1001b75c:	00bd00bd 	.word	0x00bd00bd
1001b760:	00bd00bd 	.word	0x00bd00bd
1001b764:	00bd00bd 	.word	0x00bd00bd
1001b768:	00bd013e 	.word	0x00bd013e
1001b76c:	022301c7 	.word	0x022301c7
1001b770:	013e013e 	.word	0x013e013e
1001b774:	028d013e 	.word	0x028d013e
1001b778:	007f0223 	.word	0x007f0223
1001b77c:	02a600bd 	.word	0x02a600bd
1001b780:	029700bd 	.word	0x029700bd
1001b784:	02b906fb 	.word	0x02b906fb
1001b788:	00bd007f 	.word	0x00bd007f
1001b78c:	007d01f1 	.word	0x007d01f1
1001b790:	00bd0701 	.word	0x00bd0701
1001b794:	072a00bd 	.word	0x072a00bd
1001b798:	007d00bd 	.word	0x007d00bd
1001b79c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001b7a0:	2100      	movs	r1, #0
1001b7a2:	f814 3b01 	ldrb.w	r3, [r4], #1
1001b7a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1001b7aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
1001b7ae:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001b7b2:	2a09      	cmp	r2, #9
1001b7b4:	d9f5      	bls.n	1001b7a2 <_svfprintf_r+0x17a>
1001b7b6:	910b      	str	r1, [sp, #44]	@ 0x2c
1001b7b8:	e78e      	b.n	1001b6d8 <_svfprintf_r+0xb0>
1001b7ba:	9f07      	ldr	r7, [sp, #28]
1001b7bc:	4638      	mov	r0, r7
1001b7be:	f7fe fa0b 	bl	10019bd8 <_localeconv_r>
1001b7c2:	6843      	ldr	r3, [r0, #4]
1001b7c4:	931d      	str	r3, [sp, #116]	@ 0x74
1001b7c6:	4618      	mov	r0, r3
1001b7c8:	f7fe fd1a 	bl	1001a200 <strlen>
1001b7cc:	901e      	str	r0, [sp, #120]	@ 0x78
1001b7ce:	4606      	mov	r6, r0
1001b7d0:	4638      	mov	r0, r7
1001b7d2:	f7fe fa01 	bl	10019bd8 <_localeconv_r>
1001b7d6:	6883      	ldr	r3, [r0, #8]
1001b7d8:	931b      	str	r3, [sp, #108]	@ 0x6c
1001b7da:	2e00      	cmp	r6, #0
1001b7dc:	f040 8616 	bne.w	1001c40c <_svfprintf_r+0xde4>
1001b7e0:	7823      	ldrb	r3, [r4, #0]
1001b7e2:	e778      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001b7e4:	7823      	ldrb	r3, [r4, #0]
1001b7e6:	f049 0920 	orr.w	r9, r9, #32
1001b7ea:	e774      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001b7ec:	2208      	movs	r2, #8
1001b7ee:	2100      	movs	r1, #0
1001b7f0:	a82e      	add	r0, sp, #184	@ 0xb8
1001b7f2:	f7fe f923 	bl	10019a3c <memset>
1001b7f6:	2301      	movs	r3, #1
1001b7f8:	441e      	add	r6, r3
1001b7fa:	e747      	b.n	1001b68c <_svfprintf_r+0x64>
1001b7fc:	1b77      	subs	r7, r6, r5
1001b7fe:	4604      	mov	r4, r0
1001b800:	d011      	beq.n	1001b826 <_svfprintf_r+0x1fe>
1001b802:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
1001b804:	443b      	add	r3, r7
1001b806:	9334      	str	r3, [sp, #208]	@ 0xd0
1001b808:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b80a:	3301      	adds	r3, #1
1001b80c:	2b07      	cmp	r3, #7
1001b80e:	e9c8 5700 	strd	r5, r7, [r8]
1001b812:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b814:	dc18      	bgt.n	1001b848 <_svfprintf_r+0x220>
1001b816:	f108 0808 	add.w	r8, r8, #8
1001b81a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001b81c:	443b      	add	r3, r7
1001b81e:	930a      	str	r3, [sp, #40]	@ 0x28
1001b820:	2c00      	cmp	r4, #0
1001b822:	f47f af4e 	bne.w	1001b6c2 <_svfprintf_r+0x9a>
1001b826:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
1001b828:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001b82c:	2b00      	cmp	r3, #0
1001b82e:	f041 81ed 	bne.w	1001cc0c <_svfprintf_r+0x15e4>
1001b832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001b834:	899b      	ldrh	r3, [r3, #12]
1001b836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1001b83a:	2b00      	cmp	r3, #0
1001b83c:	f041 83bd 	bne.w	1001cfba <_svfprintf_r+0x1992>
1001b840:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001b842:	b05f      	add	sp, #380	@ 0x17c
1001b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001b848:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001b84a:	9807      	ldr	r0, [sp, #28]
1001b84c:	aa32      	add	r2, sp, #200	@ 0xc8
1001b84e:	f006 fa05 	bl	10021c5c <__ssprint_r>
1001b852:	2800      	cmp	r0, #0
1001b854:	d1ed      	bne.n	1001b832 <_svfprintf_r+0x20a>
1001b856:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001b85a:	e7de      	b.n	1001b81a <_svfprintf_r+0x1f2>
1001b85c:	20000474 	.word	0x20000474
1001b860:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b864:	2b00      	cmp	r3, #0
1001b866:	d0de      	beq.n	1001b826 <_svfprintf_r+0x1fe>
1001b868:	2200      	movs	r2, #0
1001b86a:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
1001b86e:	2301      	movs	r3, #1
1001b870:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001b874:	9306      	str	r3, [sp, #24]
1001b876:	920c      	str	r2, [sp, #48]	@ 0x30
1001b878:	469b      	mov	fp, r3
1001b87a:	9208      	str	r2, [sp, #32]
1001b87c:	9214      	str	r2, [sp, #80]	@ 0x50
1001b87e:	9210      	str	r2, [sp, #64]	@ 0x40
1001b880:	9212      	str	r2, [sp, #72]	@ 0x48
1001b882:	ad45      	add	r5, sp, #276	@ 0x114
1001b884:	f019 0302 	ands.w	r3, r9, #2
1001b888:	d002      	beq.n	1001b890 <_svfprintf_r+0x268>
1001b88a:	9906      	ldr	r1, [sp, #24]
1001b88c:	3102      	adds	r1, #2
1001b88e:	9106      	str	r1, [sp, #24]
1001b890:	f019 0784 	ands.w	r7, r9, #132	@ 0x84
1001b894:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001b896:	d105      	bne.n	1001b8a4 <_svfprintf_r+0x27c>
1001b898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1001b89a:	9806      	ldr	r0, [sp, #24]
1001b89c:	1a0e      	subs	r6, r1, r0
1001b89e:	2e00      	cmp	r6, #0
1001b8a0:	f300 80a7 	bgt.w	1001b9f2 <_svfprintf_r+0x3ca>
1001b8a4:	b182      	cbz	r2, 1001b8c8 <_svfprintf_r+0x2a0>
1001b8a6:	2201      	movs	r2, #1
1001b8a8:	f8c8 2004 	str.w	r2, [r8, #4]
1001b8ac:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
1001b8ae:	3201      	adds	r2, #1
1001b8b0:	3401      	adds	r4, #1
1001b8b2:	f10d 019f 	add.w	r1, sp, #159	@ 0x9f
1001b8b6:	2a07      	cmp	r2, #7
1001b8b8:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b8ba:	9233      	str	r2, [sp, #204]	@ 0xcc
1001b8bc:	f8c8 1000 	str.w	r1, [r8]
1001b8c0:	f300 8403 	bgt.w	1001c0ca <_svfprintf_r+0xaa2>
1001b8c4:	f108 0808 	add.w	r8, r8, #8
1001b8c8:	b183      	cbz	r3, 1001b8ec <_svfprintf_r+0x2c4>
1001b8ca:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b8cc:	aa28      	add	r2, sp, #160	@ 0xa0
1001b8ce:	3301      	adds	r3, #1
1001b8d0:	3402      	adds	r4, #2
1001b8d2:	f8c8 2000 	str.w	r2, [r8]
1001b8d6:	2b07      	cmp	r3, #7
1001b8d8:	f04f 0202 	mov.w	r2, #2
1001b8dc:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b8de:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b8e0:	f8c8 2004 	str.w	r2, [r8, #4]
1001b8e4:	f300 83e5 	bgt.w	1001c0b2 <_svfprintf_r+0xa8a>
1001b8e8:	f108 0808 	add.w	r8, r8, #8
1001b8ec:	2f80      	cmp	r7, #128	@ 0x80
1001b8ee:	f000 82be 	beq.w	1001be6e <_svfprintf_r+0x846>
1001b8f2:	9b08      	ldr	r3, [sp, #32]
1001b8f4:	eba3 060b 	sub.w	r6, r3, fp
1001b8f8:	2e00      	cmp	r6, #0
1001b8fa:	f300 82fd 	bgt.w	1001bef8 <_svfprintf_r+0x8d0>
1001b8fe:	f419 7f80 	tst.w	r9, #256	@ 0x100
1001b902:	f040 8217 	bne.w	1001bd34 <_svfprintf_r+0x70c>
1001b906:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b908:	f8c8 5000 	str.w	r5, [r8]
1001b90c:	3301      	adds	r3, #1
1001b90e:	445c      	add	r4, fp
1001b910:	2b07      	cmp	r3, #7
1001b912:	f8c8 b004 	str.w	fp, [r8, #4]
1001b916:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b918:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b91a:	f300 836a 	bgt.w	1001bff2 <_svfprintf_r+0x9ca>
1001b91e:	f108 0808 	add.w	r8, r8, #8
1001b922:	f019 0f04 	tst.w	r9, #4
1001b926:	d005      	beq.n	1001b934 <_svfprintf_r+0x30c>
1001b928:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001b92a:	9a06      	ldr	r2, [sp, #24]
1001b92c:	1a9d      	subs	r5, r3, r2
1001b92e:	2d00      	cmp	r5, #0
1001b930:	f300 83da 	bgt.w	1001c0e8 <_svfprintf_r+0xac0>
1001b934:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
1001b938:	9906      	ldr	r1, [sp, #24]
1001b93a:	428a      	cmp	r2, r1
1001b93c:	bfac      	ite	ge
1001b93e:	189b      	addge	r3, r3, r2
1001b940:	185b      	addlt	r3, r3, r1
1001b942:	930a      	str	r3, [sp, #40]	@ 0x28
1001b944:	2c00      	cmp	r4, #0
1001b946:	f040 8316 	bne.w	1001bf76 <_svfprintf_r+0x94e>
1001b94a:	2300      	movs	r3, #0
1001b94c:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b94e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001b950:	b11b      	cbz	r3, 1001b95a <_svfprintf_r+0x332>
1001b952:	990c      	ldr	r1, [sp, #48]	@ 0x30
1001b954:	9807      	ldr	r0, [sp, #28]
1001b956:	f7ff fd53 	bl	1001b400 <_free_r>
1001b95a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001b95e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1001b960:	e692      	b.n	1001b688 <_svfprintf_r+0x60>
1001b962:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b968:	3307      	adds	r3, #7
1001b96a:	f023 0307 	bic.w	r3, r3, #7
1001b96e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
1001b972:	930d      	str	r3, [sp, #52]	@ 0x34
1001b974:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
1001b978:	9323      	str	r3, [sp, #140]	@ 0x8c
1001b97a:	9622      	str	r6, [sp, #136]	@ 0x88
1001b97c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	@ 0x88
1001b980:	4bb1      	ldr	r3, [pc, #708]	@ (1001bc48 <_svfprintf_r+0x620>)
1001b982:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001b986:	4650      	mov	r0, sl
1001b988:	4659      	mov	r1, fp
1001b98a:	e9cd 6716 	strd	r6, r7, [sp, #88]	@ 0x58
1001b98e:	f006 ff91 	bl	100228b4 <__aeabi_dcmpun>
1001b992:	2800      	cmp	r0, #0
1001b994:	f040 8547 	bne.w	1001c426 <_svfprintf_r+0xdfe>
1001b998:	4bab      	ldr	r3, [pc, #684]	@ (1001bc48 <_svfprintf_r+0x620>)
1001b99a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001b99e:	4650      	mov	r0, sl
1001b9a0:	4659      	mov	r1, fp
1001b9a2:	f006 ff69 	bl	10022878 <__aeabi_dcmple>
1001b9a6:	2800      	cmp	r0, #0
1001b9a8:	f040 853d 	bne.w	1001c426 <_svfprintf_r+0xdfe>
1001b9ac:	2200      	movs	r2, #0
1001b9ae:	2300      	movs	r3, #0
1001b9b0:	4630      	mov	r0, r6
1001b9b2:	4639      	mov	r1, r7
1001b9b4:	f006 ff56 	bl	10022864 <__aeabi_dcmplt>
1001b9b8:	2800      	cmp	r0, #0
1001b9ba:	f041 8053 	bne.w	1001ca64 <_svfprintf_r+0x143c>
1001b9be:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001b9c2:	4da2      	ldr	r5, [pc, #648]	@ (1001bc4c <_svfprintf_r+0x624>)
1001b9c4:	4ba2      	ldr	r3, [pc, #648]	@ (1001bc50 <_svfprintf_r+0x628>)
1001b9c6:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
1001b9ca:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001b9cc:	2947      	cmp	r1, #71	@ 0x47
1001b9ce:	bfc8      	it	gt
1001b9d0:	461d      	movgt	r5, r3
1001b9d2:	2300      	movs	r3, #0
1001b9d4:	2103      	movs	r1, #3
1001b9d6:	930c      	str	r3, [sp, #48]	@ 0x30
1001b9d8:	9106      	str	r1, [sp, #24]
1001b9da:	468b      	mov	fp, r1
1001b9dc:	9308      	str	r3, [sp, #32]
1001b9de:	9314      	str	r3, [sp, #80]	@ 0x50
1001b9e0:	9310      	str	r3, [sp, #64]	@ 0x40
1001b9e2:	9312      	str	r3, [sp, #72]	@ 0x48
1001b9e4:	2a00      	cmp	r2, #0
1001b9e6:	f43f af4d 	beq.w	1001b884 <_svfprintf_r+0x25c>
1001b9ea:	9b06      	ldr	r3, [sp, #24]
1001b9ec:	3301      	adds	r3, #1
1001b9ee:	9306      	str	r3, [sp, #24]
1001b9f0:	e748      	b.n	1001b884 <_svfprintf_r+0x25c>
1001b9f2:	2e10      	cmp	r6, #16
1001b9f4:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
1001b9f6:	f341 8279 	ble.w	1001ceec <_svfprintf_r+0x18c4>
1001b9fa:	4896      	ldr	r0, [pc, #600]	@ (1001bc54 <_svfprintf_r+0x62c>)
1001b9fc:	9521      	str	r5, [sp, #132]	@ 0x84
1001b9fe:	e9cd 371f 	strd	r3, r7, [sp, #124]	@ 0x7c
1001ba02:	4621      	mov	r1, r4
1001ba04:	9d09      	ldr	r5, [sp, #36]	@ 0x24
1001ba06:	9c07      	ldr	r4, [sp, #28]
1001ba08:	9015      	str	r0, [sp, #84]	@ 0x54
1001ba0a:	f04f 0a10 	mov.w	sl, #16
1001ba0e:	4607      	mov	r7, r0
1001ba10:	e004      	b.n	1001ba1c <_svfprintf_r+0x3f4>
1001ba12:	3e10      	subs	r6, #16
1001ba14:	2e10      	cmp	r6, #16
1001ba16:	f108 0808 	add.w	r8, r8, #8
1001ba1a:	dd16      	ble.n	1001ba4a <_svfprintf_r+0x422>
1001ba1c:	3201      	adds	r2, #1
1001ba1e:	3110      	adds	r1, #16
1001ba20:	2a07      	cmp	r2, #7
1001ba22:	e9c8 7a00 	strd	r7, sl, [r8]
1001ba26:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
1001ba2a:	ddf2      	ble.n	1001ba12 <_svfprintf_r+0x3ea>
1001ba2c:	aa32      	add	r2, sp, #200	@ 0xc8
1001ba2e:	4629      	mov	r1, r5
1001ba30:	4620      	mov	r0, r4
1001ba32:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001ba36:	f006 f911 	bl	10021c5c <__ssprint_r>
1001ba3a:	2800      	cmp	r0, #0
1001ba3c:	f040 86f1 	bne.w	1001c822 <_svfprintf_r+0x11fa>
1001ba40:	3e10      	subs	r6, #16
1001ba42:	2e10      	cmp	r6, #16
1001ba44:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
1001ba48:	dce8      	bgt.n	1001ba1c <_svfprintf_r+0x3f4>
1001ba4a:	e9dd 371f 	ldrd	r3, r7, [sp, #124]	@ 0x7c
1001ba4e:	9d21      	ldr	r5, [sp, #132]	@ 0x84
1001ba50:	460c      	mov	r4, r1
1001ba52:	3201      	adds	r2, #1
1001ba54:	9915      	ldr	r1, [sp, #84]	@ 0x54
1001ba56:	f8c8 1000 	str.w	r1, [r8]
1001ba5a:	4434      	add	r4, r6
1001ba5c:	2a07      	cmp	r2, #7
1001ba5e:	e9cd 2433 	strd	r2, r4, [sp, #204]	@ 0xcc
1001ba62:	f8c8 6004 	str.w	r6, [r8, #4]
1001ba66:	f300 86cb 	bgt.w	1001c800 <_svfprintf_r+0x11d8>
1001ba6a:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001ba6e:	f108 0808 	add.w	r8, r8, #8
1001ba72:	e717      	b.n	1001b8a4 <_svfprintf_r+0x27c>
1001ba74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001ba76:	2b43      	cmp	r3, #67	@ 0x43
1001ba78:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001ba7c:	f102 0404 	add.w	r4, r2, #4
1001ba80:	d003      	beq.n	1001ba8a <_svfprintf_r+0x462>
1001ba82:	f019 0f10 	tst.w	r9, #16
1001ba86:	f000 855d 	beq.w	1001c544 <_svfprintf_r+0xf1c>
1001ba8a:	2208      	movs	r2, #8
1001ba8c:	2100      	movs	r1, #0
1001ba8e:	a830      	add	r0, sp, #192	@ 0xc0
1001ba90:	f7fd ffd4 	bl	10019a3c <memset>
1001ba94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001ba96:	9807      	ldr	r0, [sp, #28]
1001ba98:	681a      	ldr	r2, [r3, #0]
1001ba9a:	ad45      	add	r5, sp, #276	@ 0x114
1001ba9c:	ab30      	add	r3, sp, #192	@ 0xc0
1001ba9e:	4629      	mov	r1, r5
1001baa0:	f7fe fc1a 	bl	1001a2d8 <_wcrtomb_r>
1001baa4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
1001baa8:	4683      	mov	fp, r0
1001baaa:	f001 8281 	beq.w	1001cfb0 <_svfprintf_r+0x1988>
1001baae:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
1001bab2:	9306      	str	r3, [sp, #24]
1001bab4:	2200      	movs	r2, #0
1001bab6:	940d      	str	r4, [sp, #52]	@ 0x34
1001bab8:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001babc:	920c      	str	r2, [sp, #48]	@ 0x30
1001babe:	9208      	str	r2, [sp, #32]
1001bac0:	9214      	str	r2, [sp, #80]	@ 0x50
1001bac2:	9210      	str	r2, [sp, #64]	@ 0x40
1001bac4:	9212      	str	r2, [sp, #72]	@ 0x48
1001bac6:	e6dd      	b.n	1001b884 <_svfprintf_r+0x25c>
1001bac8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1001baca:	f856 5b04 	ldr.w	r5, [r6], #4
1001bace:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001bad2:	2300      	movs	r3, #0
1001bad4:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001bad8:	2d00      	cmp	r5, #0
1001bada:	f000 8558 	beq.w	1001c58e <_svfprintf_r+0xf66>
1001bade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001bae0:	2b53      	cmp	r3, #83	@ 0x53
1001bae2:	f000 86ba 	beq.w	1001c85a <_svfprintf_r+0x1232>
1001bae6:	f019 0310 	ands.w	r3, r9, #16
1001baea:	9312      	str	r3, [sp, #72]	@ 0x48
1001baec:	f040 86b5 	bne.w	1001c85a <_svfprintf_r+0x1232>
1001baf0:	9b08      	ldr	r3, [sp, #32]
1001baf2:	1c5a      	adds	r2, r3, #1
1001baf4:	f001 8095 	beq.w	1001cc22 <_svfprintf_r+0x15fa>
1001baf8:	9912      	ldr	r1, [sp, #72]	@ 0x48
1001bafa:	461a      	mov	r2, r3
1001bafc:	4628      	mov	r0, r5
1001bafe:	f7fe fa8f 	bl	1001a020 <memchr>
1001bb02:	900c      	str	r0, [sp, #48]	@ 0x30
1001bb04:	2800      	cmp	r0, #0
1001bb06:	f001 82f0 	beq.w	1001d0ea <_svfprintf_r+0x1ac2>
1001bb0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001bb0c:	960d      	str	r6, [sp, #52]	@ 0x34
1001bb0e:	eba3 0b05 	sub.w	fp, r3, r5
1001bb12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001bb14:	9308      	str	r3, [sp, #32]
1001bb16:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
1001bb1a:	9314      	str	r3, [sp, #80]	@ 0x50
1001bb1c:	9310      	str	r3, [sp, #64]	@ 0x40
1001bb1e:	930c      	str	r3, [sp, #48]	@ 0x30
1001bb20:	2373      	movs	r3, #115	@ 0x73
1001bb22:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001bb26:	9106      	str	r1, [sp, #24]
1001bb28:	930e      	str	r3, [sp, #56]	@ 0x38
1001bb2a:	e75b      	b.n	1001b9e4 <_svfprintf_r+0x3bc>
1001bb2c:	f019 0f20 	tst.w	r9, #32
1001bb30:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001bb34:	f000 80ed 	beq.w	1001bd12 <_svfprintf_r+0x6ea>
1001bb38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001bb3a:	3307      	adds	r3, #7
1001bb3c:	f023 0307 	bic.w	r3, r3, #7
1001bb40:	461a      	mov	r2, r3
1001bb42:	6859      	ldr	r1, [r3, #4]
1001bb44:	f852 3b08 	ldr.w	r3, [r2], #8
1001bb48:	920d      	str	r2, [sp, #52]	@ 0x34
1001bb4a:	460a      	mov	r2, r1
1001bb4c:	2900      	cmp	r1, #0
1001bb4e:	f2c0 841a 	blt.w	1001c386 <_svfprintf_r+0xd5e>
1001bb52:	9908      	ldr	r1, [sp, #32]
1001bb54:	3101      	adds	r1, #1
1001bb56:	f000 829d 	beq.w	1001c094 <_svfprintf_r+0xa6c>
1001bb5a:	ea53 0102 	orrs.w	r1, r3, r2
1001bb5e:	f029 0480 	bic.w	r4, r9, #128	@ 0x80
1001bb62:	f040 8298 	bne.w	1001c096 <_svfprintf_r+0xa6e>
1001bb66:	9a08      	ldr	r2, [sp, #32]
1001bb68:	2a00      	cmp	r2, #0
1001bb6a:	f040 8299 	bne.w	1001c0a0 <_svfprintf_r+0xa78>
1001bb6e:	46a1      	mov	r9, r4
1001bb70:	4693      	mov	fp, r2
1001bb72:	ad5e      	add	r5, sp, #376	@ 0x178
1001bb74:	e152      	b.n	1001be1c <_svfprintf_r+0x7f4>
1001bb76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001bb78:	f853 2b04 	ldr.w	r2, [r3], #4
1001bb7c:	920b      	str	r2, [sp, #44]	@ 0x2c
1001bb7e:	2a00      	cmp	r2, #0
1001bb80:	f280 8425 	bge.w	1001c3ce <_svfprintf_r+0xda6>
1001bb84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001bb86:	930d      	str	r3, [sp, #52]	@ 0x34
1001bb88:	4252      	negs	r2, r2
1001bb8a:	920b      	str	r2, [sp, #44]	@ 0x2c
1001bb8c:	7823      	ldrb	r3, [r4, #0]
1001bb8e:	f049 0904 	orr.w	r9, r9, #4
1001bb92:	e5a0      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bb94:	232b      	movs	r3, #43	@ 0x2b
1001bb96:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001bb9a:	7823      	ldrb	r3, [r4, #0]
1001bb9c:	e59b      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bb9e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001bba2:	f049 0910 	orr.w	r9, r9, #16
1001bba6:	f019 0220 	ands.w	r2, r9, #32
1001bbaa:	f000 83b5 	beq.w	1001c318 <_svfprintf_r+0xcf0>
1001bbae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001bbb0:	3307      	adds	r3, #7
1001bbb2:	f023 0307 	bic.w	r3, r3, #7
1001bbb6:	4619      	mov	r1, r3
1001bbb8:	685a      	ldr	r2, [r3, #4]
1001bbba:	f851 3b08 	ldr.w	r3, [r1], #8
1001bbbe:	910d      	str	r1, [sp, #52]	@ 0x34
1001bbc0:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
1001bbc4:	2100      	movs	r1, #0
1001bbc6:	2000      	movs	r0, #0
1001bbc8:	9d08      	ldr	r5, [sp, #32]
1001bbca:	f88d 009f 	strb.w	r0, [sp, #159]	@ 0x9f
1001bbce:	1c6f      	adds	r7, r5, #1
1001bbd0:	f000 810d 	beq.w	1001bdee <_svfprintf_r+0x7c6>
1001bbd4:	ea53 0002 	orrs.w	r0, r3, r2
1001bbd8:	f024 0980 	bic.w	r9, r4, #128	@ 0x80
1001bbdc:	f040 8106 	bne.w	1001bdec <_svfprintf_r+0x7c4>
1001bbe0:	2d00      	cmp	r5, #0
1001bbe2:	f040 8628 	bne.w	1001c836 <_svfprintf_r+0x120e>
1001bbe6:	2900      	cmp	r1, #0
1001bbe8:	f040 83c9 	bne.w	1001c37e <_svfprintf_r+0xd56>
1001bbec:	f014 0b01 	ands.w	fp, r4, #1
1001bbf0:	f000 83f1 	beq.w	1001c3d6 <_svfprintf_r+0xdae>
1001bbf4:	2330      	movs	r3, #48	@ 0x30
1001bbf6:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
1001bbfa:	f20d 1577 	addw	r5, sp, #375	@ 0x177
1001bbfe:	e10d      	b.n	1001be1c <_svfprintf_r+0x7f4>
1001bc00:	7823      	ldrb	r3, [r4, #0]
1001bc02:	2b68      	cmp	r3, #104	@ 0x68
1001bc04:	bf03      	ittte	eq
1001bc06:	7863      	ldrbeq	r3, [r4, #1]
1001bc08:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
1001bc0c:	3401      	addeq	r4, #1
1001bc0e:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
1001bc12:	e560      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bc14:	f019 0f20 	tst.w	r9, #32
1001bc18:	940f      	str	r4, [sp, #60]	@ 0x3c
1001bc1a:	f000 83e6 	beq.w	1001c3ea <_svfprintf_r+0xdc2>
1001bc1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001bc20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001bc22:	681b      	ldr	r3, [r3, #0]
1001bc24:	601a      	str	r2, [r3, #0]
1001bc26:	17d2      	asrs	r2, r2, #31
1001bc28:	605a      	str	r2, [r3, #4]
1001bc2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001bc2c:	3304      	adds	r3, #4
1001bc2e:	930d      	str	r3, [sp, #52]	@ 0x34
1001bc30:	e695      	b.n	1001b95e <_svfprintf_r+0x336>
1001bc32:	7823      	ldrb	r3, [r4, #0]
1001bc34:	2b6c      	cmp	r3, #108	@ 0x6c
1001bc36:	bf03      	ittte	eq
1001bc38:	7863      	ldrbeq	r3, [r4, #1]
1001bc3a:	f049 0920 	orreq.w	r9, r9, #32
1001bc3e:	3401      	addeq	r4, #1
1001bc40:	f049 0910 	orrne.w	r9, r9, #16
1001bc44:	e547      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bc46:	bf00      	nop
1001bc48:	7fefffff 	.word	0x7fefffff
1001bc4c:	1002c140 	.word	0x1002c140
1001bc50:	1002c144 	.word	0x1002c144
1001bc54:	1002c3ac 	.word	0x1002c3ac
1001bc58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001bc5a:	940f      	str	r4, [sp, #60]	@ 0x3c
1001bc5c:	f852 3b04 	ldr.w	r3, [r2], #4
1001bc60:	920d      	str	r2, [sp, #52]	@ 0x34
1001bc62:	f647 0230 	movw	r2, #30768	@ 0x7830
1001bc66:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
1001bc6a:	2078      	movs	r0, #120	@ 0x78
1001bc6c:	4aa8      	ldr	r2, [pc, #672]	@ (1001bf10 <_svfprintf_r+0x8e8>)
1001bc6e:	9219      	str	r2, [sp, #100]	@ 0x64
1001bc70:	f049 0402 	orr.w	r4, r9, #2
1001bc74:	2200      	movs	r2, #0
1001bc76:	2102      	movs	r1, #2
1001bc78:	900e      	str	r0, [sp, #56]	@ 0x38
1001bc7a:	e7a4      	b.n	1001bbc6 <_svfprintf_r+0x59e>
1001bc7c:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001bc80:	f049 0410 	orr.w	r4, r9, #16
1001bc84:	f014 0220 	ands.w	r2, r4, #32
1001bc88:	f000 8355 	beq.w	1001c336 <_svfprintf_r+0xd0e>
1001bc8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001bc8e:	3307      	adds	r3, #7
1001bc90:	f023 0307 	bic.w	r3, r3, #7
1001bc94:	4619      	mov	r1, r3
1001bc96:	685a      	ldr	r2, [r3, #4]
1001bc98:	f851 3b08 	ldr.w	r3, [r1], #8
1001bc9c:	910d      	str	r1, [sp, #52]	@ 0x34
1001bc9e:	2101      	movs	r1, #1
1001bca0:	e791      	b.n	1001bbc6 <_svfprintf_r+0x59e>
1001bca2:	7823      	ldrb	r3, [r4, #0]
1001bca4:	f049 0908 	orr.w	r9, r9, #8
1001bca8:	e515      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bcaa:	7823      	ldrb	r3, [r4, #0]
1001bcac:	f049 0901 	orr.w	r9, r9, #1
1001bcb0:	e511      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bcb2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001bcb6:	7823      	ldrb	r3, [r4, #0]
1001bcb8:	2a00      	cmp	r2, #0
1001bcba:	f47f ad0c 	bne.w	1001b6d6 <_svfprintf_r+0xae>
1001bcbe:	2220      	movs	r2, #32
1001bcc0:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001bcc4:	e507      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bcc6:	7823      	ldrb	r3, [r4, #0]
1001bcc8:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
1001bccc:	e503      	b.n	1001b6d6 <_svfprintf_r+0xae>
1001bcce:	4621      	mov	r1, r4
1001bcd0:	f811 3b01 	ldrb.w	r3, [r1], #1
1001bcd4:	2b2a      	cmp	r3, #42	@ 0x2a
1001bcd6:	f001 822b 	beq.w	1001d130 <_svfprintf_r+0x1b08>
1001bcda:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001bcde:	2a09      	cmp	r2, #9
1001bce0:	460c      	mov	r4, r1
1001bce2:	bf98      	it	ls
1001bce4:	2100      	movls	r1, #0
1001bce6:	f201 8132 	bhi.w	1001cf4e <_svfprintf_r+0x1926>
1001bcea:	f814 3b01 	ldrb.w	r3, [r4], #1
1001bcee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1001bcf2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
1001bcf6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001bcfa:	2a09      	cmp	r2, #9
1001bcfc:	d9f5      	bls.n	1001bcea <_svfprintf_r+0x6c2>
1001bcfe:	9108      	str	r1, [sp, #32]
1001bd00:	e4ea      	b.n	1001b6d8 <_svfprintf_r+0xb0>
1001bd02:	f049 0910 	orr.w	r9, r9, #16
1001bd06:	f019 0f20 	tst.w	r9, #32
1001bd0a:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001bd0e:	f47f af13 	bne.w	1001bb38 <_svfprintf_r+0x510>
1001bd12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001bd14:	f019 0f10 	tst.w	r9, #16
1001bd18:	f852 3b04 	ldr.w	r3, [r2], #4
1001bd1c:	920d      	str	r2, [sp, #52]	@ 0x34
1001bd1e:	f040 8360 	bne.w	1001c3e2 <_svfprintf_r+0xdba>
1001bd22:	f019 0f40 	tst.w	r9, #64	@ 0x40
1001bd26:	f000 8358 	beq.w	1001c3da <_svfprintf_r+0xdb2>
1001bd2a:	f343 32c0 	sbfx	r2, r3, #15, #1
1001bd2e:	4611      	mov	r1, r2
1001bd30:	b21b      	sxth	r3, r3
1001bd32:	e70b      	b.n	1001bb4c <_svfprintf_r+0x524>
1001bd34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001bd36:	2b65      	cmp	r3, #101	@ 0x65
1001bd38:	f340 8166 	ble.w	1001c008 <_svfprintf_r+0x9e0>
1001bd3c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001bd40:	2200      	movs	r2, #0
1001bd42:	2300      	movs	r3, #0
1001bd44:	f006 fd84 	bl	10022850 <__aeabi_dcmpeq>
1001bd48:	2800      	cmp	r0, #0
1001bd4a:	f000 8211 	beq.w	1001c170 <_svfprintf_r+0xb48>
1001bd4e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bd50:	4a70      	ldr	r2, [pc, #448]	@ (1001bf14 <_svfprintf_r+0x8ec>)
1001bd52:	f8c8 2000 	str.w	r2, [r8]
1001bd56:	3301      	adds	r3, #1
1001bd58:	3401      	adds	r4, #1
1001bd5a:	2201      	movs	r2, #1
1001bd5c:	2b07      	cmp	r3, #7
1001bd5e:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bd60:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bd62:	f8c8 2004 	str.w	r2, [r8, #4]
1001bd66:	f300 856b 	bgt.w	1001c840 <_svfprintf_r+0x1218>
1001bd6a:	f108 0808 	add.w	r8, r8, #8
1001bd6e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001bd70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001bd72:	4293      	cmp	r3, r2
1001bd74:	f280 8326 	bge.w	1001c3c4 <_svfprintf_r+0xd9c>
1001bd78:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001bd7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001bd7c:	441c      	add	r4, r3
1001bd7e:	e9c8 2300 	strd	r2, r3, [r8]
1001bd82:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bd84:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bd86:	3301      	adds	r3, #1
1001bd88:	2b07      	cmp	r3, #7
1001bd8a:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bd8c:	f300 83e4 	bgt.w	1001c558 <_svfprintf_r+0xf30>
1001bd90:	f108 0808 	add.w	r8, r8, #8
1001bd94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001bd96:	1e5d      	subs	r5, r3, #1
1001bd98:	2d00      	cmp	r5, #0
1001bd9a:	f77f adc2 	ble.w	1001b922 <_svfprintf_r+0x2fa>
1001bd9e:	2d10      	cmp	r5, #16
1001bda0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bda2:	f340 85ae 	ble.w	1001c902 <_svfprintf_r+0x12da>
1001bda6:	4f5c      	ldr	r7, [pc, #368]	@ (1001bf18 <_svfprintf_r+0x8f0>)
1001bda8:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001bdac:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
1001bdb0:	9715      	str	r7, [sp, #84]	@ 0x54
1001bdb2:	2610      	movs	r6, #16
1001bdb4:	e005      	b.n	1001bdc2 <_svfprintf_r+0x79a>
1001bdb6:	f108 0808 	add.w	r8, r8, #8
1001bdba:	3d10      	subs	r5, #16
1001bdbc:	2d10      	cmp	r5, #16
1001bdbe:	f340 85a2 	ble.w	1001c906 <_svfprintf_r+0x12de>
1001bdc2:	3301      	adds	r3, #1
1001bdc4:	3410      	adds	r4, #16
1001bdc6:	2b07      	cmp	r3, #7
1001bdc8:	e9c8 7600 	strd	r7, r6, [r8]
1001bdcc:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bdd0:	ddf1      	ble.n	1001bdb6 <_svfprintf_r+0x78e>
1001bdd2:	aa32      	add	r2, sp, #200	@ 0xc8
1001bdd4:	4651      	mov	r1, sl
1001bdd6:	4658      	mov	r0, fp
1001bdd8:	f005 ff40 	bl	10021c5c <__ssprint_r>
1001bddc:	2800      	cmp	r0, #0
1001bdde:	f040 82c0 	bne.w	1001c362 <_svfprintf_r+0xd3a>
1001bde2:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001bde6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bdea:	e7e6      	b.n	1001bdba <_svfprintf_r+0x792>
1001bdec:	464c      	mov	r4, r9
1001bdee:	2901      	cmp	r1, #1
1001bdf0:	f000 8151 	beq.w	1001c096 <_svfprintf_r+0xa6e>
1001bdf4:	2902      	cmp	r1, #2
1001bdf6:	ad5e      	add	r5, sp, #376	@ 0x178
1001bdf8:	d11e      	bne.n	1001be38 <_svfprintf_r+0x810>
1001bdfa:	9819      	ldr	r0, [sp, #100]	@ 0x64
1001bdfc:	f003 010f 	and.w	r1, r3, #15
1001be00:	091b      	lsrs	r3, r3, #4
1001be02:	5c41      	ldrb	r1, [r0, r1]
1001be04:	f805 1d01 	strb.w	r1, [r5, #-1]!
1001be08:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
1001be0c:	0912      	lsrs	r2, r2, #4
1001be0e:	ea53 0102 	orrs.w	r1, r3, r2
1001be12:	d1f3      	bne.n	1001bdfc <_svfprintf_r+0x7d4>
1001be14:	ab5e      	add	r3, sp, #376	@ 0x178
1001be16:	46a1      	mov	r9, r4
1001be18:	eba3 0b05 	sub.w	fp, r3, r5
1001be1c:	9908      	ldr	r1, [sp, #32]
1001be1e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001be22:	4559      	cmp	r1, fp
1001be24:	f04f 0300 	mov.w	r3, #0
1001be28:	bfb8      	it	lt
1001be2a:	4659      	movlt	r1, fp
1001be2c:	930c      	str	r3, [sp, #48]	@ 0x30
1001be2e:	9106      	str	r1, [sp, #24]
1001be30:	9314      	str	r3, [sp, #80]	@ 0x50
1001be32:	9310      	str	r3, [sp, #64]	@ 0x40
1001be34:	9312      	str	r3, [sp, #72]	@ 0x48
1001be36:	e5d5      	b.n	1001b9e4 <_svfprintf_r+0x3bc>
1001be38:	f003 0107 	and.w	r1, r3, #7
1001be3c:	08db      	lsrs	r3, r3, #3
1001be3e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
1001be42:	08d2      	lsrs	r2, r2, #3
1001be44:	3130      	adds	r1, #48	@ 0x30
1001be46:	ea53 0602 	orrs.w	r6, r3, r2
1001be4a:	4628      	mov	r0, r5
1001be4c:	f805 1d01 	strb.w	r1, [r5, #-1]!
1001be50:	d1f2      	bne.n	1001be38 <_svfprintf_r+0x810>
1001be52:	07e6      	lsls	r6, r4, #31
1001be54:	d5de      	bpl.n	1001be14 <_svfprintf_r+0x7ec>
1001be56:	2930      	cmp	r1, #48	@ 0x30
1001be58:	d0dc      	beq.n	1001be14 <_svfprintf_r+0x7ec>
1001be5a:	2330      	movs	r3, #48	@ 0x30
1001be5c:	3802      	subs	r0, #2
1001be5e:	f805 3c01 	strb.w	r3, [r5, #-1]
1001be62:	ab5e      	add	r3, sp, #376	@ 0x178
1001be64:	46a1      	mov	r9, r4
1001be66:	eba3 0b00 	sub.w	fp, r3, r0
1001be6a:	4605      	mov	r5, r0
1001be6c:	e7d6      	b.n	1001be1c <_svfprintf_r+0x7f4>
1001be6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001be70:	9a06      	ldr	r2, [sp, #24]
1001be72:	1a9e      	subs	r6, r3, r2
1001be74:	2e00      	cmp	r6, #0
1001be76:	f77f ad3c 	ble.w	1001b8f2 <_svfprintf_r+0x2ca>
1001be7a:	2e10      	cmp	r6, #16
1001be7c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001be7e:	f341 80a1 	ble.w	1001cfc4 <_svfprintf_r+0x199c>
1001be82:	4825      	ldr	r0, [pc, #148]	@ (1001bf18 <_svfprintf_r+0x8f0>)
1001be84:	f8dd a01c 	ldr.w	sl, [sp, #28]
1001be88:	9015      	str	r0, [sp, #84]	@ 0x54
1001be8a:	4621      	mov	r1, r4
1001be8c:	2710      	movs	r7, #16
1001be8e:	461a      	mov	r2, r3
1001be90:	4604      	mov	r4, r0
1001be92:	e004      	b.n	1001be9e <_svfprintf_r+0x876>
1001be94:	3e10      	subs	r6, #16
1001be96:	2e10      	cmp	r6, #16
1001be98:	f108 0808 	add.w	r8, r8, #8
1001be9c:	dd16      	ble.n	1001becc <_svfprintf_r+0x8a4>
1001be9e:	3201      	adds	r2, #1
1001bea0:	3110      	adds	r1, #16
1001bea2:	2a07      	cmp	r2, #7
1001bea4:	e9c8 4700 	strd	r4, r7, [r8]
1001bea8:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
1001beac:	ddf2      	ble.n	1001be94 <_svfprintf_r+0x86c>
1001beae:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001beb0:	aa32      	add	r2, sp, #200	@ 0xc8
1001beb2:	4650      	mov	r0, sl
1001beb4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001beb8:	f005 fed0 	bl	10021c5c <__ssprint_r>
1001bebc:	2800      	cmp	r0, #0
1001bebe:	f040 84b2 	bne.w	1001c826 <_svfprintf_r+0x11fe>
1001bec2:	3e10      	subs	r6, #16
1001bec4:	2e10      	cmp	r6, #16
1001bec6:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
1001beca:	dce8      	bgt.n	1001be9e <_svfprintf_r+0x876>
1001becc:	460c      	mov	r4, r1
1001bece:	4613      	mov	r3, r2
1001bed0:	3301      	adds	r3, #1
1001bed2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001bed4:	f8c8 2000 	str.w	r2, [r8]
1001bed8:	4434      	add	r4, r6
1001beda:	2b07      	cmp	r3, #7
1001bedc:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bee0:	f8c8 6004 	str.w	r6, [r8, #4]
1001bee4:	f300 851d 	bgt.w	1001c922 <_svfprintf_r+0x12fa>
1001bee8:	9b08      	ldr	r3, [sp, #32]
1001beea:	eba3 060b 	sub.w	r6, r3, fp
1001beee:	2e00      	cmp	r6, #0
1001bef0:	f108 0808 	add.w	r8, r8, #8
1001bef4:	f77f ad03 	ble.w	1001b8fe <_svfprintf_r+0x2d6>
1001bef8:	4a07      	ldr	r2, [pc, #28]	@ (1001bf18 <_svfprintf_r+0x8f0>)
1001befa:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001befc:	9215      	str	r2, [sp, #84]	@ 0x54
1001befe:	2e10      	cmp	r6, #16
1001bf00:	dd2a      	ble.n	1001bf58 <_svfprintf_r+0x930>
1001bf02:	4622      	mov	r2, r4
1001bf04:	9f07      	ldr	r7, [sp, #28]
1001bf06:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1001bf08:	f04f 0a10 	mov.w	sl, #16
1001bf0c:	e00b      	b.n	1001bf26 <_svfprintf_r+0x8fe>
1001bf0e:	bf00      	nop
1001bf10:	1002c150 	.word	0x1002c150
1001bf14:	1002c180 	.word	0x1002c180
1001bf18:	1002c39c 	.word	0x1002c39c
1001bf1c:	3e10      	subs	r6, #16
1001bf1e:	2e10      	cmp	r6, #16
1001bf20:	f108 0808 	add.w	r8, r8, #8
1001bf24:	dd17      	ble.n	1001bf56 <_svfprintf_r+0x92e>
1001bf26:	3301      	adds	r3, #1
1001bf28:	498e      	ldr	r1, [pc, #568]	@ (1001c164 <_svfprintf_r+0xb3c>)
1001bf2a:	3210      	adds	r2, #16
1001bf2c:	2b07      	cmp	r3, #7
1001bf2e:	e9c8 1a00 	strd	r1, sl, [r8]
1001bf32:	e9cd 3233 	strd	r3, r2, [sp, #204]	@ 0xcc
1001bf36:	ddf1      	ble.n	1001bf1c <_svfprintf_r+0x8f4>
1001bf38:	aa32      	add	r2, sp, #200	@ 0xc8
1001bf3a:	4621      	mov	r1, r4
1001bf3c:	4638      	mov	r0, r7
1001bf3e:	f005 fe8d 	bl	10021c5c <__ssprint_r>
1001bf42:	2800      	cmp	r0, #0
1001bf44:	f040 820c 	bne.w	1001c360 <_svfprintf_r+0xd38>
1001bf48:	3e10      	subs	r6, #16
1001bf4a:	2e10      	cmp	r6, #16
1001bf4c:	e9dd 3233 	ldrd	r3, r2, [sp, #204]	@ 0xcc
1001bf50:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bf54:	dce7      	bgt.n	1001bf26 <_svfprintf_r+0x8fe>
1001bf56:	4614      	mov	r4, r2
1001bf58:	3301      	adds	r3, #1
1001bf5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001bf5c:	f8c8 2000 	str.w	r2, [r8]
1001bf60:	4434      	add	r4, r6
1001bf62:	2b07      	cmp	r3, #7
1001bf64:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bf68:	f8c8 6004 	str.w	r6, [r8, #4]
1001bf6c:	f300 81c7 	bgt.w	1001c2fe <_svfprintf_r+0xcd6>
1001bf70:	f108 0808 	add.w	r8, r8, #8
1001bf74:	e4c3      	b.n	1001b8fe <_svfprintf_r+0x2d6>
1001bf76:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bf78:	9807      	ldr	r0, [sp, #28]
1001bf7a:	aa32      	add	r2, sp, #200	@ 0xc8
1001bf7c:	f005 fe6e 	bl	10021c5c <__ssprint_r>
1001bf80:	2800      	cmp	r0, #0
1001bf82:	f43f ace2 	beq.w	1001b94a <_svfprintf_r+0x322>
1001bf86:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001bf8a:	e1ea      	b.n	1001c362 <_svfprintf_r+0xd3a>
1001bf8c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bf8e:	4976      	ldr	r1, [pc, #472]	@ (1001c168 <_svfprintf_r+0xb40>)
1001bf90:	f8c8 1000 	str.w	r1, [r8]
1001bf94:	3301      	adds	r3, #1
1001bf96:	3401      	adds	r4, #1
1001bf98:	2101      	movs	r1, #1
1001bf9a:	2b07      	cmp	r3, #7
1001bf9c:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bf9e:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bfa0:	f8c8 1004 	str.w	r1, [r8, #4]
1001bfa4:	f300 8574 	bgt.w	1001ca90 <_svfprintf_r+0x1468>
1001bfa8:	f108 0808 	add.w	r8, r8, #8
1001bfac:	2a00      	cmp	r2, #0
1001bfae:	f040 84e6 	bne.w	1001c97e <_svfprintf_r+0x1356>
1001bfb2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001bfb4:	f009 0301 	and.w	r3, r9, #1
1001bfb8:	4313      	orrs	r3, r2
1001bfba:	f43f acb2 	beq.w	1001b922 <_svfprintf_r+0x2fa>
1001bfbe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001bfc0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001bfc2:	441c      	add	r4, r3
1001bfc4:	e9c8 2300 	strd	r2, r3, [r8]
1001bfc8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bfca:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bfcc:	3301      	adds	r3, #1
1001bfce:	2b07      	cmp	r3, #7
1001bfd0:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bfd2:	f300 8645 	bgt.w	1001cc60 <_svfprintf_r+0x1638>
1001bfd6:	f108 0808 	add.w	r8, r8, #8
1001bfda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001bfdc:	f8c8 5000 	str.w	r5, [r8]
1001bfe0:	3301      	adds	r3, #1
1001bfe2:	4414      	add	r4, r2
1001bfe4:	2b07      	cmp	r3, #7
1001bfe6:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bfea:	f8c8 2004 	str.w	r2, [r8, #4]
1001bfee:	f77f ac96 	ble.w	1001b91e <_svfprintf_r+0x2f6>
1001bff2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bff4:	9807      	ldr	r0, [sp, #28]
1001bff6:	aa32      	add	r2, sp, #200	@ 0xc8
1001bff8:	f005 fe30 	bl	10021c5c <__ssprint_r>
1001bffc:	2800      	cmp	r0, #0
1001bffe:	d1c2      	bne.n	1001bf86 <_svfprintf_r+0x95e>
1001c000:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c002:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c006:	e48c      	b.n	1001b922 <_svfprintf_r+0x2fa>
1001c008:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001c00a:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
1001c00c:	2b01      	cmp	r3, #1
1001c00e:	f104 0401 	add.w	r4, r4, #1
1001c012:	f106 0601 	add.w	r6, r6, #1
1001c016:	f108 0708 	add.w	r7, r8, #8
1001c01a:	f340 8129 	ble.w	1001c270 <_svfprintf_r+0xc48>
1001c01e:	2301      	movs	r3, #1
1001c020:	2e07      	cmp	r6, #7
1001c022:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c026:	f8c8 5000 	str.w	r5, [r8]
1001c02a:	f8c8 3004 	str.w	r3, [r8, #4]
1001c02e:	f300 81b1 	bgt.w	1001c394 <_svfprintf_r+0xd6c>
1001c032:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001c034:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001c036:	3601      	adds	r6, #1
1001c038:	441c      	add	r4, r3
1001c03a:	2e07      	cmp	r6, #7
1001c03c:	e9c7 2300 	strd	r2, r3, [r7]
1001c040:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c044:	f300 81b2 	bgt.w	1001c3ac <_svfprintf_r+0xd84>
1001c048:	3708      	adds	r7, #8
1001c04a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001c04c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001c050:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
1001c054:	2200      	movs	r2, #0
1001c056:	2300      	movs	r3, #0
1001c058:	f006 fbfa 	bl	10022850 <__aeabi_dcmpeq>
1001c05c:	2800      	cmp	r0, #0
1001c05e:	f040 8121 	bne.w	1001c2a4 <_svfprintf_r+0xc7c>
1001c062:	3601      	adds	r6, #1
1001c064:	3501      	adds	r5, #1
1001c066:	4444      	add	r4, r8
1001c068:	2e07      	cmp	r6, #7
1001c06a:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c06e:	603d      	str	r5, [r7, #0]
1001c070:	f8c7 8004 	str.w	r8, [r7, #4]
1001c074:	f300 810a 	bgt.w	1001c28c <_svfprintf_r+0xc64>
1001c078:	3708      	adds	r7, #8
1001c07a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
1001c07c:	607b      	str	r3, [r7, #4]
1001c07e:	3601      	adds	r6, #1
1001c080:	441c      	add	r4, r3
1001c082:	2e07      	cmp	r6, #7
1001c084:	ab2c      	add	r3, sp, #176	@ 0xb0
1001c086:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c08a:	603b      	str	r3, [r7, #0]
1001c08c:	dcb1      	bgt.n	1001bff2 <_svfprintf_r+0x9ca>
1001c08e:	f107 0808 	add.w	r8, r7, #8
1001c092:	e446      	b.n	1001b922 <_svfprintf_r+0x2fa>
1001c094:	464c      	mov	r4, r9
1001c096:	2b0a      	cmp	r3, #10
1001c098:	f172 0100 	sbcs.w	r1, r2, #0
1001c09c:	f080 8353 	bcs.w	1001c746 <_svfprintf_r+0x111e>
1001c0a0:	3330      	adds	r3, #48	@ 0x30
1001c0a2:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
1001c0a6:	46a1      	mov	r9, r4
1001c0a8:	f04f 0b01 	mov.w	fp, #1
1001c0ac:	f20d 1577 	addw	r5, sp, #375	@ 0x177
1001c0b0:	e6b4      	b.n	1001be1c <_svfprintf_r+0x7f4>
1001c0b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c0b4:	9807      	ldr	r0, [sp, #28]
1001c0b6:	aa32      	add	r2, sp, #200	@ 0xc8
1001c0b8:	f005 fdd0 	bl	10021c5c <__ssprint_r>
1001c0bc:	2800      	cmp	r0, #0
1001c0be:	f47f af62 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c0c2:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c0c4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c0c8:	e410      	b.n	1001b8ec <_svfprintf_r+0x2c4>
1001c0ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c0cc:	9807      	ldr	r0, [sp, #28]
1001c0ce:	9315      	str	r3, [sp, #84]	@ 0x54
1001c0d0:	aa32      	add	r2, sp, #200	@ 0xc8
1001c0d2:	f005 fdc3 	bl	10021c5c <__ssprint_r>
1001c0d6:	2800      	cmp	r0, #0
1001c0d8:	f47f af55 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c0dc:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c0de:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001c0e0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c0e4:	f7ff bbf0 	b.w	1001b8c8 <_svfprintf_r+0x2a0>
1001c0e8:	2d10      	cmp	r5, #16
1001c0ea:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c0ec:	f340 8733 	ble.w	1001cf56 <_svfprintf_r+0x192e>
1001c0f0:	4f1e      	ldr	r7, [pc, #120]	@ (1001c16c <_svfprintf_r+0xb44>)
1001c0f2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1001c0f6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
1001c0fa:	9715      	str	r7, [sp, #84]	@ 0x54
1001c0fc:	2610      	movs	r6, #16
1001c0fe:	e004      	b.n	1001c10a <_svfprintf_r+0xae2>
1001c100:	3d10      	subs	r5, #16
1001c102:	2d10      	cmp	r5, #16
1001c104:	f108 0808 	add.w	r8, r8, #8
1001c108:	dd16      	ble.n	1001c138 <_svfprintf_r+0xb10>
1001c10a:	3301      	adds	r3, #1
1001c10c:	3410      	adds	r4, #16
1001c10e:	2b07      	cmp	r3, #7
1001c110:	e9c8 7600 	strd	r7, r6, [r8]
1001c114:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c118:	ddf2      	ble.n	1001c100 <_svfprintf_r+0xad8>
1001c11a:	aa32      	add	r2, sp, #200	@ 0xc8
1001c11c:	4651      	mov	r1, sl
1001c11e:	4648      	mov	r0, r9
1001c120:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c124:	f005 fd9a 	bl	10021c5c <__ssprint_r>
1001c128:	2800      	cmp	r0, #0
1001c12a:	f040 83e8 	bne.w	1001c8fe <_svfprintf_r+0x12d6>
1001c12e:	3d10      	subs	r5, #16
1001c130:	2d10      	cmp	r5, #16
1001c132:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001c136:	dce8      	bgt.n	1001c10a <_svfprintf_r+0xae2>
1001c138:	3301      	adds	r3, #1
1001c13a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001c13c:	442c      	add	r4, r5
1001c13e:	2b07      	cmp	r3, #7
1001c140:	e9c8 2500 	strd	r2, r5, [r8]
1001c144:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c148:	f77f abf4 	ble.w	1001b934 <_svfprintf_r+0x30c>
1001c14c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c14e:	9807      	ldr	r0, [sp, #28]
1001c150:	aa32      	add	r2, sp, #200	@ 0xc8
1001c152:	f005 fd83 	bl	10021c5c <__ssprint_r>
1001c156:	2800      	cmp	r0, #0
1001c158:	f47f af15 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c15c:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c15e:	f7ff bbe9 	b.w	1001b934 <_svfprintf_r+0x30c>
1001c162:	bf00      	nop
1001c164:	1002c39c 	.word	0x1002c39c
1001c168:	1002c180 	.word	0x1002c180
1001c16c:	1002c3ac 	.word	0x1002c3ac
1001c170:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001c172:	2a00      	cmp	r2, #0
1001c174:	f77f af0a 	ble.w	1001bf8c <_svfprintf_r+0x964>
1001c178:	e9dd 7312 	ldrd	r7, r3, [sp, #72]	@ 0x48
1001c17c:	429f      	cmp	r7, r3
1001c17e:	bfa8      	it	ge
1001c180:	461f      	movge	r7, r3
1001c182:	2f00      	cmp	r7, #0
1001c184:	eb05 0b03 	add.w	fp, r5, r3
1001c188:	dd0b      	ble.n	1001c1a2 <_svfprintf_r+0xb7a>
1001c18a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c18c:	3301      	adds	r3, #1
1001c18e:	443c      	add	r4, r7
1001c190:	2b07      	cmp	r3, #7
1001c192:	e9c8 5700 	strd	r5, r7, [r8]
1001c196:	9434      	str	r4, [sp, #208]	@ 0xd0
1001c198:	9333      	str	r3, [sp, #204]	@ 0xcc
1001c19a:	f300 8642 	bgt.w	1001ce22 <_svfprintf_r+0x17fa>
1001c19e:	f108 0808 	add.w	r8, r8, #8
1001c1a2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1001c1a4:	2f00      	cmp	r7, #0
1001c1a6:	bfa8      	it	ge
1001c1a8:	1bf6      	subge	r6, r6, r7
1001c1aa:	2e00      	cmp	r6, #0
1001c1ac:	f300 8200 	bgt.w	1001c5b0 <_svfprintf_r+0xf88>
1001c1b0:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
1001c1b4:	f419 6f80 	tst.w	r9, #1024	@ 0x400
1001c1b8:	44aa      	add	sl, r5
1001c1ba:	f040 8221 	bne.w	1001c600 <_svfprintf_r+0xfd8>
1001c1be:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001c1c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001c1c2:	429d      	cmp	r5, r3
1001c1c4:	db03      	blt.n	1001c1ce <_svfprintf_r+0xba6>
1001c1c6:	f019 0f01 	tst.w	r9, #1
1001c1ca:	f000 846f 	beq.w	1001caac <_svfprintf_r+0x1484>
1001c1ce:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001c1d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001c1d2:	441c      	add	r4, r3
1001c1d4:	e9c8 2300 	strd	r2, r3, [r8]
1001c1d8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c1da:	9434      	str	r4, [sp, #208]	@ 0xd0
1001c1dc:	3301      	adds	r3, #1
1001c1de:	2b07      	cmp	r3, #7
1001c1e0:	9333      	str	r3, [sp, #204]	@ 0xcc
1001c1e2:	f300 8675 	bgt.w	1001ced0 <_svfprintf_r+0x18a8>
1001c1e6:	f108 0808 	add.w	r8, r8, #8
1001c1ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001c1ec:	ebab 060a 	sub.w	r6, fp, sl
1001c1f0:	1b5d      	subs	r5, r3, r5
1001c1f2:	42ae      	cmp	r6, r5
1001c1f4:	bfa8      	it	ge
1001c1f6:	462e      	movge	r6, r5
1001c1f8:	2e00      	cmp	r6, #0
1001c1fa:	dd0d      	ble.n	1001c218 <_svfprintf_r+0xbf0>
1001c1fc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c1fe:	f8c8 a000 	str.w	sl, [r8]
1001c202:	3301      	adds	r3, #1
1001c204:	4434      	add	r4, r6
1001c206:	2b07      	cmp	r3, #7
1001c208:	f8c8 6004 	str.w	r6, [r8, #4]
1001c20c:	9434      	str	r4, [sp, #208]	@ 0xd0
1001c20e:	9333      	str	r3, [sp, #204]	@ 0xcc
1001c210:	f300 8670 	bgt.w	1001cef4 <_svfprintf_r+0x18cc>
1001c214:	f108 0808 	add.w	r8, r8, #8
1001c218:	2e00      	cmp	r6, #0
1001c21a:	bfa8      	it	ge
1001c21c:	1bad      	subge	r5, r5, r6
1001c21e:	2d00      	cmp	r5, #0
1001c220:	f77f ab7f 	ble.w	1001b922 <_svfprintf_r+0x2fa>
1001c224:	2d10      	cmp	r5, #16
1001c226:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c228:	f340 836b 	ble.w	1001c902 <_svfprintf_r+0x12da>
1001c22c:	4fad      	ldr	r7, [pc, #692]	@ (1001c4e4 <_svfprintf_r+0xebc>)
1001c22e:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001c232:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
1001c236:	9715      	str	r7, [sp, #84]	@ 0x54
1001c238:	2610      	movs	r6, #16
1001c23a:	e005      	b.n	1001c248 <_svfprintf_r+0xc20>
1001c23c:	f108 0808 	add.w	r8, r8, #8
1001c240:	3d10      	subs	r5, #16
1001c242:	2d10      	cmp	r5, #16
1001c244:	f340 835f 	ble.w	1001c906 <_svfprintf_r+0x12de>
1001c248:	3301      	adds	r3, #1
1001c24a:	3410      	adds	r4, #16
1001c24c:	2b07      	cmp	r3, #7
1001c24e:	e9c8 7600 	strd	r7, r6, [r8]
1001c252:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c256:	ddf1      	ble.n	1001c23c <_svfprintf_r+0xc14>
1001c258:	aa32      	add	r2, sp, #200	@ 0xc8
1001c25a:	4651      	mov	r1, sl
1001c25c:	4658      	mov	r0, fp
1001c25e:	f005 fcfd 	bl	10021c5c <__ssprint_r>
1001c262:	2800      	cmp	r0, #0
1001c264:	d17d      	bne.n	1001c362 <_svfprintf_r+0xd3a>
1001c266:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001c26a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c26e:	e7e7      	b.n	1001c240 <_svfprintf_r+0xc18>
1001c270:	f019 0f01 	tst.w	r9, #1
1001c274:	f47f aed3 	bne.w	1001c01e <_svfprintf_r+0x9f6>
1001c278:	2301      	movs	r3, #1
1001c27a:	2e07      	cmp	r6, #7
1001c27c:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c280:	f8c8 5000 	str.w	r5, [r8]
1001c284:	f8c8 3004 	str.w	r3, [r8, #4]
1001c288:	f77f aef7 	ble.w	1001c07a <_svfprintf_r+0xa52>
1001c28c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c28e:	9807      	ldr	r0, [sp, #28]
1001c290:	aa32      	add	r2, sp, #200	@ 0xc8
1001c292:	f005 fce3 	bl	10021c5c <__ssprint_r>
1001c296:	2800      	cmp	r0, #0
1001c298:	f47f ae75 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c29c:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001c2a0:	af35      	add	r7, sp, #212	@ 0xd4
1001c2a2:	e6ea      	b.n	1001c07a <_svfprintf_r+0xa52>
1001c2a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001c2a6:	2b01      	cmp	r3, #1
1001c2a8:	f77f aee7 	ble.w	1001c07a <_svfprintf_r+0xa52>
1001c2ac:	2b11      	cmp	r3, #17
1001c2ae:	4b8d      	ldr	r3, [pc, #564]	@ (1001c4e4 <_svfprintf_r+0xebc>)
1001c2b0:	9315      	str	r3, [sp, #84]	@ 0x54
1001c2b2:	f340 8358 	ble.w	1001c966 <_svfprintf_r+0x133e>
1001c2b6:	f8cd 9020 	str.w	r9, [sp, #32]
1001c2ba:	f8dd a01c 	ldr.w	sl, [sp, #28]
1001c2be:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
1001c2c2:	2510      	movs	r5, #16
1001c2c4:	4699      	mov	r9, r3
1001c2c6:	e006      	b.n	1001c2d6 <_svfprintf_r+0xcae>
1001c2c8:	3708      	adds	r7, #8
1001c2ca:	f1a8 0810 	sub.w	r8, r8, #16
1001c2ce:	f1b8 0f10 	cmp.w	r8, #16
1001c2d2:	f340 8346 	ble.w	1001c962 <_svfprintf_r+0x133a>
1001c2d6:	3601      	adds	r6, #1
1001c2d8:	3410      	adds	r4, #16
1001c2da:	2e07      	cmp	r6, #7
1001c2dc:	e9c7 9500 	strd	r9, r5, [r7]
1001c2e0:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c2e4:	ddf0      	ble.n	1001c2c8 <_svfprintf_r+0xca0>
1001c2e6:	aa32      	add	r2, sp, #200	@ 0xc8
1001c2e8:	4659      	mov	r1, fp
1001c2ea:	4650      	mov	r0, sl
1001c2ec:	f005 fcb6 	bl	10021c5c <__ssprint_r>
1001c2f0:	2800      	cmp	r0, #0
1001c2f2:	f040 8298 	bne.w	1001c826 <_svfprintf_r+0x11fe>
1001c2f6:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001c2fa:	af35      	add	r7, sp, #212	@ 0xd4
1001c2fc:	e7e5      	b.n	1001c2ca <_svfprintf_r+0xca2>
1001c2fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c300:	9807      	ldr	r0, [sp, #28]
1001c302:	aa32      	add	r2, sp, #200	@ 0xc8
1001c304:	f005 fcaa 	bl	10021c5c <__ssprint_r>
1001c308:	2800      	cmp	r0, #0
1001c30a:	f47f ae3c 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c30e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c310:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c314:	f7ff baf3 	b.w	1001b8fe <_svfprintf_r+0x2d6>
1001c318:	990d      	ldr	r1, [sp, #52]	@ 0x34
1001c31a:	f851 3b04 	ldr.w	r3, [r1], #4
1001c31e:	910d      	str	r1, [sp, #52]	@ 0x34
1001c320:	f019 0110 	ands.w	r1, r9, #16
1001c324:	f47f ac4c 	bne.w	1001bbc0 <_svfprintf_r+0x598>
1001c328:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
1001c32c:	f000 8363 	beq.w	1001c9f6 <_svfprintf_r+0x13ce>
1001c330:	b29b      	uxth	r3, r3
1001c332:	460a      	mov	r2, r1
1001c334:	e444      	b.n	1001bbc0 <_svfprintf_r+0x598>
1001c336:	990d      	ldr	r1, [sp, #52]	@ 0x34
1001c338:	f851 3b04 	ldr.w	r3, [r1], #4
1001c33c:	910d      	str	r1, [sp, #52]	@ 0x34
1001c33e:	f014 0110 	ands.w	r1, r4, #16
1001c342:	d10b      	bne.n	1001c35c <_svfprintf_r+0xd34>
1001c344:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
1001c348:	d003      	beq.n	1001c352 <_svfprintf_r+0xd2a>
1001c34a:	460a      	mov	r2, r1
1001c34c:	b29b      	uxth	r3, r3
1001c34e:	2101      	movs	r1, #1
1001c350:	e439      	b.n	1001bbc6 <_svfprintf_r+0x59e>
1001c352:	f414 7200 	ands.w	r2, r4, #512	@ 0x200
1001c356:	bf1c      	itt	ne
1001c358:	b2db      	uxtbne	r3, r3
1001c35a:	4602      	movne	r2, r0
1001c35c:	2101      	movs	r1, #1
1001c35e:	e432      	b.n	1001bbc6 <_svfprintf_r+0x59e>
1001c360:	46bb      	mov	fp, r7
1001c362:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001c364:	2b00      	cmp	r3, #0
1001c366:	f43f aa64 	beq.w	1001b832 <_svfprintf_r+0x20a>
1001c36a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1001c36c:	4658      	mov	r0, fp
1001c36e:	f7ff f847 	bl	1001b400 <_free_r>
1001c372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001c374:	899b      	ldrh	r3, [r3, #12]
1001c376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1001c37a:	f7ff ba5e 	b.w	1001b83a <_svfprintf_r+0x212>
1001c37e:	f8dd b020 	ldr.w	fp, [sp, #32]
1001c382:	ad5e      	add	r5, sp, #376	@ 0x178
1001c384:	e54a      	b.n	1001be1c <_svfprintf_r+0x7f4>
1001c386:	425b      	negs	r3, r3
1001c388:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
1001c38c:	464c      	mov	r4, r9
1001c38e:	202d      	movs	r0, #45	@ 0x2d
1001c390:	2101      	movs	r1, #1
1001c392:	e419      	b.n	1001bbc8 <_svfprintf_r+0x5a0>
1001c394:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c396:	9807      	ldr	r0, [sp, #28]
1001c398:	aa32      	add	r2, sp, #200	@ 0xc8
1001c39a:	f005 fc5f 	bl	10021c5c <__ssprint_r>
1001c39e:	2800      	cmp	r0, #0
1001c3a0:	f47f adf1 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c3a4:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001c3a8:	af35      	add	r7, sp, #212	@ 0xd4
1001c3aa:	e642      	b.n	1001c032 <_svfprintf_r+0xa0a>
1001c3ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c3ae:	9807      	ldr	r0, [sp, #28]
1001c3b0:	aa32      	add	r2, sp, #200	@ 0xc8
1001c3b2:	f005 fc53 	bl	10021c5c <__ssprint_r>
1001c3b6:	2800      	cmp	r0, #0
1001c3b8:	f47f ade5 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c3bc:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001c3c0:	af35      	add	r7, sp, #212	@ 0xd4
1001c3c2:	e642      	b.n	1001c04a <_svfprintf_r+0xa22>
1001c3c4:	f019 0f01 	tst.w	r9, #1
1001c3c8:	f43f aaab 	beq.w	1001b922 <_svfprintf_r+0x2fa>
1001c3cc:	e4d4      	b.n	1001bd78 <_svfprintf_r+0x750>
1001c3ce:	930d      	str	r3, [sp, #52]	@ 0x34
1001c3d0:	7823      	ldrb	r3, [r4, #0]
1001c3d2:	f7ff b980 	b.w	1001b6d6 <_svfprintf_r+0xae>
1001c3d6:	ad5e      	add	r5, sp, #376	@ 0x178
1001c3d8:	e520      	b.n	1001be1c <_svfprintf_r+0x7f4>
1001c3da:	f419 7f00 	tst.w	r9, #512	@ 0x200
1001c3de:	f040 8374 	bne.w	1001caca <_svfprintf_r+0x14a2>
1001c3e2:	17da      	asrs	r2, r3, #31
1001c3e4:	4611      	mov	r1, r2
1001c3e6:	f7ff bbb1 	b.w	1001bb4c <_svfprintf_r+0x524>
1001c3ea:	f019 0f10 	tst.w	r9, #16
1001c3ee:	f040 82b2 	bne.w	1001c956 <_svfprintf_r+0x132e>
1001c3f2:	f019 0f40 	tst.w	r9, #64	@ 0x40
1001c3f6:	f040 8362 	bne.w	1001cabe <_svfprintf_r+0x1496>
1001c3fa:	f419 7f00 	tst.w	r9, #512	@ 0x200
1001c3fe:	f000 82aa 	beq.w	1001c956 <_svfprintf_r+0x132e>
1001c402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c404:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001c406:	681b      	ldr	r3, [r3, #0]
1001c408:	701a      	strb	r2, [r3, #0]
1001c40a:	e40e      	b.n	1001bc2a <_svfprintf_r+0x602>
1001c40c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
1001c40e:	7823      	ldrb	r3, [r4, #0]
1001c410:	2a00      	cmp	r2, #0
1001c412:	f43f a960 	beq.w	1001b6d6 <_svfprintf_r+0xae>
1001c416:	7812      	ldrb	r2, [r2, #0]
1001c418:	2a00      	cmp	r2, #0
1001c41a:	f43f a95c 	beq.w	1001b6d6 <_svfprintf_r+0xae>
1001c41e:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
1001c422:	f7ff b958 	b.w	1001b6d6 <_svfprintf_r+0xae>
1001c426:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001c42a:	4602      	mov	r2, r0
1001c42c:	460b      	mov	r3, r1
1001c42e:	f006 fa41 	bl	100228b4 <__aeabi_dcmpun>
1001c432:	2800      	cmp	r0, #0
1001c434:	f040 860f 	bne.w	1001d056 <_svfprintf_r+0x1a2e>
1001c438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c43a:	2b61      	cmp	r3, #97	@ 0x61
1001c43c:	f000 8506 	beq.w	1001ce4c <_svfprintf_r+0x1824>
1001c440:	2b41      	cmp	r3, #65	@ 0x41
1001c442:	f000 8582 	beq.w	1001cf4a <_svfprintf_r+0x1922>
1001c446:	9b08      	ldr	r3, [sp, #32]
1001c448:	3301      	adds	r3, #1
1001c44a:	f000 8417 	beq.w	1001cc7c <_svfprintf_r+0x1654>
1001c44e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c450:	f023 0320 	bic.w	r3, r3, #32
1001c454:	2b47      	cmp	r3, #71	@ 0x47
1001c456:	d104      	bne.n	1001c462 <_svfprintf_r+0xe3a>
1001c458:	9b08      	ldr	r3, [sp, #32]
1001c45a:	2b00      	cmp	r3, #0
1001c45c:	bf08      	it	eq
1001c45e:	2301      	moveq	r3, #1
1001c460:	9308      	str	r3, [sp, #32]
1001c462:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	@ 0x58
1001c466:	f449 7080 	orr.w	r0, r9, #256	@ 0x100
1001c46a:	2a00      	cmp	r2, #0
1001c46c:	9015      	str	r0, [sp, #84]	@ 0x54
1001c46e:	f8cd 9018 	str.w	r9, [sp, #24]
1001c472:	f04f 0300 	mov.w	r3, #0
1001c476:	f2c0 8521 	blt.w	1001cebc <_svfprintf_r+0x1894>
1001c47a:	e9cd 1224 	strd	r1, r2, [sp, #144]	@ 0x90
1001c47e:	931f      	str	r3, [sp, #124]	@ 0x7c
1001c480:	930c      	str	r3, [sp, #48]	@ 0x30
1001c482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c484:	3b41      	subs	r3, #65	@ 0x41
1001c486:	2b25      	cmp	r3, #37	@ 0x25
1001c488:	f200 8328 	bhi.w	1001cadc <_svfprintf_r+0x14b4>
1001c48c:	e8df f013 	tbh	[pc, r3, lsl #1]
1001c490:	03260401 	.word	0x03260401
1001c494:	03260326 	.word	0x03260326
1001c498:	03fe03fa 	.word	0x03fe03fa
1001c49c:	03260326 	.word	0x03260326
1001c4a0:	03260326 	.word	0x03260326
1001c4a4:	03260326 	.word	0x03260326
1001c4a8:	03260326 	.word	0x03260326
1001c4ac:	03260326 	.word	0x03260326
1001c4b0:	03260326 	.word	0x03260326
1001c4b4:	03260326 	.word	0x03260326
1001c4b8:	03260326 	.word	0x03260326
1001c4bc:	03260326 	.word	0x03260326
1001c4c0:	03260326 	.word	0x03260326
1001c4c4:	03260326 	.word	0x03260326
1001c4c8:	03260326 	.word	0x03260326
1001c4cc:	03260326 	.word	0x03260326
1001c4d0:	03260326 	.word	0x03260326
1001c4d4:	03260326 	.word	0x03260326
1001c4d8:	03fe03fa 	.word	0x03fe03fa
1001c4dc:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c4e0:	f7ff bb61 	b.w	1001bba6 <_svfprintf_r+0x57e>
1001c4e4:	1002c39c 	.word	0x1002c39c
1001c4e8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c4ec:	464c      	mov	r4, r9
1001c4ee:	f7ff bbc9 	b.w	1001bc84 <_svfprintf_r+0x65c>
1001c4f2:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c4f6:	4bbd      	ldr	r3, [pc, #756]	@ (1001c7ec <_svfprintf_r+0x11c4>)
1001c4f8:	9319      	str	r3, [sp, #100]	@ 0x64
1001c4fa:	f019 0220 	ands.w	r2, r9, #32
1001c4fe:	f000 8108 	beq.w	1001c712 <_svfprintf_r+0x10ea>
1001c502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c504:	3307      	adds	r3, #7
1001c506:	f023 0307 	bic.w	r3, r3, #7
1001c50a:	4619      	mov	r1, r3
1001c50c:	685a      	ldr	r2, [r3, #4]
1001c50e:	f851 3b08 	ldr.w	r3, [r1], #8
1001c512:	910d      	str	r1, [sp, #52]	@ 0x34
1001c514:	f019 0f01 	tst.w	r9, #1
1001c518:	d00a      	beq.n	1001c530 <_svfprintf_r+0xf08>
1001c51a:	ea53 0102 	orrs.w	r1, r3, r2
1001c51e:	d007      	beq.n	1001c530 <_svfprintf_r+0xf08>
1001c520:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001c522:	f88d 10a1 	strb.w	r1, [sp, #161]	@ 0xa1
1001c526:	2130      	movs	r1, #48	@ 0x30
1001c528:	f049 0902 	orr.w	r9, r9, #2
1001c52c:	f88d 10a0 	strb.w	r1, [sp, #160]	@ 0xa0
1001c530:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
1001c534:	2102      	movs	r1, #2
1001c536:	f7ff bb46 	b.w	1001bbc6 <_svfprintf_r+0x59e>
1001c53a:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c53e:	4bac      	ldr	r3, [pc, #688]	@ (1001c7f0 <_svfprintf_r+0x11c8>)
1001c540:	9319      	str	r3, [sp, #100]	@ 0x64
1001c542:	e7da      	b.n	1001c4fa <_svfprintf_r+0xed2>
1001c544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c546:	681b      	ldr	r3, [r3, #0]
1001c548:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
1001c54c:	2301      	movs	r3, #1
1001c54e:	9306      	str	r3, [sp, #24]
1001c550:	469b      	mov	fp, r3
1001c552:	ad45      	add	r5, sp, #276	@ 0x114
1001c554:	f7ff baae 	b.w	1001bab4 <_svfprintf_r+0x48c>
1001c558:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c55a:	9807      	ldr	r0, [sp, #28]
1001c55c:	aa32      	add	r2, sp, #200	@ 0xc8
1001c55e:	f005 fb7d 	bl	10021c5c <__ssprint_r>
1001c562:	2800      	cmp	r0, #0
1001c564:	f47f ad0f 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c568:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c56a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c56e:	e411      	b.n	1001bd94 <_svfprintf_r+0x76c>
1001c570:	2140      	movs	r1, #64	@ 0x40
1001c572:	4658      	mov	r0, fp
1001c574:	f7f9 f8d0 	bl	10015718 <_malloc_r>
1001c578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001c57a:	6018      	str	r0, [r3, #0]
1001c57c:	6118      	str	r0, [r3, #16]
1001c57e:	2800      	cmp	r0, #0
1001c580:	f000 8614 	beq.w	1001d1ac <_svfprintf_r+0x1b84>
1001c584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001c586:	2340      	movs	r3, #64	@ 0x40
1001c588:	6153      	str	r3, [r2, #20]
1001c58a:	f7ff b869 	b.w	1001b660 <_svfprintf_r+0x38>
1001c58e:	9b08      	ldr	r3, [sp, #32]
1001c590:	950c      	str	r5, [sp, #48]	@ 0x30
1001c592:	2b06      	cmp	r3, #6
1001c594:	4629      	mov	r1, r5
1001c596:	bf28      	it	cs
1001c598:	2306      	movcs	r3, #6
1001c59a:	9508      	str	r5, [sp, #32]
1001c59c:	462a      	mov	r2, r5
1001c59e:	9306      	str	r3, [sp, #24]
1001c5a0:	4d94      	ldr	r5, [pc, #592]	@ (1001c7f4 <_svfprintf_r+0x11cc>)
1001c5a2:	960d      	str	r6, [sp, #52]	@ 0x34
1001c5a4:	469b      	mov	fp, r3
1001c5a6:	9114      	str	r1, [sp, #80]	@ 0x50
1001c5a8:	9110      	str	r1, [sp, #64]	@ 0x40
1001c5aa:	9112      	str	r1, [sp, #72]	@ 0x48
1001c5ac:	f7ff ba1a 	b.w	1001b9e4 <_svfprintf_r+0x3bc>
1001c5b0:	2e10      	cmp	r6, #16
1001c5b2:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c5b4:	f340 85eb 	ble.w	1001d18e <_svfprintf_r+0x1b66>
1001c5b8:	488f      	ldr	r0, [pc, #572]	@ (1001c7f8 <_svfprintf_r+0x11d0>)
1001c5ba:	f8dd a01c 	ldr.w	sl, [sp, #28]
1001c5be:	9015      	str	r0, [sp, #84]	@ 0x54
1001c5c0:	4642      	mov	r2, r8
1001c5c2:	4621      	mov	r1, r4
1001c5c4:	46a8      	mov	r8, r5
1001c5c6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1001c5c8:	2710      	movs	r7, #16
1001c5ca:	4605      	mov	r5, r0
1001c5cc:	e004      	b.n	1001c5d8 <_svfprintf_r+0xfb0>
1001c5ce:	3208      	adds	r2, #8
1001c5d0:	3e10      	subs	r6, #16
1001c5d2:	2e10      	cmp	r6, #16
1001c5d4:	f340 8224 	ble.w	1001ca20 <_svfprintf_r+0x13f8>
1001c5d8:	3301      	adds	r3, #1
1001c5da:	3110      	adds	r1, #16
1001c5dc:	2b07      	cmp	r3, #7
1001c5de:	e9c2 5700 	strd	r5, r7, [r2]
1001c5e2:	e9cd 3133 	strd	r3, r1, [sp, #204]	@ 0xcc
1001c5e6:	ddf2      	ble.n	1001c5ce <_svfprintf_r+0xfa6>
1001c5e8:	aa32      	add	r2, sp, #200	@ 0xc8
1001c5ea:	4621      	mov	r1, r4
1001c5ec:	4650      	mov	r0, sl
1001c5ee:	f005 fb35 	bl	10021c5c <__ssprint_r>
1001c5f2:	2800      	cmp	r0, #0
1001c5f4:	f040 8117 	bne.w	1001c826 <_svfprintf_r+0x11fe>
1001c5f8:	e9dd 3133 	ldrd	r3, r1, [sp, #204]	@ 0xcc
1001c5fc:	aa35      	add	r2, sp, #212	@ 0xd4
1001c5fe:	e7e7      	b.n	1001c5d0 <_svfprintf_r+0xfa8>
1001c600:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001c602:	f8cd b020 	str.w	fp, [sp, #32]
1001c606:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
1001c60a:	4642      	mov	r2, r8
1001c60c:	4621      	mov	r1, r4
1001c60e:	4f7a      	ldr	r7, [pc, #488]	@ (1001c7f8 <_svfprintf_r+0x11d0>)
1001c610:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
1001c614:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
1001c618:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001c61c:	4654      	mov	r4, sl
1001c61e:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
1001c622:	b383      	cbz	r3, 1001c686 <_svfprintf_r+0x105e>
1001c624:	f1b9 0f00 	cmp.w	r9, #0
1001c628:	f000 80ff 	beq.w	1001c82a <_svfprintf_r+0x1202>
1001c62c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
1001c630:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001c632:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001c634:	3001      	adds	r0, #1
1001c636:	4441      	add	r1, r8
1001c638:	2807      	cmp	r0, #7
1001c63a:	e9c2 3800 	strd	r3, r8, [r2]
1001c63e:	9134      	str	r1, [sp, #208]	@ 0xd0
1001c640:	9033      	str	r0, [sp, #204]	@ 0xcc
1001c642:	dc75      	bgt.n	1001c730 <_svfprintf_r+0x1108>
1001c644:	3208      	adds	r2, #8
1001c646:	9b08      	ldr	r3, [sp, #32]
1001c648:	f89a 0000 	ldrb.w	r0, [sl]
1001c64c:	1b1e      	subs	r6, r3, r4
1001c64e:	4286      	cmp	r6, r0
1001c650:	bfa8      	it	ge
1001c652:	4606      	movge	r6, r0
1001c654:	2e00      	cmp	r6, #0
1001c656:	dd0c      	ble.n	1001c672 <_svfprintf_r+0x104a>
1001c658:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001c65a:	3001      	adds	r0, #1
1001c65c:	4431      	add	r1, r6
1001c65e:	2807      	cmp	r0, #7
1001c660:	e9c2 4600 	strd	r4, r6, [r2]
1001c664:	9134      	str	r1, [sp, #208]	@ 0xd0
1001c666:	9033      	str	r0, [sp, #204]	@ 0xcc
1001c668:	f300 8168 	bgt.w	1001c93c <_svfprintf_r+0x1314>
1001c66c:	f89a 0000 	ldrb.w	r0, [sl]
1001c670:	3208      	adds	r2, #8
1001c672:	2e00      	cmp	r6, #0
1001c674:	bfac      	ite	ge
1001c676:	1b85      	subge	r5, r0, r6
1001c678:	4605      	movlt	r5, r0
1001c67a:	2d00      	cmp	r5, #0
1001c67c:	dc13      	bgt.n	1001c6a6 <_svfprintf_r+0x107e>
1001c67e:	4404      	add	r4, r0
1001c680:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001c682:	2b00      	cmp	r3, #0
1001c684:	d1ce      	bne.n	1001c624 <_svfprintf_r+0xffc>
1001c686:	f1b9 0f00 	cmp.w	r9, #0
1001c68a:	d1cf      	bne.n	1001c62c <_svfprintf_r+0x1004>
1001c68c:	f8dd b020 	ldr.w	fp, [sp, #32]
1001c690:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
1001c694:	46a2      	mov	sl, r4
1001c696:	45da      	cmp	sl, fp
1001c698:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
1001c69c:	4690      	mov	r8, r2
1001c69e:	460c      	mov	r4, r1
1001c6a0:	bf28      	it	cs
1001c6a2:	46da      	movcs	sl, fp
1001c6a4:	e58b      	b.n	1001c1be <_svfprintf_r+0xb96>
1001c6a6:	2d10      	cmp	r5, #16
1001c6a8:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001c6aa:	f340 853e 	ble.w	1001d12a <_svfprintf_r+0x1b02>
1001c6ae:	4623      	mov	r3, r4
1001c6b0:	463e      	mov	r6, r7
1001c6b2:	462c      	mov	r4, r5
1001c6b4:	461d      	mov	r5, r3
1001c6b6:	e004      	b.n	1001c6c2 <_svfprintf_r+0x109a>
1001c6b8:	3c10      	subs	r4, #16
1001c6ba:	2c10      	cmp	r4, #16
1001c6bc:	f102 0208 	add.w	r2, r2, #8
1001c6c0:	dd16      	ble.n	1001c6f0 <_svfprintf_r+0x10c8>
1001c6c2:	3001      	adds	r0, #1
1001c6c4:	3110      	adds	r1, #16
1001c6c6:	2310      	movs	r3, #16
1001c6c8:	2807      	cmp	r0, #7
1001c6ca:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
1001c6ce:	6017      	str	r7, [r2, #0]
1001c6d0:	6053      	str	r3, [r2, #4]
1001c6d2:	ddf1      	ble.n	1001c6b8 <_svfprintf_r+0x1090>
1001c6d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c6d6:	aa32      	add	r2, sp, #200	@ 0xc8
1001c6d8:	4658      	mov	r0, fp
1001c6da:	f005 fabf 	bl	10021c5c <__ssprint_r>
1001c6de:	2800      	cmp	r0, #0
1001c6e0:	f47f ae3f 	bne.w	1001c362 <_svfprintf_r+0xd3a>
1001c6e4:	3c10      	subs	r4, #16
1001c6e6:	2c10      	cmp	r4, #16
1001c6e8:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
1001c6ec:	aa35      	add	r2, sp, #212	@ 0xd4
1001c6ee:	dce8      	bgt.n	1001c6c2 <_svfprintf_r+0x109a>
1001c6f0:	462b      	mov	r3, r5
1001c6f2:	4625      	mov	r5, r4
1001c6f4:	461c      	mov	r4, r3
1001c6f6:	3001      	adds	r0, #1
1001c6f8:	4429      	add	r1, r5
1001c6fa:	2807      	cmp	r0, #7
1001c6fc:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
1001c700:	6016      	str	r6, [r2, #0]
1001c702:	6055      	str	r5, [r2, #4]
1001c704:	f300 837f 	bgt.w	1001ce06 <_svfprintf_r+0x17de>
1001c708:	f89a 0000 	ldrb.w	r0, [sl]
1001c70c:	3208      	adds	r2, #8
1001c70e:	4404      	add	r4, r0
1001c710:	e7b6      	b.n	1001c680 <_svfprintf_r+0x1058>
1001c712:	990d      	ldr	r1, [sp, #52]	@ 0x34
1001c714:	f851 3b04 	ldr.w	r3, [r1], #4
1001c718:	910d      	str	r1, [sp, #52]	@ 0x34
1001c71a:	f019 0110 	ands.w	r1, r9, #16
1001c71e:	f47f aef9 	bne.w	1001c514 <_svfprintf_r+0xeec>
1001c722:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
1001c726:	f000 8160 	beq.w	1001c9ea <_svfprintf_r+0x13c2>
1001c72a:	b29b      	uxth	r3, r3
1001c72c:	460a      	mov	r2, r1
1001c72e:	e6f1      	b.n	1001c514 <_svfprintf_r+0xeec>
1001c730:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c732:	aa32      	add	r2, sp, #200	@ 0xc8
1001c734:	4658      	mov	r0, fp
1001c736:	f005 fa91 	bl	10021c5c <__ssprint_r>
1001c73a:	2800      	cmp	r0, #0
1001c73c:	f47f ae11 	bne.w	1001c362 <_svfprintf_r+0xd3a>
1001c740:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001c742:	aa35      	add	r2, sp, #212	@ 0xd4
1001c744:	e77f      	b.n	1001c646 <_svfprintf_r+0x101e>
1001c746:	f404 6b80 	and.w	fp, r4, #1024	@ 0x400
1001c74a:	2100      	movs	r1, #0
1001c74c:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
1001c750:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 1001c7fc <_svfprintf_r+0x11d4>
1001c754:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
1001c758:	9406      	str	r4, [sp, #24]
1001c75a:	ad5e      	add	r5, sp, #376	@ 0x178
1001c75c:	f04f 3acc 	mov.w	sl, #3435973836	@ 0xcccccccc
1001c760:	2705      	movs	r7, #5
1001c762:	468c      	mov	ip, r1
1001c764:	465e      	mov	r6, fp
1001c766:	e005      	b.n	1001c774 <_svfprintf_r+0x114c>
1001c768:	2b0a      	cmp	r3, #10
1001c76a:	f172 0200 	sbcs.w	r2, r2, #0
1001c76e:	d333      	bcc.n	1001c7d8 <_svfprintf_r+0x11b0>
1001c770:	465b      	mov	r3, fp
1001c772:	4622      	mov	r2, r4
1001c774:	1899      	adds	r1, r3, r2
1001c776:	f141 0100 	adc.w	r1, r1, #0
1001c77a:	fba9 0401 	umull	r0, r4, r9, r1
1001c77e:	f024 0003 	bic.w	r0, r4, #3
1001c782:	eb00 0094 	add.w	r0, r0, r4, lsr #2
1001c786:	1a09      	subs	r1, r1, r0
1001c788:	1a58      	subs	r0, r3, r1
1001c78a:	f162 0e00 	sbc.w	lr, r2, #0
1001c78e:	fb0a f400 	mul.w	r4, sl, r0
1001c792:	fba0 b009 	umull	fp, r0, r0, r9
1001c796:	fb09 440e 	mla	r4, r9, lr, r4
1001c79a:	f00b 0e01 	and.w	lr, fp, #1
1001c79e:	4404      	add	r4, r0
1001c7a0:	fbae 0e07 	umull	r0, lr, lr, r7
1001c7a4:	1840      	adds	r0, r0, r1
1001c7a6:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
1001c7aa:	3030      	adds	r0, #48	@ 0x30
1001c7ac:	f805 0c01 	strb.w	r0, [r5, #-1]
1001c7b0:	ea4b 7bc4 	orr.w	fp, fp, r4, lsl #31
1001c7b4:	f10c 0c01 	add.w	ip, ip, #1
1001c7b8:	3d01      	subs	r5, #1
1001c7ba:	0864      	lsrs	r4, r4, #1
1001c7bc:	2e00      	cmp	r6, #0
1001c7be:	d0d3      	beq.n	1001c768 <_svfprintf_r+0x1140>
1001c7c0:	f898 1000 	ldrb.w	r1, [r8]
1001c7c4:	458c      	cmp	ip, r1
1001c7c6:	d1cf      	bne.n	1001c768 <_svfprintf_r+0x1140>
1001c7c8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
1001c7cc:	d0cc      	beq.n	1001c768 <_svfprintf_r+0x1140>
1001c7ce:	2b0a      	cmp	r3, #10
1001c7d0:	f172 0200 	sbcs.w	r2, r2, #0
1001c7d4:	f080 8137 	bcs.w	1001ca46 <_svfprintf_r+0x141e>
1001c7d8:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
1001c7dc:	9c06      	ldr	r4, [sp, #24]
1001c7de:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
1001c7e2:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
1001c7e6:	f7ff bb15 	b.w	1001be14 <_svfprintf_r+0x7ec>
1001c7ea:	bf00      	nop
1001c7ec:	1002c164 	.word	0x1002c164
1001c7f0:	1002c150 	.word	0x1002c150
1001c7f4:	1002c178 	.word	0x1002c178
1001c7f8:	1002c39c 	.word	0x1002c39c
1001c7fc:	cccccccd 	.word	0xcccccccd
1001c800:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c802:	9807      	ldr	r0, [sp, #28]
1001c804:	9315      	str	r3, [sp, #84]	@ 0x54
1001c806:	aa32      	add	r2, sp, #200	@ 0xc8
1001c808:	f005 fa28 	bl	10021c5c <__ssprint_r>
1001c80c:	2800      	cmp	r0, #0
1001c80e:	f47f abba 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c812:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001c816:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c818:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001c81a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c81e:	f7ff b841 	b.w	1001b8a4 <_svfprintf_r+0x27c>
1001c822:	46a3      	mov	fp, r4
1001c824:	e59d      	b.n	1001c362 <_svfprintf_r+0xd3a>
1001c826:	46d3      	mov	fp, sl
1001c828:	e59b      	b.n	1001c362 <_svfprintf_r+0xd3a>
1001c82a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001c82c:	3b01      	subs	r3, #1
1001c82e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
1001c832:	9310      	str	r3, [sp, #64]	@ 0x40
1001c834:	e6fc      	b.n	1001c630 <_svfprintf_r+0x1008>
1001c836:	2901      	cmp	r1, #1
1001c838:	464c      	mov	r4, r9
1001c83a:	f47f aadb 	bne.w	1001bdf4 <_svfprintf_r+0x7cc>
1001c83e:	e42f      	b.n	1001c0a0 <_svfprintf_r+0xa78>
1001c840:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c842:	9807      	ldr	r0, [sp, #28]
1001c844:	aa32      	add	r2, sp, #200	@ 0xc8
1001c846:	f005 fa09 	bl	10021c5c <__ssprint_r>
1001c84a:	2800      	cmp	r0, #0
1001c84c:	f47f ab9b 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c850:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c852:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c856:	f7ff ba8a 	b.w	1001bd6e <_svfprintf_r+0x746>
1001c85a:	af30      	add	r7, sp, #192	@ 0xc0
1001c85c:	2208      	movs	r2, #8
1001c85e:	2100      	movs	r1, #0
1001c860:	4638      	mov	r0, r7
1001c862:	952b      	str	r5, [sp, #172]	@ 0xac
1001c864:	f7fd f8ea 	bl	10019a3c <memset>
1001c868:	f8dd a020 	ldr.w	sl, [sp, #32]
1001c86c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
1001c870:	f000 80c8 	beq.w	1001ca04 <_svfprintf_r+0x13dc>
1001c874:	2400      	movs	r4, #0
1001c876:	f8cd 9018 	str.w	r9, [sp, #24]
1001c87a:	46a3      	mov	fp, r4
1001c87c:	f8dd 901c 	ldr.w	r9, [sp, #28]
1001c880:	e00c      	b.n	1001c89c <_svfprintf_r+0x1274>
1001c882:	a945      	add	r1, sp, #276	@ 0x114
1001c884:	4648      	mov	r0, r9
1001c886:	f7fd fd27 	bl	1001a2d8 <_wcrtomb_r>
1001c88a:	1c41      	adds	r1, r0, #1
1001c88c:	4458      	add	r0, fp
1001c88e:	f000 838f 	beq.w	1001cfb0 <_svfprintf_r+0x1988>
1001c892:	4550      	cmp	r0, sl
1001c894:	dc08      	bgt.n	1001c8a8 <_svfprintf_r+0x1280>
1001c896:	f000 8442 	beq.w	1001d11e <_svfprintf_r+0x1af6>
1001c89a:	4683      	mov	fp, r0
1001c89c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
1001c89e:	5912      	ldr	r2, [r2, r4]
1001c8a0:	463b      	mov	r3, r7
1001c8a2:	3404      	adds	r4, #4
1001c8a4:	2a00      	cmp	r2, #0
1001c8a6:	d1ec      	bne.n	1001c882 <_svfprintf_r+0x125a>
1001c8a8:	f8dd 9018 	ldr.w	r9, [sp, #24]
1001c8ac:	f1bb 0f00 	cmp.w	fp, #0
1001c8b0:	f000 80dd 	beq.w	1001ca6e <_svfprintf_r+0x1446>
1001c8b4:	f1bb 0f63 	cmp.w	fp, #99	@ 0x63
1001c8b8:	f300 81ba 	bgt.w	1001cc30 <_svfprintf_r+0x1608>
1001c8bc:	2300      	movs	r3, #0
1001c8be:	930c      	str	r3, [sp, #48]	@ 0x30
1001c8c0:	ad45      	add	r5, sp, #276	@ 0x114
1001c8c2:	2208      	movs	r2, #8
1001c8c4:	2100      	movs	r1, #0
1001c8c6:	4638      	mov	r0, r7
1001c8c8:	f7fd f8b8 	bl	10019a3c <memset>
1001c8cc:	9807      	ldr	r0, [sp, #28]
1001c8ce:	9700      	str	r7, [sp, #0]
1001c8d0:	465b      	mov	r3, fp
1001c8d2:	aa2b      	add	r2, sp, #172	@ 0xac
1001c8d4:	4629      	mov	r1, r5
1001c8d6:	f7fd fd25 	bl	1001a324 <_wcsrtombs_r>
1001c8da:	4583      	cmp	fp, r0
1001c8dc:	f040 845d 	bne.w	1001d19a <_svfprintf_r+0x1b72>
1001c8e0:	2300      	movs	r3, #0
1001c8e2:	f805 300b 	strb.w	r3, [r5, fp]
1001c8e6:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
1001c8ea:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001c8ee:	960d      	str	r6, [sp, #52]	@ 0x34
1001c8f0:	9308      	str	r3, [sp, #32]
1001c8f2:	9106      	str	r1, [sp, #24]
1001c8f4:	9314      	str	r3, [sp, #80]	@ 0x50
1001c8f6:	9310      	str	r3, [sp, #64]	@ 0x40
1001c8f8:	9312      	str	r3, [sp, #72]	@ 0x48
1001c8fa:	f7ff b873 	b.w	1001b9e4 <_svfprintf_r+0x3bc>
1001c8fe:	46cb      	mov	fp, r9
1001c900:	e52f      	b.n	1001c362 <_svfprintf_r+0xd3a>
1001c902:	4a75      	ldr	r2, [pc, #468]	@ (1001cad8 <_svfprintf_r+0x14b0>)
1001c904:	9215      	str	r2, [sp, #84]	@ 0x54
1001c906:	3301      	adds	r3, #1
1001c908:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001c90a:	f8c8 2000 	str.w	r2, [r8]
1001c90e:	442c      	add	r4, r5
1001c910:	2b07      	cmp	r3, #7
1001c912:	f8c8 5004 	str.w	r5, [r8, #4]
1001c916:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c91a:	f77f a800 	ble.w	1001b91e <_svfprintf_r+0x2f6>
1001c91e:	f7ff bb68 	b.w	1001bff2 <_svfprintf_r+0x9ca>
1001c922:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c924:	9807      	ldr	r0, [sp, #28]
1001c926:	aa32      	add	r2, sp, #200	@ 0xc8
1001c928:	f005 f998 	bl	10021c5c <__ssprint_r>
1001c92c:	2800      	cmp	r0, #0
1001c92e:	f47f ab2a 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c932:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c934:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c938:	f7fe bfdb 	b.w	1001b8f2 <_svfprintf_r+0x2ca>
1001c93c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c93e:	aa32      	add	r2, sp, #200	@ 0xc8
1001c940:	4658      	mov	r0, fp
1001c942:	f005 f98b 	bl	10021c5c <__ssprint_r>
1001c946:	2800      	cmp	r0, #0
1001c948:	f47f ad0b 	bne.w	1001c362 <_svfprintf_r+0xd3a>
1001c94c:	f89a 0000 	ldrb.w	r0, [sl]
1001c950:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001c952:	aa35      	add	r2, sp, #212	@ 0xd4
1001c954:	e68d      	b.n	1001c672 <_svfprintf_r+0x104a>
1001c956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c958:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001c95a:	681b      	ldr	r3, [r3, #0]
1001c95c:	601a      	str	r2, [r3, #0]
1001c95e:	f7ff b964 	b.w	1001bc2a <_svfprintf_r+0x602>
1001c962:	f8dd 9020 	ldr.w	r9, [sp, #32]
1001c966:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001c968:	603b      	str	r3, [r7, #0]
1001c96a:	3601      	adds	r6, #1
1001c96c:	4444      	add	r4, r8
1001c96e:	2e07      	cmp	r6, #7
1001c970:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c974:	f8c7 8004 	str.w	r8, [r7, #4]
1001c978:	f77f ab7e 	ble.w	1001c078 <_svfprintf_r+0xa50>
1001c97c:	e486      	b.n	1001c28c <_svfprintf_r+0xc64>
1001c97e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001c980:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001c982:	441c      	add	r4, r3
1001c984:	e9c8 1300 	strd	r1, r3, [r8]
1001c988:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c98a:	9434      	str	r4, [sp, #208]	@ 0xd0
1001c98c:	3301      	adds	r3, #1
1001c98e:	2b07      	cmp	r3, #7
1001c990:	9333      	str	r3, [sp, #204]	@ 0xcc
1001c992:	f300 8165 	bgt.w	1001cc60 <_svfprintf_r+0x1638>
1001c996:	f108 0808 	add.w	r8, r8, #8
1001c99a:	2a00      	cmp	r2, #0
1001c99c:	f6bf ab1d 	bge.w	1001bfda <_svfprintf_r+0x9b2>
1001c9a0:	4256      	negs	r6, r2
1001c9a2:	3210      	adds	r2, #16
1001c9a4:	4a4c      	ldr	r2, [pc, #304]	@ (1001cad8 <_svfprintf_r+0x14b0>)
1001c9a6:	9215      	str	r2, [sp, #84]	@ 0x54
1001c9a8:	f280 82e8 	bge.w	1001cf7c <_svfprintf_r+0x1954>
1001c9ac:	46aa      	mov	sl, r5
1001c9ae:	2710      	movs	r7, #16
1001c9b0:	4615      	mov	r5, r2
1001c9b2:	e005      	b.n	1001c9c0 <_svfprintf_r+0x1398>
1001c9b4:	f108 0808 	add.w	r8, r8, #8
1001c9b8:	3e10      	subs	r6, #16
1001c9ba:	2e10      	cmp	r6, #16
1001c9bc:	f340 82dd 	ble.w	1001cf7a <_svfprintf_r+0x1952>
1001c9c0:	3301      	adds	r3, #1
1001c9c2:	3410      	adds	r4, #16
1001c9c4:	2b07      	cmp	r3, #7
1001c9c6:	e9c8 5700 	strd	r5, r7, [r8]
1001c9ca:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c9ce:	ddf1      	ble.n	1001c9b4 <_svfprintf_r+0x138c>
1001c9d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c9d2:	9807      	ldr	r0, [sp, #28]
1001c9d4:	aa32      	add	r2, sp, #200	@ 0xc8
1001c9d6:	f005 f941 	bl	10021c5c <__ssprint_r>
1001c9da:	2800      	cmp	r0, #0
1001c9dc:	f47f aad3 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001c9e0:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001c9e4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c9e8:	e7e6      	b.n	1001c9b8 <_svfprintf_r+0x1390>
1001c9ea:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
1001c9ee:	bf1c      	itt	ne
1001c9f0:	b2db      	uxtbne	r3, r3
1001c9f2:	4602      	movne	r2, r0
1001c9f4:	e58e      	b.n	1001c514 <_svfprintf_r+0xeec>
1001c9f6:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
1001c9fa:	bf1c      	itt	ne
1001c9fc:	b2db      	uxtbne	r3, r3
1001c9fe:	4602      	movne	r2, r0
1001ca00:	f7ff b8de 	b.w	1001bbc0 <_svfprintf_r+0x598>
1001ca04:	2300      	movs	r3, #0
1001ca06:	9807      	ldr	r0, [sp, #28]
1001ca08:	9700      	str	r7, [sp, #0]
1001ca0a:	aa2b      	add	r2, sp, #172	@ 0xac
1001ca0c:	4619      	mov	r1, r3
1001ca0e:	f7fd fc89 	bl	1001a324 <_wcsrtombs_r>
1001ca12:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
1001ca16:	4683      	mov	fp, r0
1001ca18:	f000 82ca 	beq.w	1001cfb0 <_svfprintf_r+0x1988>
1001ca1c:	952b      	str	r5, [sp, #172]	@ 0xac
1001ca1e:	e745      	b.n	1001c8ac <_svfprintf_r+0x1284>
1001ca20:	4645      	mov	r5, r8
1001ca22:	460c      	mov	r4, r1
1001ca24:	4690      	mov	r8, r2
1001ca26:	3301      	adds	r3, #1
1001ca28:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001ca2a:	f8c8 2000 	str.w	r2, [r8]
1001ca2e:	4434      	add	r4, r6
1001ca30:	2b07      	cmp	r3, #7
1001ca32:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001ca36:	f8c8 6004 	str.w	r6, [r8, #4]
1001ca3a:	f300 8104 	bgt.w	1001cc46 <_svfprintf_r+0x161e>
1001ca3e:	f108 0808 	add.w	r8, r8, #8
1001ca42:	f7ff bbb5 	b.w	1001c1b0 <_svfprintf_r+0xb88>
1001ca46:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
1001ca48:	991d      	ldr	r1, [sp, #116]	@ 0x74
1001ca4a:	1aed      	subs	r5, r5, r3
1001ca4c:	461a      	mov	r2, r3
1001ca4e:	4628      	mov	r0, r5
1001ca50:	f7fd f888 	bl	10019b64 <strncpy>
1001ca54:	f898 3001 	ldrb.w	r3, [r8, #1]
1001ca58:	b10b      	cbz	r3, 1001ca5e <_svfprintf_r+0x1436>
1001ca5a:	f108 0801 	add.w	r8, r8, #1
1001ca5e:	f04f 0c00 	mov.w	ip, #0
1001ca62:	e685      	b.n	1001c770 <_svfprintf_r+0x1148>
1001ca64:	222d      	movs	r2, #45	@ 0x2d
1001ca66:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001ca6a:	f7fe bfaa 	b.w	1001b9c2 <_svfprintf_r+0x39a>
1001ca6e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001ca72:	960d      	str	r6, [sp, #52]	@ 0x34
1001ca74:	f8cd b018 	str.w	fp, [sp, #24]
1001ca78:	f8cd b020 	str.w	fp, [sp, #32]
1001ca7c:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
1001ca80:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
1001ca84:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
1001ca88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
1001ca8c:	f7fe bfaa 	b.w	1001b9e4 <_svfprintf_r+0x3bc>
1001ca90:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001ca92:	9807      	ldr	r0, [sp, #28]
1001ca94:	aa32      	add	r2, sp, #200	@ 0xc8
1001ca96:	f005 f8e1 	bl	10021c5c <__ssprint_r>
1001ca9a:	2800      	cmp	r0, #0
1001ca9c:	f47f aa73 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001caa0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001caa2:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001caa4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001caa8:	f7ff ba80 	b.w	1001bfac <_svfprintf_r+0x984>
1001caac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001caae:	ebab 060a 	sub.w	r6, fp, sl
1001cab2:	1b5d      	subs	r5, r3, r5
1001cab4:	42ae      	cmp	r6, r5
1001cab6:	bfa8      	it	ge
1001cab8:	462e      	movge	r6, r5
1001caba:	f7ff bbad 	b.w	1001c218 <_svfprintf_r+0xbf0>
1001cabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001cac0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001cac2:	681b      	ldr	r3, [r3, #0]
1001cac4:	801a      	strh	r2, [r3, #0]
1001cac6:	f7ff b8b0 	b.w	1001bc2a <_svfprintf_r+0x602>
1001caca:	f343 12c0 	sbfx	r2, r3, #7, #1
1001cace:	4611      	mov	r1, r2
1001cad0:	b25b      	sxtb	r3, r3
1001cad2:	f7ff b83b 	b.w	1001bb4c <_svfprintf_r+0x524>
1001cad6:	bf00      	nop
1001cad8:	1002c39c 	.word	0x1002c39c
1001cadc:	9e08      	ldr	r6, [sp, #32]
1001cade:	2302      	movs	r3, #2
1001cae0:	e9cd 3600 	strd	r3, r6, [sp]
1001cae4:	ab30      	add	r3, sp, #192	@ 0xc0
1001cae6:	9304      	str	r3, [sp, #16]
1001cae8:	ab2b      	add	r3, sp, #172	@ 0xac
1001caea:	9303      	str	r3, [sp, #12]
1001caec:	ab29      	add	r3, sp, #164	@ 0xa4
1001caee:	9302      	str	r3, [sp, #8]
1001caf0:	9807      	ldr	r0, [sp, #28]
1001caf2:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
1001caf6:	f7fd fd03 	bl	1001a500 <_dtoa_r>
1001cafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001cafc:	2b67      	cmp	r3, #103	@ 0x67
1001cafe:	4605      	mov	r5, r0
1001cb00:	f000 813b 	beq.w	1001cd7a <_svfprintf_r+0x1752>
1001cb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001cb06:	2b47      	cmp	r3, #71	@ 0x47
1001cb08:	f000 8137 	beq.w	1001cd7a <_svfprintf_r+0x1752>
1001cb0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001cb0e:	f023 0720 	bic.w	r7, r3, #32
1001cb12:	2f46      	cmp	r7, #70	@ 0x46
1001cb14:	eb00 0406 	add.w	r4, r0, r6
1001cb18:	d105      	bne.n	1001cb26 <_svfprintf_r+0x14fe>
1001cb1a:	7803      	ldrb	r3, [r0, #0]
1001cb1c:	2b30      	cmp	r3, #48	@ 0x30
1001cb1e:	f000 82f1 	beq.w	1001d104 <_svfprintf_r+0x1adc>
1001cb22:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
1001cb24:	4434      	add	r4, r6
1001cb26:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001cb2a:	2200      	movs	r2, #0
1001cb2c:	2300      	movs	r3, #0
1001cb2e:	f005 fe8f 	bl	10022850 <__aeabi_dcmpeq>
1001cb32:	2800      	cmp	r0, #0
1001cb34:	f000 813f 	beq.w	1001cdb6 <_svfprintf_r+0x178e>
1001cb38:	4623      	mov	r3, r4
1001cb3a:	1b5b      	subs	r3, r3, r5
1001cb3c:	9313      	str	r3, [sp, #76]	@ 0x4c
1001cb3e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001cb40:	9212      	str	r2, [sp, #72]	@ 0x48
1001cb42:	2f47      	cmp	r7, #71	@ 0x47
1001cb44:	f000 8121 	beq.w	1001cd8a <_svfprintf_r+0x1762>
1001cb48:	2f46      	cmp	r7, #70	@ 0x46
1001cb4a:	f000 81e3 	beq.w	1001cf14 <_svfprintf_r+0x18ec>
1001cb4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001cb50:	1e53      	subs	r3, r2, #1
1001cb52:	2961      	cmp	r1, #97	@ 0x61
1001cb54:	9329      	str	r3, [sp, #164]	@ 0xa4
1001cb56:	f000 8318 	beq.w	1001d18a <_svfprintf_r+0x1b62>
1001cb5a:	2941      	cmp	r1, #65	@ 0x41
1001cb5c:	f040 8120 	bne.w	1001cda0 <_svfprintf_r+0x1778>
1001cb60:	2150      	movs	r1, #80	@ 0x50
1001cb62:	2001      	movs	r0, #1
1001cb64:	2b00      	cmp	r3, #0
1001cb66:	bfb6      	itet	lt
1001cb68:	f1c2 0301 	rsblt	r3, r2, #1
1001cb6c:	222b      	movge	r2, #43	@ 0x2b
1001cb6e:	222d      	movlt	r2, #45	@ 0x2d
1001cb70:	2b09      	cmp	r3, #9
1001cb72:	f88d 10b0 	strb.w	r1, [sp, #176]	@ 0xb0
1001cb76:	f88d 20b1 	strb.w	r2, [sp, #177]	@ 0xb1
1001cb7a:	f340 8227 	ble.w	1001cfcc <_svfprintf_r+0x19a4>
1001cb7e:	f10d 04c7 	add.w	r4, sp, #199	@ 0xc7
1001cb82:	4eae      	ldr	r6, [pc, #696]	@ (1001ce3c <_svfprintf_r+0x1814>)
1001cb84:	4622      	mov	r2, r4
1001cb86:	4610      	mov	r0, r2
1001cb88:	fba6 1203 	umull	r1, r2, r6, r3
1001cb8c:	08d2      	lsrs	r2, r2, #3
1001cb8e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1001cb92:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
1001cb96:	3130      	adds	r1, #48	@ 0x30
1001cb98:	f800 1c01 	strb.w	r1, [r0, #-1]
1001cb9c:	4619      	mov	r1, r3
1001cb9e:	2963      	cmp	r1, #99	@ 0x63
1001cba0:	4613      	mov	r3, r2
1001cba2:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
1001cba6:	dcee      	bgt.n	1001cb86 <_svfprintf_r+0x155e>
1001cba8:	3330      	adds	r3, #48	@ 0x30
1001cbaa:	f802 3c01 	strb.w	r3, [r2, #-1]
1001cbae:	1e83      	subs	r3, r0, #2
1001cbb0:	42a3      	cmp	r3, r4
1001cbb2:	f080 82ef 	bcs.w	1001d194 <_svfprintf_r+0x1b6c>
1001cbb6:	f10d 02b1 	add.w	r2, sp, #177	@ 0xb1
1001cbba:	f813 1b01 	ldrb.w	r1, [r3], #1
1001cbbe:	f802 1f01 	strb.w	r1, [r2, #1]!
1001cbc2:	42a3      	cmp	r3, r4
1001cbc4:	d1f9      	bne.n	1001cbba <_svfprintf_r+0x1592>
1001cbc6:	ab5e      	add	r3, sp, #376	@ 0x178
1001cbc8:	1a18      	subs	r0, r3, r0
1001cbca:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
1001cbce:	931c      	str	r3, [sp, #112]	@ 0x70
1001cbd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001cbd2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
1001cbd4:	2b01      	cmp	r3, #1
1001cbd6:	eb03 0b02 	add.w	fp, r3, r2
1001cbda:	f340 822a 	ble.w	1001d032 <_svfprintf_r+0x1a0a>
1001cbde:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001cbe0:	449b      	add	fp, r3
1001cbe2:	9b06      	ldr	r3, [sp, #24]
1001cbe4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
1001cbe8:	f443 7980 	orr.w	r9, r3, #256	@ 0x100
1001cbec:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
1001cbf0:	2300      	movs	r3, #0
1001cbf2:	9314      	str	r3, [sp, #80]	@ 0x50
1001cbf4:	9206      	str	r2, [sp, #24]
1001cbf6:	9310      	str	r3, [sp, #64]	@ 0x40
1001cbf8:	9312      	str	r3, [sp, #72]	@ 0x48
1001cbfa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
1001cbfc:	2b00      	cmp	r3, #0
1001cbfe:	f040 80d3 	bne.w	1001cda8 <_svfprintf_r+0x1780>
1001cc02:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001cc06:	9308      	str	r3, [sp, #32]
1001cc08:	f7fe beec 	b.w	1001b9e4 <_svfprintf_r+0x3bc>
1001cc0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1001cc0e:	aa32      	add	r2, sp, #200	@ 0xc8
1001cc10:	4621      	mov	r1, r4
1001cc12:	4658      	mov	r0, fp
1001cc14:	f005 f822 	bl	10021c5c <__ssprint_r>
1001cc18:	89a3      	ldrh	r3, [r4, #12]
1001cc1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1001cc1e:	f7fe be0c 	b.w	1001b83a <_svfprintf_r+0x212>
1001cc22:	4628      	mov	r0, r5
1001cc24:	960d      	str	r6, [sp, #52]	@ 0x34
1001cc26:	f7fd faeb 	bl	1001a200 <strlen>
1001cc2a:	4683      	mov	fp, r0
1001cc2c:	f7fe bf71 	b.w	1001bb12 <_svfprintf_r+0x4ea>
1001cc30:	9807      	ldr	r0, [sp, #28]
1001cc32:	f10b 0101 	add.w	r1, fp, #1
1001cc36:	f7f8 fd6f 	bl	10015718 <_malloc_r>
1001cc3a:	4605      	mov	r5, r0
1001cc3c:	2800      	cmp	r0, #0
1001cc3e:	f000 81b7 	beq.w	1001cfb0 <_svfprintf_r+0x1988>
1001cc42:	900c      	str	r0, [sp, #48]	@ 0x30
1001cc44:	e63d      	b.n	1001c8c2 <_svfprintf_r+0x129a>
1001cc46:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001cc48:	9807      	ldr	r0, [sp, #28]
1001cc4a:	aa32      	add	r2, sp, #200	@ 0xc8
1001cc4c:	f005 f806 	bl	10021c5c <__ssprint_r>
1001cc50:	2800      	cmp	r0, #0
1001cc52:	f47f a998 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001cc56:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001cc58:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001cc5c:	f7ff baa8 	b.w	1001c1b0 <_svfprintf_r+0xb88>
1001cc60:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001cc62:	9807      	ldr	r0, [sp, #28]
1001cc64:	aa32      	add	r2, sp, #200	@ 0xc8
1001cc66:	f004 fff9 	bl	10021c5c <__ssprint_r>
1001cc6a:	2800      	cmp	r0, #0
1001cc6c:	f47f a98b 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001cc70:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001cc74:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001cc76:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001cc7a:	e68e      	b.n	1001c99a <_svfprintf_r+0x1372>
1001cc7c:	2306      	movs	r3, #6
1001cc7e:	9308      	str	r3, [sp, #32]
1001cc80:	f7ff bbef 	b.w	1001c462 <_svfprintf_r+0xe3a>
1001cc84:	9b08      	ldr	r3, [sp, #32]
1001cc86:	1c5e      	adds	r6, r3, #1
1001cc88:	2302      	movs	r3, #2
1001cc8a:	e729      	b.n	1001cae0 <_svfprintf_r+0x14b8>
1001cc8c:	9e08      	ldr	r6, [sp, #32]
1001cc8e:	2303      	movs	r3, #3
1001cc90:	e726      	b.n	1001cae0 <_svfprintf_r+0x14b8>
1001cc92:	aa29      	add	r2, sp, #164	@ 0xa4
1001cc94:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001cc98:	f7fd fb52 	bl	1001a340 <frexp>
1001cc9c:	2200      	movs	r2, #0
1001cc9e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
1001cca2:	f005 fb6d 	bl	10022380 <__aeabi_dmul>
1001cca6:	4602      	mov	r2, r0
1001cca8:	460b      	mov	r3, r1
1001ccaa:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1001ccae:	2200      	movs	r2, #0
1001ccb0:	2300      	movs	r3, #0
1001ccb2:	f005 fdcd 	bl	10022850 <__aeabi_dcmpeq>
1001ccb6:	2800      	cmp	r0, #0
1001ccb8:	f040 81c0 	bne.w	1001d03c <_svfprintf_r+0x1a14>
1001ccbc:	4b60      	ldr	r3, [pc, #384]	@ (1001ce40 <_svfprintf_r+0x1818>)
1001ccbe:	9312      	str	r3, [sp, #72]	@ 0x48
1001ccc0:	9b08      	ldr	r3, [sp, #32]
1001ccc2:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
1001ccc6:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
1001ccca:	462e      	mov	r6, r5
1001cccc:	9514      	str	r5, [sp, #80]	@ 0x50
1001ccce:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
1001ccd2:	464d      	mov	r5, r9
1001ccd4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
1001ccd8:	e005      	b.n	1001cce6 <_svfprintf_r+0x16be>
1001ccda:	2200      	movs	r2, #0
1001ccdc:	2300      	movs	r3, #0
1001ccde:	f005 fdb7 	bl	10022850 <__aeabi_dcmpeq>
1001cce2:	b9f0      	cbnz	r0, 1001cd22 <_svfprintf_r+0x16fa>
1001cce4:	463d      	mov	r5, r7
1001cce6:	4b57      	ldr	r3, [pc, #348]	@ (1001ce44 <_svfprintf_r+0x181c>)
1001cce8:	2200      	movs	r2, #0
1001ccea:	4640      	mov	r0, r8
1001ccec:	4649      	mov	r1, r9
1001ccee:	f005 fb47 	bl	10022380 <__aeabi_dmul>
1001ccf2:	4689      	mov	r9, r1
1001ccf4:	4680      	mov	r8, r0
1001ccf6:	f005 fdf3 	bl	100228e0 <__aeabi_d2iz>
1001ccfa:	4604      	mov	r4, r0
1001ccfc:	f005 fad6 	bl	100222ac <__aeabi_i2d>
1001cd00:	4602      	mov	r2, r0
1001cd02:	460b      	mov	r3, r1
1001cd04:	4640      	mov	r0, r8
1001cd06:	4649      	mov	r1, r9
1001cd08:	f005 f982 	bl	10022010 <__aeabi_dsub>
1001cd0c:	f81b 3004 	ldrb.w	r3, [fp, r4]
1001cd10:	1c6a      	adds	r2, r5, #1
1001cd12:	46b2      	mov	sl, r6
1001cd14:	f105 37ff 	add.w	r7, r5, #4294967295	@ 0xffffffff
1001cd18:	f806 3b01 	strb.w	r3, [r6], #1
1001cd1c:	4680      	mov	r8, r0
1001cd1e:	4689      	mov	r9, r1
1001cd20:	d1db      	bne.n	1001ccda <_svfprintf_r+0x16b2>
1001cd22:	46cb      	mov	fp, r9
1001cd24:	4657      	mov	r7, sl
1001cd26:	46c2      	mov	sl, r8
1001cd28:	4b47      	ldr	r3, [pc, #284]	@ (1001ce48 <_svfprintf_r+0x1820>)
1001cd2a:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
1001cd2e:	2200      	movs	r2, #0
1001cd30:	4650      	mov	r0, sl
1001cd32:	4659      	mov	r1, fp
1001cd34:	46a9      	mov	r9, r5
1001cd36:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1001cd38:	f005 fdb2 	bl	100228a0 <__aeabi_dcmpgt>
1001cd3c:	2800      	cmp	r0, #0
1001cd3e:	f040 8153 	bne.w	1001cfe8 <_svfprintf_r+0x19c0>
1001cd42:	4b41      	ldr	r3, [pc, #260]	@ (1001ce48 <_svfprintf_r+0x1820>)
1001cd44:	4650      	mov	r0, sl
1001cd46:	4659      	mov	r1, fp
1001cd48:	2200      	movs	r2, #0
1001cd4a:	f005 fd81 	bl	10022850 <__aeabi_dcmpeq>
1001cd4e:	b110      	cbz	r0, 1001cd56 <_svfprintf_r+0x172e>
1001cd50:	07e3      	lsls	r3, r4, #31
1001cd52:	f100 8149 	bmi.w	1001cfe8 <_svfprintf_r+0x19c0>
1001cd56:	f1b9 0f00 	cmp.w	r9, #0
1001cd5a:	f2c0 815f 	blt.w	1001d01c <_svfprintf_r+0x19f4>
1001cd5e:	f109 0301 	add.w	r3, r9, #1
1001cd62:	4433      	add	r3, r6
1001cd64:	2230      	movs	r2, #48	@ 0x30
1001cd66:	f806 2b01 	strb.w	r2, [r6], #1
1001cd6a:	42b3      	cmp	r3, r6
1001cd6c:	d1fb      	bne.n	1001cd66 <_svfprintf_r+0x173e>
1001cd6e:	1b5b      	subs	r3, r3, r5
1001cd70:	9313      	str	r3, [sp, #76]	@ 0x4c
1001cd72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001cd74:	f023 0720 	bic.w	r7, r3, #32
1001cd78:	e6e1      	b.n	1001cb3e <_svfprintf_r+0x1516>
1001cd7a:	9b06      	ldr	r3, [sp, #24]
1001cd7c:	07df      	lsls	r7, r3, #31
1001cd7e:	f100 80f9 	bmi.w	1001cf74 <_svfprintf_r+0x194c>
1001cd82:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001cd84:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001cd86:	1b5b      	subs	r3, r3, r5
1001cd88:	9313      	str	r3, [sp, #76]	@ 0x4c
1001cd8a:	1cd3      	adds	r3, r2, #3
1001cd8c:	9212      	str	r2, [sp, #72]	@ 0x48
1001cd8e:	db02      	blt.n	1001cd96 <_svfprintf_r+0x176e>
1001cd90:	9b08      	ldr	r3, [sp, #32]
1001cd92:	4293      	cmp	r3, r2
1001cd94:	da1b      	bge.n	1001cdce <_svfprintf_r+0x17a6>
1001cd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001cd98:	3b02      	subs	r3, #2
1001cd9a:	930e      	str	r3, [sp, #56]	@ 0x38
1001cd9c:	1e53      	subs	r3, r2, #1
1001cd9e:	9329      	str	r3, [sp, #164]	@ 0xa4
1001cda0:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
1001cda4:	2000      	movs	r0, #0
1001cda6:	e6dd      	b.n	1001cb64 <_svfprintf_r+0x153c>
1001cda8:	222d      	movs	r2, #45	@ 0x2d
1001cdaa:	2300      	movs	r3, #0
1001cdac:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001cdb0:	9308      	str	r3, [sp, #32]
1001cdb2:	f7fe be1a 	b.w	1001b9ea <_svfprintf_r+0x3c2>
1001cdb6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001cdb8:	42a3      	cmp	r3, r4
1001cdba:	f4bf aebe 	bcs.w	1001cb3a <_svfprintf_r+0x1512>
1001cdbe:	2130      	movs	r1, #48	@ 0x30
1001cdc0:	1c5a      	adds	r2, r3, #1
1001cdc2:	9230      	str	r2, [sp, #192]	@ 0xc0
1001cdc4:	7019      	strb	r1, [r3, #0]
1001cdc6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001cdc8:	429c      	cmp	r4, r3
1001cdca:	d8f9      	bhi.n	1001cdc0 <_svfprintf_r+0x1798>
1001cdcc:	e6b5      	b.n	1001cb3a <_svfprintf_r+0x1512>
1001cdce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1001cdd0:	428a      	cmp	r2, r1
1001cdd2:	f2c0 80c4 	blt.w	1001cf5e <_svfprintf_r+0x1936>
1001cdd6:	9b06      	ldr	r3, [sp, #24]
1001cdd8:	07dc      	lsls	r4, r3, #31
1001cdda:	f140 8184 	bpl.w	1001d0e6 <_svfprintf_r+0x1abe>
1001cdde:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001cde0:	eb02 0b03 	add.w	fp, r2, r3
1001cde4:	9b06      	ldr	r3, [sp, #24]
1001cde6:	0558      	lsls	r0, r3, #21
1001cde8:	d502      	bpl.n	1001cdf0 <_svfprintf_r+0x17c8>
1001cdea:	2a00      	cmp	r2, #0
1001cdec:	f300 814d 	bgt.w	1001d08a <_svfprintf_r+0x1a62>
1001cdf0:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001cdf4:	9306      	str	r3, [sp, #24]
1001cdf6:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001cdfa:	2367      	movs	r3, #103	@ 0x67
1001cdfc:	930e      	str	r3, [sp, #56]	@ 0x38
1001cdfe:	2300      	movs	r3, #0
1001ce00:	9314      	str	r3, [sp, #80]	@ 0x50
1001ce02:	9310      	str	r3, [sp, #64]	@ 0x40
1001ce04:	e6f9      	b.n	1001cbfa <_svfprintf_r+0x15d2>
1001ce06:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001ce08:	aa32      	add	r2, sp, #200	@ 0xc8
1001ce0a:	4658      	mov	r0, fp
1001ce0c:	f004 ff26 	bl	10021c5c <__ssprint_r>
1001ce10:	2800      	cmp	r0, #0
1001ce12:	f47f aaa6 	bne.w	1001c362 <_svfprintf_r+0xd3a>
1001ce16:	f89a 0000 	ldrb.w	r0, [sl]
1001ce1a:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001ce1c:	aa35      	add	r2, sp, #212	@ 0xd4
1001ce1e:	4404      	add	r4, r0
1001ce20:	e42e      	b.n	1001c680 <_svfprintf_r+0x1058>
1001ce22:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001ce24:	9807      	ldr	r0, [sp, #28]
1001ce26:	aa32      	add	r2, sp, #200	@ 0xc8
1001ce28:	f004 ff18 	bl	10021c5c <__ssprint_r>
1001ce2c:	2800      	cmp	r0, #0
1001ce2e:	f47f a8aa 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001ce32:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001ce34:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001ce38:	f7ff b9b3 	b.w	1001c1a2 <_svfprintf_r+0xb7a>
1001ce3c:	cccccccd 	.word	0xcccccccd
1001ce40:	1002c164 	.word	0x1002c164
1001ce44:	40300000 	.word	0x40300000
1001ce48:	3fe00000 	.word	0x3fe00000
1001ce4c:	2378      	movs	r3, #120	@ 0x78
1001ce4e:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
1001ce52:	2330      	movs	r3, #48	@ 0x30
1001ce54:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
1001ce58:	f049 0302 	orr.w	r3, r9, #2
1001ce5c:	9306      	str	r3, [sp, #24]
1001ce5e:	9b08      	ldr	r3, [sp, #32]
1001ce60:	2b63      	cmp	r3, #99	@ 0x63
1001ce62:	f300 80dd 	bgt.w	1001d020 <_svfprintf_r+0x19f8>
1001ce66:	2300      	movs	r3, #0
1001ce68:	930c      	str	r3, [sp, #48]	@ 0x30
1001ce6a:	ad45      	add	r5, sp, #276	@ 0x114
1001ce6c:	f449 7381 	orr.w	r3, r9, #258	@ 0x102
1001ce70:	9315      	str	r3, [sp, #84]	@ 0x54
1001ce72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1001ce74:	2b00      	cmp	r3, #0
1001ce76:	db22      	blt.n	1001cebe <_svfprintf_r+0x1896>
1001ce78:	2300      	movs	r3, #0
1001ce7a:	931f      	str	r3, [sp, #124]	@ 0x7c
1001ce7c:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
1001ce80:	e9cd 3424 	strd	r3, r4, [sp, #144]	@ 0x90
1001ce84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001ce86:	2b61      	cmp	r3, #97	@ 0x61
1001ce88:	f47f aafb 	bne.w	1001c482 <_svfprintf_r+0xe5a>
1001ce8c:	aa29      	add	r2, sp, #164	@ 0xa4
1001ce8e:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001ce92:	f7fd fa55 	bl	1001a340 <frexp>
1001ce96:	2200      	movs	r2, #0
1001ce98:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
1001ce9c:	f005 fa70 	bl	10022380 <__aeabi_dmul>
1001cea0:	4602      	mov	r2, r0
1001cea2:	460b      	mov	r3, r1
1001cea4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1001cea8:	2200      	movs	r2, #0
1001ceaa:	2300      	movs	r3, #0
1001ceac:	f005 fcd0 	bl	10022850 <__aeabi_dcmpeq>
1001ceb0:	2800      	cmp	r0, #0
1001ceb2:	f040 80c3 	bne.w	1001d03c <_svfprintf_r+0x1a14>
1001ceb6:	4ba9      	ldr	r3, [pc, #676]	@ (1001d15c <_svfprintf_r+0x1b34>)
1001ceb8:	9312      	str	r3, [sp, #72]	@ 0x48
1001ceba:	e701      	b.n	1001ccc0 <_svfprintf_r+0x1698>
1001cebc:	930c      	str	r3, [sp, #48]	@ 0x30
1001cebe:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
1001cec2:	9324      	str	r3, [sp, #144]	@ 0x90
1001cec4:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
1001cec8:	9325      	str	r3, [sp, #148]	@ 0x94
1001ceca:	232d      	movs	r3, #45	@ 0x2d
1001cecc:	931f      	str	r3, [sp, #124]	@ 0x7c
1001cece:	e7d9      	b.n	1001ce84 <_svfprintf_r+0x185c>
1001ced0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001ced2:	9807      	ldr	r0, [sp, #28]
1001ced4:	aa32      	add	r2, sp, #200	@ 0xc8
1001ced6:	f004 fec1 	bl	10021c5c <__ssprint_r>
1001ceda:	2800      	cmp	r0, #0
1001cedc:	f47f a853 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001cee0:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001cee2:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001cee4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001cee8:	f7ff b97f 	b.w	1001c1ea <_svfprintf_r+0xbc2>
1001ceec:	499c      	ldr	r1, [pc, #624]	@ (1001d160 <_svfprintf_r+0x1b38>)
1001ceee:	9115      	str	r1, [sp, #84]	@ 0x54
1001cef0:	f7fe bdaf 	b.w	1001ba52 <_svfprintf_r+0x42a>
1001cef4:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001cef6:	9807      	ldr	r0, [sp, #28]
1001cef8:	aa32      	add	r2, sp, #200	@ 0xc8
1001cefa:	f004 feaf 	bl	10021c5c <__ssprint_r>
1001cefe:	2800      	cmp	r0, #0
1001cf00:	f47f a841 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001cf04:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001cf06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001cf08:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001cf0a:	1b5d      	subs	r5, r3, r5
1001cf0c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001cf10:	f7ff b982 	b.w	1001c218 <_svfprintf_r+0xbf0>
1001cf14:	9b06      	ldr	r3, [sp, #24]
1001cf16:	9912      	ldr	r1, [sp, #72]	@ 0x48
1001cf18:	9a08      	ldr	r2, [sp, #32]
1001cf1a:	f003 0301 	and.w	r3, r3, #1
1001cf1e:	2900      	cmp	r1, #0
1001cf20:	ea43 0302 	orr.w	r3, r3, r2
1001cf24:	f340 810f 	ble.w	1001d146 <_svfprintf_r+0x1b1e>
1001cf28:	2b00      	cmp	r3, #0
1001cf2a:	f040 80d5 	bne.w	1001d0d8 <_svfprintf_r+0x1ab0>
1001cf2e:	2366      	movs	r3, #102	@ 0x66
1001cf30:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
1001cf34:	930e      	str	r3, [sp, #56]	@ 0x38
1001cf36:	9b06      	ldr	r3, [sp, #24]
1001cf38:	055a      	lsls	r2, r3, #21
1001cf3a:	f100 80a8 	bmi.w	1001d08e <_svfprintf_r+0x1a66>
1001cf3e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001cf42:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001cf46:	9306      	str	r3, [sp, #24]
1001cf48:	e759      	b.n	1001cdfe <_svfprintf_r+0x17d6>
1001cf4a:	2358      	movs	r3, #88	@ 0x58
1001cf4c:	e77f      	b.n	1001ce4e <_svfprintf_r+0x1826>
1001cf4e:	2200      	movs	r2, #0
1001cf50:	9208      	str	r2, [sp, #32]
1001cf52:	f7fe bbc1 	b.w	1001b6d8 <_svfprintf_r+0xb0>
1001cf56:	4a82      	ldr	r2, [pc, #520]	@ (1001d160 <_svfprintf_r+0x1b38>)
1001cf58:	9215      	str	r2, [sp, #84]	@ 0x54
1001cf5a:	f7ff b8ed 	b.w	1001c138 <_svfprintf_r+0xb10>
1001cf5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001cf60:	9a18      	ldr	r2, [sp, #96]	@ 0x60
1001cf62:	eb03 0b02 	add.w	fp, r3, r2
1001cf66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001cf68:	2b00      	cmp	r3, #0
1001cf6a:	f340 8083 	ble.w	1001d074 <_svfprintf_r+0x1a4c>
1001cf6e:	2367      	movs	r3, #103	@ 0x67
1001cf70:	930e      	str	r3, [sp, #56]	@ 0x38
1001cf72:	e7e0      	b.n	1001cf36 <_svfprintf_r+0x190e>
1001cf74:	19ac      	adds	r4, r5, r6
1001cf76:	2747      	movs	r7, #71	@ 0x47
1001cf78:	e5d5      	b.n	1001cb26 <_svfprintf_r+0x14fe>
1001cf7a:	4655      	mov	r5, sl
1001cf7c:	3301      	adds	r3, #1
1001cf7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001cf80:	f8c8 2000 	str.w	r2, [r8]
1001cf84:	4434      	add	r4, r6
1001cf86:	2b07      	cmp	r3, #7
1001cf88:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001cf8c:	f8c8 6004 	str.w	r6, [r8, #4]
1001cf90:	f77f a821 	ble.w	1001bfd6 <_svfprintf_r+0x9ae>
1001cf94:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001cf96:	9807      	ldr	r0, [sp, #28]
1001cf98:	aa32      	add	r2, sp, #200	@ 0xc8
1001cf9a:	f004 fe5f 	bl	10021c5c <__ssprint_r>
1001cf9e:	2800      	cmp	r0, #0
1001cfa0:	f47e aff1 	bne.w	1001bf86 <_svfprintf_r+0x95e>
1001cfa4:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001cfa8:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001cfac:	f7ff b815 	b.w	1001bfda <_svfprintf_r+0x9b2>
1001cfb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001cfb2:	8993      	ldrh	r3, [r2, #12]
1001cfb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001cfb8:	8193      	strh	r3, [r2, #12]
1001cfba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001cfbe:	930a      	str	r3, [sp, #40]	@ 0x28
1001cfc0:	f7fe bc3e 	b.w	1001b840 <_svfprintf_r+0x218>
1001cfc4:	4a67      	ldr	r2, [pc, #412]	@ (1001d164 <_svfprintf_r+0x1b3c>)
1001cfc6:	9215      	str	r2, [sp, #84]	@ 0x54
1001cfc8:	f7fe bf82 	b.w	1001bed0 <_svfprintf_r+0x8a8>
1001cfcc:	2800      	cmp	r0, #0
1001cfce:	d13f      	bne.n	1001d050 <_svfprintf_r+0x1a28>
1001cfd0:	2230      	movs	r2, #48	@ 0x30
1001cfd2:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
1001cfd6:	f10d 02b3 	add.w	r2, sp, #179	@ 0xb3
1001cfda:	3330      	adds	r3, #48	@ 0x30
1001cfdc:	f802 3b01 	strb.w	r3, [r2], #1
1001cfe0:	ab2c      	add	r3, sp, #176	@ 0xb0
1001cfe2:	1ad3      	subs	r3, r2, r3
1001cfe4:	931c      	str	r3, [sp, #112]	@ 0x70
1001cfe6:	e5f3      	b.n	1001cbd0 <_svfprintf_r+0x15a8>
1001cfe8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001cfea:	9730      	str	r7, [sp, #192]	@ 0xc0
1001cfec:	7bd9      	ldrb	r1, [r3, #15]
1001cfee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1001cff2:	428a      	cmp	r2, r1
1001cff4:	4633      	mov	r3, r6
1001cff6:	d109      	bne.n	1001d00c <_svfprintf_r+0x19e4>
1001cff8:	2030      	movs	r0, #48	@ 0x30
1001cffa:	f803 0c01 	strb.w	r0, [r3, #-1]
1001cffe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001d000:	1e5a      	subs	r2, r3, #1
1001d002:	9230      	str	r2, [sp, #192]	@ 0xc0
1001d004:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1001d008:	4291      	cmp	r1, r2
1001d00a:	d0f6      	beq.n	1001cffa <_svfprintf_r+0x19d2>
1001d00c:	2a39      	cmp	r2, #57	@ 0x39
1001d00e:	bf0b      	itete	eq
1001d010:	9a12      	ldreq	r2, [sp, #72]	@ 0x48
1001d012:	3201      	addne	r2, #1
1001d014:	7a92      	ldrbeq	r2, [r2, #10]
1001d016:	b2d2      	uxtbne	r2, r2
1001d018:	f803 2c01 	strb.w	r2, [r3, #-1]
1001d01c:	4633      	mov	r3, r6
1001d01e:	e6a6      	b.n	1001cd6e <_svfprintf_r+0x1746>
1001d020:	9807      	ldr	r0, [sp, #28]
1001d022:	1c59      	adds	r1, r3, #1
1001d024:	f7f8 fb78 	bl	10015718 <_malloc_r>
1001d028:	4605      	mov	r5, r0
1001d02a:	2800      	cmp	r0, #0
1001d02c:	d0c0      	beq.n	1001cfb0 <_svfprintf_r+0x1988>
1001d02e:	900c      	str	r0, [sp, #48]	@ 0x30
1001d030:	e71c      	b.n	1001ce6c <_svfprintf_r+0x1844>
1001d032:	9b06      	ldr	r3, [sp, #24]
1001d034:	07de      	lsls	r6, r3, #31
1001d036:	f57f add4 	bpl.w	1001cbe2 <_svfprintf_r+0x15ba>
1001d03a:	e5d0      	b.n	1001cbde <_svfprintf_r+0x15b6>
1001d03c:	4b4a      	ldr	r3, [pc, #296]	@ (1001d168 <_svfprintf_r+0x1b40>)
1001d03e:	4a47      	ldr	r2, [pc, #284]	@ (1001d15c <_svfprintf_r+0x1b34>)
1001d040:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001d042:	2961      	cmp	r1, #97	@ 0x61
1001d044:	bf18      	it	ne
1001d046:	461a      	movne	r2, r3
1001d048:	2301      	movs	r3, #1
1001d04a:	9212      	str	r2, [sp, #72]	@ 0x48
1001d04c:	9329      	str	r3, [sp, #164]	@ 0xa4
1001d04e:	e637      	b.n	1001ccc0 <_svfprintf_r+0x1698>
1001d050:	f10d 02b2 	add.w	r2, sp, #178	@ 0xb2
1001d054:	e7c1      	b.n	1001cfda <_svfprintf_r+0x19b2>
1001d056:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1001d058:	4d44      	ldr	r5, [pc, #272]	@ (1001d16c <_svfprintf_r+0x1b44>)
1001d05a:	2b00      	cmp	r3, #0
1001d05c:	bfb4      	ite	lt
1001d05e:	222d      	movlt	r2, #45	@ 0x2d
1001d060:	f89d 209f 	ldrbge.w	r2, [sp, #159]	@ 0x9f
1001d064:	4b42      	ldr	r3, [pc, #264]	@ (1001d170 <_svfprintf_r+0x1b48>)
1001d066:	bfb8      	it	lt
1001d068:	f88d 209f 	strblt.w	r2, [sp, #159]	@ 0x9f
1001d06c:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
1001d070:	f7fe bcab 	b.w	1001b9ca <_svfprintf_r+0x3a2>
1001d074:	f1c3 0301 	rsb	r3, r3, #1
1001d078:	449b      	add	fp, r3
1001d07a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001d07e:	9306      	str	r3, [sp, #24]
1001d080:	2367      	movs	r3, #103	@ 0x67
1001d082:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001d086:	930e      	str	r3, [sp, #56]	@ 0x38
1001d088:	e6b9      	b.n	1001cdfe <_svfprintf_r+0x17d6>
1001d08a:	2367      	movs	r3, #103	@ 0x67
1001d08c:	930e      	str	r3, [sp, #56]	@ 0x38
1001d08e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1001d090:	780b      	ldrb	r3, [r1, #0]
1001d092:	2bff      	cmp	r3, #255	@ 0xff
1001d094:	f000 808e 	beq.w	1001d1b4 <_svfprintf_r+0x1b8c>
1001d098:	2400      	movs	r4, #0
1001d09a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1001d09c:	4620      	mov	r0, r4
1001d09e:	e003      	b.n	1001d0a8 <_svfprintf_r+0x1a80>
1001d0a0:	3001      	adds	r0, #1
1001d0a2:	3101      	adds	r1, #1
1001d0a4:	2bff      	cmp	r3, #255	@ 0xff
1001d0a6:	d008      	beq.n	1001d0ba <_svfprintf_r+0x1a92>
1001d0a8:	4293      	cmp	r3, r2
1001d0aa:	da06      	bge.n	1001d0ba <_svfprintf_r+0x1a92>
1001d0ac:	1ad2      	subs	r2, r2, r3
1001d0ae:	784b      	ldrb	r3, [r1, #1]
1001d0b0:	2b00      	cmp	r3, #0
1001d0b2:	d1f5      	bne.n	1001d0a0 <_svfprintf_r+0x1a78>
1001d0b4:	780b      	ldrb	r3, [r1, #0]
1001d0b6:	3401      	adds	r4, #1
1001d0b8:	e7f4      	b.n	1001d0a4 <_svfprintf_r+0x1a7c>
1001d0ba:	911b      	str	r1, [sp, #108]	@ 0x6c
1001d0bc:	9010      	str	r0, [sp, #64]	@ 0x40
1001d0be:	9414      	str	r4, [sp, #80]	@ 0x50
1001d0c0:	9212      	str	r2, [sp, #72]	@ 0x48
1001d0c2:	e9dd 3914 	ldrd	r3, r9, [sp, #80]	@ 0x50
1001d0c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1001d0c8:	4413      	add	r3, r2
1001d0ca:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
1001d0cc:	fb02 bb03 	mla	fp, r2, r3, fp
1001d0d0:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001d0d4:	9306      	str	r3, [sp, #24]
1001d0d6:	e590      	b.n	1001cbfa <_svfprintf_r+0x15d2>
1001d0d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001d0da:	18cf      	adds	r7, r1, r3
1001d0dc:	443a      	add	r2, r7
1001d0de:	2366      	movs	r3, #102	@ 0x66
1001d0e0:	4693      	mov	fp, r2
1001d0e2:	930e      	str	r3, [sp, #56]	@ 0x38
1001d0e4:	e727      	b.n	1001cf36 <_svfprintf_r+0x190e>
1001d0e6:	4693      	mov	fp, r2
1001d0e8:	e67c      	b.n	1001cde4 <_svfprintf_r+0x17bc>
1001d0ea:	9b08      	ldr	r3, [sp, #32]
1001d0ec:	9306      	str	r3, [sp, #24]
1001d0ee:	469b      	mov	fp, r3
1001d0f0:	2373      	movs	r3, #115	@ 0x73
1001d0f2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001d0f6:	960d      	str	r6, [sp, #52]	@ 0x34
1001d0f8:	9008      	str	r0, [sp, #32]
1001d0fa:	9014      	str	r0, [sp, #80]	@ 0x50
1001d0fc:	9010      	str	r0, [sp, #64]	@ 0x40
1001d0fe:	930e      	str	r3, [sp, #56]	@ 0x38
1001d100:	f7fe bc70 	b.w	1001b9e4 <_svfprintf_r+0x3bc>
1001d104:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001d108:	2200      	movs	r2, #0
1001d10a:	2300      	movs	r3, #0
1001d10c:	f005 fba0 	bl	10022850 <__aeabi_dcmpeq>
1001d110:	2800      	cmp	r0, #0
1001d112:	f47f ad06 	bne.w	1001cb22 <_svfprintf_r+0x14fa>
1001d116:	f1c6 0601 	rsb	r6, r6, #1
1001d11a:	9629      	str	r6, [sp, #164]	@ 0xa4
1001d11c:	e502      	b.n	1001cb24 <_svfprintf_r+0x14fc>
1001d11e:	f8dd 9018 	ldr.w	r9, [sp, #24]
1001d122:	f8dd b020 	ldr.w	fp, [sp, #32]
1001d126:	f7ff bbc1 	b.w	1001c8ac <_svfprintf_r+0x1284>
1001d12a:	4e0e      	ldr	r6, [pc, #56]	@ (1001d164 <_svfprintf_r+0x1b3c>)
1001d12c:	f7ff bae3 	b.w	1001c6f6 <_svfprintf_r+0x10ce>
1001d130:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001d132:	7863      	ldrb	r3, [r4, #1]
1001d134:	460c      	mov	r4, r1
1001d136:	f852 1b04 	ldr.w	r1, [r2], #4
1001d13a:	920d      	str	r2, [sp, #52]	@ 0x34
1001d13c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
1001d140:	9108      	str	r1, [sp, #32]
1001d142:	f7fe bac8 	b.w	1001b6d6 <_svfprintf_r+0xae>
1001d146:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001d14a:	b99b      	cbnz	r3, 1001d174 <_svfprintf_r+0x1b4c>
1001d14c:	f04f 0b01 	mov.w	fp, #1
1001d150:	2366      	movs	r3, #102	@ 0x66
1001d152:	f8cd b018 	str.w	fp, [sp, #24]
1001d156:	930e      	str	r3, [sp, #56]	@ 0x38
1001d158:	e651      	b.n	1001cdfe <_svfprintf_r+0x17d6>
1001d15a:	bf00      	nop
1001d15c:	1002c150 	.word	0x1002c150
1001d160:	1002c3ac 	.word	0x1002c3ac
1001d164:	1002c39c 	.word	0x1002c39c
1001d168:	1002c164 	.word	0x1002c164
1001d16c:	1002c148 	.word	0x1002c148
1001d170:	1002c14c 	.word	0x1002c14c
1001d174:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001d176:	f8dd b020 	ldr.w	fp, [sp, #32]
1001d17a:	1c5f      	adds	r7, r3, #1
1001d17c:	44bb      	add	fp, r7
1001d17e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001d182:	9306      	str	r3, [sp, #24]
1001d184:	2366      	movs	r3, #102	@ 0x66
1001d186:	930e      	str	r3, [sp, #56]	@ 0x38
1001d188:	e639      	b.n	1001cdfe <_svfprintf_r+0x17d6>
1001d18a:	2170      	movs	r1, #112	@ 0x70
1001d18c:	e4e9      	b.n	1001cb62 <_svfprintf_r+0x153a>
1001d18e:	4a0b      	ldr	r2, [pc, #44]	@ (1001d1bc <_svfprintf_r+0x1b94>)
1001d190:	9215      	str	r2, [sp, #84]	@ 0x54
1001d192:	e448      	b.n	1001ca26 <_svfprintf_r+0x13fe>
1001d194:	2302      	movs	r3, #2
1001d196:	931c      	str	r3, [sp, #112]	@ 0x70
1001d198:	e51a      	b.n	1001cbd0 <_svfprintf_r+0x15a8>
1001d19a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001d19c:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001d1a0:	8993      	ldrh	r3, [r2, #12]
1001d1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001d1a6:	8193      	strh	r3, [r2, #12]
1001d1a8:	f7ff b8db 	b.w	1001c362 <_svfprintf_r+0xd3a>
1001d1ac:	230c      	movs	r3, #12
1001d1ae:	f8cb 3000 	str.w	r3, [fp]
1001d1b2:	e702      	b.n	1001cfba <_svfprintf_r+0x1992>
1001d1b4:	2300      	movs	r3, #0
1001d1b6:	9314      	str	r3, [sp, #80]	@ 0x50
1001d1b8:	9310      	str	r3, [sp, #64]	@ 0x40
1001d1ba:	e782      	b.n	1001d0c2 <_svfprintf_r+0x1a9a>
1001d1bc:	1002c39c 	.word	0x1002c39c

1001d1c0 <__smakebuf_r>:
1001d1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001d1c4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1001d1c8:	460c      	mov	r4, r1
1001d1ca:	0799      	lsls	r1, r3, #30
1001d1cc:	b096      	sub	sp, #88	@ 0x58
1001d1ce:	d508      	bpl.n	1001d1e2 <__smakebuf_r+0x22>
1001d1d0:	f104 0343 	add.w	r3, r4, #67	@ 0x43
1001d1d4:	2201      	movs	r2, #1
1001d1d6:	e9c4 3204 	strd	r3, r2, [r4, #16]
1001d1da:	6023      	str	r3, [r4, #0]
1001d1dc:	b016      	add	sp, #88	@ 0x58
1001d1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001d1e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001d1e6:	2900      	cmp	r1, #0
1001d1e8:	4606      	mov	r6, r0
1001d1ea:	db26      	blt.n	1001d23a <__smakebuf_r+0x7a>
1001d1ec:	466a      	mov	r2, sp
1001d1ee:	f003 fceb 	bl	10020bc8 <_fstat_r>
1001d1f2:	2800      	cmp	r0, #0
1001d1f4:	db1f      	blt.n	1001d236 <__smakebuf_r+0x76>
1001d1f6:	9d01      	ldr	r5, [sp, #4]
1001d1f8:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
1001d1fc:	f5a5 5500 	sub.w	r5, r5, #8192	@ 0x2000
1001d200:	fab5 f585 	clz	r5, r5
1001d204:	f44f 6880 	mov.w	r8, #1024	@ 0x400
1001d208:	096d      	lsrs	r5, r5, #5
1001d20a:	f44f 6700 	mov.w	r7, #2048	@ 0x800
1001d20e:	4641      	mov	r1, r8
1001d210:	4630      	mov	r0, r6
1001d212:	f7f8 fa81 	bl	10015718 <_malloc_r>
1001d216:	b1e8      	cbz	r0, 1001d254 <__smakebuf_r+0x94>
1001d218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001d21c:	f8c4 8014 	str.w	r8, [r4, #20]
1001d220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001d224:	6020      	str	r0, [r4, #0]
1001d226:	6120      	str	r0, [r4, #16]
1001d228:	81a3      	strh	r3, [r4, #12]
1001d22a:	bb3d      	cbnz	r5, 1001d27c <__smakebuf_r+0xbc>
1001d22c:	433b      	orrs	r3, r7
1001d22e:	81a3      	strh	r3, [r4, #12]
1001d230:	b016      	add	sp, #88	@ 0x58
1001d232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001d236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001d23a:	f013 0580 	ands.w	r5, r3, #128	@ 0x80
1001d23e:	d019      	beq.n	1001d274 <__smakebuf_r+0xb4>
1001d240:	f04f 0840 	mov.w	r8, #64	@ 0x40
1001d244:	2500      	movs	r5, #0
1001d246:	4641      	mov	r1, r8
1001d248:	4630      	mov	r0, r6
1001d24a:	462f      	mov	r7, r5
1001d24c:	f7f8 fa64 	bl	10015718 <_malloc_r>
1001d250:	2800      	cmp	r0, #0
1001d252:	d1e1      	bne.n	1001d218 <__smakebuf_r+0x58>
1001d254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001d258:	059a      	lsls	r2, r3, #22
1001d25a:	d4bf      	bmi.n	1001d1dc <__smakebuf_r+0x1c>
1001d25c:	f023 0303 	bic.w	r3, r3, #3
1001d260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1001d264:	f043 0302 	orr.w	r3, r3, #2
1001d268:	2101      	movs	r1, #1
1001d26a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1001d26e:	81a3      	strh	r3, [r4, #12]
1001d270:	6022      	str	r2, [r4, #0]
1001d272:	e7b3      	b.n	1001d1dc <__smakebuf_r+0x1c>
1001d274:	f44f 6880 	mov.w	r8, #1024	@ 0x400
1001d278:	462f      	mov	r7, r5
1001d27a:	e7c8      	b.n	1001d20e <__smakebuf_r+0x4e>
1001d27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001d280:	4630      	mov	r0, r6
1001d282:	f003 fcb7 	bl	10020bf4 <_isatty_r>
1001d286:	b910      	cbnz	r0, 1001d28e <__smakebuf_r+0xce>
1001d288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001d28c:	e7ce      	b.n	1001d22c <__smakebuf_r+0x6c>
1001d28e:	89a3      	ldrh	r3, [r4, #12]
1001d290:	f023 0303 	bic.w	r3, r3, #3
1001d294:	f043 0301 	orr.w	r3, r3, #1
1001d298:	b21b      	sxth	r3, r3
1001d29a:	e7c7      	b.n	1001d22c <__smakebuf_r+0x6c>

1001d29c <__ssvfscanf_r>:
1001d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001d2a0:	f5ad 7d37 	sub.w	sp, sp, #732	@ 0x2dc
1001d2a4:	468a      	mov	sl, r1
1001d2a6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
1001d2aa:	af02      	add	r7, sp, #8
1001d2ac:	048c      	lsls	r4, r1, #18
1001d2ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
1001d2b0:	4615      	mov	r5, r2
1001d2b2:	637b      	str	r3, [r7, #52]	@ 0x34
1001d2b4:	d409      	bmi.n	1001d2ca <__ssvfscanf_r+0x2e>
1001d2b6:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
1001d2ba:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
1001d2be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
1001d2c2:	f8aa 100c 	strh.w	r1, [sl, #12]
1001d2c6:	f8ca 3064 	str.w	r3, [sl, #100]	@ 0x64
1001d2ca:	2300      	movs	r3, #0
1001d2cc:	461c      	mov	r4, r3
1001d2ce:	2208      	movs	r2, #8
1001d2d0:	4619      	mov	r1, r3
1001d2d2:	f107 0058 	add.w	r0, r7, #88	@ 0x58
1001d2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
1001d2d8:	46a1      	mov	r9, r4
1001d2da:	f7fc fbaf 	bl	10019a3c <memset>
1001d2de:	46a8      	mov	r8, r5
1001d2e0:	63fc      	str	r4, [r7, #60]	@ 0x3c
1001d2e2:	627c      	str	r4, [r7, #36]	@ 0x24
1001d2e4:	63bc      	str	r4, [r7, #56]	@ 0x38
1001d2e6:	643c      	str	r4, [r7, #64]	@ 0x40
1001d2e8:	4b83      	ldr	r3, [pc, #524]	@ (1001d4f8 <__ssvfscanf_r+0x25c>)
1001d2ea:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
1001d2ee:	f7fc fc6d 	bl	10019bcc <__locale_mb_cur_max>
1001d2f2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
1001d2f6:	9200      	str	r2, [sp, #0]
1001d2f8:	4603      	mov	r3, r0
1001d2fa:	4642      	mov	r2, r8
1001d2fc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d2fe:	f107 0154 	add.w	r1, r7, #84	@ 0x54
1001d302:	47a0      	blx	r4
1001d304:	2800      	cmp	r0, #0
1001d306:	db4c      	blt.n	1001d3a2 <__ssvfscanf_r+0x106>
1001d308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1001d30a:	4480      	add	r8, r0
1001d30c:	4606      	mov	r6, r0
1001d30e:	2b00      	cmp	r3, #0
1001d310:	f000 85a8 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001d314:	2801      	cmp	r0, #1
1001d316:	d053      	beq.n	1001d3c0 <__ssvfscanf_r+0x124>
1001d318:	2b25      	cmp	r3, #37	@ 0x25
1001d31a:	d05a      	beq.n	1001d3d2 <__ssvfscanf_r+0x136>
1001d31c:	2800      	cmp	r0, #0
1001d31e:	d0e3      	beq.n	1001d2e8 <__ssvfscanf_r+0x4c>
1001d320:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d324:	461a      	mov	r2, r3
1001d326:	eba8 0606 	sub.w	r6, r8, r6
1001d32a:	3801      	subs	r0, #1
1001d32c:	2a00      	cmp	r2, #0
1001d32e:	eb06 0400 	add.w	r4, r6, r0
1001d332:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
1001d336:	dd17      	ble.n	1001d368 <__ssvfscanf_r+0xcc>
1001d338:	f8da 3000 	ldr.w	r3, [sl]
1001d33c:	786a      	ldrb	r2, [r5, #1]
1001d33e:	7818      	ldrb	r0, [r3, #0]
1001d340:	4290      	cmp	r0, r2
1001d342:	f103 0301 	add.w	r3, r3, #1
1001d346:	f105 0101 	add.w	r1, r5, #1
1001d34a:	f040 858b 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001d34e:	f8da 2004 	ldr.w	r2, [sl, #4]
1001d352:	f8ca 3000 	str.w	r3, [sl]
1001d356:	3a01      	subs	r2, #1
1001d358:	428c      	cmp	r4, r1
1001d35a:	f8ca 2004 	str.w	r2, [sl, #4]
1001d35e:	f000 809b 	beq.w	1001d498 <__ssvfscanf_r+0x1fc>
1001d362:	2a00      	cmp	r2, #0
1001d364:	460d      	mov	r5, r1
1001d366:	dce7      	bgt.n	1001d338 <__ssvfscanf_r+0x9c>
1001d368:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d36a:	4651      	mov	r1, sl
1001d36c:	f004 fd36 	bl	10021ddc <__ssrefill_r>
1001d370:	2800      	cmp	r0, #0
1001d372:	d0e1      	beq.n	1001d338 <__ssvfscanf_r+0x9c>
1001d374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001d376:	2b00      	cmp	r3, #0
1001d378:	f001 81e3 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001d37c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1001d380:	f013 0f40 	tst.w	r3, #64	@ 0x40
1001d384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001d386:	f041 81dd 	bne.w	1001e744 <__ssvfscanf_r+0x14a8>
1001d38a:	b123      	cbz	r3, 1001d396 <__ssvfscanf_r+0xfa>
1001d38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001d38e:	6818      	ldr	r0, [r3, #0]
1001d390:	b108      	cbz	r0, 1001d396 <__ssvfscanf_r+0xfa>
1001d392:	f7f8 f9b9 	bl	10015708 <free>
1001d396:	6c38      	ldr	r0, [r7, #64]	@ 0x40
1001d398:	f507 7735 	add.w	r7, r7, #724	@ 0x2d4
1001d39c:	46bd      	mov	sp, r7
1001d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001d3a2:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
1001d3a6:	2208      	movs	r2, #8
1001d3a8:	2100      	movs	r1, #0
1001d3aa:	f107 0058 	add.w	r0, r7, #88	@ 0x58
1001d3ae:	657b      	str	r3, [r7, #84]	@ 0x54
1001d3b0:	f7fc fb44 	bl	10019a3c <memset>
1001d3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1001d3b6:	f108 0801 	add.w	r8, r8, #1
1001d3ba:	2b00      	cmp	r3, #0
1001d3bc:	f000 8552 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001d3c0:	4a4e      	ldr	r2, [pc, #312]	@ (1001d4fc <__ssvfscanf_r+0x260>)
1001d3c2:	5cd2      	ldrb	r2, [r2, r3]
1001d3c4:	0710      	lsls	r0, r2, #28
1001d3c6:	f100 855b 	bmi.w	1001de80 <__ssvfscanf_r+0xbe4>
1001d3ca:	2601      	movs	r6, #1
1001d3cc:	2b25      	cmp	r3, #37	@ 0x25
1001d3ce:	4630      	mov	r0, r6
1001d3d0:	d1a6      	bne.n	1001d320 <__ssvfscanf_r+0x84>
1001d3d2:	2400      	movs	r4, #0
1001d3d4:	f898 2000 	ldrb.w	r2, [r8]
1001d3d8:	4625      	mov	r5, r4
1001d3da:	f1a2 0325 	sub.w	r3, r2, #37	@ 0x25
1001d3de:	f108 0101 	add.w	r1, r8, #1
1001d3e2:	2b55      	cmp	r3, #85	@ 0x55
1001d3e4:	f200 8649 	bhi.w	1001e07a <__ssvfscanf_r+0xdde>
1001d3e8:	e8df f013 	tbh	[pc, r3, lsl #1]
1001d3ec:	0647073d 	.word	0x0647073d
1001d3f0:	06470647 	.word	0x06470647
1001d3f4:	07340647 	.word	0x07340647
1001d3f8:	06470647 	.word	0x06470647
1001d3fc:	06470647 	.word	0x06470647
1001d400:	064d0647 	.word	0x064d0647
1001d404:	064d064d 	.word	0x064d064d
1001d408:	064d064d 	.word	0x064d064d
1001d40c:	064d064d 	.word	0x064d064d
1001d410:	064d064d 	.word	0x064d064d
1001d414:	0647064d 	.word	0x0647064d
1001d418:	06470647 	.word	0x06470647
1001d41c:	06470647 	.word	0x06470647
1001d420:	06470647 	.word	0x06470647
1001d424:	06470658 	.word	0x06470658
1001d428:	04f4006b 	.word	0x04f4006b
1001d42c:	06580658 	.word	0x06580658
1001d430:	06470658 	.word	0x06470658
1001d434:	06470647 	.word	0x06470647
1001d438:	00620647 	.word	0x00620647
1001d43c:	06470647 	.word	0x06470647
1001d440:	064704ff 	.word	0x064704ff
1001d444:	06470647 	.word	0x06470647
1001d448:	064704b5 	.word	0x064704b5
1001d44c:	06470647 	.word	0x06470647
1001d450:	06980647 	.word	0x06980647
1001d454:	06470647 	.word	0x06470647
1001d458:	064706d9 	.word	0x064706d9
1001d45c:	06470647 	.word	0x06470647
1001d460:	06470647 	.word	0x06470647
1001d464:	06470658 	.word	0x06470658
1001d468:	04f6006d 	.word	0x04f6006d
1001d46c:	06580658 	.word	0x06580658
1001d470:	06ed0658 	.word	0x06ed0658
1001d474:	006206e4 	.word	0x006206e4
1001d478:	071e0647 	.word	0x071e0647
1001d47c:	06fd070f 	.word	0x06fd070f
1001d480:	06fa0501 	.word	0x06fa0501
1001d484:	06470647 	.word	0x06470647
1001d488:	005b04b7 	.word	0x005b04b7
1001d48c:	0647072b 	.word	0x0647072b
1001d490:	06980647 	.word	0x06980647
1001d494:	005b0647 	.word	0x005b0647
1001d498:	3502      	adds	r5, #2
1001d49a:	444d      	add	r5, r9
1001d49c:	eba5 0906 	sub.w	r9, r5, r6
1001d4a0:	e722      	b.n	1001d2e8 <__ssvfscanf_r+0x4c>
1001d4a2:	0723      	lsls	r3, r4, #28
1001d4a4:	f040 84de 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001d4a8:	f898 2001 	ldrb.w	r2, [r8, #1]
1001d4ac:	4688      	mov	r8, r1
1001d4ae:	e794      	b.n	1001d3da <__ssvfscanf_r+0x13e>
1001d4b0:	0722      	lsls	r2, r4, #28
1001d4b2:	f040 84d7 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001d4b6:	f898 2001 	ldrb.w	r2, [r8, #1]
1001d4ba:	f044 0402 	orr.w	r4, r4, #2
1001d4be:	4688      	mov	r8, r1
1001d4c0:	e78b      	b.n	1001d3da <__ssvfscanf_r+0x13e>
1001d4c2:	f044 0401 	orr.w	r4, r4, #1
1001d4c6:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
1001d4ca:	4688      	mov	r8, r1
1001d4cc:	f04f 0b00 	mov.w	fp, #0
1001d4d0:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d4d4:	2b00      	cmp	r3, #0
1001d4d6:	f340 8448 	ble.w	1001dd6a <__ssvfscanf_r+0xace>
1001d4da:	0660      	lsls	r0, r4, #25
1001d4dc:	f140 844f 	bpl.w	1001dd7e <__ssvfscanf_r+0xae2>
1001d4e0:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
1001d4e4:	2b03      	cmp	r3, #3
1001d4e6:	f200 8793 	bhi.w	1001e410 <__ssvfscanf_r+0x1174>
1001d4ea:	e8df f013 	tbh	[pc, r3, lsl #1]
1001d4ee:	02b1      	.short	0x02b1
1001d4f0:	014801f4 	.word	0x014801f4
1001d4f4:	0009      	.short	0x0009
1001d4f6:	bf00      	nop
1001d4f8:	20000474 	.word	0x20000474
1001d4fc:	1002c211 	.word	0x1002c211
1001d500:	f444 63f0 	orr.w	r3, r4, #1920	@ 0x780
1001d504:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d506:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d508:	f7fc fb66 	bl	10019bd8 <_localeconv_r>
1001d50c:	6803      	ldr	r3, [r0, #0]
1001d50e:	61fb      	str	r3, [r7, #28]
1001d510:	1e6b      	subs	r3, r5, #1
1001d512:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
1001d516:	f04f 0400 	mov.w	r4, #0
1001d51a:	bf88      	it	hi
1001d51c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
1001d520:	e9c7 4404 	strd	r4, r4, [r7, #16]
1001d524:	bf88      	it	hi
1001d526:	eb05 0c00 	addhi.w	ip, r5, r0
1001d52a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
1001d52e:	bf94      	ite	ls
1001d530:	f04f 0c00 	movls.w	ip, #0
1001d534:	f240 155d 	movwhi	r5, #349	@ 0x15d
1001d538:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001d53a:	647c      	str	r4, [r7, #68]	@ 0x44
1001d53c:	633c      	str	r4, [r7, #48]	@ 0x30
1001d53e:	61bc      	str	r4, [r7, #24]
1001d540:	469b      	mov	fp, r3
1001d542:	f8c7 c00c 	str.w	ip, [r7, #12]
1001d546:	f8c7 8020 	str.w	r8, [r7, #32]
1001d54a:	f8da 1000 	ldr.w	r1, [sl]
1001d54e:	780a      	ldrb	r2, [r1, #0]
1001d550:	f1a2 032b 	sub.w	r3, r2, #43	@ 0x2b
1001d554:	2b4e      	cmp	r3, #78	@ 0x4e
1001d556:	d850      	bhi.n	1001d5fa <__ssvfscanf_r+0x35e>
1001d558:	e8df f013 	tbh	[pc, r3, lsl #1]
1001d55c:	004f03b7 	.word	0x004f03b7
1001d560:	004f03b7 	.word	0x004f03b7
1001d564:	0099004f 	.word	0x0099004f
1001d568:	009d009d 	.word	0x009d009d
1001d56c:	009d009d 	.word	0x009d009d
1001d570:	009d009d 	.word	0x009d009d
1001d574:	009d009d 	.word	0x009d009d
1001d578:	004f009d 	.word	0x004f009d
1001d57c:	004f004f 	.word	0x004f004f
1001d580:	004f004f 	.word	0x004f004f
1001d584:	004f004f 	.word	0x004f004f
1001d588:	033b03ac 	.word	0x033b03ac
1001d58c:	033b033b 	.word	0x033b033b
1001d590:	03d003d9 	.word	0x03d003d9
1001d594:	004f004f 	.word	0x004f004f
1001d598:	004f03bf 	.word	0x004f03bf
1001d59c:	004f004f 	.word	0x004f004f
1001d5a0:	0393004f 	.word	0x0393004f
1001d5a4:	0372004f 	.word	0x0372004f
1001d5a8:	004f004f 	.word	0x004f004f
1001d5ac:	036d004f 	.word	0x036d004f
1001d5b0:	004f004f 	.word	0x004f004f
1001d5b4:	0356004f 	.word	0x0356004f
1001d5b8:	004f03a7 	.word	0x004f03a7
1001d5bc:	004f004f 	.word	0x004f004f
1001d5c0:	004f004f 	.word	0x004f004f
1001d5c4:	004f004f 	.word	0x004f004f
1001d5c8:	033b03ac 	.word	0x033b03ac
1001d5cc:	033b033b 	.word	0x033b033b
1001d5d0:	03d003d9 	.word	0x03d003d9
1001d5d4:	004f004f 	.word	0x004f004f
1001d5d8:	004f03bf 	.word	0x004f03bf
1001d5dc:	004f004f 	.word	0x004f004f
1001d5e0:	0393004f 	.word	0x0393004f
1001d5e4:	0372004f 	.word	0x0372004f
1001d5e8:	004f004f 	.word	0x004f004f
1001d5ec:	036d004f 	.word	0x036d004f
1001d5f0:	004f004f 	.word	0x004f004f
1001d5f4:	0356004f 	.word	0x0356004f
1001d5f8:	03a7      	.short	0x03a7
1001d5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d5fc:	059e      	lsls	r6, r3, #22
1001d5fe:	d568      	bpl.n	1001d6d2 <__ssvfscanf_r+0x436>
1001d600:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001d604:	f898 3000 	ldrb.w	r3, [r8]
1001d608:	4293      	cmp	r3, r2
1001d60a:	d162      	bne.n	1001d6d2 <__ssvfscanf_r+0x436>
1001d60c:	e9c7 5401 	strd	r5, r4, [r7, #4]
1001d610:	2600      	movs	r6, #0
1001d612:	4655      	mov	r5, sl
1001d614:	e006      	b.n	1001d624 <__ssvfscanf_r+0x388>
1001d616:	6029      	str	r1, [r5, #0]
1001d618:	f891 e000 	ldrb.w	lr, [r1]
1001d61c:	f898 0000 	ldrb.w	r0, [r8]
1001d620:	4586      	cmp	lr, r0
1001d622:	d11b      	bne.n	1001d65c <__ssvfscanf_r+0x3c0>
1001d624:	f818 0f01 	ldrb.w	r0, [r8, #1]!
1001d628:	46b2      	mov	sl, r6
1001d62a:	464c      	mov	r4, r9
1001d62c:	3101      	adds	r1, #1
1001d62e:	3601      	adds	r6, #1
1001d630:	f109 0901 	add.w	r9, r9, #1
1001d634:	2800      	cmp	r0, #0
1001d636:	f000 8693 	beq.w	1001e360 <__ssvfscanf_r+0x10c4>
1001d63a:	6868      	ldr	r0, [r5, #4]
1001d63c:	3801      	subs	r0, #1
1001d63e:	2800      	cmp	r0, #0
1001d640:	6068      	str	r0, [r5, #4]
1001d642:	dce8      	bgt.n	1001d616 <__ssvfscanf_r+0x37a>
1001d644:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d646:	4629      	mov	r1, r5
1001d648:	f004 fbc8 	bl	10021ddc <__ssrefill_r>
1001d64c:	b930      	cbnz	r0, 1001d65c <__ssvfscanf_r+0x3c0>
1001d64e:	6829      	ldr	r1, [r5, #0]
1001d650:	f898 0000 	ldrb.w	r0, [r8]
1001d654:	f891 e000 	ldrb.w	lr, [r1]
1001d658:	4586      	cmp	lr, r0
1001d65a:	d0e3      	beq.n	1001d624 <__ssvfscanf_r+0x388>
1001d65c:	4652      	mov	r2, sl
1001d65e:	46aa      	mov	sl, r5
1001d660:	e9d7 5807 	ldrd	r5, r8, [r7, #28]
1001d664:	4623      	mov	r3, r4
1001d666:	442e      	add	r6, r5
1001d668:	68bc      	ldr	r4, [r7, #8]
1001d66a:	623c      	str	r4, [r7, #32]
1001d66c:	4634      	mov	r4, r6
1001d66e:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
1001d670:	61fa      	str	r2, [r7, #28]
1001d672:	4699      	mov	r9, r3
1001d674:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1001d678:	4652      	mov	r2, sl
1001d67a:	4630      	mov	r0, r6
1001d67c:	f004 fb72 	bl	10021d64 <_sungetc_r>
1001d680:	42ac      	cmp	r4, r5
1001d682:	d1f7      	bne.n	1001d674 <__ssvfscanf_r+0x3d8>
1001d684:	69fa      	ldr	r2, [r7, #28]
1001d686:	6a3c      	ldr	r4, [r7, #32]
1001d688:	eba9 0902 	sub.w	r9, r9, r2
1001d68c:	e023      	b.n	1001d6d6 <__ssvfscanf_r+0x43a>
1001d68e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d690:	05d9      	lsls	r1, r3, #23
1001d692:	f100 854e 	bmi.w	1001e132 <__ssvfscanf_r+0xe96>
1001d696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d698:	191b      	adds	r3, r3, r4
1001d69a:	d11a      	bne.n	1001d6d2 <__ssvfscanf_r+0x436>
1001d69c:	461c      	mov	r4, r3
1001d69e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d6a0:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
1001d6a4:	e9c7 4311 	strd	r4, r3, [r7, #68]	@ 0x44
1001d6a8:	f80b 2b01 	strb.w	r2, [fp], #1
1001d6ac:	3d01      	subs	r5, #1
1001d6ae:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d6b2:	3b01      	subs	r3, #1
1001d6b4:	2b00      	cmp	r3, #0
1001d6b6:	f109 0901 	add.w	r9, r9, #1
1001d6ba:	f8ca 3004 	str.w	r3, [sl, #4]
1001d6be:	f340 83d4 	ble.w	1001de6a <__ssvfscanf_r+0xbce>
1001d6c2:	f8da 3000 	ldr.w	r3, [sl]
1001d6c6:	3301      	adds	r3, #1
1001d6c8:	f8ca 3000 	str.w	r3, [sl]
1001d6cc:	2d00      	cmp	r5, #0
1001d6ce:	f47f af3c 	bne.w	1001d54a <__ssvfscanf_r+0x2ae>
1001d6d2:	f8d7 8020 	ldr.w	r8, [r7, #32]
1001d6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d6d8:	2b00      	cmp	r3, #0
1001d6da:	f040 8337 	bne.w	1001dd4c <__ssvfscanf_r+0xab0>
1001d6de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d6e0:	3b01      	subs	r3, #1
1001d6e2:	2b01      	cmp	r3, #1
1001d6e4:	f240 83b1 	bls.w	1001de4a <__ssvfscanf_r+0xbae>
1001d6e8:	1e63      	subs	r3, r4, #1
1001d6ea:	2b06      	cmp	r3, #6
1001d6ec:	f240 864f 	bls.w	1001e38e <__ssvfscanf_r+0x10f2>
1001d6f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d6f2:	05d8      	lsls	r0, r3, #23
1001d6f4:	d51c      	bpl.n	1001d730 <__ssvfscanf_r+0x494>
1001d6f6:	0559      	lsls	r1, r3, #21
1001d6f8:	f101 8127 	bmi.w	1001e94a <__ssvfscanf_r+0x16ae>
1001d6fc:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
1001d700:	2965      	cmp	r1, #101	@ 0x65
1001d702:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
1001d706:	f109 34ff 	add.w	r4, r9, #4294967295	@ 0xffffffff
1001d70a:	d00b      	beq.n	1001d724 <__ssvfscanf_r+0x488>
1001d70c:	2945      	cmp	r1, #69	@ 0x45
1001d70e:	d009      	beq.n	1001d724 <__ssvfscanf_r+0x488>
1001d710:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d712:	4652      	mov	r2, sl
1001d714:	f004 fb26 	bl	10021d64 <_sungetc_r>
1001d718:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
1001d71c:	f1a9 0402 	sub.w	r4, r9, #2
1001d720:	f1ab 0302 	sub.w	r3, fp, #2
1001d724:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d726:	4652      	mov	r2, sl
1001d728:	46a1      	mov	r9, r4
1001d72a:	469b      	mov	fp, r3
1001d72c:	f004 fb1a 	bl	10021d64 <_sungetc_r>
1001d730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d732:	f013 0210 	ands.w	r2, r3, #16
1001d736:	f47f add7 	bne.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001d73a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
1001d73e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
1001d742:	f88b 2000 	strb.w	r2, [fp]
1001d746:	f000 850f 	beq.w	1001e168 <__ssvfscanf_r+0xecc>
1001d74a:	697b      	ldr	r3, [r7, #20]
1001d74c:	2b00      	cmp	r3, #0
1001d74e:	f041 8023 	bne.w	1001e798 <__ssvfscanf_r+0x14fc>
1001d752:	2200      	movs	r2, #0
1001d754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001d756:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d758:	f003 f838 	bl	100207cc <_strtod_r>
1001d75c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001d75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d760:	07d2      	lsls	r2, r2, #31
1001d762:	4605      	mov	r5, r0
1001d764:	460e      	mov	r6, r1
1001d766:	f103 0404 	add.w	r4, r3, #4
1001d76a:	f140 8629 	bpl.w	1001e3c0 <__ssvfscanf_r+0x1124>
1001d76e:	681b      	ldr	r3, [r3, #0]
1001d770:	e9c3 5600 	strd	r5, r6, [r3]
1001d774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001d776:	637c      	str	r4, [r7, #52]	@ 0x34
1001d778:	3301      	adds	r3, #1
1001d77a:	643b      	str	r3, [r7, #64]	@ 0x40
1001d77c:	e5b4      	b.n	1001d2e8 <__ssvfscanf_r+0x4c>
1001d77e:	1e6b      	subs	r3, r5, #1
1001d780:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
1001d784:	bf88      	it	hi
1001d786:	f46f 72ae 	mvnhi.w	r2, #348	@ 0x15c
1001d78a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
1001d78e:	bf8c      	ite	hi
1001d790:	18a9      	addhi	r1, r5, r2
1001d792:	2100      	movls	r1, #0
1001d794:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001d796:	461e      	mov	r6, r3
1001d798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1001d79a:	6479      	str	r1, [r7, #68]	@ 0x44
1001d79c:	4653      	mov	r3, sl
1001d79e:	f444 6458 	orr.w	r4, r4, #3456	@ 0xd80
1001d7a2:	46ca      	mov	sl, r9
1001d7a4:	bf88      	it	hi
1001d7a6:	f240 155d 	movwhi	r5, #349	@ 0x15d
1001d7aa:	f04f 0b00 	mov.w	fp, #0
1001d7ae:	4699      	mov	r9, r3
1001d7b0:	f8d9 0000 	ldr.w	r0, [r9]
1001d7b4:	f890 c000 	ldrb.w	ip, [r0]
1001d7b8:	f1ac 032b 	sub.w	r3, ip, #43	@ 0x2b
1001d7bc:	2b4d      	cmp	r3, #77	@ 0x4d
1001d7be:	d862      	bhi.n	1001d886 <__ssvfscanf_r+0x5ea>
1001d7c0:	e8df f013 	tbh	[pc, r3, lsl #1]
1001d7c4:	006102b5 	.word	0x006102b5
1001d7c8:	006102b5 	.word	0x006102b5
1001d7cc:	031e0061 	.word	0x031e0061
1001d7d0:	02150215 	.word	0x02150215
1001d7d4:	02150215 	.word	0x02150215
1001d7d8:	02150215 	.word	0x02150215
1001d7dc:	02bb0215 	.word	0x02bb0215
1001d7e0:	006102bb 	.word	0x006102bb
1001d7e4:	00610061 	.word	0x00610061
1001d7e8:	00610061 	.word	0x00610061
1001d7ec:	00610061 	.word	0x00610061
1001d7f0:	004e004e 	.word	0x004e004e
1001d7f4:	004e004e 	.word	0x004e004e
1001d7f8:	004e004e 	.word	0x004e004e
1001d7fc:	00610061 	.word	0x00610061
1001d800:	00610061 	.word	0x00610061
1001d804:	00610061 	.word	0x00610061
1001d808:	00610061 	.word	0x00610061
1001d80c:	00610061 	.word	0x00610061
1001d810:	00610061 	.word	0x00610061
1001d814:	00610061 	.word	0x00610061
1001d818:	00610061 	.word	0x00610061
1001d81c:	02a90061 	.word	0x02a90061
1001d820:	00610061 	.word	0x00610061
1001d824:	00610061 	.word	0x00610061
1001d828:	00610061 	.word	0x00610061
1001d82c:	00610061 	.word	0x00610061
1001d830:	004e004e 	.word	0x004e004e
1001d834:	004e004e 	.word	0x004e004e
1001d838:	004e004e 	.word	0x004e004e
1001d83c:	00610061 	.word	0x00610061
1001d840:	00610061 	.word	0x00610061
1001d844:	00610061 	.word	0x00610061
1001d848:	00610061 	.word	0x00610061
1001d84c:	00610061 	.word	0x00610061
1001d850:	00610061 	.word	0x00610061
1001d854:	00610061 	.word	0x00610061
1001d858:	00610061 	.word	0x00610061
1001d85c:	02a90061 	.word	0x02a90061
1001d860:	2a0a      	cmp	r2, #10
1001d862:	dd10      	ble.n	1001d886 <__ssvfscanf_r+0x5ea>
1001d864:	f424 6438 	bic.w	r4, r4, #2944	@ 0xb80
1001d868:	f806 cb01 	strb.w	ip, [r6], #1
1001d86c:	f8d9 3004 	ldr.w	r3, [r9, #4]
1001d870:	3b01      	subs	r3, #1
1001d872:	2b00      	cmp	r3, #0
1001d874:	f8c9 3004 	str.w	r3, [r9, #4]
1001d878:	f340 82dd 	ble.w	1001de36 <__ssvfscanf_r+0xb9a>
1001d87c:	3001      	adds	r0, #1
1001d87e:	f8c9 0000 	str.w	r0, [r9]
1001d882:	3d01      	subs	r5, #1
1001d884:	d194      	bne.n	1001d7b0 <__ssvfscanf_r+0x514>
1001d886:	464b      	mov	r3, r9
1001d888:	05e0      	lsls	r0, r4, #23
1001d88a:	46d1      	mov	r9, sl
1001d88c:	63ba      	str	r2, [r7, #56]	@ 0x38
1001d88e:	469a      	mov	sl, r3
1001d890:	d507      	bpl.n	1001d8a2 <__ssvfscanf_r+0x606>
1001d892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001d894:	429e      	cmp	r6, r3
1001d896:	f200 8479 	bhi.w	1001e18c <__ssvfscanf_r+0xef0>
1001d89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001d89c:	429e      	cmp	r6, r3
1001d89e:	f000 82e1 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001d8a2:	f014 0210 	ands.w	r2, r4, #16
1001d8a6:	d111      	bne.n	1001d8cc <__ssvfscanf_r+0x630>
1001d8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1001d8aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001d8ac:	6abd      	ldr	r5, [r7, #40]	@ 0x28
1001d8ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d8b0:	7032      	strb	r2, [r6, #0]
1001d8b2:	47a8      	blx	r5
1001d8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d8b6:	06a1      	lsls	r1, r4, #26
1001d8b8:	f103 0504 	add.w	r5, r3, #4
1001d8bc:	f140 844c 	bpl.w	1001e158 <__ssvfscanf_r+0xebc>
1001d8c0:	681b      	ldr	r3, [r3, #0]
1001d8c2:	6018      	str	r0, [r3, #0]
1001d8c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001d8c6:	637d      	str	r5, [r7, #52]	@ 0x34
1001d8c8:	3301      	adds	r3, #1
1001d8ca:	643b      	str	r3, [r7, #64]	@ 0x40
1001d8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001d8ce:	1af6      	subs	r6, r6, r3
1001d8d0:	445e      	add	r6, fp
1001d8d2:	44b1      	add	r9, r6
1001d8d4:	e508      	b.n	1001d2e8 <__ssvfscanf_r+0x4c>
1001d8d6:	2d00      	cmp	r5, #0
1001d8d8:	bf08      	it	eq
1001d8da:	f04f 35ff 	moveq.w	r5, #4294967295	@ 0xffffffff
1001d8de:	07e0      	lsls	r0, r4, #31
1001d8e0:	f004 0310 	and.w	r3, r4, #16
1001d8e4:	f140 82eb 	bpl.w	1001debe <__ssvfscanf_r+0xc22>
1001d8e8:	2b00      	cmp	r3, #0
1001d8ea:	f040 84bf 	bne.w	1001e26c <__ssvfscanf_r+0xfd0>
1001d8ee:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
1001d8f0:	0621      	lsls	r1, r4, #24
1001d8f2:	f856 2b04 	ldr.w	r2, [r6], #4
1001d8f6:	64ba      	str	r2, [r7, #72]	@ 0x48
1001d8f8:	f140 875d 	bpl.w	1001e7b6 <__ssvfscanf_r+0x151a>
1001d8fc:	647b      	str	r3, [r7, #68]	@ 0x44
1001d8fe:	2a00      	cmp	r2, #0
1001d900:	f000 82b0 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001d904:	2080      	movs	r0, #128	@ 0x80
1001d906:	f7f7 fef7 	bl	100156f8 <malloc>
1001d90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d90c:	4602      	mov	r2, r0
1001d90e:	2800      	cmp	r0, #0
1001d910:	f000 8717 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001d914:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d916:	6008      	str	r0, [r1, #0]
1001d918:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
1001d91a:	88c4      	ldrh	r4, [r0, #6]
1001d91c:	8881      	ldrh	r1, [r0, #4]
1001d91e:	428c      	cmp	r4, r1
1001d920:	f080 8607 	bcs.w	1001e532 <__ssvfscanf_r+0x1296>
1001d924:	6800      	ldr	r0, [r0, #0]
1001d926:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d928:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
1001d92c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
1001d92e:	637e      	str	r6, [r7, #52]	@ 0x34
1001d930:	3401      	adds	r4, #1
1001d932:	80cc      	strh	r4, [r1, #6]
1001d934:	4696      	mov	lr, r2
1001d936:	f04f 0c20 	mov.w	ip, #32
1001d93a:	f8da 1000 	ldr.w	r1, [sl]
1001d93e:	4eaf      	ldr	r6, [pc, #700]	@ (1001dbfc <__ssvfscanf_r+0x960>)
1001d940:	7809      	ldrb	r1, [r1, #0]
1001d942:	f816 b001 	ldrb.w	fp, [r6, r1]
1001d946:	f01b 0b08 	ands.w	fp, fp, #8
1001d94a:	d170      	bne.n	1001da2e <__ssvfscanf_r+0x792>
1001d94c:	f8c7 801c 	str.w	r8, [r7, #28]
1001d950:	623e      	str	r6, [r7, #32]
1001d952:	f8c7 e030 	str.w	lr, [r7, #48]	@ 0x30
1001d956:	462e      	mov	r6, r5
1001d958:	f8c7 c044 	str.w	ip, [r7, #68]	@ 0x44
1001d95c:	4698      	mov	r8, r3
1001d95e:	4615      	mov	r5, r2
1001d960:	f7fc f934 	bl	10019bcc <__locale_mb_cur_max>
1001d964:	4558      	cmp	r0, fp
1001d966:	f43f ad05 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001d96a:	e9da 3200 	ldrd	r3, r2, [sl]
1001d96e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
1001d972:	4608      	mov	r0, r1
1001d974:	62f9      	str	r1, [r7, #44]	@ 0x2c
1001d976:	f813 1b01 	ldrb.w	r1, [r3], #1
1001d97a:	f800 100b 	strb.w	r1, [r0, fp]
1001d97e:	3a01      	subs	r2, #1
1001d980:	e9ca 3200 	strd	r3, r2, [sl]
1001d984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1001d986:	2b03      	cmp	r3, #3
1001d988:	f10b 0b01 	add.w	fp, fp, #1
1001d98c:	f107 0468 	add.w	r4, r7, #104	@ 0x68
1001d990:	d102      	bne.n	1001d998 <__ssvfscanf_r+0x6fc>
1001d992:	6823      	ldr	r3, [r4, #0]
1001d994:	2b04      	cmp	r3, #4
1001d996:	d004      	beq.n	1001d9a2 <__ssvfscanf_r+0x706>
1001d998:	2208      	movs	r2, #8
1001d99a:	2100      	movs	r1, #0
1001d99c:	4620      	mov	r0, r4
1001d99e:	f7fc f84d 	bl	10019a3c <memset>
1001d9a2:	9400      	str	r4, [sp, #0]
1001d9a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1001d9a6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d9a8:	465b      	mov	r3, fp
1001d9aa:	4629      	mov	r1, r5
1001d9ac:	f003 fad4 	bl	10020f58 <_mbrtowc_r>
1001d9b0:	1c42      	adds	r2, r0, #1
1001d9b2:	6278      	str	r0, [r7, #36]	@ 0x24
1001d9b4:	f43f acde 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001d9b8:	2800      	cmp	r0, #0
1001d9ba:	f000 860c 	beq.w	1001e5d6 <__ssvfscanf_r+0x133a>
1001d9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1001d9c0:	3302      	adds	r3, #2
1001d9c2:	d01e      	beq.n	1001da02 <__ssvfscanf_r+0x766>
1001d9c4:	6828      	ldr	r0, [r5, #0]
1001d9c6:	f003 fb79 	bl	100210bc <iswspace>
1001d9ca:	2800      	cmp	r0, #0
1001d9cc:	f040 877a 	bne.w	1001e8c4 <__ssvfscanf_r+0x1628>
1001d9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1001d9d2:	2b03      	cmp	r3, #3
1001d9d4:	44d9      	add	r9, fp
1001d9d6:	d102      	bne.n	1001d9de <__ssvfscanf_r+0x742>
1001d9d8:	6823      	ldr	r3, [r4, #0]
1001d9da:	2b04      	cmp	r3, #4
1001d9dc:	d000      	beq.n	1001d9e0 <__ssvfscanf_r+0x744>
1001d9de:	3e01      	subs	r6, #1
1001d9e0:	f1b8 0f00 	cmp.w	r8, #0
1001d9e4:	f040 86e3 	bne.w	1001e7ae <__ssvfscanf_r+0x1512>
1001d9e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d9ea:	3504      	adds	r5, #4
1001d9ec:	2b00      	cmp	r3, #0
1001d9ee:	f000 86de 	beq.w	1001e7ae <__ssvfscanf_r+0x1512>
1001d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d9f4:	1aec      	subs	r4, r5, r3
1001d9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d9f8:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
1001d9fc:	f240 8794 	bls.w	1001e928 <__ssvfscanf_r+0x168c>
1001da00:	46c3      	mov	fp, r8
1001da02:	f8da 3004 	ldr.w	r3, [sl, #4]
1001da06:	2b00      	cmp	r3, #0
1001da08:	f340 8728 	ble.w	1001e85c <__ssvfscanf_r+0x15c0>
1001da0c:	f8da 3000 	ldr.w	r3, [sl]
1001da10:	6a3a      	ldr	r2, [r7, #32]
1001da12:	781b      	ldrb	r3, [r3, #0]
1001da14:	5cd3      	ldrb	r3, [r2, r3]
1001da16:	0718      	lsls	r0, r3, #28
1001da18:	d401      	bmi.n	1001da1e <__ssvfscanf_r+0x782>
1001da1a:	2e00      	cmp	r6, #0
1001da1c:	d1a0      	bne.n	1001d960 <__ssvfscanf_r+0x6c4>
1001da1e:	4643      	mov	r3, r8
1001da20:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
1001da24:	f8d7 c044 	ldr.w	ip, [r7, #68]	@ 0x44
1001da28:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001da2c:	462a      	mov	r2, r5
1001da2e:	2b00      	cmp	r3, #0
1001da30:	f47f ac5a 	bne.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001da34:	6013      	str	r3, [r2, #0]
1001da36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001da38:	b133      	cbz	r3, 1001da48 <__ssvfscanf_r+0x7ac>
1001da3a:	eba2 020e 	sub.w	r2, r2, lr
1001da3e:	1093      	asrs	r3, r2, #2
1001da40:	3301      	adds	r3, #1
1001da42:	459c      	cmp	ip, r3
1001da44:	f200 8611 	bhi.w	1001e66a <__ssvfscanf_r+0x13ce>
1001da48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001da4a:	3301      	adds	r3, #1
1001da4c:	643b      	str	r3, [r7, #64]	@ 0x40
1001da4e:	e44b      	b.n	1001d2e8 <__ssvfscanf_r+0x4c>
1001da50:	2d00      	cmp	r5, #0
1001da52:	bf08      	it	eq
1001da54:	f04f 35ff 	moveq.w	r5, #4294967295	@ 0xffffffff
1001da58:	07e6      	lsls	r6, r4, #31
1001da5a:	f004 0210 	and.w	r2, r4, #16
1001da5e:	f140 829d 	bpl.w	1001df9c <__ssvfscanf_r+0xd00>
1001da62:	2a00      	cmp	r2, #0
1001da64:	f040 843e 	bne.w	1001e2e4 <__ssvfscanf_r+0x1048>
1001da68:	6b79      	ldr	r1, [r7, #52]	@ 0x34
1001da6a:	0624      	lsls	r4, r4, #24
1001da6c:	f851 3b04 	ldr.w	r3, [r1], #4
1001da70:	637b      	str	r3, [r7, #52]	@ 0x34
1001da72:	6239      	str	r1, [r7, #32]
1001da74:	f140 86aa 	bpl.w	1001e7cc <__ssvfscanf_r+0x1530>
1001da78:	64ba      	str	r2, [r7, #72]	@ 0x48
1001da7a:	2b00      	cmp	r3, #0
1001da7c:	f000 81f2 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001da80:	2080      	movs	r0, #128	@ 0x80
1001da82:	f7f7 fe39 	bl	100156f8 <malloc>
1001da86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001da88:	4683      	mov	fp, r0
1001da8a:	2800      	cmp	r0, #0
1001da8c:	f000 8659 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001da90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001da92:	6018      	str	r0, [r3, #0]
1001da94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001da96:	88dc      	ldrh	r4, [r3, #6]
1001da98:	8899      	ldrh	r1, [r3, #4]
1001da9a:	428c      	cmp	r4, r1
1001da9c:	f080 8535 	bcs.w	1001e50a <__ssvfscanf_r+0x126e>
1001daa0:	6818      	ldr	r0, [r3, #0]
1001daa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001daa4:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
1001daa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001daaa:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
1001daae:	3401      	adds	r4, #1
1001dab0:	80dc      	strh	r4, [r3, #6]
1001dab2:	2320      	movs	r3, #32
1001dab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001dab6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
1001dab8:	f8c7 801c 	str.w	r8, [r7, #28]
1001dabc:	2600      	movs	r6, #0
1001dabe:	647a      	str	r2, [r7, #68]	@ 0x44
1001dac0:	46a8      	mov	r8, r5
1001dac2:	f7fc f883 	bl	10019bcc <__locale_mb_cur_max>
1001dac6:	42b0      	cmp	r0, r6
1001dac8:	f43f ac54 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001dacc:	e9da 3200 	ldrd	r3, r2, [sl]
1001dad0:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
1001dad4:	f813 1b01 	ldrb.w	r1, [r3], #1
1001dad8:	5581      	strb	r1, [r0, r6]
1001dada:	3a01      	subs	r2, #1
1001dadc:	2c03      	cmp	r4, #3
1001dade:	e9ca 3200 	strd	r3, r2, [sl]
1001dae2:	f106 0601 	add.w	r6, r6, #1
1001dae6:	f107 0560 	add.w	r5, r7, #96	@ 0x60
1001daea:	d102      	bne.n	1001daf2 <__ssvfscanf_r+0x856>
1001daec:	682b      	ldr	r3, [r5, #0]
1001daee:	2b04      	cmp	r3, #4
1001daf0:	d004      	beq.n	1001dafc <__ssvfscanf_r+0x860>
1001daf2:	2208      	movs	r2, #8
1001daf4:	2100      	movs	r1, #0
1001daf6:	4628      	mov	r0, r5
1001daf8:	f7fb ffa0 	bl	10019a3c <memset>
1001dafc:	9500      	str	r5, [sp, #0]
1001dafe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001db00:	4633      	mov	r3, r6
1001db02:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
1001db06:	4659      	mov	r1, fp
1001db08:	f003 fa26 	bl	10020f58 <_mbrtowc_r>
1001db0c:	4604      	mov	r4, r0
1001db0e:	1c60      	adds	r0, r4, #1
1001db10:	f43f ac30 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001db14:	2c00      	cmp	r4, #0
1001db16:	f040 83f2 	bne.w	1001e2fe <__ssvfscanf_r+0x1062>
1001db1a:	f8cb 4000 	str.w	r4, [fp]
1001db1e:	4623      	mov	r3, r4
1001db20:	2208      	movs	r2, #8
1001db22:	2100      	movs	r1, #0
1001db24:	f107 0068 	add.w	r0, r7, #104	@ 0x68
1001db28:	64bb      	str	r3, [r7, #72]	@ 0x48
1001db2a:	f7fb ff87 	bl	10019a3c <memset>
1001db2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001db30:	461a      	mov	r2, r3
1001db32:	4b33      	ldr	r3, [pc, #204]	@ (1001dc00 <__ssvfscanf_r+0x964>)
1001db34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
1001db38:	64bb      	str	r3, [r7, #72]	@ 0x48
1001db3a:	e9d7 c012 	ldrd	ip, r0, [r7, #72]	@ 0x48
1001db3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
1001db42:	f107 0150 	add.w	r1, r7, #80	@ 0x50
1001db46:	47e0      	blx	ip
1001db48:	2801      	cmp	r0, #1
1001db4a:	bf0c      	ite	eq
1001db4c:	f897 3050 	ldrbeq.w	r3, [r7, #80]	@ 0x50
1001db50:	2300      	movne	r3, #0
1001db52:	f107 0270 	add.w	r2, r7, #112	@ 0x70
1001db56:	5cd3      	ldrb	r3, [r2, r3]
1001db58:	2b00      	cmp	r3, #0
1001db5a:	f000 863e 	beq.w	1001e7da <__ssvfscanf_r+0x153e>
1001db5e:	2c03      	cmp	r4, #3
1001db60:	44b1      	add	r9, r6
1001db62:	f000 83d5 	beq.w	1001e310 <__ssvfscanf_r+0x1074>
1001db66:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
1001db6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001db6c:	2b00      	cmp	r3, #0
1001db6e:	f040 83c4 	bne.w	1001e2fa <__ssvfscanf_r+0x105e>
1001db72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001db74:	f10b 0b04 	add.w	fp, fp, #4
1001db78:	2b00      	cmp	r3, #0
1001db7a:	f000 83be 	beq.w	1001e2fa <__ssvfscanf_r+0x105e>
1001db7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001db80:	ebab 0503 	sub.w	r5, fp, r3
1001db84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001db86:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
1001db8a:	f240 83d8 	bls.w	1001e33e <__ssvfscanf_r+0x10a2>
1001db8e:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
1001db90:	f8da 3004 	ldr.w	r3, [sl, #4]
1001db94:	2b00      	cmp	r3, #0
1001db96:	f340 82a3 	ble.w	1001e0e0 <__ssvfscanf_r+0xe44>
1001db9a:	f1b8 0f00 	cmp.w	r8, #0
1001db9e:	d190      	bne.n	1001dac2 <__ssvfscanf_r+0x826>
1001dba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001dba2:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001dba6:	627c      	str	r4, [r7, #36]	@ 0x24
1001dba8:	b97a      	cbnz	r2, 1001dbca <__ssvfscanf_r+0x92e>
1001dbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001dbac:	f8cb 2000 	str.w	r2, [fp]
1001dbb0:	b143      	cbz	r3, 1001dbc4 <__ssvfscanf_r+0x928>
1001dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001dbb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001dbb6:	ebab 0303 	sub.w	r3, fp, r3
1001dbba:	109a      	asrs	r2, r3, #2
1001dbbc:	3201      	adds	r2, #1
1001dbbe:	4291      	cmp	r1, r2
1001dbc0:	f200 86a7 	bhi.w	1001e912 <__ssvfscanf_r+0x1676>
1001dbc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001dbc6:	3301      	adds	r3, #1
1001dbc8:	643b      	str	r3, [r7, #64]	@ 0x40
1001dbca:	6a3b      	ldr	r3, [r7, #32]
1001dbcc:	637b      	str	r3, [r7, #52]	@ 0x34
1001dbce:	f7ff bb8b 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001dbd2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001dbd4:	050e      	lsls	r6, r1, #20
1001dbd6:	f57f ad7c 	bpl.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dbda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001dbdc:	191b      	adds	r3, r3, r4
1001dbde:	f47f ad78 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dbe2:	461c      	mov	r4, r3
1001dbe4:	f421 73c0 	bic.w	r3, r1, #384	@ 0x180
1001dbe8:	e9c7 4311 	strd	r4, r3, [r7, #68]	@ 0x44
1001dbec:	e55c      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dbee:	4b05      	ldr	r3, [pc, #20]	@ (1001dc04 <__ssvfscanf_r+0x968>)
1001dbf0:	f424 6438 	bic.w	r4, r4, #2944	@ 0xb80
1001dbf4:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
1001dbf8:	e636      	b.n	1001d868 <__ssvfscanf_r+0x5cc>
1001dbfa:	bf00      	nop
1001dbfc:	1002c211 	.word	0x1002c211
1001dc00:	20000474 	.word	0x20000474
1001dc04:	1002c3c4 	.word	0x1002c3c4
1001dc08:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001dc0a:	f401 6318 	and.w	r3, r1, #2432	@ 0x980
1001dc0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1001dc12:	f47f ad5e 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001dc18:	2b01      	cmp	r3, #1
1001dc1a:	f47f ad5a 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dc1e:	f421 7380 	bic.w	r3, r1, #256	@ 0x100
1001dc22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
1001dc26:	64bb      	str	r3, [r7, #72]	@ 0x48
1001dc28:	2330      	movs	r3, #48	@ 0x30
1001dc2a:	f80b 3b01 	strb.w	r3, [fp], #1
1001dc2e:	2300      	movs	r3, #0
1001dc30:	3d01      	subs	r5, #1
1001dc32:	633b      	str	r3, [r7, #48]	@ 0x30
1001dc34:	e538      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dc36:	2c06      	cmp	r4, #6
1001dc38:	f47f ad4b 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dc3c:	2407      	movs	r4, #7
1001dc3e:	e533      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dc40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dc42:	051e      	lsls	r6, r3, #20
1001dc44:	f57f ad45 	bpl.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dc48:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001dc4a:	f401 63a0 	and.w	r3, r1, #1280	@ 0x500
1001dc4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
1001dc52:	d005      	beq.n	1001dc60 <__ssvfscanf_r+0x9c4>
1001dc54:	0549      	lsls	r1, r1, #21
1001dc56:	f57f ad3c 	bpl.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001dc5c:	2b00      	cmp	r3, #0
1001dc5e:	d048      	beq.n	1001dcf2 <__ssvfscanf_r+0xa56>
1001dc60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dc62:	059b      	lsls	r3, r3, #22
1001dc64:	d404      	bmi.n	1001dc70 <__ssvfscanf_r+0x9d4>
1001dc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001dc68:	69b9      	ldr	r1, [r7, #24]
1001dc6a:	1a5b      	subs	r3, r3, r1
1001dc6c:	e9c7 b304 	strd	fp, r3, [r7, #16]
1001dc70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dc72:	f423 6378 	bic.w	r3, r3, #3968	@ 0xf80
1001dc76:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
1001dc7a:	64bb      	str	r3, [r7, #72]	@ 0x48
1001dc7c:	2300      	movs	r3, #0
1001dc7e:	633b      	str	r3, [r7, #48]	@ 0x30
1001dc80:	e512      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dc82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001dc84:	2b00      	cmp	r3, #0
1001dc86:	f040 821d 	bne.w	1001e0c4 <__ssvfscanf_r+0xe28>
1001dc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001dc8c:	b933      	cbnz	r3, 1001dc9c <__ssvfscanf_r+0xa00>
1001dc8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dc90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
1001dc94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
1001dc98:	f000 8606 	beq.w	1001e8a8 <__ssvfscanf_r+0x160c>
1001dc9c:	2c01      	cmp	r4, #1
1001dc9e:	f000 820d 	beq.w	1001e0bc <__ssvfscanf_r+0xe20>
1001dca2:	2c04      	cmp	r4, #4
1001dca4:	f000 820a 	beq.w	1001e0bc <__ssvfscanf_r+0xe20>
1001dca8:	e513      	b.n	1001d6d2 <__ssvfscanf_r+0x436>
1001dcaa:	2c07      	cmp	r4, #7
1001dcac:	f47f ad11 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dcb0:	2408      	movs	r4, #8
1001dcb2:	e4f9      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dcb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dcb6:	0519      	lsls	r1, r3, #20
1001dcb8:	f100 820c 	bmi.w	1001e0d4 <__ssvfscanf_r+0xe38>
1001dcbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001dcbe:	2b01      	cmp	r3, #1
1001dcc0:	f47f ad07 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dcc4:	2302      	movs	r3, #2
1001dcc6:	647b      	str	r3, [r7, #68]	@ 0x44
1001dcc8:	e4ee      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dcca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dccc:	0618      	lsls	r0, r3, #24
1001dcce:	f57f ad00 	bpl.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dcd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1001dcd6:	64bb      	str	r3, [r7, #72]	@ 0x48
1001dcd8:	e4e6      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dcda:	2c00      	cmp	r4, #0
1001dcdc:	f040 81e9 	bne.w	1001e0b2 <__ssvfscanf_r+0xe16>
1001dce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001dce2:	bb8b      	cbnz	r3, 1001dd48 <__ssvfscanf_r+0xaac>
1001dce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dce6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
1001dcea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
1001dcee:	f000 85cd 	beq.w	1001e88c <__ssvfscanf_r+0x15f0>
1001dcf2:	2300      	movs	r3, #0
1001dcf4:	f8d7 8020 	ldr.w	r8, [r7, #32]
1001dcf8:	633b      	str	r3, [r7, #48]	@ 0x30
1001dcfa:	e4f0      	b.n	1001d6de <__ssvfscanf_r+0x442>
1001dcfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dcfe:	051b      	lsls	r3, r3, #20
1001dd00:	f100 81d1 	bmi.w	1001e0a6 <__ssvfscanf_r+0xe0a>
1001dd04:	2c02      	cmp	r4, #2
1001dd06:	f47f ace4 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001dd0a:	2403      	movs	r4, #3
1001dd0c:	e4cc      	b.n	1001d6a8 <__ssvfscanf_r+0x40c>
1001dd0e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001dd10:	0508      	lsls	r0, r1, #20
1001dd12:	d599      	bpl.n	1001dc48 <__ssvfscanf_r+0x9ac>
1001dd14:	e761      	b.n	1001dbda <__ssvfscanf_r+0x93e>
1001dd16:	f404 63c0 	and.w	r3, r4, #1536	@ 0x600
1001dd1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1001dd1e:	f47f adb2 	bne.w	1001d886 <__ssvfscanf_r+0x5ea>
1001dd22:	f424 7400 	bic.w	r4, r4, #512	@ 0x200
1001dd26:	f444 64a0 	orr.w	r4, r4, #1280	@ 0x500
1001dd2a:	2210      	movs	r2, #16
1001dd2c:	e59c      	b.n	1001d868 <__ssvfscanf_r+0x5cc>
1001dd2e:	0623      	lsls	r3, r4, #24
1001dd30:	f57f ada9 	bpl.w	1001d886 <__ssvfscanf_r+0x5ea>
1001dd34:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
1001dd38:	e596      	b.n	1001d868 <__ssvfscanf_r+0x5cc>
1001dd3a:	4b94      	ldr	r3, [pc, #592]	@ (1001df8c <__ssvfscanf_r+0xcf0>)
1001dd3c:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
1001dd40:	2a08      	cmp	r2, #8
1001dd42:	f73f ad8f 	bgt.w	1001d864 <__ssvfscanf_r+0x5c8>
1001dd46:	e59e      	b.n	1001d886 <__ssvfscanf_r+0x5ea>
1001dd48:	f8d7 8020 	ldr.w	r8, [r7, #32]
1001dd4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dd4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
1001dd52:	64bb      	str	r3, [r7, #72]	@ 0x48
1001dd54:	e4c3      	b.n	1001d6de <__ssvfscanf_r+0x442>
1001dd56:	f044 0401 	orr.w	r4, r4, #1
1001dd5a:	f8da 3004 	ldr.w	r3, [sl, #4]
1001dd5e:	2b00      	cmp	r3, #0
1001dd60:	4688      	mov	r8, r1
1001dd62:	f04f 0b02 	mov.w	fp, #2
1001dd66:	f73f abb8 	bgt.w	1001d4da <__ssvfscanf_r+0x23e>
1001dd6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001dd6c:	4651      	mov	r1, sl
1001dd6e:	f004 f835 	bl	10021ddc <__ssrefill_r>
1001dd72:	2800      	cmp	r0, #0
1001dd74:	f47f aafe 	bne.w	1001d374 <__ssvfscanf_r+0xd8>
1001dd78:	0660      	lsls	r0, r4, #25
1001dd7a:	f53f abb1 	bmi.w	1001d4e0 <__ssvfscanf_r+0x244>
1001dd7e:	f8da 2000 	ldr.w	r2, [sl]
1001dd82:	4e83      	ldr	r6, [pc, #524]	@ (1001df90 <__ssvfscanf_r+0xcf4>)
1001dd84:	7813      	ldrb	r3, [r2, #0]
1001dd86:	5cf3      	ldrb	r3, [r6, r3]
1001dd88:	0719      	lsls	r1, r3, #28
1001dd8a:	f57f aba9 	bpl.w	1001d4e0 <__ssvfscanf_r+0x244>
1001dd8e:	4633      	mov	r3, r6
1001dd90:	4656      	mov	r6, sl
1001dd92:	469a      	mov	sl, r3
1001dd94:	e005      	b.n	1001dda2 <__ssvfscanf_r+0xb06>
1001dd96:	6032      	str	r2, [r6, #0]
1001dd98:	7813      	ldrb	r3, [r2, #0]
1001dd9a:	f81a 3003 	ldrb.w	r3, [sl, r3]
1001dd9e:	071b      	lsls	r3, r3, #28
1001dda0:	d515      	bpl.n	1001ddce <__ssvfscanf_r+0xb32>
1001dda2:	6873      	ldr	r3, [r6, #4]
1001dda4:	3b01      	subs	r3, #1
1001dda6:	2b00      	cmp	r3, #0
1001dda8:	f109 0901 	add.w	r9, r9, #1
1001ddac:	6073      	str	r3, [r6, #4]
1001ddae:	f102 0201 	add.w	r2, r2, #1
1001ddb2:	dcf0      	bgt.n	1001dd96 <__ssvfscanf_r+0xafa>
1001ddb4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001ddb6:	4631      	mov	r1, r6
1001ddb8:	f004 f810 	bl	10021ddc <__ssrefill_r>
1001ddbc:	2800      	cmp	r0, #0
1001ddbe:	f040 82e3 	bne.w	1001e388 <__ssvfscanf_r+0x10ec>
1001ddc2:	6832      	ldr	r2, [r6, #0]
1001ddc4:	7813      	ldrb	r3, [r2, #0]
1001ddc6:	f81a 3003 	ldrb.w	r3, [sl, r3]
1001ddca:	071b      	lsls	r3, r3, #28
1001ddcc:	d4e9      	bmi.n	1001dda2 <__ssvfscanf_r+0xb06>
1001ddce:	46b2      	mov	sl, r6
1001ddd0:	f7ff bb86 	b.w	1001d4e0 <__ssvfscanf_r+0x244>
1001ddd4:	f044 0401 	orr.w	r4, r4, #1
1001ddd8:	4b6e      	ldr	r3, [pc, #440]	@ (1001df94 <__ssvfscanf_r+0xcf8>)
1001ddda:	62bb      	str	r3, [r7, #40]	@ 0x28
1001dddc:	230a      	movs	r3, #10
1001ddde:	4688      	mov	r8, r1
1001dde0:	63bb      	str	r3, [r7, #56]	@ 0x38
1001dde2:	f04f 0b03 	mov.w	fp, #3
1001dde6:	f7ff bb73 	b.w	1001d4d0 <__ssvfscanf_r+0x234>
1001ddea:	f044 0401 	orr.w	r4, r4, #1
1001ddee:	4b6a      	ldr	r3, [pc, #424]	@ (1001df98 <__ssvfscanf_r+0xcfc>)
1001ddf0:	62bb      	str	r3, [r7, #40]	@ 0x28
1001ddf2:	2308      	movs	r3, #8
1001ddf4:	4688      	mov	r8, r1
1001ddf6:	63bb      	str	r3, [r7, #56]	@ 0x38
1001ddf8:	f04f 0b03 	mov.w	fp, #3
1001ddfc:	f7ff bb68 	b.w	1001d4d0 <__ssvfscanf_r+0x234>
1001de00:	0523      	lsls	r3, r4, #20
1001de02:	f57f ad31 	bpl.w	1001d868 <__ssvfscanf_r+0x5cc>
1001de06:	b912      	cbnz	r2, 1001de0e <__ssvfscanf_r+0xb72>
1001de08:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
1001de0c:	2208      	movs	r2, #8
1001de0e:	0561      	lsls	r1, r4, #21
1001de10:	f100 819e 	bmi.w	1001e150 <__ssvfscanf_r+0xeb4>
1001de14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001de16:	f424 7460 	bic.w	r4, r4, #896	@ 0x380
1001de1a:	b113      	cbz	r3, 1001de22 <__ssvfscanf_r+0xb86>
1001de1c:	3b01      	subs	r3, #1
1001de1e:	647b      	str	r3, [r7, #68]	@ 0x44
1001de20:	3501      	adds	r5, #1
1001de22:	f8d9 3004 	ldr.w	r3, [r9, #4]
1001de26:	3b01      	subs	r3, #1
1001de28:	2b00      	cmp	r3, #0
1001de2a:	f10b 0b01 	add.w	fp, fp, #1
1001de2e:	f8c9 3004 	str.w	r3, [r9, #4]
1001de32:	f73f ad23 	bgt.w	1001d87c <__ssvfscanf_r+0x5e0>
1001de36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001de38:	64ba      	str	r2, [r7, #72]	@ 0x48
1001de3a:	4649      	mov	r1, r9
1001de3c:	f003 ffce 	bl	10021ddc <__ssrefill_r>
1001de40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001de42:	2800      	cmp	r0, #0
1001de44:	f43f ad1d 	beq.w	1001d882 <__ssvfscanf_r+0x5e6>
1001de48:	e51d      	b.n	1001d886 <__ssvfscanf_r+0x5ea>
1001de4a:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
1001de4c:	45ab      	cmp	fp, r5
1001de4e:	f240 8114 	bls.w	1001e07a <__ssvfscanf_r+0xdde>
1001de52:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001de54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001de58:	4652      	mov	r2, sl
1001de5a:	4620      	mov	r0, r4
1001de5c:	f003 ff82 	bl	10021d64 <_sungetc_r>
1001de60:	45ab      	cmp	fp, r5
1001de62:	d1f7      	bne.n	1001de54 <__ssvfscanf_r+0xbb8>
1001de64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001de66:	f7ff ba90 	b.w	1001d38a <__ssvfscanf_r+0xee>
1001de6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001de6c:	4651      	mov	r1, sl
1001de6e:	f003 ffb5 	bl	10021ddc <__ssrefill_r>
1001de72:	2800      	cmp	r0, #0
1001de74:	f47f ac2d 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001de78:	2d00      	cmp	r5, #0
1001de7a:	f47f ab66 	bne.w	1001d54a <__ssvfscanf_r+0x2ae>
1001de7e:	e428      	b.n	1001d6d2 <__ssvfscanf_r+0x436>
1001de80:	f8da 2004 	ldr.w	r2, [sl, #4]
1001de84:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001de86:	e010      	b.n	1001deaa <__ssvfscanf_r+0xc0e>
1001de88:	f8da 3000 	ldr.w	r3, [sl]
1001de8c:	4940      	ldr	r1, [pc, #256]	@ (1001df90 <__ssvfscanf_r+0xcf4>)
1001de8e:	781a      	ldrb	r2, [r3, #0]
1001de90:	5c8a      	ldrb	r2, [r1, r2]
1001de92:	0711      	lsls	r1, r2, #28
1001de94:	f103 0301 	add.w	r3, r3, #1
1001de98:	f57f aa26 	bpl.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001de9c:	f8da 2004 	ldr.w	r2, [sl, #4]
1001dea0:	3a01      	subs	r2, #1
1001dea2:	e9ca 3200 	strd	r3, r2, [sl]
1001dea6:	f109 0901 	add.w	r9, r9, #1
1001deaa:	2a00      	cmp	r2, #0
1001deac:	dcec      	bgt.n	1001de88 <__ssvfscanf_r+0xbec>
1001deae:	4651      	mov	r1, sl
1001deb0:	4620      	mov	r0, r4
1001deb2:	f003 ff93 	bl	10021ddc <__ssrefill_r>
1001deb6:	2800      	cmp	r0, #0
1001deb8:	d0e6      	beq.n	1001de88 <__ssvfscanf_r+0xbec>
1001deba:	f7ff ba15 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001debe:	2b00      	cmp	r3, #0
1001dec0:	f040 8395 	bne.w	1001e5ee <__ssvfscanf_r+0x1352>
1001dec4:	f8d7 b034 	ldr.w	fp, [r7, #52]	@ 0x34
1001dec8:	f014 0280 	ands.w	r2, r4, #128	@ 0x80
1001decc:	f85b 6b04 	ldr.w	r6, [fp], #4
1001ded0:	64be      	str	r6, [r7, #72]	@ 0x48
1001ded2:	f000 8446 	beq.w	1001e762 <__ssvfscanf_r+0x14c6>
1001ded6:	2e00      	cmp	r6, #0
1001ded8:	d0c4      	beq.n	1001de64 <__ssvfscanf_r+0xbc8>
1001deda:	2020      	movs	r0, #32
1001dedc:	f7f7 fc0c 	bl	100156f8 <malloc>
1001dee0:	4604      	mov	r4, r0
1001dee2:	2800      	cmp	r0, #0
1001dee4:	f000 842d 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001dee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001deea:	6030      	str	r0, [r6, #0]
1001deec:	889a      	ldrh	r2, [r3, #4]
1001deee:	88de      	ldrh	r6, [r3, #6]
1001def0:	4296      	cmp	r6, r2
1001def2:	f080 8273 	bcs.w	1001e3dc <__ssvfscanf_r+0x1140>
1001def6:	6818      	ldr	r0, [r3, #0]
1001def8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001defa:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
1001defe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001df00:	3601      	adds	r6, #1
1001df02:	80de      	strh	r6, [r3, #6]
1001df04:	2320      	movs	r3, #32
1001df06:	647b      	str	r3, [r7, #68]	@ 0x44
1001df08:	f8da 0000 	ldr.w	r0, [sl]
1001df0c:	4e20      	ldr	r6, [pc, #128]	@ (1001df90 <__ssvfscanf_r+0xcf4>)
1001df0e:	7802      	ldrb	r2, [r0, #0]
1001df10:	5cb2      	ldrb	r2, [r6, r2]
1001df12:	0713      	lsls	r3, r2, #28
1001df14:	f100 82e4 	bmi.w	1001e4e0 <__ssvfscanf_r+0x1244>
1001df18:	4643      	mov	r3, r8
1001df1a:	4622      	mov	r2, r4
1001df1c:	46b0      	mov	r8, r6
1001df1e:	4626      	mov	r6, r4
1001df20:	f8da 1004 	ldr.w	r1, [sl, #4]
1001df24:	3901      	subs	r1, #1
1001df26:	f8ca 1004 	str.w	r1, [sl, #4]
1001df2a:	1c41      	adds	r1, r0, #1
1001df2c:	f8ca 1000 	str.w	r1, [sl]
1001df30:	4634      	mov	r4, r6
1001df32:	7801      	ldrb	r1, [r0, #0]
1001df34:	f804 1b01 	strb.w	r1, [r4], #1
1001df38:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001df3a:	b121      	cbz	r1, 1001df46 <__ssvfscanf_r+0xcaa>
1001df3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
1001df3e:	1aa6      	subs	r6, r4, r2
1001df40:	428e      	cmp	r6, r1
1001df42:	f080 8419 	bcs.w	1001e778 <__ssvfscanf_r+0x14dc>
1001df46:	3d01      	subs	r5, #1
1001df48:	d00c      	beq.n	1001df64 <__ssvfscanf_r+0xcc8>
1001df4a:	f8da 1004 	ldr.w	r1, [sl, #4]
1001df4e:	2900      	cmp	r1, #0
1001df50:	4626      	mov	r6, r4
1001df52:	f340 8462 	ble.w	1001e81a <__ssvfscanf_r+0x157e>
1001df56:	f8da 0000 	ldr.w	r0, [sl]
1001df5a:	7801      	ldrb	r1, [r0, #0]
1001df5c:	f818 1001 	ldrb.w	r1, [r8, r1]
1001df60:	0709      	lsls	r1, r1, #28
1001df62:	d5dd      	bpl.n	1001df20 <__ssvfscanf_r+0xc84>
1001df64:	1aa2      	subs	r2, r4, r2
1001df66:	4698      	mov	r8, r3
1001df68:	4491      	add	r9, r2
1001df6a:	1c51      	adds	r1, r2, #1
1001df6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001df6e:	2200      	movs	r2, #0
1001df70:	7022      	strb	r2, [r4, #0]
1001df72:	b11b      	cbz	r3, 1001df7c <__ssvfscanf_r+0xce0>
1001df74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001df76:	428b      	cmp	r3, r1
1001df78:	f200 8445 	bhi.w	1001e806 <__ssvfscanf_r+0x156a>
1001df7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001df7e:	f8c7 b034 	str.w	fp, [r7, #52]	@ 0x34
1001df82:	3301      	adds	r3, #1
1001df84:	643b      	str	r3, [r7, #64]	@ 0x40
1001df86:	f7ff b9af 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001df8a:	bf00      	nop
1001df8c:	1002c3c4 	.word	0x1002c3c4
1001df90:	1002c211 	.word	0x1002c211
1001df94:	10020911 	.word	0x10020911
1001df98:	10020a49 	.word	0x10020a49
1001df9c:	2a00      	cmp	r2, #0
1001df9e:	f040 816e 	bne.w	1001e27e <__ssvfscanf_r+0xfe2>
1001dfa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001dfa4:	f014 0480 	ands.w	r4, r4, #128	@ 0x80
1001dfa8:	f853 bb04 	ldr.w	fp, [r3], #4
1001dfac:	64bb      	str	r3, [r7, #72]	@ 0x48
1001dfae:	f000 8409 	beq.w	1001e7c4 <__ssvfscanf_r+0x1528>
1001dfb2:	f1bb 0f00 	cmp.w	fp, #0
1001dfb6:	f43f af55 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001dfba:	2020      	movs	r0, #32
1001dfbc:	f7f7 fb9c 	bl	100156f8 <malloc>
1001dfc0:	4606      	mov	r6, r0
1001dfc2:	2800      	cmp	r0, #0
1001dfc4:	f000 83bd 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001dfc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001dfca:	f8cb 0000 	str.w	r0, [fp]
1001dfce:	88d4      	ldrh	r4, [r2, #6]
1001dfd0:	8893      	ldrh	r3, [r2, #4]
1001dfd2:	429c      	cmp	r4, r3
1001dfd4:	f080 8286 	bcs.w	1001e4e4 <__ssvfscanf_r+0x1248>
1001dfd8:	6810      	ldr	r0, [r2, #0]
1001dfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001dfdc:	f840 b024 	str.w	fp, [r0, r4, lsl #2]
1001dfe0:	3401      	adds	r4, #1
1001dfe2:	80dc      	strh	r4, [r3, #6]
1001dfe4:	2320      	movs	r3, #32
1001dfe6:	f8da 1000 	ldr.w	r1, [sl]
1001dfea:	f107 0270 	add.w	r2, r7, #112	@ 0x70
1001dfee:	7808      	ldrb	r0, [r1, #0]
1001dff0:	5c10      	ldrb	r0, [r2, r0]
1001dff2:	2800      	cmp	r0, #0
1001dff4:	f43f af36 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001dff8:	f8c7 9044 	str.w	r9, [r7, #68]	@ 0x44
1001dffc:	f8c7 8034 	str.w	r8, [r7, #52]	@ 0x34
1001e000:	46d9      	mov	r9, fp
1001e002:	4634      	mov	r4, r6
1001e004:	4698      	mov	r8, r3
1001e006:	4693      	mov	fp, r2
1001e008:	f8da 0004 	ldr.w	r0, [sl, #4]
1001e00c:	1c4b      	adds	r3, r1, #1
1001e00e:	3801      	subs	r0, #1
1001e010:	e9ca 3000 	strd	r3, r0, [sl]
1001e014:	4630      	mov	r0, r6
1001e016:	7809      	ldrb	r1, [r1, #0]
1001e018:	f800 1b01 	strb.w	r1, [r0], #1
1001e01c:	f1b9 0f00 	cmp.w	r9, #0
1001e020:	d002      	beq.n	1001e028 <__ssvfscanf_r+0xd8c>
1001e022:	1b06      	subs	r6, r0, r4
1001e024:	4546      	cmp	r6, r8
1001e026:	d26b      	bcs.n	1001e100 <__ssvfscanf_r+0xe64>
1001e028:	4606      	mov	r6, r0
1001e02a:	3d01      	subs	r5, #1
1001e02c:	d00b      	beq.n	1001e046 <__ssvfscanf_r+0xdaa>
1001e02e:	f8da 1004 	ldr.w	r1, [sl, #4]
1001e032:	2900      	cmp	r1, #0
1001e034:	f340 8171 	ble.w	1001e31a <__ssvfscanf_r+0x107e>
1001e038:	f8da 1000 	ldr.w	r1, [sl]
1001e03c:	7808      	ldrb	r0, [r1, #0]
1001e03e:	f81b 0000 	ldrb.w	r0, [fp, r0]
1001e042:	2800      	cmp	r0, #0
1001e044:	d1e0      	bne.n	1001e008 <__ssvfscanf_r+0xd6c>
1001e046:	1b34      	subs	r4, r6, r4
1001e048:	46cb      	mov	fp, r9
1001e04a:	4643      	mov	r3, r8
1001e04c:	f8d7 9044 	ldr.w	r9, [r7, #68]	@ 0x44
1001e050:	f8d7 8034 	ldr.w	r8, [r7, #52]	@ 0x34
1001e054:	f43f af06 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e058:	2200      	movs	r2, #0
1001e05a:	7032      	strb	r2, [r6, #0]
1001e05c:	f1bb 0f00 	cmp.w	fp, #0
1001e060:	d003      	beq.n	1001e06a <__ssvfscanf_r+0xdce>
1001e062:	1c61      	adds	r1, r4, #1
1001e064:	428b      	cmp	r3, r1
1001e066:	f200 83e5 	bhi.w	1001e834 <__ssvfscanf_r+0x1598>
1001e06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001e06c:	3301      	adds	r3, #1
1001e06e:	643b      	str	r3, [r7, #64]	@ 0x40
1001e070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e072:	637b      	str	r3, [r7, #52]	@ 0x34
1001e074:	44a1      	add	r9, r4
1001e076:	f7ff b937 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e07c:	2b00      	cmp	r3, #0
1001e07e:	f47f a986 	bne.w	1001d38e <__ssvfscanf_r+0xf2>
1001e082:	f7ff b988 	b.w	1001d396 <__ssvfscanf_r+0xfa>
1001e086:	f014 0f8f 	tst.w	r4, #143	@ 0x8f
1001e08a:	f47f aeeb 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e08e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
1001e092:	eb02 0545 	add.w	r5, r2, r5, lsl #1
1001e096:	3d30      	subs	r5, #48	@ 0x30
1001e098:	f7ff ba06 	b.w	1001d4a8 <__ssvfscanf_r+0x20c>
1001e09c:	4688      	mov	r8, r1
1001e09e:	f04f 0b04 	mov.w	fp, #4
1001e0a2:	f7ff ba15 	b.w	1001d4d0 <__ssvfscanf_r+0x234>
1001e0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e0a8:	191b      	adds	r3, r3, r4
1001e0aa:	f47f ae2b 	bne.w	1001dd04 <__ssvfscanf_r+0xa68>
1001e0ae:	f7ff baf5 	b.w	1001d69c <__ssvfscanf_r+0x400>
1001e0b2:	2c03      	cmp	r4, #3
1001e0b4:	d002      	beq.n	1001e0bc <__ssvfscanf_r+0xe20>
1001e0b6:	2c05      	cmp	r4, #5
1001e0b8:	f47f ab0b 	bne.w	1001d6d2 <__ssvfscanf_r+0x436>
1001e0bc:	3401      	adds	r4, #1
1001e0be:	b2e4      	uxtb	r4, r4
1001e0c0:	f7ff baf2 	b.w	1001d6a8 <__ssvfscanf_r+0x40c>
1001e0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e0c6:	2b02      	cmp	r3, #2
1001e0c8:	f47f ade8 	bne.w	1001dc9c <__ssvfscanf_r+0xa00>
1001e0cc:	2303      	movs	r3, #3
1001e0ce:	647b      	str	r3, [r7, #68]	@ 0x44
1001e0d0:	f7ff baea 	b.w	1001d6a8 <__ssvfscanf_r+0x40c>
1001e0d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e0d6:	191b      	adds	r3, r3, r4
1001e0d8:	f47f adf0 	bne.w	1001dcbc <__ssvfscanf_r+0xa20>
1001e0dc:	f7ff bade 	b.w	1001d69c <__ssvfscanf_r+0x400>
1001e0e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e0e2:	4651      	mov	r1, sl
1001e0e4:	f003 fe7a 	bl	10021ddc <__ssrefill_r>
1001e0e8:	2800      	cmp	r0, #0
1001e0ea:	f43f ad56 	beq.w	1001db9a <__ssvfscanf_r+0x8fe>
1001e0ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001e0f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001e0f4:	627c      	str	r4, [r7, #36]	@ 0x24
1001e0f6:	2e00      	cmp	r6, #0
1001e0f8:	f43f ad56 	beq.w	1001dba8 <__ssvfscanf_r+0x90c>
1001e0fc:	f7ff b93a 	b.w	1001d374 <__ssvfscanf_r+0xd8>
1001e100:	ea4f 0848 	mov.w	r8, r8, lsl #1
1001e104:	4620      	mov	r0, r4
1001e106:	4641      	mov	r1, r8
1001e108:	f7fa fcf4 	bl	10018af4 <realloc>
1001e10c:	4604      	mov	r4, r0
1001e10e:	2800      	cmp	r0, #0
1001e110:	f000 8317 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001e114:	4406      	add	r6, r0
1001e116:	f8c9 0000 	str.w	r0, [r9]
1001e11a:	e786      	b.n	1001e02a <__ssvfscanf_r+0xd8e>
1001e11c:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
1001e120:	4bb8      	ldr	r3, [pc, #736]	@ (1001e404 <__ssvfscanf_r+0x1168>)
1001e122:	62bb      	str	r3, [r7, #40]	@ 0x28
1001e124:	2310      	movs	r3, #16
1001e126:	4688      	mov	r8, r1
1001e128:	63bb      	str	r3, [r7, #56]	@ 0x38
1001e12a:	f04f 0b03 	mov.w	fp, #3
1001e12e:	f7ff b9cf 	b.w	1001d4d0 <__ssvfscanf_r+0x234>
1001e132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1001e136:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001e13a:	3301      	adds	r3, #1
1001e13c:	633b      	str	r3, [r7, #48]	@ 0x30
1001e13e:	68fb      	ldr	r3, [r7, #12]
1001e140:	2b00      	cmp	r3, #0
1001e142:	f43f aab3 	beq.w	1001d6ac <__ssvfscanf_r+0x410>
1001e146:	68fb      	ldr	r3, [r7, #12]
1001e148:	3b01      	subs	r3, #1
1001e14a:	60fb      	str	r3, [r7, #12]
1001e14c:	f7ff baaf 	b.w	1001d6ae <__ssvfscanf_r+0x412>
1001e150:	f424 64b0 	bic.w	r4, r4, #1408	@ 0x580
1001e154:	f7ff bb88 	b.w	1001d868 <__ssvfscanf_r+0x5cc>
1001e158:	0722      	lsls	r2, r4, #28
1001e15a:	f140 8213 	bpl.w	1001e584 <__ssvfscanf_r+0x12e8>
1001e15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e160:	681b      	ldr	r3, [r3, #0]
1001e162:	7018      	strb	r0, [r3, #0]
1001e164:	f7ff bbae 	b.w	1001d8c4 <__ssvfscanf_r+0x628>
1001e168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1001e16a:	69bb      	ldr	r3, [r7, #24]
1001e16c:	429a      	cmp	r2, r3
1001e16e:	f43f aaf0 	beq.w	1001d752 <__ssvfscanf_r+0x4b6>
1001e172:	1a9a      	subs	r2, r3, r2
1001e174:	f207 23c3 	addw	r3, r7, #707	@ 0x2c3
1001e178:	459b      	cmp	fp, r3
1001e17a:	bf28      	it	cs
1001e17c:	f207 2bc2 	addwcs	fp, r7, #706	@ 0x2c2
1001e180:	49a1      	ldr	r1, [pc, #644]	@ (1001e408 <__ssvfscanf_r+0x116c>)
1001e182:	4658      	mov	r0, fp
1001e184:	f002 fc62 	bl	10020a4c <sprintf>
1001e188:	f7ff bae3 	b.w	1001d752 <__ssvfscanf_r+0x4b6>
1001e18c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
1001e190:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e192:	4652      	mov	r2, sl
1001e194:	3e01      	subs	r6, #1
1001e196:	f003 fde5 	bl	10021d64 <_sungetc_r>
1001e19a:	f7ff bb7e 	b.w	1001d89a <__ssvfscanf_r+0x5fe>
1001e19e:	f107 0070 	add.w	r0, r7, #112	@ 0x70
1001e1a2:	f001 fae3 	bl	1001f76c <__sccl>
1001e1a6:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
1001e1aa:	4680      	mov	r8, r0
1001e1ac:	f04f 0b01 	mov.w	fp, #1
1001e1b0:	f7ff b98e 	b.w	1001d4d0 <__ssvfscanf_r+0x234>
1001e1b4:	4b95      	ldr	r3, [pc, #596]	@ (1001e40c <__ssvfscanf_r+0x1170>)
1001e1b6:	62bb      	str	r3, [r7, #40]	@ 0x28
1001e1b8:	2300      	movs	r3, #0
1001e1ba:	4688      	mov	r8, r1
1001e1bc:	63bb      	str	r3, [r7, #56]	@ 0x38
1001e1be:	f04f 0b03 	mov.w	fp, #3
1001e1c2:	f7ff b985 	b.w	1001d4d0 <__ssvfscanf_r+0x234>
1001e1c6:	0723      	lsls	r3, r4, #28
1001e1c8:	f47f ae4c 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e1cc:	f898 2001 	ldrb.w	r2, [r8, #1]
1001e1d0:	2a68      	cmp	r2, #104	@ 0x68
1001e1d2:	f000 81cf 	beq.w	1001e574 <__ssvfscanf_r+0x12d8>
1001e1d6:	f044 0404 	orr.w	r4, r4, #4
1001e1da:	4688      	mov	r8, r1
1001e1dc:	f7ff b8fd 	b.w	1001d3da <__ssvfscanf_r+0x13e>
1001e1e0:	f444 7408 	orr.w	r4, r4, #544	@ 0x220
1001e1e4:	e79c      	b.n	1001e120 <__ssvfscanf_r+0xe84>
1001e1e6:	06e5      	lsls	r5, r4, #27
1001e1e8:	f100 80f5 	bmi.w	1001e3d6 <__ssvfscanf_r+0x113a>
1001e1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e1ee:	0720      	lsls	r0, r4, #28
1001e1f0:	f853 2b04 	ldr.w	r2, [r3], #4
1001e1f4:	f100 81f8 	bmi.w	1001e5e8 <__ssvfscanf_r+0x134c>
1001e1f8:	0766      	lsls	r6, r4, #29
1001e1fa:	f140 8325 	bpl.w	1001e848 <__ssvfscanf_r+0x15ac>
1001e1fe:	f8a2 9000 	strh.w	r9, [r2]
1001e202:	637b      	str	r3, [r7, #52]	@ 0x34
1001e204:	4688      	mov	r8, r1
1001e206:	f7ff b86f 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e20a:	f014 038f 	ands.w	r3, r4, #143	@ 0x8f
1001e20e:	f47f ae29 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e212:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e214:	2a00      	cmp	r2, #0
1001e216:	f000 82a9 	beq.w	1001e76c <__ssvfscanf_r+0x14d0>
1001e21a:	f898 2001 	ldrb.w	r2, [r8, #1]
1001e21e:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
1001e222:	4688      	mov	r8, r1
1001e224:	f7ff b8d9 	b.w	1001d3da <__ssvfscanf_r+0x13e>
1001e228:	0722      	lsls	r2, r4, #28
1001e22a:	f47f ae1b 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e22e:	f898 2001 	ldrb.w	r2, [r8, #1]
1001e232:	2a6c      	cmp	r2, #108	@ 0x6c
1001e234:	f000 8196 	beq.w	1001e564 <__ssvfscanf_r+0x12c8>
1001e238:	f044 0401 	orr.w	r4, r4, #1
1001e23c:	4688      	mov	r8, r1
1001e23e:	f7ff b8cc 	b.w	1001d3da <__ssvfscanf_r+0x13e>
1001e242:	4b70      	ldr	r3, [pc, #448]	@ (1001e404 <__ssvfscanf_r+0x1168>)
1001e244:	62bb      	str	r3, [r7, #40]	@ 0x28
1001e246:	230a      	movs	r3, #10
1001e248:	4688      	mov	r8, r1
1001e24a:	63bb      	str	r3, [r7, #56]	@ 0x38
1001e24c:	f04f 0b03 	mov.w	fp, #3
1001e250:	f7ff b93e 	b.w	1001d4d0 <__ssvfscanf_r+0x234>
1001e254:	4325      	orrs	r5, r4
1001e256:	f47f ae05 	bne.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e25a:	f898 2001 	ldrb.w	r2, [r8, #1]
1001e25e:	2410      	movs	r4, #16
1001e260:	4688      	mov	r8, r1
1001e262:	f7ff b8ba 	b.w	1001d3da <__ssvfscanf_r+0x13e>
1001e266:	4688      	mov	r8, r1
1001e268:	f7ff b858 	b.w	1001d31c <__ssvfscanf_r+0x80>
1001e26c:	f04f 0c00 	mov.w	ip, #0
1001e270:	46e6      	mov	lr, ip
1001e272:	f8c7 c048 	str.w	ip, [r7, #72]	@ 0x48
1001e276:	f107 0254 	add.w	r2, r7, #84	@ 0x54
1001e27a:	f7ff bb5e 	b.w	1001d93a <__ssvfscanf_r+0x69e>
1001e27e:	f8da 3000 	ldr.w	r3, [sl]
1001e282:	f107 0270 	add.w	r2, r7, #112	@ 0x70
1001e286:	7819      	ldrb	r1, [r3, #0]
1001e288:	5c51      	ldrb	r1, [r2, r1]
1001e28a:	2900      	cmp	r1, #0
1001e28c:	f43f aef5 	beq.w	1001e07a <__ssvfscanf_r+0xdde>
1001e290:	3301      	adds	r3, #1
1001e292:	f8ca 3000 	str.w	r3, [sl]
1001e296:	f8da 3004 	ldr.w	r3, [sl, #4]
1001e29a:	2d01      	cmp	r5, #1
1001e29c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
1001e2a0:	f8ca 3004 	str.w	r3, [sl, #4]
1001e2a4:	d01b      	beq.n	1001e2de <__ssvfscanf_r+0x1042>
1001e2a6:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001e2a8:	4616      	mov	r6, r2
1001e2aa:	e010      	b.n	1001e2ce <__ssvfscanf_r+0x1032>
1001e2ac:	f8da 3000 	ldr.w	r3, [sl]
1001e2b0:	781a      	ldrb	r2, [r3, #0]
1001e2b2:	5cb2      	ldrb	r2, [r6, r2]
1001e2b4:	3301      	adds	r3, #1
1001e2b6:	b192      	cbz	r2, 1001e2de <__ssvfscanf_r+0x1042>
1001e2b8:	f8ca 3000 	str.w	r3, [sl]
1001e2bc:	f8da 3004 	ldr.w	r3, [sl, #4]
1001e2c0:	f10b 0b01 	add.w	fp, fp, #1
1001e2c4:	3b01      	subs	r3, #1
1001e2c6:	455d      	cmp	r5, fp
1001e2c8:	f8ca 3004 	str.w	r3, [sl, #4]
1001e2cc:	d007      	beq.n	1001e2de <__ssvfscanf_r+0x1042>
1001e2ce:	2b00      	cmp	r3, #0
1001e2d0:	dcec      	bgt.n	1001e2ac <__ssvfscanf_r+0x1010>
1001e2d2:	4651      	mov	r1, sl
1001e2d4:	4620      	mov	r0, r4
1001e2d6:	f003 fd81 	bl	10021ddc <__ssrefill_r>
1001e2da:	2800      	cmp	r0, #0
1001e2dc:	d0e6      	beq.n	1001e2ac <__ssvfscanf_r+0x1010>
1001e2de:	44d9      	add	r9, fp
1001e2e0:	f7ff b802 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e2e6:	623b      	str	r3, [r7, #32]
1001e2e8:	2300      	movs	r3, #0
1001e2ea:	e9c7 330b 	strd	r3, r3, [r7, #44]	@ 0x2c
1001e2ee:	637b      	str	r3, [r7, #52]	@ 0x34
1001e2f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
1001e2f4:	469b      	mov	fp, r3
1001e2f6:	f7ff bbde 	b.w	1001dab6 <__ssvfscanf_r+0x81a>
1001e2fa:	2600      	movs	r6, #0
1001e2fc:	e448      	b.n	1001db90 <__ssvfscanf_r+0x8f4>
1001e2fe:	1ca1      	adds	r1, r4, #2
1001e300:	f43f ac46 	beq.w	1001db90 <__ssvfscanf_r+0x8f4>
1001e304:	f8db 3000 	ldr.w	r3, [fp]
1001e308:	1c5a      	adds	r2, r3, #1
1001e30a:	f47f ac09 	bne.w	1001db20 <__ssvfscanf_r+0x884>
1001e30e:	e420      	b.n	1001db52 <__ssvfscanf_r+0x8b6>
1001e310:	682b      	ldr	r3, [r5, #0]
1001e312:	2b04      	cmp	r3, #4
1001e314:	f47f ac27 	bne.w	1001db66 <__ssvfscanf_r+0x8ca>
1001e318:	e427      	b.n	1001db6a <__ssvfscanf_r+0x8ce>
1001e31a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e31c:	4651      	mov	r1, sl
1001e31e:	f003 fd5d 	bl	10021ddc <__ssrefill_r>
1001e322:	2800      	cmp	r0, #0
1001e324:	f43f ae88 	beq.w	1001e038 <__ssvfscanf_r+0xd9c>
1001e328:	42a6      	cmp	r6, r4
1001e32a:	46cb      	mov	fp, r9
1001e32c:	4643      	mov	r3, r8
1001e32e:	f8d7 9044 	ldr.w	r9, [r7, #68]	@ 0x44
1001e332:	f8d7 8034 	ldr.w	r8, [r7, #52]	@ 0x34
1001e336:	f43f a81d 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001e33a:	1b34      	subs	r4, r6, r4
1001e33c:	e68c      	b.n	1001e058 <__ssvfscanf_r+0xdbc>
1001e33e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1001e340:	00d9      	lsls	r1, r3, #3
1001e342:	461e      	mov	r6, r3
1001e344:	f7fa fbd6 	bl	10018af4 <realloc>
1001e348:	6338      	str	r0, [r7, #48]	@ 0x30
1001e34a:	2800      	cmp	r0, #0
1001e34c:	f000 81f9 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001e350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1001e352:	0073      	lsls	r3, r6, #1
1001e354:	eb00 0b05 	add.w	fp, r0, r5
1001e358:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
1001e35a:	6010      	str	r0, [r2, #0]
1001e35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001e35e:	e417      	b.n	1001db90 <__ssvfscanf_r+0x8f4>
1001e360:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001e362:	f421 7120 	bic.w	r1, r1, #640	@ 0x280
1001e366:	4623      	mov	r3, r4
1001e368:	4658      	mov	r0, fp
1001e36a:	64b9      	str	r1, [r7, #72]	@ 0x48
1001e36c:	4632      	mov	r2, r6
1001e36e:	69f9      	ldr	r1, [r7, #28]
1001e370:	68bc      	ldr	r4, [r7, #8]
1001e372:	4699      	mov	r9, r3
1001e374:	46aa      	mov	sl, r5
1001e376:	687d      	ldr	r5, [r7, #4]
1001e378:	f002 fbec 	bl	10020b54 <stpncpy>
1001e37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001e37e:	61bb      	str	r3, [r7, #24]
1001e380:	3d01      	subs	r5, #1
1001e382:	4683      	mov	fp, r0
1001e384:	f7ff b993 	b.w	1001d6ae <__ssvfscanf_r+0x412>
1001e388:	46b2      	mov	sl, r6
1001e38a:	f7fe bff3 	b.w	1001d374 <__ssvfscanf_r+0xd8>
1001e38e:	2c02      	cmp	r4, #2
1001e390:	f240 82ea 	bls.w	1001e968 <__ssvfscanf_r+0x16cc>
1001e394:	2c03      	cmp	r4, #3
1001e396:	f43f a9ab 	beq.w	1001d6f0 <__ssvfscanf_r+0x454>
1001e39a:	3c04      	subs	r4, #4
1001e39c:	b2e5      	uxtb	r5, r4
1001e39e:	43ec      	mvns	r4, r5
1001e3a0:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
1001e3a2:	445c      	add	r4, fp
1001e3a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001e3a8:	4652      	mov	r2, sl
1001e3aa:	4630      	mov	r0, r6
1001e3ac:	f003 fcda 	bl	10021d64 <_sungetc_r>
1001e3b0:	455c      	cmp	r4, fp
1001e3b2:	d1f7      	bne.n	1001e3a4 <__ssvfscanf_r+0x1108>
1001e3b4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
1001e3b8:	eba9 0905 	sub.w	r9, r9, r5
1001e3bc:	f7ff b998 	b.w	1001d6f0 <__ssvfscanf_r+0x454>
1001e3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e3c2:	f8d3 b000 	ldr.w	fp, [r3]
1001e3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e3c8:	079a      	lsls	r2, r3, #30
1001e3ca:	f140 80f5 	bpl.w	1001e5b8 <__ssvfscanf_r+0x131c>
1001e3ce:	e9cb 5600 	strd	r5, r6, [fp]
1001e3d2:	f7ff b9cf 	b.w	1001d774 <__ssvfscanf_r+0x4d8>
1001e3d6:	4688      	mov	r8, r1
1001e3d8:	f7fe bf86 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e3dc:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
1001e3e0:	428a      	cmp	r2, r1
1001e3e2:	d864      	bhi.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e3e6:	3208      	adds	r2, #8
1001e3e8:	b292      	uxth	r2, r2
1001e3ea:	6818      	ldr	r0, [r3, #0]
1001e3ec:	647a      	str	r2, [r7, #68]	@ 0x44
1001e3ee:	0091      	lsls	r1, r2, #2
1001e3f0:	f7fa fb80 	bl	10018af4 <realloc>
1001e3f4:	2800      	cmp	r0, #0
1001e3f6:	d05a      	beq.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e3fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001e3fc:	809a      	strh	r2, [r3, #4]
1001e3fe:	6018      	str	r0, [r3, #0]
1001e400:	e57a      	b.n	1001def8 <__ssvfscanf_r+0xc5c>
1001e402:	bf00      	nop
1001e404:	10020a49 	.word	0x10020a49
1001e408:	1002c3bc 	.word	0x1002c3bc
1001e40c:	10020911 	.word	0x10020911
1001e410:	f004 0310 	and.w	r3, r4, #16
1001e414:	2d01      	cmp	r5, #1
1001e416:	bf38      	it	cc
1001e418:	2501      	movcc	r5, #1
1001e41a:	461a      	mov	r2, r3
1001e41c:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e41e:	f014 0301 	ands.w	r3, r4, #1
1001e422:	f040 812d 	bne.w	1001e680 <__ssvfscanf_r+0x13e4>
1001e426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e428:	2a00      	cmp	r2, #0
1001e42a:	f040 82b5 	bne.w	1001e998 <__ssvfscanf_r+0x16fc>
1001e42e:	f8d7 b034 	ldr.w	fp, [r7, #52]	@ 0x34
1001e432:	0623      	lsls	r3, r4, #24
1001e434:	f85b 6b04 	ldr.w	r6, [fp], #4
1001e438:	f140 82c5 	bpl.w	1001e9c6 <__ssvfscanf_r+0x172a>
1001e43c:	2e00      	cmp	r6, #0
1001e43e:	f43f ad11 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e442:	4628      	mov	r0, r5
1001e444:	f7f7 f958 	bl	100156f8 <malloc>
1001e448:	4604      	mov	r4, r0
1001e44a:	2800      	cmp	r0, #0
1001e44c:	f000 8179 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001e450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
1001e452:	6030      	str	r0, [r6, #0]
1001e454:	88cb      	ldrh	r3, [r1, #6]
1001e456:	888a      	ldrh	r2, [r1, #4]
1001e458:	4293      	cmp	r3, r2
1001e45a:	f0c0 8300 	bcc.w	1001ea5e <__ssvfscanf_r+0x17c2>
1001e45e:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
1001e462:	428a      	cmp	r2, r1
1001e464:	647b      	str	r3, [r7, #68]	@ 0x44
1001e466:	d822      	bhi.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e46a:	3208      	adds	r2, #8
1001e46c:	b292      	uxth	r2, r2
1001e46e:	6818      	ldr	r0, [r3, #0]
1001e470:	64ba      	str	r2, [r7, #72]	@ 0x48
1001e472:	0091      	lsls	r1, r2, #2
1001e474:	f7fa fb3e 	bl	10018af4 <realloc>
1001e478:	b1c8      	cbz	r0, 1001e4ae <__ssvfscanf_r+0x1212>
1001e47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e47c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e47e:	809a      	strh	r2, [r3, #4]
1001e480:	6018      	str	r0, [r3, #0]
1001e482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e484:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e486:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
1001e48a:	3301      	adds	r3, #1
1001e48c:	80d3      	strh	r3, [r2, #6]
1001e48e:	f8cd a000 	str.w	sl, [sp]
1001e492:	4621      	mov	r1, r4
1001e494:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e496:	462b      	mov	r3, r5
1001e498:	2201      	movs	r2, #1
1001e49a:	f003 fcbb 	bl	10021e14 <_sfread_r>
1001e49e:	4604      	mov	r4, r0
1001e4a0:	2800      	cmp	r0, #0
1001e4a2:	f040 82de 	bne.w	1001ea62 <__ssvfscanf_r+0x17c6>
1001e4a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001e4a8:	2b00      	cmp	r3, #0
1001e4aa:	f040 82e4 	bne.w	1001ea76 <__ssvfscanf_r+0x17da>
1001e4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e4b0:	88de      	ldrh	r6, [r3, #6]
1001e4b2:	6818      	ldr	r0, [r3, #0]
1001e4b4:	b17e      	cbz	r6, 1001e4d6 <__ssvfscanf_r+0x123a>
1001e4b6:	2400      	movs	r4, #0
1001e4b8:	1f05      	subs	r5, r0, #4
1001e4ba:	46a0      	mov	r8, r4
1001e4bc:	4681      	mov	r9, r0
1001e4be:	f855 3f04 	ldr.w	r3, [r5, #4]!
1001e4c2:	6818      	ldr	r0, [r3, #0]
1001e4c4:	f7f7 f920 	bl	10015708 <free>
1001e4c8:	3401      	adds	r4, #1
1001e4ca:	682b      	ldr	r3, [r5, #0]
1001e4cc:	42a6      	cmp	r6, r4
1001e4ce:	f8c3 8000 	str.w	r8, [r3]
1001e4d2:	d1f4      	bne.n	1001e4be <__ssvfscanf_r+0x1222>
1001e4d4:	4648      	mov	r0, r9
1001e4d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001e4da:	643b      	str	r3, [r7, #64]	@ 0x40
1001e4dc:	f7fe bf58 	b.w	1001d390 <__ssvfscanf_r+0xf4>
1001e4e0:	2101      	movs	r1, #1
1001e4e2:	e543      	b.n	1001df6c <__ssvfscanf_r+0xcd0>
1001e4e4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
1001e4e8:	4293      	cmp	r3, r2
1001e4ea:	d8e0      	bhi.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e4ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e4ee:	3308      	adds	r3, #8
1001e4f0:	b29b      	uxth	r3, r3
1001e4f2:	6810      	ldr	r0, [r2, #0]
1001e4f4:	647b      	str	r3, [r7, #68]	@ 0x44
1001e4f6:	0099      	lsls	r1, r3, #2
1001e4f8:	f7fa fafc 	bl	10018af4 <realloc>
1001e4fc:	2800      	cmp	r0, #0
1001e4fe:	d0d6      	beq.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e500:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e504:	8093      	strh	r3, [r2, #4]
1001e506:	6010      	str	r0, [r2, #0]
1001e508:	e567      	b.n	1001dfda <__ssvfscanf_r+0xd3e>
1001e50a:	f64f 70f6 	movw	r0, #65526	@ 0xfff6
1001e50e:	4281      	cmp	r1, r0
1001e510:	64ba      	str	r2, [r7, #72]	@ 0x48
1001e512:	d8cc      	bhi.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e514:	3108      	adds	r1, #8
1001e516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e518:	b28e      	uxth	r6, r1
1001e51a:	6818      	ldr	r0, [r3, #0]
1001e51c:	00b1      	lsls	r1, r6, #2
1001e51e:	f7fa fae9 	bl	10018af4 <realloc>
1001e522:	2800      	cmp	r0, #0
1001e524:	d0c3      	beq.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e52a:	809e      	strh	r6, [r3, #4]
1001e52c:	6018      	str	r0, [r3, #0]
1001e52e:	f7ff bab8 	b.w	1001daa2 <__ssvfscanf_r+0x806>
1001e532:	f64f 70f6 	movw	r0, #65526	@ 0xfff6
1001e536:	4281      	cmp	r1, r0
1001e538:	637b      	str	r3, [r7, #52]	@ 0x34
1001e53a:	647a      	str	r2, [r7, #68]	@ 0x44
1001e53c:	d8b7      	bhi.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e53e:	3108      	adds	r1, #8
1001e540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e542:	fa1f fb81 	uxth.w	fp, r1
1001e546:	6818      	ldr	r0, [r3, #0]
1001e548:	ea4f 018b 	mov.w	r1, fp, lsl #2
1001e54c:	f7fa fad2 	bl	10018af4 <realloc>
1001e550:	2800      	cmp	r0, #0
1001e552:	d0ac      	beq.n	1001e4ae <__ssvfscanf_r+0x1212>
1001e554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001e558:	f8a3 b004 	strh.w	fp, [r3, #4]
1001e55c:	6018      	str	r0, [r3, #0]
1001e55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e560:	f7ff b9e1 	b.w	1001d926 <__ssvfscanf_r+0x68a>
1001e564:	f898 2002 	ldrb.w	r2, [r8, #2]
1001e568:	f044 0402 	orr.w	r4, r4, #2
1001e56c:	f108 0802 	add.w	r8, r8, #2
1001e570:	f7fe bf33 	b.w	1001d3da <__ssvfscanf_r+0x13e>
1001e574:	f898 2002 	ldrb.w	r2, [r8, #2]
1001e578:	f044 0408 	orr.w	r4, r4, #8
1001e57c:	f108 0802 	add.w	r8, r8, #2
1001e580:	f7fe bf2b 	b.w	1001d3da <__ssvfscanf_r+0x13e>
1001e584:	0763      	lsls	r3, r4, #29
1001e586:	d46b      	bmi.n	1001e660 <__ssvfscanf_r+0x13c4>
1001e588:	f014 0201 	ands.w	r2, r4, #1
1001e58c:	f040 817b 	bne.w	1001e886 <__ssvfscanf_r+0x15ea>
1001e590:	07a4      	lsls	r4, r4, #30
1001e592:	f140 8178 	bpl.w	1001e886 <__ssvfscanf_r+0x15ea>
1001e596:	4bc1      	ldr	r3, [pc, #772]	@ (1001e89c <__ssvfscanf_r+0x1600>)
1001e598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
1001e59a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e59c:	4299      	cmp	r1, r3
1001e59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1001e5a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001e5a2:	f000 81f0 	beq.w	1001e986 <__ssvfscanf_r+0x16ea>
1001e5a6:	f002 fbf5 	bl	10020d94 <_strtoll_r>
1001e5aa:	460b      	mov	r3, r1
1001e5ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1001e5ae:	6811      	ldr	r1, [r2, #0]
1001e5b0:	e9c1 0300 	strd	r0, r3, [r1]
1001e5b4:	f7ff b986 	b.w	1001d8c4 <__ssvfscanf_r+0x628>
1001e5b8:	4602      	mov	r2, r0
1001e5ba:	460b      	mov	r3, r1
1001e5bc:	f004 f97a 	bl	100228b4 <__aeabi_dcmpun>
1001e5c0:	2800      	cmp	r0, #0
1001e5c2:	f040 80c7 	bne.w	1001e754 <__ssvfscanf_r+0x14b8>
1001e5c6:	4628      	mov	r0, r5
1001e5c8:	4631      	mov	r1, r6
1001e5ca:	f004 f9d1 	bl	10022970 <__aeabi_d2f>
1001e5ce:	f8cb 0000 	str.w	r0, [fp]
1001e5d2:	f7ff b8cf 	b.w	1001d774 <__ssvfscanf_r+0x4d8>
1001e5d6:	6028      	str	r0, [r5, #0]
1001e5d8:	f002 fd70 	bl	100210bc <iswspace>
1001e5dc:	2800      	cmp	r0, #0
1001e5de:	f040 8171 	bne.w	1001e8c4 <__ssvfscanf_r+0x1628>
1001e5e2:	44d9      	add	r9, fp
1001e5e4:	f7ff b9fb 	b.w	1001d9de <__ssvfscanf_r+0x742>
1001e5e8:	f882 9000 	strb.w	r9, [r2]
1001e5ec:	e609      	b.n	1001e202 <__ssvfscanf_r+0xf66>
1001e5ee:	f8da 3000 	ldr.w	r3, [sl]
1001e5f2:	4eab      	ldr	r6, [pc, #684]	@ (1001e8a0 <__ssvfscanf_r+0x1604>)
1001e5f4:	781a      	ldrb	r2, [r3, #0]
1001e5f6:	5cb2      	ldrb	r2, [r6, r2]
1001e5f8:	0711      	lsls	r1, r2, #28
1001e5fa:	f53e ae75 	bmi.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e5fe:	3301      	adds	r3, #1
1001e600:	f8ca 3000 	str.w	r3, [sl]
1001e604:	f8da 3004 	ldr.w	r3, [sl, #4]
1001e608:	2d01      	cmp	r5, #1
1001e60a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
1001e60e:	f8ca 3004 	str.w	r3, [sl, #4]
1001e612:	bf08      	it	eq
1001e614:	f109 0901 	addeq.w	r9, r9, #1
1001e618:	f43e ae66 	beq.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e61c:	f8d7 b04c 	ldr.w	fp, [r7, #76]	@ 0x4c
1001e620:	2401      	movs	r4, #1
1001e622:	e012      	b.n	1001e64a <__ssvfscanf_r+0x13ae>
1001e624:	f8da 3000 	ldr.w	r3, [sl]
1001e628:	781a      	ldrb	r2, [r3, #0]
1001e62a:	5cb2      	ldrb	r2, [r6, r2]
1001e62c:	0712      	lsls	r2, r2, #28
1001e62e:	f103 0301 	add.w	r3, r3, #1
1001e632:	d412      	bmi.n	1001e65a <__ssvfscanf_r+0x13be>
1001e634:	f8ca 3000 	str.w	r3, [sl]
1001e638:	f8da 3004 	ldr.w	r3, [sl, #4]
1001e63c:	3401      	adds	r4, #1
1001e63e:	3b01      	subs	r3, #1
1001e640:	42a5      	cmp	r5, r4
1001e642:	f8ca 3004 	str.w	r3, [sl, #4]
1001e646:	f000 813a 	beq.w	1001e8be <__ssvfscanf_r+0x1622>
1001e64a:	2b00      	cmp	r3, #0
1001e64c:	dcea      	bgt.n	1001e624 <__ssvfscanf_r+0x1388>
1001e64e:	4651      	mov	r1, sl
1001e650:	4658      	mov	r0, fp
1001e652:	f003 fbc3 	bl	10021ddc <__ssrefill_r>
1001e656:	2800      	cmp	r0, #0
1001e658:	d0e4      	beq.n	1001e624 <__ssvfscanf_r+0x1388>
1001e65a:	44a1      	add	r9, r4
1001e65c:	f7fe be44 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e662:	681b      	ldr	r3, [r3, #0]
1001e664:	8018      	strh	r0, [r3, #0]
1001e666:	f7ff b92d 	b.w	1001d8c4 <__ssvfscanf_r+0x628>
1001e66a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
1001e66c:	1d11      	adds	r1, r2, #4
1001e66e:	6820      	ldr	r0, [r4, #0]
1001e670:	f7fa fa40 	bl	10018af4 <realloc>
1001e674:	2800      	cmp	r0, #0
1001e676:	f43f a9e7 	beq.w	1001da48 <__ssvfscanf_r+0x7ac>
1001e67a:	6020      	str	r0, [r4, #0]
1001e67c:	f7ff b9e4 	b.w	1001da48 <__ssvfscanf_r+0x7ac>
1001e680:	2a00      	cmp	r2, #0
1001e682:	f040 8184 	bne.w	1001e98e <__ssvfscanf_r+0x16f2>
1001e686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e688:	461a      	mov	r2, r3
1001e68a:	0624      	lsls	r4, r4, #24
1001e68c:	f852 3b04 	ldr.w	r3, [r2], #4
1001e690:	637a      	str	r2, [r7, #52]	@ 0x34
1001e692:	f100 81ac 	bmi.w	1001e9ee <__ssvfscanf_r+0x1752>
1001e696:	469b      	mov	fp, r3
1001e698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e69a:	461a      	mov	r2, r3
1001e69c:	469c      	mov	ip, r3
1001e69e:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
1001e6a2:	2600      	movs	r6, #0
1001e6a4:	4664      	mov	r4, ip
1001e6a6:	647b      	str	r3, [r7, #68]	@ 0x44
1001e6a8:	4690      	mov	r8, r2
1001e6aa:	f7fb fa8f 	bl	10019bcc <__locale_mb_cur_max>
1001e6ae:	42b0      	cmp	r0, r6
1001e6b0:	f43e ae60 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001e6b4:	e9da 3200 	ldrd	r3, r2, [sl]
1001e6b8:	f813 1b01 	ldrb.w	r1, [r3], #1
1001e6bc:	3a01      	subs	r2, #1
1001e6be:	e9ca 3200 	strd	r3, r2, [sl]
1001e6c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1001e6c4:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
1001e6c8:	2a03      	cmp	r2, #3
1001e6ca:	5581      	strb	r1, [r0, r6]
1001e6cc:	f106 0301 	add.w	r3, r6, #1
1001e6d0:	f107 0668 	add.w	r6, r7, #104	@ 0x68
1001e6d4:	d102      	bne.n	1001e6dc <__ssvfscanf_r+0x1440>
1001e6d6:	6832      	ldr	r2, [r6, #0]
1001e6d8:	2a04      	cmp	r2, #4
1001e6da:	d006      	beq.n	1001e6ea <__ssvfscanf_r+0x144e>
1001e6dc:	2208      	movs	r2, #8
1001e6de:	2100      	movs	r1, #0
1001e6e0:	4630      	mov	r0, r6
1001e6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001e6e4:	f7fb f9aa 	bl	10019a3c <memset>
1001e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001e6ea:	9600      	str	r6, [sp, #0]
1001e6ec:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
1001e6f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001e6f4:	4659      	mov	r1, fp
1001e6f6:	f002 fc2f 	bl	10020f58 <_mbrtowc_r>
1001e6fa:	4602      	mov	r2, r0
1001e6fc:	6278      	str	r0, [r7, #36]	@ 0x24
1001e6fe:	1c50      	adds	r0, r2, #1
1001e700:	f43e ae38 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001e704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001e706:	2a00      	cmp	r2, #0
1001e708:	f040 81bd 	bne.w	1001ea86 <__ssvfscanf_r+0x17ea>
1001e70c:	4499      	add	r9, r3
1001e70e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e710:	3d01      	subs	r5, #1
1001e712:	2b00      	cmp	r3, #0
1001e714:	f040 81c5 	bne.w	1001eaa2 <__ssvfscanf_r+0x1806>
1001e718:	f8cb 3000 	str.w	r3, [fp]
1001e71c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e71e:	2b00      	cmp	r3, #0
1001e720:	f000 81f1 	beq.w	1001eb06 <__ssvfscanf_r+0x186a>
1001e724:	ebab 0604 	sub.w	r6, fp, r4
1001e728:	ebb8 0fa6 	cmp.w	r8, r6, asr #2
1001e72c:	f200 81eb 	bhi.w	1001eb06 <__ssvfscanf_r+0x186a>
1001e730:	4620      	mov	r0, r4
1001e732:	ea4f 01c8 	mov.w	r1, r8, lsl #3
1001e736:	f7fa f9dd 	bl	10018af4 <realloc>
1001e73a:	4604      	mov	r4, r0
1001e73c:	2800      	cmp	r0, #0
1001e73e:	f040 81dc 	bne.w	1001eafa <__ssvfscanf_r+0x185e>
1001e742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e744:	2b00      	cmp	r3, #0
1001e746:	f47f aeb2 	bne.w	1001e4ae <__ssvfscanf_r+0x1212>
1001e74a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001e74e:	643b      	str	r3, [r7, #64]	@ 0x40
1001e750:	f7fe be21 	b.w	1001d396 <__ssvfscanf_r+0xfa>
1001e754:	4853      	ldr	r0, [pc, #332]	@ (1001e8a4 <__ssvfscanf_r+0x1608>)
1001e756:	f002 fd0f 	bl	10021178 <nanf>
1001e75a:	f8cb 0000 	str.w	r0, [fp]
1001e75e:	f7ff b809 	b.w	1001d774 <__ssvfscanf_r+0x4d8>
1001e762:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
1001e764:	e9c7 2211 	strd	r2, r2, [r7, #68]	@ 0x44
1001e768:	f7ff bbce 	b.w	1001df08 <__ssvfscanf_r+0xc6c>
1001e76c:	b082      	sub	sp, #8
1001e76e:	e9cd 3302 	strd	r3, r3, [sp, #8]
1001e772:	ab02      	add	r3, sp, #8
1001e774:	63fb      	str	r3, [r7, #60]	@ 0x3c
1001e776:	e550      	b.n	1001e21a <__ssvfscanf_r+0xf7e>
1001e778:	637b      	str	r3, [r7, #52]	@ 0x34
1001e77a:	004b      	lsls	r3, r1, #1
1001e77c:	4610      	mov	r0, r2
1001e77e:	4619      	mov	r1, r3
1001e780:	647b      	str	r3, [r7, #68]	@ 0x44
1001e782:	f7fa f9b7 	bl	10018af4 <realloc>
1001e786:	4602      	mov	r2, r0
1001e788:	2800      	cmp	r0, #0
1001e78a:	d0da      	beq.n	1001e742 <__ssvfscanf_r+0x14a6>
1001e78c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e78e:	1984      	adds	r4, r0, r6
1001e790:	6018      	str	r0, [r3, #0]
1001e792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e794:	f7ff bbd7 	b.w	1001df46 <__ssvfscanf_r+0xcaa>
1001e798:	6938      	ldr	r0, [r7, #16]
1001e79a:	4601      	mov	r1, r0
1001e79c:	230a      	movs	r3, #10
1001e79e:	3101      	adds	r1, #1
1001e7a0:	4683      	mov	fp, r0
1001e7a2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e7a4:	f002 f8b4 	bl	10020910 <_strtol_r>
1001e7a8:	697b      	ldr	r3, [r7, #20]
1001e7aa:	1ac2      	subs	r2, r0, r3
1001e7ac:	e4e2      	b.n	1001e174 <__ssvfscanf_r+0xed8>
1001e7ae:	f04f 0b00 	mov.w	fp, #0
1001e7b2:	f7ff b926 	b.w	1001da02 <__ssvfscanf_r+0x766>
1001e7b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e7b8:	637e      	str	r6, [r7, #52]	@ 0x34
1001e7ba:	469c      	mov	ip, r3
1001e7bc:	469e      	mov	lr, r3
1001e7be:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e7c0:	f7ff b8bb 	b.w	1001d93a <__ssvfscanf_r+0x69e>
1001e7c4:	465e      	mov	r6, fp
1001e7c6:	4623      	mov	r3, r4
1001e7c8:	46a3      	mov	fp, r4
1001e7ca:	e40c      	b.n	1001dfe6 <__ssvfscanf_r+0xd4a>
1001e7cc:	f8d7 b034 	ldr.w	fp, [r7, #52]	@ 0x34
1001e7d0:	637a      	str	r2, [r7, #52]	@ 0x34
1001e7d2:	e9c7 220b 	strd	r2, r2, [r7, #44]	@ 0x2c
1001e7d6:	f7ff b96e 	b.w	1001dab6 <__ssvfscanf_r+0x81a>
1001e7da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001e7dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001e7e0:	627c      	str	r4, [r7, #36]	@ 0x24
1001e7e2:	2e00      	cmp	r6, #0
1001e7e4:	f43f a9e0 	beq.w	1001dba8 <__ssvfscanf_r+0x90c>
1001e7e8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001e7ea:	4615      	mov	r5, r2
1001e7ec:	3e01      	subs	r6, #1
1001e7ee:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
1001e7f2:	4652      	mov	r2, sl
1001e7f4:	5d99      	ldrb	r1, [r3, r6]
1001e7f6:	4620      	mov	r0, r4
1001e7f8:	f003 fab4 	bl	10021d64 <_sungetc_r>
1001e7fc:	2e00      	cmp	r6, #0
1001e7fe:	d1f5      	bne.n	1001e7ec <__ssvfscanf_r+0x1550>
1001e800:	462a      	mov	r2, r5
1001e802:	f7ff b9d1 	b.w	1001dba8 <__ssvfscanf_r+0x90c>
1001e806:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
1001e808:	6820      	ldr	r0, [r4, #0]
1001e80a:	f7fa f973 	bl	10018af4 <realloc>
1001e80e:	2800      	cmp	r0, #0
1001e810:	f43f abb4 	beq.w	1001df7c <__ssvfscanf_r+0xce0>
1001e814:	6020      	str	r0, [r4, #0]
1001e816:	f7ff bbb1 	b.w	1001df7c <__ssvfscanf_r+0xce0>
1001e81a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e81c:	4651      	mov	r1, sl
1001e81e:	e9c7 320c 	strd	r3, r2, [r7, #48]	@ 0x30
1001e822:	f003 fadb 	bl	10021ddc <__ssrefill_r>
1001e826:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	@ 0x30
1001e82a:	2800      	cmp	r0, #0
1001e82c:	f43f ab93 	beq.w	1001df56 <__ssvfscanf_r+0xcba>
1001e830:	f7ff bb98 	b.w	1001df64 <__ssvfscanf_r+0xcc8>
1001e834:	f8db 0000 	ldr.w	r0, [fp]
1001e838:	f7fa f95c 	bl	10018af4 <realloc>
1001e83c:	2800      	cmp	r0, #0
1001e83e:	f43f ac14 	beq.w	1001e06a <__ssvfscanf_r+0xdce>
1001e842:	f8cb 0000 	str.w	r0, [fp]
1001e846:	e410      	b.n	1001e06a <__ssvfscanf_r+0xdce>
1001e848:	07e5      	lsls	r5, r4, #31
1001e84a:	d435      	bmi.n	1001e8b8 <__ssvfscanf_r+0x161c>
1001e84c:	07a4      	lsls	r4, r4, #30
1001e84e:	d533      	bpl.n	1001e8b8 <__ssvfscanf_r+0x161c>
1001e850:	ea4f 70e9 	mov.w	r0, r9, asr #31
1001e854:	f8c2 9000 	str.w	r9, [r2]
1001e858:	6050      	str	r0, [r2, #4]
1001e85a:	e4d2      	b.n	1001e202 <__ssvfscanf_r+0xf66>
1001e85c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e85e:	4651      	mov	r1, sl
1001e860:	f003 fabc 	bl	10021ddc <__ssrefill_r>
1001e864:	2800      	cmp	r0, #0
1001e866:	f43f a8d1 	beq.w	1001da0c <__ssvfscanf_r+0x770>
1001e86a:	4643      	mov	r3, r8
1001e86c:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
1001e870:	f8d7 c044 	ldr.w	ip, [r7, #68]	@ 0x44
1001e874:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001e878:	462a      	mov	r2, r5
1001e87a:	f1bb 0f00 	cmp.w	fp, #0
1001e87e:	f47e ad79 	bne.w	1001d374 <__ssvfscanf_r+0xd8>
1001e882:	f7ff b8d4 	b.w	1001da2e <__ssvfscanf_r+0x792>
1001e886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e888:	f7ff b81a 	b.w	1001d8c0 <__ssvfscanf_r+0x624>
1001e88c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e88e:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
1001e892:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e894:	2401      	movs	r4, #1
1001e896:	f7fe bf07 	b.w	1001d6a8 <__ssvfscanf_r+0x40c>
1001e89a:	bf00      	nop
1001e89c:	10020a49 	.word	0x10020a49
1001e8a0:	1002c211 	.word	0x1002c211
1001e8a4:	1002c5b4 	.word	0x1002c5b4
1001e8a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e8aa:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
1001e8ae:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e8b0:	2301      	movs	r3, #1
1001e8b2:	647b      	str	r3, [r7, #68]	@ 0x44
1001e8b4:	f7fe bef8 	b.w	1001d6a8 <__ssvfscanf_r+0x40c>
1001e8b8:	f8c2 9000 	str.w	r9, [r2]
1001e8bc:	e4a1      	b.n	1001e202 <__ssvfscanf_r+0xf66>
1001e8be:	44a9      	add	r9, r5
1001e8c0:	f7fe bd12 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e8c4:	4643      	mov	r3, r8
1001e8c6:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
1001e8ca:	f8d7 c044 	ldr.w	ip, [r7, #68]	@ 0x44
1001e8ce:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001e8d2:	462a      	mov	r2, r5
1001e8d4:	f1bb 0f00 	cmp.w	fp, #0
1001e8d8:	f43f a8a9 	beq.w	1001da2e <__ssvfscanf_r+0x792>
1001e8dc:	633d      	str	r5, [r7, #48]	@ 0x30
1001e8de:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001e8e0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
1001e8e2:	f8c7 9044 	str.w	r9, [r7, #68]	@ 0x44
1001e8e6:	465e      	mov	r6, fp
1001e8e8:	46f1      	mov	r9, lr
1001e8ea:	46c3      	mov	fp, r8
1001e8ec:	623b      	str	r3, [r7, #32]
1001e8ee:	46e0      	mov	r8, ip
1001e8f0:	3e01      	subs	r6, #1
1001e8f2:	4652      	mov	r2, sl
1001e8f4:	5da9      	ldrb	r1, [r5, r6]
1001e8f6:	4620      	mov	r0, r4
1001e8f8:	f003 fa34 	bl	10021d64 <_sungetc_r>
1001e8fc:	2e00      	cmp	r6, #0
1001e8fe:	d1f7      	bne.n	1001e8f0 <__ssvfscanf_r+0x1654>
1001e900:	46ce      	mov	lr, r9
1001e902:	46c4      	mov	ip, r8
1001e904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1001e906:	f8d7 9044 	ldr.w	r9, [r7, #68]	@ 0x44
1001e90a:	6a3b      	ldr	r3, [r7, #32]
1001e90c:	46d8      	mov	r8, fp
1001e90e:	f7ff b88e 	b.w	1001da2e <__ssvfscanf_r+0x792>
1001e912:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
1001e914:	1d19      	adds	r1, r3, #4
1001e916:	6820      	ldr	r0, [r4, #0]
1001e918:	f7fa f8ec 	bl	10018af4 <realloc>
1001e91c:	2800      	cmp	r0, #0
1001e91e:	f43f a951 	beq.w	1001dbc4 <__ssvfscanf_r+0x928>
1001e922:	6020      	str	r0, [r4, #0]
1001e924:	f7ff b94e 	b.w	1001dbc4 <__ssvfscanf_r+0x928>
1001e928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1001e92a:	00d9      	lsls	r1, r3, #3
1001e92c:	f7fa f8e2 	bl	10018af4 <realloc>
1001e930:	6338      	str	r0, [r7, #48]	@ 0x30
1001e932:	2800      	cmp	r0, #0
1001e934:	f43f af05 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001e938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e93a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e93c:	005b      	lsls	r3, r3, #1
1001e93e:	1905      	adds	r5, r0, r4
1001e940:	6010      	str	r0, [r2, #0]
1001e942:	647b      	str	r3, [r7, #68]	@ 0x44
1001e944:	46c3      	mov	fp, r8
1001e946:	f7ff b85c 	b.w	1001da02 <__ssvfscanf_r+0x766>
1001e94a:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
1001e94c:	45ab      	cmp	fp, r5
1001e94e:	f67f ab94 	bls.w	1001e07a <__ssvfscanf_r+0xdde>
1001e952:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001e954:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001e958:	4652      	mov	r2, sl
1001e95a:	4620      	mov	r0, r4
1001e95c:	f003 fa02 	bl	10021d64 <_sungetc_r>
1001e960:	45ab      	cmp	fp, r5
1001e962:	d1f7      	bne.n	1001e954 <__ssvfscanf_r+0x16b8>
1001e964:	f7ff ba7e 	b.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001e96a:	459b      	cmp	fp, r3
1001e96c:	f67f ab85 	bls.w	1001e07a <__ssvfscanf_r+0xdde>
1001e970:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
1001e972:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001e976:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e978:	4652      	mov	r2, sl
1001e97a:	f003 f9f3 	bl	10021d64 <_sungetc_r>
1001e97e:	45a3      	cmp	fp, r4
1001e980:	d1f7      	bne.n	1001e972 <__ssvfscanf_r+0x16d6>
1001e982:	f7ff ba6f 	b.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e986:	f002 fae5 	bl	10020f54 <_strtoull_r>
1001e98a:	460b      	mov	r3, r1
1001e98c:	e60e      	b.n	1001e5ac <__ssvfscanf_r+0x1310>
1001e98e:	2200      	movs	r2, #0
1001e990:	4694      	mov	ip, r2
1001e992:	4613      	mov	r3, r2
1001e994:	4693      	mov	fp, r2
1001e996:	e682      	b.n	1001e69e <__ssvfscanf_r+0x1402>
1001e998:	461c      	mov	r4, r3
1001e99a:	e9da 2300 	ldrd	r2, r3, [sl]
1001e99e:	429d      	cmp	r5, r3
1001e9a0:	eb02 0103 	add.w	r1, r2, r3
1001e9a4:	dd51      	ble.n	1001ea4a <__ssvfscanf_r+0x17ae>
1001e9a6:	f8ca 1000 	str.w	r1, [sl]
1001e9aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e9ac:	4651      	mov	r1, sl
1001e9ae:	441c      	add	r4, r3
1001e9b0:	1aed      	subs	r5, r5, r3
1001e9b2:	f003 fa13 	bl	10021ddc <__ssrefill_r>
1001e9b6:	2800      	cmp	r0, #0
1001e9b8:	d0ef      	beq.n	1001e99a <__ssvfscanf_r+0x16fe>
1001e9ba:	2c00      	cmp	r4, #0
1001e9bc:	f43e acda 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001e9c0:	44a1      	add	r9, r4
1001e9c2:	f7fe bc91 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e9c6:	f8cd a000 	str.w	sl, [sp]
1001e9ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e9cc:	462b      	mov	r3, r5
1001e9ce:	4631      	mov	r1, r6
1001e9d0:	2201      	movs	r2, #1
1001e9d2:	f003 fa1f 	bl	10021e14 <_sfread_r>
1001e9d6:	4604      	mov	r4, r0
1001e9d8:	2800      	cmp	r0, #0
1001e9da:	f43e accb 	beq.w	1001d374 <__ssvfscanf_r+0xd8>
1001e9de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001e9e0:	f8c7 b034 	str.w	fp, [r7, #52]	@ 0x34
1001e9e4:	3301      	adds	r3, #1
1001e9e6:	44a1      	add	r9, r4
1001e9e8:	643b      	str	r3, [r7, #64]	@ 0x40
1001e9ea:	f7fe bc7d 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001e9ee:	647b      	str	r3, [r7, #68]	@ 0x44
1001e9f0:	2b00      	cmp	r3, #0
1001e9f2:	f43f aa37 	beq.w	1001de64 <__ssvfscanf_r+0xbc8>
1001e9f6:	2080      	movs	r0, #128	@ 0x80
1001e9f8:	f7f6 fe7e 	bl	100156f8 <malloc>
1001e9fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e9fe:	4683      	mov	fp, r0
1001ea00:	2800      	cmp	r0, #0
1001ea02:	f43f ae9e 	beq.w	1001e742 <__ssvfscanf_r+0x14a6>
1001ea06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
1001ea08:	6018      	str	r0, [r3, #0]
1001ea0a:	88ce      	ldrh	r6, [r1, #6]
1001ea0c:	888a      	ldrh	r2, [r1, #4]
1001ea0e:	4296      	cmp	r6, r2
1001ea10:	d337      	bcc.n	1001ea82 <__ssvfscanf_r+0x17e6>
1001ea12:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
1001ea16:	428a      	cmp	r2, r1
1001ea18:	647b      	str	r3, [r7, #68]	@ 0x44
1001ea1a:	f63f ad48 	bhi.w	1001e4ae <__ssvfscanf_r+0x1212>
1001ea1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001ea20:	3208      	adds	r2, #8
1001ea22:	b294      	uxth	r4, r2
1001ea24:	6818      	ldr	r0, [r3, #0]
1001ea26:	00a1      	lsls	r1, r4, #2
1001ea28:	f7fa f864 	bl	10018af4 <realloc>
1001ea2c:	2800      	cmp	r0, #0
1001ea2e:	f43f ad3e 	beq.w	1001e4ae <__ssvfscanf_r+0x1212>
1001ea32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001ea34:	809c      	strh	r4, [r3, #4]
1001ea36:	6018      	str	r0, [r3, #0]
1001ea38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001ea3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001ea3c:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
1001ea40:	3601      	adds	r6, #1
1001ea42:	80d6      	strh	r6, [r2, #6]
1001ea44:	46dc      	mov	ip, fp
1001ea46:	2220      	movs	r2, #32
1001ea48:	e629      	b.n	1001e69e <__ssvfscanf_r+0x1402>
1001ea4a:	1b5b      	subs	r3, r3, r5
1001ea4c:	442a      	add	r2, r5
1001ea4e:	442c      	add	r4, r5
1001ea50:	f8ca 3004 	str.w	r3, [sl, #4]
1001ea54:	f8ca 2000 	str.w	r2, [sl]
1001ea58:	44a1      	add	r9, r4
1001ea5a:	f7fe bc45 	b.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001ea5e:	6808      	ldr	r0, [r1, #0]
1001ea60:	e510      	b.n	1001e484 <__ssvfscanf_r+0x11e8>
1001ea62:	4285      	cmp	r5, r0
1001ea64:	d9bb      	bls.n	1001e9de <__ssvfscanf_r+0x1742>
1001ea66:	6830      	ldr	r0, [r6, #0]
1001ea68:	4621      	mov	r1, r4
1001ea6a:	f7fa f843 	bl	10018af4 <realloc>
1001ea6e:	2800      	cmp	r0, #0
1001ea70:	d0b5      	beq.n	1001e9de <__ssvfscanf_r+0x1742>
1001ea72:	6030      	str	r0, [r6, #0]
1001ea74:	e7b3      	b.n	1001e9de <__ssvfscanf_r+0x1742>
1001ea76:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1001ea7a:	065b      	lsls	r3, r3, #25
1001ea7c:	f57e ac86 	bpl.w	1001d38c <__ssvfscanf_r+0xf0>
1001ea80:	e515      	b.n	1001e4ae <__ssvfscanf_r+0x1212>
1001ea82:	6808      	ldr	r0, [r1, #0]
1001ea84:	e7d9      	b.n	1001ea3a <__ssvfscanf_r+0x179e>
1001ea86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1001ea88:	1c91      	adds	r1, r2, #2
1001ea8a:	d034      	beq.n	1001eaf6 <__ssvfscanf_r+0x185a>
1001ea8c:	2a03      	cmp	r2, #3
1001ea8e:	4499      	add	r9, r3
1001ea90:	d102      	bne.n	1001ea98 <__ssvfscanf_r+0x17fc>
1001ea92:	6833      	ldr	r3, [r6, #0]
1001ea94:	2b04      	cmp	r3, #4
1001ea96:	d000      	beq.n	1001ea9a <__ssvfscanf_r+0x17fe>
1001ea98:	3d01      	subs	r5, #1
1001ea9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001ea9c:	2b00      	cmp	r3, #0
1001ea9e:	f43f ae3d 	beq.w	1001e71c <__ssvfscanf_r+0x1480>
1001eaa2:	2600      	movs	r6, #0
1001eaa4:	f8da 3004 	ldr.w	r3, [sl, #4]
1001eaa8:	2b00      	cmp	r3, #0
1001eaaa:	dd13      	ble.n	1001ead4 <__ssvfscanf_r+0x1838>
1001eaac:	2d00      	cmp	r5, #0
1001eaae:	f47f adfc 	bne.w	1001e6aa <__ssvfscanf_r+0x140e>
1001eab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001eab4:	4642      	mov	r2, r8
1001eab6:	46a4      	mov	ip, r4
1001eab8:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
1001eabc:	b123      	cbz	r3, 1001eac8 <__ssvfscanf_r+0x182c>
1001eabe:	ebab 010c 	sub.w	r1, fp, ip
1001eac2:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
1001eac6:	d821      	bhi.n	1001eb0c <__ssvfscanf_r+0x1870>
1001eac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001eaca:	2b00      	cmp	r3, #0
1001eacc:	f47e ac0c 	bne.w	1001d2e8 <__ssvfscanf_r+0x4c>
1001ead0:	f7fe bfba 	b.w	1001da48 <__ssvfscanf_r+0x7ac>
1001ead4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001ead6:	4651      	mov	r1, sl
1001ead8:	f003 f980 	bl	10021ddc <__ssrefill_r>
1001eadc:	2800      	cmp	r0, #0
1001eade:	d0e5      	beq.n	1001eaac <__ssvfscanf_r+0x1810>
1001eae0:	4642      	mov	r2, r8
1001eae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001eae4:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
1001eae8:	46a4      	mov	ip, r4
1001eaea:	2e00      	cmp	r6, #0
1001eaec:	f47e ac42 	bne.w	1001d374 <__ssvfscanf_r+0xd8>
1001eaf0:	2b00      	cmp	r3, #0
1001eaf2:	d1e4      	bne.n	1001eabe <__ssvfscanf_r+0x1822>
1001eaf4:	e7e8      	b.n	1001eac8 <__ssvfscanf_r+0x182c>
1001eaf6:	461e      	mov	r6, r3
1001eaf8:	e7d4      	b.n	1001eaa4 <__ssvfscanf_r+0x1808>
1001eafa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001eafc:	eb00 0b06 	add.w	fp, r0, r6
1001eb00:	6018      	str	r0, [r3, #0]
1001eb02:	ea4f 0848 	mov.w	r8, r8, lsl #1
1001eb06:	f10b 0b04 	add.w	fp, fp, #4
1001eb0a:	e7ca      	b.n	1001eaa2 <__ssvfscanf_r+0x1806>
1001eb0c:	6818      	ldr	r0, [r3, #0]
1001eb0e:	647b      	str	r3, [r7, #68]	@ 0x44
1001eb10:	f7f9 fff0 	bl	10018af4 <realloc>
1001eb14:	2800      	cmp	r0, #0
1001eb16:	d0d7      	beq.n	1001eac8 <__ssvfscanf_r+0x182c>
1001eb18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001eb1a:	6018      	str	r0, [r3, #0]
1001eb1c:	e7d4      	b.n	1001eac8 <__ssvfscanf_r+0x182c>
1001eb1e:	bf00      	nop

1001eb20 <_Balloc>:
1001eb20:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001eb22:	b570      	push	{r4, r5, r6, lr}
1001eb24:	4605      	mov	r5, r0
1001eb26:	460c      	mov	r4, r1
1001eb28:	b14b      	cbz	r3, 1001eb3e <_Balloc+0x1e>
1001eb2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1001eb2e:	b180      	cbz	r0, 1001eb52 <_Balloc+0x32>
1001eb30:	6802      	ldr	r2, [r0, #0]
1001eb32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1001eb36:	2300      	movs	r3, #0
1001eb38:	60c3      	str	r3, [r0, #12]
1001eb3a:	6103      	str	r3, [r0, #16]
1001eb3c:	bd70      	pop	{r4, r5, r6, pc}
1001eb3e:	2221      	movs	r2, #33	@ 0x21
1001eb40:	2104      	movs	r1, #4
1001eb42:	f002 fc01 	bl	10021348 <_calloc_r>
1001eb46:	4603      	mov	r3, r0
1001eb48:	6468      	str	r0, [r5, #68]	@ 0x44
1001eb4a:	2800      	cmp	r0, #0
1001eb4c:	d1ed      	bne.n	1001eb2a <_Balloc+0xa>
1001eb4e:	2000      	movs	r0, #0
1001eb50:	bd70      	pop	{r4, r5, r6, pc}
1001eb52:	2101      	movs	r1, #1
1001eb54:	fa01 f604 	lsl.w	r6, r1, r4
1001eb58:	1d72      	adds	r2, r6, #5
1001eb5a:	0092      	lsls	r2, r2, #2
1001eb5c:	4628      	mov	r0, r5
1001eb5e:	f002 fbf3 	bl	10021348 <_calloc_r>
1001eb62:	2800      	cmp	r0, #0
1001eb64:	d0f3      	beq.n	1001eb4e <_Balloc+0x2e>
1001eb66:	e9c0 4601 	strd	r4, r6, [r0, #4]
1001eb6a:	e7e4      	b.n	1001eb36 <_Balloc+0x16>

1001eb6c <_Bfree>:
1001eb6c:	b131      	cbz	r1, 1001eb7c <_Bfree+0x10>
1001eb6e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001eb70:	684a      	ldr	r2, [r1, #4]
1001eb72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1001eb76:	6008      	str	r0, [r1, #0]
1001eb78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1001eb7c:	4770      	bx	lr
1001eb7e:	bf00      	nop

1001eb80 <__multadd>:
1001eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001eb84:	690d      	ldr	r5, [r1, #16]
1001eb86:	4607      	mov	r7, r0
1001eb88:	460e      	mov	r6, r1
1001eb8a:	461c      	mov	r4, r3
1001eb8c:	f101 0e14 	add.w	lr, r1, #20
1001eb90:	2000      	movs	r0, #0
1001eb92:	f8de 1000 	ldr.w	r1, [lr]
1001eb96:	b28b      	uxth	r3, r1
1001eb98:	fb02 4303 	mla	r3, r2, r3, r4
1001eb9c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001eba0:	0c09      	lsrs	r1, r1, #16
1001eba2:	fb02 cc01 	mla	ip, r2, r1, ip
1001eba6:	3001      	adds	r0, #1
1001eba8:	b29b      	uxth	r3, r3
1001ebaa:	eb03 430c 	add.w	r3, r3, ip, lsl #16
1001ebae:	4285      	cmp	r5, r0
1001ebb0:	f84e 3b04 	str.w	r3, [lr], #4
1001ebb4:	ea4f 441c 	mov.w	r4, ip, lsr #16
1001ebb8:	dceb      	bgt.n	1001eb92 <__multadd+0x12>
1001ebba:	b13c      	cbz	r4, 1001ebcc <__multadd+0x4c>
1001ebbc:	68b3      	ldr	r3, [r6, #8]
1001ebbe:	42ab      	cmp	r3, r5
1001ebc0:	dd07      	ble.n	1001ebd2 <__multadd+0x52>
1001ebc2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
1001ebc6:	3501      	adds	r5, #1
1001ebc8:	615c      	str	r4, [r3, #20]
1001ebca:	6135      	str	r5, [r6, #16]
1001ebcc:	4630      	mov	r0, r6
1001ebce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001ebd2:	6871      	ldr	r1, [r6, #4]
1001ebd4:	4638      	mov	r0, r7
1001ebd6:	3101      	adds	r1, #1
1001ebd8:	f7ff ffa2 	bl	1001eb20 <_Balloc>
1001ebdc:	4680      	mov	r8, r0
1001ebde:	b1a8      	cbz	r0, 1001ec0c <__multadd+0x8c>
1001ebe0:	6932      	ldr	r2, [r6, #16]
1001ebe2:	3202      	adds	r2, #2
1001ebe4:	f106 010c 	add.w	r1, r6, #12
1001ebe8:	0092      	lsls	r2, r2, #2
1001ebea:	300c      	adds	r0, #12
1001ebec:	f7fb fa68 	bl	1001a0c0 <memcpy>
1001ebf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001ebf2:	6872      	ldr	r2, [r6, #4]
1001ebf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1001ebf8:	6031      	str	r1, [r6, #0]
1001ebfa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1001ebfe:	4646      	mov	r6, r8
1001ec00:	eb06 0385 	add.w	r3, r6, r5, lsl #2
1001ec04:	3501      	adds	r5, #1
1001ec06:	615c      	str	r4, [r3, #20]
1001ec08:	6135      	str	r5, [r6, #16]
1001ec0a:	e7df      	b.n	1001ebcc <__multadd+0x4c>
1001ec0c:	4b02      	ldr	r3, [pc, #8]	@ (1001ec18 <__multadd+0x98>)
1001ec0e:	4803      	ldr	r0, [pc, #12]	@ (1001ec1c <__multadd+0x9c>)
1001ec10:	4642      	mov	r2, r8
1001ec12:	21ba      	movs	r1, #186	@ 0xba
1001ec14:	f002 fab4 	bl	10021180 <__assert_func>
1001ec18:	1002c324 	.word	0x1002c324
1001ec1c:	1002c3e8 	.word	0x1002c3e8

1001ec20 <__s2b>:
1001ec20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001ec24:	4617      	mov	r7, r2
1001ec26:	4a27      	ldr	r2, [pc, #156]	@ (1001ecc4 <__s2b+0xa4>)
1001ec28:	461e      	mov	r6, r3
1001ec2a:	3308      	adds	r3, #8
1001ec2c:	460c      	mov	r4, r1
1001ec2e:	2e09      	cmp	r6, #9
1001ec30:	fb82 1203 	smull	r1, r2, r2, r3
1001ec34:	ea4f 73e3 	mov.w	r3, r3, asr #31
1001ec38:	4605      	mov	r5, r0
1001ec3a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
1001ec3e:	dd39      	ble.n	1001ecb4 <__s2b+0x94>
1001ec40:	f04f 0c01 	mov.w	ip, #1
1001ec44:	2100      	movs	r1, #0
1001ec46:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
1001ec4a:	4563      	cmp	r3, ip
1001ec4c:	f101 0101 	add.w	r1, r1, #1
1001ec50:	dcf9      	bgt.n	1001ec46 <__s2b+0x26>
1001ec52:	4628      	mov	r0, r5
1001ec54:	f7ff ff64 	bl	1001eb20 <_Balloc>
1001ec58:	4601      	mov	r1, r0
1001ec5a:	b368      	cbz	r0, 1001ecb8 <__s2b+0x98>
1001ec5c:	9b08      	ldr	r3, [sp, #32]
1001ec5e:	6143      	str	r3, [r0, #20]
1001ec60:	2f09      	cmp	r7, #9
1001ec62:	f04f 0301 	mov.w	r3, #1
1001ec66:	6103      	str	r3, [r0, #16]
1001ec68:	dc12      	bgt.n	1001ec90 <__s2b+0x70>
1001ec6a:	340a      	adds	r4, #10
1001ec6c:	2709      	movs	r7, #9
1001ec6e:	42be      	cmp	r6, r7
1001ec70:	dd0b      	ble.n	1001ec8a <__s2b+0x6a>
1001ec72:	1bf6      	subs	r6, r6, r7
1001ec74:	4426      	add	r6, r4
1001ec76:	f814 3b01 	ldrb.w	r3, [r4], #1
1001ec7a:	220a      	movs	r2, #10
1001ec7c:	3b30      	subs	r3, #48	@ 0x30
1001ec7e:	4628      	mov	r0, r5
1001ec80:	f7ff ff7e 	bl	1001eb80 <__multadd>
1001ec84:	42a6      	cmp	r6, r4
1001ec86:	4601      	mov	r1, r0
1001ec88:	d1f5      	bne.n	1001ec76 <__s2b+0x56>
1001ec8a:	4608      	mov	r0, r1
1001ec8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001ec90:	f104 0909 	add.w	r9, r4, #9
1001ec94:	46c8      	mov	r8, r9
1001ec96:	443c      	add	r4, r7
1001ec98:	f818 3b01 	ldrb.w	r3, [r8], #1
1001ec9c:	220a      	movs	r2, #10
1001ec9e:	3b30      	subs	r3, #48	@ 0x30
1001eca0:	4628      	mov	r0, r5
1001eca2:	f7ff ff6d 	bl	1001eb80 <__multadd>
1001eca6:	45a0      	cmp	r8, r4
1001eca8:	4601      	mov	r1, r0
1001ecaa:	d1f5      	bne.n	1001ec98 <__s2b+0x78>
1001ecac:	f1a7 0408 	sub.w	r4, r7, #8
1001ecb0:	444c      	add	r4, r9
1001ecb2:	e7dc      	b.n	1001ec6e <__s2b+0x4e>
1001ecb4:	2100      	movs	r1, #0
1001ecb6:	e7cc      	b.n	1001ec52 <__s2b+0x32>
1001ecb8:	460a      	mov	r2, r1
1001ecba:	4b03      	ldr	r3, [pc, #12]	@ (1001ecc8 <__s2b+0xa8>)
1001ecbc:	4803      	ldr	r0, [pc, #12]	@ (1001eccc <__s2b+0xac>)
1001ecbe:	21d3      	movs	r1, #211	@ 0xd3
1001ecc0:	f002 fa5e 	bl	10021180 <__assert_func>
1001ecc4:	38e38e39 	.word	0x38e38e39
1001ecc8:	1002c324 	.word	0x1002c324
1001eccc:	1002c3e8 	.word	0x1002c3e8

1001ecd0 <__hi0bits>:
1001ecd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
1001ecd4:	4603      	mov	r3, r0
1001ecd6:	bf36      	itet	cc
1001ecd8:	0403      	lslcc	r3, r0, #16
1001ecda:	2000      	movcs	r0, #0
1001ecdc:	2010      	movcc	r0, #16
1001ecde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
1001ece2:	bf3c      	itt	cc
1001ece4:	021b      	lslcc	r3, r3, #8
1001ece6:	3008      	addcc	r0, #8
1001ece8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
1001ecec:	bf3c      	itt	cc
1001ecee:	011b      	lslcc	r3, r3, #4
1001ecf0:	3004      	addcc	r0, #4
1001ecf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
1001ecf6:	d303      	bcc.n	1001ed00 <__hi0bits+0x30>
1001ecf8:	2b00      	cmp	r3, #0
1001ecfa:	db06      	blt.n	1001ed0a <__hi0bits+0x3a>
1001ecfc:	3001      	adds	r0, #1
1001ecfe:	4770      	bx	lr
1001ed00:	009b      	lsls	r3, r3, #2
1001ed02:	d403      	bmi.n	1001ed0c <__hi0bits+0x3c>
1001ed04:	005b      	lsls	r3, r3, #1
1001ed06:	d403      	bmi.n	1001ed10 <__hi0bits+0x40>
1001ed08:	2020      	movs	r0, #32
1001ed0a:	4770      	bx	lr
1001ed0c:	3002      	adds	r0, #2
1001ed0e:	4770      	bx	lr
1001ed10:	3003      	adds	r0, #3
1001ed12:	4770      	bx	lr

1001ed14 <__lo0bits>:
1001ed14:	6803      	ldr	r3, [r0, #0]
1001ed16:	f013 0207 	ands.w	r2, r3, #7
1001ed1a:	4601      	mov	r1, r0
1001ed1c:	d007      	beq.n	1001ed2e <__lo0bits+0x1a>
1001ed1e:	07da      	lsls	r2, r3, #31
1001ed20:	d41f      	bmi.n	1001ed62 <__lo0bits+0x4e>
1001ed22:	0798      	lsls	r0, r3, #30
1001ed24:	d521      	bpl.n	1001ed6a <__lo0bits+0x56>
1001ed26:	085b      	lsrs	r3, r3, #1
1001ed28:	600b      	str	r3, [r1, #0]
1001ed2a:	2001      	movs	r0, #1
1001ed2c:	4770      	bx	lr
1001ed2e:	b298      	uxth	r0, r3
1001ed30:	b1a0      	cbz	r0, 1001ed5c <__lo0bits+0x48>
1001ed32:	4610      	mov	r0, r2
1001ed34:	b2da      	uxtb	r2, r3
1001ed36:	b90a      	cbnz	r2, 1001ed3c <__lo0bits+0x28>
1001ed38:	3008      	adds	r0, #8
1001ed3a:	0a1b      	lsrs	r3, r3, #8
1001ed3c:	071a      	lsls	r2, r3, #28
1001ed3e:	bf04      	itt	eq
1001ed40:	091b      	lsreq	r3, r3, #4
1001ed42:	3004      	addeq	r0, #4
1001ed44:	079a      	lsls	r2, r3, #30
1001ed46:	bf04      	itt	eq
1001ed48:	089b      	lsreq	r3, r3, #2
1001ed4a:	3002      	addeq	r0, #2
1001ed4c:	07da      	lsls	r2, r3, #31
1001ed4e:	d403      	bmi.n	1001ed58 <__lo0bits+0x44>
1001ed50:	085b      	lsrs	r3, r3, #1
1001ed52:	f100 0001 	add.w	r0, r0, #1
1001ed56:	d006      	beq.n	1001ed66 <__lo0bits+0x52>
1001ed58:	600b      	str	r3, [r1, #0]
1001ed5a:	4770      	bx	lr
1001ed5c:	0c1b      	lsrs	r3, r3, #16
1001ed5e:	2010      	movs	r0, #16
1001ed60:	e7e8      	b.n	1001ed34 <__lo0bits+0x20>
1001ed62:	2000      	movs	r0, #0
1001ed64:	4770      	bx	lr
1001ed66:	2020      	movs	r0, #32
1001ed68:	4770      	bx	lr
1001ed6a:	089b      	lsrs	r3, r3, #2
1001ed6c:	600b      	str	r3, [r1, #0]
1001ed6e:	2002      	movs	r0, #2
1001ed70:	4770      	bx	lr
1001ed72:	bf00      	nop

1001ed74 <__i2b>:
1001ed74:	b538      	push	{r3, r4, r5, lr}
1001ed76:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001ed78:	4604      	mov	r4, r0
1001ed7a:	460d      	mov	r5, r1
1001ed7c:	b14b      	cbz	r3, 1001ed92 <__i2b+0x1e>
1001ed7e:	6858      	ldr	r0, [r3, #4]
1001ed80:	b1b0      	cbz	r0, 1001edb0 <__i2b+0x3c>
1001ed82:	6802      	ldr	r2, [r0, #0]
1001ed84:	605a      	str	r2, [r3, #4]
1001ed86:	2200      	movs	r2, #0
1001ed88:	2301      	movs	r3, #1
1001ed8a:	6145      	str	r5, [r0, #20]
1001ed8c:	60c2      	str	r2, [r0, #12]
1001ed8e:	6103      	str	r3, [r0, #16]
1001ed90:	bd38      	pop	{r3, r4, r5, pc}
1001ed92:	2221      	movs	r2, #33	@ 0x21
1001ed94:	2104      	movs	r1, #4
1001ed96:	f002 fad7 	bl	10021348 <_calloc_r>
1001ed9a:	4603      	mov	r3, r0
1001ed9c:	6460      	str	r0, [r4, #68]	@ 0x44
1001ed9e:	2800      	cmp	r0, #0
1001eda0:	d1ed      	bne.n	1001ed7e <__i2b+0xa>
1001eda2:	4b09      	ldr	r3, [pc, #36]	@ (1001edc8 <__i2b+0x54>)
1001eda4:	4809      	ldr	r0, [pc, #36]	@ (1001edcc <__i2b+0x58>)
1001eda6:	2200      	movs	r2, #0
1001eda8:	f240 1145 	movw	r1, #325	@ 0x145
1001edac:	f002 f9e8 	bl	10021180 <__assert_func>
1001edb0:	221c      	movs	r2, #28
1001edb2:	2101      	movs	r1, #1
1001edb4:	4620      	mov	r0, r4
1001edb6:	f002 fac7 	bl	10021348 <_calloc_r>
1001edba:	2800      	cmp	r0, #0
1001edbc:	d0f1      	beq.n	1001eda2 <__i2b+0x2e>
1001edbe:	2201      	movs	r2, #1
1001edc0:	2302      	movs	r3, #2
1001edc2:	6042      	str	r2, [r0, #4]
1001edc4:	6083      	str	r3, [r0, #8]
1001edc6:	e7de      	b.n	1001ed86 <__i2b+0x12>
1001edc8:	1002c324 	.word	0x1002c324
1001edcc:	1002c3e8 	.word	0x1002c3e8

1001edd0 <__multiply>:
1001edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001edd4:	f8d1 8010 	ldr.w	r8, [r1, #16]
1001edd8:	6915      	ldr	r5, [r2, #16]
1001edda:	45a8      	cmp	r8, r5
1001eddc:	b085      	sub	sp, #20
1001edde:	460e      	mov	r6, r1
1001ede0:	4692      	mov	sl, r2
1001ede2:	db05      	blt.n	1001edf0 <__multiply+0x20>
1001ede4:	462a      	mov	r2, r5
1001ede6:	4653      	mov	r3, sl
1001ede8:	4645      	mov	r5, r8
1001edea:	468a      	mov	sl, r1
1001edec:	4690      	mov	r8, r2
1001edee:	461e      	mov	r6, r3
1001edf0:	f8da 3008 	ldr.w	r3, [sl, #8]
1001edf4:	f8da 1004 	ldr.w	r1, [sl, #4]
1001edf8:	eb05 0408 	add.w	r4, r5, r8
1001edfc:	42a3      	cmp	r3, r4
1001edfe:	bfb8      	it	lt
1001ee00:	3101      	addlt	r1, #1
1001ee02:	f7ff fe8d 	bl	1001eb20 <_Balloc>
1001ee06:	4684      	mov	ip, r0
1001ee08:	2800      	cmp	r0, #0
1001ee0a:	f000 808b 	beq.w	1001ef24 <__multiply+0x154>
1001ee0e:	f100 0714 	add.w	r7, r0, #20
1001ee12:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
1001ee16:	4577      	cmp	r7, lr
1001ee18:	d205      	bcs.n	1001ee26 <__multiply+0x56>
1001ee1a:	463b      	mov	r3, r7
1001ee1c:	2200      	movs	r2, #0
1001ee1e:	f843 2b04 	str.w	r2, [r3], #4
1001ee22:	459e      	cmp	lr, r3
1001ee24:	d8fb      	bhi.n	1001ee1e <__multiply+0x4e>
1001ee26:	3614      	adds	r6, #20
1001ee28:	eb06 0888 	add.w	r8, r6, r8, lsl #2
1001ee2c:	f10a 0914 	add.w	r9, sl, #20
1001ee30:	4546      	cmp	r6, r8
1001ee32:	eb09 0585 	add.w	r5, r9, r5, lsl #2
1001ee36:	d266      	bcs.n	1001ef06 <__multiply+0x136>
1001ee38:	eba5 030a 	sub.w	r3, r5, sl
1001ee3c:	3b15      	subs	r3, #21
1001ee3e:	f023 0303 	bic.w	r3, r3, #3
1001ee42:	f10a 0a15 	add.w	sl, sl, #21
1001ee46:	3304      	adds	r3, #4
1001ee48:	4555      	cmp	r5, sl
1001ee4a:	bf2c      	ite	cs
1001ee4c:	469b      	movcs	fp, r3
1001ee4e:	f04f 0b04 	movcc.w	fp, #4
1001ee52:	f8cd e008 	str.w	lr, [sp, #8]
1001ee56:	9403      	str	r4, [sp, #12]
1001ee58:	46ae      	mov	lr, r5
1001ee5a:	46e2      	mov	sl, ip
1001ee5c:	e005      	b.n	1001ee6a <__multiply+0x9a>
1001ee5e:	0c09      	lsrs	r1, r1, #16
1001ee60:	d12a      	bne.n	1001eeb8 <__multiply+0xe8>
1001ee62:	45b0      	cmp	r8, r6
1001ee64:	f107 0704 	add.w	r7, r7, #4
1001ee68:	d94a      	bls.n	1001ef00 <__multiply+0x130>
1001ee6a:	f856 1b04 	ldr.w	r1, [r6], #4
1001ee6e:	b28d      	uxth	r5, r1
1001ee70:	2d00      	cmp	r5, #0
1001ee72:	d0f4      	beq.n	1001ee5e <__multiply+0x8e>
1001ee74:	46cc      	mov	ip, r9
1001ee76:	463c      	mov	r4, r7
1001ee78:	2300      	movs	r3, #0
1001ee7a:	9601      	str	r6, [sp, #4]
1001ee7c:	f85c 0b04 	ldr.w	r0, [ip], #4
1001ee80:	6821      	ldr	r1, [r4, #0]
1001ee82:	b286      	uxth	r6, r0
1001ee84:	b28a      	uxth	r2, r1
1001ee86:	0c00      	lsrs	r0, r0, #16
1001ee88:	fb05 2206 	mla	r2, r5, r6, r2
1001ee8c:	0c09      	lsrs	r1, r1, #16
1001ee8e:	441a      	add	r2, r3
1001ee90:	fb05 1100 	mla	r1, r5, r0, r1
1001ee94:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1001ee98:	b292      	uxth	r2, r2
1001ee9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
1001ee9e:	45e6      	cmp	lr, ip
1001eea0:	f844 2b04 	str.w	r2, [r4], #4
1001eea4:	ea4f 4311 	mov.w	r3, r1, lsr #16
1001eea8:	d8e8      	bhi.n	1001ee7c <__multiply+0xac>
1001eeaa:	9e01      	ldr	r6, [sp, #4]
1001eeac:	f847 300b 	str.w	r3, [r7, fp]
1001eeb0:	f856 1c04 	ldr.w	r1, [r6, #-4]
1001eeb4:	0c09      	lsrs	r1, r1, #16
1001eeb6:	d0d4      	beq.n	1001ee62 <__multiply+0x92>
1001eeb8:	683b      	ldr	r3, [r7, #0]
1001eeba:	2200      	movs	r2, #0
1001eebc:	4648      	mov	r0, r9
1001eebe:	461d      	mov	r5, r3
1001eec0:	463c      	mov	r4, r7
1001eec2:	4694      	mov	ip, r2
1001eec4:	8802      	ldrh	r2, [r0, #0]
1001eec6:	fb01 c202 	mla	r2, r1, r2, ip
1001eeca:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1001eece:	b29b      	uxth	r3, r3
1001eed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1001eed4:	f844 3b04 	str.w	r3, [r4], #4
1001eed8:	f850 3b04 	ldr.w	r3, [r0], #4
1001eedc:	6825      	ldr	r5, [r4, #0]
1001eede:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001eee2:	b2ab      	uxth	r3, r5
1001eee4:	fb01 330c 	mla	r3, r1, ip, r3
1001eee8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
1001eeec:	4586      	cmp	lr, r0
1001eeee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001eef2:	d8e7      	bhi.n	1001eec4 <__multiply+0xf4>
1001eef4:	45b0      	cmp	r8, r6
1001eef6:	f847 300b 	str.w	r3, [r7, fp]
1001eefa:	f107 0704 	add.w	r7, r7, #4
1001eefe:	d8b4      	bhi.n	1001ee6a <__multiply+0x9a>
1001ef00:	e9dd e402 	ldrd	lr, r4, [sp, #8]
1001ef04:	46d4      	mov	ip, sl
1001ef06:	2c00      	cmp	r4, #0
1001ef08:	dc02      	bgt.n	1001ef10 <__multiply+0x140>
1001ef0a:	e005      	b.n	1001ef18 <__multiply+0x148>
1001ef0c:	3c01      	subs	r4, #1
1001ef0e:	d003      	beq.n	1001ef18 <__multiply+0x148>
1001ef10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1001ef14:	2b00      	cmp	r3, #0
1001ef16:	d0f9      	beq.n	1001ef0c <__multiply+0x13c>
1001ef18:	4660      	mov	r0, ip
1001ef1a:	f8cc 4010 	str.w	r4, [ip, #16]
1001ef1e:	b005      	add	sp, #20
1001ef20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001ef24:	4b03      	ldr	r3, [pc, #12]	@ (1001ef34 <__multiply+0x164>)
1001ef26:	4804      	ldr	r0, [pc, #16]	@ (1001ef38 <__multiply+0x168>)
1001ef28:	4662      	mov	r2, ip
1001ef2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
1001ef2e:	f002 f927 	bl	10021180 <__assert_func>
1001ef32:	bf00      	nop
1001ef34:	1002c324 	.word	0x1002c324
1001ef38:	1002c3e8 	.word	0x1002c3e8

1001ef3c <__pow5mult>:
1001ef3c:	f012 0303 	ands.w	r3, r2, #3
1001ef40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001ef44:	4614      	mov	r4, r2
1001ef46:	4607      	mov	r7, r0
1001ef48:	d12c      	bne.n	1001efa4 <__pow5mult+0x68>
1001ef4a:	460d      	mov	r5, r1
1001ef4c:	10a4      	asrs	r4, r4, #2
1001ef4e:	d01c      	beq.n	1001ef8a <__pow5mult+0x4e>
1001ef50:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
1001ef52:	b386      	cbz	r6, 1001efb6 <__pow5mult+0x7a>
1001ef54:	07e3      	lsls	r3, r4, #31
1001ef56:	f04f 0800 	mov.w	r8, #0
1001ef5a:	d406      	bmi.n	1001ef6a <__pow5mult+0x2e>
1001ef5c:	1064      	asrs	r4, r4, #1
1001ef5e:	d014      	beq.n	1001ef8a <__pow5mult+0x4e>
1001ef60:	6830      	ldr	r0, [r6, #0]
1001ef62:	b1a8      	cbz	r0, 1001ef90 <__pow5mult+0x54>
1001ef64:	4606      	mov	r6, r0
1001ef66:	07e3      	lsls	r3, r4, #31
1001ef68:	d5f8      	bpl.n	1001ef5c <__pow5mult+0x20>
1001ef6a:	4632      	mov	r2, r6
1001ef6c:	4629      	mov	r1, r5
1001ef6e:	4638      	mov	r0, r7
1001ef70:	f7ff ff2e 	bl	1001edd0 <__multiply>
1001ef74:	b135      	cbz	r5, 1001ef84 <__pow5mult+0x48>
1001ef76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001ef78:	6869      	ldr	r1, [r5, #4]
1001ef7a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
1001ef7e:	602a      	str	r2, [r5, #0]
1001ef80:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
1001ef84:	1064      	asrs	r4, r4, #1
1001ef86:	4605      	mov	r5, r0
1001ef88:	d1ea      	bne.n	1001ef60 <__pow5mult+0x24>
1001ef8a:	4628      	mov	r0, r5
1001ef8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001ef90:	4632      	mov	r2, r6
1001ef92:	4631      	mov	r1, r6
1001ef94:	4638      	mov	r0, r7
1001ef96:	f7ff ff1b 	bl	1001edd0 <__multiply>
1001ef9a:	6030      	str	r0, [r6, #0]
1001ef9c:	f8c0 8000 	str.w	r8, [r0]
1001efa0:	4606      	mov	r6, r0
1001efa2:	e7e0      	b.n	1001ef66 <__pow5mult+0x2a>
1001efa4:	3b01      	subs	r3, #1
1001efa6:	4a0f      	ldr	r2, [pc, #60]	@ (1001efe4 <__pow5mult+0xa8>)
1001efa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1001efac:	2300      	movs	r3, #0
1001efae:	f7ff fde7 	bl	1001eb80 <__multadd>
1001efb2:	4605      	mov	r5, r0
1001efb4:	e7ca      	b.n	1001ef4c <__pow5mult+0x10>
1001efb6:	2101      	movs	r1, #1
1001efb8:	4638      	mov	r0, r7
1001efba:	f7ff fdb1 	bl	1001eb20 <_Balloc>
1001efbe:	4606      	mov	r6, r0
1001efc0:	b140      	cbz	r0, 1001efd4 <__pow5mult+0x98>
1001efc2:	2301      	movs	r3, #1
1001efc4:	f240 2271 	movw	r2, #625	@ 0x271
1001efc8:	e9c0 3204 	strd	r3, r2, [r0, #16]
1001efcc:	2300      	movs	r3, #0
1001efce:	6438      	str	r0, [r7, #64]	@ 0x40
1001efd0:	6003      	str	r3, [r0, #0]
1001efd2:	e7bf      	b.n	1001ef54 <__pow5mult+0x18>
1001efd4:	4b04      	ldr	r3, [pc, #16]	@ (1001efe8 <__pow5mult+0xac>)
1001efd6:	4805      	ldr	r0, [pc, #20]	@ (1001efec <__pow5mult+0xb0>)
1001efd8:	4632      	mov	r2, r6
1001efda:	f240 1145 	movw	r1, #325	@ 0x145
1001efde:	f002 f8cf 	bl	10021180 <__assert_func>
1001efe2:	bf00      	nop
1001efe4:	1002c44c 	.word	0x1002c44c
1001efe8:	1002c324 	.word	0x1002c324
1001efec:	1002c3e8 	.word	0x1002c3e8

1001eff0 <__lshift>:
1001eff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1001eff4:	460c      	mov	r4, r1
1001eff6:	4690      	mov	r8, r2
1001eff8:	6927      	ldr	r7, [r4, #16]
1001effa:	68a3      	ldr	r3, [r4, #8]
1001effc:	6849      	ldr	r1, [r1, #4]
1001effe:	eb07 1762 	add.w	r7, r7, r2, asr #5
1001f002:	1c7d      	adds	r5, r7, #1
1001f004:	429d      	cmp	r5, r3
1001f006:	4606      	mov	r6, r0
1001f008:	ea4f 1962 	mov.w	r9, r2, asr #5
1001f00c:	dd04      	ble.n	1001f018 <__lshift+0x28>
1001f00e:	005b      	lsls	r3, r3, #1
1001f010:	429d      	cmp	r5, r3
1001f012:	f101 0101 	add.w	r1, r1, #1
1001f016:	dcfa      	bgt.n	1001f00e <__lshift+0x1e>
1001f018:	4630      	mov	r0, r6
1001f01a:	f7ff fd81 	bl	1001eb20 <_Balloc>
1001f01e:	4684      	mov	ip, r0
1001f020:	2800      	cmp	r0, #0
1001f022:	d051      	beq.n	1001f0c8 <__lshift+0xd8>
1001f024:	f1b9 0f00 	cmp.w	r9, #0
1001f028:	f100 0014 	add.w	r0, r0, #20
1001f02c:	dd0e      	ble.n	1001f04c <__lshift+0x5c>
1001f02e:	f109 0205 	add.w	r2, r9, #5
1001f032:	ea4f 0e82 	mov.w	lr, r2, lsl #2
1001f036:	4603      	mov	r3, r0
1001f038:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
1001f03c:	2100      	movs	r1, #0
1001f03e:	f843 1b04 	str.w	r1, [r3], #4
1001f042:	4293      	cmp	r3, r2
1001f044:	d1fb      	bne.n	1001f03e <__lshift+0x4e>
1001f046:	f1ae 0314 	sub.w	r3, lr, #20
1001f04a:	4418      	add	r0, r3
1001f04c:	6921      	ldr	r1, [r4, #16]
1001f04e:	f104 0314 	add.w	r3, r4, #20
1001f052:	f018 081f 	ands.w	r8, r8, #31
1001f056:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1001f05a:	d02d      	beq.n	1001f0b8 <__lshift+0xc8>
1001f05c:	f1c8 0920 	rsb	r9, r8, #32
1001f060:	4686      	mov	lr, r0
1001f062:	f04f 0a00 	mov.w	sl, #0
1001f066:	681a      	ldr	r2, [r3, #0]
1001f068:	fa02 f208 	lsl.w	r2, r2, r8
1001f06c:	ea42 020a 	orr.w	r2, r2, sl
1001f070:	f84e 2b04 	str.w	r2, [lr], #4
1001f074:	f853 2b04 	ldr.w	r2, [r3], #4
1001f078:	4299      	cmp	r1, r3
1001f07a:	fa22 fa09 	lsr.w	sl, r2, r9
1001f07e:	d8f2      	bhi.n	1001f066 <__lshift+0x76>
1001f080:	1b0b      	subs	r3, r1, r4
1001f082:	3b15      	subs	r3, #21
1001f084:	f023 0303 	bic.w	r3, r3, #3
1001f088:	3304      	adds	r3, #4
1001f08a:	f104 0215 	add.w	r2, r4, #21
1001f08e:	4291      	cmp	r1, r2
1001f090:	bf38      	it	cc
1001f092:	2304      	movcc	r3, #4
1001f094:	f840 a003 	str.w	sl, [r0, r3]
1001f098:	f1ba 0f00 	cmp.w	sl, #0
1001f09c:	d100      	bne.n	1001f0a0 <__lshift+0xb0>
1001f09e:	463d      	mov	r5, r7
1001f0a0:	6c73      	ldr	r3, [r6, #68]	@ 0x44
1001f0a2:	6862      	ldr	r2, [r4, #4]
1001f0a4:	f8cc 5010 	str.w	r5, [ip, #16]
1001f0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1001f0ac:	6021      	str	r1, [r4, #0]
1001f0ae:	4660      	mov	r0, ip
1001f0b0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
1001f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1001f0b8:	3804      	subs	r0, #4
1001f0ba:	f853 2b04 	ldr.w	r2, [r3], #4
1001f0be:	f840 2f04 	str.w	r2, [r0, #4]!
1001f0c2:	4299      	cmp	r1, r3
1001f0c4:	d8f9      	bhi.n	1001f0ba <__lshift+0xca>
1001f0c6:	e7ea      	b.n	1001f09e <__lshift+0xae>
1001f0c8:	4b03      	ldr	r3, [pc, #12]	@ (1001f0d8 <__lshift+0xe8>)
1001f0ca:	4804      	ldr	r0, [pc, #16]	@ (1001f0dc <__lshift+0xec>)
1001f0cc:	4662      	mov	r2, ip
1001f0ce:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
1001f0d2:	f002 f855 	bl	10021180 <__assert_func>
1001f0d6:	bf00      	nop
1001f0d8:	1002c324 	.word	0x1002c324
1001f0dc:	1002c3e8 	.word	0x1002c3e8

1001f0e0 <__mcmp>:
1001f0e0:	690b      	ldr	r3, [r1, #16]
1001f0e2:	4684      	mov	ip, r0
1001f0e4:	6900      	ldr	r0, [r0, #16]
1001f0e6:	1ac0      	subs	r0, r0, r3
1001f0e8:	d115      	bne.n	1001f116 <__mcmp+0x36>
1001f0ea:	f10c 0c14 	add.w	ip, ip, #20
1001f0ee:	3114      	adds	r1, #20
1001f0f0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
1001f0f4:	b410      	push	{r4}
1001f0f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1001f0fa:	e001      	b.n	1001f100 <__mcmp+0x20>
1001f0fc:	4594      	cmp	ip, r2
1001f0fe:	d208      	bcs.n	1001f112 <__mcmp+0x32>
1001f100:	f852 4d04 	ldr.w	r4, [r2, #-4]!
1001f104:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1001f108:	428c      	cmp	r4, r1
1001f10a:	d0f7      	beq.n	1001f0fc <__mcmp+0x1c>
1001f10c:	d204      	bcs.n	1001f118 <__mcmp+0x38>
1001f10e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001f112:	bc10      	pop	{r4}
1001f114:	4770      	bx	lr
1001f116:	4770      	bx	lr
1001f118:	2001      	movs	r0, #1
1001f11a:	bc10      	pop	{r4}
1001f11c:	4770      	bx	lr
1001f11e:	bf00      	nop

1001f120 <__mdiff>:
1001f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001f124:	6913      	ldr	r3, [r2, #16]
1001f126:	690f      	ldr	r7, [r1, #16]
1001f128:	1aff      	subs	r7, r7, r3
1001f12a:	2f00      	cmp	r7, #0
1001f12c:	b083      	sub	sp, #12
1001f12e:	460d      	mov	r5, r1
1001f130:	4690      	mov	r8, r2
1001f132:	d115      	bne.n	1001f160 <__mdiff+0x40>
1001f134:	f101 0614 	add.w	r6, r1, #20
1001f138:	3214      	adds	r2, #20
1001f13a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
1001f13e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1001f142:	e001      	b.n	1001f148 <__mdiff+0x28>
1001f144:	429e      	cmp	r6, r3
1001f146:	d276      	bcs.n	1001f236 <__mdiff+0x116>
1001f148:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1001f14c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
1001f150:	428c      	cmp	r4, r1
1001f152:	d0f7      	beq.n	1001f144 <__mdiff+0x24>
1001f154:	d206      	bcs.n	1001f164 <__mdiff+0x44>
1001f156:	462b      	mov	r3, r5
1001f158:	2701      	movs	r7, #1
1001f15a:	4645      	mov	r5, r8
1001f15c:	4698      	mov	r8, r3
1001f15e:	e001      	b.n	1001f164 <__mdiff+0x44>
1001f160:	dbf9      	blt.n	1001f156 <__mdiff+0x36>
1001f162:	2700      	movs	r7, #0
1001f164:	6869      	ldr	r1, [r5, #4]
1001f166:	f7ff fcdb 	bl	1001eb20 <_Balloc>
1001f16a:	4681      	mov	r9, r0
1001f16c:	2800      	cmp	r0, #0
1001f16e:	d076      	beq.n	1001f25e <__mdiff+0x13e>
1001f170:	692e      	ldr	r6, [r5, #16]
1001f172:	60c7      	str	r7, [r0, #12]
1001f174:	f8d8 0010 	ldr.w	r0, [r8, #16]
1001f178:	f105 0b14 	add.w	fp, r5, #20
1001f17c:	f108 0e14 	add.w	lr, r8, #20
1001f180:	f109 0a14 	add.w	sl, r9, #20
1001f184:	f105 0110 	add.w	r1, r5, #16
1001f188:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
1001f18c:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
1001f190:	4657      	mov	r7, sl
1001f192:	f04f 0c00 	mov.w	ip, #0
1001f196:	f8cd b004 	str.w	fp, [sp, #4]
1001f19a:	f85e 4b04 	ldr.w	r4, [lr], #4
1001f19e:	f851 5f04 	ldr.w	r5, [r1, #4]!
1001f1a2:	fa1f fb84 	uxth.w	fp, r4
1001f1a6:	b2ab      	uxth	r3, r5
1001f1a8:	eba3 030b 	sub.w	r3, r3, fp
1001f1ac:	0c24      	lsrs	r4, r4, #16
1001f1ae:	4463      	add	r3, ip
1001f1b0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
1001f1b4:	eb04 4423 	add.w	r4, r4, r3, asr #16
1001f1b8:	b29b      	uxth	r3, r3
1001f1ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1001f1be:	4570      	cmp	r0, lr
1001f1c0:	f847 3b04 	str.w	r3, [r7], #4
1001f1c4:	ea4f 4c24 	mov.w	ip, r4, asr #16
1001f1c8:	d8e7      	bhi.n	1001f19a <__mdiff+0x7a>
1001f1ca:	eba0 0108 	sub.w	r1, r0, r8
1001f1ce:	3915      	subs	r1, #21
1001f1d0:	0889      	lsrs	r1, r1, #2
1001f1d2:	1c4c      	adds	r4, r1, #1
1001f1d4:	f8dd b004 	ldr.w	fp, [sp, #4]
1001f1d8:	f108 0815 	add.w	r8, r8, #21
1001f1dc:	00a4      	lsls	r4, r4, #2
1001f1de:	4540      	cmp	r0, r8
1001f1e0:	bf38      	it	cc
1001f1e2:	2404      	movcc	r4, #4
1001f1e4:	eb0b 0504 	add.w	r5, fp, r4
1001f1e8:	42aa      	cmp	r2, r5
1001f1ea:	4454      	add	r4, sl
1001f1ec:	d930      	bls.n	1001f250 <__mdiff+0x130>
1001f1ee:	4627      	mov	r7, r4
1001f1f0:	4628      	mov	r0, r5
1001f1f2:	f850 3b04 	ldr.w	r3, [r0], #4
1001f1f6:	fa1c fe83 	uxtah	lr, ip, r3
1001f1fa:	0c19      	lsrs	r1, r3, #16
1001f1fc:	4463      	add	r3, ip
1001f1fe:	eb01 412e 	add.w	r1, r1, lr, asr #16
1001f202:	b29b      	uxth	r3, r3
1001f204:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1001f208:	4282      	cmp	r2, r0
1001f20a:	f847 3b04 	str.w	r3, [r7], #4
1001f20e:	ea4f 4c21 	mov.w	ip, r1, asr #16
1001f212:	d8ee      	bhi.n	1001f1f2 <__mdiff+0xd2>
1001f214:	3a01      	subs	r2, #1
1001f216:	1b52      	subs	r2, r2, r5
1001f218:	f022 0203 	bic.w	r2, r2, #3
1001f21c:	4414      	add	r4, r2
1001f21e:	b923      	cbnz	r3, 1001f22a <__mdiff+0x10a>
1001f220:	f854 3d04 	ldr.w	r3, [r4, #-4]!
1001f224:	3e01      	subs	r6, #1
1001f226:	2b00      	cmp	r3, #0
1001f228:	d0fa      	beq.n	1001f220 <__mdiff+0x100>
1001f22a:	4648      	mov	r0, r9
1001f22c:	f8c9 6010 	str.w	r6, [r9, #16]
1001f230:	b003      	add	sp, #12
1001f232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001f236:	2100      	movs	r1, #0
1001f238:	f7ff fc72 	bl	1001eb20 <_Balloc>
1001f23c:	4681      	mov	r9, r0
1001f23e:	b1a8      	cbz	r0, 1001f26c <__mdiff+0x14c>
1001f240:	2201      	movs	r2, #1
1001f242:	2300      	movs	r3, #0
1001f244:	e9c0 2304 	strd	r2, r3, [r0, #16]
1001f248:	4648      	mov	r0, r9
1001f24a:	b003      	add	sp, #12
1001f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001f250:	0089      	lsls	r1, r1, #2
1001f252:	4540      	cmp	r0, r8
1001f254:	bf38      	it	cc
1001f256:	2100      	movcc	r1, #0
1001f258:	eb0a 0401 	add.w	r4, sl, r1
1001f25c:	e7df      	b.n	1001f21e <__mdiff+0xfe>
1001f25e:	4b07      	ldr	r3, [pc, #28]	@ (1001f27c <__mdiff+0x15c>)
1001f260:	4807      	ldr	r0, [pc, #28]	@ (1001f280 <__mdiff+0x160>)
1001f262:	464a      	mov	r2, r9
1001f264:	f240 2145 	movw	r1, #581	@ 0x245
1001f268:	f001 ff8a 	bl	10021180 <__assert_func>
1001f26c:	4b03      	ldr	r3, [pc, #12]	@ (1001f27c <__mdiff+0x15c>)
1001f26e:	4804      	ldr	r0, [pc, #16]	@ (1001f280 <__mdiff+0x160>)
1001f270:	464a      	mov	r2, r9
1001f272:	f240 2137 	movw	r1, #567	@ 0x237
1001f276:	f001 ff83 	bl	10021180 <__assert_func>
1001f27a:	bf00      	nop
1001f27c:	1002c324 	.word	0x1002c324
1001f280:	1002c3e8 	.word	0x1002c3e8

1001f284 <__ulp>:
1001f284:	4b11      	ldr	r3, [pc, #68]	@ (1001f2cc <__ulp+0x48>)
1001f286:	400b      	ands	r3, r1
1001f288:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
1001f28c:	2b00      	cmp	r3, #0
1001f28e:	dd03      	ble.n	1001f298 <__ulp+0x14>
1001f290:	2200      	movs	r2, #0
1001f292:	4619      	mov	r1, r3
1001f294:	4610      	mov	r0, r2
1001f296:	4770      	bx	lr
1001f298:	425b      	negs	r3, r3
1001f29a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
1001f29e:	ea4f 5223 	mov.w	r2, r3, asr #20
1001f2a2:	da06      	bge.n	1001f2b2 <__ulp+0x2e>
1001f2a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
1001f2a8:	4113      	asrs	r3, r2
1001f2aa:	2200      	movs	r2, #0
1001f2ac:	4619      	mov	r1, r3
1001f2ae:	4610      	mov	r0, r2
1001f2b0:	4770      	bx	lr
1001f2b2:	f1a2 0314 	sub.w	r3, r2, #20
1001f2b6:	2b1e      	cmp	r3, #30
1001f2b8:	bfda      	itte	le
1001f2ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
1001f2be:	40da      	lsrle	r2, r3
1001f2c0:	2201      	movgt	r2, #1
1001f2c2:	2300      	movs	r3, #0
1001f2c4:	4619      	mov	r1, r3
1001f2c6:	4610      	mov	r0, r2
1001f2c8:	4770      	bx	lr
1001f2ca:	bf00      	nop
1001f2cc:	7ff00000 	.word	0x7ff00000

1001f2d0 <__b2d>:
1001f2d0:	6902      	ldr	r2, [r0, #16]
1001f2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001f2d6:	f100 0714 	add.w	r7, r0, #20
1001f2da:	eb07 0282 	add.w	r2, r7, r2, lsl #2
1001f2de:	f1a2 0804 	sub.w	r8, r2, #4
1001f2e2:	f852 6c04 	ldr.w	r6, [r2, #-4]
1001f2e6:	4630      	mov	r0, r6
1001f2e8:	f7ff fcf2 	bl	1001ecd0 <__hi0bits>
1001f2ec:	f1c0 0320 	rsb	r3, r0, #32
1001f2f0:	280a      	cmp	r0, #10
1001f2f2:	600b      	str	r3, [r1, #0]
1001f2f4:	dd33      	ble.n	1001f35e <__b2d+0x8e>
1001f2f6:	4547      	cmp	r7, r8
1001f2f8:	f1a0 010b 	sub.w	r1, r0, #11
1001f2fc:	d219      	bcs.n	1001f332 <__b2d+0x62>
1001f2fe:	f852 3c08 	ldr.w	r3, [r2, #-8]
1001f302:	b321      	cbz	r1, 1001f34e <__b2d+0x7e>
1001f304:	f1c1 0020 	rsb	r0, r1, #32
1001f308:	408e      	lsls	r6, r1
1001f30a:	fa23 f400 	lsr.w	r4, r3, r0
1001f30e:	4326      	orrs	r6, r4
1001f310:	408b      	lsls	r3, r1
1001f312:	f1a2 0108 	sub.w	r1, r2, #8
1001f316:	f046 557f 	orr.w	r5, r6, #1069547520	@ 0x3fc00000
1001f31a:	428f      	cmp	r7, r1
1001f31c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001f320:	d219      	bcs.n	1001f356 <__b2d+0x86>
1001f322:	f852 2c0c 	ldr.w	r2, [r2, #-12]
1001f326:	40c2      	lsrs	r2, r0
1001f328:	4313      	orrs	r3, r2
1001f32a:	4618      	mov	r0, r3
1001f32c:	4629      	mov	r1, r5
1001f32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001f332:	280b      	cmp	r0, #11
1001f334:	d00a      	beq.n	1001f34c <__b2d+0x7c>
1001f336:	fa06 f101 	lsl.w	r1, r6, r1
1001f33a:	f041 557f 	orr.w	r5, r1, #1069547520	@ 0x3fc00000
1001f33e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001f342:	2300      	movs	r3, #0
1001f344:	4618      	mov	r0, r3
1001f346:	4629      	mov	r1, r5
1001f348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001f34c:	2300      	movs	r3, #0
1001f34e:	f046 557f 	orr.w	r5, r6, #1069547520	@ 0x3fc00000
1001f352:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001f356:	4618      	mov	r0, r3
1001f358:	4629      	mov	r1, r5
1001f35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001f35e:	4547      	cmp	r7, r8
1001f360:	bf38      	it	cc
1001f362:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
1001f366:	f1c0 030b 	rsb	r3, r0, #11
1001f36a:	fa26 f103 	lsr.w	r1, r6, r3
1001f36e:	bf38      	it	cc
1001f370:	40da      	lsrcc	r2, r3
1001f372:	f100 0315 	add.w	r3, r0, #21
1001f376:	f041 557f 	orr.w	r5, r1, #1069547520	@ 0x3fc00000
1001f37a:	bf28      	it	cs
1001f37c:	2200      	movcs	r2, #0
1001f37e:	fa06 f303 	lsl.w	r3, r6, r3
1001f382:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001f386:	4313      	orrs	r3, r2
1001f388:	4618      	mov	r0, r3
1001f38a:	4629      	mov	r1, r5
1001f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1001f390 <__d2b>:
1001f390:	b5f0      	push	{r4, r5, r6, r7, lr}
1001f392:	2101      	movs	r1, #1
1001f394:	b083      	sub	sp, #12
1001f396:	4616      	mov	r6, r2
1001f398:	461f      	mov	r7, r3
1001f39a:	f7ff fbc1 	bl	1001eb20 <_Balloc>
1001f39e:	4605      	mov	r5, r0
1001f3a0:	2800      	cmp	r0, #0
1001f3a2:	d047      	beq.n	1001f434 <__d2b+0xa4>
1001f3a4:	f3c7 540a 	ubfx	r4, r7, #20, #11
1001f3a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
1001f3ac:	b10c      	cbz	r4, 1001f3b2 <__d2b+0x22>
1001f3ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1001f3b2:	2e00      	cmp	r6, #0
1001f3b4:	9301      	str	r3, [sp, #4]
1001f3b6:	d114      	bne.n	1001f3e2 <__d2b+0x52>
1001f3b8:	a801      	add	r0, sp, #4
1001f3ba:	f7ff fcab 	bl	1001ed14 <__lo0bits>
1001f3be:	9b01      	ldr	r3, [sp, #4]
1001f3c0:	616b      	str	r3, [r5, #20]
1001f3c2:	2201      	movs	r2, #1
1001f3c4:	3020      	adds	r0, #32
1001f3c6:	612a      	str	r2, [r5, #16]
1001f3c8:	b314      	cbz	r4, 1001f410 <__d2b+0x80>
1001f3ca:	9b08      	ldr	r3, [sp, #32]
1001f3cc:	f2a4 4433 	subw	r4, r4, #1075	@ 0x433
1001f3d0:	4404      	add	r4, r0
1001f3d2:	601c      	str	r4, [r3, #0]
1001f3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001f3d6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
1001f3da:	6018      	str	r0, [r3, #0]
1001f3dc:	4628      	mov	r0, r5
1001f3de:	b003      	add	sp, #12
1001f3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001f3e2:	4668      	mov	r0, sp
1001f3e4:	9600      	str	r6, [sp, #0]
1001f3e6:	f7ff fc95 	bl	1001ed14 <__lo0bits>
1001f3ea:	9b01      	ldr	r3, [sp, #4]
1001f3ec:	b300      	cbz	r0, 1001f430 <__d2b+0xa0>
1001f3ee:	9900      	ldr	r1, [sp, #0]
1001f3f0:	f1c0 0220 	rsb	r2, r0, #32
1001f3f4:	fa03 f202 	lsl.w	r2, r3, r2
1001f3f8:	40c3      	lsrs	r3, r0
1001f3fa:	9301      	str	r3, [sp, #4]
1001f3fc:	430a      	orrs	r2, r1
1001f3fe:	2b00      	cmp	r3, #0
1001f400:	e9c5 2305 	strd	r2, r3, [r5, #20]
1001f404:	bf0c      	ite	eq
1001f406:	2201      	moveq	r2, #1
1001f408:	2202      	movne	r2, #2
1001f40a:	612a      	str	r2, [r5, #16]
1001f40c:	2c00      	cmp	r4, #0
1001f40e:	d1dc      	bne.n	1001f3ca <__d2b+0x3a>
1001f410:	eb05 0182 	add.w	r1, r5, r2, lsl #2
1001f414:	f2a0 4332 	subw	r3, r0, #1074	@ 0x432
1001f418:	6908      	ldr	r0, [r1, #16]
1001f41a:	9908      	ldr	r1, [sp, #32]
1001f41c:	600b      	str	r3, [r1, #0]
1001f41e:	f7ff fc57 	bl	1001ecd0 <__hi0bits>
1001f422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001f424:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
1001f428:	6018      	str	r0, [r3, #0]
1001f42a:	4628      	mov	r0, r5
1001f42c:	b003      	add	sp, #12
1001f42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001f430:	9a00      	ldr	r2, [sp, #0]
1001f432:	e7e4      	b.n	1001f3fe <__d2b+0x6e>
1001f434:	4b03      	ldr	r3, [pc, #12]	@ (1001f444 <__d2b+0xb4>)
1001f436:	4804      	ldr	r0, [pc, #16]	@ (1001f448 <__d2b+0xb8>)
1001f438:	462a      	mov	r2, r5
1001f43a:	f240 310f 	movw	r1, #783	@ 0x30f
1001f43e:	f001 fe9f 	bl	10021180 <__assert_func>
1001f442:	bf00      	nop
1001f444:	1002c324 	.word	0x1002c324
1001f448:	1002c3e8 	.word	0x1002c3e8

1001f44c <__ratio>:
1001f44c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1001f450:	b083      	sub	sp, #12
1001f452:	460e      	mov	r6, r1
1001f454:	4669      	mov	r1, sp
1001f456:	4607      	mov	r7, r0
1001f458:	f7ff ff3a 	bl	1001f2d0 <__b2d>
1001f45c:	4604      	mov	r4, r0
1001f45e:	460d      	mov	r5, r1
1001f460:	4630      	mov	r0, r6
1001f462:	a901      	add	r1, sp, #4
1001f464:	f7ff ff34 	bl	1001f2d0 <__b2d>
1001f468:	6933      	ldr	r3, [r6, #16]
1001f46a:	693a      	ldr	r2, [r7, #16]
1001f46c:	1ad2      	subs	r2, r2, r3
1001f46e:	e9dd 3600 	ldrd	r3, r6, [sp]
1001f472:	1b9b      	subs	r3, r3, r6
1001f474:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1001f478:	2b00      	cmp	r3, #0
1001f47a:	dd0b      	ble.n	1001f494 <__ratio+0x48>
1001f47c:	eb05 5903 	add.w	r9, r5, r3, lsl #20
1001f480:	464d      	mov	r5, r9
1001f482:	4602      	mov	r2, r0
1001f484:	460b      	mov	r3, r1
1001f486:	4620      	mov	r0, r4
1001f488:	4629      	mov	r1, r5
1001f48a:	f003 f8a3 	bl	100225d4 <__aeabi_ddiv>
1001f48e:	b003      	add	sp, #12
1001f490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1001f494:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
1001f498:	eb01 5703 	add.w	r7, r1, r3, lsl #20
1001f49c:	4639      	mov	r1, r7
1001f49e:	e7f0      	b.n	1001f482 <__ratio+0x36>

1001f4a0 <__copybits>:
1001f4a0:	3901      	subs	r1, #1
1001f4a2:	1149      	asrs	r1, r1, #5
1001f4a4:	f101 0c01 	add.w	ip, r1, #1
1001f4a8:	6911      	ldr	r1, [r2, #16]
1001f4aa:	f102 0314 	add.w	r3, r2, #20
1001f4ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1001f4b2:	428b      	cmp	r3, r1
1001f4b4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
1001f4b8:	d216      	bcs.n	1001f4e8 <__copybits+0x48>
1001f4ba:	b510      	push	{r4, lr}
1001f4bc:	f1a0 0e04 	sub.w	lr, r0, #4
1001f4c0:	f853 4b04 	ldr.w	r4, [r3], #4
1001f4c4:	f84e 4f04 	str.w	r4, [lr, #4]!
1001f4c8:	4299      	cmp	r1, r3
1001f4ca:	d8f9      	bhi.n	1001f4c0 <__copybits+0x20>
1001f4cc:	1a8b      	subs	r3, r1, r2
1001f4ce:	3b15      	subs	r3, #21
1001f4d0:	f023 0303 	bic.w	r3, r3, #3
1001f4d4:	3304      	adds	r3, #4
1001f4d6:	4418      	add	r0, r3
1001f4d8:	4584      	cmp	ip, r0
1001f4da:	d904      	bls.n	1001f4e6 <__copybits+0x46>
1001f4dc:	2300      	movs	r3, #0
1001f4de:	f840 3b04 	str.w	r3, [r0], #4
1001f4e2:	4584      	cmp	ip, r0
1001f4e4:	d8fb      	bhi.n	1001f4de <__copybits+0x3e>
1001f4e6:	bd10      	pop	{r4, pc}
1001f4e8:	4584      	cmp	ip, r0
1001f4ea:	d905      	bls.n	1001f4f8 <__copybits+0x58>
1001f4ec:	2300      	movs	r3, #0
1001f4ee:	f840 3b04 	str.w	r3, [r0], #4
1001f4f2:	4584      	cmp	ip, r0
1001f4f4:	d8fb      	bhi.n	1001f4ee <__copybits+0x4e>
1001f4f6:	4770      	bx	lr
1001f4f8:	4770      	bx	lr
1001f4fa:	bf00      	nop

1001f4fc <__any_on>:
1001f4fc:	6903      	ldr	r3, [r0, #16]
1001f4fe:	114a      	asrs	r2, r1, #5
1001f500:	4293      	cmp	r3, r2
1001f502:	f100 0014 	add.w	r0, r0, #20
1001f506:	da09      	bge.n	1001f51c <__any_on+0x20>
1001f508:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1001f50c:	e002      	b.n	1001f514 <__any_on+0x18>
1001f50e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1001f512:	b9a2      	cbnz	r2, 1001f53e <__any_on+0x42>
1001f514:	4283      	cmp	r3, r0
1001f516:	d8fa      	bhi.n	1001f50e <__any_on+0x12>
1001f518:	2000      	movs	r0, #0
1001f51a:	4770      	bx	lr
1001f51c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
1001f520:	ddf8      	ble.n	1001f514 <__any_on+0x18>
1001f522:	f011 011f 	ands.w	r1, r1, #31
1001f526:	d0f5      	beq.n	1001f514 <__any_on+0x18>
1001f528:	b410      	push	{r4}
1001f52a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
1001f52e:	fa24 f201 	lsr.w	r2, r4, r1
1001f532:	408a      	lsls	r2, r1
1001f534:	4294      	cmp	r4, r2
1001f536:	d008      	beq.n	1001f54a <__any_on+0x4e>
1001f538:	2001      	movs	r0, #1
1001f53a:	bc10      	pop	{r4}
1001f53c:	4770      	bx	lr
1001f53e:	2001      	movs	r0, #1
1001f540:	4770      	bx	lr
1001f542:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1001f546:	2a00      	cmp	r2, #0
1001f548:	d1f6      	bne.n	1001f538 <__any_on+0x3c>
1001f54a:	4283      	cmp	r3, r0
1001f54c:	d8f9      	bhi.n	1001f542 <__any_on+0x46>
1001f54e:	2000      	movs	r0, #0
1001f550:	bc10      	pop	{r4}
1001f552:	4770      	bx	lr

1001f554 <lflush>:
1001f554:	898b      	ldrh	r3, [r1, #12]
1001f556:	f003 0309 	and.w	r3, r3, #9
1001f55a:	2b09      	cmp	r3, #9
1001f55c:	d001      	beq.n	1001f562 <lflush+0xe>
1001f55e:	2000      	movs	r0, #0
1001f560:	4770      	bx	lr
1001f562:	4b02      	ldr	r3, [pc, #8]	@ (1001f56c <lflush+0x18>)
1001f564:	6818      	ldr	r0, [r3, #0]
1001f566:	f7f9 bd07 	b.w	10018f78 <_fflush_r>
1001f56a:	bf00      	nop
1001f56c:	200005e0 	.word	0x200005e0

1001f570 <__srefill_r>:
1001f570:	b570      	push	{r4, r5, r6, lr}
1001f572:	460c      	mov	r4, r1
1001f574:	4605      	mov	r5, r0
1001f576:	b110      	cbz	r0, 1001f57e <__srefill_r+0xe>
1001f578:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001f57a:	2b00      	cmp	r3, #0
1001f57c:	d05f      	beq.n	1001f63e <__srefill_r+0xce>
1001f57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001f582:	049a      	lsls	r2, r3, #18
1001f584:	d406      	bmi.n	1001f594 <__srefill_r+0x24>
1001f586:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1001f588:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
1001f58c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
1001f590:	81a3      	strh	r3, [r4, #12]
1001f592:	6662      	str	r2, [r4, #100]	@ 0x64
1001f594:	2200      	movs	r2, #0
1001f596:	069e      	lsls	r6, r3, #26
1001f598:	6062      	str	r2, [r4, #4]
1001f59a:	d45d      	bmi.n	1001f658 <__srefill_r+0xe8>
1001f59c:	0758      	lsls	r0, r3, #29
1001f59e:	d419      	bmi.n	1001f5d4 <__srefill_r+0x64>
1001f5a0:	06d9      	lsls	r1, r3, #27
1001f5a2:	d55c      	bpl.n	1001f65e <__srefill_r+0xee>
1001f5a4:	071a      	lsls	r2, r3, #28
1001f5a6:	d439      	bmi.n	1001f61c <__srefill_r+0xac>
1001f5a8:	f043 0304 	orr.w	r3, r3, #4
1001f5ac:	81a3      	strh	r3, [r4, #12]
1001f5ae:	6923      	ldr	r3, [r4, #16]
1001f5b0:	2b00      	cmp	r3, #0
1001f5b2:	d03f      	beq.n	1001f634 <__srefill_r+0xc4>
1001f5b4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
1001f5b8:	07b3      	lsls	r3, r6, #30
1001f5ba:	d11e      	bne.n	1001f5fa <__srefill_r+0x8a>
1001f5bc:	6922      	ldr	r2, [r4, #16]
1001f5be:	6a26      	ldr	r6, [r4, #32]
1001f5c0:	6963      	ldr	r3, [r4, #20]
1001f5c2:	69e1      	ldr	r1, [r4, #28]
1001f5c4:	6022      	str	r2, [r4, #0]
1001f5c6:	4628      	mov	r0, r5
1001f5c8:	47b0      	blx	r6
1001f5ca:	2800      	cmp	r0, #0
1001f5cc:	6060      	str	r0, [r4, #4]
1001f5ce:	dd39      	ble.n	1001f644 <__srefill_r+0xd4>
1001f5d0:	2000      	movs	r0, #0
1001f5d2:	bd70      	pop	{r4, r5, r6, pc}
1001f5d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
1001f5d6:	2900      	cmp	r1, #0
1001f5d8:	d0e9      	beq.n	1001f5ae <__srefill_r+0x3e>
1001f5da:	f104 0340 	add.w	r3, r4, #64	@ 0x40
1001f5de:	4299      	cmp	r1, r3
1001f5e0:	d002      	beq.n	1001f5e8 <__srefill_r+0x78>
1001f5e2:	4628      	mov	r0, r5
1001f5e4:	f7fb ff0c 	bl	1001b400 <_free_r>
1001f5e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
1001f5ea:	6063      	str	r3, [r4, #4]
1001f5ec:	2200      	movs	r2, #0
1001f5ee:	6322      	str	r2, [r4, #48]	@ 0x30
1001f5f0:	2b00      	cmp	r3, #0
1001f5f2:	d0dc      	beq.n	1001f5ae <__srefill_r+0x3e>
1001f5f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
1001f5f6:	6023      	str	r3, [r4, #0]
1001f5f8:	e7ea      	b.n	1001f5d0 <__srefill_r+0x60>
1001f5fa:	2301      	movs	r3, #1
1001f5fc:	81a3      	strh	r3, [r4, #12]
1001f5fe:	4a1b      	ldr	r2, [pc, #108]	@ (1001f66c <__srefill_r+0xfc>)
1001f600:	491b      	ldr	r1, [pc, #108]	@ (1001f670 <__srefill_r+0x100>)
1001f602:	481c      	ldr	r0, [pc, #112]	@ (1001f674 <__srefill_r+0x104>)
1001f604:	f7fa f826 	bl	10019654 <_fwalk_sglue>
1001f608:	f006 0309 	and.w	r3, r6, #9
1001f60c:	2b09      	cmp	r3, #9
1001f60e:	81a6      	strh	r6, [r4, #12]
1001f610:	d1d4      	bne.n	1001f5bc <__srefill_r+0x4c>
1001f612:	4621      	mov	r1, r4
1001f614:	4628      	mov	r0, r5
1001f616:	f7f9 fc1b 	bl	10018e50 <__sflush_r>
1001f61a:	e7cf      	b.n	1001f5bc <__srefill_r+0x4c>
1001f61c:	4621      	mov	r1, r4
1001f61e:	4628      	mov	r0, r5
1001f620:	f7f9 fcaa 	bl	10018f78 <_fflush_r>
1001f624:	b9c0      	cbnz	r0, 1001f658 <__srefill_r+0xe8>
1001f626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001f62a:	60a0      	str	r0, [r4, #8]
1001f62c:	f023 0308 	bic.w	r3, r3, #8
1001f630:	61a0      	str	r0, [r4, #24]
1001f632:	e7b9      	b.n	1001f5a8 <__srefill_r+0x38>
1001f634:	4621      	mov	r1, r4
1001f636:	4628      	mov	r0, r5
1001f638:	f7fd fdc2 	bl	1001d1c0 <__smakebuf_r>
1001f63c:	e7ba      	b.n	1001f5b4 <__srefill_r+0x44>
1001f63e:	f7f9 fe17 	bl	10019270 <__sinit>
1001f642:	e79c      	b.n	1001f57e <__srefill_r+0xe>
1001f644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001f648:	bf17      	itett	ne
1001f64a:	2200      	movne	r2, #0
1001f64c:	f043 0320 	orreq.w	r3, r3, #32
1001f650:	f043 0340 	orrne.w	r3, r3, #64	@ 0x40
1001f654:	6062      	strne	r2, [r4, #4]
1001f656:	81a3      	strh	r3, [r4, #12]
1001f658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001f65c:	bd70      	pop	{r4, r5, r6, pc}
1001f65e:	2209      	movs	r2, #9
1001f660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001f664:	602a      	str	r2, [r5, #0]
1001f666:	81a3      	strh	r3, [r4, #12]
1001f668:	e7f6      	b.n	1001f658 <__srefill_r+0xe8>
1001f66a:	bf00      	nop
1001f66c:	20000468 	.word	0x20000468
1001f670:	1001f555 	.word	0x1001f555
1001f674:	200005e8 	.word	0x200005e8

1001f678 <__srget_r>:
1001f678:	b538      	push	{r3, r4, r5, lr}
1001f67a:	460c      	mov	r4, r1
1001f67c:	4605      	mov	r5, r0
1001f67e:	b108      	cbz	r0, 1001f684 <__srget_r+0xc>
1001f680:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001f682:	b163      	cbz	r3, 1001f69e <__srget_r+0x26>
1001f684:	4621      	mov	r1, r4
1001f686:	4628      	mov	r0, r5
1001f688:	f7ff ff72 	bl	1001f570 <__srefill_r>
1001f68c:	b950      	cbnz	r0, 1001f6a4 <__srget_r+0x2c>
1001f68e:	e9d4 2300 	ldrd	r2, r3, [r4]
1001f692:	1c51      	adds	r1, r2, #1
1001f694:	3b01      	subs	r3, #1
1001f696:	e9c4 1300 	strd	r1, r3, [r4]
1001f69a:	7810      	ldrb	r0, [r2, #0]
1001f69c:	bd38      	pop	{r3, r4, r5, pc}
1001f69e:	f7f9 fde7 	bl	10019270 <__sinit>
1001f6a2:	e7ef      	b.n	1001f684 <__srget_r+0xc>
1001f6a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001f6a8:	bd38      	pop	{r3, r4, r5, pc}
1001f6aa:	bf00      	nop

1001f6ac <_fclose_r>:
1001f6ac:	b570      	push	{r4, r5, r6, lr}
1001f6ae:	2900      	cmp	r1, #0
1001f6b0:	d03f      	beq.n	1001f732 <_fclose_r+0x86>
1001f6b2:	4605      	mov	r5, r0
1001f6b4:	460c      	mov	r4, r1
1001f6b6:	b110      	cbz	r0, 1001f6be <_fclose_r+0x12>
1001f6b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001f6ba:	2b00      	cmp	r3, #0
1001f6bc:	d03c      	beq.n	1001f738 <_fclose_r+0x8c>
1001f6be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001f6c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1001f6c4:	07de      	lsls	r6, r3, #31
1001f6c6:	d432      	bmi.n	1001f72e <_fclose_r+0x82>
1001f6c8:	0590      	lsls	r0, r2, #22
1001f6ca:	d538      	bpl.n	1001f73e <_fclose_r+0x92>
1001f6cc:	4621      	mov	r1, r4
1001f6ce:	4628      	mov	r0, r5
1001f6d0:	f7f9 fbbe 	bl	10018e50 <__sflush_r>
1001f6d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
1001f6d6:	4606      	mov	r6, r0
1001f6d8:	b133      	cbz	r3, 1001f6e8 <_fclose_r+0x3c>
1001f6da:	69e1      	ldr	r1, [r4, #28]
1001f6dc:	4628      	mov	r0, r5
1001f6de:	4798      	blx	r3
1001f6e0:	2800      	cmp	r0, #0
1001f6e2:	bfb8      	it	lt
1001f6e4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
1001f6e8:	89a3      	ldrh	r3, [r4, #12]
1001f6ea:	061a      	lsls	r2, r3, #24
1001f6ec:	d439      	bmi.n	1001f762 <_fclose_r+0xb6>
1001f6ee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
1001f6f0:	b141      	cbz	r1, 1001f704 <_fclose_r+0x58>
1001f6f2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
1001f6f6:	4299      	cmp	r1, r3
1001f6f8:	d002      	beq.n	1001f700 <_fclose_r+0x54>
1001f6fa:	4628      	mov	r0, r5
1001f6fc:	f7fb fe80 	bl	1001b400 <_free_r>
1001f700:	2300      	movs	r3, #0
1001f702:	6323      	str	r3, [r4, #48]	@ 0x30
1001f704:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1001f706:	b121      	cbz	r1, 1001f712 <_fclose_r+0x66>
1001f708:	4628      	mov	r0, r5
1001f70a:	f7fb fe79 	bl	1001b400 <_free_r>
1001f70e:	2300      	movs	r3, #0
1001f710:	6463      	str	r3, [r4, #68]	@ 0x44
1001f712:	f7f9 fdcb 	bl	100192ac <__sfp_lock_acquire>
1001f716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001f718:	2200      	movs	r2, #0
1001f71a:	07db      	lsls	r3, r3, #31
1001f71c:	81a2      	strh	r2, [r4, #12]
1001f71e:	d51c      	bpl.n	1001f75a <_fclose_r+0xae>
1001f720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001f722:	f7fa fc77 	bl	1001a014 <__retarget_lock_close_recursive>
1001f726:	f7f9 fdc7 	bl	100192b8 <__sfp_lock_release>
1001f72a:	4630      	mov	r0, r6
1001f72c:	bd70      	pop	{r4, r5, r6, pc}
1001f72e:	2a00      	cmp	r2, #0
1001f730:	d1cc      	bne.n	1001f6cc <_fclose_r+0x20>
1001f732:	2600      	movs	r6, #0
1001f734:	4630      	mov	r0, r6
1001f736:	bd70      	pop	{r4, r5, r6, pc}
1001f738:	f7f9 fd9a 	bl	10019270 <__sinit>
1001f73c:	e7bf      	b.n	1001f6be <_fclose_r+0x12>
1001f73e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001f740:	f7fa fc6a 	bl	1001a018 <__retarget_lock_acquire_recursive>
1001f744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001f748:	2b00      	cmp	r3, #0
1001f74a:	d1bf      	bne.n	1001f6cc <_fclose_r+0x20>
1001f74c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001f74e:	07d9      	lsls	r1, r3, #31
1001f750:	d4ef      	bmi.n	1001f732 <_fclose_r+0x86>
1001f752:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001f754:	f7fa fc62 	bl	1001a01c <__retarget_lock_release_recursive>
1001f758:	e7eb      	b.n	1001f732 <_fclose_r+0x86>
1001f75a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001f75c:	f7fa fc5e 	bl	1001a01c <__retarget_lock_release_recursive>
1001f760:	e7de      	b.n	1001f720 <_fclose_r+0x74>
1001f762:	6921      	ldr	r1, [r4, #16]
1001f764:	4628      	mov	r0, r5
1001f766:	f7fb fe4b 	bl	1001b400 <_free_r>
1001f76a:	e7c0      	b.n	1001f6ee <_fclose_r+0x42>

1001f76c <__sccl>:
1001f76c:	b570      	push	{r4, r5, r6, lr}
1001f76e:	780c      	ldrb	r4, [r1, #0]
1001f770:	2c5e      	cmp	r4, #94	@ 0x5e
1001f772:	4686      	mov	lr, r0
1001f774:	d026      	beq.n	1001f7c4 <__sccl+0x58>
1001f776:	2300      	movs	r3, #0
1001f778:	1c48      	adds	r0, r1, #1
1001f77a:	469c      	mov	ip, r3
1001f77c:	2200      	movs	r2, #0
1001f77e:	f363 0207 	bfi	r2, r3, #0, #8
1001f782:	f363 220f 	bfi	r2, r3, #8, #8
1001f786:	f363 4217 	bfi	r2, r3, #16, #8
1001f78a:	f363 621f 	bfi	r2, r3, #24, #8
1001f78e:	f50e 7180 	add.w	r1, lr, #256	@ 0x100
1001f792:	4673      	mov	r3, lr
1001f794:	f843 2b04 	str.w	r2, [r3], #4
1001f798:	428b      	cmp	r3, r1
1001f79a:	d1fb      	bne.n	1001f794 <__sccl+0x28>
1001f79c:	b184      	cbz	r4, 1001f7c0 <__sccl+0x54>
1001f79e:	f08c 0101 	eor.w	r1, ip, #1
1001f7a2:	f80e 1004 	strb.w	r1, [lr, r4]
1001f7a6:	1c45      	adds	r5, r0, #1
1001f7a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1001f7ac:	2b2d      	cmp	r3, #45	@ 0x2d
1001f7ae:	d00e      	beq.n	1001f7ce <__sccl+0x62>
1001f7b0:	2b5d      	cmp	r3, #93	@ 0x5d
1001f7b2:	d003      	beq.n	1001f7bc <__sccl+0x50>
1001f7b4:	b11b      	cbz	r3, 1001f7be <__sccl+0x52>
1001f7b6:	461c      	mov	r4, r3
1001f7b8:	4628      	mov	r0, r5
1001f7ba:	e7f2      	b.n	1001f7a2 <__sccl+0x36>
1001f7bc:	4628      	mov	r0, r5
1001f7be:	bd70      	pop	{r4, r5, r6, pc}
1001f7c0:	3801      	subs	r0, #1
1001f7c2:	bd70      	pop	{r4, r5, r6, pc}
1001f7c4:	2301      	movs	r3, #1
1001f7c6:	784c      	ldrb	r4, [r1, #1]
1001f7c8:	1c88      	adds	r0, r1, #2
1001f7ca:	469c      	mov	ip, r3
1001f7cc:	e7d6      	b.n	1001f77c <__sccl+0x10>
1001f7ce:	f890 c001 	ldrb.w	ip, [r0, #1]
1001f7d2:	f1bc 0f5d 	cmp.w	ip, #93	@ 0x5d
1001f7d6:	d0ee      	beq.n	1001f7b6 <__sccl+0x4a>
1001f7d8:	4564      	cmp	r4, ip
1001f7da:	dcec      	bgt.n	1001f7b6 <__sccl+0x4a>
1001f7dc:	1c66      	adds	r6, r4, #1
1001f7de:	3002      	adds	r0, #2
1001f7e0:	eb0e 0206 	add.w	r2, lr, r6
1001f7e4:	f802 1b01 	strb.w	r1, [r2], #1
1001f7e8:	eba2 030e 	sub.w	r3, r2, lr
1001f7ec:	3b01      	subs	r3, #1
1001f7ee:	459c      	cmp	ip, r3
1001f7f0:	dcf8      	bgt.n	1001f7e4 <__sccl+0x78>
1001f7f2:	ebac 0304 	sub.w	r3, ip, r4
1001f7f6:	3b01      	subs	r3, #1
1001f7f8:	4564      	cmp	r4, ip
1001f7fa:	bfa8      	it	ge
1001f7fc:	2300      	movge	r3, #0
1001f7fe:	3502      	adds	r5, #2
1001f800:	18f4      	adds	r4, r6, r3
1001f802:	e7d1      	b.n	1001f7a8 <__sccl+0x3c>
1001f804:	0000      	movs	r0, r0
	...

1001f808 <_strtod_l>:
1001f808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001f80c:	b09f      	sub	sp, #124	@ 0x7c
1001f80e:	460e      	mov	r6, r1
1001f810:	2100      	movs	r1, #0
1001f812:	9207      	str	r2, [sp, #28]
1001f814:	911a      	str	r1, [sp, #104]	@ 0x68
1001f816:	2200      	movs	r2, #0
1001f818:	2100      	movs	r1, #0
1001f81a:	e9cd 1204 	strd	r1, r2, [sp, #16]
1001f81e:	4683      	mov	fp, r0
1001f820:	4631      	mov	r1, r6
1001f822:	9119      	str	r1, [sp, #100]	@ 0x64
1001f824:	4688      	mov	r8, r1
1001f826:	f811 2b01 	ldrb.w	r2, [r1], #1
1001f82a:	2a2d      	cmp	r2, #45	@ 0x2d
1001f82c:	d85e      	bhi.n	1001f8ec <_strtod_l+0xe4>
1001f82e:	a001      	add	r0, pc, #4	@ (adr r0, 1001f834 <_strtod_l+0x2c>)
1001f830:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
1001f834:	1001fa05 	.word	0x1001fa05
1001f838:	1001f8ed 	.word	0x1001f8ed
1001f83c:	1001f8ed 	.word	0x1001f8ed
1001f840:	1001f8ed 	.word	0x1001f8ed
1001f844:	1001f8ed 	.word	0x1001f8ed
1001f848:	1001f8ed 	.word	0x1001f8ed
1001f84c:	1001f8ed 	.word	0x1001f8ed
1001f850:	1001f8ed 	.word	0x1001f8ed
1001f854:	1001f8ed 	.word	0x1001f8ed
1001f858:	1001f823 	.word	0x1001f823
1001f85c:	1001f823 	.word	0x1001f823
1001f860:	1001f823 	.word	0x1001f823
1001f864:	1001f823 	.word	0x1001f823
1001f868:	1001f823 	.word	0x1001f823
1001f86c:	1001f8ed 	.word	0x1001f8ed
1001f870:	1001f8ed 	.word	0x1001f8ed
1001f874:	1001f8ed 	.word	0x1001f8ed
1001f878:	1001f8ed 	.word	0x1001f8ed
1001f87c:	1001f8ed 	.word	0x1001f8ed
1001f880:	1001f8ed 	.word	0x1001f8ed
1001f884:	1001f8ed 	.word	0x1001f8ed
1001f888:	1001f8ed 	.word	0x1001f8ed
1001f88c:	1001f8ed 	.word	0x1001f8ed
1001f890:	1001f8ed 	.word	0x1001f8ed
1001f894:	1001f8ed 	.word	0x1001f8ed
1001f898:	1001f8ed 	.word	0x1001f8ed
1001f89c:	1001f8ed 	.word	0x1001f8ed
1001f8a0:	1001f8ed 	.word	0x1001f8ed
1001f8a4:	1001f8ed 	.word	0x1001f8ed
1001f8a8:	1001f8ed 	.word	0x1001f8ed
1001f8ac:	1001f8ed 	.word	0x1001f8ed
1001f8b0:	1001f8ed 	.word	0x1001f8ed
1001f8b4:	1001f823 	.word	0x1001f823
1001f8b8:	1001f8ed 	.word	0x1001f8ed
1001f8bc:	1001f8ed 	.word	0x1001f8ed
1001f8c0:	1001f8ed 	.word	0x1001f8ed
1001f8c4:	1001f8ed 	.word	0x1001f8ed
1001f8c8:	1001f8ed 	.word	0x1001f8ed
1001f8cc:	1001f8ed 	.word	0x1001f8ed
1001f8d0:	1001f8ed 	.word	0x1001f8ed
1001f8d4:	1001f8ed 	.word	0x1001f8ed
1001f8d8:	1001f8ed 	.word	0x1001f8ed
1001f8dc:	1001f8ed 	.word	0x1001f8ed
1001f8e0:	10020003 	.word	0x10020003
1001f8e4:	1001f8ed 	.word	0x1001f8ed
1001f8e8:	1002001b 	.word	0x1002001b
1001f8ec:	2100      	movs	r1, #0
1001f8ee:	9108      	str	r1, [sp, #32]
1001f8f0:	2a30      	cmp	r2, #48	@ 0x30
1001f8f2:	f000 8093 	beq.w	1001fa1c <_strtod_l+0x214>
1001f8f6:	2300      	movs	r3, #0
1001f8f8:	9309      	str	r3, [sp, #36]	@ 0x24
1001f8fa:	2a2f      	cmp	r2, #47	@ 0x2f
1001f8fc:	4617      	mov	r7, r2
1001f8fe:	f240 84ee 	bls.w	100202de <_strtod_l+0xad6>
1001f902:	f04f 0900 	mov.w	r9, #0
1001f906:	4640      	mov	r0, r8
1001f908:	464d      	mov	r5, r9
1001f90a:	464c      	mov	r4, r9
1001f90c:	e013      	b.n	1001f936 <_strtod_l+0x12e>
1001f90e:	3001      	adds	r0, #1
1001f910:	2c08      	cmp	r4, #8
1001f912:	9019      	str	r0, [sp, #100]	@ 0x64
1001f914:	bfc8      	it	gt
1001f916:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
1001f91a:	7807      	ldrb	r7, [r0, #0]
1001f91c:	bfc6      	itte	gt
1001f91e:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
1001f922:	f1a2 0930 	subgt.w	r9, r2, #48	@ 0x30
1001f926:	f1a3 0530 	suble.w	r5, r3, #48	@ 0x30
1001f92a:	2f2f      	cmp	r7, #47	@ 0x2f
1001f92c:	f104 0401 	add.w	r4, r4, #1
1001f930:	463a      	mov	r2, r7
1001f932:	f340 80b7 	ble.w	1001faa4 <_strtod_l+0x29c>
1001f936:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1001f93a:	2f39      	cmp	r7, #57	@ 0x39
1001f93c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1001f940:	dde5      	ble.n	1001f90e <_strtod_l+0x106>
1001f942:	4974      	ldr	r1, [pc, #464]	@ (1001fb14 <_strtod_l+0x30c>)
1001f944:	2201      	movs	r2, #1
1001f946:	f7fa f8cb 	bl	10019ae0 <strncmp>
1001f94a:	2800      	cmp	r0, #0
1001f94c:	d17b      	bne.n	1001fa46 <_strtod_l+0x23e>
1001f94e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1001f950:	4613      	mov	r3, r2
1001f952:	3201      	adds	r2, #1
1001f954:	9219      	str	r2, [sp, #100]	@ 0x64
1001f956:	785f      	ldrb	r7, [r3, #1]
1001f958:	2c00      	cmp	r4, #0
1001f95a:	f040 8587 	bne.w	1002046c <_strtod_l+0xc64>
1001f95e:	2f30      	cmp	r7, #48	@ 0x30
1001f960:	f040 851f 	bne.w	100203a2 <_strtod_l+0xb9a>
1001f964:	4613      	mov	r3, r2
1001f966:	4618      	mov	r0, r3
1001f968:	3301      	adds	r3, #1
1001f96a:	9319      	str	r3, [sp, #100]	@ 0x64
1001f96c:	781f      	ldrb	r7, [r3, #0]
1001f96e:	2f30      	cmp	r7, #48	@ 0x30
1001f970:	d0f9      	beq.n	1001f966 <_strtod_l+0x15e>
1001f972:	f1c2 0201 	rsb	r2, r2, #1
1001f976:	4410      	add	r0, r2
1001f978:	f1a7 0331 	sub.w	r3, r7, #49	@ 0x31
1001f97c:	2b08      	cmp	r3, #8
1001f97e:	d834      	bhi.n	1001f9ea <_strtod_l+0x1e2>
1001f980:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
1001f984:	1c43      	adds	r3, r0, #1
1001f986:	f1a7 0e30 	sub.w	lr, r7, #48	@ 0x30
1001f98a:	930e      	str	r3, [sp, #56]	@ 0x38
1001f98c:	2401      	movs	r4, #1
1001f98e:	4647      	mov	r7, r8
1001f990:	f04f 0a00 	mov.w	sl, #0
1001f994:	eb05 0585 	add.w	r5, r5, r5, lsl #2
1001f998:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
1001f99c:	2000      	movs	r0, #0
1001f99e:	1c7b      	adds	r3, r7, #1
1001f9a0:	9319      	str	r3, [sp, #100]	@ 0x64
1001f9a2:	787f      	ldrb	r7, [r7, #1]
1001f9a4:	f1a7 0230 	sub.w	r2, r7, #48	@ 0x30
1001f9a8:	2a09      	cmp	r2, #9
1001f9aa:	f200 8322 	bhi.w	1001fff2 <_strtod_l+0x7ea>
1001f9ae:	9f19      	ldr	r7, [sp, #100]	@ 0x64
1001f9b0:	3001      	adds	r0, #1
1001f9b2:	4696      	mov	lr, r2
1001f9b4:	2a00      	cmp	r2, #0
1001f9b6:	d0f2      	beq.n	1001f99e <_strtod_l+0x196>
1001f9b8:	2801      	cmp	r0, #1
1001f9ba:	f000 86e5 	beq.w	10020788 <_strtod_l+0xf80>
1001f9be:	eb00 0c04 	add.w	ip, r0, r4
1001f9c2:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
1001f9c6:	e003      	b.n	1001f9d0 <_strtod_l+0x1c8>
1001f9c8:	005d      	lsls	r5, r3, #1
1001f9ca:	428c      	cmp	r4, r1
1001f9cc:	f000 8477 	beq.w	100202be <_strtod_l+0xab6>
1001f9d0:	2c08      	cmp	r4, #8
1001f9d2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1001f9d6:	f104 0401 	add.w	r4, r4, #1
1001f9da:	d9f5      	bls.n	1001f9c8 <_strtod_l+0x1c0>
1001f9dc:	2c10      	cmp	r4, #16
1001f9de:	bfdc      	itt	le
1001f9e0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
1001f9e4:	ea4f 0949 	movle.w	r9, r9, lsl #1
1001f9e8:	e7ef      	b.n	1001f9ca <_strtod_l+0x1c2>
1001f9ea:	2f65      	cmp	r7, #101	@ 0x65
1001f9ec:	f040 8318 	bne.w	10020020 <_strtod_l+0x818>
1001f9f0:	f04f 0a00 	mov.w	sl, #0
1001f9f4:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
1001f9f8:	f04f 0c01 	mov.w	ip, #1
1001f9fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001f9fe:	4303      	orrs	r3, r0
1001fa00:	f040 82fd 	bne.w	1001fffe <_strtod_l+0x7f6>
1001fa04:	9b07      	ldr	r3, [sp, #28]
1001fa06:	f04f 0800 	mov.w	r8, #0
1001fa0a:	f04f 0900 	mov.w	r9, #0
1001fa0e:	b103      	cbz	r3, 1001fa12 <_strtod_l+0x20a>
1001fa10:	601e      	str	r6, [r3, #0]
1001fa12:	4640      	mov	r0, r8
1001fa14:	4649      	mov	r1, r9
1001fa16:	b01f      	add	sp, #124	@ 0x7c
1001fa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001fa1c:	f898 2001 	ldrb.w	r2, [r8, #1]
1001fa20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
1001fa24:	2a58      	cmp	r2, #88	@ 0x58
1001fa26:	bf18      	it	ne
1001fa28:	4643      	movne	r3, r8
1001fa2a:	f000 83fc 	beq.w	10020226 <_strtod_l+0xa1e>
1001fa2e:	3301      	adds	r3, #1
1001fa30:	9319      	str	r3, [sp, #100]	@ 0x64
1001fa32:	781a      	ldrb	r2, [r3, #0]
1001fa34:	2a30      	cmp	r2, #48	@ 0x30
1001fa36:	d0fa      	beq.n	1001fa2e <_strtod_l+0x226>
1001fa38:	4698      	mov	r8, r3
1001fa3a:	2a00      	cmp	r2, #0
1001fa3c:	f000 82bb 	beq.w	1001ffb6 <_strtod_l+0x7ae>
1001fa40:	2301      	movs	r3, #1
1001fa42:	9309      	str	r3, [sp, #36]	@ 0x24
1001fa44:	e759      	b.n	1001f8fa <_strtod_l+0xf2>
1001fa46:	2000      	movs	r0, #0
1001fa48:	46a2      	mov	sl, r4
1001fa4a:	900e      	str	r0, [sp, #56]	@ 0x38
1001fa4c:	4684      	mov	ip, r0
1001fa4e:	2f65      	cmp	r7, #101	@ 0x65
1001fa50:	d035      	beq.n	1001fabe <_strtod_l+0x2b6>
1001fa52:	2f45      	cmp	r7, #69	@ 0x45
1001fa54:	d033      	beq.n	1001fabe <_strtod_l+0x2b6>
1001fa56:	2300      	movs	r3, #0
1001fa58:	930f      	str	r3, [sp, #60]	@ 0x3c
1001fa5a:	2c00      	cmp	r4, #0
1001fa5c:	f040 8081 	bne.w	1001fb62 <_strtod_l+0x35a>
1001fa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001fa62:	4303      	orrs	r3, r0
1001fa64:	f040 82a7 	bne.w	1001ffb6 <_strtod_l+0x7ae>
1001fa68:	f1bc 0f00 	cmp.w	ip, #0
1001fa6c:	d1ca      	bne.n	1001fa04 <_strtod_l+0x1fc>
1001fa6e:	2f69      	cmp	r7, #105	@ 0x69
1001fa70:	f000 847e 	beq.w	10020370 <_strtod_l+0xb68>
1001fa74:	f300 83a3 	bgt.w	100201be <_strtod_l+0x9b6>
1001fa78:	2f49      	cmp	r7, #73	@ 0x49
1001fa7a:	f000 8479 	beq.w	10020370 <_strtod_l+0xb68>
1001fa7e:	2f4e      	cmp	r7, #78	@ 0x4e
1001fa80:	d1c0      	bne.n	1001fa04 <_strtod_l+0x1fc>
1001fa82:	4925      	ldr	r1, [pc, #148]	@ (1001fb18 <_strtod_l+0x310>)
1001fa84:	a819      	add	r0, sp, #100	@ 0x64
1001fa86:	f001 ffd5 	bl	10021a34 <__match>
1001fa8a:	2800      	cmp	r0, #0
1001fa8c:	d0ba      	beq.n	1001fa04 <_strtod_l+0x1fc>
1001fa8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001fa90:	781b      	ldrb	r3, [r3, #0]
1001fa92:	2b28      	cmp	r3, #40	@ 0x28
1001fa94:	f000 85a2 	beq.w	100205dc <_strtod_l+0xdd4>
1001fa98:	4820      	ldr	r0, [pc, #128]	@ (1001fb1c <_strtod_l+0x314>)
1001fa9a:	f001 fb67 	bl	1002116c <nan>
1001fa9e:	4680      	mov	r8, r0
1001faa0:	4689      	mov	r9, r1
1001faa2:	e28c      	b.n	1001ffbe <_strtod_l+0x7b6>
1001faa4:	491b      	ldr	r1, [pc, #108]	@ (1001fb14 <_strtod_l+0x30c>)
1001faa6:	2201      	movs	r2, #1
1001faa8:	f7fa f81a 	bl	10019ae0 <strncmp>
1001faac:	2800      	cmp	r0, #0
1001faae:	d1ca      	bne.n	1001fa46 <_strtod_l+0x23e>
1001fab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001fab2:	900e      	str	r0, [sp, #56]	@ 0x38
1001fab4:	1c5a      	adds	r2, r3, #1
1001fab6:	9219      	str	r2, [sp, #100]	@ 0x64
1001fab8:	785f      	ldrb	r7, [r3, #1]
1001faba:	46a2      	mov	sl, r4
1001fabc:	e772      	b.n	1001f9a4 <_strtod_l+0x19c>
1001fabe:	2c00      	cmp	r4, #0
1001fac0:	d09c      	beq.n	1001f9fc <_strtod_l+0x1f4>
1001fac2:	9e19      	ldr	r6, [sp, #100]	@ 0x64
1001fac4:	1c73      	adds	r3, r6, #1
1001fac6:	9319      	str	r3, [sp, #100]	@ 0x64
1001fac8:	7877      	ldrb	r7, [r6, #1]
1001faca:	2f2b      	cmp	r7, #43	@ 0x2b
1001facc:	f000 8294 	beq.w	1001fff8 <_strtod_l+0x7f0>
1001fad0:	2f2d      	cmp	r7, #45	@ 0x2d
1001fad2:	f000 8284 	beq.w	1001ffde <_strtod_l+0x7d6>
1001fad6:	2300      	movs	r3, #0
1001fad8:	930a      	str	r3, [sp, #40]	@ 0x28
1001fada:	f1a7 0130 	sub.w	r1, r7, #48	@ 0x30
1001fade:	2909      	cmp	r1, #9
1001fae0:	f200 8283 	bhi.w	1001ffea <_strtod_l+0x7e2>
1001fae4:	2f30      	cmp	r7, #48	@ 0x30
1001fae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001fae8:	d10a      	bne.n	1001fb00 <_strtod_l+0x2f8>
1001faea:	3301      	adds	r3, #1
1001faec:	9319      	str	r3, [sp, #100]	@ 0x64
1001faee:	781f      	ldrb	r7, [r3, #0]
1001faf0:	2f30      	cmp	r7, #48	@ 0x30
1001faf2:	d0fa      	beq.n	1001faea <_strtod_l+0x2e2>
1001faf4:	f1a7 0231 	sub.w	r2, r7, #49	@ 0x31
1001faf8:	2a08      	cmp	r2, #8
1001fafa:	d8ac      	bhi.n	1001fa56 <_strtod_l+0x24e>
1001fafc:	f1a7 0130 	sub.w	r1, r7, #48	@ 0x30
1001fb00:	1c5a      	adds	r2, r3, #1
1001fb02:	9219      	str	r2, [sp, #100]	@ 0x64
1001fb04:	785f      	ldrb	r7, [r3, #1]
1001fb06:	2f2f      	cmp	r7, #47	@ 0x2f
1001fb08:	f340 83fc 	ble.w	10020304 <_strtod_l+0xafc>
1001fb0c:	4696      	mov	lr, r2
1001fb0e:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
1001fb12:	e00e      	b.n	1001fb32 <_strtod_l+0x32a>
1001fb14:	1002c1c8 	.word	0x1002c1c8
1001fb18:	1002c554 	.word	0x1002c554
1001fb1c:	1002c5b4 	.word	0x1002c5b4
1001fb20:	3201      	adds	r2, #1
1001fb22:	9219      	str	r2, [sp, #100]	@ 0x64
1001fb24:	f89e 7001 	ldrb.w	r7, [lr, #1]
1001fb28:	2f2f      	cmp	r7, #47	@ 0x2f
1001fb2a:	f1a8 0130 	sub.w	r1, r8, #48	@ 0x30
1001fb2e:	dd06      	ble.n	1001fb3e <_strtod_l+0x336>
1001fb30:	4696      	mov	lr, r2
1001fb32:	eb01 0881 	add.w	r8, r1, r1, lsl #2
1001fb36:	2f39      	cmp	r7, #57	@ 0x39
1001fb38:	eb07 0848 	add.w	r8, r7, r8, lsl #1
1001fb3c:	ddf0      	ble.n	1001fb20 <_strtod_l+0x318>
1001fb3e:	1ad2      	subs	r2, r2, r3
1001fb40:	2a08      	cmp	r2, #8
1001fb42:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
1001fb46:	f340 83dd 	ble.w	10020304 <_strtod_l+0xafc>
1001fb4a:	f644 631f 	movw	r3, #19999	@ 0x4e1f
1001fb4e:	930f      	str	r3, [sp, #60]	@ 0x3c
1001fb50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001fb52:	2b00      	cmp	r3, #0
1001fb54:	d081      	beq.n	1001fa5a <_strtod_l+0x252>
1001fb56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001fb58:	425b      	negs	r3, r3
1001fb5a:	930f      	str	r3, [sp, #60]	@ 0x3c
1001fb5c:	2c00      	cmp	r4, #0
1001fb5e:	f43f af7f 	beq.w	1001fa60 <_strtod_l+0x258>
1001fb62:	4628      	mov	r0, r5
1001fb64:	f002 fb92 	bl	1002228c <__aeabi_ui2d>
1001fb68:	4602      	mov	r2, r0
1001fb6a:	460b      	mov	r3, r1
1001fb6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
1001fb70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
1001fb74:	f1ba 0f00 	cmp.w	sl, #0
1001fb78:	bf08      	it	eq
1001fb7a:	46a2      	moveq	sl, r4
1001fb7c:	2c10      	cmp	r4, #16
1001fb7e:	eba3 0302 	sub.w	r3, r3, r2
1001fb82:	4626      	mov	r6, r4
1001fb84:	bfa8      	it	ge
1001fb86:	2610      	movge	r6, #16
1001fb88:	2c09      	cmp	r4, #9
1001fb8a:	930b      	str	r3, [sp, #44]	@ 0x2c
1001fb8c:	dd16      	ble.n	1001fbbc <_strtod_l+0x3b4>
1001fb8e:	4b4f      	ldr	r3, [pc, #316]	@ (1001fccc <_strtod_l+0x4c4>)
1001fb90:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1001fb94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
1001fb98:	f002 fbf2 	bl	10022380 <__aeabi_dmul>
1001fb9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fba0:	4648      	mov	r0, r9
1001fba2:	f002 fb73 	bl	1002228c <__aeabi_ui2d>
1001fba6:	4602      	mov	r2, r0
1001fba8:	460b      	mov	r3, r1
1001fbaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001fbae:	f002 fa31 	bl	10022014 <__adddf3>
1001fbb2:	2c0f      	cmp	r4, #15
1001fbb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fbb8:	f300 81a7 	bgt.w	1001ff0a <_strtod_l+0x702>
1001fbbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001fbbe:	2b00      	cmp	r3, #0
1001fbc0:	f000 8301 	beq.w	100201c6 <_strtod_l+0x9be>
1001fbc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001fbc6:	f340 8231 	ble.w	1002002c <_strtod_l+0x824>
1001fbca:	2b16      	cmp	r3, #22
1001fbcc:	f340 83a1 	ble.w	10020312 <_strtod_l+0xb0a>
1001fbd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001fbd2:	f1c4 0325 	rsb	r3, r4, #37	@ 0x25
1001fbd6:	4293      	cmp	r3, r2
1001fbd8:	f280 8432 	bge.w	10020440 <_strtod_l+0xc38>
1001fbdc:	1ba6      	subs	r6, r4, r6
1001fbde:	4416      	add	r6, r2
1001fbe0:	f016 000f 	ands.w	r0, r6, #15
1001fbe4:	d00a      	beq.n	1001fbfc <_strtod_l+0x3f4>
1001fbe6:	4939      	ldr	r1, [pc, #228]	@ (1001fccc <_strtod_l+0x4c4>)
1001fbe8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
1001fbec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001fbf0:	e9d1 0100 	ldrd	r0, r1, [r1]
1001fbf4:	f002 fbc4 	bl	10022380 <__aeabi_dmul>
1001fbf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fbfc:	f036 030f 	bics.w	r3, r6, #15
1001fc00:	d046      	beq.n	1001fc90 <_strtod_l+0x488>
1001fc02:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
1001fc06:	f300 834e 	bgt.w	100202a6 <_strtod_l+0xa9e>
1001fc0a:	2b10      	cmp	r3, #16
1001fc0c:	4a30      	ldr	r2, [pc, #192]	@ (1001fcd0 <_strtod_l+0x4c8>)
1001fc0e:	ea4f 1623 	mov.w	r6, r3, asr #4
1001fc12:	f340 8539 	ble.w	10020688 <_strtod_l+0xe80>
1001fc16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001fc1a:	2300      	movs	r3, #0
1001fc1c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
1001fc20:	4617      	mov	r7, r2
1001fc22:	4699      	mov	r9, r3
1001fc24:	4690      	mov	r8, r2
1001fc26:	f016 0f01 	tst.w	r6, #1
1001fc2a:	f109 0901 	add.w	r9, r9, #1
1001fc2e:	ea4f 0666 	mov.w	r6, r6, asr #1
1001fc32:	d004      	beq.n	1001fc3e <_strtod_l+0x436>
1001fc34:	e9d7 2300 	ldrd	r2, r3, [r7]
1001fc38:	f002 fba2 	bl	10022380 <__aeabi_dmul>
1001fc3c:	2301      	movs	r3, #1
1001fc3e:	2e01      	cmp	r6, #1
1001fc40:	f107 0708 	add.w	r7, r7, #8
1001fc44:	d1ef      	bne.n	1001fc26 <_strtod_l+0x41e>
1001fc46:	4642      	mov	r2, r8
1001fc48:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
1001fc4c:	b10b      	cbz	r3, 1001fc52 <_strtod_l+0x44a>
1001fc4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fc52:	9b05      	ldr	r3, [sp, #20]
1001fc54:	f1a3 7354 	sub.w	r3, r3, #55574528	@ 0x3500000
1001fc58:	eb02 01c9 	add.w	r1, r2, r9, lsl #3
1001fc5c:	9305      	str	r3, [sp, #20]
1001fc5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001fc62:	e9d1 0100 	ldrd	r0, r1, [r1]
1001fc66:	f002 fb8b 	bl	10022380 <__aeabi_dmul>
1001fc6a:	4b1a      	ldr	r3, [pc, #104]	@ (1001fcd4 <_strtod_l+0x4cc>)
1001fc6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fc70:	400b      	ands	r3, r1
1001fc72:	460a      	mov	r2, r1
1001fc74:	4918      	ldr	r1, [pc, #96]	@ (1001fcd8 <_strtod_l+0x4d0>)
1001fc76:	428b      	cmp	r3, r1
1001fc78:	f200 8315 	bhi.w	100202a6 <_strtod_l+0xa9e>
1001fc7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
1001fc80:	428b      	cmp	r3, r1
1001fc82:	f240 8454 	bls.w	1002052e <_strtod_l+0xd26>
1001fc86:	4b15      	ldr	r3, [pc, #84]	@ (1001fcdc <_strtod_l+0x4d4>)
1001fc88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001fc8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
1001fc90:	2300      	movs	r3, #0
1001fc92:	930a      	str	r3, [sp, #40]	@ 0x28
1001fc94:	9500      	str	r5, [sp, #0]
1001fc96:	4623      	mov	r3, r4
1001fc98:	4652      	mov	r2, sl
1001fc9a:	4641      	mov	r1, r8
1001fc9c:	4658      	mov	r0, fp
1001fc9e:	f7fe ffbf 	bl	1001ec20 <__s2b>
1001fca2:	9014      	str	r0, [sp, #80]	@ 0x50
1001fca4:	2800      	cmp	r0, #0
1001fca6:	f000 82fe 	beq.w	100202a6 <_strtod_l+0xa9e>
1001fcaa:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
1001fcae:	1a9b      	subs	r3, r3, r2
1001fcb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001fcb2:	2a00      	cmp	r2, #0
1001fcb4:	bfa8      	it	ge
1001fcb6:	2300      	movge	r3, #0
1001fcb8:	930e      	str	r3, [sp, #56]	@ 0x38
1001fcba:	f04f 0a00 	mov.w	sl, #0
1001fcbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1001fcc2:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
1001fcc6:	9315      	str	r3, [sp, #84]	@ 0x54
1001fcc8:	e0df      	b.n	1001fe8a <_strtod_l+0x682>
1001fcca:	bf00      	nop
1001fccc:	1002c480 	.word	0x1002c480
1001fcd0:	1002c458 	.word	0x1002c458
1001fcd4:	7ff00000 	.word	0x7ff00000
1001fcd8:	7ca00000 	.word	0x7ca00000
1001fcdc:	7fefffff 	.word	0x7fefffff
1001fce0:	1ad2      	subs	r2, r2, r3
1001fce2:	2a1f      	cmp	r2, #31
1001fce4:	eba4 0402 	sub.w	r4, r4, r2
1001fce8:	f300 822e 	bgt.w	10020148 <_strtod_l+0x940>
1001fcec:	2301      	movs	r3, #1
1001fcee:	4093      	lsls	r3, r2
1001fcf0:	4698      	mov	r8, r3
1001fcf2:	2500      	movs	r5, #0
1001fcf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001fcf6:	4426      	add	r6, r4
1001fcf8:	443c      	add	r4, r7
1001fcfa:	42a7      	cmp	r7, r4
1001fcfc:	441e      	add	r6, r3
1001fcfe:	463b      	mov	r3, r7
1001fd00:	bfa8      	it	ge
1001fd02:	4623      	movge	r3, r4
1001fd04:	42b3      	cmp	r3, r6
1001fd06:	bfa8      	it	ge
1001fd08:	4633      	movge	r3, r6
1001fd0a:	2b00      	cmp	r3, #0
1001fd0c:	dd02      	ble.n	1001fd14 <_strtod_l+0x50c>
1001fd0e:	1ae4      	subs	r4, r4, r3
1001fd10:	1af6      	subs	r6, r6, r3
1001fd12:	1aff      	subs	r7, r7, r3
1001fd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001fd16:	2b00      	cmp	r3, #0
1001fd18:	f300 81bc 	bgt.w	10020094 <_strtod_l+0x88c>
1001fd1c:	2c00      	cmp	r4, #0
1001fd1e:	f300 81d2 	bgt.w	100200c6 <_strtod_l+0x8be>
1001fd22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001fd24:	2b00      	cmp	r3, #0
1001fd26:	f300 8205 	bgt.w	10020134 <_strtod_l+0x92c>
1001fd2a:	2e00      	cmp	r6, #0
1001fd2c:	f300 81f6 	bgt.w	1002011c <_strtod_l+0x914>
1001fd30:	2f00      	cmp	r7, #0
1001fd32:	dd08      	ble.n	1001fd46 <_strtod_l+0x53e>
1001fd34:	4651      	mov	r1, sl
1001fd36:	463a      	mov	r2, r7
1001fd38:	4658      	mov	r0, fp
1001fd3a:	f7ff f959 	bl	1001eff0 <__lshift>
1001fd3e:	4682      	mov	sl, r0
1001fd40:	2800      	cmp	r0, #0
1001fd42:	f000 81f4 	beq.w	1002012e <_strtod_l+0x926>
1001fd46:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001fd48:	464a      	mov	r2, r9
1001fd4a:	4658      	mov	r0, fp
1001fd4c:	f7ff f9e8 	bl	1001f120 <__mdiff>
1001fd50:	9009      	str	r0, [sp, #36]	@ 0x24
1001fd52:	2800      	cmp	r0, #0
1001fd54:	f000 81eb 	beq.w	1002012e <_strtod_l+0x926>
1001fd58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001fd5a:	2300      	movs	r3, #0
1001fd5c:	68d1      	ldr	r1, [r2, #12]
1001fd5e:	910f      	str	r1, [sp, #60]	@ 0x3c
1001fd60:	60d3      	str	r3, [r2, #12]
1001fd62:	4651      	mov	r1, sl
1001fd64:	f7ff f9bc 	bl	1001f0e0 <__mcmp>
1001fd68:	2800      	cmp	r0, #0
1001fd6a:	f2c0 8402 	blt.w	10020572 <_strtod_l+0xd6a>
1001fd6e:	9f05      	ldr	r7, [sp, #20]
1001fd70:	f000 8389 	beq.w	10020486 <_strtod_l+0xc7e>
1001fd74:	9809      	ldr	r0, [sp, #36]	@ 0x24
1001fd76:	4651      	mov	r1, sl
1001fd78:	f7ff fb68 	bl	1001f44c <__ratio>
1001fd7c:	2200      	movs	r2, #0
1001fd7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
1001fd82:	4604      	mov	r4, r0
1001fd84:	460d      	mov	r5, r1
1001fd86:	f002 fd77 	bl	10022878 <__aeabi_dcmple>
1001fd8a:	2800      	cmp	r0, #0
1001fd8c:	f000 8172 	beq.w	10020074 <_strtod_l+0x86c>
1001fd90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001fd92:	2b00      	cmp	r3, #0
1001fd94:	f040 81e4 	bne.w	10020160 <_strtod_l+0x958>
1001fd98:	9b04      	ldr	r3, [sp, #16]
1001fd9a:	2b00      	cmp	r3, #0
1001fd9c:	f040 8273 	bne.w	10020286 <_strtod_l+0xa7e>
1001fda0:	f3c7 0313 	ubfx	r3, r7, #0, #20
1001fda4:	2b00      	cmp	r3, #0
1001fda6:	f040 8211 	bne.w	100201cc <_strtod_l+0x9c4>
1001fdaa:	4bab      	ldr	r3, [pc, #684]	@ (10020058 <_strtod_l+0x850>)
1001fdac:	2200      	movs	r2, #0
1001fdae:	4620      	mov	r0, r4
1001fdb0:	4629      	mov	r1, r5
1001fdb2:	f002 fd57 	bl	10022864 <__aeabi_dcmplt>
1001fdb6:	2800      	cmp	r0, #0
1001fdb8:	f040 835c 	bne.w	10020474 <_strtod_l+0xc6c>
1001fdbc:	4ba7      	ldr	r3, [pc, #668]	@ (1002005c <_strtod_l+0x854>)
1001fdbe:	4620      	mov	r0, r4
1001fdc0:	4629      	mov	r1, r5
1001fdc2:	2200      	movs	r2, #0
1001fdc4:	f002 fadc 	bl	10022380 <__aeabi_dmul>
1001fdc8:	4603      	mov	r3, r0
1001fdca:	460c      	mov	r4, r1
1001fdcc:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
1001fdd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1001fdd4:	900c      	str	r0, [sp, #48]	@ 0x30
1001fdd6:	930d      	str	r3, [sp, #52]	@ 0x34
1001fdd8:	4ea1      	ldr	r6, [pc, #644]	@ (10020060 <_strtod_l+0x858>)
1001fdda:	4ba2      	ldr	r3, [pc, #648]	@ (10020064 <_strtod_l+0x85c>)
1001fddc:	403e      	ands	r6, r7
1001fdde:	429e      	cmp	r6, r3
1001fde0:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	@ 0x30
1001fde4:	f000 81c3 	beq.w	1002016e <_strtod_l+0x966>
1001fde8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001fdea:	b323      	cbz	r3, 1001fe36 <_strtod_l+0x62e>
1001fdec:	f1b6 6fd4 	cmp.w	r6, #111149056	@ 0x6a00000
1001fdf0:	d821      	bhi.n	1001fe36 <_strtod_l+0x62e>
1001fdf2:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	@ 0x48
1001fdf6:	a396      	add	r3, pc, #600	@ (adr r3, 10020050 <_strtod_l+0x848>)
1001fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
1001fdfc:	4638      	mov	r0, r7
1001fdfe:	4641      	mov	r1, r8
1001fe00:	f002 fd3a 	bl	10022878 <__aeabi_dcmple>
1001fe04:	b1a0      	cbz	r0, 1001fe30 <_strtod_l+0x628>
1001fe06:	4641      	mov	r1, r8
1001fe08:	4638      	mov	r0, r7
1001fe0a:	f002 fd91 	bl	10022930 <__aeabi_d2uiz>
1001fe0e:	2801      	cmp	r0, #1
1001fe10:	bf38      	it	cc
1001fe12:	2001      	movcc	r0, #1
1001fe14:	f002 fa3a 	bl	1002228c <__aeabi_ui2d>
1001fe18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001fe1a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
1001fe1e:	2b00      	cmp	r3, #0
1001fe20:	f040 82ba 	bne.w	10020398 <_strtod_l+0xb90>
1001fe24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1001fe28:	9016      	str	r0, [sp, #88]	@ 0x58
1001fe2a:	9317      	str	r3, [sp, #92]	@ 0x5c
1001fe2c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	@ 0x58
1001fe30:	f105 63d6 	add.w	r3, r5, #112197632	@ 0x6b00000
1001fe34:	1b9d      	subs	r5, r3, r6
1001fe36:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	@ 0x40
1001fe3a:	4638      	mov	r0, r7
1001fe3c:	4641      	mov	r1, r8
1001fe3e:	f7ff fa21 	bl	1001f284 <__ulp>
1001fe42:	4602      	mov	r2, r0
1001fe44:	460b      	mov	r3, r1
1001fe46:	4620      	mov	r0, r4
1001fe48:	4629      	mov	r1, r5
1001fe4a:	f002 fa99 	bl	10022380 <__aeabi_dmul>
1001fe4e:	463a      	mov	r2, r7
1001fe50:	4643      	mov	r3, r8
1001fe52:	f002 f8df 	bl	10022014 <__adddf3>
1001fe56:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fe5a:	460c      	mov	r4, r1
1001fe5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001fe5e:	b923      	cbnz	r3, 1001fe6a <_strtod_l+0x662>
1001fe60:	4b7f      	ldr	r3, [pc, #508]	@ (10020060 <_strtod_l+0x858>)
1001fe62:	4023      	ands	r3, r4
1001fe64:	429e      	cmp	r6, r3
1001fe66:	f000 81ba 	beq.w	100201de <_strtod_l+0x9d6>
1001fe6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001fe6c:	4658      	mov	r0, fp
1001fe6e:	f7fe fe7d 	bl	1001eb6c <_Bfree>
1001fe72:	4649      	mov	r1, r9
1001fe74:	4658      	mov	r0, fp
1001fe76:	f7fe fe79 	bl	1001eb6c <_Bfree>
1001fe7a:	4651      	mov	r1, sl
1001fe7c:	4658      	mov	r0, fp
1001fe7e:	f7fe fe75 	bl	1001eb6c <_Bfree>
1001fe82:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001fe84:	4658      	mov	r0, fp
1001fe86:	f7fe fe71 	bl	1001eb6c <_Bfree>
1001fe8a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
1001fe8c:	4658      	mov	r0, fp
1001fe8e:	6861      	ldr	r1, [r4, #4]
1001fe90:	f7fe fe46 	bl	1001eb20 <_Balloc>
1001fe94:	4681      	mov	r9, r0
1001fe96:	2800      	cmp	r0, #0
1001fe98:	f000 8149 	beq.w	1002012e <_strtod_l+0x926>
1001fe9c:	6922      	ldr	r2, [r4, #16]
1001fe9e:	3202      	adds	r2, #2
1001fea0:	f104 010c 	add.w	r1, r4, #12
1001fea4:	0092      	lsls	r2, r2, #2
1001fea6:	300c      	adds	r0, #12
1001fea8:	f7fa f90a 	bl	1001a0c0 <memcpy>
1001feac:	ab1c      	add	r3, sp, #112	@ 0x70
1001feae:	9301      	str	r3, [sp, #4]
1001feb0:	ab1b      	add	r3, sp, #108	@ 0x6c
1001feb2:	9300      	str	r3, [sp, #0]
1001feb4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1001feb8:	4658      	mov	r0, fp
1001feba:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
1001febe:	461a      	mov	r2, r3
1001fec0:	4623      	mov	r3, r4
1001fec2:	f7ff fa65 	bl	1001f390 <__d2b>
1001fec6:	901a      	str	r0, [sp, #104]	@ 0x68
1001fec8:	2800      	cmp	r0, #0
1001feca:	f000 8105 	beq.w	100200d8 <_strtod_l+0x8d0>
1001fece:	2101      	movs	r1, #1
1001fed0:	4658      	mov	r0, fp
1001fed2:	f7fe ff4f 	bl	1001ed74 <__i2b>
1001fed6:	4682      	mov	sl, r0
1001fed8:	2800      	cmp	r0, #0
1001feda:	f000 8128 	beq.w	1002012e <_strtod_l+0x926>
1001fede:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1001fee0:	2b00      	cmp	r3, #0
1001fee2:	f2c0 8117 	blt.w	10020114 <_strtod_l+0x90c>
1001fee6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001fee8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
1001feea:	189f      	adds	r7, r3, r2
1001feec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001feee:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1001fef0:	1a9b      	subs	r3, r3, r2
1001fef2:	4423      	add	r3, r4
1001fef4:	4a5c      	ldr	r2, [pc, #368]	@ (10020068 <_strtod_l+0x860>)
1001fef6:	3b01      	subs	r3, #1
1001fef8:	4293      	cmp	r3, r2
1001fefa:	f1c4 0436 	rsb	r4, r4, #54	@ 0x36
1001fefe:	f6ff aeef 	blt.w	1001fce0 <_strtod_l+0x4d8>
1001ff02:	2301      	movs	r3, #1
1001ff04:	2500      	movs	r5, #0
1001ff06:	4698      	mov	r8, r3
1001ff08:	e6f4      	b.n	1001fcf4 <_strtod_l+0x4ec>
1001ff0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ff0c:	1ba6      	subs	r6, r4, r6
1001ff0e:	441e      	add	r6, r3
1001ff10:	2e00      	cmp	r6, #0
1001ff12:	f73f ae65 	bgt.w	1001fbe0 <_strtod_l+0x3d8>
1001ff16:	f43f aebb 	beq.w	1001fc90 <_strtod_l+0x488>
1001ff1a:	4276      	negs	r6, r6
1001ff1c:	f016 020f 	ands.w	r2, r6, #15
1001ff20:	d00a      	beq.n	1001ff38 <_strtod_l+0x730>
1001ff22:	4b52      	ldr	r3, [pc, #328]	@ (1002006c <_strtod_l+0x864>)
1001ff24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1001ff28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
1001ff30:	f002 fb50 	bl	100225d4 <__aeabi_ddiv>
1001ff34:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001ff38:	1136      	asrs	r6, r6, #4
1001ff3a:	f43f aea9 	beq.w	1001fc90 <_strtod_l+0x488>
1001ff3e:	2e1f      	cmp	r6, #31
1001ff40:	dc36      	bgt.n	1001ffb0 <_strtod_l+0x7a8>
1001ff42:	f016 0310 	ands.w	r3, r6, #16
1001ff46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001ff4a:	bf18      	it	ne
1001ff4c:	236a      	movne	r3, #106	@ 0x6a
1001ff4e:	4f48      	ldr	r7, [pc, #288]	@ (10020070 <_strtod_l+0x868>)
1001ff50:	930a      	str	r3, [sp, #40]	@ 0x28
1001ff52:	2300      	movs	r3, #0
1001ff54:	07f2      	lsls	r2, r6, #31
1001ff56:	d504      	bpl.n	1001ff62 <_strtod_l+0x75a>
1001ff58:	e9d7 2300 	ldrd	r2, r3, [r7]
1001ff5c:	f002 fa10 	bl	10022380 <__aeabi_dmul>
1001ff60:	2301      	movs	r3, #1
1001ff62:	1076      	asrs	r6, r6, #1
1001ff64:	f107 0708 	add.w	r7, r7, #8
1001ff68:	d1f4      	bne.n	1001ff54 <_strtod_l+0x74c>
1001ff6a:	b10b      	cbz	r3, 1001ff70 <_strtod_l+0x768>
1001ff6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001ff70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001ff72:	b1a3      	cbz	r3, 1001ff9e <_strtod_l+0x796>
1001ff74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001ff78:	f3c1 520a 	ubfx	r2, r1, #20, #11
1001ff7c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
1001ff80:	2b00      	cmp	r3, #0
1001ff82:	dd0a      	ble.n	1001ff9a <_strtod_l+0x792>
1001ff84:	2b1f      	cmp	r3, #31
1001ff86:	f340 8398 	ble.w	100206ba <_strtod_l+0xeb2>
1001ff8a:	2000      	movs	r0, #0
1001ff8c:	2b34      	cmp	r3, #52	@ 0x34
1001ff8e:	9004      	str	r0, [sp, #16]
1001ff90:	f340 83ca 	ble.w	10020728 <_strtod_l+0xf20>
1001ff94:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
1001ff98:	9305      	str	r3, [sp, #20]
1001ff9a:	236a      	movs	r3, #106	@ 0x6a
1001ff9c:	930a      	str	r3, [sp, #40]	@ 0x28
1001ff9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001ffa2:	2200      	movs	r2, #0
1001ffa4:	2300      	movs	r3, #0
1001ffa6:	f002 fc53 	bl	10022850 <__aeabi_dcmpeq>
1001ffaa:	2800      	cmp	r0, #0
1001ffac:	f43f ae72 	beq.w	1001fc94 <_strtod_l+0x48c>
1001ffb0:	2322      	movs	r3, #34	@ 0x22
1001ffb2:	f8cb 3000 	str.w	r3, [fp]
1001ffb6:	f04f 0800 	mov.w	r8, #0
1001ffba:	f04f 0900 	mov.w	r9, #0
1001ffbe:	9a07      	ldr	r2, [sp, #28]
1001ffc0:	b10a      	cbz	r2, 1001ffc6 <_strtod_l+0x7be>
1001ffc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001ffc4:	6013      	str	r3, [r2, #0]
1001ffc6:	9b08      	ldr	r3, [sp, #32]
1001ffc8:	2b00      	cmp	r3, #0
1001ffca:	f43f ad22 	beq.w	1001fa12 <_strtod_l+0x20a>
1001ffce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
1001ffd2:	4699      	mov	r9, r3
1001ffd4:	4640      	mov	r0, r8
1001ffd6:	4649      	mov	r1, r9
1001ffd8:	b01f      	add	sp, #124	@ 0x7c
1001ffda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001ffde:	2301      	movs	r3, #1
1001ffe0:	930a      	str	r3, [sp, #40]	@ 0x28
1001ffe2:	1cb3      	adds	r3, r6, #2
1001ffe4:	9319      	str	r3, [sp, #100]	@ 0x64
1001ffe6:	78b7      	ldrb	r7, [r6, #2]
1001ffe8:	e577      	b.n	1001fada <_strtod_l+0x2d2>
1001ffea:	2300      	movs	r3, #0
1001ffec:	9619      	str	r6, [sp, #100]	@ 0x64
1001ffee:	930f      	str	r3, [sp, #60]	@ 0x3c
1001fff0:	e533      	b.n	1001fa5a <_strtod_l+0x252>
1001fff2:	f04f 0c01 	mov.w	ip, #1
1001fff6:	e52a      	b.n	1001fa4e <_strtod_l+0x246>
1001fff8:	2300      	movs	r3, #0
1001fffa:	930a      	str	r3, [sp, #40]	@ 0x28
1001fffc:	e7f1      	b.n	1001ffe2 <_strtod_l+0x7da>
1001fffe:	2400      	movs	r4, #0
10020000:	e55f      	b.n	1001fac2 <_strtod_l+0x2ba>
10020002:	2200      	movs	r2, #0
10020004:	9208      	str	r2, [sp, #32]
10020006:	f108 0101 	add.w	r1, r8, #1
1002000a:	9119      	str	r1, [sp, #100]	@ 0x64
1002000c:	f898 2001 	ldrb.w	r2, [r8, #1]
10020010:	2a00      	cmp	r2, #0
10020012:	f43f acf7 	beq.w	1001fa04 <_strtod_l+0x1fc>
10020016:	4688      	mov	r8, r1
10020018:	e46a      	b.n	1001f8f0 <_strtod_l+0xe8>
1002001a:	2201      	movs	r2, #1
1002001c:	9208      	str	r2, [sp, #32]
1002001e:	e7f2      	b.n	10020006 <_strtod_l+0x7fe>
10020020:	2f45      	cmp	r7, #69	@ 0x45
10020022:	f43f ace5 	beq.w	1001f9f0 <_strtod_l+0x1e8>
10020026:	f04f 0c01 	mov.w	ip, #1
1002002a:	e519      	b.n	1001fa60 <_strtod_l+0x258>
1002002c:	3316      	adds	r3, #22
1002002e:	f6ff af6c 	blt.w	1001ff0a <_strtod_l+0x702>
10020032:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
10020036:	1a9a      	subs	r2, r3, r2
10020038:	4b0c      	ldr	r3, [pc, #48]	@ (1002006c <_strtod_l+0x864>)
1002003a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1002003e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
10020042:	e9d3 2300 	ldrd	r2, r3, [r3]
10020046:	f002 fac5 	bl	100225d4 <__aeabi_ddiv>
1002004a:	4680      	mov	r8, r0
1002004c:	4689      	mov	r9, r1
1002004e:	e7b6      	b.n	1001ffbe <_strtod_l+0x7b6>
10020050:	ffc00000 	.word	0xffc00000
10020054:	41dfffff 	.word	0x41dfffff
10020058:	3ff00000 	.word	0x3ff00000
1002005c:	3fe00000 	.word	0x3fe00000
10020060:	7ff00000 	.word	0x7ff00000
10020064:	7fe00000 	.word	0x7fe00000
10020068:	fffffc02 	.word	0xfffffc02
1002006c:	1002c480 	.word	0x1002c480
10020070:	1002c580 	.word	0x1002c580
10020074:	4bb4      	ldr	r3, [pc, #720]	@ (10020348 <_strtod_l+0xb40>)
10020076:	4620      	mov	r0, r4
10020078:	4629      	mov	r1, r5
1002007a:	2200      	movs	r2, #0
1002007c:	f002 f980 	bl	10022380 <__aeabi_dmul>
10020080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10020082:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
10020086:	2b00      	cmp	r3, #0
10020088:	d165      	bne.n	10020156 <_strtod_l+0x94e>
1002008a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1002008e:	900c      	str	r0, [sp, #48]	@ 0x30
10020090:	930d      	str	r3, [sp, #52]	@ 0x34
10020092:	e6a1      	b.n	1001fdd8 <_strtod_l+0x5d0>
10020094:	4651      	mov	r1, sl
10020096:	461a      	mov	r2, r3
10020098:	4658      	mov	r0, fp
1002009a:	f7fe ff4f 	bl	1001ef3c <__pow5mult>
1002009e:	4682      	mov	sl, r0
100200a0:	2800      	cmp	r0, #0
100200a2:	d044      	beq.n	1002012e <_strtod_l+0x926>
100200a4:	4601      	mov	r1, r0
100200a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
100200a8:	4658      	mov	r0, fp
100200aa:	f7fe fe91 	bl	1001edd0 <__multiply>
100200ae:	2800      	cmp	r0, #0
100200b0:	d03d      	beq.n	1002012e <_strtod_l+0x926>
100200b2:	900f      	str	r0, [sp, #60]	@ 0x3c
100200b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
100200b6:	4658      	mov	r0, fp
100200b8:	f7fe fd58 	bl	1001eb6c <_Bfree>
100200bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100200be:	931a      	str	r3, [sp, #104]	@ 0x68
100200c0:	2c00      	cmp	r4, #0
100200c2:	f77f ae2e 	ble.w	1001fd22 <_strtod_l+0x51a>
100200c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
100200c8:	4622      	mov	r2, r4
100200ca:	4658      	mov	r0, fp
100200cc:	f7fe ff90 	bl	1001eff0 <__lshift>
100200d0:	901a      	str	r0, [sp, #104]	@ 0x68
100200d2:	2800      	cmp	r0, #0
100200d4:	f47f ae25 	bne.w	1001fd22 <_strtod_l+0x51a>
100200d8:	464f      	mov	r7, r9
100200da:	4605      	mov	r5, r0
100200dc:	2322      	movs	r3, #34	@ 0x22
100200de:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 1002034c <_strtod_l+0xb44>
100200e2:	f8cb 3000 	str.w	r3, [fp]
100200e6:	f04f 0800 	mov.w	r8, #0
100200ea:	4629      	mov	r1, r5
100200ec:	4658      	mov	r0, fp
100200ee:	f7fe fd3d 	bl	1001eb6c <_Bfree>
100200f2:	4639      	mov	r1, r7
100200f4:	4658      	mov	r0, fp
100200f6:	f7fe fd39 	bl	1001eb6c <_Bfree>
100200fa:	4651      	mov	r1, sl
100200fc:	4658      	mov	r0, fp
100200fe:	f7fe fd35 	bl	1001eb6c <_Bfree>
10020102:	9914      	ldr	r1, [sp, #80]	@ 0x50
10020104:	4658      	mov	r0, fp
10020106:	f7fe fd31 	bl	1001eb6c <_Bfree>
1002010a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1002010c:	4658      	mov	r0, fp
1002010e:	f7fe fd2d 	bl	1001eb6c <_Bfree>
10020112:	e754      	b.n	1001ffbe <_strtod_l+0x7b6>
10020114:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10020116:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
10020118:	1ad6      	subs	r6, r2, r3
1002011a:	e6e7      	b.n	1001feec <_strtod_l+0x6e4>
1002011c:	4649      	mov	r1, r9
1002011e:	4632      	mov	r2, r6
10020120:	4658      	mov	r0, fp
10020122:	f7fe ff65 	bl	1001eff0 <__lshift>
10020126:	4681      	mov	r9, r0
10020128:	2800      	cmp	r0, #0
1002012a:	f47f ae01 	bne.w	1001fd30 <_strtod_l+0x528>
1002012e:	464f      	mov	r7, r9
10020130:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
10020132:	e7d3      	b.n	100200dc <_strtod_l+0x8d4>
10020134:	4649      	mov	r1, r9
10020136:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10020138:	4658      	mov	r0, fp
1002013a:	f7fe feff 	bl	1001ef3c <__pow5mult>
1002013e:	4681      	mov	r9, r0
10020140:	2800      	cmp	r0, #0
10020142:	f47f adf2 	bne.w	1001fd2a <_strtod_l+0x522>
10020146:	e7f2      	b.n	1002012e <_strtod_l+0x926>
10020148:	4a81      	ldr	r2, [pc, #516]	@ (10020350 <_strtod_l+0xb48>)
1002014a:	1ad3      	subs	r3, r2, r3
1002014c:	2201      	movs	r2, #1
1002014e:	fa02 f503 	lsl.w	r5, r2, r3
10020152:	4690      	mov	r8, r2
10020154:	e5ce      	b.n	1001fcf4 <_strtod_l+0x4ec>
10020156:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	@ 0x48
1002015a:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
1002015e:	e63b      	b.n	1001fdd8 <_strtod_l+0x5d0>
10020160:	4c7c      	ldr	r4, [pc, #496]	@ (10020354 <_strtod_l+0xb4c>)
10020162:	2300      	movs	r3, #0
10020164:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
10020168:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
1002016c:	e634      	b.n	1001fdd8 <_strtod_l+0x5d0>
1002016e:	f1a7 7354 	sub.w	r3, r7, #55574528	@ 0x3500000
10020172:	9305      	str	r3, [sp, #20]
10020174:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
10020178:	4620      	mov	r0, r4
1002017a:	4629      	mov	r1, r5
1002017c:	f7ff f882 	bl	1001f284 <__ulp>
10020180:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
10020184:	f002 f8fc 	bl	10022380 <__aeabi_dmul>
10020188:	462b      	mov	r3, r5
1002018a:	4622      	mov	r2, r4
1002018c:	f001 ff42 	bl	10022014 <__adddf3>
10020190:	4f6e      	ldr	r7, [pc, #440]	@ (1002034c <_strtod_l+0xb44>)
10020192:	4b71      	ldr	r3, [pc, #452]	@ (10020358 <_strtod_l+0xb50>)
10020194:	400f      	ands	r7, r1
10020196:	429f      	cmp	r7, r3
10020198:	e9cd 0104 	strd	r0, r1, [sp, #16]
1002019c:	f240 808b 	bls.w	100202b6 <_strtod_l+0xaae>
100201a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
100201a4:	f103 7354 	add.w	r3, r3, #55574528	@ 0x3500000
100201a8:	4299      	cmp	r1, r3
100201aa:	d102      	bne.n	100201b2 <_strtod_l+0x9aa>
100201ac:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
100201b0:	d0bd      	beq.n	1002012e <_strtod_l+0x926>
100201b2:	4c6a      	ldr	r4, [pc, #424]	@ (1002035c <_strtod_l+0xb54>)
100201b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100201b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
100201bc:	e655      	b.n	1001fe6a <_strtod_l+0x662>
100201be:	2f6e      	cmp	r7, #110	@ 0x6e
100201c0:	f43f ac5f 	beq.w	1001fa82 <_strtod_l+0x27a>
100201c4:	e41e      	b.n	1001fa04 <_strtod_l+0x1fc>
100201c6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
100201ca:	e6f8      	b.n	1001ffbe <_strtod_l+0x7b6>
100201cc:	4c64      	ldr	r4, [pc, #400]	@ (10020360 <_strtod_l+0xb58>)
100201ce:	2300      	movs	r3, #0
100201d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
100201d4:	4c5f      	ldr	r4, [pc, #380]	@ (10020354 <_strtod_l+0xb4c>)
100201d6:	2300      	movs	r3, #0
100201d8:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
100201dc:	e5fc      	b.n	1001fdd8 <_strtod_l+0x5d0>
100201de:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	@ 0x48
100201e2:	4628      	mov	r0, r5
100201e4:	4631      	mov	r1, r6
100201e6:	f002 fc2b 	bl	10022a40 <__aeabi_d2lz>
100201ea:	f002 f89b 	bl	10022324 <__aeabi_l2d>
100201ee:	460b      	mov	r3, r1
100201f0:	4602      	mov	r2, r0
100201f2:	4631      	mov	r1, r6
100201f4:	4628      	mov	r0, r5
100201f6:	f001 ff0b 	bl	10022010 <__aeabi_dsub>
100201fa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
100201fc:	9b04      	ldr	r3, [sp, #16]
100201fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
10020202:	431d      	orrs	r5, r3
10020204:	432c      	orrs	r4, r5
10020206:	4606      	mov	r6, r0
10020208:	460f      	mov	r7, r1
1002020a:	d12a      	bne.n	10020262 <_strtod_l+0xa5a>
1002020c:	a348      	add	r3, pc, #288	@ (adr r3, 10020330 <_strtod_l+0xb28>)
1002020e:	e9d3 2300 	ldrd	r2, r3, [r3]
10020212:	f002 fb27 	bl	10022864 <__aeabi_dcmplt>
10020216:	2800      	cmp	r0, #0
10020218:	f43f ae27 	beq.w	1001fe6a <_strtod_l+0x662>
1002021c:	464f      	mov	r7, r9
1002021e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
10020222:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
10020224:	e761      	b.n	100200ea <_strtod_l+0x8e2>
10020226:	9302      	str	r3, [sp, #8]
10020228:	9b08      	ldr	r3, [sp, #32]
1002022a:	9301      	str	r3, [sp, #4]
1002022c:	ab1a      	add	r3, sp, #104	@ 0x68
1002022e:	9300      	str	r3, [sp, #0]
10020230:	4a4c      	ldr	r2, [pc, #304]	@ (10020364 <_strtod_l+0xb5c>)
10020232:	ab1b      	add	r3, sp, #108	@ 0x6c
10020234:	a919      	add	r1, sp, #100	@ 0x64
10020236:	4658      	mov	r0, fp
10020238:	f001 f942 	bl	100214c0 <__gethex>
1002023c:	f010 050f 	ands.w	r5, r0, #15
10020240:	4604      	mov	r4, r0
10020242:	f43f aeb8 	beq.w	1001ffb6 <_strtod_l+0x7ae>
10020246:	2d06      	cmp	r5, #6
10020248:	f040 80ae 	bne.w	100203a8 <_strtod_l+0xba0>
1002024c:	9a07      	ldr	r2, [sp, #28]
1002024e:	b112      	cbz	r2, 10020256 <_strtod_l+0xa4e>
10020250:	f108 0301 	add.w	r3, r8, #1
10020254:	6013      	str	r3, [r2, #0]
10020256:	f04f 0800 	mov.w	r8, #0
1002025a:	f04f 0900 	mov.w	r9, #0
1002025e:	f7ff bbd8 	b.w	1001fa12 <_strtod_l+0x20a>
10020262:	a335      	add	r3, pc, #212	@ (adr r3, 10020338 <_strtod_l+0xb30>)
10020264:	e9d3 2300 	ldrd	r2, r3, [r3]
10020268:	f002 fafc 	bl	10022864 <__aeabi_dcmplt>
1002026c:	2800      	cmp	r0, #0
1002026e:	d1d5      	bne.n	1002021c <_strtod_l+0xa14>
10020270:	a333      	add	r3, pc, #204	@ (adr r3, 10020340 <_strtod_l+0xb38>)
10020272:	e9d3 2300 	ldrd	r2, r3, [r3]
10020276:	4630      	mov	r0, r6
10020278:	4639      	mov	r1, r7
1002027a:	f002 fb11 	bl	100228a0 <__aeabi_dcmpgt>
1002027e:	2800      	cmp	r0, #0
10020280:	f43f adf3 	beq.w	1001fe6a <_strtod_l+0x662>
10020284:	e7ca      	b.n	1002021c <_strtod_l+0xa14>
10020286:	9b04      	ldr	r3, [sp, #16]
10020288:	2b01      	cmp	r3, #1
1002028a:	d19f      	bne.n	100201cc <_strtod_l+0x9c4>
1002028c:	2f00      	cmp	r7, #0
1002028e:	d19d      	bne.n	100201cc <_strtod_l+0x9c4>
10020290:	464f      	mov	r7, r9
10020292:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
10020294:	2322      	movs	r3, #34	@ 0x22
10020296:	4625      	mov	r5, r4
10020298:	f8cb 3000 	str.w	r3, [fp]
1002029c:	f04f 0800 	mov.w	r8, #0
100202a0:	f04f 0900 	mov.w	r9, #0
100202a4:	e721      	b.n	100200ea <_strtod_l+0x8e2>
100202a6:	2322      	movs	r3, #34	@ 0x22
100202a8:	f8cb 3000 	str.w	r3, [fp]
100202ac:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 1002034c <_strtod_l+0xb44>
100202b0:	f04f 0800 	mov.w	r8, #0
100202b4:	e683      	b.n	1001ffbe <_strtod_l+0x7b6>
100202b6:	f101 7454 	add.w	r4, r1, #55574528	@ 0x3500000
100202ba:	9405      	str	r4, [sp, #20]
100202bc:	e5ce      	b.n	1001fe5c <_strtod_l+0x654>
100202be:	4664      	mov	r4, ip
100202c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100202c2:	2908      	cmp	r1, #8
100202c4:	4403      	add	r3, r0
100202c6:	930e      	str	r3, [sp, #56]	@ 0x38
100202c8:	f77f ab64 	ble.w	1001f994 <_strtod_l+0x18c>
100202cc:	2c10      	cmp	r4, #16
100202ce:	bfdc      	itt	le
100202d0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
100202d4:	eb02 0949 	addle.w	r9, r2, r9, lsl #1
100202d8:	2000      	movs	r0, #0
100202da:	f7ff bb60 	b.w	1001f99e <_strtod_l+0x196>
100202de:	4922      	ldr	r1, [pc, #136]	@ (10020368 <_strtod_l+0xb60>)
100202e0:	2201      	movs	r2, #1
100202e2:	4640      	mov	r0, r8
100202e4:	f7f9 fbfc 	bl	10019ae0 <strncmp>
100202e8:	2800      	cmp	r0, #0
100202ea:	f000 80a0 	beq.w	1002042e <_strtod_l+0xc26>
100202ee:	f04f 0a00 	mov.w	sl, #0
100202f2:	46d1      	mov	r9, sl
100202f4:	4655      	mov	r5, sl
100202f6:	4650      	mov	r0, sl
100202f8:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
100202fc:	4654      	mov	r4, sl
100202fe:	46d4      	mov	ip, sl
10020300:	f7ff bba7 	b.w	1001fa52 <_strtod_l+0x24a>
10020304:	f644 631f 	movw	r3, #19999	@ 0x4e1f
10020308:	4299      	cmp	r1, r3
1002030a:	bfa8      	it	ge
1002030c:	4619      	movge	r1, r3
1002030e:	910f      	str	r1, [sp, #60]	@ 0x3c
10020310:	e41e      	b.n	1001fb50 <_strtod_l+0x348>
10020312:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10020314:	4915      	ldr	r1, [pc, #84]	@ (1002036c <_strtod_l+0xb64>)
10020316:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
1002031a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1002031e:	e9d1 0100 	ldrd	r0, r1, [r1]
10020322:	f002 f82d 	bl	10022380 <__aeabi_dmul>
10020326:	4680      	mov	r8, r0
10020328:	4689      	mov	r9, r1
1002032a:	e648      	b.n	1001ffbe <_strtod_l+0x7b6>
1002032c:	f3af 8000 	nop.w
10020330:	94a03595 	.word	0x94a03595
10020334:	3fcfffff 	.word	0x3fcfffff
10020338:	94a03595 	.word	0x94a03595
1002033c:	3fdfffff 	.word	0x3fdfffff
10020340:	35afe535 	.word	0x35afe535
10020344:	3fe00000 	.word	0x3fe00000
10020348:	3fe00000 	.word	0x3fe00000
1002034c:	7ff00000 	.word	0x7ff00000
10020350:	fffffbe2 	.word	0xfffffbe2
10020354:	3ff00000 	.word	0x3ff00000
10020358:	7c9fffff 	.word	0x7c9fffff
1002035c:	7fefffff 	.word	0x7fefffff
10020360:	bff00000 	.word	0xbff00000
10020364:	1002c56c 	.word	0x1002c56c
10020368:	1002c1c8 	.word	0x1002c1c8
1002036c:	1002c480 	.word	0x1002c480
10020370:	49a4      	ldr	r1, [pc, #656]	@ (10020604 <_strtod_l+0xdfc>)
10020372:	a819      	add	r0, sp, #100	@ 0x64
10020374:	f001 fb5e 	bl	10021a34 <__match>
10020378:	2800      	cmp	r0, #0
1002037a:	f43f ab43 	beq.w	1001fa04 <_strtod_l+0x1fc>
1002037e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
10020380:	49a1      	ldr	r1, [pc, #644]	@ (10020608 <_strtod_l+0xe00>)
10020382:	3b01      	subs	r3, #1
10020384:	a819      	add	r0, sp, #100	@ 0x64
10020386:	9319      	str	r3, [sp, #100]	@ 0x64
10020388:	f001 fb54 	bl	10021a34 <__match>
1002038c:	2800      	cmp	r0, #0
1002038e:	d18d      	bne.n	100202ac <_strtod_l+0xaa4>
10020390:	9b19      	ldr	r3, [sp, #100]	@ 0x64
10020392:	3301      	adds	r3, #1
10020394:	9319      	str	r3, [sp, #100]	@ 0x64
10020396:	e789      	b.n	100202ac <_strtod_l+0xaa4>
10020398:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	@ 0x48
1002039c:	e9cd 3416 	strd	r3, r4, [sp, #88]	@ 0x58
100203a0:	e544      	b.n	1001fe2c <_strtod_l+0x624>
100203a2:	2000      	movs	r0, #0
100203a4:	f7ff bae8 	b.w	1001f978 <_strtod_l+0x170>
100203a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
100203aa:	b13a      	cbz	r2, 100203bc <_strtod_l+0xbb4>
100203ac:	2135      	movs	r1, #53	@ 0x35
100203ae:	a81c      	add	r0, sp, #112	@ 0x70
100203b0:	f7ff f876 	bl	1001f4a0 <__copybits>
100203b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
100203b6:	4658      	mov	r0, fp
100203b8:	f7fe fbd8 	bl	1001eb6c <_Bfree>
100203bc:	3d01      	subs	r5, #1
100203be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
100203c0:	2d04      	cmp	r5, #4
100203c2:	f200 81fc 	bhi.w	100207be <_strtod_l+0xfb6>
100203c6:	e8df f005 	tbb	[pc, r5]
100203ca:	2c03      	.short	0x2c03
100203cc:	1e29      	.short	0x1e29
100203ce:	03          	.byte	0x03
100203cf:	00          	.byte	0x00
100203d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
100203d2:	9204      	str	r2, [sp, #16]
100203d4:	f203 4233 	addw	r2, r3, #1075	@ 0x433
100203d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100203da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
100203de:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
100203e2:	9305      	str	r3, [sp, #20]
100203e4:	05e1      	lsls	r1, r4, #23
100203e6:	d502      	bpl.n	100203ee <_strtod_l+0xbe6>
100203e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100203ec:	9305      	str	r3, [sp, #20]
100203ee:	4a87      	ldr	r2, [pc, #540]	@ (1002060c <_strtod_l+0xe04>)
100203f0:	401a      	ands	r2, r3
100203f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
100203f6:	2a00      	cmp	r2, #0
100203f8:	f47f ade1 	bne.w	1001ffbe <_strtod_l+0x7b6>
100203fc:	f7f9 fc56 	bl	10019cac <__errno>
10020400:	2322      	movs	r3, #34	@ 0x22
10020402:	6003      	str	r3, [r0, #0]
10020404:	e5db      	b.n	1001ffbe <_strtod_l+0x7b6>
10020406:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1002040a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
1002040e:	e9cd 2304 	strd	r2, r3, [sp, #16]
10020412:	05e3      	lsls	r3, r4, #23
10020414:	f57f aed7 	bpl.w	100201c6 <_strtod_l+0x9be>
10020418:	9b05      	ldr	r3, [sp, #20]
1002041a:	e7e5      	b.n	100203e8 <_strtod_l+0xbe0>
1002041c:	4b7b      	ldr	r3, [pc, #492]	@ (1002060c <_strtod_l+0xe04>)
1002041e:	9305      	str	r3, [sp, #20]
10020420:	e7f7      	b.n	10020412 <_strtod_l+0xc0a>
10020422:	e9dd 121c 	ldrd	r1, r2, [sp, #112]	@ 0x70
10020426:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10020428:	e9cd 1204 	strd	r1, r2, [sp, #16]
1002042c:	e7da      	b.n	100203e4 <_strtod_l+0xbdc>
1002042e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10020430:	4613      	mov	r3, r2
10020432:	3201      	adds	r2, #1
10020434:	9219      	str	r2, [sp, #100]	@ 0x64
10020436:	785f      	ldrb	r7, [r3, #1]
10020438:	4605      	mov	r5, r0
1002043a:	4681      	mov	r9, r0
1002043c:	f7ff ba8f 	b.w	1001f95e <_strtod_l+0x156>
10020440:	4d73      	ldr	r5, [pc, #460]	@ (10020610 <_strtod_l+0xe08>)
10020442:	f1c4 040f 	rsb	r4, r4, #15
10020446:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
1002044a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1002044e:	e9d1 0100 	ldrd	r0, r1, [r1]
10020452:	f001 ff95 	bl	10022380 <__aeabi_dmul>
10020456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10020458:	1b1c      	subs	r4, r3, r4
1002045a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
1002045e:	e9d5 2300 	ldrd	r2, r3, [r5]
10020462:	f001 ff8d 	bl	10022380 <__aeabi_dmul>
10020466:	4680      	mov	r8, r0
10020468:	4689      	mov	r9, r1
1002046a:	e5a8      	b.n	1001ffbe <_strtod_l+0x7b6>
1002046c:	46a2      	mov	sl, r4
1002046e:	900e      	str	r0, [sp, #56]	@ 0x38
10020470:	f7ff ba98 	b.w	1001f9a4 <_strtod_l+0x19c>
10020474:	4c67      	ldr	r4, [pc, #412]	@ (10020614 <_strtod_l+0xe0c>)
10020476:	2300      	movs	r3, #0
10020478:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
1002047c:	4c66      	ldr	r4, [pc, #408]	@ (10020618 <_strtod_l+0xe10>)
1002047e:	2300      	movs	r3, #0
10020480:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
10020484:	e4a8      	b.n	1001fdd8 <_strtod_l+0x5d0>
10020486:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10020488:	4964      	ldr	r1, [pc, #400]	@ (1002061c <_strtod_l+0xe14>)
1002048a:	463b      	mov	r3, r7
1002048c:	46c4      	mov	ip, r8
1002048e:	464f      	mov	r7, r9
10020490:	46ae      	mov	lr, r5
10020492:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
10020496:	f3c3 0213 	ubfx	r2, r3, #0, #20
1002049a:	2800      	cmp	r0, #0
1002049c:	d04c      	beq.n	10020538 <_strtod_l+0xd30>
1002049e:	428a      	cmp	r2, r1
100204a0:	f000 80fc 	beq.w	1002069c <_strtod_l+0xe94>
100204a4:	2d00      	cmp	r5, #0
100204a6:	f000 80f3 	beq.w	10020690 <_strtod_l+0xe88>
100204aa:	421d      	tst	r5, r3
100204ac:	d03b      	beq.n	10020526 <_strtod_l+0xd1e>
100204ae:	4640      	mov	r0, r8
100204b0:	4649      	mov	r1, r9
100204b2:	9304      	str	r3, [sp, #16]
100204b4:	f7fe fee6 	bl	1001f284 <__ulp>
100204b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100204ba:	4604      	mov	r4, r0
100204bc:	460d      	mov	r5, r1
100204be:	2b00      	cmp	r3, #0
100204c0:	f000 8128 	beq.w	10020714 <_strtod_l+0xf0c>
100204c4:	9b04      	ldr	r3, [sp, #16]
100204c6:	f3c3 530a 	ubfx	r3, r3, #20, #11
100204ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
100204ce:	2b00      	cmp	r3, #0
100204d0:	f340 8151 	ble.w	10020776 <_strtod_l+0xf6e>
100204d4:	051c      	lsls	r4, r3, #20
100204d6:	f104 537f 	add.w	r3, r4, #1069547520	@ 0x3fc00000
100204da:	2200      	movs	r2, #0
100204dc:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
100204e0:	f001 ff4e 	bl	10022380 <__aeabi_dmul>
100204e4:	4602      	mov	r2, r0
100204e6:	460b      	mov	r3, r1
100204e8:	4640      	mov	r0, r8
100204ea:	4649      	mov	r1, r9
100204ec:	f001 fd92 	bl	10022014 <__adddf3>
100204f0:	4680      	mov	r8, r0
100204f2:	4689      	mov	r9, r1
100204f4:	4b4a      	ldr	r3, [pc, #296]	@ (10020620 <_strtod_l+0xe18>)
100204f6:	4640      	mov	r0, r8
100204f8:	4649      	mov	r1, r9
100204fa:	2200      	movs	r2, #0
100204fc:	f001 ff40 	bl	10022380 <__aeabi_dmul>
10020500:	4b42      	ldr	r3, [pc, #264]	@ (1002060c <_strtod_l+0xe04>)
10020502:	400b      	ands	r3, r1
10020504:	4680      	mov	r8, r0
10020506:	4689      	mov	r9, r1
10020508:	2b00      	cmp	r3, #0
1002050a:	f47f ae8a 	bne.w	10020222 <_strtod_l+0xa1a>
1002050e:	2322      	movs	r3, #34	@ 0x22
10020510:	f8cb 3000 	str.w	r3, [fp]
10020514:	e685      	b.n	10020222 <_strtod_l+0xa1a>
10020516:	f1be 0f00 	cmp.w	lr, #0
1002051a:	f000 8089 	beq.w	10020630 <_strtod_l+0xe28>
1002051e:	ea1e 0f03 	tst.w	lr, r3
10020522:	f040 8089 	bne.w	10020638 <_strtod_l+0xe30>
10020526:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10020528:	2b00      	cmp	r3, #0
1002052a:	d1e3      	bne.n	100204f4 <_strtod_l+0xcec>
1002052c:	e679      	b.n	10020222 <_strtod_l+0xa1a>
1002052e:	f102 7354 	add.w	r3, r2, #55574528	@ 0x3500000
10020532:	9305      	str	r3, [sp, #20]
10020534:	f7ff bbac 	b.w	1001fc90 <_strtod_l+0x488>
10020538:	2a00      	cmp	r2, #0
1002053a:	d175      	bne.n	10020628 <_strtod_l+0xe20>
1002053c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
10020540:	4622      	mov	r2, r4
10020542:	2c00      	cmp	r4, #0
10020544:	d1e7      	bne.n	10020516 <_strtod_l+0xd0e>
10020546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10020548:	2a00      	cmp	r2, #0
1002054a:	f040 80be 	bne.w	100206ca <_strtod_l+0xec2>
1002054e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
10020552:	0d24      	lsrs	r4, r4, #20
10020554:	0524      	lsls	r4, r4, #20
10020556:	f5a4 1480 	sub.w	r4, r4, #1048576	@ 0x100000
1002055a:	ea6f 5314 	mvn.w	r3, r4, lsr #20
1002055e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
10020562:	9305      	str	r3, [sp, #20]
10020564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10020568:	9304      	str	r3, [sp, #16]
1002056a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
1002056e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
10020570:	e5bb      	b.n	100200ea <_strtod_l+0x8e2>
10020572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
10020576:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10020578:	4303      	orrs	r3, r0
1002057a:	464f      	mov	r7, r9
1002057c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
10020580:	d1d1      	bne.n	10020526 <_strtod_l+0xd1e>
10020582:	f3c1 0313 	ubfx	r3, r1, #0, #20
10020586:	2b00      	cmp	r3, #0
10020588:	d1cd      	bne.n	10020526 <_strtod_l+0xd1e>
1002058a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
1002058e:	0d24      	lsrs	r4, r4, #20
10020590:	0524      	lsls	r4, r4, #20
10020592:	f1b4 6fd6 	cmp.w	r4, #112197632	@ 0x6b00000
10020596:	4625      	mov	r5, r4
10020598:	d9c5      	bls.n	10020526 <_strtod_l+0xd1e>
1002059a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1002059c:	6953      	ldr	r3, [r2, #20]
1002059e:	b913      	cbnz	r3, 100205a6 <_strtod_l+0xd9e>
100205a0:	6913      	ldr	r3, [r2, #16]
100205a2:	2b01      	cmp	r3, #1
100205a4:	ddbf      	ble.n	10020526 <_strtod_l+0xd1e>
100205a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
100205a8:	2201      	movs	r2, #1
100205aa:	4658      	mov	r0, fp
100205ac:	f7fe fd20 	bl	1001eff0 <__lshift>
100205b0:	4651      	mov	r1, sl
100205b2:	9009      	str	r0, [sp, #36]	@ 0x24
100205b4:	f7fe fd94 	bl	1001f0e0 <__mcmp>
100205b8:	2800      	cmp	r0, #0
100205ba:	ddb4      	ble.n	10020526 <_strtod_l+0xd1e>
100205bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100205be:	2b00      	cmp	r3, #0
100205c0:	d0c9      	beq.n	10020556 <_strtod_l+0xd4e>
100205c2:	f5a5 1380 	sub.w	r3, r5, #1048576	@ 0x100000
100205c6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
100205ca:	ea6f 5303 	mvn.w	r3, r3, lsl #20
100205ce:	9305      	str	r3, [sp, #20]
100205d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100205d4:	9304      	str	r3, [sp, #16]
100205d6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
100205da:	e78b      	b.n	100204f4 <_strtod_l+0xcec>
100205dc:	4911      	ldr	r1, [pc, #68]	@ (10020624 <_strtod_l+0xe1c>)
100205de:	a819      	add	r0, sp, #100	@ 0x64
100205e0:	aa1c      	add	r2, sp, #112	@ 0x70
100205e2:	f001 fa41 	bl	10021a68 <__hexnan>
100205e6:	2805      	cmp	r0, #5
100205e8:	f47f aa56 	bne.w	1001fa98 <_strtod_l+0x290>
100205ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100205ee:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
100205f2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
100205f6:	9305      	str	r3, [sp, #20]
100205f8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
100205fa:	9304      	str	r3, [sp, #16]
100205fc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
10020600:	e4dd      	b.n	1001ffbe <_strtod_l+0x7b6>
10020602:	bf00      	nop
10020604:	1002c548 	.word	0x1002c548
10020608:	1002c54c 	.word	0x1002c54c
1002060c:	7ff00000 	.word	0x7ff00000
10020610:	1002c480 	.word	0x1002c480
10020614:	bfe00000 	.word	0xbfe00000
10020618:	3fe00000 	.word	0x3fe00000
1002061c:	000fffff 	.word	0x000fffff
10020620:	39500000 	.word	0x39500000
10020624:	1002c558 	.word	0x1002c558
10020628:	2d00      	cmp	r5, #0
1002062a:	f47f af78 	bne.w	1002051e <_strtod_l+0xd16>
1002062e:	9a04      	ldr	r2, [sp, #16]
10020630:	ea1c 0f02 	tst.w	ip, r2
10020634:	f43f af77 	beq.w	10020526 <_strtod_l+0xd1e>
10020638:	4640      	mov	r0, r8
1002063a:	4649      	mov	r1, r9
1002063c:	9304      	str	r3, [sp, #16]
1002063e:	f7fe fe21 	bl	1001f284 <__ulp>
10020642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10020644:	2b00      	cmp	r3, #0
10020646:	d053      	beq.n	100206f0 <_strtod_l+0xee8>
10020648:	9b04      	ldr	r3, [sp, #16]
1002064a:	f3c3 530a 	ubfx	r3, r3, #20, #11
1002064e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
10020652:	2b00      	cmp	r3, #0
10020654:	f340 809b 	ble.w	1002078e <_strtod_l+0xf86>
10020658:	051c      	lsls	r4, r3, #20
1002065a:	f104 537f 	add.w	r3, r4, #1069547520	@ 0x3fc00000
1002065e:	2200      	movs	r2, #0
10020660:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
10020664:	f001 fe8c 	bl	10022380 <__aeabi_dmul>
10020668:	4602      	mov	r2, r0
1002066a:	460b      	mov	r3, r1
1002066c:	4640      	mov	r0, r8
1002066e:	4649      	mov	r1, r9
10020670:	f001 fcce 	bl	10022010 <__aeabi_dsub>
10020674:	2200      	movs	r2, #0
10020676:	2300      	movs	r3, #0
10020678:	4680      	mov	r8, r0
1002067a:	4689      	mov	r9, r1
1002067c:	f002 f8e8 	bl	10022850 <__aeabi_dcmpeq>
10020680:	2800      	cmp	r0, #0
10020682:	f43f af37 	beq.w	100204f4 <_strtod_l+0xcec>
10020686:	e604      	b.n	10020292 <_strtod_l+0xa8a>
10020688:	f04f 0900 	mov.w	r9, #0
1002068c:	f7ff bae1 	b.w	1001fc52 <_strtod_l+0x44a>
10020690:	9a04      	ldr	r2, [sp, #16]
10020692:	ea1c 0f02 	tst.w	ip, r2
10020696:	f43f af46 	beq.w	10020526 <_strtod_l+0xd1e>
1002069a:	e708      	b.n	100204ae <_strtod_l+0xca6>
1002069c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
100206a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100206a2:	4604      	mov	r4, r0
100206a4:	2a00      	cmp	r2, #0
100206a6:	d147      	bne.n	10020738 <_strtod_l+0xf30>
100206a8:	4602      	mov	r2, r0
100206aa:	3201      	adds	r2, #1
100206ac:	d077      	beq.n	1002079e <_strtod_l+0xf96>
100206ae:	2d00      	cmp	r5, #0
100206b0:	d070      	beq.n	10020794 <_strtod_l+0xf8c>
100206b2:	421d      	tst	r5, r3
100206b4:	f43f adb5 	beq.w	10020222 <_strtod_l+0xa1a>
100206b8:	e6f9      	b.n	100204ae <_strtod_l+0xca6>
100206ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100206be:	fa02 f303 	lsl.w	r3, r2, r3
100206c2:	9a04      	ldr	r2, [sp, #16]
100206c4:	401a      	ands	r2, r3
100206c6:	9204      	str	r2, [sp, #16]
100206c8:	e467      	b.n	1001ff9a <_strtod_l+0x792>
100206ca:	4d3e      	ldr	r5, [pc, #248]	@ (100207c4 <_strtod_l+0xfbc>)
100206cc:	401d      	ands	r5, r3
100206ce:	f1b5 6fd6 	cmp.w	r5, #112197632	@ 0x6b00000
100206d2:	f63f af76 	bhi.w	100205c2 <_strtod_l+0xdba>
100206d6:	f1b5 7f5c 	cmp.w	r5, #57671680	@ 0x3700000
100206da:	f63f af0b 	bhi.w	100204f4 <_strtod_l+0xcec>
100206de:	2322      	movs	r3, #34	@ 0x22
100206e0:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
100206e2:	f8cb 3000 	str.w	r3, [fp]
100206e6:	f04f 0800 	mov.w	r8, #0
100206ea:	f04f 0900 	mov.w	r9, #0
100206ee:	e4fc      	b.n	100200ea <_strtod_l+0x8e2>
100206f0:	4602      	mov	r2, r0
100206f2:	460b      	mov	r3, r1
100206f4:	4640      	mov	r0, r8
100206f6:	4649      	mov	r1, r9
100206f8:	f001 fc8a 	bl	10022010 <__aeabi_dsub>
100206fc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
100206fe:	2200      	movs	r2, #0
10020700:	2300      	movs	r3, #0
10020702:	4680      	mov	r8, r0
10020704:	4689      	mov	r9, r1
10020706:	4625      	mov	r5, r4
10020708:	f002 f8a2 	bl	10022850 <__aeabi_dcmpeq>
1002070c:	2800      	cmp	r0, #0
1002070e:	f43f acec 	beq.w	100200ea <_strtod_l+0x8e2>
10020712:	e5bf      	b.n	10020294 <_strtod_l+0xa8c>
10020714:	4640      	mov	r0, r8
10020716:	4649      	mov	r1, r9
10020718:	462b      	mov	r3, r5
1002071a:	4622      	mov	r2, r4
1002071c:	f001 fc7a 	bl	10022014 <__adddf3>
10020720:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
10020722:	4680      	mov	r8, r0
10020724:	4689      	mov	r9, r1
10020726:	e4e0      	b.n	100200ea <_strtod_l+0x8e2>
10020728:	f1c2 024b 	rsb	r2, r2, #75	@ 0x4b
1002072c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10020730:	4093      	lsls	r3, r2
10020732:	400b      	ands	r3, r1
10020734:	9305      	str	r3, [sp, #20]
10020736:	e430      	b.n	1001ff9a <_strtod_l+0x792>
10020738:	4a22      	ldr	r2, [pc, #136]	@ (100207c4 <_strtod_l+0xfbc>)
1002073a:	401a      	ands	r2, r3
1002073c:	f1b2 6fd4 	cmp.w	r2, #111149056	@ 0x6a00000
10020740:	d909      	bls.n	10020756 <_strtod_l+0xf4e>
10020742:	1c61      	adds	r1, r4, #1
10020744:	d032      	beq.n	100207ac <_strtod_l+0xfa4>
10020746:	f1be 0f00 	cmp.w	lr, #0
1002074a:	d033      	beq.n	100207b4 <_strtod_l+0xfac>
1002074c:	ea1e 0f03 	tst.w	lr, r3
10020750:	f43f aed0 	beq.w	100204f4 <_strtod_l+0xcec>
10020754:	e6ab      	b.n	100204ae <_strtod_l+0xca6>
10020756:	0d10      	lsrs	r0, r2, #20
10020758:	f1c0 006b 	rsb	r0, r0, #107	@ 0x6b
1002075c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10020760:	4081      	lsls	r1, r0
10020762:	428c      	cmp	r4, r1
10020764:	d1ef      	bne.n	10020746 <_strtod_l+0xf3e>
10020766:	f502 1380 	add.w	r3, r2, #1048576	@ 0x100000
1002076a:	9305      	str	r3, [sp, #20]
1002076c:	2300      	movs	r3, #0
1002076e:	9304      	str	r3, [sp, #16]
10020770:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
10020774:	e6d7      	b.n	10020526 <_strtod_l+0xd1e>
10020776:	4640      	mov	r0, r8
10020778:	4649      	mov	r1, r9
1002077a:	4622      	mov	r2, r4
1002077c:	462b      	mov	r3, r5
1002077e:	f001 fc49 	bl	10022014 <__adddf3>
10020782:	4680      	mov	r8, r0
10020784:	4689      	mov	r9, r1
10020786:	e6b5      	b.n	100204f4 <_strtod_l+0xcec>
10020788:	4621      	mov	r1, r4
1002078a:	3401      	adds	r4, #1
1002078c:	e598      	b.n	100202c0 <_strtod_l+0xab8>
1002078e:	4602      	mov	r2, r0
10020790:	460b      	mov	r3, r1
10020792:	e76b      	b.n	1002066c <_strtod_l+0xe64>
10020794:	ea10 0f0c 	tst.w	r0, ip
10020798:	f43f ad43 	beq.w	10020222 <_strtod_l+0xa1a>
1002079c:	e687      	b.n	100204ae <_strtod_l+0xca6>
1002079e:	4a0a      	ldr	r2, [pc, #40]	@ (100207c8 <_strtod_l+0xfc0>)
100207a0:	4293      	cmp	r3, r2
100207a2:	f43f acc5 	beq.w	10020130 <_strtod_l+0x928>
100207a6:	3201      	adds	r2, #1
100207a8:	401a      	ands	r2, r3
100207aa:	e7dc      	b.n	10020766 <_strtod_l+0xf5e>
100207ac:	4906      	ldr	r1, [pc, #24]	@ (100207c8 <_strtod_l+0xfc0>)
100207ae:	428b      	cmp	r3, r1
100207b0:	d1d9      	bne.n	10020766 <_strtod_l+0xf5e>
100207b2:	e4bd      	b.n	10020130 <_strtod_l+0x928>
100207b4:	ea14 0f0c 	tst.w	r4, ip
100207b8:	f43f ae9c 	beq.w	100204f4 <_strtod_l+0xcec>
100207bc:	e677      	b.n	100204ae <_strtod_l+0xca6>
100207be:	2300      	movs	r3, #0
100207c0:	e610      	b.n	100203e4 <_strtod_l+0xbdc>
100207c2:	bf00      	nop
100207c4:	7ff00000 	.word	0x7ff00000
100207c8:	7fefffff 	.word	0x7fefffff

100207cc <_strtod_r>:
100207cc:	4b01      	ldr	r3, [pc, #4]	@ (100207d4 <_strtod_r+0x8>)
100207ce:	f7ff b81b 	b.w	1001f808 <_strtod_l>
100207d2:	bf00      	nop
100207d4:	20000474 	.word	0x20000474

100207d8 <_strtol_l.constprop.0>:
100207d8:	2b24      	cmp	r3, #36	@ 0x24
100207da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
100207de:	d843      	bhi.n	10020868 <_strtol_l.constprop.0+0x90>
100207e0:	2b01      	cmp	r3, #1
100207e2:	d041      	beq.n	10020868 <_strtol_l.constprop.0+0x90>
100207e4:	4680      	mov	r8, r0
100207e6:	4849      	ldr	r0, [pc, #292]	@ (1002090c <_strtol_l.constprop.0+0x134>)
100207e8:	461f      	mov	r7, r3
100207ea:	468e      	mov	lr, r1
100207ec:	4675      	mov	r5, lr
100207ee:	f81e bb01 	ldrb.w	fp, [lr], #1
100207f2:	f810 400b 	ldrb.w	r4, [r0, fp]
100207f6:	f014 0408 	ands.w	r4, r4, #8
100207fa:	d1f7      	bne.n	100207ec <_strtol_l.constprop.0+0x14>
100207fc:	f1bb 0f2d 	cmp.w	fp, #45	@ 0x2d
10020800:	d06f      	beq.n	100208e2 <_strtol_l.constprop.0+0x10a>
10020802:	f1bb 0f2b 	cmp.w	fp, #43	@ 0x2b
10020806:	bf08      	it	eq
10020808:	f89e b000 	ldrbeq.w	fp, [lr]
1002080c:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
10020810:	bf08      	it	eq
10020812:	f105 0e02 	addeq.w	lr, r5, #2
10020816:	bb73      	cbnz	r3, 10020876 <_strtol_l.constprop.0+0x9e>
10020818:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
1002081c:	d04b      	beq.n	100208b6 <_strtol_l.constprop.0+0xde>
1002081e:	270a      	movs	r7, #10
10020820:	463b      	mov	r3, r7
10020822:	2500      	movs	r5, #0
10020824:	fbb9 f6f7 	udiv	r6, r9, r7
10020828:	4628      	mov	r0, r5
1002082a:	fb07 9a16 	mls	sl, r7, r6, r9
1002082e:	e005      	b.n	1002083c <_strtol_l.constprop.0+0x64>
10020830:	d03a      	beq.n	100208a8 <_strtol_l.constprop.0+0xd0>
10020832:	fb07 c000 	mla	r0, r7, r0, ip
10020836:	2501      	movs	r5, #1
10020838:	f81e bb01 	ldrb.w	fp, [lr], #1
1002083c:	f1ab 0c30 	sub.w	ip, fp, #48	@ 0x30
10020840:	f1bc 0f09 	cmp.w	ip, #9
10020844:	d906      	bls.n	10020854 <_strtol_l.constprop.0+0x7c>
10020846:	f1ab 0c41 	sub.w	ip, fp, #65	@ 0x41
1002084a:	f1bc 0f19 	cmp.w	ip, #25
1002084e:	d819      	bhi.n	10020884 <_strtol_l.constprop.0+0xac>
10020850:	f1ab 0c37 	sub.w	ip, fp, #55	@ 0x37
10020854:	4563      	cmp	r3, ip
10020856:	dd1e      	ble.n	10020896 <_strtol_l.constprop.0+0xbe>
10020858:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
1002085c:	d0ec      	beq.n	10020838 <_strtol_l.constprop.0+0x60>
1002085e:	4286      	cmp	r6, r0
10020860:	d2e6      	bcs.n	10020830 <_strtol_l.constprop.0+0x58>
10020862:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
10020866:	e7e7      	b.n	10020838 <_strtol_l.constprop.0+0x60>
10020868:	f7f9 fa20 	bl	10019cac <__errno>
1002086c:	2316      	movs	r3, #22
1002086e:	6003      	str	r3, [r0, #0]
10020870:	2000      	movs	r0, #0
10020872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020876:	2b10      	cmp	r3, #16
10020878:	d1d3      	bne.n	10020822 <_strtol_l.constprop.0+0x4a>
1002087a:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
1002087e:	d023      	beq.n	100208c8 <_strtol_l.constprop.0+0xf0>
10020880:	461f      	mov	r7, r3
10020882:	e7ce      	b.n	10020822 <_strtol_l.constprop.0+0x4a>
10020884:	f1ab 0c61 	sub.w	ip, fp, #97	@ 0x61
10020888:	f1bc 0f19 	cmp.w	ip, #25
1002088c:	d803      	bhi.n	10020896 <_strtol_l.constprop.0+0xbe>
1002088e:	f1ab 0c57 	sub.w	ip, fp, #87	@ 0x57
10020892:	4563      	cmp	r3, ip
10020894:	dce0      	bgt.n	10020858 <_strtol_l.constprop.0+0x80>
10020896:	1c6b      	adds	r3, r5, #1
10020898:	d02b      	beq.n	100208f2 <_strtol_l.constprop.0+0x11a>
1002089a:	b954      	cbnz	r4, 100208b2 <_strtol_l.constprop.0+0xda>
1002089c:	2a00      	cmp	r2, #0
1002089e:	d0e8      	beq.n	10020872 <_strtol_l.constprop.0+0x9a>
100208a0:	bb85      	cbnz	r5, 10020904 <_strtol_l.constprop.0+0x12c>
100208a2:	6011      	str	r1, [r2, #0]
100208a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
100208a8:	45e2      	cmp	sl, ip
100208aa:	dac2      	bge.n	10020832 <_strtol_l.constprop.0+0x5a>
100208ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
100208b0:	e7c2      	b.n	10020838 <_strtol_l.constprop.0+0x60>
100208b2:	4240      	negs	r0, r0
100208b4:	e7f2      	b.n	1002089c <_strtol_l.constprop.0+0xc4>
100208b6:	f89e 3000 	ldrb.w	r3, [lr]
100208ba:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
100208be:	2b58      	cmp	r3, #88	@ 0x58
100208c0:	d008      	beq.n	100208d4 <_strtol_l.constprop.0+0xfc>
100208c2:	2708      	movs	r7, #8
100208c4:	463b      	mov	r3, r7
100208c6:	e7ac      	b.n	10020822 <_strtol_l.constprop.0+0x4a>
100208c8:	f89e 0000 	ldrb.w	r0, [lr]
100208cc:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
100208d0:	2858      	cmp	r0, #88	@ 0x58
100208d2:	d1d5      	bne.n	10020880 <_strtol_l.constprop.0+0xa8>
100208d4:	2710      	movs	r7, #16
100208d6:	f89e b001 	ldrb.w	fp, [lr, #1]
100208da:	463b      	mov	r3, r7
100208dc:	f10e 0e02 	add.w	lr, lr, #2
100208e0:	e79f      	b.n	10020822 <_strtol_l.constprop.0+0x4a>
100208e2:	f89e b000 	ldrb.w	fp, [lr]
100208e6:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
100208ea:	f105 0e02 	add.w	lr, r5, #2
100208ee:	2401      	movs	r4, #1
100208f0:	e791      	b.n	10020816 <_strtol_l.constprop.0+0x3e>
100208f2:	2322      	movs	r3, #34	@ 0x22
100208f4:	f8c8 3000 	str.w	r3, [r8]
100208f8:	b132      	cbz	r2, 10020908 <_strtol_l.constprop.0+0x130>
100208fa:	f10e 31ff 	add.w	r1, lr, #4294967295	@ 0xffffffff
100208fe:	4648      	mov	r0, r9
10020900:	6011      	str	r1, [r2, #0]
10020902:	e7cf      	b.n	100208a4 <_strtol_l.constprop.0+0xcc>
10020904:	4681      	mov	r9, r0
10020906:	e7f8      	b.n	100208fa <_strtol_l.constprop.0+0x122>
10020908:	4648      	mov	r0, r9
1002090a:	e7b2      	b.n	10020872 <_strtol_l.constprop.0+0x9a>
1002090c:	1002c211 	.word	0x1002c211

10020910 <_strtol_r>:
10020910:	f7ff bf62 	b.w	100207d8 <_strtol_l.constprop.0>

10020914 <_strtoul_l.constprop.0>:
10020914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10020918:	4607      	mov	r7, r0
1002091a:	4849      	ldr	r0, [pc, #292]	@ (10020a40 <_strtoul_l.constprop.0+0x12c>)
1002091c:	460e      	mov	r6, r1
1002091e:	4635      	mov	r5, r6
10020920:	f816 eb01 	ldrb.w	lr, [r6], #1
10020924:	f810 c00e 	ldrb.w	ip, [r0, lr]
10020928:	f01c 0c08 	ands.w	ip, ip, #8
1002092c:	d1f7      	bne.n	1002091e <_strtoul_l.constprop.0+0xa>
1002092e:	f1be 0f2d 	cmp.w	lr, #45	@ 0x2d
10020932:	d05a      	beq.n	100209ea <_strtoul_l.constprop.0+0xd6>
10020934:	f1be 0f2b 	cmp.w	lr, #43	@ 0x2b
10020938:	bf03      	ittte	eq
1002093a:	f896 e000 	ldrbeq.w	lr, [r6]
1002093e:	4664      	moveq	r4, ip
10020940:	1cae      	addeq	r6, r5, #2
10020942:	4664      	movne	r4, ip
10020944:	b94b      	cbnz	r3, 1002095a <_strtoul_l.constprop.0+0x46>
10020946:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
1002094a:	d05c      	beq.n	10020a06 <_strtoul_l.constprop.0+0xf2>
1002094c:	230a      	movs	r3, #10
1002094e:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 10020a44 <_strtoul_l.constprop.0+0x130>
10020952:	f04f 0a05 	mov.w	sl, #5
10020956:	4699      	mov	r9, r3
10020958:	e00a      	b.n	10020970 <_strtoul_l.constprop.0+0x5c>
1002095a:	2b10      	cmp	r3, #16
1002095c:	d04a      	beq.n	100209f4 <_strtoul_l.constprop.0+0xe0>
1002095e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
10020962:	fbb8 f8f3 	udiv	r8, r8, r3
10020966:	fb03 fa08 	mul.w	sl, r3, r8
1002096a:	ea6f 0a0a 	mvn.w	sl, sl
1002096e:	4699      	mov	r9, r3
10020970:	2500      	movs	r5, #0
10020972:	4628      	mov	r0, r5
10020974:	e005      	b.n	10020982 <_strtoul_l.constprop.0+0x6e>
10020976:	d02c      	beq.n	100209d2 <_strtoul_l.constprop.0+0xbe>
10020978:	fb09 c000 	mla	r0, r9, r0, ip
1002097c:	2501      	movs	r5, #1
1002097e:	f816 eb01 	ldrb.w	lr, [r6], #1
10020982:	f1ae 0c30 	sub.w	ip, lr, #48	@ 0x30
10020986:	f1bc 0f09 	cmp.w	ip, #9
1002098a:	d906      	bls.n	1002099a <_strtoul_l.constprop.0+0x86>
1002098c:	f1ae 0c41 	sub.w	ip, lr, #65	@ 0x41
10020990:	f1bc 0f19 	cmp.w	ip, #25
10020994:	d80b      	bhi.n	100209ae <_strtoul_l.constprop.0+0x9a>
10020996:	f1ae 0c37 	sub.w	ip, lr, #55	@ 0x37
1002099a:	4563      	cmp	r3, ip
1002099c:	dd10      	ble.n	100209c0 <_strtoul_l.constprop.0+0xac>
1002099e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
100209a2:	d0ec      	beq.n	1002097e <_strtoul_l.constprop.0+0x6a>
100209a4:	4540      	cmp	r0, r8
100209a6:	d9e6      	bls.n	10020976 <_strtoul_l.constprop.0+0x62>
100209a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
100209ac:	e7e7      	b.n	1002097e <_strtoul_l.constprop.0+0x6a>
100209ae:	f1ae 0c61 	sub.w	ip, lr, #97	@ 0x61
100209b2:	f1bc 0f19 	cmp.w	ip, #25
100209b6:	d803      	bhi.n	100209c0 <_strtoul_l.constprop.0+0xac>
100209b8:	f1ae 0c57 	sub.w	ip, lr, #87	@ 0x57
100209bc:	4563      	cmp	r3, ip
100209be:	dcee      	bgt.n	1002099e <_strtoul_l.constprop.0+0x8a>
100209c0:	1c6b      	adds	r3, r5, #1
100209c2:	d00b      	beq.n	100209dc <_strtoul_l.constprop.0+0xc8>
100209c4:	b104      	cbz	r4, 100209c8 <_strtoul_l.constprop.0+0xb4>
100209c6:	4240      	negs	r0, r0
100209c8:	b10a      	cbz	r2, 100209ce <_strtoul_l.constprop.0+0xba>
100209ca:	b965      	cbnz	r5, 100209e6 <_strtoul_l.constprop.0+0xd2>
100209cc:	6011      	str	r1, [r2, #0]
100209ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100209d2:	45d4      	cmp	ip, sl
100209d4:	ddd0      	ble.n	10020978 <_strtoul_l.constprop.0+0x64>
100209d6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
100209da:	e7d0      	b.n	1002097e <_strtoul_l.constprop.0+0x6a>
100209dc:	2322      	movs	r3, #34	@ 0x22
100209de:	603b      	str	r3, [r7, #0]
100209e0:	4628      	mov	r0, r5
100209e2:	2a00      	cmp	r2, #0
100209e4:	d0f3      	beq.n	100209ce <_strtoul_l.constprop.0+0xba>
100209e6:	1e71      	subs	r1, r6, #1
100209e8:	e7f0      	b.n	100209cc <_strtoul_l.constprop.0+0xb8>
100209ea:	f896 e000 	ldrb.w	lr, [r6]
100209ee:	2401      	movs	r4, #1
100209f0:	1cae      	adds	r6, r5, #2
100209f2:	e7a7      	b.n	10020944 <_strtoul_l.constprop.0+0x30>
100209f4:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
100209f8:	d011      	beq.n	10020a1e <_strtoul_l.constprop.0+0x10a>
100209fa:	f04f 0a0f 	mov.w	sl, #15
100209fe:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
10020a02:	4699      	mov	r9, r3
10020a04:	e7b4      	b.n	10020970 <_strtoul_l.constprop.0+0x5c>
10020a06:	7833      	ldrb	r3, [r6, #0]
10020a08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020a0c:	2b58      	cmp	r3, #88	@ 0x58
10020a0e:	d00b      	beq.n	10020a28 <_strtoul_l.constprop.0+0x114>
10020a10:	2308      	movs	r3, #8
10020a12:	f04f 0a07 	mov.w	sl, #7
10020a16:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
10020a1a:	4699      	mov	r9, r3
10020a1c:	e7a8      	b.n	10020970 <_strtoul_l.constprop.0+0x5c>
10020a1e:	7830      	ldrb	r0, [r6, #0]
10020a20:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
10020a24:	2858      	cmp	r0, #88	@ 0x58
10020a26:	d1e8      	bne.n	100209fa <_strtoul_l.constprop.0+0xe6>
10020a28:	f04f 0910 	mov.w	r9, #16
10020a2c:	f896 e001 	ldrb.w	lr, [r6, #1]
10020a30:	f04f 0a0f 	mov.w	sl, #15
10020a34:	3602      	adds	r6, #2
10020a36:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
10020a3a:	464b      	mov	r3, r9
10020a3c:	e798      	b.n	10020970 <_strtoul_l.constprop.0+0x5c>
10020a3e:	bf00      	nop
10020a40:	1002c211 	.word	0x1002c211
10020a44:	19999999 	.word	0x19999999

10020a48 <_strtoul_r>:
10020a48:	f7ff bf64 	b.w	10020914 <_strtoul_l.constprop.0>

10020a4c <sprintf>:
10020a4c:	b40e      	push	{r1, r2, r3}
10020a4e:	b510      	push	{r4, lr}
10020a50:	b09d      	sub	sp, #116	@ 0x74
10020a52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
10020a56:	ab1f      	add	r3, sp, #124	@ 0x7c
10020a58:	9104      	str	r1, [sp, #16]
10020a5a:	9107      	str	r1, [sp, #28]
10020a5c:	4909      	ldr	r1, [pc, #36]	@ (10020a84 <sprintf+0x38>)
10020a5e:	f853 2b04 	ldr.w	r2, [r3], #4
10020a62:	9002      	str	r0, [sp, #8]
10020a64:	9006      	str	r0, [sp, #24]
10020a66:	4c08      	ldr	r4, [pc, #32]	@ (10020a88 <sprintf+0x3c>)
10020a68:	6808      	ldr	r0, [r1, #0]
10020a6a:	9301      	str	r3, [sp, #4]
10020a6c:	a902      	add	r1, sp, #8
10020a6e:	9405      	str	r4, [sp, #20]
10020a70:	f7fa fdda 	bl	1001b628 <_svfprintf_r>
10020a74:	9b02      	ldr	r3, [sp, #8]
10020a76:	2200      	movs	r2, #0
10020a78:	701a      	strb	r2, [r3, #0]
10020a7a:	b01d      	add	sp, #116	@ 0x74
10020a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10020a80:	b003      	add	sp, #12
10020a82:	4770      	bx	lr
10020a84:	200005e0 	.word	0x200005e0
10020a88:	ffff0208 	.word	0xffff0208

10020a8c <__ascii_wctomb>:
10020a8c:	b149      	cbz	r1, 10020aa2 <__ascii_wctomb+0x16>
10020a8e:	2aff      	cmp	r2, #255	@ 0xff
10020a90:	d802      	bhi.n	10020a98 <__ascii_wctomb+0xc>
10020a92:	700a      	strb	r2, [r1, #0]
10020a94:	2001      	movs	r0, #1
10020a96:	4770      	bx	lr
10020a98:	238a      	movs	r3, #138	@ 0x8a
10020a9a:	6003      	str	r3, [r0, #0]
10020a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10020aa0:	4770      	bx	lr
10020aa2:	4608      	mov	r0, r1
10020aa4:	4770      	bx	lr
10020aa6:	bf00      	nop

10020aa8 <__swbuf_r>:
10020aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10020aaa:	460d      	mov	r5, r1
10020aac:	4614      	mov	r4, r2
10020aae:	4606      	mov	r6, r0
10020ab0:	b110      	cbz	r0, 10020ab8 <__swbuf_r+0x10>
10020ab2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
10020ab4:	2b00      	cmp	r3, #0
10020ab6:	d04a      	beq.n	10020b4e <__swbuf_r+0xa6>
10020ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10020abc:	69a3      	ldr	r3, [r4, #24]
10020abe:	60a3      	str	r3, [r4, #8]
10020ac0:	0710      	lsls	r0, r2, #28
10020ac2:	d51b      	bpl.n	10020afc <__swbuf_r+0x54>
10020ac4:	6923      	ldr	r3, [r4, #16]
10020ac6:	b1cb      	cbz	r3, 10020afc <__swbuf_r+0x54>
10020ac8:	b2ed      	uxtb	r5, r5
10020aca:	0491      	lsls	r1, r2, #18
10020acc:	462f      	mov	r7, r5
10020ace:	d521      	bpl.n	10020b14 <__swbuf_r+0x6c>
10020ad0:	6822      	ldr	r2, [r4, #0]
10020ad2:	6961      	ldr	r1, [r4, #20]
10020ad4:	1ad3      	subs	r3, r2, r3
10020ad6:	4299      	cmp	r1, r3
10020ad8:	dd28      	ble.n	10020b2c <__swbuf_r+0x84>
10020ada:	3301      	adds	r3, #1
10020adc:	68a1      	ldr	r1, [r4, #8]
10020ade:	3901      	subs	r1, #1
10020ae0:	60a1      	str	r1, [r4, #8]
10020ae2:	1c51      	adds	r1, r2, #1
10020ae4:	6021      	str	r1, [r4, #0]
10020ae6:	7015      	strb	r5, [r2, #0]
10020ae8:	6962      	ldr	r2, [r4, #20]
10020aea:	429a      	cmp	r2, r3
10020aec:	d026      	beq.n	10020b3c <__swbuf_r+0x94>
10020aee:	89a3      	ldrh	r3, [r4, #12]
10020af0:	07db      	lsls	r3, r3, #31
10020af2:	d501      	bpl.n	10020af8 <__swbuf_r+0x50>
10020af4:	2d0a      	cmp	r5, #10
10020af6:	d021      	beq.n	10020b3c <__swbuf_r+0x94>
10020af8:	4638      	mov	r0, r7
10020afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10020afc:	4621      	mov	r1, r4
10020afe:	4630      	mov	r0, r6
10020b00:	f7f8 fdcc 	bl	1001969c <__swsetup_r>
10020b04:	bb00      	cbnz	r0, 10020b48 <__swbuf_r+0xa0>
10020b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10020b0a:	6923      	ldr	r3, [r4, #16]
10020b0c:	b2ed      	uxtb	r5, r5
10020b0e:	0491      	lsls	r1, r2, #18
10020b10:	462f      	mov	r7, r5
10020b12:	d4dd      	bmi.n	10020ad0 <__swbuf_r+0x28>
10020b14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10020b18:	81a2      	strh	r2, [r4, #12]
10020b1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10020b1c:	6961      	ldr	r1, [r4, #20]
10020b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
10020b22:	6662      	str	r2, [r4, #100]	@ 0x64
10020b24:	6822      	ldr	r2, [r4, #0]
10020b26:	1ad3      	subs	r3, r2, r3
10020b28:	4299      	cmp	r1, r3
10020b2a:	dcd6      	bgt.n	10020ada <__swbuf_r+0x32>
10020b2c:	4621      	mov	r1, r4
10020b2e:	4630      	mov	r0, r6
10020b30:	f7f8 fa22 	bl	10018f78 <_fflush_r>
10020b34:	b940      	cbnz	r0, 10020b48 <__swbuf_r+0xa0>
10020b36:	6822      	ldr	r2, [r4, #0]
10020b38:	2301      	movs	r3, #1
10020b3a:	e7cf      	b.n	10020adc <__swbuf_r+0x34>
10020b3c:	4621      	mov	r1, r4
10020b3e:	4630      	mov	r0, r6
10020b40:	f7f8 fa1a 	bl	10018f78 <_fflush_r>
10020b44:	2800      	cmp	r0, #0
10020b46:	d0d7      	beq.n	10020af8 <__swbuf_r+0x50>
10020b48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020b4c:	e7d4      	b.n	10020af8 <__swbuf_r+0x50>
10020b4e:	f7f8 fb8f 	bl	10019270 <__sinit>
10020b52:	e7b1      	b.n	10020ab8 <__swbuf_r+0x10>

10020b54 <stpncpy>:
10020b54:	ea41 0300 	orr.w	r3, r1, r0
10020b58:	079b      	lsls	r3, r3, #30
10020b5a:	b410      	push	{r4}
10020b5c:	d101      	bne.n	10020b62 <stpncpy+0xe>
10020b5e:	2a03      	cmp	r2, #3
10020b60:	d81a      	bhi.n	10020b98 <stpncpy+0x44>
10020b62:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
10020b66:	e007      	b.n	10020b78 <stpncpy+0x24>
10020b68:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
10020b6c:	f803 1b01 	strb.w	r1, [r3], #1
10020b70:	1e54      	subs	r4, r2, #1
10020b72:	b131      	cbz	r1, 10020b82 <stpncpy+0x2e>
10020b74:	4622      	mov	r2, r4
10020b76:	4618      	mov	r0, r3
10020b78:	4603      	mov	r3, r0
10020b7a:	2a00      	cmp	r2, #0
10020b7c:	d1f4      	bne.n	10020b68 <stpncpy+0x14>
10020b7e:	bc10      	pop	{r4}
10020b80:	4770      	bx	lr
10020b82:	4402      	add	r2, r0
10020b84:	b1f4      	cbz	r4, 10020bc4 <stpncpy+0x70>
10020b86:	f803 1b01 	strb.w	r1, [r3], #1
10020b8a:	4293      	cmp	r3, r2
10020b8c:	d1fb      	bne.n	10020b86 <stpncpy+0x32>
10020b8e:	2800      	cmp	r0, #0
10020b90:	bf08      	it	eq
10020b92:	4610      	moveq	r0, r2
10020b94:	bc10      	pop	{r4}
10020b96:	4770      	bx	lr
10020b98:	468c      	mov	ip, r1
10020b9a:	e004      	b.n	10020ba6 <stpncpy+0x52>
10020b9c:	3a04      	subs	r2, #4
10020b9e:	2a03      	cmp	r2, #3
10020ba0:	f840 4b04 	str.w	r4, [r0], #4
10020ba4:	d90c      	bls.n	10020bc0 <stpncpy+0x6c>
10020ba6:	f8dc 4000 	ldr.w	r4, [ip]
10020baa:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
10020bae:	ea23 0304 	bic.w	r3, r3, r4
10020bb2:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
10020bb6:	4661      	mov	r1, ip
10020bb8:	f10c 0c04 	add.w	ip, ip, #4
10020bbc:	d0ee      	beq.n	10020b9c <stpncpy+0x48>
10020bbe:	e7d0      	b.n	10020b62 <stpncpy+0xe>
10020bc0:	4661      	mov	r1, ip
10020bc2:	e7ce      	b.n	10020b62 <stpncpy+0xe>
10020bc4:	461a      	mov	r2, r3
10020bc6:	e7e2      	b.n	10020b8e <stpncpy+0x3a>

10020bc8 <_fstat_r>:
10020bc8:	b570      	push	{r4, r5, r6, lr}
10020bca:	460c      	mov	r4, r1
10020bcc:	4d08      	ldr	r5, [pc, #32]	@ (10020bf0 <_fstat_r+0x28>)
10020bce:	4603      	mov	r3, r0
10020bd0:	2600      	movs	r6, #0
10020bd2:	4620      	mov	r0, r4
10020bd4:	4611      	mov	r1, r2
10020bd6:	461c      	mov	r4, r3
10020bd8:	602e      	str	r6, [r5, #0]
10020bda:	f7f2 fc0a 	bl	100133f2 <_fstat>
10020bde:	1c43      	adds	r3, r0, #1
10020be0:	d000      	beq.n	10020be4 <_fstat_r+0x1c>
10020be2:	bd70      	pop	{r4, r5, r6, pc}
10020be4:	682b      	ldr	r3, [r5, #0]
10020be6:	2b00      	cmp	r3, #0
10020be8:	d0fb      	beq.n	10020be2 <_fstat_r+0x1a>
10020bea:	6023      	str	r3, [r4, #0]
10020bec:	bd70      	pop	{r4, r5, r6, pc}
10020bee:	bf00      	nop
10020bf0:	20001708 	.word	0x20001708

10020bf4 <_isatty_r>:
10020bf4:	b538      	push	{r3, r4, r5, lr}
10020bf6:	4d07      	ldr	r5, [pc, #28]	@ (10020c14 <_isatty_r+0x20>)
10020bf8:	2200      	movs	r2, #0
10020bfa:	4604      	mov	r4, r0
10020bfc:	4608      	mov	r0, r1
10020bfe:	602a      	str	r2, [r5, #0]
10020c00:	f7f2 fbf1 	bl	100133e6 <_isatty>
10020c04:	1c43      	adds	r3, r0, #1
10020c06:	d000      	beq.n	10020c0a <_isatty_r+0x16>
10020c08:	bd38      	pop	{r3, r4, r5, pc}
10020c0a:	682b      	ldr	r3, [r5, #0]
10020c0c:	2b00      	cmp	r3, #0
10020c0e:	d0fb      	beq.n	10020c08 <_isatty_r+0x14>
10020c10:	6023      	str	r3, [r4, #0]
10020c12:	bd38      	pop	{r3, r4, r5, pc}
10020c14:	20001708 	.word	0x20001708

10020c18 <_strtoll_l.constprop.0>:
10020c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10020c1c:	b085      	sub	sp, #20
10020c1e:	4692      	mov	sl, r2
10020c20:	4a5b      	ldr	r2, [pc, #364]	@ (10020d90 <_strtoll_l.constprop.0+0x178>)
10020c22:	9003      	str	r0, [sp, #12]
10020c24:	4689      	mov	r9, r1
10020c26:	461e      	mov	r6, r3
10020c28:	460d      	mov	r5, r1
10020c2a:	4629      	mov	r1, r5
10020c2c:	f815 4b01 	ldrb.w	r4, [r5], #1
10020c30:	5d13      	ldrb	r3, [r2, r4]
10020c32:	f013 0308 	ands.w	r3, r3, #8
10020c36:	d1f8      	bne.n	10020c2a <_strtoll_l.constprop.0+0x12>
10020c38:	2c2d      	cmp	r4, #45	@ 0x2d
10020c3a:	d07d      	beq.n	10020d38 <_strtoll_l.constprop.0+0x120>
10020c3c:	2c2b      	cmp	r4, #43	@ 0x2b
10020c3e:	d041      	beq.n	10020cc4 <_strtoll_l.constprop.0+0xac>
10020c40:	9302      	str	r3, [sp, #8]
10020c42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10020c46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
10020c4a:	e9cd 2300 	strd	r2, r3, [sp]
10020c4e:	2e00      	cmp	r6, #0
10020c50:	d143      	bne.n	10020cda <_strtoll_l.constprop.0+0xc2>
10020c52:	2c30      	cmp	r4, #48	@ 0x30
10020c54:	d079      	beq.n	10020d4a <_strtoll_l.constprop.0+0x132>
10020c56:	270a      	movs	r7, #10
10020c58:	46b0      	mov	r8, r6
10020c5a:	463e      	mov	r6, r7
10020c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
10020c60:	463a      	mov	r2, r7
10020c62:	4643      	mov	r3, r8
10020c64:	f001 fed4 	bl	10022a10 <__aeabi_uldivmod>
10020c68:	2300      	movs	r3, #0
10020c6a:	468e      	mov	lr, r1
10020c6c:	4683      	mov	fp, r0
10020c6e:	4619      	mov	r1, r3
10020c70:	4618      	mov	r0, r3
10020c72:	46a4      	mov	ip, r4
10020c74:	e010      	b.n	10020c98 <_strtoll_l.constprop.0+0x80>
10020c76:	458e      	cmp	lr, r1
10020c78:	bf08      	it	eq
10020c7a:	4583      	cmpeq	fp, r0
10020c7c:	d04c      	beq.n	10020d18 <_strtoll_l.constprop.0+0x100>
10020c7e:	fb00 f308 	mul.w	r3, r0, r8
10020c82:	fb07 3301 	mla	r3, r7, r1, r3
10020c86:	fba0 0107 	umull	r0, r1, r0, r7
10020c8a:	440b      	add	r3, r1
10020c8c:	1820      	adds	r0, r4, r0
10020c8e:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
10020c92:	2301      	movs	r3, #1
10020c94:	f815 cb01 	ldrb.w	ip, [r5], #1
10020c98:	f1ac 0430 	sub.w	r4, ip, #48	@ 0x30
10020c9c:	2c09      	cmp	r4, #9
10020c9e:	d905      	bls.n	10020cac <_strtoll_l.constprop.0+0x94>
10020ca0:	f1ac 0441 	sub.w	r4, ip, #65	@ 0x41
10020ca4:	2c19      	cmp	r4, #25
10020ca6:	d81e      	bhi.n	10020ce6 <_strtoll_l.constprop.0+0xce>
10020ca8:	f1ac 0437 	sub.w	r4, ip, #55	@ 0x37
10020cac:	42a6      	cmp	r6, r4
10020cae:	dd22      	ble.n	10020cf6 <_strtoll_l.constprop.0+0xde>
10020cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10020cb4:	d0ee      	beq.n	10020c94 <_strtoll_l.constprop.0+0x7c>
10020cb6:	4583      	cmp	fp, r0
10020cb8:	eb7e 0301 	sbcs.w	r3, lr, r1
10020cbc:	d2db      	bcs.n	10020c76 <_strtoll_l.constprop.0+0x5e>
10020cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10020cc2:	e7e7      	b.n	10020c94 <_strtoll_l.constprop.0+0x7c>
10020cc4:	782c      	ldrb	r4, [r5, #0]
10020cc6:	9302      	str	r3, [sp, #8]
10020cc8:	1c8d      	adds	r5, r1, #2
10020cca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
10020cce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10020cd2:	e9cd 1300 	strd	r1, r3, [sp]
10020cd6:	2e00      	cmp	r6, #0
10020cd8:	d0bb      	beq.n	10020c52 <_strtoll_l.constprop.0+0x3a>
10020cda:	2e10      	cmp	r6, #16
10020cdc:	d03e      	beq.n	10020d5c <_strtoll_l.constprop.0+0x144>
10020cde:	4637      	mov	r7, r6
10020ce0:	ea4f 78e6 	mov.w	r8, r6, asr #31
10020ce4:	e7ba      	b.n	10020c5c <_strtoll_l.constprop.0+0x44>
10020ce6:	f1ac 0461 	sub.w	r4, ip, #97	@ 0x61
10020cea:	2c19      	cmp	r4, #25
10020cec:	d803      	bhi.n	10020cf6 <_strtoll_l.constprop.0+0xde>
10020cee:	f1ac 0457 	sub.w	r4, ip, #87	@ 0x57
10020cf2:	42a6      	cmp	r6, r4
10020cf4:	dcdc      	bgt.n	10020cb0 <_strtoll_l.constprop.0+0x98>
10020cf6:	1c5a      	adds	r2, r3, #1
10020cf8:	d013      	beq.n	10020d22 <_strtoll_l.constprop.0+0x10a>
10020cfa:	9a02      	ldr	r2, [sp, #8]
10020cfc:	b112      	cbz	r2, 10020d04 <_strtoll_l.constprop.0+0xec>
10020cfe:	4240      	negs	r0, r0
10020d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10020d04:	f1ba 0f00 	cmp.w	sl, #0
10020d08:	d003      	beq.n	10020d12 <_strtoll_l.constprop.0+0xfa>
10020d0a:	2b00      	cmp	r3, #0
10020d0c:	d13d      	bne.n	10020d8a <_strtoll_l.constprop.0+0x172>
10020d0e:	f8ca 9000 	str.w	r9, [sl]
10020d12:	b005      	add	sp, #20
10020d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020d18:	42a2      	cmp	r2, r4
10020d1a:	dab0      	bge.n	10020c7e <_strtoll_l.constprop.0+0x66>
10020d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10020d20:	e7b8      	b.n	10020c94 <_strtoll_l.constprop.0+0x7c>
10020d22:	9a03      	ldr	r2, [sp, #12]
10020d24:	2322      	movs	r3, #34	@ 0x22
10020d26:	6013      	str	r3, [r2, #0]
10020d28:	f1ba 0f00 	cmp.w	sl, #0
10020d2c:	d028      	beq.n	10020d80 <_strtoll_l.constprop.0+0x168>
10020d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
10020d32:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
10020d36:	e7ea      	b.n	10020d0e <_strtoll_l.constprop.0+0xf6>
10020d38:	9300      	str	r3, [sp, #0]
10020d3a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
10020d3e:	2301      	movs	r3, #1
10020d40:	782c      	ldrb	r4, [r5, #0]
10020d42:	e9cd 0301 	strd	r0, r3, [sp, #4]
10020d46:	1c8d      	adds	r5, r1, #2
10020d48:	e781      	b.n	10020c4e <_strtoll_l.constprop.0+0x36>
10020d4a:	782b      	ldrb	r3, [r5, #0]
10020d4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020d50:	2b58      	cmp	r3, #88	@ 0x58
10020d52:	d00e      	beq.n	10020d72 <_strtoll_l.constprop.0+0x15a>
10020d54:	2708      	movs	r7, #8
10020d56:	46b0      	mov	r8, r6
10020d58:	463e      	mov	r6, r7
10020d5a:	e77f      	b.n	10020c5c <_strtoll_l.constprop.0+0x44>
10020d5c:	2c30      	cmp	r4, #48	@ 0x30
10020d5e:	d003      	beq.n	10020d68 <_strtoll_l.constprop.0+0x150>
10020d60:	4637      	mov	r7, r6
10020d62:	f04f 0800 	mov.w	r8, #0
10020d66:	e779      	b.n	10020c5c <_strtoll_l.constprop.0+0x44>
10020d68:	782b      	ldrb	r3, [r5, #0]
10020d6a:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020d6e:	2b58      	cmp	r3, #88	@ 0x58
10020d70:	d1f6      	bne.n	10020d60 <_strtoll_l.constprop.0+0x148>
10020d72:	2710      	movs	r7, #16
10020d74:	786c      	ldrb	r4, [r5, #1]
10020d76:	f04f 0800 	mov.w	r8, #0
10020d7a:	3502      	adds	r5, #2
10020d7c:	463e      	mov	r6, r7
10020d7e:	e76d      	b.n	10020c5c <_strtoll_l.constprop.0+0x44>
10020d80:	e9dd 0100 	ldrd	r0, r1, [sp]
10020d84:	b005      	add	sp, #20
10020d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020d8a:	e9cd 0100 	strd	r0, r1, [sp]
10020d8e:	e7ce      	b.n	10020d2e <_strtoll_l.constprop.0+0x116>
10020d90:	1002c211 	.word	0x1002c211

10020d94 <_strtoll_r>:
10020d94:	f7ff bf40 	b.w	10020c18 <_strtoll_l.constprop.0>

10020d98 <__libc_fini_array>:
10020d98:	b538      	push	{r3, r4, r5, lr}
10020d9a:	4d07      	ldr	r5, [pc, #28]	@ (10020db8 <__libc_fini_array+0x20>)
10020d9c:	4c07      	ldr	r4, [pc, #28]	@ (10020dbc <__libc_fini_array+0x24>)
10020d9e:	1b2c      	subs	r4, r5, r4
10020da0:	10a4      	asrs	r4, r4, #2
10020da2:	d005      	beq.n	10020db0 <__libc_fini_array+0x18>
10020da4:	3c01      	subs	r4, #1
10020da6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
10020daa:	4798      	blx	r3
10020dac:	2c00      	cmp	r4, #0
10020dae:	d1f9      	bne.n	10020da4 <__libc_fini_array+0xc>
10020db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10020db4:	f012 ba34 	b.w	10033220 <_fini>
10020db8:	20000adc 	.word	0x20000adc
10020dbc:	20000ad8 	.word	0x20000ad8

10020dc0 <_strtoull_l.constprop.0>:
10020dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10020dc4:	b085      	sub	sp, #20
10020dc6:	468b      	mov	fp, r1
10020dc8:	9201      	str	r2, [sp, #4]
10020dca:	4a60      	ldr	r2, [pc, #384]	@ (10020f4c <_strtoull_l.constprop.0+0x18c>)
10020dcc:	9003      	str	r0, [sp, #12]
10020dce:	461e      	mov	r6, r3
10020dd0:	460d      	mov	r5, r1
10020dd2:	4629      	mov	r1, r5
10020dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
10020dd8:	5d13      	ldrb	r3, [r2, r4]
10020dda:	f013 0308 	ands.w	r3, r3, #8
10020dde:	d1f8      	bne.n	10020dd2 <_strtoull_l.constprop.0+0x12>
10020de0:	2c2d      	cmp	r4, #45	@ 0x2d
10020de2:	d07e      	beq.n	10020ee2 <_strtoull_l.constprop.0+0x122>
10020de4:	2c2b      	cmp	r4, #43	@ 0x2b
10020de6:	bf03      	ittte	eq
10020de8:	782c      	ldrbeq	r4, [r5, #0]
10020dea:	9302      	streq	r3, [sp, #8]
10020dec:	1c8d      	addeq	r5, r1, #2
10020dee:	9302      	strne	r3, [sp, #8]
10020df0:	b96e      	cbnz	r6, 10020e0e <_strtoull_l.constprop.0+0x4e>
10020df2:	2c30      	cmp	r4, #48	@ 0x30
10020df4:	f000 8086 	beq.w	10020f04 <_strtoull_l.constprop.0+0x144>
10020df8:	f04f 090a 	mov.w	r9, #10
10020dfc:	46b2      	mov	sl, r6
10020dfe:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 10020f50 <_strtoull_l.constprop.0+0x190>
10020e02:	f04f 0c05 	mov.w	ip, #5
10020e06:	f04f 3799 	mov.w	r7, #2576980377	@ 0x99999999
10020e0a:	464e      	mov	r6, r9
10020e0c:	e017      	b.n	10020e3e <_strtoull_l.constprop.0+0x7e>
10020e0e:	2e10      	cmp	r6, #16
10020e10:	d06c      	beq.n	10020eec <_strtoull_l.constprop.0+0x12c>
10020e12:	ea4f 7ae6 	mov.w	sl, r6, asr #31
10020e16:	4632      	mov	r2, r6
10020e18:	4653      	mov	r3, sl
10020e1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10020e1e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10020e22:	f001 fdf5 	bl	10022a10 <__aeabi_uldivmod>
10020e26:	4632      	mov	r2, r6
10020e28:	4607      	mov	r7, r0
10020e2a:	4688      	mov	r8, r1
10020e2c:	4653      	mov	r3, sl
10020e2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10020e32:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10020e36:	f001 fdeb 	bl	10022a10 <__aeabi_uldivmod>
10020e3a:	46b1      	mov	r9, r6
10020e3c:	4694      	mov	ip, r2
10020e3e:	2200      	movs	r2, #0
10020e40:	4610      	mov	r0, r2
10020e42:	4611      	mov	r1, r2
10020e44:	e010      	b.n	10020e68 <_strtoull_l.constprop.0+0xa8>
10020e46:	4541      	cmp	r1, r8
10020e48:	bf08      	it	eq
10020e4a:	42b8      	cmpeq	r0, r7
10020e4c:	d039      	beq.n	10020ec2 <_strtoull_l.constprop.0+0x102>
10020e4e:	fb00 f20a 	mul.w	r2, r0, sl
10020e52:	fb09 2101 	mla	r1, r9, r1, r2
10020e56:	fba0 0209 	umull	r0, r2, r0, r9
10020e5a:	4411      	add	r1, r2
10020e5c:	1818      	adds	r0, r3, r0
10020e5e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
10020e62:	2201      	movs	r2, #1
10020e64:	f815 4b01 	ldrb.w	r4, [r5], #1
10020e68:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
10020e6c:	2b09      	cmp	r3, #9
10020e6e:	d905      	bls.n	10020e7c <_strtoull_l.constprop.0+0xbc>
10020e70:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
10020e74:	2b19      	cmp	r3, #25
10020e76:	d80c      	bhi.n	10020e92 <_strtoull_l.constprop.0+0xd2>
10020e78:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
10020e7c:	429e      	cmp	r6, r3
10020e7e:	dd10      	ble.n	10020ea2 <_strtoull_l.constprop.0+0xe2>
10020e80:	1c54      	adds	r4, r2, #1
10020e82:	d0ef      	beq.n	10020e64 <_strtoull_l.constprop.0+0xa4>
10020e84:	4287      	cmp	r7, r0
10020e86:	eb78 0201 	sbcs.w	r2, r8, r1
10020e8a:	d2dc      	bcs.n	10020e46 <_strtoull_l.constprop.0+0x86>
10020e8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10020e90:	e7e8      	b.n	10020e64 <_strtoull_l.constprop.0+0xa4>
10020e92:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
10020e96:	2b19      	cmp	r3, #25
10020e98:	d803      	bhi.n	10020ea2 <_strtoull_l.constprop.0+0xe2>
10020e9a:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
10020e9e:	429e      	cmp	r6, r3
10020ea0:	dcee      	bgt.n	10020e80 <_strtoull_l.constprop.0+0xc0>
10020ea2:	1c53      	adds	r3, r2, #1
10020ea4:	d012      	beq.n	10020ecc <_strtoull_l.constprop.0+0x10c>
10020ea6:	9b02      	ldr	r3, [sp, #8]
10020ea8:	b113      	cbz	r3, 10020eb0 <_strtoull_l.constprop.0+0xf0>
10020eaa:	4240      	negs	r0, r0
10020eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10020eb0:	9b01      	ldr	r3, [sp, #4]
10020eb2:	b11b      	cbz	r3, 10020ebc <_strtoull_l.constprop.0+0xfc>
10020eb4:	b992      	cbnz	r2, 10020edc <_strtoull_l.constprop.0+0x11c>
10020eb6:	9b01      	ldr	r3, [sp, #4]
10020eb8:	f8c3 b000 	str.w	fp, [r3]
10020ebc:	b005      	add	sp, #20
10020ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020ec2:	4563      	cmp	r3, ip
10020ec4:	ddc3      	ble.n	10020e4e <_strtoull_l.constprop.0+0x8e>
10020ec6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10020eca:	e7cb      	b.n	10020e64 <_strtoull_l.constprop.0+0xa4>
10020ecc:	9903      	ldr	r1, [sp, #12]
10020ece:	2322      	movs	r3, #34	@ 0x22
10020ed0:	600b      	str	r3, [r1, #0]
10020ed2:	9b01      	ldr	r3, [sp, #4]
10020ed4:	4610      	mov	r0, r2
10020ed6:	4611      	mov	r1, r2
10020ed8:	2b00      	cmp	r3, #0
10020eda:	d0ef      	beq.n	10020ebc <_strtoull_l.constprop.0+0xfc>
10020edc:	f105 3bff 	add.w	fp, r5, #4294967295	@ 0xffffffff
10020ee0:	e7e9      	b.n	10020eb6 <_strtoull_l.constprop.0+0xf6>
10020ee2:	2301      	movs	r3, #1
10020ee4:	782c      	ldrb	r4, [r5, #0]
10020ee6:	9302      	str	r3, [sp, #8]
10020ee8:	1c8d      	adds	r5, r1, #2
10020eea:	e781      	b.n	10020df0 <_strtoull_l.constprop.0+0x30>
10020eec:	2c30      	cmp	r4, #48	@ 0x30
10020eee:	d019      	beq.n	10020f24 <_strtoull_l.constprop.0+0x164>
10020ef0:	f04f 0c0f 	mov.w	ip, #15
10020ef4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020ef8:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
10020efc:	46b1      	mov	r9, r6
10020efe:	f04f 0a00 	mov.w	sl, #0
10020f02:	e79c      	b.n	10020e3e <_strtoull_l.constprop.0+0x7e>
10020f04:	782b      	ldrb	r3, [r5, #0]
10020f06:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020f0a:	2b58      	cmp	r3, #88	@ 0x58
10020f0c:	d00f      	beq.n	10020f2e <_strtoull_l.constprop.0+0x16e>
10020f0e:	f04f 0908 	mov.w	r9, #8
10020f12:	46b2      	mov	sl, r6
10020f14:	f04f 0c07 	mov.w	ip, #7
10020f18:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020f1c:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
10020f20:	464e      	mov	r6, r9
10020f22:	e78c      	b.n	10020e3e <_strtoull_l.constprop.0+0x7e>
10020f24:	782b      	ldrb	r3, [r5, #0]
10020f26:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020f2a:	2b58      	cmp	r3, #88	@ 0x58
10020f2c:	d1e0      	bne.n	10020ef0 <_strtoull_l.constprop.0+0x130>
10020f2e:	f04f 0910 	mov.w	r9, #16
10020f32:	786c      	ldrb	r4, [r5, #1]
10020f34:	f04f 0c0f 	mov.w	ip, #15
10020f38:	3502      	adds	r5, #2
10020f3a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020f3e:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
10020f42:	f04f 0a00 	mov.w	sl, #0
10020f46:	464e      	mov	r6, r9
10020f48:	e779      	b.n	10020e3e <_strtoull_l.constprop.0+0x7e>
10020f4a:	bf00      	nop
10020f4c:	1002c211 	.word	0x1002c211
10020f50:	19999999 	.word	0x19999999

10020f54 <_strtoull_r>:
10020f54:	f7ff bf34 	b.w	10020dc0 <_strtoull_l.constprop.0>

10020f58 <_mbrtowc_r>:
10020f58:	b570      	push	{r4, r5, r6, lr}
10020f5a:	b082      	sub	sp, #8
10020f5c:	4604      	mov	r4, r0
10020f5e:	9d06      	ldr	r5, [sp, #24]
10020f60:	b155      	cbz	r5, 10020f78 <_mbrtowc_r+0x20>
10020f62:	4810      	ldr	r0, [pc, #64]	@ (10020fa4 <_mbrtowc_r+0x4c>)
10020f64:	f8d0 60e4 	ldr.w	r6, [r0, #228]	@ 0xe4
10020f68:	9500      	str	r5, [sp, #0]
10020f6a:	b16a      	cbz	r2, 10020f88 <_mbrtowc_r+0x30>
10020f6c:	4620      	mov	r0, r4
10020f6e:	47b0      	blx	r6
10020f70:	1c43      	adds	r3, r0, #1
10020f72:	d010      	beq.n	10020f96 <_mbrtowc_r+0x3e>
10020f74:	b002      	add	sp, #8
10020f76:	bd70      	pop	{r4, r5, r6, pc}
10020f78:	f100 05f4 	add.w	r5, r0, #244	@ 0xf4
10020f7c:	4809      	ldr	r0, [pc, #36]	@ (10020fa4 <_mbrtowc_r+0x4c>)
10020f7e:	f8d0 60e4 	ldr.w	r6, [r0, #228]	@ 0xe4
10020f82:	9500      	str	r5, [sp, #0]
10020f84:	2a00      	cmp	r2, #0
10020f86:	d1f1      	bne.n	10020f6c <_mbrtowc_r+0x14>
10020f88:	2301      	movs	r3, #1
10020f8a:	4611      	mov	r1, r2
10020f8c:	4620      	mov	r0, r4
10020f8e:	4a06      	ldr	r2, [pc, #24]	@ (10020fa8 <_mbrtowc_r+0x50>)
10020f90:	47b0      	blx	r6
10020f92:	1c43      	adds	r3, r0, #1
10020f94:	d1ee      	bne.n	10020f74 <_mbrtowc_r+0x1c>
10020f96:	2200      	movs	r2, #0
10020f98:	238a      	movs	r3, #138	@ 0x8a
10020f9a:	602a      	str	r2, [r5, #0]
10020f9c:	6023      	str	r3, [r4, #0]
10020f9e:	b002      	add	sp, #8
10020fa0:	bd70      	pop	{r4, r5, r6, pc}
10020fa2:	bf00      	nop
10020fa4:	20000474 	.word	0x20000474
10020fa8:	1002c5b4 	.word	0x1002c5b4

10020fac <_wcsnrtombs_l>:
10020fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10020fb0:	b089      	sub	sp, #36	@ 0x24
10020fb2:	e9dd 7a13 	ldrd	r7, sl, [sp, #76]	@ 0x4c
10020fb6:	4686      	mov	lr, r0
10020fb8:	461e      	mov	r6, r3
10020fba:	2f00      	cmp	r7, #0
10020fbc:	d053      	beq.n	10021066 <_wcsnrtombs_l+0xba>
10020fbe:	6815      	ldr	r5, [r2, #0]
10020fc0:	2900      	cmp	r1, #0
10020fc2:	d055      	beq.n	10021070 <_wcsnrtombs_l+0xc4>
10020fc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10020fc6:	2b00      	cmp	r3, #0
10020fc8:	d062      	beq.n	10021090 <_wcsnrtombs_l+0xe4>
10020fca:	1e74      	subs	r4, r6, #1
10020fcc:	b32e      	cbz	r6, 1002101a <_wcsnrtombs_l+0x6e>
10020fce:	e9cd e100 	strd	lr, r1, [sp]
10020fd2:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10020fd6:	9102      	str	r1, [sp, #8]
10020fd8:	3d04      	subs	r5, #4
10020fda:	2600      	movs	r6, #0
10020fdc:	9203      	str	r2, [sp, #12]
10020fde:	e00a      	b.n	10020ff6 <_wcsnrtombs_l+0x4a>
10020fe0:	9b01      	ldr	r3, [sp, #4]
10020fe2:	b9f3      	cbnz	r3, 10021022 <_wcsnrtombs_l+0x76>
10020fe4:	6828      	ldr	r0, [r5, #0]
10020fe6:	2800      	cmp	r0, #0
10020fe8:	d031      	beq.n	1002104e <_wcsnrtombs_l+0xa2>
10020fea:	45dc      	cmp	ip, fp
10020fec:	d252      	bcs.n	10021094 <_wcsnrtombs_l+0xe8>
10020fee:	3c01      	subs	r4, #1
10020ff0:	1c63      	adds	r3, r4, #1
10020ff2:	4666      	mov	r6, ip
10020ff4:	d011      	beq.n	1002101a <_wcsnrtombs_l+0x6e>
10020ff6:	f855 2f04 	ldr.w	r2, [r5, #4]!
10020ffa:	9800      	ldr	r0, [sp, #0]
10020ffc:	f8da c0e0 	ldr.w	ip, [sl, #224]	@ 0xe0
10021000:	463b      	mov	r3, r7
10021002:	a905      	add	r1, sp, #20
10021004:	e9d7 9800 	ldrd	r9, r8, [r7]
10021008:	47e0      	blx	ip
1002100a:	1c42      	adds	r2, r0, #1
1002100c:	d034      	beq.n	10021078 <_wcsnrtombs_l+0xcc>
1002100e:	eb00 0c06 	add.w	ip, r0, r6
10021012:	45dc      	cmp	ip, fp
10021014:	d9e4      	bls.n	10020fe0 <_wcsnrtombs_l+0x34>
10021016:	e9c7 9800 	strd	r9, r8, [r7]
1002101a:	4630      	mov	r0, r6
1002101c:	b009      	add	sp, #36	@ 0x24
1002101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021022:	2800      	cmp	r0, #0
10021024:	dd0c      	ble.n	10021040 <_wcsnrtombs_l+0x94>
10021026:	9b02      	ldr	r3, [sp, #8]
10021028:	4418      	add	r0, r3
1002102a:	1e5a      	subs	r2, r3, #1
1002102c:	a905      	add	r1, sp, #20
1002102e:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
10021032:	f811 3b01 	ldrb.w	r3, [r1], #1
10021036:	f802 3f01 	strb.w	r3, [r2, #1]!
1002103a:	4596      	cmp	lr, r2
1002103c:	d1f9      	bne.n	10021032 <_wcsnrtombs_l+0x86>
1002103e:	9002      	str	r0, [sp, #8]
10021040:	9b03      	ldr	r3, [sp, #12]
10021042:	6828      	ldr	r0, [r5, #0]
10021044:	681a      	ldr	r2, [r3, #0]
10021046:	3204      	adds	r2, #4
10021048:	601a      	str	r2, [r3, #0]
1002104a:	2800      	cmp	r0, #0
1002104c:	d1cd      	bne.n	10020fea <_wcsnrtombs_l+0x3e>
1002104e:	9901      	ldr	r1, [sp, #4]
10021050:	9a03      	ldr	r2, [sp, #12]
10021052:	b101      	cbz	r1, 10021056 <_wcsnrtombs_l+0xaa>
10021054:	6010      	str	r0, [r2, #0]
10021056:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
1002105a:	2200      	movs	r2, #0
1002105c:	4630      	mov	r0, r6
1002105e:	603a      	str	r2, [r7, #0]
10021060:	b009      	add	sp, #36	@ 0x24
10021062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021066:	6815      	ldr	r5, [r2, #0]
10021068:	f500 7786 	add.w	r7, r0, #268	@ 0x10c
1002106c:	2900      	cmp	r1, #0
1002106e:	d1a9      	bne.n	10020fc4 <_wcsnrtombs_l+0x18>
10021070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10021074:	9312      	str	r3, [sp, #72]	@ 0x48
10021076:	e7a8      	b.n	10020fca <_wcsnrtombs_l+0x1e>
10021078:	f8dd e000 	ldr.w	lr, [sp]
1002107c:	4606      	mov	r6, r0
1002107e:	218a      	movs	r1, #138	@ 0x8a
10021080:	2200      	movs	r2, #0
10021082:	4630      	mov	r0, r6
10021084:	f8ce 1000 	str.w	r1, [lr]
10021088:	603a      	str	r2, [r7, #0]
1002108a:	b009      	add	sp, #36	@ 0x24
1002108c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021090:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10021092:	e7c2      	b.n	1002101a <_wcsnrtombs_l+0x6e>
10021094:	4666      	mov	r6, ip
10021096:	e7c0      	b.n	1002101a <_wcsnrtombs_l+0x6e>

10021098 <_wcsnrtombs_r>:
10021098:	b510      	push	{r4, lr}
1002109a:	b084      	sub	sp, #16
1002109c:	4c05      	ldr	r4, [pc, #20]	@ (100210b4 <_wcsnrtombs_r+0x1c>)
1002109e:	9806      	ldr	r0, [sp, #24]
100210a0:	9000      	str	r0, [sp, #0]
100210a2:	9807      	ldr	r0, [sp, #28]
100210a4:	9001      	str	r0, [sp, #4]
100210a6:	4804      	ldr	r0, [pc, #16]	@ (100210b8 <_wcsnrtombs_r+0x20>)
100210a8:	6800      	ldr	r0, [r0, #0]
100210aa:	9402      	str	r4, [sp, #8]
100210ac:	f7ff ff7e 	bl	10020fac <_wcsnrtombs_l>
100210b0:	b004      	add	sp, #16
100210b2:	bd10      	pop	{r4, pc}
100210b4:	20000474 	.word	0x20000474
100210b8:	200005e0 	.word	0x200005e0

100210bc <iswspace>:
100210bc:	2100      	movs	r1, #0
100210be:	f000 b801 	b.w	100210c4 <iswspace_l>
100210c2:	bf00      	nop

100210c4 <iswspace_l>:
100210c4:	b510      	push	{r4, lr}
100210c6:	f000 f90d 	bl	100212e4 <_jp2uc_l>
100210ca:	4604      	mov	r4, r0
100210cc:	f000 f972 	bl	100213b4 <category>
100210d0:	f1a0 031a 	sub.w	r3, r0, #26
100210d4:	b2db      	uxtb	r3, r3
100210d6:	2b02      	cmp	r3, #2
100210d8:	d906      	bls.n	100210e8 <iswspace_l+0x24>
100210da:	f1a4 0009 	sub.w	r0, r4, #9
100210de:	2804      	cmp	r0, #4
100210e0:	bf8c      	ite	hi
100210e2:	2000      	movhi	r0, #0
100210e4:	2001      	movls	r0, #1
100210e6:	bd10      	pop	{r4, pc}
100210e8:	2001      	movs	r0, #1
100210ea:	bd10      	pop	{r4, pc}

100210ec <__register_exitproc>:
100210ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100210f0:	4d1b      	ldr	r5, [pc, #108]	@ (10021160 <__register_exitproc+0x74>)
100210f2:	4606      	mov	r6, r0
100210f4:	6828      	ldr	r0, [r5, #0]
100210f6:	4698      	mov	r8, r3
100210f8:	460f      	mov	r7, r1
100210fa:	4691      	mov	r9, r2
100210fc:	f7f8 ff8c 	bl	1001a018 <__retarget_lock_acquire_recursive>
10021100:	4b18      	ldr	r3, [pc, #96]	@ (10021164 <__register_exitproc+0x78>)
10021102:	681c      	ldr	r4, [r3, #0]
10021104:	b31c      	cbz	r4, 1002114e <__register_exitproc+0x62>
10021106:	6828      	ldr	r0, [r5, #0]
10021108:	6865      	ldr	r5, [r4, #4]
1002110a:	2d1f      	cmp	r5, #31
1002110c:	dc22      	bgt.n	10021154 <__register_exitproc+0x68>
1002110e:	b94e      	cbnz	r6, 10021124 <__register_exitproc+0x38>
10021110:	1c6b      	adds	r3, r5, #1
10021112:	3502      	adds	r5, #2
10021114:	6063      	str	r3, [r4, #4]
10021116:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
1002111a:	f7f8 ff7f 	bl	1001a01c <__retarget_lock_release_recursive>
1002111e:	2000      	movs	r0, #0
10021120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10021124:	eb04 0185 	add.w	r1, r4, r5, lsl #2
10021128:	2301      	movs	r3, #1
1002112a:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
1002112e:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
10021132:	40ab      	lsls	r3, r5
10021134:	431a      	orrs	r2, r3
10021136:	2e02      	cmp	r6, #2
10021138:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
1002113c:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
10021140:	d1e6      	bne.n	10021110 <__register_exitproc+0x24>
10021142:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
10021146:	431a      	orrs	r2, r3
10021148:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
1002114c:	e7e0      	b.n	10021110 <__register_exitproc+0x24>
1002114e:	4c06      	ldr	r4, [pc, #24]	@ (10021168 <__register_exitproc+0x7c>)
10021150:	601c      	str	r4, [r3, #0]
10021152:	e7d8      	b.n	10021106 <__register_exitproc+0x1a>
10021154:	f7f8 ff62 	bl	1001a01c <__retarget_lock_release_recursive>
10021158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1002115c:	e7e0      	b.n	10021120 <__register_exitproc+0x34>
1002115e:	bf00      	nop
10021160:	20000708 	.word	0x20000708
10021164:	20001718 	.word	0x20001718
10021168:	2000171c 	.word	0x2000171c

1002116c <nan>:
1002116c:	4901      	ldr	r1, [pc, #4]	@ (10021174 <nan+0x8>)
1002116e:	2000      	movs	r0, #0
10021170:	4770      	bx	lr
10021172:	bf00      	nop
10021174:	7ff80000 	.word	0x7ff80000

10021178 <nanf>:
10021178:	4800      	ldr	r0, [pc, #0]	@ (1002117c <nanf+0x4>)
1002117a:	4770      	bx	lr
1002117c:	7fc00000 	.word	0x7fc00000

10021180 <__assert_func>:
10021180:	b500      	push	{lr}
10021182:	4c0b      	ldr	r4, [pc, #44]	@ (100211b0 <__assert_func+0x30>)
10021184:	6825      	ldr	r5, [r4, #0]
10021186:	4614      	mov	r4, r2
10021188:	68ee      	ldr	r6, [r5, #12]
1002118a:	461a      	mov	r2, r3
1002118c:	b085      	sub	sp, #20
1002118e:	4603      	mov	r3, r0
10021190:	460d      	mov	r5, r1
10021192:	b14c      	cbz	r4, 100211a8 <__assert_func+0x28>
10021194:	4907      	ldr	r1, [pc, #28]	@ (100211b4 <__assert_func+0x34>)
10021196:	9500      	str	r5, [sp, #0]
10021198:	e9cd 1401 	strd	r1, r4, [sp, #4]
1002119c:	4630      	mov	r0, r6
1002119e:	4906      	ldr	r1, [pc, #24]	@ (100211b8 <__assert_func+0x38>)
100211a0:	f000 fd48 	bl	10021c34 <fiprintf>
100211a4:	f000 fed2 	bl	10021f4c <abort>
100211a8:	4904      	ldr	r1, [pc, #16]	@ (100211bc <__assert_func+0x3c>)
100211aa:	460c      	mov	r4, r1
100211ac:	e7f3      	b.n	10021196 <__assert_func+0x16>
100211ae:	bf00      	nop
100211b0:	200005e0 	.word	0x200005e0
100211b4:	1002c5a8 	.word	0x1002c5a8
100211b8:	1002c5b8 	.word	0x1002c5b8
100211bc:	1002c5b4 	.word	0x1002c5b4

100211c0 <__jp2uc>:
100211c0:	2902      	cmp	r1, #2
100211c2:	f3c0 2207 	ubfx	r2, r0, #8, #8
100211c6:	b2c3      	uxtb	r3, r0
100211c8:	d025      	beq.n	10021216 <__jp2uc+0x56>
100211ca:	2903      	cmp	r1, #3
100211cc:	d11e      	bne.n	1002120c <__jp2uc+0x4c>
100211ce:	f102 0150 	add.w	r1, r2, #80	@ 0x50
100211d2:	b2c9      	uxtb	r1, r1
100211d4:	291f      	cmp	r1, #31
100211d6:	d90b      	bls.n	100211f0 <__jp2uc+0x30>
100211d8:	f102 0130 	add.w	r1, r2, #48	@ 0x30
100211dc:	b2c9      	uxtb	r1, r1
100211de:	2924      	cmp	r1, #36	@ 0x24
100211e0:	d834      	bhi.n	1002124c <__jp2uc+0x8c>
100211e2:	f24f 41a6 	movw	r1, #62630	@ 0xf4a6
100211e6:	4288      	cmp	r0, r1
100211e8:	d926      	bls.n	10021238 <__jp2uc+0x78>
100211ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100211ee:	4770      	bx	lr
100211f0:	f64c 71d3 	movw	r1, #53203	@ 0xcfd3
100211f4:	4288      	cmp	r0, r1
100211f6:	d8f8      	bhi.n	100211ea <__jp2uc+0x2a>
100211f8:	3ab0      	subs	r2, #176	@ 0xb0
100211fa:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
100211fe:	3ba1      	subs	r3, #161	@ 0xa1
10021200:	4930      	ldr	r1, [pc, #192]	@ (100212c4 <__jp2uc+0x104>)
10021202:	eb03 0342 	add.w	r3, r3, r2, lsl #1
10021206:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
1002120a:	4770      	bx	lr
1002120c:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
10021210:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
10021214:	e7db      	b.n	100211ce <__jp2uc+0xe>
10021216:	2b9e      	cmp	r3, #158	@ 0x9e
10021218:	d90a      	bls.n	10021230 <__jp2uc+0x70>
1002121a:	3323      	adds	r3, #35	@ 0x23
1002121c:	b2db      	uxtb	r3, r3
1002121e:	2180      	movs	r1, #128	@ 0x80
10021220:	2a9f      	cmp	r2, #159	@ 0x9f
10021222:	bf94      	ite	ls
10021224:	3a70      	subls	r2, #112	@ 0x70
10021226:	3250      	addhi	r2, #80	@ 0x50
10021228:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1002122c:	b2ca      	uxtb	r2, r1
1002122e:	e7ce      	b.n	100211ce <__jp2uc+0xe>
10021230:	3b7e      	subs	r3, #126	@ 0x7e
10021232:	b2db      	uxtb	r3, r3
10021234:	217f      	movs	r1, #127	@ 0x7f
10021236:	e7f3      	b.n	10021220 <__jp2uc+0x60>
10021238:	3ad0      	subs	r2, #208	@ 0xd0
1002123a:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
1002123e:	3ba1      	subs	r3, #161	@ 0xa1
10021240:	4921      	ldr	r1, [pc, #132]	@ (100212c8 <__jp2uc+0x108>)
10021242:	eb03 0342 	add.w	r3, r3, r2, lsl #1
10021246:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
1002124a:	4770      	bx	lr
1002124c:	3aa1      	subs	r2, #161	@ 0xa1
1002124e:	2a07      	cmp	r2, #7
10021250:	d8cb      	bhi.n	100211ea <__jp2uc+0x2a>
10021252:	e8df f002 	tbb	[pc, r2]
10021256:	2831      	.short	0x2831
10021258:	0f13181e 	.word	0x0f13181e
1002125c:	040b      	.short	0x040b
1002125e:	2bc0      	cmp	r3, #192	@ 0xc0
10021260:	d8c3      	bhi.n	100211ea <__jp2uc+0x2a>
10021262:	4a1a      	ldr	r2, [pc, #104]	@ (100212cc <__jp2uc+0x10c>)
10021264:	3ba1      	subs	r3, #161	@ 0xa1
10021266:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
1002126a:	4770      	bx	lr
1002126c:	2bf1      	cmp	r3, #241	@ 0xf1
1002126e:	d8bc      	bhi.n	100211ea <__jp2uc+0x2a>
10021270:	4a17      	ldr	r2, [pc, #92]	@ (100212d0 <__jp2uc+0x110>)
10021272:	e019      	b.n	100212a8 <__jp2uc+0xe8>
10021274:	2bd8      	cmp	r3, #216	@ 0xd8
10021276:	d8b8      	bhi.n	100211ea <__jp2uc+0x2a>
10021278:	4a16      	ldr	r2, [pc, #88]	@ (100212d4 <__jp2uc+0x114>)
1002127a:	e015      	b.n	100212a8 <__jp2uc+0xe8>
1002127c:	2bf6      	cmp	r3, #246	@ 0xf6
1002127e:	d8b4      	bhi.n	100211ea <__jp2uc+0x2a>
10021280:	f503 5040 	add.w	r0, r3, #12288	@ 0x3000
10021284:	4770      	bx	lr
10021286:	2bf3      	cmp	r3, #243	@ 0xf3
10021288:	d8af      	bhi.n	100211ea <__jp2uc+0x2a>
1002128a:	f503 503e 	add.w	r0, r3, #12160	@ 0x2f80
1002128e:	3020      	adds	r0, #32
10021290:	4770      	bx	lr
10021292:	4a11      	ldr	r2, [pc, #68]	@ (100212d8 <__jp2uc+0x118>)
10021294:	441a      	add	r2, r3
10021296:	f812 2ca1 	ldrb.w	r2, [r2, #-161]
1002129a:	2a00      	cmp	r2, #0
1002129c:	d0a5      	beq.n	100211ea <__jp2uc+0x2a>
1002129e:	f503 407e 	add.w	r0, r3, #65024	@ 0xfe00
100212a2:	3060      	adds	r0, #96	@ 0x60
100212a4:	4770      	bx	lr
100212a6:	4a0d      	ldr	r2, [pc, #52]	@ (100212dc <__jp2uc+0x11c>)
100212a8:	3ba1      	subs	r3, #161	@ 0xa1
100212aa:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
100212ae:	2800      	cmp	r0, #0
100212b0:	bf08      	it	eq
100212b2:	f04f 30ff 	moveq.w	r0, #4294967295	@ 0xffffffff
100212b6:	4770      	bx	lr
100212b8:	4a09      	ldr	r2, [pc, #36]	@ (100212e0 <__jp2uc+0x120>)
100212ba:	3ba1      	subs	r3, #161	@ 0xa1
100212bc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
100212c0:	4770      	bx	lr
100212c2:	bf00      	nop
100212c4:	1002e078 	.word	0x1002e078
100212c8:	1002c5fc 	.word	0x1002c5fc
100212cc:	1002f7a4 	.word	0x1002f7a4
100212d0:	1002f7e4 	.word	0x1002f7e4
100212d4:	1002f888 	.word	0x1002f888
100212d8:	1002f8f8 	.word	0x1002f8f8
100212dc:	1002f954 	.word	0x1002f954
100212e0:	1002fa10 	.word	0x1002fa10

100212e4 <_jp2uc_l>:
100212e4:	b538      	push	{r3, r4, r5, lr}
100212e6:	4605      	mov	r5, r0
100212e8:	b1b9      	cbz	r1, 1002131a <_jp2uc_l+0x36>
100212ea:	f501 7495 	add.w	r4, r1, #298	@ 0x12a
100212ee:	4912      	ldr	r1, [pc, #72]	@ (10021338 <_jp2uc_l+0x54>)
100212f0:	4620      	mov	r0, r4
100212f2:	f7f8 fcf5 	bl	10019ce0 <strcmp>
100212f6:	b928      	cbnz	r0, 10021304 <_jp2uc_l+0x20>
100212f8:	4628      	mov	r0, r5
100212fa:	2101      	movs	r1, #1
100212fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10021300:	f7ff bf5e 	b.w	100211c0 <__jp2uc>
10021304:	490d      	ldr	r1, [pc, #52]	@ (1002133c <_jp2uc_l+0x58>)
10021306:	4620      	mov	r0, r4
10021308:	f7f8 fcea 	bl	10019ce0 <strcmp>
1002130c:	b938      	cbnz	r0, 1002131e <_jp2uc_l+0x3a>
1002130e:	4628      	mov	r0, r5
10021310:	2102      	movs	r1, #2
10021312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10021316:	f7ff bf53 	b.w	100211c0 <__jp2uc>
1002131a:	4c09      	ldr	r4, [pc, #36]	@ (10021340 <_jp2uc_l+0x5c>)
1002131c:	e7e7      	b.n	100212ee <_jp2uc_l+0xa>
1002131e:	4909      	ldr	r1, [pc, #36]	@ (10021344 <_jp2uc_l+0x60>)
10021320:	4620      	mov	r0, r4
10021322:	f7f8 fcdd 	bl	10019ce0 <strcmp>
10021326:	b928      	cbnz	r0, 10021334 <_jp2uc_l+0x50>
10021328:	4628      	mov	r0, r5
1002132a:	2103      	movs	r1, #3
1002132c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10021330:	f7ff bf46 	b.w	100211c0 <__jp2uc>
10021334:	4628      	mov	r0, r5
10021336:	bd38      	pop	{r3, r4, r5, pc}
10021338:	1002c5e8 	.word	0x1002c5e8
1002133c:	1002c5ec 	.word	0x1002c5ec
10021340:	2000059e 	.word	0x2000059e
10021344:	1002c5f4 	.word	0x1002c5f4

10021348 <_calloc_r>:
10021348:	b538      	push	{r3, r4, r5, lr}
1002134a:	fba1 1402 	umull	r1, r4, r1, r2
1002134e:	bb54      	cbnz	r4, 100213a6 <_calloc_r+0x5e>
10021350:	f7f4 f9e2 	bl	10015718 <_malloc_r>
10021354:	4605      	mov	r5, r0
10021356:	b350      	cbz	r0, 100213ae <_calloc_r+0x66>
10021358:	f850 2c04 	ldr.w	r2, [r0, #-4]
1002135c:	f022 0203 	bic.w	r2, r2, #3
10021360:	3a04      	subs	r2, #4
10021362:	2a24      	cmp	r2, #36	@ 0x24
10021364:	d810      	bhi.n	10021388 <_calloc_r+0x40>
10021366:	2a13      	cmp	r2, #19
10021368:	d913      	bls.n	10021392 <_calloc_r+0x4a>
1002136a:	2a1b      	cmp	r2, #27
1002136c:	6004      	str	r4, [r0, #0]
1002136e:	6044      	str	r4, [r0, #4]
10021370:	d916      	bls.n	100213a0 <_calloc_r+0x58>
10021372:	2a24      	cmp	r2, #36	@ 0x24
10021374:	6084      	str	r4, [r0, #8]
10021376:	60c4      	str	r4, [r0, #12]
10021378:	bf11      	iteee	ne
1002137a:	f100 0210 	addne.w	r2, r0, #16
1002137e:	f100 0218 	addeq.w	r2, r0, #24
10021382:	6104      	streq	r4, [r0, #16]
10021384:	6144      	streq	r4, [r0, #20]
10021386:	e005      	b.n	10021394 <_calloc_r+0x4c>
10021388:	4621      	mov	r1, r4
1002138a:	f7f8 fb57 	bl	10019a3c <memset>
1002138e:	4628      	mov	r0, r5
10021390:	bd38      	pop	{r3, r4, r5, pc}
10021392:	4602      	mov	r2, r0
10021394:	2300      	movs	r3, #0
10021396:	6013      	str	r3, [r2, #0]
10021398:	6053      	str	r3, [r2, #4]
1002139a:	6093      	str	r3, [r2, #8]
1002139c:	4628      	mov	r0, r5
1002139e:	bd38      	pop	{r3, r4, r5, pc}
100213a0:	f100 0208 	add.w	r2, r0, #8
100213a4:	e7f6      	b.n	10021394 <_calloc_r+0x4c>
100213a6:	f7f8 fc81 	bl	10019cac <__errno>
100213aa:	230c      	movs	r3, #12
100213ac:	6003      	str	r3, [r0, #0]
100213ae:	2500      	movs	r5, #0
100213b0:	4628      	mov	r0, r5
100213b2:	bd38      	pop	{r3, r4, r5, pc}

100213b4 <category>:
100213b4:	4b17      	ldr	r3, [pc, #92]	@ (10021414 <category+0x60>)
100213b6:	4298      	cmp	r0, r3
100213b8:	d827      	bhi.n	1002140a <category+0x56>
100213ba:	b570      	push	{r4, r5, r6, lr}
100213bc:	4d16      	ldr	r5, [pc, #88]	@ (10021418 <category+0x64>)
100213be:	f04f 0e00 	mov.w	lr, #0
100213c2:	f640 04f9 	movw	r4, #2297	@ 0x8f9
100213c6:	e003      	b.n	100213d0 <category+0x1c>
100213c8:	f102 0e01 	add.w	lr, r2, #1
100213cc:	4574      	cmp	r4, lr
100213ce:	db1a      	blt.n	10021406 <category+0x52>
100213d0:	eb0e 0204 	add.w	r2, lr, r4
100213d4:	f022 0301 	bic.w	r3, r2, #1
100213d8:	eb03 0362 	add.w	r3, r3, r2, asr #1
100213dc:	eb05 0c43 	add.w	ip, r5, r3, lsl #1
100213e0:	1052      	asrs	r2, r2, #1
100213e2:	f89c 1001 	ldrb.w	r1, [ip, #1]
100213e6:	f8bc 6002 	ldrh.w	r6, [ip, #2]
100213ea:	f8bc c004 	ldrh.w	ip, [ip, #4]
100213ee:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
100213f2:	448c      	add	ip, r1
100213f4:	4560      	cmp	r0, ip
100213f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
100213fa:	d8e5      	bhi.n	100213c8 <category+0x14>
100213fc:	4288      	cmp	r0, r1
100213fe:	d206      	bcs.n	1002140e <category+0x5a>
10021400:	1e54      	subs	r4, r2, #1
10021402:	4574      	cmp	r4, lr
10021404:	dae4      	bge.n	100213d0 <category+0x1c>
10021406:	20ff      	movs	r0, #255	@ 0xff
10021408:	bd70      	pop	{r4, r5, r6, pc}
1002140a:	20ff      	movs	r0, #255	@ 0xff
1002140c:	4770      	bx	lr
1002140e:	5ce8      	ldrb	r0, [r5, r3]
10021410:	bd70      	pop	{r4, r5, r6, pc}
10021412:	bf00      	nop
10021414:	000e01ef 	.word	0x000e01ef
10021418:	1002facc 	.word	0x1002facc

1002141c <rshift>:
1002141c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10021420:	6904      	ldr	r4, [r0, #16]
10021422:	ebb4 1f61 	cmp.w	r4, r1, asr #5
10021426:	dc05      	bgt.n	10021434 <rshift+0x18>
10021428:	2300      	movs	r3, #0
1002142a:	6103      	str	r3, [r0, #16]
1002142c:	2300      	movs	r3, #0
1002142e:	6143      	str	r3, [r0, #20]
10021430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10021434:	f100 0514 	add.w	r5, r0, #20
10021438:	114e      	asrs	r6, r1, #5
1002143a:	f011 0c1f 	ands.w	ip, r1, #31
1002143e:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
10021442:	eb05 0386 	add.w	r3, r5, r6, lsl #2
10021446:	d021      	beq.n	1002148c <rshift+0x70>
10021448:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
1002144c:	3304      	adds	r3, #4
1002144e:	459e      	cmp	lr, r3
10021450:	fa21 f10c 	lsr.w	r1, r1, ip
10021454:	f1cc 0820 	rsb	r8, ip, #32
10021458:	d92d      	bls.n	100214b6 <rshift+0x9a>
1002145a:	462f      	mov	r7, r5
1002145c:	681a      	ldr	r2, [r3, #0]
1002145e:	fa02 f208 	lsl.w	r2, r2, r8
10021462:	430a      	orrs	r2, r1
10021464:	f847 2b04 	str.w	r2, [r7], #4
10021468:	f853 1b04 	ldr.w	r1, [r3], #4
1002146c:	459e      	cmp	lr, r3
1002146e:	fa21 f10c 	lsr.w	r1, r1, ip
10021472:	d8f3      	bhi.n	1002145c <rshift+0x40>
10021474:	1ba3      	subs	r3, r4, r6
10021476:	009b      	lsls	r3, r3, #2
10021478:	3b05      	subs	r3, #5
1002147a:	089b      	lsrs	r3, r3, #2
1002147c:	3301      	adds	r3, #1
1002147e:	eb05 0483 	add.w	r4, r5, r3, lsl #2
10021482:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
10021486:	b179      	cbz	r1, 100214a8 <rshift+0x8c>
10021488:	3404      	adds	r4, #4
1002148a:	e00d      	b.n	100214a8 <rshift+0x8c>
1002148c:	459e      	cmp	lr, r3
1002148e:	bf88      	it	hi
10021490:	f100 0210 	addhi.w	r2, r0, #16
10021494:	d9c8      	bls.n	10021428 <rshift+0xc>
10021496:	f853 1b04 	ldr.w	r1, [r3], #4
1002149a:	f842 1f04 	str.w	r1, [r2, #4]!
1002149e:	459e      	cmp	lr, r3
100214a0:	d8f9      	bhi.n	10021496 <rshift+0x7a>
100214a2:	1ba4      	subs	r4, r4, r6
100214a4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
100214a8:	1b63      	subs	r3, r4, r5
100214aa:	109b      	asrs	r3, r3, #2
100214ac:	42ac      	cmp	r4, r5
100214ae:	6103      	str	r3, [r0, #16]
100214b0:	d0bc      	beq.n	1002142c <rshift+0x10>
100214b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
100214b6:	6141      	str	r1, [r0, #20]
100214b8:	2900      	cmp	r1, #0
100214ba:	d0b5      	beq.n	10021428 <rshift+0xc>
100214bc:	462c      	mov	r4, r5
100214be:	e7e3      	b.n	10021488 <rshift+0x6c>

100214c0 <__gethex>:
100214c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100214c4:	680f      	ldr	r7, [r1, #0]
100214c6:	b085      	sub	sp, #20
100214c8:	e9cd 2000 	strd	r2, r0, [sp]
100214cc:	78ba      	ldrb	r2, [r7, #2]
100214ce:	9303      	str	r3, [sp, #12]
100214d0:	2a30      	cmp	r2, #48	@ 0x30
100214d2:	4689      	mov	r9, r1
100214d4:	f040 81ca 	bne.w	1002186c <__gethex+0x3ac>
100214d8:	1cfb      	adds	r3, r7, #3
100214da:	781a      	ldrb	r2, [r3, #0]
100214dc:	2a30      	cmp	r2, #48	@ 0x30
100214de:	461c      	mov	r4, r3
100214e0:	f103 0301 	add.w	r3, r3, #1
100214e4:	d0f9      	beq.n	100214da <__gethex+0x1a>
100214e6:	1be7      	subs	r7, r4, r7
100214e8:	3f02      	subs	r7, #2
100214ea:	f8df 82d8 	ldr.w	r8, [pc, #728]	@ 100217c4 <__gethex+0x304>
100214ee:	f818 3002 	ldrb.w	r3, [r8, r2]
100214f2:	2b00      	cmp	r3, #0
100214f4:	f000 80df 	beq.w	100216b6 <__gethex+0x1f6>
100214f8:	7823      	ldrb	r3, [r4, #0]
100214fa:	f818 3003 	ldrb.w	r3, [r8, r3]
100214fe:	f04f 0a00 	mov.w	sl, #0
10021502:	4655      	mov	r5, sl
10021504:	2b00      	cmp	r3, #0
10021506:	f000 8150 	beq.w	100217aa <__gethex+0x2ea>
1002150a:	4626      	mov	r6, r4
1002150c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
10021510:	f818 3003 	ldrb.w	r3, [r8, r3]
10021514:	2b00      	cmp	r3, #0
10021516:	d1f9      	bne.n	1002150c <__gethex+0x4c>
10021518:	49ab      	ldr	r1, [pc, #684]	@ (100217c8 <__gethex+0x308>)
1002151a:	2201      	movs	r2, #1
1002151c:	4630      	mov	r0, r6
1002151e:	f7f8 fadf 	bl	10019ae0 <strncmp>
10021522:	4683      	mov	fp, r0
10021524:	2800      	cmp	r0, #0
10021526:	d04c      	beq.n	100215c2 <__gethex+0x102>
10021528:	7832      	ldrb	r2, [r6, #0]
1002152a:	2d00      	cmp	r5, #0
1002152c:	f000 8180 	beq.w	10021830 <__gethex+0x370>
10021530:	1bab      	subs	r3, r5, r6
10021532:	ea4f 0b83 	mov.w	fp, r3, lsl #2
10021536:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
1002153a:	2a50      	cmp	r2, #80	@ 0x50
1002153c:	4635      	mov	r5, r6
1002153e:	d04c      	beq.n	100215da <__gethex+0x11a>
10021540:	f8c9 6000 	str.w	r6, [r9]
10021544:	f1ba 0f00 	cmp.w	sl, #0
10021548:	d165      	bne.n	10021616 <__gethex+0x156>
1002154a:	1b2a      	subs	r2, r5, r4
1002154c:	3a01      	subs	r2, #1
1002154e:	2a07      	cmp	r2, #7
10021550:	4651      	mov	r1, sl
10021552:	dd04      	ble.n	1002155e <__gethex+0x9e>
10021554:	1052      	asrs	r2, r2, #1
10021556:	2a07      	cmp	r2, #7
10021558:	f101 0101 	add.w	r1, r1, #1
1002155c:	dcfa      	bgt.n	10021554 <__gethex+0x94>
1002155e:	9801      	ldr	r0, [sp, #4]
10021560:	f7fd fade 	bl	1001eb20 <_Balloc>
10021564:	4682      	mov	sl, r0
10021566:	2800      	cmp	r0, #0
10021568:	f000 8250 	beq.w	10021a0c <__gethex+0x54c>
1002156c:	f100 0614 	add.w	r6, r0, #20
10021570:	42a5      	cmp	r5, r4
10021572:	9602      	str	r6, [sp, #8]
10021574:	d957      	bls.n	10021626 <__gethex+0x166>
10021576:	2700      	movs	r7, #0
10021578:	46b9      	mov	r9, r7
1002157a:	e00d      	b.n	10021598 <__gethex+0xd8>
1002157c:	2f20      	cmp	r7, #32
1002157e:	d01a      	beq.n	100215b6 <__gethex+0xf6>
10021580:	463a      	mov	r2, r7
10021582:	3704      	adds	r7, #4
10021584:	782b      	ldrb	r3, [r5, #0]
10021586:	f818 3003 	ldrb.w	r3, [r8, r3]
1002158a:	f003 030f 	and.w	r3, r3, #15
1002158e:	4093      	lsls	r3, r2
10021590:	ea49 0903 	orr.w	r9, r9, r3
10021594:	42a5      	cmp	r5, r4
10021596:	d049      	beq.n	1002162c <__gethex+0x16c>
10021598:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
1002159c:	2b2e      	cmp	r3, #46	@ 0x2e
1002159e:	d1ed      	bne.n	1002157c <__gethex+0xbc>
100215a0:	42a5      	cmp	r5, r4
100215a2:	d3eb      	bcc.n	1002157c <__gethex+0xbc>
100215a4:	4988      	ldr	r1, [pc, #544]	@ (100217c8 <__gethex+0x308>)
100215a6:	2201      	movs	r2, #1
100215a8:	4628      	mov	r0, r5
100215aa:	f7f8 fa99 	bl	10019ae0 <strncmp>
100215ae:	2800      	cmp	r0, #0
100215b0:	d0f0      	beq.n	10021594 <__gethex+0xd4>
100215b2:	2f20      	cmp	r7, #32
100215b4:	d1e4      	bne.n	10021580 <__gethex+0xc0>
100215b6:	2200      	movs	r2, #0
100215b8:	f846 9b04 	str.w	r9, [r6], #4
100215bc:	2704      	movs	r7, #4
100215be:	4691      	mov	r9, r2
100215c0:	e7e0      	b.n	10021584 <__gethex+0xc4>
100215c2:	2d00      	cmp	r5, #0
100215c4:	f000 8143 	beq.w	1002184e <__gethex+0x38e>
100215c8:	7832      	ldrb	r2, [r6, #0]
100215ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
100215ce:	1bab      	subs	r3, r5, r6
100215d0:	2a50      	cmp	r2, #80	@ 0x50
100215d2:	ea4f 0b83 	mov.w	fp, r3, lsl #2
100215d6:	4635      	mov	r5, r6
100215d8:	d1b2      	bne.n	10021540 <__gethex+0x80>
100215da:	786a      	ldrb	r2, [r5, #1]
100215dc:	2a2b      	cmp	r2, #43	@ 0x2b
100215de:	f000 8125 	beq.w	1002182c <__gethex+0x36c>
100215e2:	2a2d      	cmp	r2, #45	@ 0x2d
100215e4:	f000 80a1 	beq.w	1002172a <__gethex+0x26a>
100215e8:	1c6e      	adds	r6, r5, #1
100215ea:	2000      	movs	r0, #0
100215ec:	f818 1002 	ldrb.w	r1, [r8, r2]
100215f0:	1e4a      	subs	r2, r1, #1
100215f2:	2a18      	cmp	r2, #24
100215f4:	f200 8097 	bhi.w	10021726 <__gethex+0x266>
100215f8:	7872      	ldrb	r2, [r6, #1]
100215fa:	f818 2002 	ldrb.w	r2, [r8, r2]
100215fe:	3910      	subs	r1, #16
10021600:	3601      	adds	r6, #1
10021602:	2a00      	cmp	r2, #0
10021604:	d154      	bne.n	100216b0 <__gethex+0x1f0>
10021606:	b100      	cbz	r0, 1002160a <__gethex+0x14a>
10021608:	4249      	negs	r1, r1
1002160a:	448b      	add	fp, r1
1002160c:	f8c9 6000 	str.w	r6, [r9]
10021610:	f1ba 0f00 	cmp.w	sl, #0
10021614:	d099      	beq.n	1002154a <__gethex+0x8a>
10021616:	2f00      	cmp	r7, #0
10021618:	bf0c      	ite	eq
1002161a:	2506      	moveq	r5, #6
1002161c:	2500      	movne	r5, #0
1002161e:	4628      	mov	r0, r5
10021620:	b005      	add	sp, #20
10021622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021626:	9e02      	ldr	r6, [sp, #8]
10021628:	f04f 0900 	mov.w	r9, #0
1002162c:	f846 9b04 	str.w	r9, [r6], #4
10021630:	9b02      	ldr	r3, [sp, #8]
10021632:	1af6      	subs	r6, r6, r3
10021634:	10b6      	asrs	r6, r6, #2
10021636:	f8ca 6010 	str.w	r6, [sl, #16]
1002163a:	4648      	mov	r0, r9
1002163c:	f7fd fb48 	bl	1001ecd0 <__hi0bits>
10021640:	9b00      	ldr	r3, [sp, #0]
10021642:	0176      	lsls	r6, r6, #5
10021644:	681c      	ldr	r4, [r3, #0]
10021646:	1a36      	subs	r6, r6, r0
10021648:	42a6      	cmp	r6, r4
1002164a:	dc72      	bgt.n	10021732 <__gethex+0x272>
1002164c:	f2c0 80f2 	blt.w	10021834 <__gethex+0x374>
10021650:	2700      	movs	r7, #0
10021652:	9b00      	ldr	r3, [sp, #0]
10021654:	689a      	ldr	r2, [r3, #8]
10021656:	455a      	cmp	r2, fp
10021658:	f2c0 8129 	blt.w	100218ae <__gethex+0x3ee>
1002165c:	9b00      	ldr	r3, [sp, #0]
1002165e:	685a      	ldr	r2, [r3, #4]
10021660:	455a      	cmp	r2, fp
10021662:	dd49      	ble.n	100216f8 <__gethex+0x238>
10021664:	eba2 0b0b 	sub.w	fp, r2, fp
10021668:	455c      	cmp	r4, fp
1002166a:	dc7f      	bgt.n	1002176c <__gethex+0x2ac>
1002166c:	68db      	ldr	r3, [r3, #12]
1002166e:	2b02      	cmp	r3, #2
10021670:	f000 815b 	beq.w	1002192a <__gethex+0x46a>
10021674:	2b03      	cmp	r3, #3
10021676:	f000 8153 	beq.w	10021920 <__gethex+0x460>
1002167a:	2b01      	cmp	r3, #1
1002167c:	f000 8136 	beq.w	100218ec <__gethex+0x42c>
10021680:	9801      	ldr	r0, [sp, #4]
10021682:	4651      	mov	r1, sl
10021684:	f7fd fa72 	bl	1001eb6c <_Bfree>
10021688:	2550      	movs	r5, #80	@ 0x50
1002168a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1002168c:	2300      	movs	r3, #0
1002168e:	4628      	mov	r0, r5
10021690:	6013      	str	r3, [r2, #0]
10021692:	b005      	add	sp, #20
10021694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021698:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1002169c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
100216a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
100216a4:	f1a2 0110 	sub.w	r1, r2, #16
100216a8:	f818 2003 	ldrb.w	r2, [r8, r3]
100216ac:	2a00      	cmp	r2, #0
100216ae:	d0aa      	beq.n	10021606 <__gethex+0x146>
100216b0:	2a19      	cmp	r2, #25
100216b2:	ddf1      	ble.n	10021698 <__gethex+0x1d8>
100216b4:	e7a7      	b.n	10021606 <__gethex+0x146>
100216b6:	4944      	ldr	r1, [pc, #272]	@ (100217c8 <__gethex+0x308>)
100216b8:	2201      	movs	r2, #1
100216ba:	4620      	mov	r0, r4
100216bc:	f7f8 fa10 	bl	10019ae0 <strncmp>
100216c0:	4682      	mov	sl, r0
100216c2:	2800      	cmp	r0, #0
100216c4:	d173      	bne.n	100217ae <__gethex+0x2ee>
100216c6:	7863      	ldrb	r3, [r4, #1]
100216c8:	f818 2003 	ldrb.w	r2, [r8, r3]
100216cc:	1c65      	adds	r5, r4, #1
100216ce:	2a00      	cmp	r2, #0
100216d0:	d06f      	beq.n	100217b2 <__gethex+0x2f2>
100216d2:	2b30      	cmp	r3, #48	@ 0x30
100216d4:	462c      	mov	r4, r5
100216d6:	f040 8134 	bne.w	10021942 <__gethex+0x482>
100216da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
100216de:	2b30      	cmp	r3, #48	@ 0x30
100216e0:	d0fb      	beq.n	100216da <__gethex+0x21a>
100216e2:	f818 3003 	ldrb.w	r3, [r8, r3]
100216e6:	fab3 fa83 	clz	sl, r3
100216ea:	2701      	movs	r7, #1
100216ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
100216f0:	2b00      	cmp	r3, #0
100216f2:	f47f af0a 	bne.w	1002150a <__gethex+0x4a>
100216f6:	e058      	b.n	100217aa <__gethex+0x2ea>
100216f8:	2501      	movs	r5, #1
100216fa:	b157      	cbz	r7, 10021712 <__gethex+0x252>
100216fc:	9b00      	ldr	r3, [sp, #0]
100216fe:	68da      	ldr	r2, [r3, #12]
10021700:	2a02      	cmp	r2, #2
10021702:	d063      	beq.n	100217cc <__gethex+0x30c>
10021704:	2a03      	cmp	r2, #3
10021706:	d065      	beq.n	100217d4 <__gethex+0x314>
10021708:	2a01      	cmp	r2, #1
1002170a:	f000 8086 	beq.w	1002181a <__gethex+0x35a>
1002170e:	f045 0510 	orr.w	r5, r5, #16
10021712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10021714:	f8c3 a000 	str.w	sl, [r3]
10021718:	9b03      	ldr	r3, [sp, #12]
1002171a:	4628      	mov	r0, r5
1002171c:	f8c3 b000 	str.w	fp, [r3]
10021720:	b005      	add	sp, #20
10021722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021726:	462e      	mov	r6, r5
10021728:	e70a      	b.n	10021540 <__gethex+0x80>
1002172a:	2001      	movs	r0, #1
1002172c:	78aa      	ldrb	r2, [r5, #2]
1002172e:	1cae      	adds	r6, r5, #2
10021730:	e75c      	b.n	100215ec <__gethex+0x12c>
10021732:	1b36      	subs	r6, r6, r4
10021734:	4631      	mov	r1, r6
10021736:	4650      	mov	r0, sl
10021738:	f7fd fee0 	bl	1001f4fc <__any_on>
1002173c:	4607      	mov	r7, r0
1002173e:	b178      	cbz	r0, 10021760 <__gethex+0x2a0>
10021740:	1e71      	subs	r1, r6, #1
10021742:	114a      	asrs	r2, r1, #5
10021744:	9b02      	ldr	r3, [sp, #8]
10021746:	2701      	movs	r7, #1
10021748:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1002174c:	f001 021f 	and.w	r2, r1, #31
10021750:	fa07 f202 	lsl.w	r2, r7, r2
10021754:	4202      	tst	r2, r0
10021756:	d003      	beq.n	10021760 <__gethex+0x2a0>
10021758:	42b9      	cmp	r1, r7
1002175a:	f300 80b9 	bgt.w	100218d0 <__gethex+0x410>
1002175e:	2702      	movs	r7, #2
10021760:	4631      	mov	r1, r6
10021762:	4650      	mov	r0, sl
10021764:	44b3      	add	fp, r6
10021766:	f7ff fe59 	bl	1002141c <rshift>
1002176a:	e772      	b.n	10021652 <__gethex+0x192>
1002176c:	f10b 36ff 	add.w	r6, fp, #4294967295	@ 0xffffffff
10021770:	2f00      	cmp	r7, #0
10021772:	f040 80a5 	bne.w	100218c0 <__gethex+0x400>
10021776:	2e00      	cmp	r6, #0
10021778:	f040 80a4 	bne.w	100218c4 <__gethex+0x404>
1002177c:	1173      	asrs	r3, r6, #5
1002177e:	9a02      	ldr	r2, [sp, #8]
10021780:	f006 061f 	and.w	r6, r6, #31
10021784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
10021788:	2301      	movs	r3, #1
1002178a:	40b3      	lsls	r3, r6
1002178c:	4213      	tst	r3, r2
1002178e:	4659      	mov	r1, fp
10021790:	4650      	mov	r0, sl
10021792:	bf18      	it	ne
10021794:	f047 0702 	orrne.w	r7, r7, #2
10021798:	f7ff fe40 	bl	1002141c <rshift>
1002179c:	9b00      	ldr	r3, [sp, #0]
1002179e:	eba4 040b 	sub.w	r4, r4, fp
100217a2:	2502      	movs	r5, #2
100217a4:	f8d3 b004 	ldr.w	fp, [r3, #4]
100217a8:	e7a7      	b.n	100216fa <__gethex+0x23a>
100217aa:	4626      	mov	r6, r4
100217ac:	e6b4      	b.n	10021518 <__gethex+0x58>
100217ae:	7823      	ldrb	r3, [r4, #0]
100217b0:	4625      	mov	r5, r4
100217b2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
100217b6:	2b50      	cmp	r3, #80	@ 0x50
100217b8:	f000 8093 	beq.w	100218e2 <__gethex+0x422>
100217bc:	f8c9 5000 	str.w	r5, [r9]
100217c0:	e729      	b.n	10021616 <__gethex+0x156>
100217c2:	bf00      	nop
100217c4:	10033114 	.word	0x10033114
100217c8:	1002c1c8 	.word	0x1002c1c8
100217cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100217ce:	f1c3 0301 	rsb	r3, r3, #1
100217d2:	930f      	str	r3, [sp, #60]	@ 0x3c
100217d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100217d6:	2b00      	cmp	r3, #0
100217d8:	d099      	beq.n	1002170e <__gethex+0x24e>
100217da:	f8dd 8008 	ldr.w	r8, [sp, #8]
100217de:	f8da 7010 	ldr.w	r7, [sl, #16]
100217e2:	4642      	mov	r2, r8
100217e4:	ea4f 0987 	mov.w	r9, r7, lsl #2
100217e8:	eb08 0687 	add.w	r6, r8, r7, lsl #2
100217ec:	2000      	movs	r0, #0
100217ee:	e003      	b.n	100217f8 <__gethex+0x338>
100217f0:	4296      	cmp	r6, r2
100217f2:	f842 0c04 	str.w	r0, [r2, #-4]
100217f6:	d93c      	bls.n	10021872 <__gethex+0x3b2>
100217f8:	4694      	mov	ip, r2
100217fa:	f852 1b04 	ldr.w	r1, [r2], #4
100217fe:	1c4b      	adds	r3, r1, #1
10021800:	d0f6      	beq.n	100217f0 <__gethex+0x330>
10021802:	3101      	adds	r1, #1
10021804:	2d02      	cmp	r5, #2
10021806:	f8cc 1000 	str.w	r1, [ip]
1002180a:	f000 8093 	beq.w	10021934 <__gethex+0x474>
1002180e:	f014 041f 	ands.w	r4, r4, #31
10021812:	f040 80b3 	bne.w	1002197c <__gethex+0x4bc>
10021816:	2521      	movs	r5, #33	@ 0x21
10021818:	e77b      	b.n	10021712 <__gethex+0x252>
1002181a:	07b9      	lsls	r1, r7, #30
1002181c:	f57f af77 	bpl.w	1002170e <__gethex+0x24e>
10021820:	9b02      	ldr	r3, [sp, #8]
10021822:	681a      	ldr	r2, [r3, #0]
10021824:	4317      	orrs	r7, r2
10021826:	07fa      	lsls	r2, r7, #31
10021828:	d4d7      	bmi.n	100217da <__gethex+0x31a>
1002182a:	e770      	b.n	1002170e <__gethex+0x24e>
1002182c:	2000      	movs	r0, #0
1002182e:	e77d      	b.n	1002172c <__gethex+0x26c>
10021830:	46ab      	mov	fp, r5
10021832:	e680      	b.n	10021536 <__gethex+0x76>
10021834:	1ba2      	subs	r2, r4, r6
10021836:	4651      	mov	r1, sl
10021838:	9801      	ldr	r0, [sp, #4]
1002183a:	ebab 0b02 	sub.w	fp, fp, r2
1002183e:	f7fd fbd7 	bl	1001eff0 <__lshift>
10021842:	f100 0314 	add.w	r3, r0, #20
10021846:	4682      	mov	sl, r0
10021848:	9302      	str	r3, [sp, #8]
1002184a:	2700      	movs	r7, #0
1002184c:	e701      	b.n	10021652 <__gethex+0x192>
1002184e:	7872      	ldrb	r2, [r6, #1]
10021850:	f818 1002 	ldrb.w	r1, [r8, r2]
10021854:	1c75      	adds	r5, r6, #1
10021856:	462e      	mov	r6, r5
10021858:	2900      	cmp	r1, #0
1002185a:	f43f ae6c 	beq.w	10021536 <__gethex+0x76>
1002185e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
10021862:	f818 3002 	ldrb.w	r3, [r8, r2]
10021866:	2b00      	cmp	r3, #0
10021868:	d1f9      	bne.n	1002185e <__gethex+0x39e>
1002186a:	e661      	b.n	10021530 <__gethex+0x70>
1002186c:	1cbc      	adds	r4, r7, #2
1002186e:	2700      	movs	r7, #0
10021870:	e63b      	b.n	100214ea <__gethex+0x2a>
10021872:	f8da 2008 	ldr.w	r2, [sl, #8]
10021876:	4297      	cmp	r7, r2
10021878:	da65      	bge.n	10021946 <__gethex+0x486>
1002187a:	463a      	mov	r2, r7
1002187c:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
10021880:	2001      	movs	r0, #1
10021882:	3201      	adds	r2, #1
10021884:	2d02      	cmp	r5, #2
10021886:	f8ca 2010 	str.w	r2, [sl, #16]
1002188a:	6148      	str	r0, [r1, #20]
1002188c:	d052      	beq.n	10021934 <__gethex+0x474>
1002188e:	4297      	cmp	r7, r2
10021890:	dabd      	bge.n	1002180e <__gethex+0x34e>
10021892:	2a00      	cmp	r2, #0
10021894:	dc7f      	bgt.n	10021996 <__gethex+0x4d6>
10021896:	2200      	movs	r2, #0
10021898:	f8ca 2010 	str.w	r2, [sl, #16]
1002189c:	2200      	movs	r2, #0
1002189e:	f8ca 2014 	str.w	r2, [sl, #20]
100218a2:	9b00      	ldr	r3, [sp, #0]
100218a4:	689a      	ldr	r2, [r3, #8]
100218a6:	f10b 0b01 	add.w	fp, fp, #1
100218aa:	455a      	cmp	r2, fp
100218ac:	dab3      	bge.n	10021816 <__gethex+0x356>
100218ae:	9801      	ldr	r0, [sp, #4]
100218b0:	4651      	mov	r1, sl
100218b2:	f7fd f95b 	bl	1001eb6c <_Bfree>
100218b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100218b8:	2300      	movs	r3, #0
100218ba:	6013      	str	r3, [r2, #0]
100218bc:	25a3      	movs	r5, #163	@ 0xa3
100218be:	e6ae      	b.n	1002161e <__gethex+0x15e>
100218c0:	2701      	movs	r7, #1
100218c2:	e75b      	b.n	1002177c <__gethex+0x2bc>
100218c4:	4631      	mov	r1, r6
100218c6:	4650      	mov	r0, sl
100218c8:	f7fd fe18 	bl	1001f4fc <__any_on>
100218cc:	4607      	mov	r7, r0
100218ce:	e755      	b.n	1002177c <__gethex+0x2bc>
100218d0:	1eb1      	subs	r1, r6, #2
100218d2:	4650      	mov	r0, sl
100218d4:	f7fd fe12 	bl	1001f4fc <__any_on>
100218d8:	2800      	cmp	r0, #0
100218da:	f43f af40 	beq.w	1002175e <__gethex+0x29e>
100218de:	2703      	movs	r7, #3
100218e0:	e73e      	b.n	10021760 <__gethex+0x2a0>
100218e2:	f04f 0b00 	mov.w	fp, #0
100218e6:	f04f 0a01 	mov.w	sl, #1
100218ea:	e676      	b.n	100215da <__gethex+0x11a>
100218ec:	455c      	cmp	r4, fp
100218ee:	f47f aec7 	bne.w	10021680 <__gethex+0x1c0>
100218f2:	2c01      	cmp	r4, #1
100218f4:	d008      	beq.n	10021908 <__gethex+0x448>
100218f6:	1e61      	subs	r1, r4, #1
100218f8:	4650      	mov	r0, sl
100218fa:	f7fd fdff 	bl	1001f4fc <__any_on>
100218fe:	2800      	cmp	r0, #0
10021900:	f43f aebe 	beq.w	10021680 <__gethex+0x1c0>
10021904:	9b00      	ldr	r3, [sp, #0]
10021906:	685a      	ldr	r2, [r3, #4]
10021908:	9903      	ldr	r1, [sp, #12]
1002190a:	600a      	str	r2, [r1, #0]
1002190c:	9a02      	ldr	r2, [sp, #8]
1002190e:	2301      	movs	r3, #1
10021910:	f8ca 3010 	str.w	r3, [sl, #16]
10021914:	6013      	str	r3, [r2, #0]
10021916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10021918:	2562      	movs	r5, #98	@ 0x62
1002191a:	f8c3 a000 	str.w	sl, [r3]
1002191e:	e67e      	b.n	1002161e <__gethex+0x15e>
10021920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10021922:	2b00      	cmp	r3, #0
10021924:	f43f aeac 	beq.w	10021680 <__gethex+0x1c0>
10021928:	e7ee      	b.n	10021908 <__gethex+0x448>
1002192a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1002192c:	2b00      	cmp	r3, #0
1002192e:	f47f aea7 	bne.w	10021680 <__gethex+0x1c0>
10021932:	e7e9      	b.n	10021908 <__gethex+0x448>
10021934:	9b00      	ldr	r3, [sp, #0]
10021936:	681a      	ldr	r2, [r3, #0]
10021938:	3a01      	subs	r2, #1
1002193a:	42a2      	cmp	r2, r4
1002193c:	d054      	beq.n	100219e8 <__gethex+0x528>
1002193e:	2522      	movs	r5, #34	@ 0x22
10021940:	e6e7      	b.n	10021712 <__gethex+0x252>
10021942:	2701      	movs	r7, #1
10021944:	e5e1      	b.n	1002150a <__gethex+0x4a>
10021946:	f8da 1004 	ldr.w	r1, [sl, #4]
1002194a:	9801      	ldr	r0, [sp, #4]
1002194c:	3101      	adds	r1, #1
1002194e:	f7fd f8e7 	bl	1001eb20 <_Balloc>
10021952:	4606      	mov	r6, r0
10021954:	2800      	cmp	r0, #0
10021956:	d05f      	beq.n	10021a18 <__gethex+0x558>
10021958:	f8da 2010 	ldr.w	r2, [sl, #16]
1002195c:	3202      	adds	r2, #2
1002195e:	0092      	lsls	r2, r2, #2
10021960:	f10a 010c 	add.w	r1, sl, #12
10021964:	300c      	adds	r0, #12
10021966:	f7f8 fbab 	bl	1001a0c0 <memcpy>
1002196a:	4651      	mov	r1, sl
1002196c:	9801      	ldr	r0, [sp, #4]
1002196e:	f7fd f8fd 	bl	1001eb6c <_Bfree>
10021972:	f106 0814 	add.w	r8, r6, #20
10021976:	6932      	ldr	r2, [r6, #16]
10021978:	46b2      	mov	sl, r6
1002197a:	e77f      	b.n	1002187c <__gethex+0x3bc>
1002197c:	44c1      	add	r9, r8
1002197e:	f1c4 0420 	rsb	r4, r4, #32
10021982:	f859 0c04 	ldr.w	r0, [r9, #-4]
10021986:	f7fd f9a3 	bl	1001ecd0 <__hi0bits>
1002198a:	42a0      	cmp	r0, r4
1002198c:	f6bf af43 	bge.w	10021816 <__gethex+0x356>
10021990:	f8da 2010 	ldr.w	r2, [sl, #16]
10021994:	e77d      	b.n	10021892 <__gethex+0x3d2>
10021996:	f8da 0014 	ldr.w	r0, [sl, #20]
1002199a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
1002199e:	f10a 0418 	add.w	r4, sl, #24
100219a2:	42a2      	cmp	r2, r4
100219a4:	ea4f 0050 	mov.w	r0, r0, lsr #1
100219a8:	d92a      	bls.n	10021a00 <__gethex+0x540>
100219aa:	4645      	mov	r5, r8
100219ac:	6823      	ldr	r3, [r4, #0]
100219ae:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
100219b2:	f845 0b04 	str.w	r0, [r5], #4
100219b6:	f854 0b04 	ldr.w	r0, [r4], #4
100219ba:	42a2      	cmp	r2, r4
100219bc:	ea4f 0050 	mov.w	r0, r0, lsr #1
100219c0:	d8f4      	bhi.n	100219ac <__gethex+0x4ec>
100219c2:	eba2 020a 	sub.w	r2, r2, sl
100219c6:	3a19      	subs	r2, #25
100219c8:	0892      	lsrs	r2, r2, #2
100219ca:	3201      	adds	r2, #1
100219cc:	f848 0022 	str.w	r0, [r8, r2, lsl #2]
100219d0:	eb08 0282 	add.w	r2, r8, r2, lsl #2
100219d4:	b9c0      	cbnz	r0, 10021a08 <__gethex+0x548>
100219d6:	eba2 0108 	sub.w	r1, r2, r8
100219da:	1089      	asrs	r1, r1, #2
100219dc:	4590      	cmp	r8, r2
100219de:	f8ca 1010 	str.w	r1, [sl, #16]
100219e2:	f47f af5e 	bne.w	100218a2 <__gethex+0x3e2>
100219e6:	e759      	b.n	1002189c <__gethex+0x3dc>
100219e8:	1162      	asrs	r2, r4, #5
100219ea:	f004 041f 	and.w	r4, r4, #31
100219ee:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
100219f2:	2201      	movs	r2, #1
100219f4:	40a2      	lsls	r2, r4
100219f6:	420a      	tst	r2, r1
100219f8:	bf14      	ite	ne
100219fa:	2521      	movne	r5, #33	@ 0x21
100219fc:	2522      	moveq	r5, #34	@ 0x22
100219fe:	e688      	b.n	10021712 <__gethex+0x252>
10021a00:	f8c8 0000 	str.w	r0, [r8]
10021a04:	4642      	mov	r2, r8
10021a06:	b168      	cbz	r0, 10021a24 <__gethex+0x564>
10021a08:	3204      	adds	r2, #4
10021a0a:	e7e4      	b.n	100219d6 <__gethex+0x516>
10021a0c:	4b07      	ldr	r3, [pc, #28]	@ (10021a2c <__gethex+0x56c>)
10021a0e:	4808      	ldr	r0, [pc, #32]	@ (10021a30 <__gethex+0x570>)
10021a10:	4652      	mov	r2, sl
10021a12:	21e4      	movs	r1, #228	@ 0xe4
10021a14:	f7ff fbb4 	bl	10021180 <__assert_func>
10021a18:	4b04      	ldr	r3, [pc, #16]	@ (10021a2c <__gethex+0x56c>)
10021a1a:	4805      	ldr	r0, [pc, #20]	@ (10021a30 <__gethex+0x570>)
10021a1c:	4632      	mov	r2, r6
10021a1e:	2184      	movs	r1, #132	@ 0x84
10021a20:	f7ff fbae 	bl	10021180 <__assert_func>
10021a24:	f8ca 0010 	str.w	r0, [sl, #16]
10021a28:	e738      	b.n	1002189c <__gethex+0x3dc>
10021a2a:	bf00      	nop
10021a2c:	1002c324 	.word	0x1002c324
10021a30:	100330a8 	.word	0x100330a8

10021a34 <__match>:
10021a34:	b410      	push	{r4}
10021a36:	6804      	ldr	r4, [r0, #0]
10021a38:	3401      	adds	r4, #1
10021a3a:	e009      	b.n	10021a50 <__match+0x1c>
10021a3c:	f814 3b01 	ldrb.w	r3, [r4], #1
10021a40:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
10021a44:	f1bc 0f19 	cmp.w	ip, #25
10021a48:	bf98      	it	ls
10021a4a:	3320      	addls	r3, #32
10021a4c:	4293      	cmp	r3, r2
10021a4e:	d107      	bne.n	10021a60 <__match+0x2c>
10021a50:	f811 2b01 	ldrb.w	r2, [r1], #1
10021a54:	2a00      	cmp	r2, #0
10021a56:	d1f1      	bne.n	10021a3c <__match+0x8>
10021a58:	6004      	str	r4, [r0, #0]
10021a5a:	2001      	movs	r0, #1
10021a5c:	bc10      	pop	{r4}
10021a5e:	4770      	bx	lr
10021a60:	2000      	movs	r0, #0
10021a62:	bc10      	pop	{r4}
10021a64:	4770      	bx	lr
10021a66:	bf00      	nop

10021a68 <__hexnan>:
10021a68:	6809      	ldr	r1, [r1, #0]
10021a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10021a6e:	114b      	asrs	r3, r1, #5
10021a70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
10021a74:	f011 0b1f 	ands.w	fp, r1, #31
10021a78:	4607      	mov	r7, r0
10021a7a:	bf0c      	ite	eq
10021a7c:	4618      	moveq	r0, r3
10021a7e:	1d18      	addne	r0, r3, #4
10021a80:	683c      	ldr	r4, [r7, #0]
10021a82:	bf0c      	ite	eq
10021a84:	1f1d      	subeq	r5, r3, #4
10021a86:	461d      	movne	r5, r3
10021a88:	2300      	movs	r3, #0
10021a8a:	f840 3c04 	str.w	r3, [r0, #-4]
10021a8e:	7861      	ldrb	r1, [r4, #1]
10021a90:	b085      	sub	sp, #20
10021a92:	3401      	adds	r4, #1
10021a94:	2900      	cmp	r1, #0
10021a96:	f000 80a8 	beq.w	10021bea <__hexnan+0x182>
10021a9a:	469e      	mov	lr, r3
10021a9c:	469a      	mov	sl, r3
10021a9e:	461e      	mov	r6, r3
10021aa0:	460b      	mov	r3, r1
10021aa2:	4601      	mov	r1, r0
10021aa4:	4610      	mov	r0, r2
10021aa6:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 10021c30 <__hexnan+0x1c8>
10021aaa:	9701      	str	r7, [sp, #4]
10021aac:	465a      	mov	r2, fp
10021aae:	46a8      	mov	r8, r5
10021ab0:	46ac      	mov	ip, r5
10021ab2:	4683      	mov	fp, r0
10021ab4:	e010      	b.n	10021ad8 <__hexnan+0x70>
10021ab6:	2b20      	cmp	r3, #32
10021ab8:	f200 808f 	bhi.w	10021bda <__hexnan+0x172>
10021abc:	4556      	cmp	r6, sl
10021abe:	dd08      	ble.n	10021ad2 <__hexnan+0x6a>
10021ac0:	45c4      	cmp	ip, r8
10021ac2:	d202      	bcs.n	10021aca <__hexnan+0x62>
10021ac4:	f1be 0f07 	cmp.w	lr, #7
10021ac8:	dd5f      	ble.n	10021b8a <__hexnan+0x122>
10021aca:	45e3      	cmp	fp, ip
10021acc:	d354      	bcc.n	10021b78 <__hexnan+0x110>
10021ace:	f04f 0e08 	mov.w	lr, #8
10021ad2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
10021ad6:	b1b3      	cbz	r3, 10021b06 <__hexnan+0x9e>
10021ad8:	f819 7003 	ldrb.w	r7, [r9, r3]
10021adc:	2f00      	cmp	r7, #0
10021ade:	d0ea      	beq.n	10021ab6 <__hexnan+0x4e>
10021ae0:	f10e 0e01 	add.w	lr, lr, #1
10021ae4:	f1be 0f08 	cmp.w	lr, #8
10021ae8:	f106 0601 	add.w	r6, r6, #1
10021aec:	dc3a      	bgt.n	10021b64 <__hexnan+0xfc>
10021aee:	f8dc 3000 	ldr.w	r3, [ip]
10021af2:	011b      	lsls	r3, r3, #4
10021af4:	f007 070f 	and.w	r7, r7, #15
10021af8:	431f      	orrs	r7, r3
10021afa:	f8cc 7000 	str.w	r7, [ip]
10021afe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
10021b02:	2b00      	cmp	r3, #0
10021b04:	d1e8      	bne.n	10021ad8 <__hexnan+0x70>
10021b06:	465b      	mov	r3, fp
10021b08:	4608      	mov	r0, r1
10021b0a:	4693      	mov	fp, r2
10021b0c:	461a      	mov	r2, r3
10021b0e:	2e00      	cmp	r6, #0
10021b10:	d06b      	beq.n	10021bea <__hexnan+0x182>
10021b12:	45e0      	cmp	r8, ip
10021b14:	d902      	bls.n	10021b1c <__hexnan+0xb4>
10021b16:	f1be 0f07 	cmp.w	lr, #7
10021b1a:	dd73      	ble.n	10021c04 <__hexnan+0x19c>
10021b1c:	4562      	cmp	r2, ip
10021b1e:	d24d      	bcs.n	10021bbc <__hexnan+0x154>
10021b20:	1f11      	subs	r1, r2, #4
10021b22:	4663      	mov	r3, ip
10021b24:	f853 4b04 	ldr.w	r4, [r3], #4
10021b28:	f841 4f04 	str.w	r4, [r1, #4]!
10021b2c:	42ab      	cmp	r3, r5
10021b2e:	d9f9      	bls.n	10021b24 <__hexnan+0xbc>
10021b30:	eba5 030c 	sub.w	r3, r5, ip
10021b34:	f023 0303 	bic.w	r3, r3, #3
10021b38:	1c69      	adds	r1, r5, #1
10021b3a:	3304      	adds	r3, #4
10021b3c:	f10c 0c01 	add.w	ip, ip, #1
10021b40:	4561      	cmp	r1, ip
10021b42:	bf38      	it	cc
10021b44:	2304      	movcc	r3, #4
10021b46:	4413      	add	r3, r2
10021b48:	2100      	movs	r1, #0
10021b4a:	f843 1b04 	str.w	r1, [r3], #4
10021b4e:	42ab      	cmp	r3, r5
10021b50:	d9fb      	bls.n	10021b4a <__hexnan+0xe2>
10021b52:	f850 3c04 	ldr.w	r3, [r0, #-4]
10021b56:	2b00      	cmp	r3, #0
10021b58:	d14d      	bne.n	10021bf6 <__hexnan+0x18e>
10021b5a:	42aa      	cmp	r2, r5
10021b5c:	d049      	beq.n	10021bf2 <__hexnan+0x18a>
10021b5e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
10021b62:	e7f8      	b.n	10021b56 <__hexnan+0xee>
10021b64:	45e3      	cmp	fp, ip
10021b66:	d2b4      	bcs.n	10021ad2 <__hexnan+0x6a>
10021b68:	2300      	movs	r3, #0
10021b6a:	f84c 3c04 	str.w	r3, [ip, #-4]
10021b6e:	f04f 0e01 	mov.w	lr, #1
10021b72:	f1ac 0c04 	sub.w	ip, ip, #4
10021b76:	e7bd      	b.n	10021af4 <__hexnan+0x8c>
10021b78:	2300      	movs	r3, #0
10021b7a:	f1ac 0804 	sub.w	r8, ip, #4
10021b7e:	f84c 3c04 	str.w	r3, [ip, #-4]
10021b82:	46b2      	mov	sl, r6
10021b84:	46c4      	mov	ip, r8
10021b86:	469e      	mov	lr, r3
10021b88:	e7a3      	b.n	10021ad2 <__hexnan+0x6a>
10021b8a:	f1ce 0008 	rsb	r0, lr, #8
10021b8e:	0080      	lsls	r0, r0, #2
10021b90:	e9cd 2c02 	strd	r2, ip, [sp, #8]
10021b94:	f8dc 3000 	ldr.w	r3, [ip]
10021b98:	4667      	mov	r7, ip
10021b9a:	f1c0 0e20 	rsb	lr, r0, #32
10021b9e:	4684      	mov	ip, r0
10021ba0:	6878      	ldr	r0, [r7, #4]
10021ba2:	fa00 f20e 	lsl.w	r2, r0, lr
10021ba6:	431a      	orrs	r2, r3
10021ba8:	fa20 f30c 	lsr.w	r3, r0, ip
10021bac:	603a      	str	r2, [r7, #0]
10021bae:	f847 3f04 	str.w	r3, [r7, #4]!
10021bb2:	4547      	cmp	r7, r8
10021bb4:	d3f4      	bcc.n	10021ba0 <__hexnan+0x138>
10021bb6:	e9dd 2c02 	ldrd	r2, ip, [sp, #8]
10021bba:	e786      	b.n	10021aca <__hexnan+0x62>
10021bbc:	f850 3c04 	ldr.w	r3, [r0, #-4]
10021bc0:	f1bb 0f00 	cmp.w	fp, #0
10021bc4:	d0c7      	beq.n	10021b56 <__hexnan+0xee>
10021bc6:	f1cb 0b20 	rsb	fp, fp, #32
10021bca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10021bce:	fa21 f10b 	lsr.w	r1, r1, fp
10021bd2:	400b      	ands	r3, r1
10021bd4:	f840 3c04 	str.w	r3, [r0, #-4]
10021bd8:	e7bd      	b.n	10021b56 <__hexnan+0xee>
10021bda:	4608      	mov	r0, r1
10021bdc:	4619      	mov	r1, r3
10021bde:	2929      	cmp	r1, #41	@ 0x29
10021be0:	465b      	mov	r3, fp
10021be2:	9f01      	ldr	r7, [sp, #4]
10021be4:	4693      	mov	fp, r2
10021be6:	461a      	mov	r2, r3
10021be8:	d009      	beq.n	10021bfe <__hexnan+0x196>
10021bea:	2004      	movs	r0, #4
10021bec:	b005      	add	sp, #20
10021bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021bf2:	2301      	movs	r3, #1
10021bf4:	602b      	str	r3, [r5, #0]
10021bf6:	2005      	movs	r0, #5
10021bf8:	b005      	add	sp, #20
10021bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021bfe:	3401      	adds	r4, #1
10021c00:	603c      	str	r4, [r7, #0]
10021c02:	e784      	b.n	10021b0e <__hexnan+0xa6>
10021c04:	f1ce 0308 	rsb	r3, lr, #8
10021c08:	f8dc 1000 	ldr.w	r1, [ip]
10021c0c:	009b      	lsls	r3, r3, #2
10021c0e:	f1c3 0e20 	rsb	lr, r3, #32
10021c12:	4666      	mov	r6, ip
10021c14:	460c      	mov	r4, r1
10021c16:	6877      	ldr	r7, [r6, #4]
10021c18:	fa07 f10e 	lsl.w	r1, r7, lr
10021c1c:	4321      	orrs	r1, r4
10021c1e:	fa27 f403 	lsr.w	r4, r7, r3
10021c22:	6031      	str	r1, [r6, #0]
10021c24:	f846 4f04 	str.w	r4, [r6, #4]!
10021c28:	45b0      	cmp	r8, r6
10021c2a:	d8f4      	bhi.n	10021c16 <__hexnan+0x1ae>
10021c2c:	e776      	b.n	10021b1c <__hexnan+0xb4>
10021c2e:	bf00      	nop
10021c30:	10033114 	.word	0x10033114

10021c34 <fiprintf>:
10021c34:	b40e      	push	{r1, r2, r3}
10021c36:	b510      	push	{r4, lr}
10021c38:	b083      	sub	sp, #12
10021c3a:	ab05      	add	r3, sp, #20
10021c3c:	4c06      	ldr	r4, [pc, #24]	@ (10021c58 <fiprintf+0x24>)
10021c3e:	f853 2b04 	ldr.w	r2, [r3], #4
10021c42:	9301      	str	r3, [sp, #4]
10021c44:	4601      	mov	r1, r0
10021c46:	6820      	ldr	r0, [r4, #0]
10021c48:	f7f5 fede 	bl	10017a08 <_vfiprintf_r>
10021c4c:	b003      	add	sp, #12
10021c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10021c52:	b003      	add	sp, #12
10021c54:	4770      	bx	lr
10021c56:	bf00      	nop
10021c58:	200005e0 	.word	0x200005e0

10021c5c <__ssprint_r>:
10021c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10021c60:	6893      	ldr	r3, [r2, #8]
10021c62:	6817      	ldr	r7, [r2, #0]
10021c64:	b083      	sub	sp, #12
10021c66:	4692      	mov	sl, r2
10021c68:	2b00      	cmp	r3, #0
10021c6a:	d074      	beq.n	10021d56 <__ssprint_r+0xfa>
10021c6c:	f04f 0b00 	mov.w	fp, #0
10021c70:	688b      	ldr	r3, [r1, #8]
10021c72:	680a      	ldr	r2, [r1, #0]
10021c74:	4681      	mov	r9, r0
10021c76:	460c      	mov	r4, r1
10021c78:	465d      	mov	r5, fp
10021c7a:	e045      	b.n	10021d08 <__ssprint_r+0xac>
10021c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10021c80:	f413 6f90 	tst.w	r3, #1152	@ 0x480
10021c84:	d02c      	beq.n	10021ce0 <__ssprint_r+0x84>
10021c86:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
10021c8a:	1a16      	subs	r6, r2, r0
10021c8c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
10021c90:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
10021c94:	1c71      	adds	r1, r6, #1
10021c96:	1052      	asrs	r2, r2, #1
10021c98:	4429      	add	r1, r5
10021c9a:	4291      	cmp	r1, r2
10021c9c:	bf92      	itee	ls
10021c9e:	4690      	movls	r8, r2
10021ca0:	4688      	movhi	r8, r1
10021ca2:	460a      	movhi	r2, r1
10021ca4:	055b      	lsls	r3, r3, #21
10021ca6:	d539      	bpl.n	10021d1c <__ssprint_r+0xc0>
10021ca8:	4611      	mov	r1, r2
10021caa:	4648      	mov	r0, r9
10021cac:	f7f3 fd34 	bl	10015718 <_malloc_r>
10021cb0:	9001      	str	r0, [sp, #4]
10021cb2:	2800      	cmp	r0, #0
10021cb4:	d03d      	beq.n	10021d32 <__ssprint_r+0xd6>
10021cb6:	4632      	mov	r2, r6
10021cb8:	6921      	ldr	r1, [r4, #16]
10021cba:	f7f8 fa01 	bl	1001a0c0 <memcpy>
10021cbe:	89a2      	ldrh	r2, [r4, #12]
10021cc0:	9b01      	ldr	r3, [sp, #4]
10021cc2:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
10021cc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
10021cca:	81a2      	strh	r2, [r4, #12]
10021ccc:	1998      	adds	r0, r3, r6
10021cce:	eba8 0606 	sub.w	r6, r8, r6
10021cd2:	60a6      	str	r6, [r4, #8]
10021cd4:	f8c4 8014 	str.w	r8, [r4, #20]
10021cd8:	6123      	str	r3, [r4, #16]
10021cda:	6020      	str	r0, [r4, #0]
10021cdc:	46a8      	mov	r8, r5
10021cde:	462e      	mov	r6, r5
10021ce0:	4632      	mov	r2, r6
10021ce2:	4659      	mov	r1, fp
10021ce4:	f7f7 fe2a 	bl	1001993c <memmove>
10021ce8:	f8da 1008 	ldr.w	r1, [sl, #8]
10021cec:	68a3      	ldr	r3, [r4, #8]
10021cee:	6822      	ldr	r2, [r4, #0]
10021cf0:	eba3 0308 	sub.w	r3, r3, r8
10021cf4:	4432      	add	r2, r6
10021cf6:	1b49      	subs	r1, r1, r5
10021cf8:	60a3      	str	r3, [r4, #8]
10021cfa:	6022      	str	r2, [r4, #0]
10021cfc:	f8ca 1008 	str.w	r1, [sl, #8]
10021d00:	b349      	cbz	r1, 10021d56 <__ssprint_r+0xfa>
10021d02:	e9d7 b500 	ldrd	fp, r5, [r7]
10021d06:	3708      	adds	r7, #8
10021d08:	4698      	mov	r8, r3
10021d0a:	4610      	mov	r0, r2
10021d0c:	2d00      	cmp	r5, #0
10021d0e:	d0f8      	beq.n	10021d02 <__ssprint_r+0xa6>
10021d10:	429d      	cmp	r5, r3
10021d12:	461e      	mov	r6, r3
10021d14:	d2b2      	bcs.n	10021c7c <__ssprint_r+0x20>
10021d16:	46a8      	mov	r8, r5
10021d18:	462e      	mov	r6, r5
10021d1a:	e7e1      	b.n	10021ce0 <__ssprint_r+0x84>
10021d1c:	4601      	mov	r1, r0
10021d1e:	4648      	mov	r0, r9
10021d20:	f7f6 fef4 	bl	10018b0c <_realloc_r>
10021d24:	4603      	mov	r3, r0
10021d26:	2800      	cmp	r0, #0
10021d28:	d1d0      	bne.n	10021ccc <__ssprint_r+0x70>
10021d2a:	6921      	ldr	r1, [r4, #16]
10021d2c:	4648      	mov	r0, r9
10021d2e:	f7f9 fb67 	bl	1001b400 <_free_r>
10021d32:	89a3      	ldrh	r3, [r4, #12]
10021d34:	220c      	movs	r2, #12
10021d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10021d3a:	f8c9 2000 	str.w	r2, [r9]
10021d3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021d42:	81a3      	strh	r3, [r4, #12]
10021d44:	2200      	movs	r2, #0
10021d46:	2300      	movs	r3, #0
10021d48:	f8ca 2008 	str.w	r2, [sl, #8]
10021d4c:	f8ca 3004 	str.w	r3, [sl, #4]
10021d50:	b003      	add	sp, #12
10021d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021d56:	2000      	movs	r0, #0
10021d58:	2300      	movs	r3, #0
10021d5a:	f8ca 3004 	str.w	r3, [sl, #4]
10021d5e:	b003      	add	sp, #12
10021d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

10021d64 <_sungetc_r>:
10021d64:	b538      	push	{r3, r4, r5, lr}
10021d66:	1c4b      	adds	r3, r1, #1
10021d68:	d01a      	beq.n	10021da0 <_sungetc_r+0x3c>
10021d6a:	4614      	mov	r4, r2
10021d6c:	8992      	ldrh	r2, [r2, #12]
10021d6e:	6863      	ldr	r3, [r4, #4]
10021d70:	f022 0220 	bic.w	r2, r2, #32
10021d74:	81a2      	strh	r2, [r4, #12]
10021d76:	6b22      	ldr	r2, [r4, #48]	@ 0x30
10021d78:	b2cd      	uxtb	r5, r1
10021d7a:	b1a2      	cbz	r2, 10021da6 <_sungetc_r+0x42>
10021d7c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
10021d7e:	429a      	cmp	r2, r3
10021d80:	dd09      	ble.n	10021d96 <_sungetc_r+0x32>
10021d82:	6823      	ldr	r3, [r4, #0]
10021d84:	1e5a      	subs	r2, r3, #1
10021d86:	6022      	str	r2, [r4, #0]
10021d88:	f803 5c01 	strb.w	r5, [r3, #-1]
10021d8c:	6863      	ldr	r3, [r4, #4]
10021d8e:	3301      	adds	r3, #1
10021d90:	6063      	str	r3, [r4, #4]
10021d92:	4628      	mov	r0, r5
10021d94:	bd38      	pop	{r3, r4, r5, pc}
10021d96:	4621      	mov	r1, r4
10021d98:	f000 f89e 	bl	10021ed8 <__submore>
10021d9c:	2800      	cmp	r0, #0
10021d9e:	d0f0      	beq.n	10021d82 <_sungetc_r+0x1e>
10021da0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
10021da4:	e7f5      	b.n	10021d92 <_sungetc_r+0x2e>
10021da6:	6922      	ldr	r2, [r4, #16]
10021da8:	6821      	ldr	r1, [r4, #0]
10021daa:	b12a      	cbz	r2, 10021db8 <_sungetc_r+0x54>
10021dac:	428a      	cmp	r2, r1
10021dae:	d203      	bcs.n	10021db8 <_sungetc_r+0x54>
10021db0:	f811 2c01 	ldrb.w	r2, [r1, #-1]
10021db4:	42aa      	cmp	r2, r5
10021db6:	d00c      	beq.n	10021dd2 <_sungetc_r+0x6e>
10021db8:	4622      	mov	r2, r4
10021dba:	e9c4 130e 	strd	r1, r3, [r4, #56]	@ 0x38
10021dbe:	f104 0040 	add.w	r0, r4, #64	@ 0x40
10021dc2:	2303      	movs	r3, #3
10021dc4:	6363      	str	r3, [r4, #52]	@ 0x34
10021dc6:	6320      	str	r0, [r4, #48]	@ 0x30
10021dc8:	f802 5f42 	strb.w	r5, [r2, #66]!
10021dcc:	2301      	movs	r3, #1
10021dce:	6022      	str	r2, [r4, #0]
10021dd0:	e7de      	b.n	10021d90 <_sungetc_r+0x2c>
10021dd2:	3901      	subs	r1, #1
10021dd4:	6021      	str	r1, [r4, #0]
10021dd6:	3301      	adds	r3, #1
10021dd8:	e7da      	b.n	10021d90 <_sungetc_r+0x2c>
10021dda:	bf00      	nop

10021ddc <__ssrefill_r>:
10021ddc:	b510      	push	{r4, lr}
10021dde:	460c      	mov	r4, r1
10021de0:	6b09      	ldr	r1, [r1, #48]	@ 0x30
10021de2:	b169      	cbz	r1, 10021e00 <__ssrefill_r+0x24>
10021de4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
10021de8:	4299      	cmp	r1, r3
10021dea:	d001      	beq.n	10021df0 <__ssrefill_r+0x14>
10021dec:	f7f9 fb08 	bl	1001b400 <_free_r>
10021df0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
10021df2:	6063      	str	r3, [r4, #4]
10021df4:	2000      	movs	r0, #0
10021df6:	6320      	str	r0, [r4, #48]	@ 0x30
10021df8:	b113      	cbz	r3, 10021e00 <__ssrefill_r+0x24>
10021dfa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
10021dfc:	6023      	str	r3, [r4, #0]
10021dfe:	bd10      	pop	{r4, pc}
10021e00:	89a2      	ldrh	r2, [r4, #12]
10021e02:	6923      	ldr	r3, [r4, #16]
10021e04:	2100      	movs	r1, #0
10021e06:	f042 0220 	orr.w	r2, r2, #32
10021e0a:	6061      	str	r1, [r4, #4]
10021e0c:	81a2      	strh	r2, [r4, #12]
10021e0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021e12:	e7f3      	b.n	10021dfc <__ssrefill_r+0x20>

10021e14 <_sfread_r>:
10021e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10021e18:	b085      	sub	sp, #20
10021e1a:	469c      	mov	ip, r3
10021e1c:	fb02 f303 	mul.w	r3, r2, r3
10021e20:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10021e22:	9301      	str	r3, [sp, #4]
10021e24:	2b00      	cmp	r3, #0
10021e26:	d03c      	beq.n	10021ea2 <_sfread_r+0x8e>
10021e28:	460f      	mov	r7, r1
10021e2a:	e9d4 1500 	ldrd	r1, r5, [r4]
10021e2e:	9b01      	ldr	r3, [sp, #4]
10021e30:	42ab      	cmp	r3, r5
10021e32:	d94e      	bls.n	10021ed2 <_sfread_r+0xbe>
10021e34:	9e01      	ldr	r6, [sp, #4]
10021e36:	e9cd c202 	strd	ip, r2, [sp, #8]
10021e3a:	462b      	mov	r3, r5
10021e3c:	4683      	mov	fp, r0
10021e3e:	4635      	mov	r5, r6
10021e40:	f04f 0800 	mov.w	r8, #0
10021e44:	f104 0940 	add.w	r9, r4, #64	@ 0x40
10021e48:	461e      	mov	r6, r3
10021e4a:	4632      	mov	r2, r6
10021e4c:	4638      	mov	r0, r7
10021e4e:	f7f8 f937 	bl	1001a0c0 <memcpy>
10021e52:	6821      	ldr	r1, [r4, #0]
10021e54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10021e56:	198a      	adds	r2, r1, r6
10021e58:	46aa      	mov	sl, r5
10021e5a:	e9c4 2800 	strd	r2, r8, [r4]
10021e5e:	4619      	mov	r1, r3
10021e60:	4658      	mov	r0, fp
10021e62:	4437      	add	r7, r6
10021e64:	1bad      	subs	r5, r5, r6
10021e66:	b303      	cbz	r3, 10021eaa <_sfread_r+0x96>
10021e68:	454b      	cmp	r3, r9
10021e6a:	d001      	beq.n	10021e70 <_sfread_r+0x5c>
10021e6c:	f7f9 fac8 	bl	1001b400 <_free_r>
10021e70:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
10021e72:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
10021e76:	6060      	str	r0, [r4, #4]
10021e78:	b1b8      	cbz	r0, 10021eaa <_sfread_r+0x96>
10021e7a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
10021e7c:	6021      	str	r1, [r4, #0]
10021e7e:	42a8      	cmp	r0, r5
10021e80:	4606      	mov	r6, r0
10021e82:	d3e2      	bcc.n	10021e4a <_sfread_r+0x36>
10021e84:	f8dd c008 	ldr.w	ip, [sp, #8]
10021e88:	462e      	mov	r6, r5
10021e8a:	4632      	mov	r2, r6
10021e8c:	4638      	mov	r0, r7
10021e8e:	f8cd c004 	str.w	ip, [sp, #4]
10021e92:	f7f8 f915 	bl	1001a0c0 <memcpy>
10021e96:	e9d4 3200 	ldrd	r3, r2, [r4]
10021e9a:	1b92      	subs	r2, r2, r6
10021e9c:	4433      	add	r3, r6
10021e9e:	e9c4 3200 	strd	r3, r2, [r4]
10021ea2:	9801      	ldr	r0, [sp, #4]
10021ea4:	b005      	add	sp, #20
10021ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021eaa:	9b01      	ldr	r3, [sp, #4]
10021eac:	9a03      	ldr	r2, [sp, #12]
10021eae:	4433      	add	r3, r6
10021eb0:	eba3 050a 	sub.w	r5, r3, sl
10021eb4:	fbb5 f3f2 	udiv	r3, r5, r2
10021eb8:	9301      	str	r3, [sp, #4]
10021eba:	89a3      	ldrh	r3, [r4, #12]
10021ebc:	6922      	ldr	r2, [r4, #16]
10021ebe:	9801      	ldr	r0, [sp, #4]
10021ec0:	f043 0320 	orr.w	r3, r3, #32
10021ec4:	81a3      	strh	r3, [r4, #12]
10021ec6:	2300      	movs	r3, #0
10021ec8:	e9c4 2300 	strd	r2, r3, [r4]
10021ecc:	b005      	add	sp, #20
10021ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021ed2:	461e      	mov	r6, r3
10021ed4:	e7d9      	b.n	10021e8a <_sfread_r+0x76>
10021ed6:	bf00      	nop

10021ed8 <__submore>:
10021ed8:	f101 0340 	add.w	r3, r1, #64	@ 0x40
10021edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10021ee0:	460c      	mov	r4, r1
10021ee2:	6b09      	ldr	r1, [r1, #48]	@ 0x30
10021ee4:	4299      	cmp	r1, r3
10021ee6:	d014      	beq.n	10021f12 <__submore+0x3a>
10021ee8:	6b66      	ldr	r6, [r4, #52]	@ 0x34
10021eea:	0077      	lsls	r7, r6, #1
10021eec:	463a      	mov	r2, r7
10021eee:	f7f6 fe0d 	bl	10018b0c <_realloc_r>
10021ef2:	4605      	mov	r5, r0
10021ef4:	b330      	cbz	r0, 10021f44 <__submore+0x6c>
10021ef6:	eb00 0806 	add.w	r8, r0, r6
10021efa:	4601      	mov	r1, r0
10021efc:	4632      	mov	r2, r6
10021efe:	4640      	mov	r0, r8
10021f00:	f7f8 f8de 	bl	1001a0c0 <memcpy>
10021f04:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
10021f08:	f8c4 8000 	str.w	r8, [r4]
10021f0c:	2000      	movs	r0, #0
10021f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10021f12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
10021f16:	f7f3 fbff 	bl	10015718 <_malloc_r>
10021f1a:	b198      	cbz	r0, 10021f44 <__submore+0x6c>
10021f1c:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
10021f20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10021f24:	e9c4 020c 	strd	r0, r2, [r4, #48]	@ 0x30
10021f28:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
10021f2c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
10021f30:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
10021f34:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
10021f38:	f880 23fd 	strb.w	r2, [r0, #1021]	@ 0x3fd
10021f3c:	f200 33fd 	addw	r3, r0, #1021	@ 0x3fd
10021f40:	6023      	str	r3, [r4, #0]
10021f42:	e7e3      	b.n	10021f0c <__submore+0x34>
10021f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021f48:	e7e1      	b.n	10021f0e <__submore+0x36>
10021f4a:	bf00      	nop

10021f4c <abort>:
10021f4c:	b508      	push	{r3, lr}
10021f4e:	2006      	movs	r0, #6
10021f50:	f000 f804 	bl	10021f5c <raise>
10021f54:	2001      	movs	r0, #1
10021f56:	f000 f855 	bl	10022004 <_exit>
10021f5a:	bf00      	nop

10021f5c <raise>:
10021f5c:	b538      	push	{r3, r4, r5, lr}
10021f5e:	4b14      	ldr	r3, [pc, #80]	@ (10021fb0 <raise+0x54>)
10021f60:	281f      	cmp	r0, #31
10021f62:	681d      	ldr	r5, [r3, #0]
10021f64:	d81e      	bhi.n	10021fa4 <raise+0x48>
10021f66:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
10021f6a:	4604      	mov	r4, r0
10021f6c:	b162      	cbz	r2, 10021f88 <raise+0x2c>
10021f6e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
10021f72:	b14b      	cbz	r3, 10021f88 <raise+0x2c>
10021f74:	2b01      	cmp	r3, #1
10021f76:	d005      	beq.n	10021f84 <raise+0x28>
10021f78:	1c59      	adds	r1, r3, #1
10021f7a:	d00f      	beq.n	10021f9c <raise+0x40>
10021f7c:	2100      	movs	r1, #0
10021f7e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
10021f82:	4798      	blx	r3
10021f84:	2000      	movs	r0, #0
10021f86:	bd38      	pop	{r3, r4, r5, pc}
10021f88:	4628      	mov	r0, r5
10021f8a:	f000 f829 	bl	10021fe0 <_getpid_r>
10021f8e:	4622      	mov	r2, r4
10021f90:	4601      	mov	r1, r0
10021f92:	4628      	mov	r0, r5
10021f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10021f98:	f000 b80c 	b.w	10021fb4 <_kill_r>
10021f9c:	2316      	movs	r3, #22
10021f9e:	602b      	str	r3, [r5, #0]
10021fa0:	2001      	movs	r0, #1
10021fa2:	bd38      	pop	{r3, r4, r5, pc}
10021fa4:	2316      	movs	r3, #22
10021fa6:	602b      	str	r3, [r5, #0]
10021fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021fac:	bd38      	pop	{r3, r4, r5, pc}
10021fae:	bf00      	nop
10021fb0:	200005e0 	.word	0x200005e0

10021fb4 <_kill_r>:
10021fb4:	b570      	push	{r4, r5, r6, lr}
10021fb6:	460c      	mov	r4, r1
10021fb8:	4d08      	ldr	r5, [pc, #32]	@ (10021fdc <_kill_r+0x28>)
10021fba:	4603      	mov	r3, r0
10021fbc:	2600      	movs	r6, #0
10021fbe:	4620      	mov	r0, r4
10021fc0:	4611      	mov	r1, r2
10021fc2:	461c      	mov	r4, r3
10021fc4:	602e      	str	r6, [r5, #0]
10021fc6:	f000 f815 	bl	10021ff4 <_kill>
10021fca:	1c43      	adds	r3, r0, #1
10021fcc:	d000      	beq.n	10021fd0 <_kill_r+0x1c>
10021fce:	bd70      	pop	{r4, r5, r6, pc}
10021fd0:	682b      	ldr	r3, [r5, #0]
10021fd2:	2b00      	cmp	r3, #0
10021fd4:	d0fb      	beq.n	10021fce <_kill_r+0x1a>
10021fd6:	6023      	str	r3, [r4, #0]
10021fd8:	bd70      	pop	{r4, r5, r6, pc}
10021fda:	bf00      	nop
10021fdc:	20001708 	.word	0x20001708

10021fe0 <_getpid_r>:
10021fe0:	f000 b800 	b.w	10021fe4 <_getpid>

10021fe4 <_getpid>:
10021fe4:	4b02      	ldr	r3, [pc, #8]	@ (10021ff0 <_getpid+0xc>)
10021fe6:	2258      	movs	r2, #88	@ 0x58
10021fe8:	601a      	str	r2, [r3, #0]
10021fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021fee:	4770      	bx	lr
10021ff0:	20001708 	.word	0x20001708

10021ff4 <_kill>:
10021ff4:	4b02      	ldr	r3, [pc, #8]	@ (10022000 <_kill+0xc>)
10021ff6:	2258      	movs	r2, #88	@ 0x58
10021ff8:	601a      	str	r2, [r3, #0]
10021ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021ffe:	4770      	bx	lr
10022000:	20001708 	.word	0x20001708

10022004 <_exit>:
10022004:	e7fe      	b.n	10022004 <_exit>
10022006:	bf00      	nop

10022008 <__aeabi_drsub>:
10022008:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
1002200c:	e002      	b.n	10022014 <__adddf3>
1002200e:	bf00      	nop

10022010 <__aeabi_dsub>:
10022010:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

10022014 <__adddf3>:
10022014:	b530      	push	{r4, r5, lr}
10022016:	ea4f 0441 	mov.w	r4, r1, lsl #1
1002201a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1002201e:	ea94 0f05 	teq	r4, r5
10022022:	bf08      	it	eq
10022024:	ea90 0f02 	teqeq	r0, r2
10022028:	bf1f      	itttt	ne
1002202a:	ea54 0c00 	orrsne.w	ip, r4, r0
1002202e:	ea55 0c02 	orrsne.w	ip, r5, r2
10022032:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
10022036:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1002203a:	f000 80e2 	beq.w	10022202 <__adddf3+0x1ee>
1002203e:	ea4f 5454 	mov.w	r4, r4, lsr #21
10022042:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
10022046:	bfb8      	it	lt
10022048:	426d      	neglt	r5, r5
1002204a:	dd0c      	ble.n	10022066 <__adddf3+0x52>
1002204c:	442c      	add	r4, r5
1002204e:	ea80 0202 	eor.w	r2, r0, r2
10022052:	ea81 0303 	eor.w	r3, r1, r3
10022056:	ea82 0000 	eor.w	r0, r2, r0
1002205a:	ea83 0101 	eor.w	r1, r3, r1
1002205e:	ea80 0202 	eor.w	r2, r0, r2
10022062:	ea81 0303 	eor.w	r3, r1, r3
10022066:	2d36      	cmp	r5, #54	@ 0x36
10022068:	bf88      	it	hi
1002206a:	bd30      	pophi	{r4, r5, pc}
1002206c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
10022070:	ea4f 3101 	mov.w	r1, r1, lsl #12
10022074:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
10022078:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1002207c:	d002      	beq.n	10022084 <__adddf3+0x70>
1002207e:	4240      	negs	r0, r0
10022080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10022084:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
10022088:	ea4f 3303 	mov.w	r3, r3, lsl #12
1002208c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10022090:	d002      	beq.n	10022098 <__adddf3+0x84>
10022092:	4252      	negs	r2, r2
10022094:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10022098:	ea94 0f05 	teq	r4, r5
1002209c:	f000 80a7 	beq.w	100221ee <__adddf3+0x1da>
100220a0:	f1a4 0401 	sub.w	r4, r4, #1
100220a4:	f1d5 0e20 	rsbs	lr, r5, #32
100220a8:	db0d      	blt.n	100220c6 <__adddf3+0xb2>
100220aa:	fa02 fc0e 	lsl.w	ip, r2, lr
100220ae:	fa22 f205 	lsr.w	r2, r2, r5
100220b2:	1880      	adds	r0, r0, r2
100220b4:	f141 0100 	adc.w	r1, r1, #0
100220b8:	fa03 f20e 	lsl.w	r2, r3, lr
100220bc:	1880      	adds	r0, r0, r2
100220be:	fa43 f305 	asr.w	r3, r3, r5
100220c2:	4159      	adcs	r1, r3
100220c4:	e00e      	b.n	100220e4 <__adddf3+0xd0>
100220c6:	f1a5 0520 	sub.w	r5, r5, #32
100220ca:	f10e 0e20 	add.w	lr, lr, #32
100220ce:	2a01      	cmp	r2, #1
100220d0:	fa03 fc0e 	lsl.w	ip, r3, lr
100220d4:	bf28      	it	cs
100220d6:	f04c 0c02 	orrcs.w	ip, ip, #2
100220da:	fa43 f305 	asr.w	r3, r3, r5
100220de:	18c0      	adds	r0, r0, r3
100220e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100220e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
100220e8:	d507      	bpl.n	100220fa <__adddf3+0xe6>
100220ea:	f04f 0e00 	mov.w	lr, #0
100220ee:	f1dc 0c00 	rsbs	ip, ip, #0
100220f2:	eb7e 0000 	sbcs.w	r0, lr, r0
100220f6:	eb6e 0101 	sbc.w	r1, lr, r1
100220fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
100220fe:	d31b      	bcc.n	10022138 <__adddf3+0x124>
10022100:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
10022104:	d30c      	bcc.n	10022120 <__adddf3+0x10c>
10022106:	0849      	lsrs	r1, r1, #1
10022108:	ea5f 0030 	movs.w	r0, r0, rrx
1002210c:	ea4f 0c3c 	mov.w	ip, ip, rrx
10022110:	f104 0401 	add.w	r4, r4, #1
10022114:	ea4f 5244 	mov.w	r2, r4, lsl #21
10022118:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
1002211c:	f080 809a 	bcs.w	10022254 <__adddf3+0x240>
10022120:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
10022124:	bf08      	it	eq
10022126:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1002212a:	f150 0000 	adcs.w	r0, r0, #0
1002212e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
10022132:	ea41 0105 	orr.w	r1, r1, r5
10022136:	bd30      	pop	{r4, r5, pc}
10022138:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1002213c:	4140      	adcs	r0, r0
1002213e:	eb41 0101 	adc.w	r1, r1, r1
10022142:	3c01      	subs	r4, #1
10022144:	bf28      	it	cs
10022146:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
1002214a:	d2e9      	bcs.n	10022120 <__adddf3+0x10c>
1002214c:	f091 0f00 	teq	r1, #0
10022150:	bf04      	itt	eq
10022152:	4601      	moveq	r1, r0
10022154:	2000      	moveq	r0, #0
10022156:	fab1 f381 	clz	r3, r1
1002215a:	bf08      	it	eq
1002215c:	3320      	addeq	r3, #32
1002215e:	f1a3 030b 	sub.w	r3, r3, #11
10022162:	f1b3 0220 	subs.w	r2, r3, #32
10022166:	da0c      	bge.n	10022182 <__adddf3+0x16e>
10022168:	320c      	adds	r2, #12
1002216a:	dd08      	ble.n	1002217e <__adddf3+0x16a>
1002216c:	f102 0c14 	add.w	ip, r2, #20
10022170:	f1c2 020c 	rsb	r2, r2, #12
10022174:	fa01 f00c 	lsl.w	r0, r1, ip
10022178:	fa21 f102 	lsr.w	r1, r1, r2
1002217c:	e00c      	b.n	10022198 <__adddf3+0x184>
1002217e:	f102 0214 	add.w	r2, r2, #20
10022182:	bfd8      	it	le
10022184:	f1c2 0c20 	rsble	ip, r2, #32
10022188:	fa01 f102 	lsl.w	r1, r1, r2
1002218c:	fa20 fc0c 	lsr.w	ip, r0, ip
10022190:	bfdc      	itt	le
10022192:	ea41 010c 	orrle.w	r1, r1, ip
10022196:	4090      	lslle	r0, r2
10022198:	1ae4      	subs	r4, r4, r3
1002219a:	bfa2      	ittt	ge
1002219c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100221a0:	4329      	orrge	r1, r5
100221a2:	bd30      	popge	{r4, r5, pc}
100221a4:	ea6f 0404 	mvn.w	r4, r4
100221a8:	3c1f      	subs	r4, #31
100221aa:	da1c      	bge.n	100221e6 <__adddf3+0x1d2>
100221ac:	340c      	adds	r4, #12
100221ae:	dc0e      	bgt.n	100221ce <__adddf3+0x1ba>
100221b0:	f104 0414 	add.w	r4, r4, #20
100221b4:	f1c4 0220 	rsb	r2, r4, #32
100221b8:	fa20 f004 	lsr.w	r0, r0, r4
100221bc:	fa01 f302 	lsl.w	r3, r1, r2
100221c0:	ea40 0003 	orr.w	r0, r0, r3
100221c4:	fa21 f304 	lsr.w	r3, r1, r4
100221c8:	ea45 0103 	orr.w	r1, r5, r3
100221cc:	bd30      	pop	{r4, r5, pc}
100221ce:	f1c4 040c 	rsb	r4, r4, #12
100221d2:	f1c4 0220 	rsb	r2, r4, #32
100221d6:	fa20 f002 	lsr.w	r0, r0, r2
100221da:	fa01 f304 	lsl.w	r3, r1, r4
100221de:	ea40 0003 	orr.w	r0, r0, r3
100221e2:	4629      	mov	r1, r5
100221e4:	bd30      	pop	{r4, r5, pc}
100221e6:	fa21 f004 	lsr.w	r0, r1, r4
100221ea:	4629      	mov	r1, r5
100221ec:	bd30      	pop	{r4, r5, pc}
100221ee:	f094 0f00 	teq	r4, #0
100221f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
100221f6:	bf06      	itte	eq
100221f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
100221fc:	3401      	addeq	r4, #1
100221fe:	3d01      	subne	r5, #1
10022200:	e74e      	b.n	100220a0 <__adddf3+0x8c>
10022202:	ea7f 5c64 	mvns.w	ip, r4, asr #21
10022206:	bf18      	it	ne
10022208:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1002220c:	d029      	beq.n	10022262 <__adddf3+0x24e>
1002220e:	ea94 0f05 	teq	r4, r5
10022212:	bf08      	it	eq
10022214:	ea90 0f02 	teqeq	r0, r2
10022218:	d005      	beq.n	10022226 <__adddf3+0x212>
1002221a:	ea54 0c00 	orrs.w	ip, r4, r0
1002221e:	bf04      	itt	eq
10022220:	4619      	moveq	r1, r3
10022222:	4610      	moveq	r0, r2
10022224:	bd30      	pop	{r4, r5, pc}
10022226:	ea91 0f03 	teq	r1, r3
1002222a:	bf1e      	ittt	ne
1002222c:	2100      	movne	r1, #0
1002222e:	2000      	movne	r0, #0
10022230:	bd30      	popne	{r4, r5, pc}
10022232:	ea5f 5c54 	movs.w	ip, r4, lsr #21
10022236:	d105      	bne.n	10022244 <__adddf3+0x230>
10022238:	0040      	lsls	r0, r0, #1
1002223a:	4149      	adcs	r1, r1
1002223c:	bf28      	it	cs
1002223e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
10022242:	bd30      	pop	{r4, r5, pc}
10022244:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
10022248:	bf3c      	itt	cc
1002224a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
1002224e:	bd30      	popcc	{r4, r5, pc}
10022250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
10022254:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
10022258:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
1002225c:	f04f 0000 	mov.w	r0, #0
10022260:	bd30      	pop	{r4, r5, pc}
10022262:	ea7f 5c64 	mvns.w	ip, r4, asr #21
10022266:	bf1a      	itte	ne
10022268:	4619      	movne	r1, r3
1002226a:	4610      	movne	r0, r2
1002226c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10022270:	bf1c      	itt	ne
10022272:	460b      	movne	r3, r1
10022274:	4602      	movne	r2, r0
10022276:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1002227a:	bf06      	itte	eq
1002227c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10022280:	ea91 0f03 	teqeq	r1, r3
10022284:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
10022288:	bd30      	pop	{r4, r5, pc}
1002228a:	bf00      	nop

1002228c <__aeabi_ui2d>:
1002228c:	f090 0f00 	teq	r0, #0
10022290:	bf04      	itt	eq
10022292:	2100      	moveq	r1, #0
10022294:	4770      	bxeq	lr
10022296:	b530      	push	{r4, r5, lr}
10022298:	f44f 6480 	mov.w	r4, #1024	@ 0x400
1002229c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
100222a0:	f04f 0500 	mov.w	r5, #0
100222a4:	f04f 0100 	mov.w	r1, #0
100222a8:	e750      	b.n	1002214c <__adddf3+0x138>
100222aa:	bf00      	nop

100222ac <__aeabi_i2d>:
100222ac:	f090 0f00 	teq	r0, #0
100222b0:	bf04      	itt	eq
100222b2:	2100      	moveq	r1, #0
100222b4:	4770      	bxeq	lr
100222b6:	b530      	push	{r4, r5, lr}
100222b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
100222bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
100222c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
100222c4:	bf48      	it	mi
100222c6:	4240      	negmi	r0, r0
100222c8:	f04f 0100 	mov.w	r1, #0
100222cc:	e73e      	b.n	1002214c <__adddf3+0x138>
100222ce:	bf00      	nop

100222d0 <__aeabi_f2d>:
100222d0:	0042      	lsls	r2, r0, #1
100222d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
100222d6:	ea4f 0131 	mov.w	r1, r1, rrx
100222da:	ea4f 7002 	mov.w	r0, r2, lsl #28
100222de:	bf1f      	itttt	ne
100222e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
100222e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
100222e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
100222ec:	4770      	bxne	lr
100222ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
100222f2:	bf08      	it	eq
100222f4:	4770      	bxeq	lr
100222f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
100222fa:	bf04      	itt	eq
100222fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
10022300:	4770      	bxeq	lr
10022302:	b530      	push	{r4, r5, lr}
10022304:	f44f 7460 	mov.w	r4, #896	@ 0x380
10022308:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
1002230c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
10022310:	e71c      	b.n	1002214c <__adddf3+0x138>
10022312:	bf00      	nop

10022314 <__aeabi_ul2d>:
10022314:	ea50 0201 	orrs.w	r2, r0, r1
10022318:	bf08      	it	eq
1002231a:	4770      	bxeq	lr
1002231c:	b530      	push	{r4, r5, lr}
1002231e:	f04f 0500 	mov.w	r5, #0
10022322:	e00a      	b.n	1002233a <__aeabi_l2d+0x16>

10022324 <__aeabi_l2d>:
10022324:	ea50 0201 	orrs.w	r2, r0, r1
10022328:	bf08      	it	eq
1002232a:	4770      	bxeq	lr
1002232c:	b530      	push	{r4, r5, lr}
1002232e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
10022332:	d502      	bpl.n	1002233a <__aeabi_l2d+0x16>
10022334:	4240      	negs	r0, r0
10022336:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1002233a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
1002233e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
10022342:	ea5f 5c91 	movs.w	ip, r1, lsr #22
10022346:	f43f aed8 	beq.w	100220fa <__adddf3+0xe6>
1002234a:	f04f 0203 	mov.w	r2, #3
1002234e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10022352:	bf18      	it	ne
10022354:	3203      	addne	r2, #3
10022356:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1002235a:	bf18      	it	ne
1002235c:	3203      	addne	r2, #3
1002235e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
10022362:	f1c2 0320 	rsb	r3, r2, #32
10022366:	fa00 fc03 	lsl.w	ip, r0, r3
1002236a:	fa20 f002 	lsr.w	r0, r0, r2
1002236e:	fa01 fe03 	lsl.w	lr, r1, r3
10022372:	ea40 000e 	orr.w	r0, r0, lr
10022376:	fa21 f102 	lsr.w	r1, r1, r2
1002237a:	4414      	add	r4, r2
1002237c:	e6bd      	b.n	100220fa <__adddf3+0xe6>
1002237e:	bf00      	nop

10022380 <__aeabi_dmul>:
10022380:	b570      	push	{r4, r5, r6, lr}
10022382:	f04f 0cff 	mov.w	ip, #255	@ 0xff
10022386:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
1002238a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1002238e:	bf1d      	ittte	ne
10022390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
10022394:	ea94 0f0c 	teqne	r4, ip
10022398:	ea95 0f0c 	teqne	r5, ip
1002239c:	f000 f8de 	bleq	1002255c <__aeabi_dmul+0x1dc>
100223a0:	442c      	add	r4, r5
100223a2:	ea81 0603 	eor.w	r6, r1, r3
100223a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100223aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100223ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100223b2:	bf18      	it	ne
100223b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100223b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
100223bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
100223c0:	d038      	beq.n	10022434 <__aeabi_dmul+0xb4>
100223c2:	fba0 ce02 	umull	ip, lr, r0, r2
100223c6:	f04f 0500 	mov.w	r5, #0
100223ca:	fbe1 e502 	umlal	lr, r5, r1, r2
100223ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
100223d2:	fbe0 e503 	umlal	lr, r5, r0, r3
100223d6:	f04f 0600 	mov.w	r6, #0
100223da:	fbe1 5603 	umlal	r5, r6, r1, r3
100223de:	f09c 0f00 	teq	ip, #0
100223e2:	bf18      	it	ne
100223e4:	f04e 0e01 	orrne.w	lr, lr, #1
100223e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
100223ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
100223f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
100223f4:	d204      	bcs.n	10022400 <__aeabi_dmul+0x80>
100223f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
100223fa:	416d      	adcs	r5, r5
100223fc:	eb46 0606 	adc.w	r6, r6, r6
10022400:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
10022404:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10022408:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1002240c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10022410:	ea4f 2ece 	mov.w	lr, lr, lsl #11
10022414:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
10022418:	bf88      	it	hi
1002241a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
1002241e:	d81e      	bhi.n	1002245e <__aeabi_dmul+0xde>
10022420:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
10022424:	bf08      	it	eq
10022426:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1002242a:	f150 0000 	adcs.w	r0, r0, #0
1002242e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
10022432:	bd70      	pop	{r4, r5, r6, pc}
10022434:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
10022438:	ea46 0101 	orr.w	r1, r6, r1
1002243c:	ea40 0002 	orr.w	r0, r0, r2
10022440:	ea81 0103 	eor.w	r1, r1, r3
10022444:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10022448:	bfc2      	ittt	gt
1002244a:	ebd4 050c 	rsbsgt	r5, r4, ip
1002244e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10022452:	bd70      	popgt	{r4, r5, r6, pc}
10022454:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10022458:	f04f 0e00 	mov.w	lr, #0
1002245c:	3c01      	subs	r4, #1
1002245e:	f300 80ab 	bgt.w	100225b8 <__aeabi_dmul+0x238>
10022462:	f114 0f36 	cmn.w	r4, #54	@ 0x36
10022466:	bfde      	ittt	le
10022468:	2000      	movle	r0, #0
1002246a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
1002246e:	bd70      	pople	{r4, r5, r6, pc}
10022470:	f1c4 0400 	rsb	r4, r4, #0
10022474:	3c20      	subs	r4, #32
10022476:	da35      	bge.n	100224e4 <__aeabi_dmul+0x164>
10022478:	340c      	adds	r4, #12
1002247a:	dc1b      	bgt.n	100224b4 <__aeabi_dmul+0x134>
1002247c:	f104 0414 	add.w	r4, r4, #20
10022480:	f1c4 0520 	rsb	r5, r4, #32
10022484:	fa00 f305 	lsl.w	r3, r0, r5
10022488:	fa20 f004 	lsr.w	r0, r0, r4
1002248c:	fa01 f205 	lsl.w	r2, r1, r5
10022490:	ea40 0002 	orr.w	r0, r0, r2
10022494:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
10022498:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
1002249c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100224a0:	fa21 f604 	lsr.w	r6, r1, r4
100224a4:	eb42 0106 	adc.w	r1, r2, r6
100224a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100224ac:	bf08      	it	eq
100224ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100224b2:	bd70      	pop	{r4, r5, r6, pc}
100224b4:	f1c4 040c 	rsb	r4, r4, #12
100224b8:	f1c4 0520 	rsb	r5, r4, #32
100224bc:	fa00 f304 	lsl.w	r3, r0, r4
100224c0:	fa20 f005 	lsr.w	r0, r0, r5
100224c4:	fa01 f204 	lsl.w	r2, r1, r4
100224c8:	ea40 0002 	orr.w	r0, r0, r2
100224cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
100224d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100224d4:	f141 0100 	adc.w	r1, r1, #0
100224d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100224dc:	bf08      	it	eq
100224de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100224e2:	bd70      	pop	{r4, r5, r6, pc}
100224e4:	f1c4 0520 	rsb	r5, r4, #32
100224e8:	fa00 f205 	lsl.w	r2, r0, r5
100224ec:	ea4e 0e02 	orr.w	lr, lr, r2
100224f0:	fa20 f304 	lsr.w	r3, r0, r4
100224f4:	fa01 f205 	lsl.w	r2, r1, r5
100224f8:	ea43 0302 	orr.w	r3, r3, r2
100224fc:	fa21 f004 	lsr.w	r0, r1, r4
10022500:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
10022504:	fa21 f204 	lsr.w	r2, r1, r4
10022508:	ea20 0002 	bic.w	r0, r0, r2
1002250c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10022510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10022514:	bf08      	it	eq
10022516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1002251a:	bd70      	pop	{r4, r5, r6, pc}
1002251c:	f094 0f00 	teq	r4, #0
10022520:	d10f      	bne.n	10022542 <__aeabi_dmul+0x1c2>
10022522:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
10022526:	0040      	lsls	r0, r0, #1
10022528:	eb41 0101 	adc.w	r1, r1, r1
1002252c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
10022530:	bf08      	it	eq
10022532:	3c01      	subeq	r4, #1
10022534:	d0f7      	beq.n	10022526 <__aeabi_dmul+0x1a6>
10022536:	ea41 0106 	orr.w	r1, r1, r6
1002253a:	f095 0f00 	teq	r5, #0
1002253e:	bf18      	it	ne
10022540:	4770      	bxne	lr
10022542:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
10022546:	0052      	lsls	r2, r2, #1
10022548:	eb43 0303 	adc.w	r3, r3, r3
1002254c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
10022550:	bf08      	it	eq
10022552:	3d01      	subeq	r5, #1
10022554:	d0f7      	beq.n	10022546 <__aeabi_dmul+0x1c6>
10022556:	ea43 0306 	orr.w	r3, r3, r6
1002255a:	4770      	bx	lr
1002255c:	ea94 0f0c 	teq	r4, ip
10022560:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
10022564:	bf18      	it	ne
10022566:	ea95 0f0c 	teqne	r5, ip
1002256a:	d00c      	beq.n	10022586 <__aeabi_dmul+0x206>
1002256c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10022570:	bf18      	it	ne
10022572:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10022576:	d1d1      	bne.n	1002251c <__aeabi_dmul+0x19c>
10022578:	ea81 0103 	eor.w	r1, r1, r3
1002257c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
10022580:	f04f 0000 	mov.w	r0, #0
10022584:	bd70      	pop	{r4, r5, r6, pc}
10022586:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1002258a:	bf06      	itte	eq
1002258c:	4610      	moveq	r0, r2
1002258e:	4619      	moveq	r1, r3
10022590:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10022594:	d019      	beq.n	100225ca <__aeabi_dmul+0x24a>
10022596:	ea94 0f0c 	teq	r4, ip
1002259a:	d102      	bne.n	100225a2 <__aeabi_dmul+0x222>
1002259c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100225a0:	d113      	bne.n	100225ca <__aeabi_dmul+0x24a>
100225a2:	ea95 0f0c 	teq	r5, ip
100225a6:	d105      	bne.n	100225b4 <__aeabi_dmul+0x234>
100225a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100225ac:	bf1c      	itt	ne
100225ae:	4610      	movne	r0, r2
100225b0:	4619      	movne	r1, r3
100225b2:	d10a      	bne.n	100225ca <__aeabi_dmul+0x24a>
100225b4:	ea81 0103 	eor.w	r1, r1, r3
100225b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
100225bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
100225c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
100225c4:	f04f 0000 	mov.w	r0, #0
100225c8:	bd70      	pop	{r4, r5, r6, pc}
100225ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
100225ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
100225d2:	bd70      	pop	{r4, r5, r6, pc}

100225d4 <__aeabi_ddiv>:
100225d4:	b570      	push	{r4, r5, r6, lr}
100225d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
100225da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
100225de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100225e2:	bf1d      	ittte	ne
100225e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100225e8:	ea94 0f0c 	teqne	r4, ip
100225ec:	ea95 0f0c 	teqne	r5, ip
100225f0:	f000 f8a7 	bleq	10022742 <__aeabi_ddiv+0x16e>
100225f4:	eba4 0405 	sub.w	r4, r4, r5
100225f8:	ea81 0e03 	eor.w	lr, r1, r3
100225fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10022600:	ea4f 3101 	mov.w	r1, r1, lsl #12
10022604:	f000 8088 	beq.w	10022718 <__aeabi_ddiv+0x144>
10022608:	ea4f 3303 	mov.w	r3, r3, lsl #12
1002260c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
10022610:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
10022614:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10022618:	ea4f 2202 	mov.w	r2, r2, lsl #8
1002261c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10022620:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
10022624:	ea4f 2600 	mov.w	r6, r0, lsl #8
10022628:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
1002262c:	429d      	cmp	r5, r3
1002262e:	bf08      	it	eq
10022630:	4296      	cmpeq	r6, r2
10022632:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
10022636:	f504 7440 	add.w	r4, r4, #768	@ 0x300
1002263a:	d202      	bcs.n	10022642 <__aeabi_ddiv+0x6e>
1002263c:	085b      	lsrs	r3, r3, #1
1002263e:	ea4f 0232 	mov.w	r2, r2, rrx
10022642:	1ab6      	subs	r6, r6, r2
10022644:	eb65 0503 	sbc.w	r5, r5, r3
10022648:	085b      	lsrs	r3, r3, #1
1002264a:	ea4f 0232 	mov.w	r2, r2, rrx
1002264e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
10022652:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
10022656:	ebb6 0e02 	subs.w	lr, r6, r2
1002265a:	eb75 0e03 	sbcs.w	lr, r5, r3
1002265e:	bf22      	ittt	cs
10022660:	1ab6      	subcs	r6, r6, r2
10022662:	4675      	movcs	r5, lr
10022664:	ea40 000c 	orrcs.w	r0, r0, ip
10022668:	085b      	lsrs	r3, r3, #1
1002266a:	ea4f 0232 	mov.w	r2, r2, rrx
1002266e:	ebb6 0e02 	subs.w	lr, r6, r2
10022672:	eb75 0e03 	sbcs.w	lr, r5, r3
10022676:	bf22      	ittt	cs
10022678:	1ab6      	subcs	r6, r6, r2
1002267a:	4675      	movcs	r5, lr
1002267c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10022680:	085b      	lsrs	r3, r3, #1
10022682:	ea4f 0232 	mov.w	r2, r2, rrx
10022686:	ebb6 0e02 	subs.w	lr, r6, r2
1002268a:	eb75 0e03 	sbcs.w	lr, r5, r3
1002268e:	bf22      	ittt	cs
10022690:	1ab6      	subcs	r6, r6, r2
10022692:	4675      	movcs	r5, lr
10022694:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
10022698:	085b      	lsrs	r3, r3, #1
1002269a:	ea4f 0232 	mov.w	r2, r2, rrx
1002269e:	ebb6 0e02 	subs.w	lr, r6, r2
100226a2:	eb75 0e03 	sbcs.w	lr, r5, r3
100226a6:	bf22      	ittt	cs
100226a8:	1ab6      	subcs	r6, r6, r2
100226aa:	4675      	movcs	r5, lr
100226ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100226b0:	ea55 0e06 	orrs.w	lr, r5, r6
100226b4:	d018      	beq.n	100226e8 <__aeabi_ddiv+0x114>
100226b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
100226ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100226be:	ea4f 1606 	mov.w	r6, r6, lsl #4
100226c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100226c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100226ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100226ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100226d2:	d1c0      	bne.n	10022656 <__aeabi_ddiv+0x82>
100226d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
100226d8:	d10b      	bne.n	100226f2 <__aeabi_ddiv+0x11e>
100226da:	ea41 0100 	orr.w	r1, r1, r0
100226de:	f04f 0000 	mov.w	r0, #0
100226e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
100226e6:	e7b6      	b.n	10022656 <__aeabi_ddiv+0x82>
100226e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
100226ec:	bf04      	itt	eq
100226ee:	4301      	orreq	r1, r0
100226f0:	2000      	moveq	r0, #0
100226f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
100226f6:	bf88      	it	hi
100226f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
100226fc:	f63f aeaf 	bhi.w	1002245e <__aeabi_dmul+0xde>
10022700:	ebb5 0c03 	subs.w	ip, r5, r3
10022704:	bf04      	itt	eq
10022706:	ebb6 0c02 	subseq.w	ip, r6, r2
1002270a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1002270e:	f150 0000 	adcs.w	r0, r0, #0
10022712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
10022716:	bd70      	pop	{r4, r5, r6, pc}
10022718:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
1002271c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10022720:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
10022724:	bfc2      	ittt	gt
10022726:	ebd4 050c 	rsbsgt	r5, r4, ip
1002272a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1002272e:	bd70      	popgt	{r4, r5, r6, pc}
10022730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10022734:	f04f 0e00 	mov.w	lr, #0
10022738:	3c01      	subs	r4, #1
1002273a:	e690      	b.n	1002245e <__aeabi_dmul+0xde>
1002273c:	ea45 0e06 	orr.w	lr, r5, r6
10022740:	e68d      	b.n	1002245e <__aeabi_dmul+0xde>
10022742:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
10022746:	ea94 0f0c 	teq	r4, ip
1002274a:	bf08      	it	eq
1002274c:	ea95 0f0c 	teqeq	r5, ip
10022750:	f43f af3b 	beq.w	100225ca <__aeabi_dmul+0x24a>
10022754:	ea94 0f0c 	teq	r4, ip
10022758:	d10a      	bne.n	10022770 <__aeabi_ddiv+0x19c>
1002275a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1002275e:	f47f af34 	bne.w	100225ca <__aeabi_dmul+0x24a>
10022762:	ea95 0f0c 	teq	r5, ip
10022766:	f47f af25 	bne.w	100225b4 <__aeabi_dmul+0x234>
1002276a:	4610      	mov	r0, r2
1002276c:	4619      	mov	r1, r3
1002276e:	e72c      	b.n	100225ca <__aeabi_dmul+0x24a>
10022770:	ea95 0f0c 	teq	r5, ip
10022774:	d106      	bne.n	10022784 <__aeabi_ddiv+0x1b0>
10022776:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1002277a:	f43f aefd 	beq.w	10022578 <__aeabi_dmul+0x1f8>
1002277e:	4610      	mov	r0, r2
10022780:	4619      	mov	r1, r3
10022782:	e722      	b.n	100225ca <__aeabi_dmul+0x24a>
10022784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10022788:	bf18      	it	ne
1002278a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1002278e:	f47f aec5 	bne.w	1002251c <__aeabi_dmul+0x19c>
10022792:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
10022796:	f47f af0d 	bne.w	100225b4 <__aeabi_dmul+0x234>
1002279a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1002279e:	f47f aeeb 	bne.w	10022578 <__aeabi_dmul+0x1f8>
100227a2:	e712      	b.n	100225ca <__aeabi_dmul+0x24a>

100227a4 <__gedf2>:
100227a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
100227a8:	e006      	b.n	100227b8 <__cmpdf2+0x4>
100227aa:	bf00      	nop

100227ac <__ledf2>:
100227ac:	f04f 0c01 	mov.w	ip, #1
100227b0:	e002      	b.n	100227b8 <__cmpdf2+0x4>
100227b2:	bf00      	nop

100227b4 <__cmpdf2>:
100227b4:	f04f 0c01 	mov.w	ip, #1
100227b8:	f84d cd04 	str.w	ip, [sp, #-4]!
100227bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100227c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100227c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100227c8:	bf18      	it	ne
100227ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100227ce:	d01b      	beq.n	10022808 <__cmpdf2+0x54>
100227d0:	b001      	add	sp, #4
100227d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100227d6:	bf0c      	ite	eq
100227d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100227dc:	ea91 0f03 	teqne	r1, r3
100227e0:	bf02      	ittt	eq
100227e2:	ea90 0f02 	teqeq	r0, r2
100227e6:	2000      	moveq	r0, #0
100227e8:	4770      	bxeq	lr
100227ea:	f110 0f00 	cmn.w	r0, #0
100227ee:	ea91 0f03 	teq	r1, r3
100227f2:	bf58      	it	pl
100227f4:	4299      	cmppl	r1, r3
100227f6:	bf08      	it	eq
100227f8:	4290      	cmpeq	r0, r2
100227fa:	bf2c      	ite	cs
100227fc:	17d8      	asrcs	r0, r3, #31
100227fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
10022802:	f040 0001 	orr.w	r0, r0, #1
10022806:	4770      	bx	lr
10022808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1002280c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10022810:	d102      	bne.n	10022818 <__cmpdf2+0x64>
10022812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
10022816:	d107      	bne.n	10022828 <__cmpdf2+0x74>
10022818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1002281c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10022820:	d1d6      	bne.n	100227d0 <__cmpdf2+0x1c>
10022822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
10022826:	d0d3      	beq.n	100227d0 <__cmpdf2+0x1c>
10022828:	f85d 0b04 	ldr.w	r0, [sp], #4
1002282c:	4770      	bx	lr
1002282e:	bf00      	nop

10022830 <__aeabi_cdrcmple>:
10022830:	4684      	mov	ip, r0
10022832:	4610      	mov	r0, r2
10022834:	4662      	mov	r2, ip
10022836:	468c      	mov	ip, r1
10022838:	4619      	mov	r1, r3
1002283a:	4663      	mov	r3, ip
1002283c:	e000      	b.n	10022840 <__aeabi_cdcmpeq>
1002283e:	bf00      	nop

10022840 <__aeabi_cdcmpeq>:
10022840:	b501      	push	{r0, lr}
10022842:	f7ff ffb7 	bl	100227b4 <__cmpdf2>
10022846:	2800      	cmp	r0, #0
10022848:	bf48      	it	mi
1002284a:	f110 0f00 	cmnmi.w	r0, #0
1002284e:	bd01      	pop	{r0, pc}

10022850 <__aeabi_dcmpeq>:
10022850:	f84d ed08 	str.w	lr, [sp, #-8]!
10022854:	f7ff fff4 	bl	10022840 <__aeabi_cdcmpeq>
10022858:	bf0c      	ite	eq
1002285a:	2001      	moveq	r0, #1
1002285c:	2000      	movne	r0, #0
1002285e:	f85d fb08 	ldr.w	pc, [sp], #8
10022862:	bf00      	nop

10022864 <__aeabi_dcmplt>:
10022864:	f84d ed08 	str.w	lr, [sp, #-8]!
10022868:	f7ff ffea 	bl	10022840 <__aeabi_cdcmpeq>
1002286c:	bf34      	ite	cc
1002286e:	2001      	movcc	r0, #1
10022870:	2000      	movcs	r0, #0
10022872:	f85d fb08 	ldr.w	pc, [sp], #8
10022876:	bf00      	nop

10022878 <__aeabi_dcmple>:
10022878:	f84d ed08 	str.w	lr, [sp, #-8]!
1002287c:	f7ff ffe0 	bl	10022840 <__aeabi_cdcmpeq>
10022880:	bf94      	ite	ls
10022882:	2001      	movls	r0, #1
10022884:	2000      	movhi	r0, #0
10022886:	f85d fb08 	ldr.w	pc, [sp], #8
1002288a:	bf00      	nop

1002288c <__aeabi_dcmpge>:
1002288c:	f84d ed08 	str.w	lr, [sp, #-8]!
10022890:	f7ff ffce 	bl	10022830 <__aeabi_cdrcmple>
10022894:	bf94      	ite	ls
10022896:	2001      	movls	r0, #1
10022898:	2000      	movhi	r0, #0
1002289a:	f85d fb08 	ldr.w	pc, [sp], #8
1002289e:	bf00      	nop

100228a0 <__aeabi_dcmpgt>:
100228a0:	f84d ed08 	str.w	lr, [sp, #-8]!
100228a4:	f7ff ffc4 	bl	10022830 <__aeabi_cdrcmple>
100228a8:	bf34      	ite	cc
100228aa:	2001      	movcc	r0, #1
100228ac:	2000      	movcs	r0, #0
100228ae:	f85d fb08 	ldr.w	pc, [sp], #8
100228b2:	bf00      	nop

100228b4 <__aeabi_dcmpun>:
100228b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100228b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100228bc:	d102      	bne.n	100228c4 <__aeabi_dcmpun+0x10>
100228be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100228c2:	d10a      	bne.n	100228da <__aeabi_dcmpun+0x26>
100228c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100228c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100228cc:	d102      	bne.n	100228d4 <__aeabi_dcmpun+0x20>
100228ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100228d2:	d102      	bne.n	100228da <__aeabi_dcmpun+0x26>
100228d4:	f04f 0000 	mov.w	r0, #0
100228d8:	4770      	bx	lr
100228da:	f04f 0001 	mov.w	r0, #1
100228de:	4770      	bx	lr

100228e0 <__aeabi_d2iz>:
100228e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
100228e4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
100228e8:	d215      	bcs.n	10022916 <__aeabi_d2iz+0x36>
100228ea:	d511      	bpl.n	10022910 <__aeabi_d2iz+0x30>
100228ec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
100228f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100228f4:	d912      	bls.n	1002291c <__aeabi_d2iz+0x3c>
100228f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
100228fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100228fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10022902:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
10022906:	fa23 f002 	lsr.w	r0, r3, r2
1002290a:	bf18      	it	ne
1002290c:	4240      	negne	r0, r0
1002290e:	4770      	bx	lr
10022910:	f04f 0000 	mov.w	r0, #0
10022914:	4770      	bx	lr
10022916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1002291a:	d105      	bne.n	10022928 <__aeabi_d2iz+0x48>
1002291c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
10022920:	bf08      	it	eq
10022922:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
10022926:	4770      	bx	lr
10022928:	f04f 0000 	mov.w	r0, #0
1002292c:	4770      	bx	lr
1002292e:	bf00      	nop

10022930 <__aeabi_d2uiz>:
10022930:	004a      	lsls	r2, r1, #1
10022932:	d211      	bcs.n	10022958 <__aeabi_d2uiz+0x28>
10022934:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
10022938:	d211      	bcs.n	1002295e <__aeabi_d2uiz+0x2e>
1002293a:	d50d      	bpl.n	10022958 <__aeabi_d2uiz+0x28>
1002293c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
10022940:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10022944:	d40e      	bmi.n	10022964 <__aeabi_d2uiz+0x34>
10022946:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1002294a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
1002294e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10022952:	fa23 f002 	lsr.w	r0, r3, r2
10022956:	4770      	bx	lr
10022958:	f04f 0000 	mov.w	r0, #0
1002295c:	4770      	bx	lr
1002295e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10022962:	d102      	bne.n	1002296a <__aeabi_d2uiz+0x3a>
10022964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10022968:	4770      	bx	lr
1002296a:	f04f 0000 	mov.w	r0, #0
1002296e:	4770      	bx	lr

10022970 <__aeabi_d2f>:
10022970:	ea4f 0241 	mov.w	r2, r1, lsl #1
10022974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
10022978:	bf24      	itt	cs
1002297a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
1002297e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
10022982:	d90d      	bls.n	100229a0 <__aeabi_d2f+0x30>
10022984:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
10022988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1002298c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
10022990:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
10022994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
10022998:	bf08      	it	eq
1002299a:	f020 0001 	biceq.w	r0, r0, #1
1002299e:	4770      	bx	lr
100229a0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
100229a4:	d121      	bne.n	100229ea <__aeabi_d2f+0x7a>
100229a6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
100229aa:	bfbc      	itt	lt
100229ac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
100229b0:	4770      	bxlt	lr
100229b2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
100229b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
100229ba:	f1c2 0218 	rsb	r2, r2, #24
100229be:	f1c2 0c20 	rsb	ip, r2, #32
100229c2:	fa10 f30c 	lsls.w	r3, r0, ip
100229c6:	fa20 f002 	lsr.w	r0, r0, r2
100229ca:	bf18      	it	ne
100229cc:	f040 0001 	orrne.w	r0, r0, #1
100229d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
100229d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
100229d8:	fa03 fc0c 	lsl.w	ip, r3, ip
100229dc:	ea40 000c 	orr.w	r0, r0, ip
100229e0:	fa23 f302 	lsr.w	r3, r3, r2
100229e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
100229e8:	e7cc      	b.n	10022984 <__aeabi_d2f+0x14>
100229ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
100229ee:	d107      	bne.n	10022a00 <__aeabi_d2f+0x90>
100229f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
100229f4:	bf1e      	ittt	ne
100229f6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
100229fa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
100229fe:	4770      	bxne	lr
10022a00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
10022a04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
10022a08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
10022a0c:	4770      	bx	lr
10022a0e:	bf00      	nop

10022a10 <__aeabi_uldivmod>:
10022a10:	b953      	cbnz	r3, 10022a28 <__aeabi_uldivmod+0x18>
10022a12:	b94a      	cbnz	r2, 10022a28 <__aeabi_uldivmod+0x18>
10022a14:	2900      	cmp	r1, #0
10022a16:	bf08      	it	eq
10022a18:	2800      	cmpeq	r0, #0
10022a1a:	bf1c      	itt	ne
10022a1c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
10022a20:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
10022a24:	f000 b9a0 	b.w	10022d68 <__aeabi_idiv0>
10022a28:	f1ad 0c08 	sub.w	ip, sp, #8
10022a2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
10022a30:	f000 f83c 	bl	10022aac <__udivmoddi4>
10022a34:	f8dd e004 	ldr.w	lr, [sp, #4]
10022a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10022a3c:	b004      	add	sp, #16
10022a3e:	4770      	bx	lr

10022a40 <__aeabi_d2lz>:
10022a40:	b538      	push	{r3, r4, r5, lr}
10022a42:	2200      	movs	r2, #0
10022a44:	2300      	movs	r3, #0
10022a46:	4604      	mov	r4, r0
10022a48:	460d      	mov	r5, r1
10022a4a:	f7ff ff0b 	bl	10022864 <__aeabi_dcmplt>
10022a4e:	b928      	cbnz	r0, 10022a5c <__aeabi_d2lz+0x1c>
10022a50:	4620      	mov	r0, r4
10022a52:	4629      	mov	r1, r5
10022a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10022a58:	f000 b80a 	b.w	10022a70 <__aeabi_d2ulz>
10022a5c:	4620      	mov	r0, r4
10022a5e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
10022a62:	f000 f805 	bl	10022a70 <__aeabi_d2ulz>
10022a66:	4240      	negs	r0, r0
10022a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10022a6c:	bd38      	pop	{r3, r4, r5, pc}
10022a6e:	bf00      	nop

10022a70 <__aeabi_d2ulz>:
10022a70:	b5d0      	push	{r4, r6, r7, lr}
10022a72:	4b0c      	ldr	r3, [pc, #48]	@ (10022aa4 <__aeabi_d2ulz+0x34>)
10022a74:	2200      	movs	r2, #0
10022a76:	4606      	mov	r6, r0
10022a78:	460f      	mov	r7, r1
10022a7a:	f7ff fc81 	bl	10022380 <__aeabi_dmul>
10022a7e:	f7ff ff57 	bl	10022930 <__aeabi_d2uiz>
10022a82:	4604      	mov	r4, r0
10022a84:	f7ff fc02 	bl	1002228c <__aeabi_ui2d>
10022a88:	4b07      	ldr	r3, [pc, #28]	@ (10022aa8 <__aeabi_d2ulz+0x38>)
10022a8a:	2200      	movs	r2, #0
10022a8c:	f7ff fc78 	bl	10022380 <__aeabi_dmul>
10022a90:	4602      	mov	r2, r0
10022a92:	460b      	mov	r3, r1
10022a94:	4630      	mov	r0, r6
10022a96:	4639      	mov	r1, r7
10022a98:	f7ff faba 	bl	10022010 <__aeabi_dsub>
10022a9c:	f7ff ff48 	bl	10022930 <__aeabi_d2uiz>
10022aa0:	4621      	mov	r1, r4
10022aa2:	bdd0      	pop	{r4, r6, r7, pc}
10022aa4:	3df00000 	.word	0x3df00000
10022aa8:	41f00000 	.word	0x41f00000

10022aac <__udivmoddi4>:
10022aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10022ab0:	9d08      	ldr	r5, [sp, #32]
10022ab2:	460c      	mov	r4, r1
10022ab4:	2b00      	cmp	r3, #0
10022ab6:	d14e      	bne.n	10022b56 <__udivmoddi4+0xaa>
10022ab8:	4694      	mov	ip, r2
10022aba:	458c      	cmp	ip, r1
10022abc:	4686      	mov	lr, r0
10022abe:	fab2 f282 	clz	r2, r2
10022ac2:	d962      	bls.n	10022b8a <__udivmoddi4+0xde>
10022ac4:	b14a      	cbz	r2, 10022ada <__udivmoddi4+0x2e>
10022ac6:	f1c2 0320 	rsb	r3, r2, #32
10022aca:	4091      	lsls	r1, r2
10022acc:	fa20 f303 	lsr.w	r3, r0, r3
10022ad0:	fa0c fc02 	lsl.w	ip, ip, r2
10022ad4:	4319      	orrs	r1, r3
10022ad6:	fa00 fe02 	lsl.w	lr, r0, r2
10022ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
10022ade:	fa1f f68c 	uxth.w	r6, ip
10022ae2:	fbb1 f4f7 	udiv	r4, r1, r7
10022ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
10022aea:	fb07 1114 	mls	r1, r7, r4, r1
10022aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10022af2:	fb04 f106 	mul.w	r1, r4, r6
10022af6:	4299      	cmp	r1, r3
10022af8:	d90a      	bls.n	10022b10 <__udivmoddi4+0x64>
10022afa:	eb1c 0303 	adds.w	r3, ip, r3
10022afe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
10022b02:	f080 8112 	bcs.w	10022d2a <__udivmoddi4+0x27e>
10022b06:	4299      	cmp	r1, r3
10022b08:	f240 810f 	bls.w	10022d2a <__udivmoddi4+0x27e>
10022b0c:	3c02      	subs	r4, #2
10022b0e:	4463      	add	r3, ip
10022b10:	1a59      	subs	r1, r3, r1
10022b12:	fa1f f38e 	uxth.w	r3, lr
10022b16:	fbb1 f0f7 	udiv	r0, r1, r7
10022b1a:	fb07 1110 	mls	r1, r7, r0, r1
10022b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10022b22:	fb00 f606 	mul.w	r6, r0, r6
10022b26:	429e      	cmp	r6, r3
10022b28:	d90a      	bls.n	10022b40 <__udivmoddi4+0x94>
10022b2a:	eb1c 0303 	adds.w	r3, ip, r3
10022b2e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
10022b32:	f080 80fc 	bcs.w	10022d2e <__udivmoddi4+0x282>
10022b36:	429e      	cmp	r6, r3
10022b38:	f240 80f9 	bls.w	10022d2e <__udivmoddi4+0x282>
10022b3c:	4463      	add	r3, ip
10022b3e:	3802      	subs	r0, #2
10022b40:	1b9b      	subs	r3, r3, r6
10022b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
10022b46:	2100      	movs	r1, #0
10022b48:	b11d      	cbz	r5, 10022b52 <__udivmoddi4+0xa6>
10022b4a:	40d3      	lsrs	r3, r2
10022b4c:	2200      	movs	r2, #0
10022b4e:	e9c5 3200 	strd	r3, r2, [r5]
10022b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10022b56:	428b      	cmp	r3, r1
10022b58:	d905      	bls.n	10022b66 <__udivmoddi4+0xba>
10022b5a:	b10d      	cbz	r5, 10022b60 <__udivmoddi4+0xb4>
10022b5c:	e9c5 0100 	strd	r0, r1, [r5]
10022b60:	2100      	movs	r1, #0
10022b62:	4608      	mov	r0, r1
10022b64:	e7f5      	b.n	10022b52 <__udivmoddi4+0xa6>
10022b66:	fab3 f183 	clz	r1, r3
10022b6a:	2900      	cmp	r1, #0
10022b6c:	d146      	bne.n	10022bfc <__udivmoddi4+0x150>
10022b6e:	42a3      	cmp	r3, r4
10022b70:	d302      	bcc.n	10022b78 <__udivmoddi4+0xcc>
10022b72:	4290      	cmp	r0, r2
10022b74:	f0c0 80f0 	bcc.w	10022d58 <__udivmoddi4+0x2ac>
10022b78:	1a86      	subs	r6, r0, r2
10022b7a:	eb64 0303 	sbc.w	r3, r4, r3
10022b7e:	2001      	movs	r0, #1
10022b80:	2d00      	cmp	r5, #0
10022b82:	d0e6      	beq.n	10022b52 <__udivmoddi4+0xa6>
10022b84:	e9c5 6300 	strd	r6, r3, [r5]
10022b88:	e7e3      	b.n	10022b52 <__udivmoddi4+0xa6>
10022b8a:	2a00      	cmp	r2, #0
10022b8c:	f040 8090 	bne.w	10022cb0 <__udivmoddi4+0x204>
10022b90:	eba1 040c 	sub.w	r4, r1, ip
10022b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
10022b98:	fa1f f78c 	uxth.w	r7, ip
10022b9c:	2101      	movs	r1, #1
10022b9e:	fbb4 f6f8 	udiv	r6, r4, r8
10022ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
10022ba6:	fb08 4416 	mls	r4, r8, r6, r4
10022baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
10022bae:	fb07 f006 	mul.w	r0, r7, r6
10022bb2:	4298      	cmp	r0, r3
10022bb4:	d908      	bls.n	10022bc8 <__udivmoddi4+0x11c>
10022bb6:	eb1c 0303 	adds.w	r3, ip, r3
10022bba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
10022bbe:	d202      	bcs.n	10022bc6 <__udivmoddi4+0x11a>
10022bc0:	4298      	cmp	r0, r3
10022bc2:	f200 80cd 	bhi.w	10022d60 <__udivmoddi4+0x2b4>
10022bc6:	4626      	mov	r6, r4
10022bc8:	1a1c      	subs	r4, r3, r0
10022bca:	fa1f f38e 	uxth.w	r3, lr
10022bce:	fbb4 f0f8 	udiv	r0, r4, r8
10022bd2:	fb08 4410 	mls	r4, r8, r0, r4
10022bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
10022bda:	fb00 f707 	mul.w	r7, r0, r7
10022bde:	429f      	cmp	r7, r3
10022be0:	d908      	bls.n	10022bf4 <__udivmoddi4+0x148>
10022be2:	eb1c 0303 	adds.w	r3, ip, r3
10022be6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
10022bea:	d202      	bcs.n	10022bf2 <__udivmoddi4+0x146>
10022bec:	429f      	cmp	r7, r3
10022bee:	f200 80b0 	bhi.w	10022d52 <__udivmoddi4+0x2a6>
10022bf2:	4620      	mov	r0, r4
10022bf4:	1bdb      	subs	r3, r3, r7
10022bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
10022bfa:	e7a5      	b.n	10022b48 <__udivmoddi4+0x9c>
10022bfc:	f1c1 0620 	rsb	r6, r1, #32
10022c00:	408b      	lsls	r3, r1
10022c02:	fa22 f706 	lsr.w	r7, r2, r6
10022c06:	431f      	orrs	r7, r3
10022c08:	fa20 fc06 	lsr.w	ip, r0, r6
10022c0c:	fa04 f301 	lsl.w	r3, r4, r1
10022c10:	ea43 030c 	orr.w	r3, r3, ip
10022c14:	40f4      	lsrs	r4, r6
10022c16:	fa00 f801 	lsl.w	r8, r0, r1
10022c1a:	0c38      	lsrs	r0, r7, #16
10022c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
10022c20:	fbb4 fef0 	udiv	lr, r4, r0
10022c24:	fa1f fc87 	uxth.w	ip, r7
10022c28:	fb00 441e 	mls	r4, r0, lr, r4
10022c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
10022c30:	fb0e f90c 	mul.w	r9, lr, ip
10022c34:	45a1      	cmp	r9, r4
10022c36:	fa02 f201 	lsl.w	r2, r2, r1
10022c3a:	d90a      	bls.n	10022c52 <__udivmoddi4+0x1a6>
10022c3c:	193c      	adds	r4, r7, r4
10022c3e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
10022c42:	f080 8084 	bcs.w	10022d4e <__udivmoddi4+0x2a2>
10022c46:	45a1      	cmp	r9, r4
10022c48:	f240 8081 	bls.w	10022d4e <__udivmoddi4+0x2a2>
10022c4c:	f1ae 0e02 	sub.w	lr, lr, #2
10022c50:	443c      	add	r4, r7
10022c52:	eba4 0409 	sub.w	r4, r4, r9
10022c56:	fa1f f983 	uxth.w	r9, r3
10022c5a:	fbb4 f3f0 	udiv	r3, r4, r0
10022c5e:	fb00 4413 	mls	r4, r0, r3, r4
10022c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
10022c66:	fb03 fc0c 	mul.w	ip, r3, ip
10022c6a:	45a4      	cmp	ip, r4
10022c6c:	d907      	bls.n	10022c7e <__udivmoddi4+0x1d2>
10022c6e:	193c      	adds	r4, r7, r4
10022c70:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
10022c74:	d267      	bcs.n	10022d46 <__udivmoddi4+0x29a>
10022c76:	45a4      	cmp	ip, r4
10022c78:	d965      	bls.n	10022d46 <__udivmoddi4+0x29a>
10022c7a:	3b02      	subs	r3, #2
10022c7c:	443c      	add	r4, r7
10022c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
10022c82:	fba0 9302 	umull	r9, r3, r0, r2
10022c86:	eba4 040c 	sub.w	r4, r4, ip
10022c8a:	429c      	cmp	r4, r3
10022c8c:	46ce      	mov	lr, r9
10022c8e:	469c      	mov	ip, r3
10022c90:	d351      	bcc.n	10022d36 <__udivmoddi4+0x28a>
10022c92:	d04e      	beq.n	10022d32 <__udivmoddi4+0x286>
10022c94:	b155      	cbz	r5, 10022cac <__udivmoddi4+0x200>
10022c96:	ebb8 030e 	subs.w	r3, r8, lr
10022c9a:	eb64 040c 	sbc.w	r4, r4, ip
10022c9e:	fa04 f606 	lsl.w	r6, r4, r6
10022ca2:	40cb      	lsrs	r3, r1
10022ca4:	431e      	orrs	r6, r3
10022ca6:	40cc      	lsrs	r4, r1
10022ca8:	e9c5 6400 	strd	r6, r4, [r5]
10022cac:	2100      	movs	r1, #0
10022cae:	e750      	b.n	10022b52 <__udivmoddi4+0xa6>
10022cb0:	f1c2 0320 	rsb	r3, r2, #32
10022cb4:	fa20 f103 	lsr.w	r1, r0, r3
10022cb8:	fa0c fc02 	lsl.w	ip, ip, r2
10022cbc:	fa24 f303 	lsr.w	r3, r4, r3
10022cc0:	4094      	lsls	r4, r2
10022cc2:	430c      	orrs	r4, r1
10022cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
10022cc8:	fa00 fe02 	lsl.w	lr, r0, r2
10022ccc:	fa1f f78c 	uxth.w	r7, ip
10022cd0:	fbb3 f0f8 	udiv	r0, r3, r8
10022cd4:	fb08 3110 	mls	r1, r8, r0, r3
10022cd8:	0c23      	lsrs	r3, r4, #16
10022cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10022cde:	fb00 f107 	mul.w	r1, r0, r7
10022ce2:	4299      	cmp	r1, r3
10022ce4:	d908      	bls.n	10022cf8 <__udivmoddi4+0x24c>
10022ce6:	eb1c 0303 	adds.w	r3, ip, r3
10022cea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
10022cee:	d22c      	bcs.n	10022d4a <__udivmoddi4+0x29e>
10022cf0:	4299      	cmp	r1, r3
10022cf2:	d92a      	bls.n	10022d4a <__udivmoddi4+0x29e>
10022cf4:	3802      	subs	r0, #2
10022cf6:	4463      	add	r3, ip
10022cf8:	1a5b      	subs	r3, r3, r1
10022cfa:	b2a4      	uxth	r4, r4
10022cfc:	fbb3 f1f8 	udiv	r1, r3, r8
10022d00:	fb08 3311 	mls	r3, r8, r1, r3
10022d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
10022d08:	fb01 f307 	mul.w	r3, r1, r7
10022d0c:	42a3      	cmp	r3, r4
10022d0e:	d908      	bls.n	10022d22 <__udivmoddi4+0x276>
10022d10:	eb1c 0404 	adds.w	r4, ip, r4
10022d14:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
10022d18:	d213      	bcs.n	10022d42 <__udivmoddi4+0x296>
10022d1a:	42a3      	cmp	r3, r4
10022d1c:	d911      	bls.n	10022d42 <__udivmoddi4+0x296>
10022d1e:	3902      	subs	r1, #2
10022d20:	4464      	add	r4, ip
10022d22:	1ae4      	subs	r4, r4, r3
10022d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
10022d28:	e739      	b.n	10022b9e <__udivmoddi4+0xf2>
10022d2a:	4604      	mov	r4, r0
10022d2c:	e6f0      	b.n	10022b10 <__udivmoddi4+0x64>
10022d2e:	4608      	mov	r0, r1
10022d30:	e706      	b.n	10022b40 <__udivmoddi4+0x94>
10022d32:	45c8      	cmp	r8, r9
10022d34:	d2ae      	bcs.n	10022c94 <__udivmoddi4+0x1e8>
10022d36:	ebb9 0e02 	subs.w	lr, r9, r2
10022d3a:	eb63 0c07 	sbc.w	ip, r3, r7
10022d3e:	3801      	subs	r0, #1
10022d40:	e7a8      	b.n	10022c94 <__udivmoddi4+0x1e8>
10022d42:	4631      	mov	r1, r6
10022d44:	e7ed      	b.n	10022d22 <__udivmoddi4+0x276>
10022d46:	4603      	mov	r3, r0
10022d48:	e799      	b.n	10022c7e <__udivmoddi4+0x1d2>
10022d4a:	4630      	mov	r0, r6
10022d4c:	e7d4      	b.n	10022cf8 <__udivmoddi4+0x24c>
10022d4e:	46d6      	mov	lr, sl
10022d50:	e77f      	b.n	10022c52 <__udivmoddi4+0x1a6>
10022d52:	4463      	add	r3, ip
10022d54:	3802      	subs	r0, #2
10022d56:	e74d      	b.n	10022bf4 <__udivmoddi4+0x148>
10022d58:	4606      	mov	r6, r0
10022d5a:	4623      	mov	r3, r4
10022d5c:	4608      	mov	r0, r1
10022d5e:	e70f      	b.n	10022b80 <__udivmoddi4+0xd4>
10022d60:	3e02      	subs	r6, #2
10022d62:	4463      	add	r3, ip
10022d64:	e730      	b.n	10022bc8 <__udivmoddi4+0x11c>
10022d66:	bf00      	nop

10022d68 <__aeabi_idiv0>:
10022d68:	4770      	bx	lr
10022d6a:	bf00      	nop
10022d6c:	d0206238 	.word	0xd0206238
10022d70:	cccfd2c1 	.word	0xcccfd2c1
10022d74:	a3ff00d8 	.word	0xa3ff00d8
10022d78:	ffff3433 	.word	0xffff3433
10022d7c:	3433a3ff 	.word	0x3433a3ff
10022d80:	32240035 	.word	0x32240035
10022d84:	30302461 	.word	0x30302461
10022d88:	63626124 	.word	0x63626124
10022d8c:	67666564 	.word	0x67666564
10022d90:	6b6a6968 	.word	0x6b6a6968
10022d94:	6f6e6d6c 	.word	0x6f6e6d6c
10022d98:	73727170 	.word	0x73727170
10022d9c:	00757574 	.word	0x00757574

10022da0 <test_hashes.1>:
10022da0:	10023ec4 10023ee6                       .>...>..

10022da8 <flags_by_subtype>:
10022da8:	00000402 00000000 00000000 00000000     ................
10022db8:	00000000 01000000                        ..........

10022dc2 <BF_atoi64>:
10022dc2:	40404040 40404040 40404040 01004040     @@@@@@@@@@@@@@..
10022dd2:	39383736 3d3c3b3a 40403f3e 40404040     6789:;<=>?@@@@@@
10022de2:	04030240 08070605 0c0b0a09 100f0e0d     @...............
10022df2:	14131211 18171615 401b1a19 40404040     ...........@@@@@
10022e02:	1e1d1c40 2221201f 26252423 2a292827     @.... !"#$%&'()*
10022e12:	2e2d2c2b 3231302f 40353433 40404040     +,-./012345@@@@@

10022e22 <BF_itoa64>:
10022e22:	42412f2e 46454443 4a494847 4e4d4c4b     ./ABCDEFGHIJKLMN
10022e32:	5251504f 56555453 5a595857 64636261     OPQRSTUVWXYZabcd
10022e42:	68676665 6c6b6a69 706f6e6d 74737271     efghijklmnopqrst
10022e52:	78777675 31307a79 35343332 39383736     uvwxyz0123456789
	...

10022e64 <BF_init_state>:
10022e64:	d1310ba6 98dfb5ac 2ffd72db d01adfb7     ..1......r./....
10022e74:	b8e1afed 6a267e96 ba7c9045 f12c7f99     .....~&jE.|...,.
10022e84:	24a19947 b3916cf7 0801f2e2 858efc16     G..$.l..........
10022e94:	636920d8 71574e69 a458fea3 f4933d7e     . iciNWq..X.~=..
10022ea4:	0d95748f 728eb658 718bcd58 82154aee     .t..X..rX..q.J..
10022eb4:	7b54a41d c25a59b5 9c30d539 2af26013     ..T{.YZ.9.0..`.*
10022ec4:	c5d1b023 286085f0 ca417918 b8db38ef     #.....`(.yA..8..
10022ed4:	8e79dcb0 603a180e 6c9e0e8b b01e8a3e     ..y...:`...l>...
10022ee4:	d71577c1 bd314b27 78af2fda 55605c60     .w..'K1../.x`\`U
10022ef4:	e65525f3 aa55ab94 57489862 63e81440     .%U...U.b.HW@..c
10022f04:	55ca396a 2aab10b6 b4cc5c34 1141e8ce     j9.U...*4\....A.
10022f14:	a15486af 7c72e993 b3ee1411 636fbc2a     ..T...r|....*.oc
10022f24:	2ba9c55d 741831f6 ce5c3e16 9b87931e     ]..+.1.t.>\.....
10022f34:	afd6ba33 6c24cf5c 7a325381 28958677     3...\.$l.S2zw..(
10022f44:	3b8f4898 6b4bb9af c4bfe81b 66282193     .H.;..Kk.....!(f
10022f54:	61d809cc fb21a991 487cac60 5dec8032     ...a..!.`.|H2..]
10022f64:	ef845d5d e98575b1 dc262302 eb651b88     ]]...u...#&...e.
10022f74:	23893e81 d396acc5 0f6d6ff3 83f44239     .>.#.....om.9B..
10022f84:	2e0b4482 a4842004 69c8f04a 9e1f9b5e     .D... ..J..i^...
10022f94:	21c66842 f6e96c9a 670c9c61 abd388f0     Bh.!.l..a..g....
10022fa4:	6a51a0d2 d8542f68 960fa728 ab5133a3     ..Qjh/T.(....3Q.
10022fb4:	6eef0b6c 137a3be4 ba3bf050 7efb2a98     l..n.;z.P.;..*.~
10022fc4:	a1f1651d 39af0176 66ca593e 82430e88     .e..v..9>Y.f..C.
10022fd4:	8cee8619 456f9fb4 7d84a5c3 3b8b5ebe     ......oE...}.^.;
10022fe4:	e06f75d8 85c12073 401a449f 56c16aa6     .uo.s ...D.@.j.V
10022ff4:	4ed3aa62 363f7706 1bfedf72 429b023d     b..N.w?6r...=..B
10023004:	37d0d724 d00a1248 db0fead3 49f1c09b     $..7H..........I
10023014:	075372c9 80991b7b 25d479d8 f6e8def7     .rS.{....y.%....
10023024:	e3fe501a b6794c3b 976ce0bd 04c006ba     .P..;Ly...l.....
10023034:	c1a94fb6 409f60c4 5e5c9ec2 196a2463     .O...`.@..\^c$j.
10023044:	68fb6faf 3e6c53b5 1339b2eb 3b52ec6f     .o.h.Sl>..9.o.R;
10023054:	6dfc511f 9b30952c cc814544 af5ebd09     .Q.m,.0.DE....^.
10023064:	bee3d004 de334afd 660f2807 192e4bb3     .....J3..(.f.K..
10023074:	c0cba857 45c8740f d20b5f39 b9d3fbdb     W....t.E9_......
10023084:	5579c0bd 1a60320a d6a100c6 402c7279     ..yU.2`.....yr,@
10023094:	679f25fe fb1fa3cc 8ea5e9f8 db3222f8     .%.g........."2.
100230a4:	3c7516df fd616b15 2f501ec8 ad0552ab     ..u<.ka...P/.R..
100230b4:	323db5fa fd238760 53317b48 3e00df82     ..=2`.#.H{1S...>
100230c4:	9e5c57bb ca6f8ca0 1a87562e df1769db     .W\...o..V...i..
100230d4:	d542a8f6 287effc3 ac6732c6 8c4f5573     ..B...~(.2g.sUO.
100230e4:	695b27b0 bbca58c8 e1ffa35d b8f011a0     .'[i.X..].......
100230f4:	10fa3d98 fd2183b8 4afcb56c 2dd1d35b     .=....!.l..J[..-
10023104:	9a53e479 b6f84565 d28e49bc 4bfb9790     y.S.eE...I.....K
10023114:	e1ddf2da a4cb7e33 62fb1341 cee4c6e8     ....3~..A..b....
10023124:	ef20cada 36774c01 d07e9efe 2bf11fb4     .. ..Lw6..~....+
10023134:	95dbda4d ae909198 eaad8e71 6b93d5a0     M.......q......k
10023144:	d08ed1d0 afc725e0 8e3c5b2f 8e7594b7     .....%../[<...u.
10023154:	8ff6e2fb f2122b64 8888b812 900df01c     ....d+..........
10023164:	4fad5ea0 688fc31c d1cff191 b3a8c1ad     .^.O...h........
10023174:	2f2f2218 be0e1777 ea752dfe 8b021fa1     ."//w....-u.....
10023184:	e5a0cc0f b56f74e8 18acf3d6 ce89e299     .....to.........
10023194:	b4a84fe0 fd13e0b7 7cc43b81 d2ada8d9     .O.......;.|....
100231a4:	165fa266 80957705 93cc7314 211a1477     f._..w...s..w..!
100231b4:	e6ad2065 77b5fa86 c75442f5 fb9d35cf     e .....w.BT..5..
100231c4:	ebcdaf0c 7b3e89a0 d6411bd3 ae1e7e49     ......>{..A.I~..
100231d4:	00250e2d 2071b35e 226800bb 57b8e0af     -.%.^.q ..h"...W
100231e4:	2464369b f009b91e 5563911d 59dfa6aa     .6d$......cU...Y
100231f4:	78c14389 d95a537f 207d5ba2 02e5b9c5     .C.x.SZ..[} ....
10023204:	83260376 6295cfa9 11c81968 4e734a41     v.&....bh...AJsN
10023214:	b3472dca 7b14a94a 1b510052 9a532915     .-G.J..{R.Q..)S.
10023224:	d60f573f bc9bc6e4 2b60a476 81e67400     ?W......v.`+.t..
10023234:	08ba6fb5 571be91f f296ec6b 2a0dd915     .o.....Wk......*
10023244:	b6636521 e7b9f9b6 ff34052e c5855664     !ec.......4.dV..
10023254:	53b02d5d a99f8fa1 08ba4799 6e85076a     ]-.S.....G..j..n
10023264:	4b7a70e9 b5b32944 db75092e c4192623     .pzKD)....u.#&..
10023274:	ad6ea6b0 49a7df7d 9cee60b8 8fedb266     ..n.}..I.`..f...
10023284:	ecaa8c71 699a17ff 5664526c c2b19ee1     q......ilRdV....
10023294:	193602a5 75094c29 a0591340 e4183a3e     ..6.)L.u@.Y.>:..
100232a4:	3f54989a 5b429d65 6b8fe4d6 99f73fd6     ..T?e.B[...k.?..
100232b4:	a1d29c07 efe830f5 4d2d38e6 f0255dc1     .....0...8-M.]%.
100232c4:	4cdd2086 8470eb26 6382e9c6 021ecc5e     . .L&.p....c^...
100232d4:	09686b3f 3ebaefc9 3c971814 6b6a70a1     ?kh....>...<.pjk
100232e4:	687f3584 52a0e286 b79c5305 aa500737     .5.h...R.S..7.P.
100232f4:	3e07841c 7fdeae5c 8e7d44ec 5716f2b8     ...>\....D}....W
10023304:	b03ada37 f0500c0d f01c1f04 0200b3ff     7.:...P.........
10023314:	ae0cf51a 3cb574b2 25837a58 dc0921bd     .....t.<Xz.%.!..
10023324:	d19113f9 7ca92ff6 94324773 22f54701     ...../.|sG2..G."
10023334:	3ae5e581 37c2dadc c8b57634 9af3dda7     ...:...74v......
10023344:	a9446146 0fd0030e ecc8c73e a4751e41     FaD.....>...A.u.
10023354:	e238cd99 3bea0e2f 3280bba1 183eb331     ..8./..;...21.>.
10023364:	4e548b38 4f6db908 6f420d03 f60a04bf     8.TN..mO..Bo....
10023374:	2cb81290 24977c79 5679b072 bcaf89af     ...,y|.$r.yV....
10023384:	de9a771f d9930810 b38bae12 dccf3f2e     .w...........?..
10023394:	5512721f 2e6b7124 501adde6 9f84cd87     .r.U$qk....P....
100233a4:	7a584718 7408da17 bc9f9abc e94b7d8c     .GXz...t.....}K.
100233b4:	ec7aec3a db851dfa 63094366 c464c3d2     :.z.....fC.c..d.
100233c4:	ef1c1847 3215d908 dd433b37 24c2ba16     G......27;C....$
100233d4:	12a14d43 2a65c451 50940002 133ae4dd     CM..Q.e*...P..:.
100233e4:	71dff89e 10314e55 81ac77d6 5f11199b     ...qUN1..w....._
100233f4:	043556f1 d7a3c76b 3c11183b 5924a509     .V5.k...;..<..$Y
10023404:	f28fe6ed 97f1fbfa 9ebabf2c 1e153c6e     ........,...n<..
10023414:	86e34570 eae96fb1 860e5e0a 5a3e2ab3     pE...o...^...*>Z
10023424:	771fe71c 4e3d06fa 2965dcb9 99e71d0f     ...w..=N..e)....
10023434:	803e89d6 5266c825 2e4cc978 9c10b36a     ..>.%.fRx.L.j...
10023444:	c6150eba 94e2ea78 a5fc3c53 1e0a2df4     ....x...S<...-..
10023454:	f2f74ea7 361d2b3d 1939260f 19c27960     .N..=+.6.&9.`y..
10023464:	5223a708 f71312b6 ebadfe6e eac31f66     ..#R....n...f...
10023474:	e3bc4595 a67bc883 b17f37d1 018cff28     .E....{..7..(...
10023484:	c332ddef be6c5aa5 65582185 68ab9802     ..2..Zl..!Xe...h
10023494:	eecea50f db2f953b 2aef7dad 5b6e2f84     ....;./..}.*./n[
100234a4:	1521b628 29076170 ecdd4775 619f1510     (.!.pa.)uG.....a
100234b4:	13cca830 eb61bd96 0334fe1e aa0363cf     0.....a...4..c..
100234c4:	b5735c90 4c70a239 d59e9e0b cbaade14     .\s.9.pL........
100234d4:	eecc86bc 60622ca7 9cab5cab b2f3846e     .....,b`.\..n...
100234e4:	648b1eaf 19bdf0ca a02369b9 655abb50     ...d.....i#.P.Ze
100234f4:	40685a32 3c2ab4b3 319ee9d5 c021b8f7     2Zh@..*<...1..!.
10023504:	9b540b19 875fa099 95f7997e 623d7da8     ..T..._.~....}=b
10023514:	f837889a 97e32d77 11ed935f 16681281     ..7.w-.._.....h.
10023524:	0e358829 c7e61fd6 96dedfa1 7858ba99     ).5...........Xx
10023534:	57f584a5 1b227263 9b83c3ff 1ac24696     ...Wcr"......F..
10023544:	cdb30aeb 532e3054 8fd948e4 6dbc3128     ....T0.S.H..(1.m
10023554:	58ebf2ef 34c6ffea fe28ed61 ee7c3c73     ...X...4a.(.s<|.
10023564:	5d4a14d9 e864b7e3 42105d14 203e13e0     ..J]..d..].B..> 
10023574:	45eee2b6 a3aaabea db6c4f15 facb4fd0     ...E.....Ol..O..
10023584:	c742f442 ef6abbb5 654f3b1d 41cd2105     B.B...j..;Oe.!.A
10023594:	d81e799e 86854dc7 e44b476a 3d816250     .y...M..jGK.Pb.=
100235a4:	cf62a1f2 5b8d2646 fc8883a0 c1c7b6a3     ..b.F&.[........
100235b4:	7f1524c3 69cb7492 47848a0b 5692b285     .$...t.i...G...V
100235c4:	095bbf00 ad19489d 1462b174 23820e00     ..[..H..t.b....#
100235d4:	58428d2a 0c55f5ea 1dadf43e 233f7061     *.BX..U.>...ap?#
100235e4:	3372f092 8d937e41 d65fecf1 6c223bdb     ..r3A~...._..;"l
100235f4:	7cde3759 cbee7460 4085f2a7 ce77326e     Y7.|`t.....@n2w.
10023604:	a6078084 19f8509e e8efd855 61d99735     .....P..U...5..a
10023614:	a969a7aa c50c06c2 5a04abfc 800bcadc     ..i........Z....
10023624:	9e447a2e c3453484 fdd56705 0e1e9ec9     .zD..4E..g......
10023634:	db73dbd3 105588cd 675fda79 e3674340     ..s...U.y._g@Cg.
10023644:	c5c43465 713e38d8 3d28f89e f16dff20     e4...8>q..(= .m.
10023654:	153e21e7 8fb03d4a e6e39f2b db83adf7     .!>.J=..+.......
10023664:	e93d5a68 948140f7 f64c261c 94692934     hZ=..@...&L.4)i.
10023674:	411520f7 7602d4f7 bcf46b2e d4a20068     . .A...v.k..h...
10023684:	d4082471 3320f46a 43b7d4b7 500061af     q$..j. 3...C.a.P
10023694:	1e39f62e 97244546 14214f74 bf8b8840     ..9.FE$.tO!.@...
100236a4:	4d95fc1d 96b591af 70f4ddd3 66a02f45     ...M.......pE/.f
100236b4:	bfbc09ec 03bd9785 7fac6dd0 31cb8504     .........m.....1
100236c4:	96eb27b3 55fd3941 da2547e6 abca0a9a     .'..A9.U.G%.....
100236d4:	28507825 530429f4 0a2c86da e9b66dfb     %xP(.).S..,..m..
100236e4:	68dc1462 d7486900 680ec0a4 27a18dee     b..h.iH....h...'
100236f4:	4f3ffea2 e887ad8c b58ce006 7af4d6b6     ..?O...........z
10023704:	aace1e7c d3375fec ce78a399 406b2a42     |...._7...x.B*k@
10023714:	20fe9e35 d9f385b9 ee39d7ab 3b124e8b     5.. ......9..N.;
10023724:	1dc9faf7 4b6d1856 26a36631 eae397b2     ....V.mK1f.&....
10023734:	3a6efa74 dd5b4332 6841e7f7 ca7820fb     t.n:2C[...Ah. x.
10023744:	fb0af54e d8feb397 454056ac ba489527     N........V@E'.H.
10023754:	55533a3a 20838d87 fe6ba9b7 d096954b     ::SU... ..k.K...
10023764:	55a867bc a1159a58 cca92963 99e1db33     .g.UX...c)..3...
10023774:	a62a4a56 3f3125f9 5ef47e1c 9029317c     VJ*..%1?.~.^|1).
10023784:	fdf8e802 04272f70 80bb155c 05282ce3     ....p/'.\....,(.
10023794:	95c11548 e4c66d22 48c1133f c70f86dc     H..."m..?..H....
100237a4:	07f9c9ee 41041f0f 404779a4 5d886e17     .......A.yG@.n.]
100237b4:	325f51eb d59bc0d1 f2bcc18f 41113564     .Q_2........d5.A
100237c4:	257b7834 602a9c60 dff8e8a3 1f636c1b     4x{%`.*`.....lc.
100237d4:	0e12b4c2 02e1329e af664fd1 cad18115     .....2...Of.....
100237e4:	6b2395e0 333e92e1 3b240b62 eebeb922     ..#k..>3b.$;"...
100237f4:	85b2a20e e6ba0d99 de720c8c 2da2f728     ..........r.(..-
10023804:	d0127845 95b794fd 647d0862 e7ccf5f0     Ex......b.}d....
10023814:	5449a36f 877d48fa c39dfd27 f33e8d1e     o.IT.H}.'.....>.
10023824:	0a476341 992eff74 3a6f6eab f4f8fd37     AcG.t....no:7...
10023834:	a812dc60 a1ebddf8 991be14c db6e6b0d     `.......L....kn.
10023844:	c67b5510 6d672c37 2765d43b dcd0e804     .U{.7,gm;.e'....
10023854:	f1290dc7 cc00ffa3 b5390f92 690fed0b     ..).......9....i
10023864:	667b9ffb cedb7d9c a091cf0b d9155ea3     ..{f.}.......^..
10023874:	bb132f88 515bad24 7b9479bf 763bd6eb     ./..$.[Q.y.{..;v
10023884:	37392eb3 cc115979 8026e297 f42e312d     ..97yY....&.-1..
10023894:	6842ada7 c66a2b3b 12754ccc 782ef11c     ..Bh;+j..Lu....x
100238a4:	6a124237 b79251e7 06a1bbe6 4bfb6350     7B.j.Q......Pc.K
100238b4:	1a6b1018 11caedfa 3d25bdd8 e2e1c3c9     ..k.......%=....
100238c4:	44421659 0a121386 d90cec6e d5abea2a     Y.BD....n...*...
100238d4:	64af674e da86a85f bebfe988 64e4c3fe     Ng.d_..........d
100238e4:	9dbc8057 f0f7c086 60787bf8 6003604d     W........{x`M`.`
100238f4:	d1fd8346 f6381fb0 7745ae04 d736fccc     F.....8...Ew..6.
10023904:	83426b33 f01eab71 b0804187 3c005e5f     3kB.q....A.._^.<
10023914:	77a057be bde8ae24 55464299 bf582e61     .W.w$....BFUa.X.
10023924:	4e58f48f f2ddfda2 f474ef38 8789bdc2     ..XN....8.t.....
10023934:	5366f9c3 c8b38e74 b475f255 46fcd9b9     ..fSt...U.u....F
10023944:	7aeb2661 8b1ddf84 846a0e79 915f95e2     a&.z....y.j..._.
10023954:	466e598e 20b45770 8cd55591 c902de4c     .YnFpW. .U..L...
10023964:	b90bace1 bb8205d0 11a86248 7574a99e     ........Hb....tu
10023974:	b77f19b6 e0a9dc09 662d09a1 c4324633     ..........-f3F2.
10023984:	e85a1f02 09f0be8c 4a99a025 1d6efe10     ..Z.....%..J..n.
10023994:	1ab93d1d 0ba5a4df a186f20f 2868f169     .=..........i.h(
100239a4:	dcb7da83 573906fe a1e2ce9b 4fcd7f52     ......9W....R..O
100239b4:	50115e01 a70683fa a002b5c4 0de6d027     .^.P........'...
100239c4:	9af88c27 773f8641 c3604c06 61a806b5     '...A.?w.L`....a
100239d4:	f0177a28 c0f586e0 006058aa 30dc7d62     (z.......X`.b}.0
100239e4:	11e69ed7 2338ea63 53c2dd94 c2c21634     ....c.8#...S4...
100239f4:	bbcbee56 90bcb6de ebfc7da1 ce591d76     V........}..v.Y.
10023a04:	6f05e409 4b7c0188 39720a3d 7c927c24     ...o..|K=.r9$|.|
10023a14:	86e3725f 724d9db9 1ac15bb4 d39eb8fc     _r....Mr.[......
10023a24:	ed545578 08fca5b5 d83d7cd3 4dad0fc4     xUT......|=....M
10023a34:	1e50ef5e b161e6f8 a28514d9 6c51133c     ^.P...a.....<.Ql
10023a44:	6fd5c7e7 56e14ec4 362abfce ddc6c837     ...o.N.V..*67...
10023a54:	d79a3234 92638212 670efa8e 406000e0     42....c....g..`@
10023a64:	3a39ce37 d3faf5cf abc27737 5ac52d1b     7.9:....7w...-.Z
10023a74:	5cb0679e 4fa33742 d3822740 99bc9bbe     .g.\B7.O@'......
10023a84:	d5118e9d bf0f7315 d62d1c7e c700c47b     .....s..~.-.{...
10023a94:	b78c1b6b 21a19045 b26eb1be 6a366eb4     k...E..!..n..n6j
10023aa4:	5748ab2f bc946e79 c6a376d2 6549c2c8     /.HWyn...v....Ie
10023ab4:	530ff8ee 468dde7d d5730a1d 4cd04dc6     ...S}..F..s..M.L
10023ac4:	2939bbdb a9ba4650 ac9526e8 be5ee304     ..9)PF...&....^.
10023ad4:	a1fad5f0 6a2d519a 63ef8ce2 9a86ee22     .....Q-j...c"...
10023ae4:	c089c2b8 43242ef6 a51e03aa 9cf2d0a4     ......$C........
10023af4:	83c061ba 9be96a4d 8fe51550 ba645bd6     .a..Mj..P....[d.
10023b04:	2826a2f9 a73a3ae1 4ba99586 ef5562e9     ..&(.::....K.bU.
10023b14:	c72fefd3 f752f7da 3f046f69 77fa0a59     ../...R.io.?Y..w
10023b24:	80e4a915 87b08601 9b09e6ad 3b3ee593     ..............>;
10023b34:	e990fd5a 9e34d797 2cf0b7d9 022b8b51     Z.....4....,Q.+.
10023b44:	96d5ac3a 017da67d d1cf3ed6 7c7d2d28     :...}.}..>..(-}|
10023b54:	1f9f25cf adf2b89b 5ad6b472 5a88f54c     .%......r..ZL..Z
10023b64:	e029ac71 e019a5e6 47b0acfd ed93fa9b     q.)........G....
10023b74:	e8d3c48d 283b57cc f8d56629 79132e28     .....W;()f..(..y
10023b84:	785f0191 ed756055 f7960e44 e3d35e8c     .._xU`u.D....^..
10023b94:	15056dd4 88f46dba 03a16125 0564f0bd     .m...m..%a....d.
10023ba4:	c3eb9e15 3c9057a2 97271aec a93a072a     .....W.<..'.*.:.
10023bb4:	1b3f6d9b 1e6321f5 f59c66fb 26dcf319     .m?..!c..f.....&
10023bc4:	7533d928 b155fdf5 03563482 8aba3cbb     (.3u..U..4V..<..
10023bd4:	28517711 c20ad9f8 abcc5167 ccad925f     .wQ(....gQ.._...
10023be4:	4de81751 3830dc8e 379d5862 9320f991     Q..M..08bX.7.. .
10023bf4:	ea7a90c2 fb3e7bce 5121ce64 774fbe32     ..z..{>.d.!Q2.Ow
10023c04:	a8b6e37e c3293d46 48de5369 6413e680     ~...F=).iS.H...d
10023c14:	a2ae0810 dd6db224 69852dfd 09072166     ....$.m..-.if!..
10023c24:	b39a460a 6445c0dd 586cdecf 1c20c8ae     .F....Ed..lX.. .
10023c34:	5bbef7dd 1b588d40 ccd2017f 6bb4e3bb     ...[@.X........k
10023c44:	dda26a7e 3a59ff45 3e350a44 bcb4cdd5     ~j..E.Y:D.5>....
10023c54:	72eacea8 fa6484bb 8d6612ae bf3c6f47     ...r..d...f.Go<.
10023c64:	d29be463 542f5d9e aec2771b f64e6370     c....]/T.w..pcN.
10023c74:	740e0d8d e75b1357 f8721671 af537d5d     ...tW.[.q.r.]}S.
10023c84:	4040cb08 4eb4e2cc 34d2466a 0115af84     ..@@...NjF.4....
10023c94:	e1b00428 95983a1d 06b89fb4 ce6ea048     (....:......H.n.
10023ca4:	6f3f3b82 3520ab82 011a1d4b 277227f8     .;?o.. 5K....'r'
10023cb4:	611560b1 e7933fdc bb3a792b 344525bd     .`.a.?..+y:..%E4
10023cc4:	a08839e1 51ce794b 2f32c9b7 a01fbac9     .9..Ky.Q..2/....
10023cd4:	e01cc87e bcc7d1f6 cf0111c3 a1e8aac7     ~...............
10023ce4:	1a908749 d44fbd9a d0dadecb d50ada38     I.....O.....8...
10023cf4:	0339c32a c6913667 8df9317c e0b12b4f     *.9.g6..|1..O+..
10023d04:	f79e59b7 43f5bb3a f2d519ff 27d9459c     .Y..:..C.....E.'
10023d14:	bf97222c 15e6fc2a 0f91fc71 9b941525     ,"..*...q...%...
10023d24:	fae59361 ceb69ceb c2a86459 12baa8d1     a.......Yd......
10023d34:	b6c1075e e3056a0c 10d25065 cb03a442     ^....j..eP..B...
10023d44:	e0ec6e0e 1698db3b 4c98a0be 3278e964     .n..;......Ld.x2
10023d54:	9f1f9532 e0d392df d3a0342b 8971f21e     2.......+4....q.
10023d64:	1b0a7441 4ba3348c c5be7120 c37632d8     At...4.K q...2v.
10023d74:	df359f8d 9b992f2e e60b6f47 0fe3f11d     ..5../..Go......
10023d84:	e54cda54 1edad891 ce6279cf cd3e7e6f     T.L......yb.o~>.
10023d94:	1618b166 fd2c1d05 848fd2c5 f6fb2299     f.....,......"..
10023da4:	f523f357 a6327623 93a83531 56cccd02     W.#.#v2.15.....V
10023db4:	acf08162 5a75ebb5 6e163697 88d273cc     b.....uZ.6.n.s..
10023dc4:	de966292 81b949d0 4c50901b 71c65614     .b...I....PL.V.q
10023dd4:	e6c6c7bd 327a140a 45e1d006 c3f27b9a     ......z2...E.{..
10023de4:	c9aa53fd 62a80f00 bb25bfe2 35bdd2f6     .S.....b..%....5
10023df4:	71126905 b2040222 b6cbcf7c cd769c2b     .i.q"...|...+.v.
10023e04:	53113ec0 1640e3d3 38abbd60 2547adf0     .>.S..@.`..8..G%
10023e14:	ba38209c f746ce76 77afa1c5 20756060     . 8.v.F....w``u 
10023e24:	85cbfe4e 8ae88dd8 7aaaf9b0 4cf9aa7e     N..........z~..L
10023e34:	1948c25c 02fb8a8c 01c36ae4 d6ebe1f9     \.H......j......
10023e44:	90d4f869 a65cdea0 3f09252d c208e69f     i.....\.-%.?....
10023e54:	b74e6132 ce77e25b 578fdfe3 3ac372e6     2aN.[.w....W.r.:
10023e64:	243f6a88 85a308d3 13198a2e 03707344     .j?$........Dsp.
10023e74:	a4093822 299f31d0 082efa98 ec4e6c89     "8...1.).....lN.
10023e84:	452821e6 38d01377 be5466cf 34e90c6c     .!(Ew..8.fT.l..4
10023e94:	c0ac29b7 c97c50dd 3f84d5b5 b5470917     .)...P|....?..G.
10023ea4:	9216d5d9 8979fb1b                       ......y.

10023eac <BF_magic_w>:
10023eac:	4f727068 65616e42 65686f6c 64657253     hprOBnaeloheSred
10023ebc:	63727944 6f756274 37443169 66763930     Dyrctbuoi1D709vf
10023ecc:	6c756d61 476c6d69 71307163 76553371     amulimlGcq0qq3Uv
10023edc:	73615575 00614576 55560055 586d5072     uUasvEa.U.VUrPmX
10023eec:	2f713644 5353566e 4e703770 52436844     D6q/nVSSp7pNDhCR
10023efc:	31373039 52496649 00550065 66667542     9071IfIRe.U.Buff
10023f0c:	73207265 73657a69 65726120 746f6e20     er sizes are not
10023f1c:	6d6f6320 69746170 0a656c62 72724500      compatible..Err
10023f2c:	203a726f 75736e49 63696666 746e6569     or: Insufficient
10023f3c:	61707320 69206563 6975206e 5f38746e      space in uint8_
10023f4c:	66667562 25007265 62656425 203a6775     buffer.%%debug: 
10023f5c:	74655300 78614d20 6d756d69 63615020     .Set Maximum Pac
10023f6c:	2074656b 657a6953 726f6620 63655320     ket Size for Sec
10023f7c:	20657275 646e6553 00252500 72652525     ure Send.%%.%%er
10023f8c:	3a726f72 654d0020 67617373 6f742065     ror: .Message to
10023f9c:	6f6c206f 4300676e 74616572 65532065     o long.Create Se
10023fac:	65727563 63615020 0074656b 6c697542     cure Packet.Buil
10023fbc:	75412064 6e656874 61636974 6e6f6974     d Authentication
10023fcc:	73614820 64410068 65532064 69727563      Hash.Add Securi
10023fdc:	41207974 69727474 65747562 6f742073     ty Attributes to
10023fec:	63617020 0074656b 61647055 72206574      packet.Update r
10023ffc:	6f646e61 756e206d 7265626d 73736120     andom number ass
1002400c:	6d6e6769 20746e65 20726f66 706d6f63     ignment for comp
1002401c:	6e656e6f 52450074 3a524f52 746f5020     onent.ERROR: Pot
1002402c:	69746e65 52206c61 616c7065 20646579     ential Replayed 
1002403c:	6b636150 00217465 61766e49 2064696c     Packet!.Invalid 
1002404c:	6b636170 72207465 69656365 20646576     packet received 
1002405c:	74616874 6e616320 20746f6e 61206562     that cannot be a
1002406c:	65687475 6369746e 64657461 724f002e     uthenticated..Or
1002407c:	6e696769 6d206c61 61737365 203a6567     iginal message: 
1002408c:	00732500 2d2d2d2d 2d2d2d2d 2d2d2d2d     .%s.------------
1002409c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
100240ac:	2d2d2d2d 2d2d2d2d 2d2d2d2d 73657400     ------------.tes
100240bc:	65732074 65727563 6e657320 61632064     t secure send ca
100240cc:	64656c6c 6c654800 202c6f6c 73696874     lled.Hello, this
100240dc:	20736920 65742061 6d207473 61737365      is a test messa
100240ec:	46006567 656c6961 65732064 65727563     ge.Failed secure
100240fc:	6e657320 6f430064 20646c75 20746f6e      send.Could not 
1002410c:	646e6573 20504120 6c627570 6b206369     send AP public k
1002411c:	74207965 6f63206f 6e6f706d 00746e65     ey to component.
1002412c:	6c696146 74206465 6573206f 6520646e     Failed to send e
1002413c:	7972636e 64657470 53454120 79656b20     ncrypted AES key
1002414c:	206f7420 706d6f63 6e656e6f 6e490074      to component.In
1002415c:	696c6176 6f432064 6e6f706d 20746e65     valid Component 
1002416c:	64726148 65726177 76654420 3a656369     Hardware Device:
1002417c:	746f4e20 58414d20 30303837 61560030      Not MAX78000.Va
1002418c:	2064696c 706d6f43 6e656e6f 61482074     lid Component Ha
1002419c:	61776472 44206572 63697665 4d203a65     rdware Device: M
100241ac:	38375841 00303030 73726946 6f622074     AX78000.First bo
100241bc:	202c746f 74746573 20676e69 73616c66     ot, setting flas
100241cc:	43002168 646c756f 746f6e20 6c617620     h!.Could not val
100241dc:	74616469 6f632065 6e6f706d 00746e65     idate component.
100241ec:	706d6f43 6e656e6f 44492074 7830203a     Component ID: 0x
100241fc:	78383025 766e6920 64696c61 6f43000a     %08x invalid..Co
1002420c:	6e6f706d 73746e65 756f6320 6e20646c     mponents could n
1002421c:	6220746f 61762065 6164696c 00646574     ot be validated.
1002422c:	6e692525 203a6f66 303e5000 38302578     %%info: .P>0x%08
1002423c:	46000a78 2578303e 0a783830 73252500     x..F>0x%08x..%%s
1002424c:	65636375 203a7373 73694c00 6f430074     uccess: .List.Co
1002425c:	20646c75 20746f6e 746f6f62 6d6f6320     uld not boot com
1002426c:	656e6f70 3000746e 38302578 73253e78     ponent.0x%08x>%s
1002427c:	6f43000a 20646c75 20746f6e 65747461     ..Could not atte
1002428c:	63207473 6f706d6f 746e656e 303e4300     st component.C>0
1002429c:	38302578 45000a78 7265746e 6e697020     x%08x..Enter pin
100242ac:	5600203a 66697265 676e6979 4e495020     : .Verifying PIN
100242bc:	002e2e2e 34333231 50003635 41206e69     ....123456.Pin A
100242cc:	70656363 21646574 766e4900 64696c61     ccepted!.Invalid
100242dc:	4e495020 6e450021 20726574 656b6f74      PIN!.Enter toke
100242ec:	00203a6e 69726556 6e697966 6f542067     n: .Verifying To
100242fc:	2e6e656b 30002e2e 34333231 38373635     ken....012345678
1002430c:	63626139 00666564 656b6f54 6341206e     9abcdef.Token Ac
1002431c:	74706563 00216465 61766e49 2064696c     cepted!.Invalid 
1002432c:	656b6f54 4600216e 656c6961 6f742064     Token!.Failed to
1002433c:	6f6f6220 6c612074 6f63206c 6e6f706d      boot all compon
1002434c:	73746e65 73655400 6f622074 6d20746f     ents.Test boot m
1002435c:	61737365 41006567 73253e50 6f42000a     essage.AP>%s..Bo
1002436c:	4300746f 6f706d6f 746e656e 20444920     ot.Component ID 
1002437c:	203a6e49 00782500 706d6f43 6e656e6f     In: .%x.Componen
1002438c:	44492074 74754f20 5200203a 616c7065     t ID Out: .Repla
1002439c:	20646563 30257830 77207838 20687469     ced 0x%08x with 
100243ac:	30257830 000a7838 6c706552 00656361     0x%08x..Replace.
100243bc:	706d6f43 6e656e6f 78302074 78383025     Component 0x%08x
100243cc:	20736920 20746f6e 766f7270 6f697369      is not provisio
100243dc:	2064656e 20726f66 20656874 74737973     ned for the syst
100243ec:	0a0d6d65 6d6f4300 656e6f70 4920746e     em...Component I
100243fc:	00203a44 65747441 41007473 696c7070     D: .Attest.Appli
1002440c:	69746163 50206e6f 65636f72 726f7373     cation Processor
1002441c:	61745320 64657472 746e4500 43207265      Started.Enter C
1002442c:	616d6d6f 203a646e 766e4900 64696c61     ommand: .Invalid
1002443c:	76654420 21656369 73696c00 6f620074      Device!.list.bo
1002444c:	7200746f 616c7065 61006563 73657474     ot.replace.attes
1002445c:	6e550074 6f636572 7a696e67 63206465     t.Unrecognized c
1002446c:	616d6d6f 2720646e 0a277325 00000000     ommand '%s'.....

1002447c <pced_zero>:
1002447c:	00000001 00000000 00000000 00000000     ................
	...
100244a4:	00000001 00000000 00000000 00000000     ................
	...

100244f4 <ed_zero>:
	...
1002451c:	00000001 00000000 00000000 00000000     ................
	...
1002456c:	00000001 00000000 00000000 00000000     ................
	...

10024594 <ed_lookup>:
10024594:	0340913e 000e4175 03d673a2 002e8a05     >.@.uA...s......
100245a4:	03f4e67c 008f8a09 00c21a34 004cf4b8     |.......4.....L.
100245b4:	01298f81 0113f4be 018c3b85 0124f1bd     ..)......;....$.
100245c4:	01c325f7 0037dc60 033e4cb7 003d42c2     .%..`.7..L>..B=.
100245d4:	01a44c32 014ca4e1 03a33d4b 001f3e74     2L....L.K=..t>..
100245e4:	037aaa68 00448161 0093d579 011e6556     h.z.a.D.y...Ve..
100245f4:	009b67a0 0143598c 01bee5ee 00b50b43     .g...YC.....C...
10024604:	0289f0c6 01bc45ed 02b4d5a8 00695810     .....E.......Xi.
10024614:	019ed153 00627305 023cae04 016e37aa     S....sb...<..7n.
10024624:	0311b5d8 00aabc13 02669c92 01aed656     ..........f.V...
10024634:	033c71d7 0139ff24 02b6b244 00b3d07f     .q<.$.9.D.......
10024644:	027d1a76 01d60702 034d32f0 01c5cb54     v.}......2M.T...
10024654:	03fa87d2 01643018 019b7a5f 00aa2ce9     .....0d._z...,..
10024664:	01ef087f 00eaecd6 00db05af 013d6a31     ............1j=.
10024674:	03d04205 016e6a01 0313ea50 01c06bd6     .B...jn.P....k..
10024684:	00fcd265 0047fa29 034faacc 01ef2e0d     e...).G...O.....
10024694:	00ef4d4f 014bd6bd 00f98d10 014c5026     OM....K.....&PL.
100246a4:	007555bd 00aae456 00ee9730 016c2a13     .Uu.V...0....*l.
100246b4:	017155e4 01874432 00096a10 01016732     .Uq.2D...j..2g..
100246c4:	01a8014f 011e9823 01b9a80f 01e85938     O...#.......8Y..
100246d4:	01d0d889 01a4cfc3 034c4295 0110e1ae     .........BL.....
100246e4:	0162508c 00f2db4c 0072a2c6 0098da2e     .Pb.L.....r.....
100246f4:	02f12b9b 0168a09a 016818bf 01814281     .+....h...h..B..
10024704:	035532bf 018ab307 00c9fa25 00a05073     .2U.....%...sP..
10024714:	0071e683 0093587d 00c7445a 009e4cfd     ..q.}X..ZD...L..
10024724:	02fc099f 00d46e63 00a7050e 01a3efe9     ....cn..........
10024734:	019d971b 010a9265 02469efd 00e4f946     ....e.....F.F...
10024744:	00321e58 01a03a44 0076ff09 00fefa71     X.2.D:....v.q...
10024754:	002e4b42 002bdae6 01ba78e5 002b4494     BK....+..x...D+.
10024764:	01ee7c88 01c56bbb 03f63553 01fe7432     .|...k..S5..2t..
10024774:	0047d6ba 0060b0e9 0136eff2 008a5939     ..G...`...6.9Y..
10024784:	03540053 0064a087 02788e5c 00be7c67     S.T...d.\.x.g|..
10024794:	033eb1b5 005529f9 00a5bb33 00af1102     ..>..)U.3.......
100247a4:	01a05442 001e3af7 02354123 00bfec44     BT...:..#A5.D...
100247b4:	01f5862d 00dd7ba3 03146e20 00a51733     -....{.. n..3...
100247c4:	012a8285 00f6fc60 023f9797 003e85ee     ..*.`.....?...>.
100247d4:	009c3820 01bda72d 01b3858d 00d35683      8..-........V..
100247e4:	0296b3bb 010eaaf9 037d8ca4 0001ad9e     ..........}.....
100247f4:	00e72933 00213e91 015d6f8a 004553b9     3)...>!..o]..SE.
10024804:	002e7390 01109761 001ae417 00e2d931     .s..a.......1...
10024814:	03157131 013bbadd 01f10741 00480645     1q....;.A...E.H.
10024824:	026c9c56 0059a736 02db346d 0117b00c     V.l.6.Y.m4......
10024834:	036a2cc3 014795ee 02ea4b71 010c99c0     .,j...G.qK......
10024844:	036030b5 001a0d0d 02f9c380 003bc144     .0`.........D.;.
10024854:	02512584 003c6a7c 01a9f0d6 0042e3a4     .%Q.|j<.......B.
10024864:	023221b1 01cb26aa 0074f74d 0099ddd1     .!2..&..M.t.....
10024874:	01b28085 00192c3a 013b27c9 00fc13bd     ....:,...';.....
10024884:	01d2e531 0075bb75 004ea3bf 00973425     1...u.u...N.%4..
10024894:	001a4d63 01d59cee 01d1c0d4 00542e49     cM..........I.T.
100248a4:	01294114 004fce36 029283c9 01186fa9     .A).6.O......o..
100248b4:	01b8b3a2 00db7200 00935e30 003829f5     .....r..0^...)8.
100248c4:	02cc0d7d 0077adf3 0220dd2c 0014ea53     }.....w.,. .S...
100248d4:	01c6a0f9 01ea7eec 039234d9 01d77b7c     .....~...4..|{..
100248e4:	031f3c54 00070daa 0258f5da 003c23fb     T<........X..#<.
100248f4:	03a0d637 00386584 021320e0 00ea4092     7....e8.. ...@..
10024904:	00dd3e8f 01d65981 02058b36 01bf1443     .>...Y..6...C...
10024914:	01b2cc0d 00d9c323 01ce332f 00a5f626     ....#.../3..&...
10024924:	02061bce 0024579d 01a2911a 007d7672     .....W$.....rv}.
10024934:	00fafcf8 01c45e65 02e28dc5 00b62a32     ....e^......2*..
10024944:	02090c87 01d2ac6c 01c2ecc4 009a41f1     ....l........A..
10024954:	01aa515e 00d8d512 00475dab 00f85e34     ^Q.......]G.4^..
10024964:	02a19712 0142d1c4 020ff4ad 00b730a1     ......B......0..
10024974:	02f03d31 00c35db5 032f9c1d 01374398     1=...]..../..C7.
10024984:	0222a5d9 00b3b449 014742da 00637a58     ..".I....BG.Xzc.
10024994:	03dbb5d4 01e72a5b 009a00ee 01b74df5     ....[*.......M..
100249a4:	0106e4c7 011105c8 03ed2d88 0004946b     .........-..k...
100249b4:	03ed4f5a 014d3f26 01cf5234 0176168e     ZO..&?M.4R....v.
100249c4:	0112e864 00431a5c 01be5fde 00f109df     d...\.C.._......
100249d4:	03d44c92 0168cd6b 0099753e 00304590     .L..k.h.>u...E0.
100249e4:	006fe423 01c121c0 02bed66f 00979872     #.o..!..o...r...
100249f4:	0358c805 018aa820 0048e194 011bd102     ..X. .....H.....
10024a04:	01a8f52b 0111eddc 0269d31d 00ddee8c     +.........i.....
10024a14:	02f55080 000efe6e 00586604 00f84a33     .P..n....fX.3J..
10024a24:	028fc7e2 0165a2cb 01bd61cf 001268f5     ......e..a...h..
10024a34:	031ef6e6 00459416 0234586e 0159b5e1     ......E.nX4...Y.
10024a44:	00c10834 01e927e7 008a22c6 00ad44de     4....'..."...D..
10024a54:	02f2395b 017fd2db 02f607bf 00bb2396     [9...........#..
10024a64:	00a5ecc3 00ce5d6f 025a2fd0 0150a171     ....o].../Z.q.P.
10024a74:	00f87420 015798b3 01b19044 011aee58      t....W.D...X...
10024a84:	01712039 00454d01 0334793b 0053ee97     9 q..ME.;y4...S.
10024a94:	0185f7d4 01d1859a 000ae79a 00264e40     ............@N&.
10024aa4:	0164f97a 0161131e 01f95b3d 004d85f8     z.d...a.=[....M.
10024ab4:	02a83fc5 00520a73 03dd95c2 00dee125     .?..s.R.....%...
10024ac4:	02b4ffe8 01855275 01b1d138 0085e88b     ....uR..8.......
10024ad4:	022eb09e 002e73c1 01e5f758 00bf671c     .....s..X....g..
10024ae4:	0271ecb8 01c2cbd3 02fc643c 01ca0523     ..q.....<d..#...
10024af4:	03995b76 001d4f80 02ab6767 016fd7ec     v[...O..gg....o.
10024b04:	004535d7 0017f0ef 02afdedd 002ceb94     .5E...........,.
10024b14:	0219e497 006769d9 00d2558e 01be8195     .....ig..U......
10024b24:	025e41d4 01e08674 0075c651 00dcdd9d     .A^.t...Q.u.....
10024b34:	00d1add9 00a67f50 0204e5f7 017cb7a6     ....P.........|.
10024b44:	02cc1c59 01f03bae 01f8290a 0133286c     Y....;...)..l(3.
10024b54:	02c3b18f 007efa95 00246590 002572c5     ......~..e$..r%.
10024b64:	02a6ac68 0000b60a 03bc4851 0110bc60     h.......QH..`...
10024b74:	000a0644 019193c7 01730907 01afd641     D.........s.A...
10024b84:	01415b8a 01de3c78 00efc1f4 01bdd61d     .[A.x<..........
10024b94:	0019027f 00a29a50 016bdc4d 014acdea     ....P...M.k...J.
10024ba4:	0367a635 00094873 029d5294 01fb82c2     5.g.sH...R......
10024bb4:	034cca27 00e07efa 023e639d 01e107ce     '.L..~...c>.....
10024bc4:	00c3445f 019dba8c 03e71382 00fe8029     _D..........)...
10024bd4:	032f5ee4 0119c81d 0359d622 018cb03c     .^/.....".Y.<...
10024be4:	03a3e252 00ac824a 00112680 0198895f     R...J....&.._...
10024bf4:	019f7cd6 00005d4f 023ddb34 0048cb65     .|..O]..4.=.e.H.
10024c04:	030b078d 00d5a4b9 00777a1f 0091f285     .........zw.....
10024c14:	03e8fcd0 01b6d55a 02fa048e 004ad7f8     ....Z.........J.
10024c24:	02fce34d 003ef125 037dae3e 015d6f9a     M...%.>.>.}..o].
10024c34:	01cee609 0128c561 023930ff 000dfa40     ....a.(..09.@...
10024c44:	0396fb12 01d26ddb 016f1e92 00df09ab     .....m....o.....
10024c54:	01227be5 011a825c 012d9b4c 011c8bc3     .{".\...L.-.....
10024c64:	004ee03a 00f71188 0020796c 01bdfa4f     :.N.....ly .O...
10024c74:	02a6ae05 00bd812b 039323eb 018df724     ....+....#..$...
10024c84:	03048d47 00ff6b66 00045af7 002a2c35     G...fk...Z..5,*.
10024c94:	00f01e02 003f3b04 01fe1e44 01562992     .....;?.D....)V.
10024ca4:	02efcc89 01118d6b 0087f2ba 007fd0d2     ....k...........
10024cb4:	020e2d44 003e6048 03183c51 012406a9     D-..H`>.Q<....$.
10024cc4:	00244e45 00b4a771 03c147be 01a49ec6     EN$.q....G......
10024cd4:	00ac0839 000c214d 00033f41 01214d99     9...M!..A?...M!.
10024ce4:	0166feab 0104dde4 001af8f0 006dd523     ..f.........#.m.
10024cf4:	03368116 01e12314 03383de9 0006d939     ..6..#...=8.9...
10024d04:	00587c8f 00427eec 03b726d1 0106ee21     .|X..~B..&..!...
10024d14:	004346be 001f511d 0164a81d 00a0ada9     .FC..Q....d.....
10024d24:	0075236b 013b603e 01450c50 01beef87     k#u.>`;.P.E.....
10024d34:	0012fcdb 013adca3 006691ae 00d3165f     ......:...f._...
10024d44:	02990fc4 01e8542d 01922274 014afae7     ....-T..t"....J.
10024d54:	0164861a 01c3bb5c 0070c6a9 002a1c78     ..d.\.....p.x.*.
10024d64:	03bc8989 006d6652 004c0660 01d2deea     ....Rfm.`.L.....
10024d74:	01cdaeb8 01d59e3c 00d6f10c 008c81ac     ....<...........
10024d84:	00f2685d 00fb9cc0 027dd6b7 00957927     ]h........}.'y..
10024d94:	03d59eba 00e30858 02005845 00e187ca     ....X...EX......
10024da4:	00cbaec9 00b84793 02297912 004e055d     .....G...y).].N.
10024db4:	001e7518 009e51e1 00dae87f 00cb1ce2     .u...Q..........
10024dc4:	03971be9 01052b74 032f0ef1 00061420     ....t+..../. ...
10024dd4:	022cfb89 01f51f1a 02f0d6e0 00b40523     ..,.........#...
10024de4:	01e787fb 00d48aa3 0274f9d2 00bb8157     ..........t.W...
10024df4:	02310813 01900e3d 00d34c9e 005233d6     ..1.=....L...3R.
10024e04:	0134f027 0124bd9e 015528d4 01f7b420     '.4...$..(U. ...
10024e14:	011a6612 01611854 00de1544 017a8b94     .f..T.a.D.....z.
10024e24:	01ebd5db 00ffcbe8 02e4756d 01cbdf66     ........mu..f...
10024e34:	010ffc4a 01dc479a 015b0d16 0160a88d     J....G....[...`.
10024e44:	0085b6b4 003733fa 02d4eaea 009e3fae     .....37......?..
10024e54:	00933966 009a07e3 01931635 00e10148     f9......5...H...
10024e64:	02308652 019d3c52 00a94890 00ef6722     R.0.R<...H.."g..
10024e74:	002fe9c6 01041374 0124422a 00afd784     ../.t...*B$.....
10024e84:	0356ae56 019cc519 0287e830 0052b666     V.V.....0...f.R.
10024e94:	01b080fd 007ab299 000afaf5 00b218ec     ......z.........
10024ea4:	03096ab8 005381b6 01e6b024 00486722     .j....S.$..."gH.
10024eb4:	0086a2db 009e2af5 02609520 00902ca4     .....*.. .`..,..
10024ec4:	0248efca 000596d6 00846a76 00291d28     ..H.....vj..(.).
10024ed4:	03981e32 0026697b 004bbfe6 00aa2b8f     2...{i&...K..+..
10024ee4:	0314832c 01170d2b 019bffec 01646d9f     ,...+........md.
10024ef4:	00b49bfa 01c34720 01914625 00f55f9f     .... G..%F..._..
10024f04:	0165e545 00f01c88 0019e04f 01796e4e     E.e.....O...Nny.
10024f14:	007ca8f7 00f780bb 0318b55d 006cdc67     ..|.....]...g.l.
10024f24:	0083d337 01d50c63 03919797 009f05ed     7...c...........
10024f34:	00089b61 00516c21 00670301 01226d3e     a...!lQ...g.>m".
10024f44:	02eb92ef 00840b4e 010c3a46 01a308b5     ....N...F:......
10024f54:	0385894e 010baa24 0355f38c 01d7e7af     N...$.....U.....
10024f64:	03a496cb 0127d7ee 025bcfd4 01268422     ......'...[.".&.
10024f74:	027d6612 0185e323 03710375 007c0d1c     .f}.#...u.q...|.
10024f84:	014a6098 01ce9258 02dcbfa6 015812a1     .`J.X.........X.
10024f94:	029c572e 0158a307 00e822ab 01662c42     .W....X.."..B,f.
10024fa4:	0229361a 015763eb 01a97b28 002b7234     .6)..cW.({..4r+.
10024fb4:	00288675 001a869b 001764b6 0034751f     u.(......d...u4.
10024fc4:	016a2e51 0007020c 01c95045 00acf6d1     Q.j.....EP......
10024fd4:	018d300c 0058d3e0 009fe274 0082627a     .0....X.t...zb..
10024fe4:	022dcc7f 01ddff4e 03124932 01652a7e     ..-.N...2I..~*e.
10024ff4:	00ca15f0 0007e3a0 00ec3269 01c5344f     ........i2..O4..
10025004:	01d0ca67 00100fb4 01eaec2e 0109e2e1     g...............
10025014:	017be2ce 003bd659 01588770 01cbf45a     ..{.Y.;.p.X.Z...
10025024:	01260b30 00ba6c81 010f7059 01cc2e65     0.&..l..Yp..e...
10025034:	034ec552 00cb4d61 01f1b929 007cc123     R.N.aM..)...#.|.
10025044:	03179b23 00c035ce 01a37d0b 01b99ef9     #....5...}......
10025054:	00308303 016f5d15 00b24cc2 00b4654a     ..0..]o..L..Je..
10025064:	00302ff3 012b19ae 01fdad51 01c07236     ./0...+.Q...6r..
10025074:	005b3727 01b06cd7 0007380a 004ce9e0     '7[..l...8....L.
10025084:	01e7792a 0124c845 03b930b8 0115ee6e     *y..E.$..0..n...
10025094:	03193226 01a3d762 031ed456 010593a3     &2..b...V.......
100250a4:	0123067f 016edf6c 02ca62be 007d19f1     ..#.l.n..b....}.
100250b4:	025dc12c 00b108ca 0013b087 01d54770     ,.].........pG..
100250c4:	01b03bcd 001a4304 02d58f0e 01d03729     .;...C......)7..
100250d4:	02cfce4e 003b81d4 0116fbe9 01983760     N.....;.....`7..
100250e4:	030fffeb 015459c4 0085955c 0071a0ae     .....YT.\.....q.
100250f4:	03a963ea 00587497 0078433c 00a315c1     .c...tX.<Cx.....
10025104:	0073a463 0076140a 02ded49c 01d9079f     c.s...v.........
10025114:	014cf571 007b3b75 0256c2b0 00b00fd4     q.L.u;{...V.....
10025124:	0353a47d 01c61d5e 030f2f21 01867862     }.S.^...!/..bx..
10025134:	00c1ec04 017ef7f9 001ebb92 0175e632     ......~.....2.u.
10025144:	03dbd96b 01a651a2 00dafecf 01cbd1bd     k....Q..........
10025154:	02def7a3 00a523fe 01f3bc04 0047b37f     .....#........G.
10025164:	03feed25 00f0ba63 02473905 01494866     %...c....9G.fHI.
10025174:	02a91948 014f799a 02599b1b 00117e06     H....yO...Y..~..
10025184:	01214193 00fdea2f 0012331a 01c75369     .A!./....3..iS..
10025194:	00e6c4a2 00a4f871 025112e1 0184d2e4     ....q.....Q.....
100251a4:	03b406ed 01aee50a 01c0dde2 001c3111     .............1..
100251b4:	02c4d7a3 01047608 0047f032 016d8171     .....v..2.G.q.m.
100251c4:	00c47c89 01601648 01f9972c 006491dc     .|..H.`.,.....d.
100251d4:	039fc040 00e2ef77 0092b281 007dc000     @...w.........}.
100251e4:	00ea8aeb 00929db7 00e7f04c 007fb1bc     ........L.......
100251f4:	012c477d 00f3af1a 0219a95e 001de61a     }G,.....^.......
10025204:	01778b0f 01baaaa8 034cc5ab 00bc4bfb     ..w.......L..K..
10025214:	03c0c740 0148acb7 0080e148 01fa064d     @.....H.H...M...
10025224:	004341b9 00cff668 038a20bc 00f218d9     .AC.h.... ......
10025234:	02518a43 017981ec 00df1818 00c763db     C.Q...y......c..
10025244:	03144b16 007e1b12 00d73e9d 00e61d6e     .K....~..>..n...
10025254:	01ffa7b3 00befc36 02b6ccdd 01419eb2     ....6.........A.
10025264:	0196cf14 0110c729 00801405 0005769f     ....)........v..
10025274:	038f10b5 000f26db 02934017 000d1a48     .....&...@..H...
10025284:	0139e457 00807ccc 00039d51 009fdac2     W.9..|..Q.......
10025294:	0000dfaa 01200be0 0062c525 0025a4a8     ...... .%.b...%.
100252a4:	01075817 006ebaa4 00862460 00e5f2ea     .X....n.`$......
100252b4:	005959b2 004c24fc 032ec618 006f4d4b     .YY..$L.....KMo.
100252c4:	0388ea86 001d5e26 03ea48b9 01874445     ....&^...H..ED..
100252d4:	020766e6 008ce74c 001379e7 0170fef2     .f..L....y....p.
100252e4:	015e2f02 0106ef09 02998650 01a8fdd5     ./^.....P.......
100252f4:	00e07c42 004a5ff5 022c1e1c 01dc6d00     B|..._J...,..m..
10025304:	013a2fa7 01766194 01e11b0f 018fcea6     ./:..av.........
10025314:	03d6b26d 00a283b3 01e18d8f 014eda0d     m.............N.
10025324:	01219971 00cc6862 034f80c6 019bd17e     q.!.bh....O.~...
10025334:	02b9fea2 00f30e3b 0270db1f 0041d91c     ....;.....p...A.
10025344:	02740dc8 01c43c7a 02b83bdf 00c459f1     ..t.z<...;...Y..
10025354:	017572af 004bcea7 0153c4ca 0043403a     .ru...K...S.:@C.
10025364:	016f2f8a 0180f7c4 02e0e088 00cf709d     ./o..........p..
10025374:	01ff649a 006b2586 024b1068 00ce1094     .d...%k.h.K.....
10025384:	0130fe45 01df74e7 0141a0d0 006250c8     E.0..t....A..Pb.
10025394:	02b8c225 00223f93 0341f08b 018490d8     %....?"...A.....
100253a4:	034e898d 015076e1 03841b33 018b603e     ..N..vP.3...>`..
100253b4:	0027fa97 000f9bbc 029633e8 01e80f27     ..'......3..'...
100253c4:	0309e5ef 011baf88 022d2638 00d278c6     ........8&-..x..
100253d4:	03a6b16c 0004de9f 02777edc 01a06ba4     l........~w..k..
100253e4:	01f8dc51 0088aff1 03178d90 00548aa8     Q.............T.
100253f4:	01614938 000bd4da 01a20587 00d5b96b     8Ia.........k...
10025404:	036bf902 0046f227 0019c8db 000d9d19     ..k.'.F.........
10025414:	03505243 0117f9c3 020c0b8c 001d69a5     CRP..........i..
10025424:	01e41b49 01b77871 016da341 010b8fd4     I...qx..A.m.....
10025434:	01a8e79e 005a80ff 023a0e39 010a3458     ......Z.9.:.X4..
10025444:	00951491 00924832 01944c5e 0041fb18     ....2H..^L....A.
10025454:	0017c01f 01c9d4b8 01a2e97a 0048adf7     ........z.....H.
10025464:	02db57a2 0059867d 01a308fd 01d29100     .W..}.Y.........
10025474:	01558109 001bb52e 02a08867 01d1bc7d     ..U.....g...}...
10025484:	006f2321 0118dbd7 02d60bd3 00760564     !#o.........d.v.
10025494:	020dac5f 01a1d5a9 038aec26 01575d5e     _.......&...^]W.
100254a4:	005f80bd 00ce0f7d 009f96a6 019e0fe3     .._.}...........
100254b4:	03789ecd 00808d29 0385c5e8 016da7de     ..x.).........m.
100254c4:	035650ec 005e8b45 01bfc19e 01330f9b     .PV.E.^.......3.
100254d4:	0073be0e 01cf874e 011b0af8 00e97db5     ..s.N........}..
100254e4:	0178b252 00836d9c 022c0eda 01cea8f6     R.x..m....,.....
100254f4:	001c70d3 01e41170 01251059 006cdec5     .p..p...Y.%...l.
10025504:	0353cffe 01f35a08 0087fab6 006916f6     ..S..Z........i.
10025514:	036dc17c 0195d201 00aa11a8 016e6000     |.m..........`n.
10025524:	01080974 01287b32 0063bdc0 00a0e322     t...2{(...c."...
10025534:	00acf4f3 0173581a 007a74cc 00c1e6bf     .....Xs..tz.....
10025544:	010b64b4 016025d9 009c4e99 011feaeb     .d...%`..N......
10025554:	03b2b2cd 00fbc094 02465030 00ec33d2     ........0PF..3..
10025564:	02f57a2d 0008ae2b 03e925ad 00ab419d     -z..+....%...A..
10025574:	03d7457a 01025059 02606a82 008772e2     zE..YP...j`..r..
10025584:	009d9fc8 000111a3 00796b8c 0176a155     .........ky.U.v.
10025594:	00950025 00ee2f9c 01a6a609 01b5624b     %..../......Kb..
100255a4:	00194a31 002f0f42 027731ba 01403eaf     1J..B./..1w..>@.
100255b4:	03113351 01f314f0 02080d81 01f3d97f     Q3..............
100255c4:	02011ba1 00f17659 03f6c6f6 01761036     ....Yv......6.v.
100255d4:	009fe18b 018e034c 00b8ee0d 0135cf0b     ....L.........5.
100255e4:	01bac0b6 01ae20ab 01dd4cbe 00dbaaf7     ..... ...L......
100255f4:	0232ac19 00e909d8 027084fa 0090cb22     ..2.......p."...
10025604:	00a8a968 011efdcf 02262867 0058e45d     h.......g(&.].X.
10025614:	038010ce 017a37d3 00ea16de 007fc5df     .....7z.........
10025624:	03447ecb 00305cb6 01b7a77f 00fe3141     .~D..\0.....A1..
10025634:	017f3f10 01aa15fe 027fe03a 013f3015     .?......:....0?.
10025644:	02824e1a 001dc327 01b5b5fd 00766691     .N..'........fv.
10025654:	032499ec 0148d9d3 02182613 003e3e89     ..$...H..&...>>.
10025664:	00048c98 0163dce6 03d41500 00e7c993     ......c.........
10025674:	03e7e29c 014d05f6 027394f5 01515ce0     ......M...s..\Q.
10025684:	02f650dd 01597ba9 008dc749 0108141d     .P...{Y.I.......
10025694:	03468889 005c4b5c 02097be1 00d2aaff     ..F.\K\..{......
100256a4:	03253a33 010eff00 0291b7f3 00a6f1ff     3:%.............
100256b4:	00844a16 0029d879 0272c35f 01971884     .J..y.)._.r.....
100256c4:	023193dd 00e27e33 00177ce5 00b5092e     ..1.3~...|......
100256d4:	013440cd 001cfe83 00d49e97 004e4083     .@4..........@N.
100256e4:	00ab19ce 008be600 029ef8cb 008da28f     ................
100256f4:	00e2ac0b 01152a82 038fa700 0124248f     .....*.......$$.
10025704:	02a4582f 00dcaaa7 00d64762 004fd05b     /X......bG..[.O.
10025714:	026efdac 00a7f766 01282840 01f1a52a     ..n.f...@((.*...
10025724:	02e44b3a 01bdf37b 03b25cc3 01568c81     :K..{....\....V.
10025734:	0138598c 0105c693 01c94c8c 01d62aa6     .Y8......L...*..
10025744:	0300ff44 017d8005 008c01bd 01da5392     D.....}......S..
10025754:	0148eed6 00357f7a 03a574bd 01420853     ..H.z.5..t..S.B.
10025764:	02d6fe4b 009a454f 02f89840 01ca88eb     K...OE..@.......
10025774:	0299699c 0014af94 03132316 00e9797b     .i.......#..{y..
10025784:	02c6faba 008be583 03d003d6 00856ed4     .............n..
10025794:	012ca8c3 0045e79e 02c840a2 00683a5a     ..,...E..@..Z:h.
100257a4:	02bb3ab6 0088e4f8 024c86cb 00e9dd62     .:........L.b...
100257b4:	03ae5076 00447da4 0294ca90 00f8efea     vP...}D.........
100257c4:	0076b887 01115e65 02464879 00928244     ..v.e^..yHF.D...
100257d4:	01f8de7f 01767f45 0163727f 010234db     ....E.v..rc..4..
100257e4:	02a66062 017ebe3d 01a8de6b 00aee24b     b`..=.~.k...K...
100257f4:	00c7e2e6 01da753c 0114f8fb 00ccbcd6     ....<u..........
10025804:	02d7521e 01134abb 02c2a7e4 01421974     .R...J......t.B.
10025814:	0238ea40 009c16d4 025d3b97 011b1c2c     @.8......;].,...
10025824:	03a47eb9 00ef061f 0286c20c 01c0457a     .~..........zE..
10025834:	0224ada8 005b6236 02662adf 00660188     ..$.6b[..*f...f.
10025844:	00195a9d 01407aef 00e906fb 01143607     .Z...z@......6..
10025854:	02205275 00eda869 01d06dcf 00ba09e4     uR .i....m......
10025864:	02a93c87 008f5cb2 0368aaf4 017c2dea     .<...\....h..-|.
10025874:	00ba6345 00b78975 00ae743f 01362587     Ec..u...?t...%6.
10025884:	007dba0e 01af70e3 03e1b463 01f4ed29     ..}..p..c...)...
10025894:	02e2adf3 002112f7 039663ab 0132eb49     ......!..c..I.2.
100258a4:	00d71fcd 00640928 015f101a 0057d944     ....(.d..._.D.W.
100258b4:	03149708 013a6419 01cba5af 00467634     .....d:.....4vF.
100258c4:	02fe2007 01f5fef3 026b2801 01c79a89     . .......(k.....
100258d4:	03e2df5d 0026ab9c 0219b1a3 0103762c     ].....&.....,v..
100258e4:	0117de0d 0151bed1 01e87b75 0165d50d     ......Q.u{....e.
100258f4:	03c29094 0117717c 00b579af 00d15488     ....|q...y...T..
10025904:	031e068a 001c3058 030e9b21 009af018     ....X0..!.......
10025914:	016dcd8d 013e7346 027b3768 00a5f61a     ..m.Fs>.h7{.....
10025924:	034c6332 0120d68b 03434160 001c0c17     2cL... .`AC.....
10025934:	014e56ae 0060f740 004387a0 01f33742     .VN.@.`...C.B7..
10025944:	01260417 01908b1b 0017bb94 0084a412     ..&.............
10025954:	02b854f5 0168c677 0060da7d 01ea7538     .T..w.h.}.`.8u..
10025964:	02d61d0c 010a2f43 0360cc93 01210619     ....C/....`...!.
10025974:	01533361 01d0d599 0336b801 000bda18     a3S.......6.....
10025984:	02f64331 01489511 0048190c 00d64f2a     1C....H...H.*O..
10025994:	02849aa7 00c62697 0359b242 01ab2ec7     .....&..B.Y.....
100259a4:	0353630c 01fdbbd1 012a2da9 007cd18a     .cS......-*...|.
100259b4:	008da2d6 009ce60c 035ed413 00e34a10     ..........^..J..
100259c4:	01992858 010193c6 02f543cd 01da03ef     X(.......C......
100259d4:	03d58d3c 006ab760 02ebe8c3 009a565e     <...`.j.....^V..
100259e4:	02702453 00439302 037bd734 0136abe8     S$p...C.4.{...6.
100259f4:	003e8961 0127daf7 00ecdae6 007fbff7     a.>...'.........
10025a04:	005492c3 015cb0a5 02cd30be 01f1d175     ..T...\..0..u...
10025a14:	01df78ef 009f1dd5 03937fa3 005dda0c     .x............].
10025a24:	02441855 01501445 018c05bc 01fe6152     U.D.E.P.....Ra..
10025a34:	030be117 0073a227 00510709 00dbdaa5     ....'.s...Q.....
10025a44:	020016b4 01fc921c 01e1cf91 006087b4     ..............`.
10025a54:	0070a31f 01db0bb1 03bf6363 01855483     ..p.....cc...T..
10025a64:	0374da6a 002e7a6f 00201169 013fa0c2     j.t.oz..i. ...?.
10025a74:	0127de43 005cfdd8 03cd69b1 00c3c994     C.'...\..i......
10025a84:	02c10c85 00324e2a 01797141 0106d93b     ....*N2.Aqy.;...
10025a94:	01185e6d 006fac70 00600f07 007b5524     m^..p.o...`.$U{.
10025aa4:	03159647 00bc49cf 02e01e11 007f1f22     G....I......"...
10025ab4:	0173e8e7 00825355 03f549d2 01728f2e     ..s.US...I....r.
10025ac4:	00c54143 013e483b 02ad85b6 0176795c     CA..;H>.....\yv.
10025ad4:	01a70bc0 0022f5d5 005ce609 01278ea2     ......"...\...'.
10025ae4:	001b5ad6 00596162 00d34f5e 00f09d5a     .Z..baY.^O..Z...
10025af4:	017edc5f 00e2b066 0351b13b 01ad45e9     _.~.f...;.Q..E..
10025b04:	00b180cc 0033f4dc 01d1f41a 014dde49     ......3.....I.M.
10025b14:	026008a2 00d39595 01cbfe9e 008b7f36     ..`.........6...
10025b24:	030d0cd9 00f4b830 006671bb 00fd65da     ....0....qf..e..
10025b34:	02b63999 002a961f 0192c619 0038f1ed     .9....*.......8.
10025b44:	0005448c 01aca45b 003be0a1 01166d04     .D..[.....;..m..
10025b54:	032d2add 016692cf 00bb8eeb 01f5cd32     .*-...f.....2...
10025b64:	02594a09 008e4f2f 03824cde 003fa61d     .JY./O...L....?.
10025b74:	02ba913b 00cd3442 0181cfdb 0011736d     ;...B4......ms..
10025b84:	013a8f36 0178f815 001effb2 0142ecc1     6.:...x.......B.
10025b94:	0307ff00 0130c0fc 03b28c85 008ef585     ......0.........
10025ba4:	037d5a61 01b9cbb9 03174dde 006a5cbf     aZ}......M...\j.
10025bb4:	0373c60f 00f898d8 0378b2ab 003586e3     ..s.......x...5.
10025bc4:	01d94500 0100d603 0192653f 01237ddf     .E......?e...}#.
10025bd4:	03b349ea 00e2a7f8 010aafe1 003aa261     .I..........a.:.
10025be4:	01ab706a 0105ac54 01c136b0 0035fbfa     jp..T....6....5.
10025bf4:	01640ad5 006ac722 02f41f97 0157e0ab     ..d.".j.......W.
10025c04:	0317ed0d 011a55fc 0374277e 006468ab     .....U..~'t..hd.
10025c14:	013c1431 01bdd2f1 01bbd9c2 00710397     1.<...........q.
10025c24:	00ae5c97 01b23ee7 00e1b7da 01211717     .\...>........!.
10025c34:	0050b5cc 01f8b839 03460efb 018ad0d3     ..P.9.....F.....
10025c44:	00fad3fc 00a531b0 037b4c0f 01a0da24     .....1...L{.$...
10025c54:	0110875b 01727e0a 03e00545 008df9f6     [....~r.E.......
10025c64:	0301b430 015d7b59 03a20026 0134f85f     0...Y{].&..._.4.
10025c74:	008c4253 01e47f22 01078ac1 00bc6ea6     SB.."........n..
10025c84:	019b1115 01c6be9a 0153b61d 019be6ce     ..........S.....
10025c94:	003cccb9 01557d0a 031960e7 01f759fe     ..<..}U..`...Y..
10025ca4:	01affed4 0051c1e8 029c2b1c 0008450b     ......Q..+...E..
10025cb4:	033b50d6 008f0711 01e21d48 00f9d9c7     .P;.....H.......
10025cc4:	0147a1e8 00c9be95 025fafd9 01439370     ..G......._.p.C.
10025cd4:	03c78f89 0001cc7e 00f81880 0031c612     ....~.........1.
10025ce4:	00233c86 0112f676 02fe5830 01ba15e3     .<#.v...0X......
10025cf4:	017041b5 010116db 03347e15 013135bc     .Ap......~4..51.
10025d04:	017d1fc9 01fb33f0 0382831e 01328a01     ..}..3........2.
10025d14:	01b1d7d6 01ee0cdf 033895fb 01445b7b     ..........8.{[D.
10025d24:	02aa7e47 0064ff76 008f1970 01377f26     G~..v.d.p...&.7.
10025d34:	02a365e1 013d85cf 01ae4588 019176be     .e....=..E...v..
10025d44:	03db623b 01f50dd8 000a88f9 00e2fe54     ;b..........T...
10025d54:	03e8876f 00b24f0d 00c583fa 00d0c68a     o....O..........
10025d64:	028bd879 01241276 007ac11c 012d2a10     y...v.$...z..*-.
10025d74:	01ebf0d4 01a9bee6 020855eb 01b06ed5     .........U...n..
10025d84:	0213ad48 01c7c49f 00905aec 0171acc1     H........Z....q.
10025d94:	02889bc7 00dd5ae3 014a3189 01d7dda4     .....Z...1J.....
10025da4:	02e423c6 0048ad6d 03f1ddd6 00879437     .#..m.H.....7...
10025db4:	024e75c0 01cf5d8c 0095418e 01621215     .uN..]...A....b.
10025dc4:	01f42c5e 004dbf6a 0305bdd1 0137ec68     ^,..j.M.....h.7.
10025dd4:	01811f29 00ecffc1 003cd92e 01bb588a     ).........<..X..
10025de4:	03ec52e1 01974550 0110be8d 0008860d     .R..PE..........
10025df4:	02ad2d14 01d98e17 0306095e 000653e2     .-......^....S..
10025e04:	02823b62 00211e3d 01d37308 018061a2     b;..=.!..s...a..
10025e14:	0217b806 01a81c73 03307a7f 009c4050     ....s....z0.P@..
10025e24:	008bf3ab 00f623ed 02c18f7a 00927ad3     .....#..z....z..
10025e34:	01ff295f 004d8457 001fd404 004e1f11     _)..W.M.......N.
10025e44:	03978af8 00f0f461 008276ba 01ebf872     ....a....v..r...
10025e54:	01c8ad68 01477ca0 01a4245d 019241af     h....|G.]$...A..
10025e64:	02aaf1ed 00c5c6c9 03564ca8 01cc6425     .........LV.%d..
10025e74:	00233525 006113af 03fdeee1 00875150     %5#...a.....PQ..
10025e84:	02ff1bd2 006b49ea 0073cf08 00887f52     .....Ik...s.R...
10025e94:	028a47d1 016df62c 009e34c1 00b0bb85     .G..,.m..4......
10025ea4:	029afc53 01ddbd58 00fc49a9 007d3a94     S...X....I...:}.
10025eb4:	02334424 01b14529 02156341 008813ce     $D3.)E..Ac......
10025ec4:	0065a464 014dd050 03edcf83 010f030e     d.e.P.M.........
10025ed4:	006ea620 01555f9c 016fb924 01236a96      .n.._U.$.o..j#.
10025ee4:	00a59cc7 00a39997 01940dd9 005971c5     .............qY.
10025ef4:	02a11c95 001e17ce 03e38469 015ee635     ........i...5.^.
10025f04:	03ccad84 019db75b 004c9793 01875772     ....[.....L.rW..
10025f14:	0040c29e 011f7a0c 026507e7 006277ac     ..@..z....e..wb.
10025f24:	02dc479a 013539be 03a0e8a7 016320df     .G...95...... c.
10025f34:	02fc9058 005a2165 0003619f 019bdab5     X...e!Z..a......
10025f44:	007772ef 0135d66a 0173bea4 01e15b98     .rw.j.5...s..[..
10025f54:	032c6a57 00713dcf 005fa0bb 0093ef4c     Wj,..=q..._.L...
10025f64:	0075a1cf 0102a633 020a7533 01e33848     ..u.3...3u..H8..
10025f74:	00e1c197 01885e84 00d1bf64 01e56b20     .....^..d... k..
10025f84:	007c3484 019c1bbf 01ec366d 01a61e0e     .4|.....m6......
10025f94:	01cf7f26 001cc7e5 02bce4bc 00eb9d63     &...........c...
10025fa4:	01b7daf6 01c1166b 01b42bb3 0076d264     ....k....+..d.v.
10025fb4:	03994372 011a5816 015c9a58 018c78dc     rC...X..X.\..x..
10025fc4:	03cf728f 01fa73fb 0048ce21 017f858a     .r...s..!.H.....
10025fd4:	0194961a 004853f8 01a9e9cb 00386b8e     .....SH......k8.
10025fe4:	0126f9f7 0150f22d 0067e91d 00465260     ..&.-.P...g.`RF.
10025ff4:	006fc917 011e2751 017cb208 00614b57     ..o.Q'....|.WKa.
10026004:	025ce50f 018343ef 02e37b75 01687891     ..\..C..u{...xh.
10026014:	01ffd590 0146bb81 003677da 00ad1301     ......F..w6.....
10026024:	034eb78e 0121eac1 028ce343 0074ced7     ..N...!.C.....t.
10026034:	03eb1b46 004f9067 025de6a4 009c87d5     F...g.O...].....
10026044:	02f2bb9a 018314bb 03fd8bf1 01626f0e     .............ob.
10026054:	02a3416b 01be4f9a 02c1ae48 013028f5     kA...O..H....(0.
10026064:	020b586a 015561c9 0312ccfc 0042f270     jX...aU.....p.B.
10026074:	00ae6d11 00f1709f 01956e05 00daa524     .m...p...n..$...
10026084:	01131da6 00492eb2 02202b5d 00edbdf7     ......I.]+ .....
10026094:	008d9b66 01c35dc9 02c2a05b 00ba12cf     f....]..[.......
100260a4:	003c1551 01a768bc 0261a67b 008e85d1     Q.<..h..{.a.....
100260b4:	0289f238 00826f28 013a976f 018dd56f     8...(o..o.:.o...
100260c4:	02d10853 01e80f8a 02ad36ab 0084f731     S........6..1...
100260d4:	00d5bdd6 0069b890 00f8fedf 01f093ff     ......i.........
100260e4:	0048bc16 00363307 03f1acb7 01c40625     ..H..36.....%...
100260f4:	037b07b8 00f60b2d 017769f5 01a1020f     ..{.-....iw.....
10026104:	032dce07 014aca11 01737c52 009d8dd4     ..-...J.R|s.....
10026114:	02b419a9 0100b4db 0014a052 01f3bda3     ........R.......
10026124:	03c2d139 003c4956 0031186a 00dcf9f5     9...VI<.j.1.....
10026134:	00a7ad16 01c30b76 036fec0e 00651427     ....v.....o.'.e.
10026144:	0231acac 014a3632 03b8b9fa 01e09b5c     ..1.26J.....\...
10026154:	01e0f9b3 0092b2e6 02363948 00b83eb1     ........H96..>..
10026164:	00ed7e13 01259f6e 002f523a 0056bbb4     .~..n.%.:R/...V.
10026174:	01d094bc 01852564 00c17006 019cbc81     ....d%...p......
10026184:	03816a53 00cae184 0048cd64 01fdefb9     Sj......d.H.....
10026194:	00da0f3c 013843c4 01ab20e9 00e4db2e     <....C8.. ......
100261a4:	03ea6cd0 01e83f13 01c735a4 0105e485     .l...?...5......
100261b4:	03dced2a 002539f5 038e118e 001a3e9c     *....9%......>..
100261c4:	025fee2b 0106d902 01f019d4 01aedc27     +._.........'...
100261d4:	0230cd99 01c00d12 006bcd34 018cee4a     ..0.....4.k.J...
100261e4:	02db9c95 01b2acee 02dfbdfa 01d38e1f     ................
100261f4:	018a0fd9 0050c4f1 0262241c 00c7ea15     ......P..$b.....
10026204:	023622f4 009b108b 0205b5f0 003cc19a     ."6...........<.
10026214:	030480a6 01389123 00dbf095 00913378     ....#.8.....x3..
10026224:	012a9952 0092ec8c 02de67c3 003b45cc     R.*......g...E;.
10026234:	01291635 00c230da 00f2d250 00cfbcd2     5.)..0..P.......
10026244:	02a1a1bb 000111d7 0071e188 003fb8fa     ..........q...?.
10026254:	01f85c6b 00030abd 00f2883f 001827d3     k\......?....'..
10026264:	01a1ca13 01ba1bad 02efccd1 01a2d128     ............(...
10026274:	039ffeb5 003474ab 02621edf 00a2a84c     .....t4...b.L...
10026284:	00af353b 010ac913 00c2e08a 019ac193     ;5..............
10026294:	020cbdd3 01aec800 01718531 005ab35e     ........1.q.^.Z.
100262a4:	019b1d3d 01dcabcb 008b4e5b 01b52191     =.......[N...!..
100262b4:	018d18a8 00b39637 03503c8b 006127d9     ....7....<P..'a.
100262c4:	036b9302 0048f83b 0087b6ad 0071b15e     ..k.;.H.....^.q.
100262d4:	03d7592b 016afc87 0253867a 0142f504     +Y....j.z.S...B.
100262e4:	01273151 00e002dc 00b18161 00593b4d     Q1'.....a...M;Y.
100262f4:	012fe69a 01b65306 02a2690f 0151d488     ../..S...i....Q.
10026304:	0186b8b3 01a4de27 01fb69dc 007d70ef     ....'....i...p}.
10026314:	0061073f 01e3683f 012bc66a 00574a39     ?.a.?h..j.+.9JW.
10026324:	0351cb7e 00c38780 00b11f8c 00c28bdd     ~.Q.............
10026334:	00d7de03 00e74483 02b256b1 00b4977b     .....D...V..{...
10026344:	000c3a94 01e03c5a 00fcd453 00a8d74f     .:..Z<..S...O...
10026354:	01c7ddf8 00017973 0078ac24 01bba220     ....sy..$.x. ...
10026364:	03316b38 00152a92 01267cb8 0011a346     8k1..*...|&.F...
10026374:	01b5fbf9 00e3372a 002ca1e2 006eec17     ....*7....,...n.
10026384:	018e9533 00ec055d 026ab7da 004d1842     3...].....j.B.M.
10026394:	01f6b0fe 00e3b1e3 02a36a22 004f2baf     ........"j...+O.
100263a4:	014e5f6a 017af1b9 003d0eb8 00ca0124     j_N...z...=.$...
100263b4:	03a2b20d 00840bf6 03d1f515 009979dd     .............y..
100263c4:	001e39a5 003c7d53 01522646 00bc06e5     .9..S}<.F&R.....
100263d4:	039dde6d 013f7636 00ba97cc 019521e3     m...6v?......!..
100263e4:	015ce6a1 01b90141 01a532d3 0140928d     ..\.A....2....@.
100263f4:	00daf29d 007da415 017a8bd5 00574743     ......}...z.CGW.
10026404:	01b29ecb 002b5c97 034e2457 0099ec60     .....\+.W$N.`...
10026414:	0378bb88 01ab8670 02d9d512 01d15ed7     ..x.p........^..
10026424:	003d05fb 00ca035e 03b71a03 012bbf3f     ..=.^.......?.+.
10026434:	03056f85 01ef0326 03faffd8 01473faf     .o..&........?G.
10026444:	014df549 0112aefa 03e33121 01fb2ef5     I.M.....!1......
10026454:	01302399 013d9d7d 0015171e 014d8d81     .#0.}.=.......M.
10026464:	01077865 008c4cc2 0334afbc 00945110     ex...L....4..Q..
10026474:	013756e8 00ac30e1 032a2a86 002f32ed     .V7..0...**..2/.
10026484:	02b1a9c8 01a58bfa 03b9a30b 01ab28a3     .............(..
10026494:	021b9f98 015b6df2 017018dd 00e7d612     .....m[...p.....
100264a4:	02b59d6b 010093c2 00fe1296 01579314     k.............W.
100264b4:	03efc30d 0017f744 0380e5ee 007031b0     ....D........1p.
100264c4:	03fb62a8 00f84778 029108f3 0199e3f5     .b..xG..........
100264d4:	036863c2 01be8c58 027e42b0 0042b969     .ch.X....B~.i.B.
100264e4:	001fda31 009eaefc 01e64fbc 00e029ee     1........O...)..
100264f4:	0108ead4 00b50b88 00dfd29b 0144c565     ............e.D.
10026504:	018d52fe 00e989fa 01855661 00455010     .R......aV...PE.
10026514:	009f8384 00645d74 008b8d2d 019dac98     ....t]d.-.......
10026524:	03537593 005ec343 00c9842e 005898f0     .uS.C.^.......X.
10026534:	024539a4 012ae09f 0343d73a 018dc376     .9E...*.:.C.v...
10026544:	0279b423 01082fce 005b2b47 002e9947     #.y../..G+[.G...
10026554:	03701027 016188d8 0219c6db 003135b0     '.p...a......51.
10026564:	038658de 003c0f7f 03a9c0cf 01d174bf     .X....<......t..
10026574:	03c9c8bd 0096878a 03b037ea 0041323c     .........7..<2A.
10026584:	03a96c98 010155db 00e3876f 00ba1aa2     .l...U..o.......
10026594:	02b960cf 006b88f3 01d34e6a 01b7d5c8     .`....k.jN......
100265a4:	027a0c06 013ccbdd 02c76e20 00756afa     ..z...<. n...ju.
100265b4:	0104e1e4 01073a78 0254c1dc 001b856f     ....x:....T.o...
100265c4:	0132994a 009761c6 03560b6e 01ae758e     J.2..a..n.V..u..
100265d4:	00c8d472 00b7ca05 020aa4ed 003eefb8     r.............>.
100265e4:	021278ec 01637b61 0266c55c 01cde4fc     .x..a{c.\.f.....
100265f4:	01c93b02 002e622a 032325db 0026c3a8     .;..*b...%#...&.
10026604:	01c17c5e 00df2b9c 0285485f 00bfce77     ^|...+.._H..w...
10026614:	02c2c9a8 00d6ea2d 033185bf 0077a962     ....-.....1.b.w.
10026624:	0123bbbe 012d1573 004883f8 017b0670     ..#.s.-...H.p.{.
10026634:	02b531d5 0022e9a5 03efc57a 014fbbb0     .1....".z.....O.
10026644:	01022efd 00bea7fa 00138154 01a671cb     ........T....q..
10026654:	02bd1ff8 01ca9d47 034947cf 004818ce     ....G....GI...H.
10026664:	01610042 01261e24 035d0172 01e7675f     B.a.$.&.r.]._g..
10026674:	013b9ec4 00f0a4c0 0339caca 0030ae17     ..;.......9...0.
10026684:	019b4d59 00d74c2a 0112100a 014c51d2     YM..*L.......QL.
10026694:	03c0d057 016bf37d 03788ded 01ea79c6     W...}.k...x..y..
100266a4:	033b0c88 017bdc23 023cb393 001d0cef     ..;.#.{...<.....
100266b4:	00e997f4 00513017 02347fef 012582e2     .....0Q...4...%.
100266c4:	015d74f7 0076847c 01c0fead 0153eb06     .t].|.v.......S.
100266d4:	01e7af6d 00b61cfb 03373409 008c5910     m........47..Y..
100266e4:	003b22af 0177a554 03eae2df 01a64806     .";.T.w......H..
100266f4:	01ff737a 00f6d612 014707fa 00b9dcd9     zs........G.....
10026704:	025df981 0080b853 003eb54c 00ba80af     ..].S...L.>.....
10026714:	02883564 00e21d6c 013ae9dd 004a6314     d5..l.....:..cJ.
10026724:	00a01600 00150d86 034c23c1 00af7d25     .........#L.%}..
10026734:	00d261bd 012cee72 02a9bc28 009aba2c     .a..r.,.(...,...
10026744:	00165c51 00c1a084 0362d079 012c510c     Q\......y.b..Q,.
10026754:	026e1f7a 012df1ed 01efd998 012fa861     z.n...-.....a./.
10026764:	011055f8 013eaf1c 0036fe38 007ee7de     .U....>.8.6...~.
10026774:	02752da6 0160bd11 00529ccb 01153a47     .-u...`...R.G:..
10026784:	02bf72cf 00932631 00c3d89a 00121965     .r..1&......e...
10026794:	03d7fa3c 01eb84e8 018eaf66 005c0e10     <.......f.....\.
100267a4:	00324ce4 005ef4c8 017898c6 01452244     .L2...^...x.D"E.
100267b4:	02a0410b 005a1364 0378c5a7 01b93643     .A..d.Z...x.C6..
100267c4:	00bcda28 0030a871 031f0447 0171f41b     (...q.0.G.....q.
100267d4:	000b3a49 01f6dc3e 02c89a78 01b2d28f     I:..>...x.......
100267e4:	0181397d 010efa2b 011c6f64 01f1562f     }9..+...do../V..
100267f4:	01bd6945 0120521a 01a45db8 01edf0e4     Ei...R ..]......
10026804:	0035b641 015cc5ab 01e9096a 019078c7     A.5...\.j....x..
10026814:	030a314d 0169aa6c 0396463d 01054934     M1..l.i.=F..4I..
10026824:	009e1a1d 00561ad1 004aed8a 00bc5fa4     ......V...J.._..
10026834:	021d3c8e 01f874a1 00a0afba 00101297     .<...t..........
10026844:	02a743d6 01d001c2 03dd1183 005ad932     .C..........2.Z.
10026854:	0332eb43 008fd2de 018235b3 00c66ae9     C.2......5...j..
10026864:	03dcadd9 0118e56f 02416fd1 012786ca     ....o....oA...'.
10026874:	03316c57 01471a82 02d71bdc 015d6967     Wl1...G.....gi].
10026884:	021fec1e 01d30086 016e7f8e 00e549d4     ..........n..I..
10026894:	025d9a9c 01f6cb46 0385422f 01e68802     ..].F.../B......
100268a4:	0271dd16 00d56fea 025f78aa 0002ddfa     ..q..o...x_.....
100268b4:	029e822d 01d95e68 01c02a17 01a39f92     -...h^...*......
100268c4:	006fe8b6 0115e54d 008f3546 00224c1b     ..o.M...F5...L".
100268d4:	032f88f6 01b627da 01c9e05b 010e8e13     ../..'..[.......
100268e4:	02b434f2 012d44d4 001c2667 004c9ef4     .4...D-.g&....L.
100268f4:	0360c8a1 010d35ce 009443ba 00f836aa     ..`..5...C...6..
10026904:	03b2a277 000b1452 03f1b645 00f576a2     w...R...E....v..
10026914:	016a6d09 01f7b5aa 03ee2f4d 01b0d253     .mj.....M/..S...
10026924:	008b6bd4 000b2627 00961548 00458248     .k..'&..H...H.E.
10026934:	01dacfaa 01459a4a 0331f689 0064209a     ....J.E...1.. d.
10026944:	03694a7d 013d5559 03b1e522 01c17d3d     }Ji.YU=."...=}..
10026954:	01bc5698 00d47849 029b4dcd 0015858d     .V..Ix...M......
10026964:	02ac6f47 013b2ae1 01d700b2 00f18021     Go...*;.....!...
10026974:	010dfcea 00084fb8 03491e6e 00bd8df5     .....O..n.I.....
10026984:	02f67bbe 0126d186 012c3a96 01d6455c     .{....&..:,.\E..
10026994:	03580c0d 01a699fb 0370cffc 01534e3b     ..X.......p.;NS.
100269a4:	006e7ce2 01fc60b4 030168ec 0123992a     .|n..`...h..*.#.
100269b4:	00a86f4f 00a8af6e 032d6929 01cd0eda     Oo..n...)i-.....
100269c4:	028ce9a3 0076012a 00c343e9 019f52b2     ....*.v..C...R..
100269d4:	02217522 0152dca3 031b0128 01a6a425     "u!...R.(...%...
100269e4:	02a963a3 0146903c 0012a6bf 0042fa6b     .c..<.F.....k.B.
100269f4:	003241c5 0112b301 037a5777 015aeed3     .A2.....wWz...Z.
10026a04:	027c238f 00a48c18 022cd7fb 016b4684     .#|.......,..Fk.
10026a14:	0250e364 0037a95b 00312ad7 0155b472     d.P.[.7..*1.r.U.
10026a24:	008d3982 01d038c3 034682fd 01f0ad1f     .9...8....F.....
10026a34:	00c7dc1c 0173646e 00f9e583 01dfe9e4     ....nds.........
10026a44:	02d1d824 01d1b1b1 011be821 0019d5ac     $.......!.......
10026a54:	027bb03e 0118851f 003ebfe0 0099465d     >.{.......>.]F..
10026a64:	01682ab5 01e0bf16 038cc8c7 0025eaf8     .*h...........%.
10026a74:	02a52da4 007261df 03a86189 00acdee0     .-...ar..a......
10026a84:	01310da5 01ccebd2 021c04fb 0097a045     ..1.........E...
10026a94:	0234bee8 015df852 01a73b0a 009a2b18     ..4.R.]..;...+..
10026aa4:	00bebe1c 0081bc8d 03cbebe8 016d00e9     ..............m.
10026ab4:	009f4135 01e8583c 0296fd78 0183e9fb     5A..<X..x.......
10026ac4:	014dd72b 01b3afaf 0042329f 00d03079     +.M......2B.y0..
10026ad4:	03d1a93f 00c8d1ff 012cbbe0 0052a249     ?.........,.I.R.
10026ae4:	038fb009 01c14c12 01296ec6 01474d53     .....L...n).SMG.
10026af4:	023b16c7 01f2fd69 03cf0c14 00bd42ec     ..;.i........B..
10026b04:	01cac65a 007face1 00ca1635 0084e638     Z.......5...8...
10026b14:	002b33f3 0141628e 0016913e 005d6a46     .3+..bA.>...Fj].
10026b24:	016b8ae8 013db36e 01da81d2 005cd1f2     ..k.n.=.......\.
10026b34:	01d95a23 016a8fb6 00b75601 002abe6d     #Z....j..V..m.*.
10026b44:	01ae44f3 009ae46d 017ab1c8 01b7a023     .D..m.....z.#...
10026b54:	035530b0 01a9da59 004e98f7 006efeca     .0U.Y.....N...n.
10026b64:	03d96561 01ddfa71 0006ccac 00a3963c     ae..q.......<...
10026b74:	032cac49 01506eee 02994cec 00f98ca0     I.,..nP..L......
10026b84:	00e5e895 01281f85 000df999 0104b2e6     ......(.........
10026b94:	00ee29dc 0179e376 028c575d 005c77fd     .)..v.y.]W...w\.
10026ba4:	02f6ef49 00805774 0391d313 00fc2eb0     I...tW..........
10026bb4:	0077a49b 00d63371 0202e481 00f3223f     ..w.q3......?"..
10026bc4:	03f4e36b 01c86aad 01469953 00102332     k....j..S.F.2#..
10026bd4:	02d84afa 0142bdeb 01f65be5 01f78045     .J....B..[..E...
10026be4:	01364dc9 01090b08 00a66098 01add6d9     .M6......`......
10026bf4:	0102c085 0000cf00 016baebd 0064868c     ..........k...d.
10026c04:	03b870fc 008bdfb7 0277b128 015a7bb5     .p......(.w..{Z.
10026c14:	00b0a5af 00c24df7 0078ea1b 01d600e7     .....M....x.....
10026c24:	001e273a 0191637d 01f3c18b 00ab66b6     :'..}c.......f..
10026c34:	00339aeb 017b058e 0159a83b 015c0ed9     ..3...{.;.Y...\.
10026c44:	0105d612 00fea7d3 02ca062c 01ec1277     ........,...w...
10026c54:	01444483 00f8de8d 03d27b99 01987f6d     .DD......{..m...
10026c64:	01d621e4 00c5dd87 00026189 01cc8f0c     .!.......a......
10026c74:	00bc2950 01824f73 01e0706d 00e6a161     P)..sO..mp..a...
10026c84:	032663fe 00c59f39 00db4297 018f453b     .c&.9....B..;E..
10026c94:	00f970b8 012f8877 0084827a 015f47a8     .p..w./.z....G_.
10026ca4:	0084034b 01bbaf98 030a8d7b 01b3c07d     K.......{...}...
10026cb4:	00c6670a 002d0695 01bb55db 01b212e6     .g....-..U......
10026cc4:	0098b647 01b8c603 0128b071 00adb9e8     G.......q.(.....
10026cd4:	01755dcf 016c9d44 02930565 00216130     .]u.D.l.e...0a!.
10026ce4:	026f4159 01a31ef6 01ddd97b 00d8fa66     YAo.....{...f...
10026cf4:	01ee1fc4 0010f04d 0119f2d5 00a84726     ....M.......&G..
10026d04:	025dbacd 018cd330 03b400da 00a57685     ..].0........v..
10026d14:	038693a0 0123ba6d 024baec6 00123738     ....m.#...K.87..
10026d24:	01ec05e3 00add5e5 01da6dc9 00efe931     .........m..1...
10026d34:	019e371e 006ab219 01bc6f9b 008c7e5e     .7....j..o..^~..
10026d44:	002af3c6 007792f3 01a3eb86 0187f104     ..*...w.........
10026d54:	02c12ec0 014fb466 02b804e0 008276f1     ....f.O......v..
10026d64:	01b08792 001e6fea 02300df4 000e9476     .....o....0.v...
10026d74:	03561c72 0119ed4a 0210e590 01356480     r.V.J........d5.
10026d84:	02789685 00329da7 03684817 000e31df     ..x...2..Hh..1..
10026d94:	02d54245 007b6028 032a5e79 01c3bfb1     EB..(`{.y^*.....
10026da4:	002a822d 01085475 02d631e8 006d7aed     -.*.uT...1...zm.
10026db4:	01594706 007bd3ec 03167bec 0197b996     .GY...{..{......
10026dc4:	01b850a9 0014b686 01656429 00102199     .P......)de..!..
10026dd4:	016f9a4c 01eace56 02a4a0bf 015d7ba4     L.o.V........{].
10026de4:	02182fcf 00202422 03b7ba98 0014ca44     ./.."$ .....D...
10026df4:	00c385c3 00f733de 015eaba9 01a000b7     .....3....^.....
10026e04:	0112cd3f 010f539c 02a4d801 01af1142     ?....S......B...
10026e14:	033b0ba8 013d299d 030ebc48 018906c2     ..;..)=.H.......
10026e24:	031d9315 01036713 03e382f5 00802879     .....g......y(..
10026e34:	02f93ac5 016e59fa 02580a31 00d82b32     .:...Yn.1.X.2+..
10026e44:	01c6f262 007197f5 01c2ecab 01c71fc5     b.....q.........
10026e54:	012651e4 00143b29 013f0c9c 00c6b791     .Q&.);....?.....
10026e64:	03737868 00f7fb81 03a7d411 01847b3d     hxs.........={..
10026e74:	00bd64f6 0098df9b 0021c58f 012c3b9b     .d........!..;,.
10026e84:	00e668ea 010e5d98 0292f2f5 01f0a9d5     .h...]..........
10026e94:	026c66ef 00eca79f 00bcda9a 01cae996     .fl.............
10026ea4:	01fa131a 01854702 01f05d96 0157037f     .....G...]....W.
10026eb4:	01cf475e 010155a7 037498bb 00171709     ^G...U....t.....
10026ec4:	015dc389 00616236 03a800f0 007fbc93     ..].6ba.........
10026ed4:	02a73196 0194fec6 008306fa 0181febb     .1..............
10026ee4:	003e5254 013a17b2 000584fd 0027d5a4     TR>...:.......'.
10026ef4:	0292fc86 01513524 00976b86 00abfd4c     ....$5Q..k..L...
10026f04:	00c0845a 00361692 023642e0 01e5bae5     Z.....6..B6.....
10026f14:	00c4b626 0182fb94 026c8340 00a0017f     &.......@.l.....
10026f24:	00528688 01eea7cd 03b42d5d 00a12883     ..R.....]-...(..
10026f34:	01706ffe 00d94b36 01dde6b3 01bf5eeb     .op.6K.......^..
10026f44:	0130f316 01cb91ca 0381084f 01482325     ..0.....O...%#H.
10026f54:	01dc24d2 00591a28 02c540a8 01efde02     .$..(.Y..@......
10026f64:	02d75301 00699fb3 00c2733a 016a74ba     .S....i.:s...tj.
10026f74:	032a7627 00fd8d74 00de00fe 0032fb2b     'v*.t.......+.2.
10026f84:	01eaa936 00d04450 02f3cb94 00870790     6...PD..........
10026f94:	0000fe06 007fb9fc 03dbf7e5 00c17680     .............v..
10026fa4:	01b7aeca 0048a1a6 02936bc9 004a88ec     ......H..k....J.
10026fb4:	016ae6e9 00a86f69 011ee040 0003e501     ..j.io..@.......
10026fc4:	03d330b2 015ac8f0 0360d1a6 00dd8238     .0....Z...`.8...
10026fd4:	03c8722e 0042b83c 0218b637 0021b66d     .r..<.B.7...m.!.
10026fe4:	03e8beab 001f5e71 03af9753 01e4eec1     ....q^..S.......
10026ff4:	00d4fafd 0079edbb 0160fb43 000b1ec5     ......y.C.`.....
10027004:	00cc5fb7 008a59cd 0125dd40 011edfff     ._...Y..@.%.....
10027014:	0008dd12 00fee72f 005370ff 01d70f76     ..../....pS.v...
10027024:	022819ac 011fc1bf 039215ed 0176c1aa     ..(...........v.
10027034:	0235ea64 0070d482 00cba34a 0094e9af     d.5...p.J.......
10027044:	0033701a 0109c1c1 00f9870e 0082e396     .p3.............
10027054:	01db00cc 00cdf218 0375d0ee 0070f415     ..........u...p.
10027064:	016bc059 001bd008 030fd9b5 00e895e6     Y.k.............
10027074:	007eec8c 01c70990 02b54f0b 01cab692     ..~......O......
10027084:	03b66d12 00e1d430 0022e51a 01bc5025     .m..0.....".%P..
10027094:	02ce2d25 01e15aef 032f031c 004ce029     %-...Z..../.).L.
100270a4:	00a7f3ba 010f8420 007d3304 0018878b     .... ....3}.....
100270b4:	0259838d 00183320 035b95f3 000e34fc     ..Y. 3....[..4..
100270c4:	0243a923 01581e30 03241bb2 00b78ca4     #.C.0.X...$.....
100270d4:	0097bd3a 00001f58 00dbf0f3 0185e5ac     :...X...........
100270e4:	0032d6f5 01cf0be7 01537ebe 01aaa3b4     ..2......~S.....
100270f4:	011838f4 01d3a4b2 01ca1002 01763962     .8..........b9v.
10027104:	0042a94b 01c76542 01c7d817 011ac479     K.B.Be......y...
10027114:	02cb4f0d 0151e2ef 030a1c5d 01f0c152     .O....Q.]...R...
10027124:	0383c1cb 00560f5d 01a27ae1 01a8bbd7     ....].V..z......
10027134:	002e9d9d 00a2ab38 0165f0e8 0009167a     ....8.....e.z...
10027144:	03150933 01ee1934 02e81ed8 0094a97c     3...4.......|...
10027154:	009d28c7 00d1c133 00b1f200 00f7b966     .(..3.......f...
10027164:	00746d9e 005b8726 0095afdf 010142dc     .mt.&.[......B..
10027174:	00e83c55 01256019 0066e80d 00250994     U<...`%...f...%.
10027184:	018d61a5 002983e4 03f30fde 001112fd     .a....).........
10027194:	01ed3c06 0071036a 00bd843b 001e705c     .<..j.q.;...\p..
100271a4:	00fa6fff 01bb3919 00a460a0 00f3102f     .o...9...`../...
100271b4:	02fb8d0c 01b8ea42 00a11228 016006af     ....B...(.....`.
100271c4:	0234ac9f 01b7b017 00d5d056 01b35430     ..4.....V...0T..
100271d4:	02e779ba 016dd81a 026bdda1 01c3ef48     .y....m...k.H...
100271e4:	03391ff9 01598794 017317b8 019da303     ..9...Y...s.....
100271f4:	0155c1b3 0189797c 03723296 013ccbdb     ..U.|y...2r...<.
10027204:	0105efce 016b2600 025eee36 005e9845     .....&k.6.^.E.^.
10027214:	014ddcd5 01451178 03144951 000ad2ce     ..M.x.E.QI......
10027224:	03966aea 015a225d 02399ffd 006385db     .j..]"Z...9...c.
10027234:	02b4938b 00b91717 031e3929 004c61bc     ........)9...aL.
10027244:	03bea455 0051eaca 02253126 007c903c     U.....Q.&1%.<.|.
10027254:	02314e89 0030f7a7 00fca45f 0087a969     .N1...0._...i...
10027264:	0086e4fd 004ba640 03dfbb2e 0125acdf     ....@.K.......%.
10027274:	015f3e21 00f090e7 027e6a4d 005b983f     !>_.....Mj~.?.[.
10027284:	009b621d 0135fbe2 0305d3e9 01decb8f     .b....5.........
10027294:	002ec4de 01ea7167 0279652d 01fa7c27     ....gq..-ey.'|..
100272a4:	02f22d86 01a8f908 03836c8b 00aba38e     .-.......l......
100272b4:	03c7ad32 018ede57 02ddb0a4 0018e704     2...W...........
100272c4:	00cd7ab3 01860124 0297467c 00fce460     .z..$...|F..`...
100272d4:	021781ac 01d15a2f 0152e095 001e8654     ..../Z....R.T...
100272e4:	009e5fc8 01a3c08e 00877506 00167c6f     ._.......u..o|..
100272f4:	02410cec 01412643 00feaee2 0026f5f4     ..A.C&A.......&.
10027304:	03d032f0 00fa3fa0 0170a294 00c56e41     .2...?....p.An..
10027314:	00a925f1 01833842 0253c909 01bbfd84     .%..B8....S.....
10027324:	022d70b0 0000fbc3 0397fac4 01d6e8ed     .p-.............
10027334:	00efd13c 0013237a 02e6210e 00719f01     <...z#...!....q.
10027344:	037f146a 0060cde3 02aed289 0190d4b3     j.....`.........
10027354:	019a6258 008b5822 00cdd196 0076f01c     Xb.."X........v.
10027364:	01534c47 005b63ec 0183fa2a 01401260     GLS..c[.*...`.@.
10027374:	0023de75 01cbd671 03b87779 00241341     u.#.q...yw..A.$.
10027384:	01ba919c 0187f537 01b55699 01f63a64     ....7....V..d:..
10027394:	033cc76c 0186cc51 01e631d6 01c0e58c     l.<.Q....1......
100273a4:	03fbc1dd 010f8850 00f940b9 008b5992     ....P....@...Y..
100273b4:	01873e86 0065e968 001a54bc 0081f931     .>..h.e..T..1...
100273c4:	034bd6d0 014d82ce 00ebaf72 018902ab     ..K...M.r.......
100273d4:	03a295a0 011d2716 024b5f06 00de51be     .....'..._K..Q..
100273e4:	035a51f1 01c9316a 009dd3f3 01958cde     .QZ.j1..........
100273f4:	0238db40 015af6bc 013533eb 00ae78fd     @.8...Z..35..x..
10027404:	03a806c5 00ab75c9 00ce15a3 015a5572     .....u......rUZ.
10027414:	030a290e 006313c1 02d83741 007492a1     .)....c.A7....t.
10027424:	019d3bb2 0034db30 00d72262 01bb111c     .;..0.4.b"......
10027434:	0018a9ae 01a14f5c 01c2c8eb 00ea8f93     ....\O..........
10027444:	0107e1e5 000ea8c5 03d4ce1f 011d923f     ............?...
10027454:	01839e9d 0182a564 038117ab 0109357c     ....d.......|5..
10027464:	0112c10e 010b311a 01c9aeb4 010ec987     .....1..........
10027474:	00bb79bb 00c78662 02b3bcab 01ee0bd1     .y..b...........
10027484:	02827b41 003dea33 02177130 01785605     A{..3.=.0q...Vx.
10027494:	00f5b276 00c98157 00951364 004f62db     v...W...d....bO.
100274a4:	028f632a 0130005f 0253f9c4 014f9567     *c.._.0...S.g.O.
100274b4:	02886eea 012c8051 02242940 000ad357     .n..Q.,.@)$.W...
100274c4:	00d18df2 005572ca 00a11694 0030c367     .....rU.....g.0.
100274d4:	03ab3119 00824389 027a49b6 00821893     .1...C...Iz.....
100274e4:	009ae5d3 009e9b20 030db188 01baf347     .... .......G...
100274f4:	037d1174 01d33ad2 00df4f5c 01f5585a     t.}..:..\O..ZX..
10027504:	036fd18a 002fde45 034ff60a 00b2d9c5     ..o.E./...O.....
10027514:	003d6954 0109c2b1 015659a5 00bb5336     Ti=......YV.6S..
10027524:	037528f9 01d7036c 012c9234 00b32f3f     .(u.l...4.,.?/..
10027534:	0203d8c2 0088540d 010be1d0 01b37e4e     .....T......N~..
10027544:	007e2b3d 00239467 02a50881 0094f0f4     =+~.g.#.........
10027554:	008e333d 0086d051 0373890f 01ec77d2     =3..Q.....s..w..
10027564:	03b2a224 00bcb82c 022c1c92 00315aa8     $...,.....,..Z1.
10027574:	01f1b278 017f7b0e 01c7f106 013242bd     x....{.......B2.
10027584:	02658fc5 0187f3bc 03f8f58c 01888601     ..e.............
10027594:	013a8be5 00fea4a0 038d5572 01b6a630     ..:.....rU..0...
100275a4:	0154468f 0007b655 005d352e 01a1a609     .FT.U....5].....
100275b4:	0218187a 0057614a 019afb76 009c36ed     z...JaW.v....6..
100275c4:	03cf92ab 01f6c482 01714087 0039e897     .........@q...9.
100275d4:	0073daf0 011b3d31 02c4e5f9 01497b67     ..s.1=......g{I.
100275e4:	0260684c 0008b481 00397b68 01e5cadc     Lh`.....h{9.....
100275f4:	00d3f965 01e80e56 00d14eb5 00a4e1ef     e...V....N......
10027604:	01498140 011ba9fc 010a8427 01c1c95a     @.I.....'...Z...
10027614:	01f079fb 0029ceba 0061c62b 00b76491     .y....).+.a..d..
10027624:	0250d8cc 004196ab 03200d57 01114977     ..P...A.W. .wI..
10027634:	00e94385 00b5fe53 0170ecb7 01834030     .C..S.....p.0@..
10027644:	03f3d8f0 00e2c140 0264f1ce 01a68663     ....@.....d.c...
10027654:	011a78bc 00acb836 02ccf20c 00e64284     .x..6........B..
10027664:	011f2622 005070b8 02a53320 0037f3be     "&...pP. 3....7.
10027674:	0292493a 01cda79a 00c5caed 00510d37     :I..........7.Q.
10027684:	03667c20 00b1e427 011fb576 0186a0e7      |f.'...v.......
10027694:	00cabb76 013c8e00 03bd267f 0096c9a5     v.....<..&......
100276a4:	03986864 01cffec4 00f713ac 00ca0aee     dh..............
100276b4:	00f297ef 01273b5e 03661def 019a5c09     ....^;'...f..\..
100276c4:	03db54e4 005081a0 009dd197 002f4789     .T....P......G/.
100276d4:	0020568f 0002f2c6 018830d4 00baac5c     .V ......0..\...
100276e4:	016997e6 00e5bf60 02bf508a 0182d8ef     ..i.`....P......
100276f4:	01cc5ad0 01aedbf0 0191669d 014cb235     .Z.......f..5.L.
10027704:	01a86c33 006bde53 006d24d3 00383a76     3l..S.k..$m.v:8.
10027714:	00161d08 00c7a0ed 02062b4f 0031c4a7     ........O+....1.
10027724:	015b12fd 00794990 0127923d 0118683f     ..[..Iy.=.'.?h..
10027734:	0270a5b7 0062eb7d 0362d550 01573c7a     ..p.}.b.P.b.z<W.
10027744:	01c23d58 00440419 00338b0f 016a84a4     X=....D...3...j.
10027754:	022e7421 00c55fa7 0017d489 003a9c48     !t..._......H.:.
10027764:	02457089 019a6995 01f58c52 01ad78df     .pE..i..R....x..
10027774:	0186c60e 00ef3cce 035ceae7 0113ee20     .....<....\. ...
10027784:	018e71a4 002677b0 02a62ba0 00695bee     .q...w&..+...[i.
10027794:	009dc9ec 019ad417 02e35287 01dd3be1     .........R...;..
100277a4:	00c0955e 01347651 01d72b20 014b930e     ^...Qv4. +....K.
100277b4:	02799c58 004f120d 02b3e1b9 00975196     X.y...O......Q..
100277c4:	03ec2847 003e3f89 03f04f06 00b5b9b6     G(...?>..O......
100277d4:	001b3276 00c0e33f 013a637b 019be032     v2..?...{c:.2...
100277e4:	018bd080 013eda97 0108589b 0162b8d2     ......>..X....b.
100277f4:	037baf13 00e55365 017441dc 0104fa96     ..{.eS...At.....
10027804:	03dc8e5b 0142f721 02dfe111 014de0db     [...!.B.......M.
10027814:	017b2c0d 00af808d 00c8d4f8 01b73b96     .,{..........;..
10027824:	001d6192 00b5cc96 004725fd 00775591     .a.......%G..Uw.
10027834:	0362127d 011ffe0c 0382b1f4 00238e6b     }.b.........k.#.
10027844:	02f27dab 01220c8b 00a2a1a4 0065cdce     .}....".......e.
10027854:	012219f7 00399164 00bac89a 01f98002     ..".d.9.........
10027864:	007c1852 008f570e 01f533a8 01e7977c     R.|..W...3..|...
10027874:	01c5f0cf 00b9be7c 00f63a30 00e8e914     ....|...0:......
10027884:	00394627 01cbcc76 00a200f1 001ef4a5     'F9.v...........
10027894:	00e274c6 01996f80 01b6368b 010f7a3c     .t...o...6..<z..
100278a4:	01393a9a 00c63236 02fffe19 011740ca     .:9.62.......@..
100278b4:	036cde4e 004bf926 00327cf1 008598ef     N.l.&.K..|2.....
100278c4:	0069f1dd 00629793 0279a1d5 008931f1     ..i...b...y..1..
100278d4:	031dd398 01a78a6a 03c76bac 00c1a16c     ....j....k..l...
100278e4:	03f24859 015973cd 028efef9 015ecab0     YH...sY.......^.
100278f4:	00325950 01426907 02f925e9 001bb729     PY2..iB..%..)...
10027904:	03e677b8 01a320d8 01e4fbcf 01833e89     .w... .......>..
10027914:	0209404e 0071305d 02328a11 0016ffc0     N@..]0q...2.....
10027924:	03cae00b 0084dc08 01eb26c6 00568d66     .........&..f.V.
10027934:	01512b3c 001a1c88 020824e9 0094f2ce     <+Q......$......
10027944:	003fa2a4 01e02e33 01c512e4 00683743     ..?.3.......C7h.
10027954:	035fcd10 0042252f 013f9c37 014a5240     .._./%B.7.?.@RJ.
10027964:	024735c7 007d43ee 00dee01a 015d89df     .5G..C}.......].
10027974:	034f305f 00e2af08 03c103de 01e8a02e     _0O.............
10027984:	02695dfe 00e62a0d 01528a1a 00f42bd0     .]i..*....R..+..
10027994:	0326271b 017fd061 0389db9d 01820305     .'&.a...........
100279a4:	031ea731 012f9f3b 029d8080 00bd035d     1...;./.....]...
100279b4:	0044a603 00d7df53 01c25a96 0041a80f     ..D.S....Z....A.
100279c4:	03b69540 00d1fa04 021c3cbb 01da1930     @........<..0...
100279d4:	03cd74a8 00781276 0393749c 016d3583     .t..v.x..t...5m.
100279e4:	00ca0a0c 00a7536e 033353d0 0142abcc     ....nS...S3...B.
100279f4:	013cbb35 012d6698 00e19a76 0088f7f0     5.<..f-.v.......
10027a04:	03b2c564 01df478a 011052cb 012ace29     d....G...R..).*.
10027a14:	0368d593 010ac959 01427b4f 00ba2116     ..h.Y...O{B..!..
10027a24:	02630701 000ace1d 0005eae5 00d21e35     ..c.........5...
10027a34:	02dc088a 00a73746 03ddc09c 01f47bd7     ....F7.......{..
10027a44:	03b9dad9 01efbaba 03a0acfb 001634c2     .............4..
10027a54:	02b5ae90 017364ba 03b04ed2 00c1071a     .....ds..N......
10027a64:	0156e148 00bcbe76 0165c1fe 01acf9ab     H.V.v.....e.....
10027a74:	02b79e5d 016c025c 034c5daf 014f6348     ]...\.l..]L.HcO.
10027a84:	02814049 00412ef5 00f1ed67 003f4c5a     I@....A.g...ZL?.
10027a94:	03784a3e 006ec379 00b20477 00d2f2de     >Jx.y.n.w.......
10027aa4:	022e2182 0029289b 017092a7 016fa331     .!...()...p.1.o.
10027ab4:	027ff163 016697f5 02d0352b 00ea663a     c.....f.+5..:f..
10027ac4:	03a4af9a 0020f257 0001266f 01beb6ff     ....W. .o&......
10027ad4:	020fb072 00813ca8 00ebb079 010ecf4c     r....<..y...L...
10027ae4:	01c61902 00d5eb29 01d62455 016d5c31     ....)...U$..1\m.
10027af4:	021e18c7 00c3eca7 017c2791 0095c3ec     .........'|.....
10027b04:	00b61575 008d9fcb 004d87df 01b0e6b0     u.........M.....
10027b14:	03d7e5bd 01b52562 038a1532 0159bd18     ....b%..2.....Y.
10027b24:	02a53030 00f72d97 03b8245a 01aa5542     00...-..Z$..BU..
10027b34:	021a2325 01447c82 03239bee 00a4c935     %#...|D...#.5...
10027b44:	037516c4 00cd0f30 011de018 0090717e     ..u.0.......~q..
10027b54:	00de6caa 0005ca50 0267451b 018116cb     .l..P....Eg.....
10027b64:	023efcb3 015b01d1 03fe6e91 001ca2da     ..>...[..n......
10027b74:	01d5fcdf 0021083b 0362fa4a 01c82ae0     ....;.!.J.b..*..
10027b84:	03cdd9bf 00a710d1 015f8463 0039e62b     ........c._.+.9.
10027b94:	03cb0bfe 013fbc62 02fbc176 0036694f     ....b.?.v...Oi6.
10027ba4:	00f410ce 0030d381 00d0a06b 00d13b70     ......0.k...p;..
10027bb4:	02d84d6d 01b91521 033863f5 01138bb2     mM..!....c8.....
10027bc4:	03321db8 00135953 01bdb5d5 017045b7     ..2.SY.......Ep.
10027bd4:	03a5abcf 01b46d2e 00a5537a 0134a292     .....m..zS....4.
10027be4:	03040b99 015ae396 02618991 0129e93c     ......Z...a.<.).
10027bf4:	03b15f95 01c60097 0371fe94 01a35ae0     ._........q..Z..
10027c04:	00f7d97c 00e01112 02784280 010919bf     |........Bx.....
10027c14:	00cddd31 0046d431 03372a4b 00eca46b     1...1.F.K*7.k...
10027c24:	00fe4498 01838c0a 024f6a09 00899ef2     .D.......jO.....
10027c34:	0242b243 01c67bb0 00223e0e 012a58c5     C.B..{...>"..X*.
10027c44:	00a4ffd6 0009d102 02db34dd 01f4e0ab     .........4......
10027c54:	01ce385d 0102b3f2 01a45b1e 018a2ee6     ]8.......[......
10027c64:	00dce6bc 013d2f39 02242584 01f396b8     ....9/=..%$.....
10027c74:	0153d4e3 00b497ac 009ba9c9 00ea3cf4     ..S..........<..
10027c84:	0104eb8e 003cda43 014b71c0 01cff374     ....C.<..qK.t...
10027c94:	009d0b6f 00985bb1 0062e61c 007e5761     o....[....b.aW~.
10027ca4:	039159c6 006b4fa6 01a04df9 01e6e91d     .Y...Ok..M......
10027cb4:	02561595 00c10b3b 009bac41 019c1e51     ..V.;...A...Q...
10027cc4:	0221484f 016de711 02156b8d 01841a7c     OH!...m..k..|...
10027cd4:	033b10af 003ac995 00c9a9ce 00e279d0     ..;...:......y..
10027ce4:	00dcb9ce 012ceb8d 0215ac9f 011f1a46     ......,.....F...
10027cf4:	025d400c 00c6381b 01f83eb1 00f108b6     .@]..8...>......
10027d04:	039465a6 0185514d 030eac28 015e3d95     .e..MQ..(....=^.
10027d14:	039c3937 01913c8c 03956c2c 019b91ed     79...<..,l......
10027d24:	021f55d0 00d20cbf 025d6263 00971097     .U......cb].....
10027d34:	01d7de6e 0181a9bc 006107e7 013c7031     n.........a.1p<.
10027d44:	00fbe5d8 008a6c77 027b1327 00eb3182     ....wl..'.{..1..
10027d54:	00915484 0194e682 03d2f773 0087dd30     .T......s...0...
10027d64:	0108bd3a 00092e23 03054151 01b99e33     :...#...QA..3...
10027d74:	032e747c 010d8c49 02ac5cd1 00471792     |t..I....\....G.
10027d84:	00bb4a19 0136f505 01f1dbb8 01e4c212     .J....6.........
10027d94:	0066caf0 00ca7169 004feb9b 01b20915     ..f.iq....O.....
10027da4:	00ef019b 003d94c8 02fde0c6 01b46c72     ......=.....rl..
10027db4:	02303a90 0118b1da 013cff9b 00f2939a     .:0.......<.....
10027dc4:	005786fd 00e54b35 03dec330 0132af1e     ..W.5K..0.....2.
10027dd4:	009c0a2e 01a58902 00e70473 0001d7f2     ........s.......
10027de4:	031d2313 004fa12a 01f6953b 00b042fb     .#..*.O.;....B..
10027df4:	030321c8 018e6e4f 0378d289 01de23cf     .!..On....x..#..
10027e04:	01b3f811 01650a02 03f8c29c 0165cc9d     ......e.......e.
10027e14:	03c5fe67 00043e4e 0165acb2 01fb9260     g...N>....e.`...
10027e24:	0111a1c3 014238e4 02912f7a 00a40483     .....8B.z/......
10027e34:	00acae43 0072fd19 01576157 0054dcfa     C.....r.WaW...T.
10027e44:	03c85b60 003b7d24 019b5a68 01205616     `[..$};.hZ...V .
10027e54:	0041d5d9 007f5d6f 03a95d3c 00b67f07     ..A.o]..<]......
10027e64:	020eba11 01f689fc 023019d4 0100ee4b     ..........0.K...
10027e74:	00764113 01f134a1 0306acec 01ffbfaf     .Av..4..........
10027e84:	02824100 00e6bede 03e7fd65 006d2391     .A......e....#m.
10027e94:	014d1dfa 00130031 03465cf8 008be062     ..M.1....\F.b...
10027ea4:	01ff09b8 00d0a407 01c683cd 00c7d657     ............W...
10027eb4:	005fd682 00de95dd 02ab2617 00d56ec4     .._......&...n..
10027ec4:	0093bbf4 0199331d 021874e3 00cf651d     .....3...t...e..
10027ed4:	0396f613 0005e785 01e2867d 0062414d     ........}...MAb.
10027ee4:	032182ec 003e6e04 028c7318 0076b1d6     ..!..n>..s....v.
10027ef4:	01423460 00ed9e75 03b6400e 01ae3f2d     `4B.u....@..-?..
10027f04:	03be5f9d 01b1cde0 038e052a 01d463ab     ._......*....c..
10027f14:	037f6c32 00167106 02531491 01e7a1c1     2l...q....S.....
10027f24:	003cb582 01b1d1d9 02d494e4 00b88302     ..<.............
10027f34:	01bbb175 011f0e1c 01ec4f48 0114e5dc     u.......HO......
10027f44:	03adca28 01ee4c62 03e016c5 01c3c66b     (...bL......k...
10027f54:	01608d23 013b9eec 00576469 0002e26e     #.`...;.idW.n...
10027f64:	005066b0 01975432 03361f7c 01859d14     .fP.2T..|.6.....
10027f74:	018bb312 001ae8e0 03aa7522 01abfca6     ........"u......
10027f84:	02ce8d48 0023fa80 00deead0 01775d9a     H.....#......]w.
10027f94:	03a47049 01025b42 03219114 0189d665     Ip..B[....!.e...
10027fa4:	0267e6ae 00a6f6a2 0274f75d 011ce0a6     ..g.....].t.....
10027fb4:	0279c418 00b69d51 01be105a 00c5930c     ..y.Q...Z.......
10027fc4:	0398ef5f 0047eb0a 03779256 00d686ab     _.....G.V.w.....
10027fd4:	00c4833c 0081e1a1 013902c9 0054ceab     <.........9...T.
10027fe4:	0311e47b 0077781a 01930b77 01e12fb4     {....xw.w..../..
10027ff4:	02b9c867 007202a4 00d44e4d 01b19a2d     g.....r.MN..-...
10028004:	0278820c 0033c85e 03d2e769 01940939     ..x.^.3.i...9...
10028014:	03dda82a 008eed7b 0232d3c6 0067f52d     *...{.....2.-.g.
10028024:	0054f8a4 01d04698 019dc86d 01674cae     ..T..F..m....Lg.
10028034:	0222a9ac 01ab01d7 00113371 00c2e488     ..".....q3......
10028044:	0238966e 009ff669 034fb813 01f04d95     n.8.i.....O..M..
10028054:	00b175b4 00b94f46 00204af3 00cf9c95     .u..FO...J .....
10028064:	01a1c4c5 00ef35f5 02f65d0f 0131f08a     .....5...]....1.
10028074:	032458c3 007b26a1 00a2509b 01a93500     .X$..&{..P...5..
10028084:	0056971c 00105e44 026e075c 01957561     ..V.D^..\.n.au..
10028094:	03e64df8 008c0afc 025c7cd6 00eb7622     .M.......|\."v..
100280a4:	0235dcf2 0055dc2d 03f79571 0167b360     ..5.-.U.q...`.g.
100280b4:	000b7fbd 00b6d187 0181345f 01ce90aa     ........_4......
100280c4:	03ccc879 009264a7 01393046 00a63516     y....d..F09..5..
100280d4:	033d90b8 00c2ffb2 023df8d6 00f66e3a     ..=.......=.:n..
100280e4:	02511579 00e403a5 031a406a 0186e844     y.Q.....j@..D...
100280f4:	02959029 00283c45 03b1347a 0165d3f5     )...E<(.z4....e.
10028104:	0008edad 00783307 00ad1f13 019cef7e     .....3x.....~...
10028114:	00cbbd8e 015880c4 0134d643 0064d0d2     ......X.C.4...d.
10028124:	005eaa51 00352891 02e76fe0 01f41c22     Q.^..(5..o.."...
10028134:	02c3c7e1 00e611ed 02a4d9d9 00dd9da8     ................
10028144:	03e285d6 01ad7d1d 00326cc8 013b647b     .....}...l2.{d;.
10028154:	0103a3fd 01b594dd 023988d5 0189b4dd     ..........9.....
10028164:	033658ce 01fb211b 01a22ec7 01a3cfc7     .X6..!..........
10028174:	01a2736b 01bb600e 004c3c75 00989fb8     ks...`..u<L.....
10028184:	0247e7d1 01baa429 023399b9 01b6abdc     ..G.).....3.....
10028194:	033dbe47 009d58ba 00170be7 00a475ed     G.=..X.......u..
100281a4:	03dfa8e1 01747299 01f298a2 00aa2018     .....rt...... ..
100281b4:	0271627d 004c13a7 00ad8ea2 00c12feb     }bq...L....../..
100281c4:	01108b07 0140a45f 00a6dd0f 0010c5db     ...._.@.........
100281d4:	032c1d84 01754563 0258eb3b 00ad5127     ..,.cEu.;.X.'Q..
100281e4:	02dc9cfe 0005349a 03a16f13 01fc5a46     .....4...o..FZ..
100281f4:	00f06eac 0179c60a 03f0fffc 00d27b41     .n....y.....A{..
10028204:	02d7c2dd 0111a378 0019469e 00cd57a5     ....x....F...W..
10028214:	00ea8a37 00611eee 00cf9b71 007f9962     7.....a.q...b...
10028224:	02db6b22 01ac7274 02ffb44b 01b339f1     "k..tr..K....9..
10028234:	006307ce 00b631be 01850973 018a1ae8     ..c..1..s.......
10028244:	008444d4 017a772c 003362b2 006a5a95     .D..,wz..b3..Zj.
10028254:	03e63247 01769909 02ac22ca 0131a237     G2....v.."..7.1.
10028264:	03ff0352 01bddd70 02e419bb 0159580f     R...p........XY.
10028274:	02c61c46 01951115 03fe79f2 0163ca6a     F........y..j.c.
10028284:	01e73e68 01b3eae3 02d4bd21 00f9bbf3     h>......!.......
10028294:	01500dbe 00015982 00ad85df 01c6de09     ..P..Y..........
100282a4:	004a7f41 015dd8a7 010ecdf6 00992fdc     A.J...]....../..
100282b4:	0127896b 01c23161 02c53394 010b3ab9     k.'.a1...3...:..
100282c4:	01e82b6a 010e06c8 024185b4 01abe4dc     j+........A.....
100282d4:	01c6a888 00009142 012e6644 009a5aac     ....B...Df...Z..
100282e4:	034b80d8 0033289f 011b119e 0031f07c     ..K..(3.....|.1.
100282f4:	03b0caec 01c07c96 00616ced 002c3e39     .....|...la.9>,.
10028304:	010fb875 0074f12d 03dc0198 00bca59c     u...-.t.........
10028314:	01830ffa 017d2c3c 03fbdc40 00b8324a     ....<,}.@...J2..
10028324:	00bec113 003db65f 037c93a3 0133a5fe     ...._.=...|...3.
10028334:	0211281b 004e60d6 02da9156 01ca241e     .(...`N.V....$..
10028344:	00050955 01c8296f 03805a35 01c250e6     U...o)..5Z...P..
10028354:	017f8187 01bb1215 03a13a2c 00229346     ........,:..F.".
10028364:	020bf9ae 001d8d22 03b144ef 003a6e72     ...."....D..rn:.
10028374:	035720ad 00b523fe 01a1df77 015edfc8     . W..#..w.....^.
10028384:	03ba0645 015543bf 0098a931 017b1a90     E....CU.1.....{.
10028394:	02b3f337 00884413 01b1beee 01a6f557     7....D......W...
100283a4:	03f731bd 01b85391 03270eac 0068d791     .1...S....'...h.
100283b4:	0078df8e 019bc895 0191cfd3 00d9b510     ..x.............
100283c4:	02bc8c14 0105d0fc 018773c7 01e5ac2b     .........s..+...
100283d4:	00bb689b 00a7fb97 00178734 00489997     .h......4.....H.
100283e4:	026bc593 01059e93 02f62700 00e74a1d     ..k......'...J..
100283f4:	011d6c87 000073b3 01747675 01fc0684     .l...s..uvt.....
10028404:	01a18190 008d4369 03e22552 01e4e2ed     ....iC..R%......
10028414:	00ce8fee 0189997e 02c59857 00a74406     ....~...W....D..
10028424:	03a59ffc 01364eee 03373f17 005ede25     .....N6..?7.%.^.
10028434:	030cb7ed 00d2cccd 0281d6cc 01647ba1     .............{d.
10028444:	00ea79b8 00e76c2d 03380842 00808883     .y..-l..B.8.....
10028454:	0242e0ac 00bc9dae 02e2dfe6 0045dbf1     ..B...........E.
10028464:	039c619b 01db3416 00901695 01a5952c     .a...4......,...
10028474:	00b77f27 01e94dc4 03d28175 01e687a9     '....M..u.......
10028484:	00c677d5 0023f0e9 01770eb8 0038a252     .w....#...w.R.8.
10028494:	00147b72 015567a2 0263ef30 00d7879b     r{...gU.0.c.....
100284a4:	02a7ff6f 00d6c426 014f2690 007da8f9     o...&....&O...}.
100284b4:	030734ea 01306674 039acc14 01b188b2     .4..tf0.........
100284c4:	01030216 01598295 019f11fb 001a3c46     ......Y.....F<..
100284d4:	00116b90 013cbeb4 00ae4e54 01ac9065     .k....<.TN..e...
100284e4:	01ed8897 0088c2bf 017d5071 008d0498     ........qP}.....
100284f4:	0335969b 00f574c3 024972ef 01115212     ..5..t...rI..R..
10028504:	033bb638 0136476d 038112c5 0157e094     8.;.mG6.......W.
10028514:	039815de 01b61689 00cd9cf9 01d02dec     .............-..
10028524:	01f2944e 00d14665 03ea7d7c 00bf3427     N...eF..|}..'4..
10028534:	039ed22a 00a5849a 012a05b2 01285c40     *.........*.@\(.
10028544:	034d5523 0076e4b1 02604289 0042e272     #UM...v..B`.r.B.
10028554:	0318289c 0051d265 03e4c7ab 00292299     .(..e.Q......").
10028564:	004bafe3 00c3ef15 015fe58a 0031c04c     ..K......._.L.1.
10028574:	01577b75 0082e1e3 0245f06e 00506f96     u{W.....n.E..oP.
10028584:	03ecaea7 016b6ce2 0341f2bb 00ff51b6     .....lk...A..Q..
10028594:	03b5ce39 01b5222e 019ef0d4 005f4b47     9...."......GK_.
100285a4:	033f3e6a 00abc601 020d24fe 00ceba90     j>?......$......
100285b4:	03f4ff94 00a60022 01db961e 00d4e45c     ....".......\...
100285c4:	023cc65c 01c8853d 0307a693 00dfd014     \.<.=...........
100285d4:	00f2b69c 00b9799b 02ae9c53 01761099     .....y..S.....v.
100285e4:	01e853b9 01793adf 0058171c 017f7d23     .S...:y...X.#}..
100285f4:	003b29c9 016dee7d 01eea3b3 00527a8c     .);.}.m......zR.
10028604:	03581609 012f9dc4 00395e98 00b61e58     ..X.../..^9.X...
10028614:	0055a154 007c92b2 029505aa 01820ca3     T.U...|.........
10028624:	001dc49a 008860a1 011d2307 00fb25a2     .....`...#...%..
10028634:	03f22e03 00bcd8ff 01e2ae39 0002e9ce     ........9.......
10028644:	008790d6 01a63797 005beb25 009a2e15     .....7..%.[.....
10028654:	0396fedf 01b49922 011db07c 011e622b     ...."...|...+b..
10028664:	03e67ad7 000ca0e8 0288bb26 0109bd7a     .z......&...z...
10028674:	037f75c8 00cc24b9 00d819e7 00694e50     .u...$......PNi.
10028684:	03818613 0044cb93 027d518d 01c8a5f7     ......D..Q}.....
10028694:	020cb939 010771ef 02100904 006c5b19     9....q.......[l.
100286a4:	00cbc66d 00289308 03e48681 0128ba7b     m.....(.....{.(.
100286b4:	02846271 001784a5 019c495a 00bbaccb     qb......ZI......
100286c4:	032f9750 01e7895d 033bbf23 01b5d1e0     P./.]...#.;.....
100286d4:	02d5d749 01b37605 01c13698 00e70032     I....v...6..2...
100286e4:	002c4550 01eef209 003b35b7 01668184     PE,......5;...f.
100286f4:	02f32033 01c8df92 02b3537a 01c99086     3 ......zS......
10028704:	0138258c 01e33c97 01489d68 019ae38c     .%8..<..h.H.....
10028714:	0210e2b5 015ce15f 02aa1472 004efa05     ...._.\.r.....N.
10028724:	03ad4bf8 01065934 0076b3ff 0001ad48     .K..4Y....v.H...
10028734:	0195781c 0033f867 021c453c 00c4b318     .x..g.3.<E......
10028744:	02da077c 00516b39 039ce9b8 00244afb     |...9kQ......J$.
10028754:	0043bc76 01355f8d 01ce082d 00df85ae     v.C.._5.-.......
10028764:	03853eb9 00620bd5 00d01fc5 01f4a7ab     .>....b.........
10028774:	01b5e715 00b9da96 0161a9f7 01f78ba5     ..........a.....
10028784:	02a55ecb 00353d2d 03733bce 01faec2e     .^..-=5..;s.....
10028794:	01200549 01ee9a81 00e22069 013dbb79     I. .....i ..y.=.
100287a4:	02f1a602 01acaa42 02e61e97 00fd3f26     ....B.......&?..
100287b4:	03fa2d24 00ef01fa 015cd4a0 00edd12d     $-........\.-...
100287c4:	025721f3 01c954ec 029d12d3 017f63d3     .!W..T.......c..
100287d4:	03b2d80a 00fcc916 00f36efd 00397dc8     .........n...}9.
100287e4:	0360c06d 00ee7333 03f37926 002138c8     m.`.3s..&y...8!.
100287f4:	008276c2 0119604b 021062d9 00efac8a     .v..K`...b......
10028804:	0382c9a8 01a9c18e 01c197ed 002968d7     .............h).
10028814:	02a53def 00f20301 02b1cb16 0016ccb0     .=..............
10028824:	024da8fd 0017b334 01f07918 01602eff     ..M.4....y....`.
10028834:	02873c6a 01f9cd61 0377f93e 01d33b77     j<..a...>.w.w;..
10028844:	0237b471 00ed555a 02d58195 01290b1e     q.7.ZU........).
10028854:	02799eff 0172199f 00c850a1 000b979d     ..y...r..P......
10028864:	014e869a 00fc36d8 00856730 00c5dc69     ..N..6..0g..i...
10028874:	014dd482 00314938 0096c656 00a0d15d     ..M.8I1.V...]...
10028884:	03b6cd45 002b5af3 00b02414 00dd747a     E....Z+..$..zt..
10028894:	0127a733 013f01e7 01bf2f7f 004e2c22     3.'...?../..",N.
100288a4:	0134ea39 012816ff 00925ef5 0080e453     9.4...(..^..S...
100288b4:	03e04e3c 01d25fff 00ecaf98 0049159f     <N..._........I.
100288c4:	0086c50d 0122d103 00ca3b86 004e64a7     ......"..;...dN.
100288d4:	004cdf2f 003e3cb9 017ba6b2 01a10c84     /.L..<>...{.....
100288e4:	002bae3c 009045c3 02c473b4 006ae182     <.+..E...s....j.
100288f4:	0086a7ff 0170089f 03c24477 01c6c4af     ......p.wD......
10028904:	03a83075 0001a95c 0166c870 00fe184a     u0..\...p.f.J...
10028914:	002a0dde 0083325e 0070aab3 0197538c     ..*.^2....p..S..
10028924:	01547736 01ef238c 01432d98 0027afec     6wT..#...-C...'.
10028934:	03679736 01412a9d 02048d13 003f3e8d     6.g..*A......>?.
10028944:	03bbb383 019b9c4c 00a45676 0192d0aa     ....L...vV......
10028954:	039a85cf 013a9b93 02e878a1 009bd5fb     ......:..x......
10028964:	0287efb1 00cb3555 022f6195 011123d7     ....U5...a/..#..
10028974:	01460345 015a2467 00ad1a27 000d30b8     E.F.g$Z.'....0..
10028984:	03d9dba3 01010650 03ebcc96 003bae90     ....P.........;.
10028994:	0395f878 00e13754 0235d272 0077ccc6     x...T7..r.5...w.
100289a4:	014af70e 0081fb3f 01976843 00508287     ..J.?...Ch....P.
100289b4:	026caadd 005dd0e8 02f9c964 01232455     ..l...].d...U$#.
100289c4:	011e9ad0 01fbc9e3 02a7bd01 00033963     ............c9..
100289d4:	0029800d 004b64c5 0337594f 019de674     ..)..dK.OY7.t...
100289e4:	008f6018 000591d5 0178f145 015ff395     .`......E.x..._.
100289f4:	00142a71 00024883 0314359a 006d3e48     q*...H...5..H>m.
10028a04:	01150951 01042762 012d47cb 00896f4b     Q...b'...G-.Ko..
10028a14:	00e73bea 015f3020 01721fcb 01b5c41d     .;.. 0_...r.....
10028a24:	02a7f132 008e6d5c 009866b1 01cc0c29     2...\m...f..)...
10028a34:	010b2679 00910afa 00947dcf 01def4f6     y&.......}......
10028a44:	01552028 007ed570 0156f9a2 017fc647     ( U.p.~...V.G...
10028a54:	002d9068 01b50ceb 00a47033 01cafe4c     h.-.....3p..L...
10028a64:	00a20ead 0193eb3d 02b9402a 00d97de8     ....=...*@...}..
10028a74:	02a758f3 00083149 02d8dbbc 000d3e27     .X..I1......'>..
10028a84:	008d8ef3 01cee3e5 0323caab 01e1b074     ..........#.t...
10028a94:	01266e51 010ef52a 00615313 000aab31     Qn&.*....Sa.1...
10028aa4:	0042cc89 007bd67c 0176dd26 00ec7092     ..B.|.{.&.v..p..
10028ab4:	00b16272 00c75997 0070c557 00a195b9     rb...Y..W.p.....
10028ac4:	00a5602c 0114b3f8 007877df 003de819     ,`.......wx...=.
10028ad4:	0393f0d4 01387303 02ef1190 01fb11c9     .....s8.........
10028ae4:	03f512f8 00ef7562 03b304b8 0133edf5     ....bu........3.
10028af4:	009b75fe 010f5b2e 03900e56 00cce356     .u...[..V...V...
10028b04:	01531a53 00e34c9f 01d51b9f 006c9718     S.S..L........l.
10028b14:	02b39075 0052d188 0389ef12 01a670a5     u.....R......p..
10028b24:	0321bc50 018efab8 00adbb35 00c970d0     P.!.....5....p..
10028b34:	01e42bf6 0158b868 03c434d3 016c7532     .+..h.X..4..2ul.
10028b44:	000a9f26 00c98573 019cb6df 015dc46e     &...s.......n.].
10028b54:	00e93c38 0169a705 00a4c599 01ba2260     8<....i.....`"..
10028b64:	01258592 00be63dc 010f9e56 0129d32d     ..%..c..V...-.).
10028b74:	02640192 014c7470 016c7fd2 00300f67     ..d.ptL...l.g.0.
10028b84:	016610c1 015f3345 009d806a 00e9ab89     ..f.E3_.j.......
10028b94:	0354a701 00ab9113 02fbc5c2 01854e5e     ..T.........^N..
10028ba4:	03f3f8fb 01835de0 03c486ba 00aa99d7     .....]..........
10028bb4:	029e7614 0076018b 01907c5a 00b6a16a     .v....v.Z|..j...
10028bc4:	01ec4caf 01ac8dc8 00683aa2 0134b4e9     .L.......:h...4.
10028bd4:	030efdef 01fe71a1 028aef25 00a62e33     .....q..%...3...
10028be4:	03f70cb2 009e54fb 020ec552 0153c8ab     .....T..R.....S.
10028bf4:	012e2724 00a7cf6a 0022bd18 0090b283     $'..j.....".....
10028c04:	0004d5ce 00d2e2a1 022165de 009cba82     .........e!.....
10028c14:	033ed06f 01a05e7b 00feac1e 0138ae70     o.>.{^......p.8.
10028c24:	031b63bb 00fb8a42 01803a7d 01ae989c     .c..B...}:......
10028c34:	03693335 01bb2d60 03dfb84d 00fb1daf     53i.`-..M.......
10028c44:	0356a04f 00b22573 01d54d52 018d5452     O.V.s%..RM..RT..
10028c54:	01d465e1 01c758af 0378df80 00f30a34     .e...X....x.4...
10028c64:	00968ca6 01c8507d 03db6d0d 0101da5a     ....}P...m..Z...
10028c74:	022ffcfb 01749c6c 017f3172 01d357cc     ../.l.t.r1...W..
10028c84:	01f75ef5 016d76ac 00beb9a5 0078b583     .^...vm.......x.
10028c94:	035dfe57 0149f085 038ff51f 0167a28a     W.]...I.......g.
10028ca4:	021262b2 0070ccd8 03d9ca81 01f95519     .b....p......U..
10028cb4:	0186f50d 01a9594c 00e62df1 01ac623b     ....LY...-..;b..
10028cc4:	02844971 01319b4d 00547e9d 012baf31     qI..M.1..~T.1.+.
10028cd4:	036d01c9 0001c6c9 018e025e 002c3624     ..m.....^...$6,.
10028ce4:	039ee2eb 01d6fba9 00094db8 00f24a61     .........M..aJ..
10028cf4:	0395a3db 017623ef 0354b610 0023679c     .....#v...T..g#.
10028d04:	036dc168 009add42 0201acc9 0058a207     h.m.B.........X.
10028d14:	031d01a5 01e59b7c 01dc9a1d 005cef67     ....|.......g.\.
10028d24:	025872df 0003c7bf 0318256a 0176a1c8     .rX.....j%....v.
10028d34:	01635960 01673ae0 0293c764 00633cdd     `Yc..:g.d....<c.
10028d44:	013b19ea 001b8734 03166f23 002b545b     ..;.4...#o..[T+.
10028d54:	0157c81a 0098fd5b 004638ca 004d088e     ..W.[....8F...M.
10028d64:	01af0a50 004cc7fc 03526e16 00c20180     P.....L..nR.....
10028d74:	025b0353 00ebd8a7 0088e8e5 00813c68     S.[.........h<..
10028d84:	00eea82e 0043bf27 002fa34b 0162618f     ....'.C.K./..ab.
10028d94:	01a8d837 01fce9a8 013d800b 01910e57     7.........=.W...
10028da4:	01bedefc 00ae480f 0256a355 012c6339     .....H..U.V.9c,.
10028db4:	02bc182c 000fcd19 02d2e513 00c343f7     ,............C..
10028dc4:	021233b3 005346bc 01b39c0b 00778662     .3...FS.....b.w.
10028dd4:	006f6f9e 01499a77 028c3fc7 010d0d2c     .oo.w.I..?..,...
10028de4:	0202c099 002a4850 00b84750 0125c79a     ....PH*.PG....%.
10028df4:	0379f396 014b3325 028255c8 00fa412b     ..y.%3K..U..+A..
10028e04:	02f39339 013b2b91 00351c58 01185421     9....+;.X.5.!T..
10028e14:	02b9a02e 0006702b 0195d792 0068b01a     ....+p........h.
10028e24:	01571c44 019932ec 02fa80b2 01bfc1cd     D.W..2..........
10028e34:	02895ca5 00ef2834 005d62a4 000c6f0f     .\..4(...b]..o..
10028e44:	034c081e 01f67f83 0067f22c 010fb545     ..L.....,.g.E...
10028e54:	001ed109 0079b303 01dae8f1 0158c77b     ......y.....{.X.
10028e64:	02cc01bf 0023ada7 012df38d 016d3224     ......#...-.$2m.
10028e74:	03c2f20e 017a9fe2 02caafaf 00483945     ......z.....E9H.
10028e84:	0038df28 013aa2d0 01cad202 015182bc     (.8...:.......Q.
10028e94:	01d0655d 002d2467 0118c14c 01f11a5f     ]e..g$-.L..._...
10028ea4:	00bba2a4 008c7224 030542ca 00933824     ....$r...B..$8..
10028eb4:	0106c106 00243d7f 021e43fd 01aaec40     .....=$..C..@...
10028ec4:	02d711a0 008caf3e 00047f37 00e9704f     ....>...7...Op..
10028ed4:	0028a06d 0107538f 01f30b85 01e8557f     m.(..S.......U..
10028ee4:	01d487f9 0071b1b9 034bdc5a 0092f844     ......q.Z.K.D...
10028ef4:	00326f32 0050165c 027324f4 015264a2     2o2.\.P..$s..dR.
10028f04:	03ee1a2e 018ca9d8 03bd5e4d 01be92ff     ........M^......
10028f14:	02ba4792 017f4d69 01e99de8 01ed5787     .G..iM.......W..
10028f24:	01ec0dcf 01246d9b 03ea32a7 016c4f71     .....m$..2..qOl.
10028f34:	0373131e 0063f0b6 038f57e3 01f8d947     ..s...c..W..G...
10028f44:	015fa965 00959581 010c85ee 0023cce3     e._...........#.
10028f54:	00da64a1 0012a3b4 01096ebe 017b3f11     .d.......n...?{.
10028f64:	03b488b2 017b7ba4 0251bc8f 016cf046     .....{{...Q.F.l.
10028f74:	030b7018 0133dae2 011a73bd 00ea0866     .p....3..s..f...
10028f84:	018f5870 000ef990 02ac9ef0 00777063     pX..........cpw.
10028f94:	02998dc2 01533827 002eb078 014c352a     ....'8S.x...*5L.
10028fa4:	01f94825 010d8c38 026b4009 0134655a     %H..8....@k.Ze4.
10028fb4:	01f8b5e0 0084ff8b 001191e6 001738e9     .............8..
10028fc4:	03f10177 0197a9d4 009abf9e 005cd15b     w...........[.\.
10028fd4:	01100dad 01e24805 0095fecb 00cfb850     .....H......P...
10028fe4:	027a0964 01ab6575 0200cbfb 0036cf9f     d.z.ue........6.
10028ff4:	02096363 01bf0fb8 016d67ac 01fb0dae     cc.......gm.....
10029004:	020758b1 01443b1a 03022109 003b61f7     .X...;D..!...a;.
10029014:	01921e1a 000a93b0 0324b8a2 0189668e     ..........$..f..
10029024:	00170b9c 00622d7d 02e15deb 01a07037     ....}-b..]..7p..
10029034:	01f37445 0137f999 01112780 00f450f1     Et....7..'...P..
10029044:	01cf795f 001858bc 02fe5eb9 00c93772     _y...X...^..r7..
10029054:	00463218 00063578 0092428e 01f9e2e4     .2F.x5...B......
10029064:	01dec067 00db44ad 01154557 0149e45e     g....D..WE..^.I.
10029074:	0341424d 00e7e3c1 0357923d 01179bac     MBA.....=.W.....
10029084:	02db746f 010b26d7 0085ba82 00bbd45e     ot...&......^...
10029094:	0058aedc 01e5d3a3 003488c6 01dd5f82     ..X.......4.._..
100290a4:	02e7bc8b 0180718a 02ecab74 0114dc30     .....q..t...0...
100290b4:	03ab143a 00bc6de3 005b2f51 01affecc     :....m..Q/[.....
100290c4:	02d712dd 016c44ac 034fe4e2 00d5dd25     .....Dl...O.%...
100290d4:	0296e3a3 0012be1e 010bb3a0 015e5a0a     .............Z^.
100290e4:	0220e101 00ae10c2 0188fee3 00692787     .. ..........'i.
100290f4:	03ce4d96 00e2eed1 0284d437 007c39ee     .M......7....9|.
10029104:	035dc2aa 01f710f8 007dd9c3 01999962     ..].......}.b...
10029114:	026ab0b2 018a5d82 03243e6c 012079b1     ..j..]..l>$..y .
10029124:	0046fc77 0025f8dc 016758cc 01fbdc80     w.F...%..Xg.....
10029134:	033e9718 000a9709 03b28b4f 00caf277     ..>.....O...w...
10029144:	00d5db1a 01237d3e 036c028f 015321e5     ....>}#...l..!S.
10029154:	01d82d50 00113ee0 0107e3d9 01c6316a     P-...>......j1..
10029164:	006b383b 00ee7263 015eccdc 0001bb49     ;8k.cr....^.I...
10029174:	00229a59 01a5d94e 03f9c30d 01fde608     Y.".N...........
10029184:	03b513e8 01348e68 011b1066 00a5c8fd     ....h.4.f.......
10029194:	0304d9c3 0190bd33 02a09b7a 01368256     ....3...z...V.6.
100291a4:	033d784d 0029380d 00f587ba 0107fc1a     Mx=..8).........
100291b4:	011bcd53 00700286 00209e25 01ed5be7     S.....p.%. ..[..
100291c4:	03ccaabe 00de0797 0031c06d 0192a6c1     ........m.1.....
100291d4:	037d2919 00f5a856 0046a5d6 0106a9d4     .)}.V.....F.....
100291e4:	02c2d3da 01a45d47 036721c4 008d8e2a     ....G]...!g.*...
100291f4:	00ace183 001c69f4 0087ba0b 01cb6ab2     .....i.......j..
10029204:	005dda60 002dfd2b 000498a4 00ef768b     `.].+.-......v..
10029214:	02180160 01d399ea 03146ea7 00b0ef31     `........n..1...
10029224:	00e14431 010d5488 02283981 00384d8a     1D...T...9(..M8.
10029234:	00359654 009d5f36 02b10d90 00ba735e     T.5.6_......^s..
10029244:	03761775 01f1a6f3 00e8295f 0035fac1     u.v....._)....5.
10029254:	026fa0fe 01297a87 00436c60 011798d7     ..o..z).`lC.....
10029264:	00d4d18b 00a3bd2a 03322aca 01bd6a69     ....*....*2.ij..
10029274:	0341c6c5 0040030b 03737174 000867f7     ..A...@.tqs..g..
10029284:	03127de7 00c51c9f 0123b81e 01f949df     .}........#..I..
10029294:	022e147a 01253886 03d944be 00753ae8     z....8%..D...:u.
100292a4:	01f3dce5 000403c5 02367825 01869c03     ........%x6.....
100292b4:	02ab3d23 016488a4 000ee8d3 000aae5a     #=....d.....Z...
100292c4:	01e50d9a 0122a177 00493df4 00707dcd     ....w."..=I..}p.
100292d4:	00866889 011ef6d9 008f8eec 01669f41     .h..........A.f.
100292e4:	00bea46b 01ad75db 000cd994 01d55b3b     k....u......;[..
100292f4:	03b7510a 017ae680 0191cb71 0142b477     .Q....z.q...w.B.
10029304:	00b48a47 006a95e0 03685277 002b8ccf     G.....j.wRh...+.
10029314:	02782522 005045c7 02da7c1f 01a01b49     "%x..EP..|..I...
10029324:	03c79ab9 00fcc746 019f5168 0027c811     ....F...hQ....'.
10029334:	01c03dd3 005bee1a 03b60962 018665cc     .=....[.b....e..
10029344:	00266511 01a6c55f 0093f1ca 0191d03e     .e&._.......>...
10029354:	00fbf684 000ea902 00b8f70d 00fe078e     ................
10029364:	02d9affe 0043f31f 00e96ff2 0109232c     ......C..o..,#..
10029374:	015172e2 010c4704 00bf6925 01327507     .rQ..G..%i...u2.
10029384:	00104f50 0141443f 0317c824 00dfcd57     PO..?DA.$...W...
10029394:	0334815b 001eba14 01d2e48f 01f8eaf7     [.4.............
100293a4:	021f45e5 0187baaf 0134cded 002b4f8b     .E........4..O+.
100293b4:	036e249d 0103f14c 01fb2de1 00ce198e     .$n.L....-......
100293c4:	01d17b78 01eefe1c 037e8004 01d7de5a     x{........~.Z...
100293d4:	00bf0fa1 0049f056 029879a2 005f108b     ....V.I..y...._.
100293e4:	02c8fec3 00a29651 02912b77 014eaccb     ....Q...w+....N.
100293f4:	009fe0a5 01ed1368 03d07ef4 00d53be1     ....h....~...;..
10029404:	0251b974 00a3f12b 03d2dbd4 009ba26f     t.Q.+.......o...
10029414:	007665cf 013848a8 003405c3 01f2ac48     .ev..H8...4.H...
10029424:	039d167d 013b6091 00c5d975 00ed4898     }....`;.u....H..
10029434:	02171fdc 01e75a0d 0140d4bb 01f6653c     .....Z....@.<e..
10029444:	00561854 006db101 01205392 00c0b64b     T.V...m..S .K...
10029454:	00a4283d 00f068af 03bb2f02 008d0c31     =(...h.../..1...
10029464:	03b58bc2 0068fa86 03de5c61 01c995d8     ......h.a\......
10029474:	0376f1ca 0043974e 00e0f177 011bedb9     ..v.N.C.w.......
10029484:	015265b7 014d25eb 001386fc 007af6e8     .eR..%M.......z.
10029494:	00b36a3c 000c0bc3 01eb426d 003b717d     <j......mB..}q;.
100294a4:	03da8e67 00eff594 02c82a8a 0161254f     g........*..O%a.
100294b4:	03a7707b 01578a23 03931d81 014e57f0     {p..#.W......WN.
100294c4:	011361cb 0116d1b1 014f7fa1 000aafcc     .a........O.....
100294d4:	028a1528 00e47467 03895fc7 01a8be84     (...gt..._......
100294e4:	01eaa591 002763b7 0236dcb7 0085defe     .....c'...6.....
100294f4:	027fe3e4 01537762 01c619d3 00b3b310     ....bwS.........
10029504:	02ac4d91 010e9958 00a7bdd9 013be96b     .M..X.......k.;.
10029514:	02f32122 0170702b 0279db8f 0006ef3e     "!..+pp...y.>...
10029524:	033666e1 00f612fa 01812204 00832487     .f6......"...$..
10029534:	013b32ce 00b7610f 0387d8ab 012b9864     .2;..a......d.+.
10029544:	0344a32e 00fdaa94 000f11bb 01a5a0da     ..D.............
10029554:	01f623aa 00130d60 0075cba5 01c06bd6     .#..`.....u..k..
10029564:	01b17bf3 00680364 005bfb83 005f9126     .{..d.h...[.&._.
10029574:	0226cc22 01538cb1 03f38118 0025904b     ".&...S.....K.%.
10029584:	021a246a 01ac9075 03e5ba43 01d5a16a     j$..u...C...j...
10029594:	0361f2b2 01824cfa 012a4dd2 01464ffa     ..a..L...M*..OF.
100295a4:	0150f43e 00f66569 013a883d 00d55bee     >.P.ie..=.:..[..
100295b4:	03623b0e 004d54a6 01d1d518 0036f5eb     .;b..TM.......6.
100295c4:	03e2231e 00467e08 025e7de2 0114759b     .#...~F..}^..u..
100295d4:	0170f838 014030e6 01a65ca3 01e6d6e0     8.p..0@..\......
100295e4:	022e83fe 01c5af38 00b83eb8 00cf404c     ....8....>..L@..
100295f4:	02d0afac 00254aae 02d31b8a 00c27d93     .....J%......}..
10029604:	0051590a 0165cba8 008f7811 012b0837     .YQ...e..x..7.+.
10029614:	01f501fa 00a5626a 026a6b4a 01360434     ....jb..Jkj.4.6.
10029624:	0196b259 017b7803 015905f3 013dfa72     Y....x{...Y.r.=.
10029634:	0381302e 01d2ef15 0381ec4c 01cc4d6e     .0......L...nM..
10029644:	0361483c 01fbd9c6 00ccd729 01c99185     <Ha.....).......
10029654:	0192e638 00c664eb 015299fe 00110f4d     8....d....R.M...
10029664:	015aee39 00e6df5f 022f34ec 01a49466     9.Z._....4/.f...
10029674:	0124cf78 01b91012 004a144a 00650bbb     x.$.....J.J...e.
10029684:	02234992 0114c66b 03d24fb5 00886751     .I#.k....O..Qg..
10029694:	00b06cf6 013c1122 02724a12 014eaaa7     .l..".<..Jr...N.
100296a4:	0314ef9c 00a82994 03f927c2 01e4dffd     .....)...'......
100296b4:	00c6a5b6 0030be85 036dd07c 0155af76     ......0.|.m.v.U.
100296c4:	0179d108 01bdab30 018647c2 0133db88     ..y.0....G....3.
100296d4:	001c793a 0186b34f 038779e6 0162d1ad     :y..O....y....b.
100296e4:	00be7af2 00cda6ab 003074d4 01426c1d     .z.......t0..lB.
100296f4:	01b6dea1 0015770e 028d5bb6 00489f30     .....w...[..0.H.
10029704:	03f57623 01e3ba6f 001f893a 00a32c89     #v..o...:....,..
10029714:	023c6772 0096d507 03710aa2 004868c1     rg<.......q..hH.
10029724:	03034a97 00d757a7 0385bc9b 004981a5     .J...W........I.
10029734:	03854ff0 0151d3b1 02a348ca 00a5a8c0     .O....Q..H......
10029744:	02c7a40e 00ccff1d 037483c9 005c4fb1     ..........t..O\.
10029754:	02d5facb 01bdc15c 0222ff81 0097bcd3     ....\.....".....
10029764:	03141188 01536513 00a6ced3 0149eee5     .....eS.......I.
10029774:	015b482e 01664aa6 03002ac7 01e371c1     .H[..Jf..*...q..
10029784:	00d01741 0164d8e5 001aef17 013ee90a     A.....d.......>.
10029794:	01b20a7a 01ae241a 0270220d 00a81058     z....$..."p.X...
100297a4:	0369d025 01d7c922 02656a27 0072ef05     %.i."...'je...r.
100297b4:	02e26728 016e7ff5 003aa73e 008ef084     (g....n.>.:.....
100297c4:	01c7db77 00bea32d 002aa810 01c639a6     w...-.....*..9..
100297d4:	001a1a1b 00e7a57e 03646cfb 0179e53c     ....~....ld.<.y.
100297e4:	008a7639 0011cf4c 03589e05 019e4980     9v..L.....X..I..
100297f4:	0092595d 009236e6 00ad2d08 0001a94f     ]Y...6...-..O...
10029804:	00f7ba73 00834054 03fde043 0040bdce     s...T@..C.....@.
10029814:	035745c6 002e6adf 00d21d63 0172bc3e     .EW..j..c...>.r.
10029824:	0008ea2b 01f7afa9 03896d16 0027b6e4     +........m....'.
10029834:	025ea5c0 00d965f4 01511c9a 0136b82d     ..^..e....Q.-.6.
10029844:	03e0d456 01495fff 01eb2180 01504234     V...._I..!..4BP.
10029854:	039baefa 0025b303 025da4ea 00fdaf5c     ......%...].\...
10029864:	006058ac 01635ec4 020bee69 00f37e34     .X`..^c.i...4~..
10029874:	0365015e 0002932d 037c7cc9 00da0c8c     ^.e.-....||.....
10029884:	019da60d 01edfb30 015c690d 008dcf1a     ....0....i\.....
10029894:	020dcf18 01303214 037494b9 00e12bd2     .....20...t..+..
100298a4:	02a22225 012ad2a3 03601743 0108d6b5     %"....*.C.`.....
100298b4:	037cfa9b 01929469 00ca0db5 00a73d1c     ..|.i........=..
100298c4:	020898d9 012d82db 01ffe6c7 01574137     ......-.....7AW.
100298d4:	0261bf5c 000efb71 038975f5 0032c341     \.a.q....u..A.2.
100298e4:	02530c4b 00a48c4f 0124a509 00e36ee4     K.S.O.....$..n..
100298f4:	015a11f1 00d43419 030cdf06 0039f38a     ..Z..4........9.
10029904:	008c85a3 01190eb1 0335b892 01a1e309     ..........5.....
10029914:	03f4d877 00e94d48 018bee9d 00e9413b     w...HM......;A..
10029924:	01d8fb46 0199b829 014b70f9 01bfb7f6     F...)....pK.....
10029934:	0345bfd4 008e0fe5 03c4c301 012fab89     ..E.........../.
10029944:	016a3f3f 01d6a910 0138aece 01854958     ??j.......8.XI..
10029954:	0070cb0d 00fd9392 016d6557 0185522c     ..p.....Wem.,R..
10029964:	033596f3 01e8985d 03275d3a 01dc9357     ..5.]...:]'.W...
10029974:	010d514d 01fc2f20 02f4136f 001ae909     MQ.. /..o.......
10029984:	0206b720 00f2bf01 02359cda 01463c28      .........5.(<F.
10029994:	006feca7 017eb979 03cf8eed 00347e36     ..o.y.~.....6~4.
100299a4:	037213a0 01276b5c 01d31075 01d177b9     ..r.\k'.u....w..
100299b4:	027fdbe2 01ec6957 03176ea1 016ea623     ....Wi...n..#.n.
100299c4:	03ddec5a 0074ea41 02d081dc 01a4cc4f     Z...A.t.....O...
100299d4:	02901742 016c28d9 00a4ca7e 010321cb     B....(l.~....!..
100299e4:	00009e01 01bc6025 004a31bf 0000046d     ....%`...1J.m...
100299f4:	03c66c0c 01e81b0f 01ba47fb 00726eb0     .l.......G...nr.
10029a04:	0175038e 008e4d71 01c59c13 00fc2f5c     ..u.qM......\/..
10029a14:	0116e835 00eb1236 020aa75c 0187da5a     5...6...\...Z...
10029a24:	03ad42ca 00e2c295 0306fdc9 007966ad     .B...........fy.
10029a34:	006ebfcd 0004c235 022d2851 018f6622     ..n.5...Q(-."f..
10029a44:	03bd232e 0081d4eb 02d06002 01c7eec7     .#.......`......
10029a54:	03a4af3a 00e72b91 0334d9c2 000cdf02     :....+....4.....
10029a64:	02b2368a 00cfeb54 01e41e16 019271b1     .6..T........q..
10029a74:	02e6aa80 018199fb 002be190 0105e746     ..........+.F...
10029a84:	027e6979 0194f655 029a256d 005b03d0     yi~.U...m%....[.
10029a94:	0022cfe8 01323431 035971a5 01d82d09     ..".142..qY..-..
10029aa4:	001cad3d 00f6a56f 035b7376 003c547f     =...o...vs[..T<.
10029ab4:	00cb90a7 00f30d57 003e9131 01a510e4     ....W...1.>.....
10029ac4:	02f9dd36 005bd2b1 02e29253 00ba9244     6.....[.S...D...
10029ad4:	0268d25d 00ad190f 0026bae7 018c7abd     ].h.......&..z..
10029ae4:	0266fe9f 00410436 00b4d67d 009360b7     ..f.6.A.}....`..
10029af4:	0217752d 00f9bf83 02cbb08f 0136b787     -u............6.
10029b04:	00b1ea91 01566592 03700de8 005d6e68     .....eV...p.hn].
10029b14:	00aa48fb 01df17c0 01ca0317 00e45de1     .H...........]..
10029b24:	02c79399 0016aa6c 03f665f8 010c7cb1     ....l....e...|..
10029b34:	018f7b19 0098d121 02295ac0 017d0f52     .{..!....Z).R.}.
10029b44:	0052acd4 0090a9d7 00220d10 0164d120     ..R.......". .d.
10029b54:	01f91253 01ec11c5 00f6ae43 016f4a2b     S.......C...+Jo.
10029b64:	0356907d 005beae3 0218d5f2 01eb2c44     }.V...[.....D,..
10029b74:	0023b4db 0107f808 035c2f65 0166cdef     ..#.....e/\...f.
10029b84:	00e6bac6 01b0a031 0361766e 00eb68ec     ....1...nva..h..
10029b94:	025c3b4f 010bf944 014aac22 00447613     O;\.D...".J..vD.
10029ba4:	03a57cde 012342b3 01abe671 01c9b91f     .|...B#.q.......
10029bb4:	0346f6c1 00bb1179 03c74686 01960394     ..F.y....F......
10029bc4:	00673f74 017b6841 011336d3 00588d06     t?g.Ah{..6....X.
10029bd4:	02267ff6 012677bd 0108773c 01dba160     ..&..w&.<w..`...
10029be4:	01ddcb29 01a4f2b1 000a9ff4 0000c474     )...........t...
10029bf4:	02cd5d05 00b37f7f 03f38640 00673587     .]......@....5g.
10029c04:	00b41ba9 001831b1 00a7366f 01d73dc3     .....1..o6...=..
10029c14:	016c011e 00462a3c 03a203b9 012895c1     ..l.<*F.......(.
10029c24:	03f6ed6a 01d9a294 02142556 00c0ee8b     j.......V%......
10029c34:	00c10909 00e20161 000a261d 013f8800     ....a....&....?.
10029c44:	02d248e4 015c8625 01181bae 019545ff     .H..%.\......E..
10029c54:	0076816d 00f95dcb 0240898a 00064625     m.v..]....@.%F..
10029c64:	00de7499 007b4aa1 034f63c1 015e3b75     .t...J{..cO.u;^.
10029c74:	01d0da4e 01542468 03c1050b 013daff1     N...h$T.......=.
10029c84:	012ea9be 019393b3 028bbe70 001fac7c     ........p...|...
10029c94:	02fc4b03 000f24d6 012b0c3d 009db192     .K...$..=.+.....
10029ca4:	00bf932e 0026ff10 011f330b 01623a3c     ......&..3..<:b.
10029cb4:	014dc26e 00f45b9a 0190288c 00fb0aad     n.M..[...(......
10029cc4:	00d87bb9 00349ef9 035db434 015b09c8     .{....4.4.]...[.
10029cd4:	02a62d37 01cb9b83 006ee839 0159d334     7-......9.n.4.Y.
10029ce4:	01a200fc 00b75709 0232d1cb 004e826b     .....W....2.k.N.
10029cf4:	005ab4e4 00fa07ae 003cae1f 001eab29     ..Z.......<.)...
10029d04:	03526374 018bc175 02c6adba 00386fd9     tcR.u........o8.
10029d14:	012c887e 00f57a5e 01abbc55 00c65c93     ~.,.^z..U....\..
10029d24:	00680800 00ae5f1e 0134e6dd 01ebf7f7     ..h.._....4.....
10029d34:	0335ae88 01cc1522 03a8b8ee 015468f2     ..5."........hT.
10029d44:	03e2d886 00ed908a 019689bc 018c3850     ............P8..
10029d54:	03a7a955 01194ec1 03b411db 00c10d10     U....N..........
10029d64:	01d6e334 00c252e8 03e3300b 01b849a9     4....R...0...I..
10029d74:	02fcfbc5 0022702b 03836583 00bba847     ....+p"..e..G...
10029d84:	037d8784 01616889 03d48962 0097e08c     ..}..ha.b.......
10029d94:	00aff431 01af63c1 019a6312 013e41ff     1....c...c...A>.
10029da4:	0337d29b 0103f4f1 00950ef9 01d9589e     ..7..........X..
10029db4:	011fc8c0 00f3d675 02de4718 01e82835     ....u....G..5(..
10029dc4:	026fb74b 01570e8f 03884fd5 00d4c4d7     K.o...W..O......
10029dd4:	028c1b84 00fd0582 0286cf9d 001ce8fa     ................
10029de4:	03fb9c2e 01b838aa 00ea33ee 01838a8e     .....8...3......
10029df4:	01f3fe18 00c2c90a 004b613f 00a2efd2     ........?aK.....
10029e04:	03136c7c 004bd71b 0237de4c 003fb6e8     |l....K.L.7...?.
10029e14:	02bfab44 01de6f33 034d6909 00ebaa4f     D...3o...iM.O...
10029e24:	0358188f 0079e72c 02f7e3f1 010db0fb     ..X.,.y.........
10029e34:	021f0026 01fff4f0 020a2da9 00f9defc     &........-......
10029e44:	008472de 01062fff 01b3a3b3 01975e54     .r.../......T^..
10029e54:	01e08181 0054f63d 03db2efd 00214cee     ....=.T......L!.
10029e64:	02129431 004525e5 02168643 005e9b8d     1....%E.C.....^.
10029e74:	02d39d1f 011e2ad4 0252d159 01a934e4     .....*..Y.R..4..
10029e84:	0100ecd4 01e438d6 03977786 00c1c96f     .....8...w..o...
10029e94:	0235a053 00429705 0011a212 005b61e9     S.5...B......a[.
10029ea4:	02066215 015f9690 00983677 006862d1     .b...._.w6...bh.
10029eb4:	021e6f8f 00f994b7 002ed8eb 0194caf8     .o..............
10029ec4:	00165f38 00a3e1f2 014e0583 013578b5     8_........N..x5.
10029ed4:	033f5f74 00b975ec 03887ebf 00e9778f     t_?..u...~...w..
10029ee4:	016139b7 01bbc92f 0177a5a6 007e642d     .9a./.....w.-d~.
10029ef4:	03e8f7d6 0113ab46 0331f466 015d6753     ....F...f.1.Sg].
10029f04:	01f47943 000de052 032b4f29 01a7cef8     Cy..R...)O+.....
10029f14:	021534d6 011620bf 017983d6 004d175d     .4... ....y.].M.
10029f24:	0234cccd 0088bd50 018adbb4 005e128f     ..4.P.........^.
10029f34:	028c2bcc 00dbafbb 038f626f 01a23f96     .+......ob...?..
10029f44:	003c6fe4 01264a65 02545b15 010d1c1c     .o<.eJ&..[T.....
10029f54:	02d7e7c5 00c89af3 00ed89df 000e84d3     ................
10029f64:	03ce405f 01f73e10 024732c0 00359212     _@...>...2G...5.
10029f74:	02532d92 01ee52b1 0354850f 015dc6e1     .-S..R....T...].
10029f84:	031461c8 01237677 03e73271 019ce5a1     .a..wv#.q2......
10029f94:	005675a6 0008050e 013d1def 018557ed     .uV.......=..W..
10029fa4:	0289927c 00dfa8cb 00f5a82e 0016699a     |............i..
10029fb4:	03a1d4dc 0118456a 000c1ac0 01732772     ....jE......r's.
10029fc4:	0086d4cd 01a0d9c5 025e8173 01dbd7c6     ........s.^.....
10029fd4:	01f9df4a 01b574fd 0368d7e7 01f682e3     J....t....h.....
10029fe4:	03b5da76 01c654f0 03d37a81 0199088c     v....T...z......
10029ff4:	0076b1bd 00b25960 023010ff 01696079     ..v.`Y....0.y`i.
1002a004:	03e83674 01697e21 00a13d11 00c073dc     t6..!~i..=...s..
1002a014:	021891ec 00a9a86e 033f3ae0 00bca47e     ....n....:?.~...
1002a024:	014bea52 00869ee0 016e44d1 00d9a6d9     R.K......Dn.....
1002a034:	00a643b9 018a34e8 000c93d2 00073619     .C...4.......6..
1002a044:	02d70f2c 002dec32 018144be 00e1936a     ,...2.-..D..j...
1002a054:	022d5d1c 010f8deb 01a6e133 018fc1bb     .]-.....3.......
1002a064:	0358070f 008ccd09 019cc075 00263811     ..X.....u....8&.
1002a074:	016c7c1b 0137d7ab 00d4fd5e 01a8879b     .|l...7.^.......
1002a084:	0046e65f 0185c28c 02a49e38 01500691     _.F.....8.....P.
1002a094:	0161c4a8 0082b755 01de9e46 01eaed3b     ..a.U...F...;...
1002a0a4:	031a195f 0161afe7 0299b2e3 004a4499     _.....a......DJ.
1002a0b4:	02603de8 003b8468 01c74c21 0182b0bd     .=`.h.;.!L......
1002a0c4:	02196808 0166c64a 007001e8 0114dc6c     .h..J.f...p.l...
1002a0d4:	02f8790b 00c22357 02fcb4db 00e30849     .y..W#......I...
1002a0e4:	0149e3c3 01a16eb8 01a4e930 002f3580     ..I..n..0....5/.
1002a0f4:	03790e52 003abec0 0348042f 0155704d     R.y...:./.H.MpU.
1002a104:	014232c0 0134105d 00866907 01486d0c     .2B.].4..i...mH.
1002a114:	00fb9c39 00cc2390 0275a02c 00c26b31     9....#..,.u.1k..
1002a124:	0375ae1d 00201783 01860a28 01193316     ..u... .(....3..
1002a134:	03b00bef 0092396d 01ef8f75 0176659d     ....m9..u....ev.
1002a144:	004c5435 0112b8cd 03a543ee 00a26e6e     5TL......C..nn..
1002a154:	0228539e 00ead64b 03cdd83a 019360aa     .S(.K...:....`..
1002a164:	0172e327 00f1e3b0 01b7f946 018b5488     '.r.....F....T..
1002a174:	00d0936d 010a6706 03418a49 01645060     m....g..I.A.`Pd.
1002a184:	0321aed5 014a8631 0282976d 00ac546e     ..!.1.J.m...nT..
1002a194:	024bc754 01703bf7 02f77a3c 0175098e     T.K..;p.<z....u.
1002a1a4:	0289aeb0 008ff748 037eb9ec 01f7193d     ....H.....~.=...
1002a1b4:	0338402c 0006f4a0 01383922 0053ca69     ,@8....."98.i.S.
1002a1c4:	01b2d7f5 005fb709 02081bee 00dccda9     ......_.........
1002a1d4:	0087e5c3 01ed4c62 011a5be1 0127db52     ....bL...[..R.'.
1002a1e4:	01c7bee0 0179c8d9 0171217f 00ff01d1     ......y..!q.....
1002a1f4:	032b6aeb 00e834a6 00dde59d 00191e33     .j+..4......3...
1002a204:	011bddfa 01579341 00c47b4e 01dfc441     ....A.W.N{..A...
1002a214:	0308b33e 00ce418b 0257cfb2 012efcf9     >....A....W.....
1002a224:	016e5967 019ebdfd 039ed68f 0136f59f     gYn...........6.
1002a234:	015cb734 01c2c815 01112c4c 0044f155     4.\.....L,..U.D.
1002a244:	03f9b7ca 01d4d440 019a2108 00503b47     ....@....!..G;P.
1002a254:	033bc2af 0009488c 00f4a064 0038d0e6     ..;..H..d.....8.
1002a264:	02cebde8 0148b64f 01e0f6cf 00093c11     ....O.H......<..
1002a274:	0026cfa1 005b6d8d 03d30fd8 006e4e87     ..&..m[......Nn.
1002a284:	0368a362 01795014 024b1928 00c2c24f     b.h..Py.(.K.O...
1002a294:	02c80312 00739f9f 01f78f84 01395d6f     ......s.....o]9.
1002a2a4:	010bed39 0187de86 016ca379 01be2b7b     9.......y.l.{+..
1002a2b4:	01b7b29a 00048f7f 02523c68 010d10d5     ........h<R.....
1002a2c4:	0121ee5f 01e6949e 033e817e 01d2ff32     _.!.....~.>.2...
1002a2d4:	02ec8d3d 01e0379c 009ae7bc 00a15142     =....7......BQ..
1002a2e4:	01a0c15c 0078e3fa 00e2377b 004811b8     \.....x.{7....H.
1002a2f4:	020aa885 019c8715 03671928 003aca2f     ........(.g./.:.
1002a304:	00f42772 01fabcc0 00354ce3 01515462     r'.......L5.bTQ.
1002a314:	023dcbac 01373292 00bfebcb 00f4c534     ..=..27.....4...
1002a324:	02d32b58 0077bf1a 035195a7 00ef86bb     X+....w...Q.....
1002a334:	02bdb5eb 01bc8bd8 00523049 00e5da2e     ........I0R.....
1002a344:	00fbfdbd 010ce532 01bf8dd2 0119f480     ....2...........
1002a354:	00ef4fad 01a4669d 011452bf 0167b518     .O...f...R....g.
1002a364:	00ea09ef 01a47b01 0300e984 00f2f2c9     .....{..........
1002a374:	00f5ba3c 01c710f1 027ae7a9 01bd2f55     <.........z.U/..
1002a384:	0317b783 0196b224 00fd8932 001f4ec8     ....$...2....N..
1002a394:	00326916 00003c82 025ba384 00bbe716     .i2..<....[.....
1002a3a4:	029e74cd 015b7dbe 00cf56df 01e72579     .t...}[..V..y%..
1002a3b4:	03c609e2 01ef990e 02d9e878 0052704a     ........x...JpR.
1002a3c4:	02390c5f 0169d632 01462495 01c9c436     _.9.2.i..$F.6...
1002a3d4:	02007456 0096abea 00eaa31b 00b487ca     Vt..............
1002a3e4:	02005fd0 005d9c7a 004b3eb7 00b6eb89     ._..z.]..>K.....
1002a3f4:	0161dc94 002462c7 020cd19c 0034d409     ..a..b$.......4.
1002a404:	0237b4d9 01e8aad3 035414d7 0087fa9c     ..7.......T.....
1002a414:	027f639d 0029ce00 03ffe1cc 01d28bd5     .c....).........
1002a424:	03087301 006f0c1c 00019c34 01fb15fd     .s....o.4.......
1002a434:	021fa524 00d3820b 0235126a 009a6329     $.......j.5.)c..
1002a444:	02b0ba78 014c620c 03f17cec 01bc92e7     x....bL..|......
1002a454:	00e060c7 00291fcc 000dc8d0 0160e115     .`....).......`.
1002a464:	00c49cae 007ed0f7 023dd90e 015c0bd7     ......~...=...\.
1002a474:	0270c5c7 00c72692 0278fc24 004da96a     ..p..&..$.x.j.M.
1002a484:	039f7b01 00664bce 00c4afa3 00f0012c     .{...Kf.....,...
1002a494:	02f4b82b 0051ab01 009e7355 012d4036     +.....Q.Us..6@-.
1002a4a4:	00728a12 00cd4787 01932fe3 0042e7da     ..r..G.../....B.
1002a4b4:	001cd1fd 01ad0ff4 0297c544 01d752d1     ........D....R..
1002a4c4:	03f7f8f4 0046f87f 0057f7e1 0046785a     ......F...W.ZxF.
1002a4d4:	005cf5d5 00e2850d 0105b52f 0169a35c     ..\...../...\.i.
1002a4e4:	02760ef3 01d0960f 033216b8 01cf7055     ..v.......2.Up..
1002a4f4:	01d7714a 012b923f 0213e103 013e17e2     Jq..?.+.......>.
1002a504:	02d6ff0d 01cd082c 02851e06 013db2e7     ....,.........=.
1002a514:	031895e5 009e3111 023d64e4 01fbf373     .....1...d=.s...
1002a524:	015c4b4c 0193db51 02fea34b 00f6d58c     LK\.Q...K.......
1002a534:	035dd9d8 01bb8afd 0334be8d 01b1cb3a     ..].......4.:...
1002a544:	00345ec7 019e7273 016898a4 01e2637e     .^4.sr....h.~c..
1002a554:	01f49d75 0010c86b 029825d5 00642c60     u...k....%..`,d.
1002a564:	013225c9 0039f4d4 03b7abae 00704af8     .%2...9......Jp.
1002a574:	001e9ca6 0161ddde 02495df2 016465fa     ......a..]I..ed.
1002a584:	00e55aae 00580679 025d209c 01d3f17c     .Z..y.X.. ].|...
1002a594:	039ded0d 01159aa4 0316e0b7 019818f9     ................
1002a5a4:	001f4d70 0117abf7 0045d72b 01006160     pM......+.E.`a..
1002a5b4:	00ca2d30 01167978 01308bea 01222dc6     0-..xy....0..-".
1002a5c4:	011b32b5 015bd283 0080362d 01697baf     .2....[.-6...{i.
1002a5d4:	03ccb1ed 01918933 0072b6c1 0095eae0     ....3.....r.....
1002a5e4:	01676f0a 000481c9 004e8eee 01280634     .og.......N.4.(.
1002a5f4:	02a5d56d 00fdcf3b 024e8dc6 01eff442     m...;.....N.B...
1002a604:	026736f4 01f2264d 02f95c01 0157aefa     .6g.M&...\....W.
1002a614:	00903f8a 011b6c18 01126621 00981622     .?...l..!f.."...
1002a624:	0360ff04 01c129a0 00de8b3e 00f3b30f     ..`..)..>.......
1002a634:	030f64ff 00873551 01953989 01aaf063     .d..Q5...9..c...
1002a644:	02e4e615 0152b430 0276e542 00638f31     ....0.R.B.v.1.c.
1002a654:	0195a990 00981e76 017908b2 00129f08     ....v.....y.....
1002a664:	03e6655a 00771d80 010b2444 0037b7e8     Ze....w.D$....7.
1002a674:	002b522a 00d9f56e 003d7dc7 0034fd2e     *R+.n....}=...4.
1002a684:	00dbc58d 00c19fd3 02697937 008114b6     ........7yi.....
1002a694:	03aa77a9 018bb2ca 01152b3d 015e5498     .w......=+...T^.
1002a6a4:	02fa3cbd 01e876ee 012588d5 016b4c71     .<...v....%.qLk.
1002a6b4:	0164685c 0117ce90 019a966d 00b967e4     \hd.....m....g..
1002a6c4:	03b62874 01ca0dab 0094b240 002bcf08     t(......@.....+.
1002a6d4:	017f357a 0030a14a 0280d6e3 01f30b55     z5..J.0.....U...
1002a6e4:	01075663 018644f5 023231da 018b4d86     cV...D...12..M..
1002a6f4:	004e01b8 0194a100 03e91d60 019594ce     ..N.....`.......
1002a704:	0000a89f 01ab805b 02131c05 00f76f0a     ....[........o..
1002a714:	025ec54b 0103fe73 0261b35b 015c6178     K.^.s...[.a.xa\.
1002a724:	000e70a9 00f89515 0003e3f8 006d6050     .p..........P`m.
1002a734:	014ac04b 01e25a0c 0396bb14 0095e889     K.J..Z..........
1002a744:	03443e75 01bcd83e 0220eaea 01a0391c     u>D.>..... ..9..
1002a754:	01f10c18 00bf3ca9 038d8320 017b9fec     .....<.. .....{.
1002a764:	01446a8e 017f72d0 02ff2a71 014a1a49     .jD..r..q*..I.J.
1002a774:	0296b3f6 003c8c78 03c84693 01a128d5     ....x.<..F...(..
1002a784:	03c9bca0 0187418c 03db2566 01124d7f     .....A..f%...M..
1002a794:	01176c6e 004bc05b 0316f5ae 013eec03     nl..[.K.......>.
1002a7a4:	0199402a 00feade3 01847aed 01ba597f     *@.......z...Y..
1002a7b4:	00fc73df 00ca2f3e 02ff95b4 00ed3781     .s..>/.......7..
1002a7c4:	03ba11a5 00c2a909 03da6d9c 017b8c6f     .........m..o.{.
1002a7d4:	02df8067 016c8eb0 0280527b 00ae54fb     g.....l.{R...T..
1002a7e4:	01b1b35a 0157d6f3 03a23c66 010e82cf     Z.....W.f<......
1002a7f4:	008b820a 01db81ce 039dd95d 01e6e6ee     ........].......
1002a804:	023126c2 00d5501a 00727d76 01434646     .&1..P..v}r.FFC.
1002a814:	03498e0e 01b97a82 023214f2 0028ed81     ..I..z....2...(.
1002a824:	018c9fd2 014197c5 029f7374 005f6ba3     ......A.ts...k_.
1002a834:	0102da33 01c67dd8 0280ca8b 01445f0a     3....}......._D.
1002a844:	025d0936 010699ad 0060accb 006ea045     6.].......`.E.n.
1002a854:	00429954 005a7ec3 01ecee10 0166bb76     T.B..~Z.....v.f.
1002a864:	03851802 00e645ba 015cc538 015e45d5     .....E..8.\..E^.
1002a874:	01e58a4f 00e607ce 01230a93 00e29d56     O.........#.V...
1002a884:	028ba31f 014b0737 00745a3d 00a93cb5     ....7.K.=Zt..<..
1002a894:	02d4a28a 001fa750 03705acd 00e37020     ....P....Zp. p..
1002a8a4:	01e66fde 0177e95b 01075908 00016202     .o..[.w..Y...b..
1002a8b4:	03854a94 01b4f632 0170b1e3 016cbd3a     .J..2.....p.:.l.
1002a8c4:	02edcbc1 00c3d114 01759740 0149e0b1     ........@.u...I.
1002a8d4:	03d990ad 014fcce5 03e84d15 00ea4e71     ......O..M..qN..
1002a8e4:	027e39e0 008d3108 01a593f2 018cb668     .9~..1......h...
1002a8f4:	0007cba6 00dac56e 021afed7 00fde2a7     ....n...........
1002a904:	00608f1f 0029670b 02cb81b7 014af763     ..`..g).....c.J.
1002a914:	00847ed4 002c93d2 010c84a7 007f447b     .~....,.....{D..
1002a924:	012757e1 00086cfb 018fc1c6 01cf8779     .W'..l......y...
1002a934:	004616ab 01744432 0328af64 00e969f7     ..F.2Dt.d.(..i..
1002a944:	011beac7 00b52f94 019e5b9b 01af6936     ...../...[..6i..
1002a954:	02914e01 005f9a65 027fcf80 01ec7c33     .N..e._.....3|..
1002a964:	00475481 00d3f3dd 009767ca 01f8131e     .TG......g......
1002a974:	00cfb832 0059c6ca 02e1c537 01f95fa8     2.....Y.7...._..
1002a984:	03444141 007eeabb 0164dfa6 00f4ef70     AAD...~...d.p...
1002a994:	00cfaa98 00c76ade 025e54b7 0138c85b     .....j...T^.[.8.
1002a9a4:	0173b689 0092608e 00e48885 00961261     ..s..`......a...
1002a9b4:	0042fb37 0004668c 00c2177d 00b6273a     7.B..f..}...:'..
1002a9c4:	02182cf4 01b344ae 019a7697 0082a2b0     .,...D...v......
1002a9d4:	02cc72d9 014e7eac 031ede20 015b0223     .r...~N. ...#.[.
1002a9e4:	00a86e17 014f4444 025f466d 01905bad     .n..DDO.mF_..[..
1002a9f4:	035fce20 01072988 0299bb12 0170ff22      ._..)......".p.
1002aa04:	02b99108 00259d31 00f38f02 00d7eb09     ....1.%.........
1002aa14:	0197ab03 01f5d718 02a42fa7 00cf92f0     ........./......
1002aa24:	00b48145 0071f344 02483590 000e2dfa     E...D.q..5H..-..
1002aa34:	01316ff8 01be0866 01a9f3e9 0017553c     .o1.f.......<U..
1002aa44:	00bd274a 00ef3174 00d2d5ad 016ca12e     J'..t1........l.
1002aa54:	0025969e 01b978c4 03e593fb 0118bd61     ..%..x......a...
1002aa64:	03ce362d 00f652e9 012667b7 00cc3e6d     -6...R...g&.m>..
1002aa74:	00e0f00a 01751692 00789a8d 0023d445     ......u...x.E.#.
1002aa84:	03066222 013ec398 0347e660 004c3d65     "b....>.`.G.e=L.
1002aa94:	03ecd41a 001061a3 00923bc6 00c417a3     .....a...;......
1002aaa4:	003d1838 00c162b5 017663d0 0103ff79     8.=..b...cv.y...
1002aab4:	00c20647 01c51175 00170f7c 00994f9a     G...u...|....O..
1002aac4:	03c55ed6 019337b8 024efe3d 0099527e     .^...7..=.N.~R..
1002aad4:	026bf9d6 01569187 00b02e83 01e3bbbd     ..k...V.........
1002aae4:	008c16cf 0074d3d9 02ba5132 001ffa8a     ......t.2Q......
1002aaf4:	01c6401e 00649b87 033f666e 01a1526b     .@....d.nf?.kR..
1002ab04:	01d4bb68 00278a50 035dff3c 00ba0c47     h...P.'.<.].G...
1002ab14:	011ffbd2 0190a7be 02132ce3 00e8437f     .........,...C..
1002ab24:	0217cea0 01d3a2ba 003fbc0f 0031d0fe     ..........?...1.
1002ab34:	00bf5455 01f2c0f1 01917e98 01a2a2ea     UT.......~......
1002ab44:	01d861e5 007e8740 01599832 0015651f     .a..@.~.2.Y..e..
1002ab54:	02a41990 00d1bf8a 0079195b 00059320     ........[.y. ...
1002ab64:	037bba27 01e6733e 03c6a75c 01dcd58e     '.{.>s..\.......
1002ab74:	01df94ab 012b0034 01bd271b 00ee8840     ....4.+..'..@...
1002ab84:	00b9c4af 01d5e262 01f49f7e 003cafe2     ....b...~.....<.
1002ab94:	018ee9a0 01cff3b4 03139cb3 007a4218     .............Bz.
1002aba4:	03d9a0d6 013e2d01 02924f69 01638932     .....->.iO..2.c.
1002abb4:	03e76456 01e891ae 0301b864 007d09ad     Vd......d.....}.
1002abc4:	01911c01 00499310 0184bdf9 01c0bd11     ......I.........
1002abd4:	03c68ede 010f1447 02ed35f9 00120b0e     ....G....5......
1002abe4:	0271d31b 01386bd4 01a12552 018d7224     ..q..k8.R%..$r..
1002abf4:	038ede2f 009abaf4 02ddae05 019b723e     /...........>r..
1002ac04:	01a03786 00871f50 01b3fa7e 002ddaec     .7..P...~.....-.
1002ac14:	0392939b 00307e5f 016dc117 005ea225     ...._~0...m.%.^.
1002ac24:	02f99dc7 01bb8017 02b231cc 012aa45c     .........1..\.*.
1002ac34:	01eb772a 01edb758 00f33d92 01707a14     *w..X....=...zp.
1002ac44:	02b9f6f5 007b0466 01e663e9 01fc5bdb     ....f.{..c...[..
1002ac54:	0316dec6 01e9f5b2 00eaf1d2 01c0fa6f     ............o...
1002ac64:	0301d2c7 002afe6a 03630ae6 00e200a1     ....j.*...c.....
1002ac74:	005beddb 00cbb281 025f32d0 015fd0cd     ..[......2_..._.
1002ac84:	0259bff6 014fea6d 00885455 01323a65     ..Y.m.O.UT..e:2.
1002ac94:	029cad82 01332d76 0210e975 00d65af1     ....v-3.u....Z..
1002aca4:	01db9f5e 01ea0303 025c4c61 00e6364f     ^.......aL\.O6..
1002acb4:	03e248f3 00f459cc 014be389 0038adf8     .H...Y....K...8.
1002acc4:	02f6784a 010b0376 03c67850 01627a87     Jx..v...Px...zb.
1002acd4:	01ddf191 014ec26d 02e7e3f2 01df1834     ....m.N.....4...
1002ace4:	01763870 01018414 00ecd2aa 019ef138     p8v.........8...
1002acf4:	031373b9 00aee507 01002c30 01a67272     .s......0,..rr..
1002ad04:	0146f1cc 01a9c8d6 032fbe60 01ae672e     ..F.....`./..g..
1002ad14:	02485c62 01b4e975 02e923c0 0120e519     b\H.u....#.... .
1002ad24:	00c6fcdd 01472bcc 0274e00a 00e9d09d     .....+G...t.....
1002ad34:	037e74c1 01850bd3 018c3a15 013324cc     .t~......:...$3.
1002ad44:	002b1ee7 01b546eb 0292383f 015412a8     ..+..F..?8....T.
1002ad54:	00ac54c7 00be6686 0261ee6f 00e628e5     .T...f..o.a..(..
1002ad64:	0240cde3 00e10cc7 00de19a6 01334571     ..@.........qE3.
1002ad74:	00189f8e 004ab8a7 030d01cf 01b032c7     ......J......2..
1002ad84:	02f5d533 0061d1a7 003747bf 009c4e22     3.....a..G7."N..
1002ad94:	013a90e8 00bd4ab9 02958eba 017f453f     ..:..J......?E..
1002ada4:	0045ab2c 010b77ca 013276bb 018853ff     ,.E..w...v2..S..
1002adb4:	001a5246 0002e346 0179eb20 009a29b5     FR..F... .y..)..
1002adc4:	02e58647 0024ffc9 0393cb8e 00bf97af     G.....$.........
1002add4:	02cbe788 0089b6a2 02fb7ea1 004220e8     .........~... B.
1002ade4:	0042cf44 00251c1e 0160725d 01f75cfe     D.B...%.]r`..\..
1002adf4:	00059829 01493f9a 007cb621 0196dd79     )....?I.!.|.y...
1002ae04:	01d5cc19 0057ac29 03929d5a 0014826c     ....).W.Z...l...
1002ae14:	03c86b47 00bd66f2 0117135f 011f50a6     Gk...f.._....P..
1002ae24:	007af070 00fab3e8 02b46e44 0077aad1     p.z.....Dn....w.
1002ae34:	03a46cdf 01e94fce 02e2e51a 015162d0     .l...O.......bQ.
1002ae44:	0291c301 0075582d 00e3ce08 01fd6ebf     ....-Xu......n..
1002ae54:	0214806c 01335585 0170b188 011622d8     l....U3...p.."..
1002ae64:	03d01082 00aa9578 0007444f 0064b983     ....x...OD....d.
1002ae74:	03a21daa 016ba210 010b1538 01b5c864     ......k.8...d...
1002ae84:	01a6417e 00cc86a5 00a8a768 004fa401     ~A......h.....O.
1002ae94:	032fcedb 01621160 030c6e73 004d735f     ../.`.b.sn.._sM.
1002aea4:	03e8e35b 014ffef7 0206e55b 008bc657     [.....O.[...W...
1002aeb4:	00814bce 01ce4dfa 013b877f 01803246     .K...M....;.F2..
1002aec4:	020d7765 008706e2 03b38ea2 00de649f     ew...........d..
1002aed4:	01dbe01b 01c35d9e 00898de9 017d1810     .....]........}.
1002aee4:	017bf48d 00dc458a 01069720 0116a783     ..{..E.. .......
1002aef4:	02a744ec 0096bdc6 038aaba3 0106bc32     .D..........2...
1002af04:	02891d5e 00b3e293 03110f67 00ff61c1     ^.......g....a..
1002af14:	02a92db2 009be1c5 03753027 00736a86     .-......'0u..js.
1002af24:	00b52661 01412f96 02e58252 008126f5     a&.../A.R....&..
1002af34:	03d06ba2 01521f85 032d6596 00e1ca80     .k....R..e-.....
1002af44:	009348e0 01978a30 02ce40c2 009edaec     .H..0....@......
1002af54:	02891d6a 01e9bdfc 029aef49 007f635a     j.......I...Zc..
1002af64:	03216fa1 01f2d9ed 03c3b982 019ebfd4     .o!.............
1002af74:	00da9628 0083a984 01fc5459 018046ab     (.......YT...F..
1002af84:	0395f83c 01e49b73 020e2bec 010b8944     <...s....+..D...
1002af94:	01f1fa15 018f7a5b 00f3f9cc 013c1ad4     ....[z........<.
1002afa4:	01b0b62f 01bf1730 02cbf890 01b43200     /...0........2..
1002afb4:	01554c7b 00506ffb 03ef4263 01b6ed99     {LU..oP.cB......
1002afc4:	02857edc 0163cc49 03779340 01a73862     .~..I.c.@.w.b8..
1002afd4:	029879cb 01d54a2c 02125a3d 01e6a3f4     .y..,J..=Z......
1002afe4:	03746ab8 009f2352 0302210c 003e224f     .jt.R#...!..O">.
1002aff4:	03ae5710 005565ac 039179a2 01ce748f     .W...eU..y...t..
1002b004:	03b9e8c4 018cbeb6 03fe0c48 01f2148a     ........H.......
1002b014:	03ef5aa9 01bb4260 0287b5f4 003488dd     .Z..`B........4.
1002b024:	025124ca 01cc459f 00bbe13f 005ece3a     .$Q..E..?...:.^.
1002b034:	002f9056 00f556e5 01be913f 00270525     V./..V..?...%.'.
1002b044:	001afb6d 00ea9389 023305f5 004e2fca     m.........3../N.
1002b054:	00d86598 007d1749 012160fe 0149d2eb     .e..I.}..`!...I.
1002b064:	0158d12a 006d8107 02e4687a 00cbf2a9     *.X...m.zh......
1002b074:	017d9af5 015ba371 03be4f78 016cef85     ..}.q.[.xO....l.
1002b084:	00f82f4b 00efe4a3 000a6f11 014b9558     K/.......o..X.K.
1002b094:	00efebd6 01189fa7 0387ccdf 01e91cc9     ................
1002b0a4:	007f0640 0047909f 005f8c64 000d964e     @.....G.d._.N...
1002b0b4:	01766bfb 017d3ab6 036c2600 01d1bd8c     .kv..:}..&l.....
1002b0c4:	036c971c 00bcd16a 0263e7e9 0194ca1b     ..l.j.....c.....
1002b0d4:	038a23ad 0144186d 00b54501 0052666b     .#..m.D..E..kfR.
1002b0e4:	0007ed66 01ed245c 0384b064 017ed72a     f...\$..d...*.~.
1002b0f4:	038285b0 00944f9d 0125e043 0115ce0c     .....O..C.%.....
1002b104:	016e223d 01af68ed 036f844f 0048ae8d     ="n..h..O.o...H.
1002b114:	0153a2dd 0106ca37 0387ea86 00defa17     ..S.7...........
1002b124:	02a85e41 01d2f8f4 02c96ca6 006fa1fe     A^.......l....o.
1002b134:	00fe08cd 00740d88 02b4e554 008cb368     ......t.T...h...
1002b144:	030ff840 00108ae8 027b43f5 01d479d9     @........C{..y..
1002b154:	01da5f3e 018985d5 0352b68e 000b1c2f     >_........R./...
1002b164:	010b2fbb 01fb12d7 00595450 00803a44     ./......PTY.D:..
1002b174:	0105715e 01d0815c 02530f60 00bc1c08     ^q..\...`.S.....
1002b184:	00a409ef 0098cd3c 018d72e1 014cafd1     ....<....r....L.
1002b194:	0396b59c 0103e5b9 016f9da3 008bbde7     ..........o.....
1002b1a4:	03beca77 01406ad9 023feb43 01ac1a5f     w....j@.C.?._...
1002b1b4:	0362a3c0 003c12b7 008bb6d9 01783b6d     ..b...<.....m;x.
1002b1c4:	00fbc003 01f0d2a9 025cac24 01f5d393     ........$.\.....
1002b1d4:	003441b2 00730dfd 00c7324f 01d59697     .A4...s.O2......
1002b1e4:	01244a11 00072835 03418713 0045ac19     .J$.5(....A...E.
1002b1f4:	0055edae 00295f63 00103803 01b1a027     ..U.c_)..8..'...
1002b204:	01ceaeb9 0195bc72 00ad5aec 01c0c72b     ....r....Z..+...
1002b214:	00716c57 004c2334 03941942 010704dc     Wlq.4#L.B.......
1002b224:	0372f196 00e8d1bd 02da6ac8 015444b8     ..r......j...DT.
1002b234:	023dba5a 018d8f42 03a6f40c 00c67262     Z.=.B.......br..
1002b244:	03a36ec7 00ba12c0 01f6ef7c 0016446e     .n......|...nD..
1002b254:	01df0ebb 00e660fd 01959826 007a8962     .....`..&...b.z.
1002b264:	0303cdd6 01b398e1 00898505 018c459e     .............E..
1002b274:	039aa270 01acf3b3 012eeaef 006b3cd4     p............<k.
1002b284:	01692a69 0098e60e 00830507 019a688d     i*i..........h..
1002b294:	000603d4 01a2e483 011c64b2 01557be7     .........d...{U.
1002b2a4:	0373bd08 01dc2e8e 03e186d4 00451d7d     ..s.........}.E.
1002b2b4:	01892bbc 000946f2 03ffcc5a 0093aae6     .+...F..Z.......
1002b2c4:	02133817 019d7d37 031782fc 011480da     .8..7}..........
1002b2d4:	007681c5 000b656c 019205b2 0164073e     ..v.le......>.d.
1002b2e4:	025eecb4 00a41a1b 0370164c 004f6677     ..^.....L.p.wfO.
1002b2f4:	03dab31d 01fdb64e 01bfd425 007ceb29     ....N...%...).|.
1002b304:	001c9760 00be9487 0227f9cd 01886033     `.........'.3`..
1002b314:	03882cd3 0183d142 01e5c0ca 00d7b0c8     .,..B...........
1002b324:	03f44029 004eb8cd 013f2da7 010023a0     )@....N..-?..#..
1002b334:	038e0c3a 019009cb 01e55eda 00701b7a     :........^..z.p.
1002b344:	033ec4e2 01deb5a8 0011d321 01c5f177     ..>.....!...w...
1002b354:	019823e4 01284515 00a1e2b1 00c1b394     .#...E(.........
1002b364:	01fec2db 0133ce28 036d69aa 014ad03f     ....(.3..im.?.J.
1002b374:	01377ffa 00c6e202 00d14c2c 014d9897     ..7.....,L....M.
1002b384:	012e17d1 0145abc9 00e7d32b 01e025be     ......E.+....%..
1002b394:	01fa5ce7 00aa9943 00f19415 015245aa     .\..C........ER.
1002b3a4:	03e71278 0003725b 00e63eb8 0157c9e1     x...[r...>....W.
1002b3b4:	03a26091 00dcf2b4 02c9f57c 0118d360     .`......|...`...
1002b3c4:	00a6d652 0109249a 007f2ff7 018cdb5a     R....$.../..Z...
1002b3d4:	0226d9a0 013f93d3 01945441 000103cf     ..&...?.AT......
1002b3e4:	01ddbbad 01aa3ee2 01d97e37 01e30d75     .....>..7~..u...
1002b3f4:	00ef2cb2 019b8d9d 0053dd8f 00d0d1eb     .,........S.....
1002b404:	01a5112a 008551fb 015986d3 017a4e7f     *....Q....Y..Nz.
1002b414:	03019bdf 004a8851 03d09cb2 013119b9     ....Q.J.......1.
1002b424:	01d203dd 01be96e5 0334a254 018d5428     ........T.4.(T..
1002b434:	0169cf37 01f5bb6d 01dc2ca0 01806529     7.i.m....,..)e..
1002b444:	005e10a6 016bd65d 02004875 01ea3d4f     ..^.].k.uH..O=..
1002b454:	007daf78 00fba98b 02547b49 0096115c     x.}.....I{T.\...
1002b464:	011c1377 01d71620 03cc171b 0134f18d     w... .........4.
1002b474:	007d34e3 00cf4c1d 02faa7d7 00e6a4ae     .4}..L..........
1002b484:	0293274e 0131c4f9 026eb3a4 01bb46de     N'....1...n..F..
1002b494:	017d8e15 018ab39a 012ab075 0099ae0a     ..}.....u.*.....
1002b4a4:	00665c9c 01a10da8 002f3f27 008d7a08     .\f.....'?/..z..
1002b4b4:	02b61780 011327cb 031d7003 018c2416     .....'...p...$..
1002b4c4:	0274ead1 013f3234 0368ab78 005edb9f     ..t.42?.x.h...^.
1002b4d4:	0020107c 01b4c5fa 012ca3ca 00242057     |. .......,.W $.
1002b4e4:	031499a1 000ffc7a 0050e319 008e583c     ....z.....P.<X..
1002b4f4:	01c91611 014dcd9a 020e5257 00052ae6     ......M.WR...*..
1002b504:	027f8ba5 00264e55 02423c82 012d1eca     ....UN&..<B...-.
1002b514:	017ac42d 01a235f9 02678f87 0072d2d6     -.z..5....g...r.
1002b524:	014afc6c 01301ace 03f636cc 0124c6d2     l.J...0..6....$.
1002b534:	00322378 01cad834 02818b25 009449f1     x#2.4...%....I..
1002b544:	038de743 00cc2f29 02a007e7 012a98a8     C...)/........*.
1002b554:	00f62d6e 0187838e 03cc4782 000be223     n-.......G..#...
1002b564:	03f21c00 01d58ae0 02d82ef6 00b703f4     ................
1002b574:	0119744e 01bfe104 00e49305 00b1583a     Nt..........:X..
1002b584:	03e5a57a 01c953fb 0160a7df 019eb8b1     z....S....`.....
1002b594:	01b369f1 00f0c6f8 00948aee 01219342     .i..........B.!.
1002b5a4:	038df61e 01748dd0 001f7067 00aca158     ......t.gp..X...
1002b5b4:	02e6d753 00976f2e 0134262d 00cc2d84     S....o..-&4..-..
1002b5c4:	01cb4272 002f24fe 0373182d 00fe3e76     rB...$/.-.s.v>..
1002b5d4:	02bae1c4 00ac8d7a 0329551a 00b76fe1     ....z....U)..o..
1002b5e4:	0097e7d5 01073b04 026d808a 018675e8     .....;....m..u..
1002b5f4:	02adbef2 00f0ecf0 02ec7f52 01a1df27     ........R...'...
1002b604:	03e1b66d 00efae7a 0191f287 009ad133     m...z.......3...
1002b614:	03387475 001211e3 01678a3e 01a4e5f6     ut8.....>.g.....
1002b624:	02c976f3 019f2055 0189226c 00bad355     .v..U ..l"..U...
1002b634:	02c1c10a 00b1c279 02730383 01fca4d8     ....y.....s.....
1002b644:	01459c36 01ff5e54 012d49e7 01d41314     6.E.T^...I-.....
1002b654:	023bc55f 0021fb5f 0149c726 01f7ac40     _.;._.!.&.I.@...
1002b664:	0366ee7a 00abdaa1 01a1d96c 0022aa9e     z.f.....l.....".
1002b674:	019b2fb0 010be4b5 00009c07 005d4b10     ./...........K].
1002b684:	01ff62ce 00239a3a 03c130ad 01540292     .b..:.#..0....T.
1002b694:	02938695 0049e85e 0234e36d 000a89be     ....^.I.m.4.....
1002b6a4:	021ecc28 0161344b 007eeba3 00bc7cfe     (...K4a...~..|..
1002b6b4:	02b8f2f9 01427542 007be5e5 006e2ac9     ....BuB...{..*n.
1002b6c4:	02b2e486 01766cb9 039a1339 013ea951     .....lv.9...Q.>.
1002b6d4:	01738f71 0132c4ef 0115b64a 01231d79     q.s...2.J...y.#.
1002b6e4:	02071ef0 01d6da54 02965406 01751b50     ....T....T..P.u.
1002b6f4:	02989f9f 01dd1841 013c0ae2 0066878d     ....A.....<...f.
1002b704:	02fa05c3 011d582e 03cc2fa3 0106372a     .....X.../..*7..
1002b714:	02cf8682 00d66473 014b8c60 0090dc6a     ....sd..`.K.j...
1002b724:	011c20c3 010551ac 0196bdbd 005cb375     . ...Q......u.\.
1002b734:	03881684 001cc777 024f8115 004109b5     ....w.....O...A.
1002b744:	00a9a3da 01c693f6 0190266a 01cdaf4e     ........j&..N...
1002b754:	0334b3b4 00cb5424 00ae70aa 005b040b     ..4.$T...p....[.
1002b764:	011bf445 005c8375 03af9821 016b998b     E...u.\.!.....k.
1002b774:	022b87fa 01048a56 017ed6e9 0066e23d     ..+.V.....~.=.f.
1002b784:	0104a339 01336fc6 014e4f2c 010ad273     9....o3.,ON.s...
1002b794:	031909d9 01c68b9d 02bb52d2 0053854f     .........R..O.S.
1002b7a4:	0293eac6 01549878 019b65cc 0019099d     ....x.T..e......
1002b7b4:	02116a48 0100996b 00bae5bc 01b008c1     Hj..k...........
1002b7c4:	00d195ad 001d82ee 01e6818a 018685f3     ................
1002b7d4:	00108827 014f6b4d 015c55b6 00caccb1     '...MkO..U\.....
1002b7e4:	039347a3 00be4597 01bc33ac 01acd2fa     .G...E...3......
1002b7f4:	0278c0b2 01cbd90e 004f9e7b 00f79170     ..x.....{.O.p...
1002b804:	0130fa5c 01c1b5a3 028e2f24 01a5bd8f     \.0.....$/......
1002b814:	00f0922d 00804b06 0171f2d3 011a5959     -....K....q.YY..
1002b824:	026f423f 002a9873 031b27a1 00fe5035     ?Bo.s.*..'..5P..
1002b834:	0173d16a 00617c67 0362e6dd 0006e71e     j.s.g|a...b.....
1002b844:	02c89d29 00d57956 00ec7101 00fa2d05     )...Vy...q...-..
1002b854:	00520c90 00e76c1f 0377efe1 01bd07a6     ..R..l....w.....
1002b864:	0384e4ba 0022bd6d 001f2533 01267722     ....m.".3%.."w&.
1002b874:	0076c506 00d3bc99 02741497 013441f4     ..v.......t..A4.
1002b884:	016efdb3 00d1b12f 031163a1 00cade75     ..n./....c..u...
1002b894:	01cc2c4b 00c534a2 02f1bc4e 008d1438     K,...4..N...8...
1002b8a4:	012f92f4 003364ce 02946b7d 004dc31a     ../..d3.}k....M.
1002b8b4:	015afd98 01908f07 01fcb36a 017e367b     ..Z.....j...{6~.
1002b8c4:	00bf3990 0079ba37 008af30a 01e5d3cd     .9..7.y.........
1002b8d4:	02f19c7c 01b99c93 03bc13e2 0120297b     |...........{) .
1002b8e4:	01622071 0079c2c0 01f8a16a 007c58ed     q b...y.j....X|.
1002b8f4:	001ad417 015aabcd 01d830f7 01e6258d     ......Z..0...%..
1002b904:	0200cb7b 011ea89d 02ce221f 00533910     {........"...9S.
1002b914:	032516cc 00626029 01b86677 001cbe03     ..%.)`b.wf......
1002b924:	03da526e 01c0ccc7 007691c8 0092cc75     nR........v.u...
1002b934:	0015f8c3 0107bb70 03ef854a 01f3e349     ....p...J...I...
1002b944:	004693f9 00a278d6 03b309a7 00129e15     ..F..x..........
1002b954:	01d14dda 01516d61 00d43a0f 01c9d7a8     .M..amQ..:......
1002b964:	01d7ccf7 01a044df 02b79a38 0079e72e     .....D..8.....y.
1002b974:	0089a66a 008a8851 00332ba5 003d8be7     j...Q....+3...=.
1002b984:	03b321e1 01393438 03d2ac40 01d147f8     .!..849.@....G..
1002b994:	00eea98d 0199bd9e 0267fead 000e2161     ..........g.a!..
1002b9a4:	03e64c8d 01348b70 023b5f39 01196275     .L..p.4.9_;.ub..
1002b9b4:	01ec3f96 01fabe5e 0172b9a8 013afa05     .?..^.....r...:.
1002b9c4:	0161694a 0086dfd7 01a36371 00703e80     Jia.....qc...>p.
1002b9d4:	02943dff 01812d88 02741a58 0072267d     .=...-..X.t.}&r.
1002b9e4:	02f232fb 01808678 02a7f9cb 00d7eba4     .2..x...........
1002b9f4:	00f3b1ca 003e8d85 00936a50 000ac3a3     ......>.Pj......
1002ba04:	00b6cd21 01ae0ed6 03e72680 00dfb634     !........&..4...
1002ba14:	039f2a62 00280df6 01b1d2bc 01001506     b*....(.........
1002ba24:	01be82f0 00ffaf6e 01921400 0179d225     ....n.......%.y.
1002ba34:	00822706 0154fa8e 00cfc88c 01685f09     .'....T......_h.
1002ba44:	00aef40a 007ee886 02c8f53e 0125123e     ......~.>...>.%.
1002ba54:	02e8356a 00d3dd31 0207dba2 002b5e01     j5..1........^+.
1002ba64:	02b63eb6 01c84e9f 00aa8c86 00e4b8eb     .>...N..........
1002ba74:	027b0194 0195c10f 01efe9e7 017046d5     ..{..........Fp.
1002ba84:	02a074fb 01dcdef1 00e355cc 003ab907     .t.......U....:.
1002ba94:	013ff776 01b14d74 028a35af 014d3a4f     v.?.tM...5..O:M.
1002baa4:	0102c997 0022c43f 00b81e05 009ab0ab     ....?.".........
1002bab4:	00ce3b79 00276326 024d50ac 009785ff     y;..&c'..PM.....
1002bac4:	0204f676 0026f5c7 01f2a145 0096b210     v.....&.E.......
1002bad4:	00823871 00691fab 036c581a 006a2a30     q8....i..Xl.0*j.
1002bae4:	0042a9fb 00955d45 02f121a7 01dffd5d     ..B.E]...!..]...
1002baf4:	00fc722b 01397e6c 030d28c8 011be526     +r..l~9..(..&...
1002bb04:	0117ef26 01337997 00f89698 01aeea0a     &....y3.........
1002bb14:	00fe3901 006f19a4 035abc5a 00c504cb     .9....o.Z.Z.....
1002bb24:	0132d528 018460d4 02b48a57 017c92e3     (.2..`..W.....|.
1002bb34:	00f7f6b7 01567541 03eb54d5 00e0de2c     ....AuV..T..,...
1002bb44:	038f94ee 01352aa9 0075a74d 012800ba     .....*5.M.u...(.
1002bb54:	0367b17c 0042e144 015807e3 0006ac4b     |.g.D.B...X.K...
1002bb64:	02d266fd 002479fd 03037389 00d8183b     .f...y$..s..;...
1002bb74:	001d1286 0061e23b 00478eb0 00a1d107     ....;.a...G.....
1002bb84:	023354bd 0048fa9a 01e32d96 01462410     .T3...H..-...$F.
1002bb94:	03090231 0016c18a 02e7b78f 003245d9     1............E2.
1002bba4:	01a138ec 002a83d5 022c918a 0128e587     .8....*...,...(.
1002bbb4:	00e6bba0 010ef83e 00614e3b 01a3f7ff     ....>...;Na.....
1002bbc4:	035b3be0 013a476a 01212ff0 00ec7532     .;[.jG:../!.2u..
1002bbd4:	023fb1db 00b35af3 03233f1e 01f5913c     ..?..Z...?#.<...
1002bbe4:	0202c064 0071a7e7 01266898 00dab979     d.....q..h&.y...
1002bbf4:	02d38b79 0023f076 02d9bd41 01a2b3ba     y...v.#.A.......
1002bc04:	03d7c210 013243bc 00818716 0125bd68     .....C2.....h.%.
1002bc14:	00c239b8 01e73e23 006cf8db 00b2e70c     .9..#>....l.....
1002bc24:	015b508f 01655d83 00aa6397 006ff841     .P[..]e..c..A.o.
1002bc34:	03996c25 0045253f 023e5800 01909458     %l..?%E..X>.X...
1002bc44:	01e044be 003527f1 03edcb29 01c27e90     .D...'5.)....~..
1002bc54:	01022790 00b2faff 02ec1105 002e208a     .'........... ..
1002bc64:	0226bccc 013473f4 024971be 01456cbe     ..&..s4..qI..lE.
1002bc74:	01f54515 00b2cb17 03fd2aca 00976318     .E.......*...c..
1002bc84:	01dffd61 0131734a 0348af05 00cbb03a     a...Js1...H.:...
1002bc94:	01f9b77c 0063e4e4 02cf0c81 01c3c0a7     |.....c.........
1002bca4:	02ed3e33 00c1eccb 003ce8c2 019d22ac     3>........<.."..
1002bcb4:	02b810bc 015f0366 0224e98c 010b1928     ....f._...$.(...
1002bcc4:	00a6c314 002df576 0210b0b9 00abea97     ....v.-.........
1002bcd4:	0355254d 01877820 01e3c28d 003ad61f     M%U. x........:.
1002bce4:	037dbbd5 013c2ee7 022a74bd 0113b296     ..}...<..t*.....
1002bcf4:	0395d543 01120c9e 01e3a4ba 000519a0     C...............
1002bd04:	01c34e0c 00e1c52b 02298e30 013c9bc3     .N..+...0.)...<.
1002bd14:	0112c7de 009c8891 01c5342e 0124abd2     .........4....$.
1002bd24:	035a0357 008d9737 03ffbb60 00c84e29     W.Z.7...`...)N..
1002bd34:	014646fe 00a87df4 018a44cc 0046d77c     .FF..}...D..|.F.
1002bd44:	02a975fc 00eee290 006b17ef 01bcb56d     .u........k.m...
1002bd54:	023170e5 01edaa48 03e3b7e6 0014dc4f     .p1.H.......O...
1002bd64:	017f6bc2 0065cd7f 02c84266 00e43410     .k....e.fB...4..
1002bd74:	028fdc75 007bf8ca 03ae1238 01a497b9     u.....{.8.......
1002bd84:	01d0e832 012be4a0 01191df8 003fbe44     2.....+.....D.?.

1002bd94 <con_2d>:
1002bd94:	02b2f159 01a6e509 022add7a 00d4141d     Y.......z.*.....
1002bda4:	00038052 00f3d130 03407977 019ce331     R...0...wy@.1...
1002bdb4:	01c56dff 00901b67 63612525 0a25256b     .m..g...%%ack%%.
1002bdc4:	00000000                                ....

1002bdc8 <K>:
1002bdc8:	d76aa478 e8c7b756 242070db c1bdceee     x.j.V....p $....
1002bdd8:	f57c0faf 4787c62a a8304613 fd469501     ..|.*..G.F0...F.
1002bde8:	698098d8 8b44f7af ffff5bb1 895cd7be     ...i..D..[....\.
1002bdf8:	6b901122 fd987193 a679438e 49b40821     "..k.q...Cy.!..I
1002be08:	f61e2562 c040b340 265e5a51 e9b6c7aa     b%..@.@.QZ^&....
1002be18:	d62f105d 02441453 d8a1e681 e7d3fbc8     ]./.S.D.........
1002be28:	21e1cde6 c33707d6 f4d50d87 455a14ed     ...!..7.......ZE
1002be38:	a9e3e905 fcefa3f8 676f02d9 8d2a4c8a     ..........og.L*.
1002be48:	fffa3942 8771f681 6d9d6122 fde5380c     B9....q."a.m.8..
1002be58:	a4beea44 4bdecfa9 f6bb4b60 bebfbc70     D......K`K..p...
1002be68:	289b7ec6 eaa127fa d4ef3085 04881d05     .~.(.'...0......
1002be78:	d9d4d039 e6db99e5 1fa27cf8 c4ac5665     9........|..eV..
1002be88:	f4292244 432aff97 ab9423a7 fc93a039     D")...*C.#..9...
1002be98:	655b59c3 8f0ccc92 ffeff47d 85845dd1     .Y[e....}....]..
1002bea8:	6fa87e4f fe2ce6e0 a3014314 4e0811a1     O~.o..,..C.....N
1002beb8:	f7537e82 bd3af235 2ad7d2bb eb86d391     .~S.5.:....*....

1002bec8 <S>:
1002bec8:	00000007 0000000c 00000011 00000016     ................
1002bed8:	00000007 0000000c 00000011 00000016     ................
1002bee8:	00000007 0000000c 00000011 00000016     ................
1002bef8:	00000007 0000000c 00000011 00000016     ................
1002bf08:	00000005 00000009 0000000e 00000014     ................
1002bf18:	00000005 00000009 0000000e 00000014     ................
1002bf28:	00000005 00000009 0000000e 00000014     ................
1002bf38:	00000005 00000009 0000000e 00000014     ................
1002bf48:	00000004 0000000b 00000010 00000017     ................
1002bf58:	00000004 0000000b 00000010 00000017     ................
1002bf68:	00000004 0000000b 00000010 00000017     ................
1002bf78:	00000004 0000000b 00000010 00000017     ................
1002bf88:	00000006 0000000a 0000000f 00000015     ................
1002bf98:	00000006 0000000a 0000000f 00000015     ................
1002bfa8:	00000006 0000000a 0000000f 00000015     ................
1002bfb8:	00000006 0000000a 0000000f 00000015     ................

1002bfc8 <con_off>:
1002bfc8:	00d9e920 015bed68 021d5c7f 024dc32e      ...h.[..\....M.
1002bfd8:	03e190b9 02222221 00888888 02222222     ....!"".....""".
1002bfe8:	00888888 00022222                       ....""..

1002bff0 <con_mu>:
1002bff0:	00131b39 0168c28b 027ed9ce 00218ca6     9.....h...~...!.
1002c000:	0106215d 03fffac8 03ffffff 03ffffff     ]!..............
1002c010:	03ffffff 03ffffff 000000ff              ............

1002c01c <con_m>:
1002c01c:	00f5d3ed 0098c697 01cd6581 037a8bde     .........e....z.
1002c02c:	0014def9 00000000 00000000 00000000     ................
1002c03c:	00000000 00040000 00000000 203e2d20     ............ -> 
1002c04c:	65746e49 70757272 28202174 73616c46     Interrupt! (Flas
1002c05c:	63612068 73736563 69616620 6572756c     h access failure
1002c06c:	46000a29 656c6961 6f742064 696e6920     )..Failed to ini
1002c07c:	6c616974 20657a69 2e433249 00000000     tialize I2C.....

1002c08c <num_leds>:
1002c08c:	00000003                                ....

1002c090 <led_pin>:
1002c090:	40080400 00000001 00010001 40080400     ...@...........@
1002c0a0:	00000002 00010001 40080400 00000004     ...........@....
1002c0b0:	00010001                                ....

1002c0b4 <num_pbs>:
1002c0b4:	00000002                                ....

1002c0b8 <pb_pin>:
1002c0b8:	40008000 00000004 00010100 40009000     ...@...........@
1002c0c8:	00000080 00010100                       ........

1002c0d0 <gpio_cfg_uart3>:
1002c0d0:	40080400 000000c0 00000003              ...@........

1002c0dc <gpio_cfg_uart2>:
1002c0dc:	40009000 00000003 00000002              ...@........

1002c0e8 <gpio_cfg_uart1>:
1002c0e8:	40008000 00003000 00000002              ...@.0......

1002c0f4 <gpio_cfg_uart0>:
1002c0f4:	40008000 00000003 00000002              ...@........

1002c100 <gpio_cfg_i2c2>:
1002c100:	40008000 c0000000 00000002              ...@........

1002c10c <gpio_cfg_i2c1>:
1002c10c:	40008000 00030000 00000002              ...@........

1002c118 <gpio_cfg_i2c0>:
1002c118:	40008000 00000c00 00000002              ...@........

1002c124 <gpio_cfg_extclk>:
1002c124:	40008000 00000008 00000002              ...@........

1002c130 <CSWTCH.16>:
1002c130:	40008000 40009000 40080400 40080600     ...@...@...@...@
1002c140:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1002c150:	33323130 37363534 62613938 66656463     0123456789abcdef
1002c160:	00000000 33323130 37363534 42413938     ....0123456789AB
1002c170:	46454443 00000000 6c756e28 0000296c     CDEF....(null)..
1002c180:	00000030                                0...

1002c184 <zeroes.0>:
1002c184:	30303030 30303030 30303030 30303030     0000000000000000

1002c194 <blanks.1>:
1002c194:	20202020 20202020 20202020 20202020                     

1002c1a4 <zeroes.0>:
1002c1a4:	30303030 30303030 30303030 30303030     0000000000000000

1002c1b4 <blanks.1>:
1002c1b4:	20202020 20202020 20202020 20202020                     
1002c1c4:	0000000a 0000002e 435f434c 414c4c4f     ........LC_COLLA
1002c1d4:	00004554 435f434c 45505954 00000000     TE..LC_CTYPE....
1002c1e4:	4d5f434c 54454e4f 00595241 4e5f434c     LC_MONETARY.LC_N
1002c1f4:	52454d55 00004349 545f434c 00454d49     UMERIC..LC_TIME.
1002c204:	4d5f434c 41535345 00534547              LC_MESSAGES.

1002c210 <_ctype_>:
1002c210:	20202000 20202020 28282020 20282828     .         ((((( 
1002c220:	20202020 20202020 20202020 20202020                     
1002c230:	10108820 10101010 10101010 10101010      ...............
1002c240:	04040410 04040404 10040404 10101010     ................
1002c250:	41411010 41414141 01010101 01010101     ..AAAAAA........
1002c260:	01010101 01010101 01010101 10101010     ................
1002c270:	42421010 42424242 02020202 02020202     ..BBBBBB........
1002c280:	02020202 02020202 02020202 10101010     ................
1002c290:	00000020 00000000 00000000 00000000      ...............
	...
1002c314:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
1002c324:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
1002c334:	00000000 6c6f562f 73656d75 7461642f     ..../Volumes/dat
1002c344:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
1002c354:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
1002c364:	72612f6e 32312d6d 6372732f 77656e2f     n/arm-12/src/new
1002c374:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
1002c384:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
1002c394:	632e616f 00000000                       oa.c....

1002c39c <zeroes.0>:
1002c39c:	30303030 30303030 30303030 30303030     0000000000000000

1002c3ac <blanks.1>:
1002c3ac:	20202020 20202020 20202020 20202020                     
1002c3bc:	646c2565 00000000                       e%ld....

1002c3c4 <basefix.0>:
1002c3c4:	0001000a 00030002 00050004 00070006     ................
1002c3d4:	00090008 000b000a 000d000c 000f000e     ................
1002c3e4:	00000010 6c6f562f 73656d75 7461642f     ..../Volumes/dat
1002c3f4:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
1002c404:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
1002c414:	72612f6e 32312d6d 6372732f 77656e2f     n/arm-12/src/new
1002c424:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
1002c434:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
1002c444:	2e636572 00000063                       rec.c...

1002c44c <p05.0>:
1002c44c:	00000005 00000019 0000007d              ........}...

1002c458 <__mprec_bigtens>:
1002c458:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1002c468:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1002c478:	7f73bf3c 75154fdd                       <.s..O.u

1002c480 <__mprec_tens>:
1002c480:	00000000 3ff00000 00000000 40240000     .......?......$@
1002c490:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1002c4a0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1002c4b0:	00000000 412e8480 00000000 416312d0     .......A......cA
1002c4c0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1002c4d0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1002c4e0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1002c4f0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1002c500:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1002c510:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1002c520:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1002c530:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1002c540:	79d99db4 44ea7843 0000666e 74696e69     ...yCx.Dnf..init
1002c550:	00000079 00006e61                       y...an..

1002c558 <fpinan.0>:
1002c558:	00000034 fffffbce 000003cb 00000001     4...............
1002c568:	00000000                                ....

1002c56c <fpi.1>:
1002c56c:	00000035 fffffbce 000003cb 00000001     5...............
1002c57c:	00000000                                ....

1002c580 <tinytens>:
1002c580:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
1002c590:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
1002c5a0:	64ac6f43 11680628 7566202c 6974636e     Co.d(.h., functi
1002c5b0:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
1002c5c0:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
1002c5d0:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
1002c5e0:	25732564 00000a73 0053494a 53494a53     d%s%s...JIS.SJIS
1002c5f0:	00000000 4a435545 00000050              ....EUCJP...

1002c5fc <d02f4>:
1002c5fc:	4e105f0c 4e2a4e15 4e364e31 4e3f4e3c     ._.N.N*N1N6N<N?N
1002c60c:	4e564e42 4e824e58 8c6b4e85 82124e8a     BNVNXN.N.Nk..N..
1002c61c:	4e8e5f0d 4e9f4e9e 4ea24ea0 4eb34eb0     ._.N.N.N.N.N.N.N
1002c62c:	4ece4eb6 4ec44ecd 4ec24ec6 4ede4ed7     .N.N.N.N.N.N.N.N
1002c63c:	4edf4eed 4f094ef7 4f304f5a 4f5d4f5b     .N.N.N.OZO0O[O]O
1002c64c:	4f474f57 4f884f76 4f984f8f 4f694f7b     WOGOvO.O.O.O{OiO
1002c65c:	4f914f70 4f864f6f 51184f96 4fdf4fd4     pO.OoO.O.O.Q.O.O
1002c66c:	4fd84fce 4fd14fdb 4fd04fda 4fe54fe4     .O.O.O.O.O.O.O.O
1002c67c:	5028501a 502a5014 50055025 4ff64f1c     .P(P.P*P%P.P.O.O
1002c68c:	50295021 4ffe502c 50114fef 50435006     !P)P,P.O.O.P.PCP
1002c69c:	67035047 50505055 505a5048 506c5056     GP.gUPPPHPZPVPlP
1002c6ac:	50805078 5085509a 50b250b4 50ca50c9     xP.P.P.P.P.P.P.P
1002c6bc:	50c250b3 50de50d6 50ed50e5 50ee50e3     .P.P.P.P.P.P.P.P
1002c6cc:	50f550f9 51015109 51165102 51145115     .P.P.Q.Q.Q.Q.Q.Q
1002c6dc:	5121511a 5137513a 513b513c 5140513f     .Q!Q:Q7Q<Q;Q?Q@Q
1002c6ec:	514c5152 51625154 51697af8 516e516a     RQLQTQbQ.ziQjQnQ
1002c6fc:	51825180 518c56d8 518f5189 51935191     .Q.Q.V.Q.Q.Q.Q.Q
1002c70c:	51965195 51a651a4 51a951a2 51ab51aa     .Q.Q.Q.Q.Q.Q.Q.Q
1002c71c:	51b151b3 51b051b2 51bd51b5 51c951c5     .Q.Q.Q.Q.Q.Q.Q.Q
1002c72c:	51e051db 51e98655 51f051ed 51fe51f5     .Q.QU..Q.Q.Q.Q.Q
1002c73c:	520b5204 520e5214 522a5227 5233522e     .R.R.R.R'R*R.R3R
1002c74c:	524f5239 524b5244 525e524c 526a5254     9RORDRKRLR^RTRjR
1002c75c:	52695274 527f5273 528d527d 52925294     tRiRsR.R}R.R.R.R
1002c76c:	52885271 8fa85291 52ac8fa7 52bc52ad     qR.R.R.....R.R.R
1002c77c:	52c152b5 52d752cd 52e352de 98ed52e6     .R.R.R.R.R.R.R..
1002c78c:	52f352e0 52f852f5 530652f9 75385308     .R.R.R.R.R.S.S8u
1002c79c:	5310530d 5315530f 5323531a 5331532f     .S.S.S.S.S#S/S1S
1002c7ac:	53385333 53465340 4e175345 534d5349     3S8S@SFSES.NISMS
1002c7bc:	535e51d6 536e5369 537b5918 53825377     .Q^SiSnS.Y{SwS.S
1002c7cc:	53a05396 53a553a6 53b053ae 53c353b6     .S.S.S.S.S.S.S.S
1002c7dc:	96d97c12 66fc53df 53ee71ee 53ed53e8     .|...S.f.q.S.S.S
1002c7ec:	540153fa 5440543d 542d542c 542e543c     .S.T=T@T,T-T<T.T
1002c7fc:	54295436 544e541d 5475548f 545f548e     6T)T.TNT.TuT.T_T
1002c80c:	54775471 54925470 5480547b 54845476     qTwTpT.T{T.TvT.T
1002c81c:	54865490 54a254c7 54a554b8 54c454ac     .T.T.T.T.T.T.T.T
1002c82c:	54a854c8 54c254ab 54be54a4 54d854bc     .T.T.T.T.T.T.T.T
1002c83c:	54e654e5 5514550f 54ee54fd 54fa54ed     .T.T.U.U.T.T.T.T
1002c84c:	553954e2 55635540 552e554c 5545555c     .T9U@UcULU.U\UEU
1002c85c:	55575556 55335538 5599555d 54af5580     VUWU8U3U]U.U.U.T
1002c86c:	559f558a 557e557b 559e5598 557c55ae     .U.U{U~U.U.U.U|U
1002c87c:	55a95583 55a85587 55c555da 55c455df     .U.U.U.U.U.U.U.U
1002c88c:	55e455dc 561455d4 561655f7 55fd55fe     .U.U.U.V.U.V.U.U
1002c89c:	55f9561b 5650564e 563471df 56325636     .V.UNVPV.q4V6V2V
1002c8ac:	566b5638 562f5664 566a566c 56805686     8VkVdV/VlVjV.V.V
1002c8bc:	56a0568a 568f5694 56ae56a5 56b456b6     .V.V.V.V.V.V.V.V
1002c8cc:	56bc56c2 56c356c1 56c856c0 56d156ce     .V.V.V.V.V.V.V.V
1002c8dc:	56d756d3 56f956ee 56ff5700 57095704     .V.V.V.V.W.V.W.W
1002c8ec:	570b5708 5713570d 57165718 571c55c7     .W.W.W.W.W.W.U.W
1002c8fc:	57375726 574e5738 5740573b 5769574f     &W7W8WNW;W@WOWiW
1002c90c:	578857c0 577f5761 57935789 57b357a0     .W.WaW.W.W.W.W.W
1002c91c:	57aa57a4 57c357b0 57d457c6 57d357d2     .W.W.W.W.W.W.W.W
1002c92c:	57d6580a 580b57e3 581d5819 58215872     .X.W.W.X.X.XrX!X
1002c93c:	584b5862 6bc05870 583d5852 58855879     bXKXpX.kRX=XyX.X
1002c94c:	589f58b9 58ba58ab 58bb58de 58ae58b8     .X.X.X.X.X.X.X.X
1002c95c:	58d358c5 58d758d1 58d858d9 58dc58e5     .X.X.X.X.X.X.X.X
1002c96c:	58df58e4 58fa58ef 58fb58f9 58fd58fc     .X.X.X.X.X.X.X.X
1002c97c:	590a5902 591b5910 592568a6 592d592c     .Y.Y.Y.Y.h%Y,Y-Y
1002c98c:	59385932 7ad2593e 59505955 595a594e     2Y8Y>Y.zUYPYNYZY
1002c99c:	59625958 59675960 5969596c 59815978     XYbY`YgYlYiYxY.Y
1002c9ac:	4f5e599d 59a34fab 59c659b2 59dc59e8     .Y^O.O.Y.Y.Y.Y.Y
1002c9bc:	59d9598d 5a2559da 5a115a1f 5a095a1c     .Y.Y.Y%Z.Z.Z.Z.Z
1002c9cc:	5a405a1a 5a495a6c 5a365a35 5a6a5a62     .Z@ZlZIZ5Z6ZbZjZ
1002c9dc:	5abc5a9a 5acb5abe 5abd5ac2 5ad75ae3     .Z.Z.Z.Z.Z.Z.Z.Z
1002c9ec:	5ae95ae6 5afa5ad6 5b0c5afb 5b165b0b     .Z.Z.Z.Z.Z.[.[.[
1002c9fc:	5ad05b32 5b365b2a 5b435b3e 5b405b45     2[.Z*[6[>[C[E[@[
1002ca0c:	5b555b51 5b5b5b5a 5b695b65 5b735b70     Q[U[Z[[[e[i[p[s[
1002ca1c:	5b785b75 5b7a6588 5b835b80 5bb85ba6     u[x[.ez[.[.[.[.[
1002ca2c:	5bc75bc3 5bd45bc9 5be45bd0 5be25be6     .[.[.[.[.[.[.[.[
1002ca3c:	5be55bde 5bf05beb 5bf35bf6 5c075c05     .[.[.[.[.[.[.\.\
1002ca4c:	5c0d5c08 5c205c13 5c285c22 5c395c38     .\.\.\ \"\(\8\9\
1002ca5c:	5c465c41 5c535c4e 5c4f5c50 5c6c5b71     A\F\N\S\P\O\q[l\
1002ca6c:	4e625c6e 5c795c76 5c915c8c 599b5c94     n\bNv\y\.\.\.\.Y
1002ca7c:	5cbb5cab 5cbc5cb6 5cc55cb7 5cc75cbe     .\.\.\.\.\.\.\.\
1002ca8c:	5ce95cd9 5cfa5cfd 5d8c5ced 5d0b5cea     .\.\.\.\.\.].\.]
1002ca9c:	5d175d15 5d1f5d5c 5d115d1b 5d225d14     .].]\].].].].]"]
1002caac:	5d195d1a 5d4c5d18 5d4e5d52 5d6c5d4b     .].].]L]R]N]K]l]
1002cabc:	5d765d73 5d845d87 5da25d82 5dac5d9d     s]v].].].].].].]
1002cacc:	5dbd5dae 5db75d90 5dc95dbc 5dd35dcd     .].].].].].].].]
1002cadc:	5dd65dd2 5deb5ddb 5df55df2 5e1a5e0b     .].].].].].].^.^
1002caec:	5e115e19 5e365e1b 5e445e37 5e405e43     .^.^.^6^7^D^C^@^
1002cafc:	5e575e4e 5e5f5e54 5e645e62 5e755e47     N^W^T^_^b^d^G^u^
1002cb0c:	5e7a5e76 5e7f9ebc 5ec15ea0 5ec85ec2     v^z^...^.^.^.^.^
1002cb1c:	5ecf5ed0 5ee35ed6 5eda5edd 5ee25edb     .^.^.^.^.^.^.^.^
1002cb2c:	5ee85ee1 5eec5ee9 5ef35ef1 5ef45ef0     .^.^.^.^.^.^.^.^
1002cb3c:	5efe5ef8 5f095f03 5f5c5f5d 5f115f0b     .^.^._._]_\_._._
1002cb4c:	5f295f16 5f385f2d 5f485f41 5f4e5f4c     ._)_-_8_A_H_L_N_
1002cb5c:	5f515f2f 5f575f56 5f615f59 5f735f6d     /_Q_V_W_Y_a_m_s_
1002cb6c:	5f835f77 5f7f5f82 5f885f8a 5f875f91     w_._._._._._._._
1002cb7c:	5f995f9e 5fa05f98 5fad5fa8 5fd65fbc     ._._._._._._._._
1002cb8c:	5fe45ffb 5ff15ff8 60b35fdd 60215fff     ._._._._._.`._!`
1002cb9c:	60196060 60296010 6031600e 6015601b     ``.`.`)`.`1`.`.`
1002cbac:	6026602b 603a600f 6041605a 6077606a     +`&`.`:`Z`A`j`w`
1002cbbc:	604a605f 604d6046 60436063 60426064     _`J`F`M`c`C`d`B`
1002cbcc:	606b606c 60816059 60e7608d 609a6083     l`k`Y`.`.`.`.`.`
1002cbdc:	609b6084 60976096 60a76092 60e1608b     .`.`.`.`.`.`.`.`
1002cbec:	60e060b8 60b460d3 60bd5ff0 60b560c6     .`.`.`.`._.`.`.`
1002cbfc:	614d60d8 61066115 60f760f6 60f46100     .`Ma.a.a.`.`.a.`
1002cc0c:	610360fa 60fb6121 610d60f1 6147610e     .`.a!a.`.`.a.aGa
1002cc1c:	6128613e 614a6127 613c613f 6134612c     >a(a'aJa?a<a,a4a
1002cc2c:	6142613d 61736144 61586177 615a6159     =aBaDasawaXaYaZa
1002cc3c:	6174616b 6165616f 615f6171 6153615d     kataoaeaqa_a]aSa
1002cc4c:	61996175 61876196 619461ac 618a619a     ua.a.a.a.a.a.a.a
1002cc5c:	61ab6191 61cc61ae 61c961ca 61c861f7     .a.a.a.a.a.a.a.a
1002cc6c:	61c661c3 61cb61ba 61cd7f79 61e361e6     .a.a.a.ay..a.a.a
1002cc7c:	61fa61f6 61ff61f4 61fc61fd 620061fe     .a.a.a.a.a.a.a.b
1002cc8c:	62096208 620c620d 621b6214 6221621e     .b.b.b.b.b.b.b!b
1002cc9c:	622e622a 62326230 62416233 625e624e     *b.b0b2b3bAbNb^b
1002ccac:	625b6263 62686260 6282627c 627e6289     cb[b`bhb|b.b.b~b
1002ccbc:	62936292 62d46296 62946283 62d162d7     .b.b.b.b.b.b.b.b
1002cccc:	62cf62bb 62c662ff 62c864d4 62cc62dc     .b.b.b.b.d.b.b.b
1002ccdc:	62c262ca 629b62c7 630c62c9 62f162ee     .b.b.b.b.b.c.b.b
1002ccec:	63026327 62ef6308 635062f5 634d633e     'c.c.c.b.bPc>cMc
1002ccfc:	634f641c 638e6396 63ab6380 63a36376     .dOc.c.c.c.cvc.c
1002cd0c:	6389638f 63b5639f 6369636b 63e963be     .c.c.c.ckcic.c.c
1002cd1c:	63c663c0 63c963e3 63f663d2 641663c4     .c.c.c.c.c.c.c.d
1002cd2c:	64066434 64266413 651d6436 64286417     4d.d.d&d6d.e.d(d
1002cd3c:	6467640f 6476646f 652a644e 64936495     .dgdodvdNd*e.d.d
1002cd4c:	64a964a5 64bc6488 64d264da 64c764c5     .d.d.d.d.d.d.d.d
1002cd5c:	64d864bb 64f164c2 820964e7 64e164e0     .d.d.d.d.d...d.d
1002cd6c:	64e362ac 652c64ef 64f464f6 64fa64f2     .b.d.d,e.d.d.d.d
1002cd7c:	64fd6500 651c6518 65246505 652b6523     .e.d.e.e.e$e#e+e
1002cd8c:	65356534 65366537 754b6538 65566548     4e5e7e6e8eKuHeVe
1002cd9c:	654d6555 655e6558 6572655d 65826578     UeMeXe^e]erexe.e
1002cdac:	8b8a6583 659f659b 65b765ab 65c665c3     .e...e.e.e.e.e.e
1002cdbc:	65c465c1 65d265cc 65d965db 65e165e0     .e.e.e.e.e.e.e.e
1002cdcc:	677265f1 6603660a 677365fb 66366635     .erg.f.f.esg5f6f
1002cddc:	661c6634 6644664f 66416649 665d665e     4f.fOfDfIfAf^f]f
1002cdec:	66676664 665f6668 66706662 66886683     dfgfhf_fbfpf.f.f
1002cdfc:	6689668e 66986684 66c1669d 66c966b9     .f.f.f.f.f.f.f.f
1002ce0c:	66bc66be 66b866c4 66da66d6 663f66e0     .f.f.f.f.f.f.f?f
1002ce1c:	66e966e6 66f566f0 670f66f7 671e6716     .f.f.f.f.f.g.g.g
1002ce2c:	67276726 672e9738 6736673f 67386741     &g'g8..g?g6gAg8g
1002ce3c:	67466737 6760675e 67636759 67896764     7gFg^g`gYgcgdg.g
1002ce4c:	67a96770 676a677c 678b678c 67a167a6     pg.g|gjg.g.g.g.g
1002ce5c:	67b76785 67b467ef 67b367ec 67b867e9     .g.g.g.g.g.g.g.g
1002ce6c:	67de67e4 67e267dd 67b967ee 67c667ce     .g.g.g.g.g.g.g.g
1002ce7c:	6a9c67e7 6846681e 68406829 6832684d     .g.j.hFh)h@hMh2h
1002ce8c:	68b3684e 6859682b 68776863 689f687f     Nh.h+hYhchwh.h.h
1002ce9c:	68ad688f 689d6894 6883689b 68b96aae     .h.h.h.h.h.h.j.h
1002ceac:	68b56874 68ba68a0 688d690f 6901687e     th.h.h.h.i.h~h.i
1002cebc:	690868ca 692268d8 68e16926 68cd690c     .h.i.h"i&i.h.i.h
1002cecc:	68e768d4 693668d5 69046912 68e368d7     .h.h.h6i.i.i.h.h
1002cedc:	68f96925 68ef68e0 692a6928 6923691a     %i.h.h.h(i*i.i#i
1002ceec:	68c66921 69776979 6978695c 6954696b     !i.hyiwi\ixikiTi
1002cefc:	696e697e 69746939 6959693d 69616930     ~ini9iti=iYi0iai
1002cf0c:	695d695e 696a6981 69ae69b2 69bf69d0     ^i]i.iji.i.i.i.i
1002cf1c:	69d369c1 69ce69be 69ca5be8 69bb69dd     .i.i.i.i.[.i.i.i
1002cf2c:	69a769c3 69916a2e 699c69a0 69b46995     .i.i.j.i.i.i.i.i
1002cf3c:	69e869de 6a1b6a02 6b0a69ff 69f269f9     .i.i.j.j.i.k.i.i
1002cf4c:	6a0569e7 6a1e69b1 6a1469ed 6a0a69eb     .i.j.i.j.i.j.i.j
1002cf5c:	6ac16a12 6a136a23 6a0c6a44 6a366a72     .j.j#j.jDj.jrj6j
1002cf6c:	6a476a78 6a596a62 6a486a66 6a226a38     xjGjbjYjfjHj8j"j
1002cf7c:	6a8d6a90 6a846aa0 6aa36aa2 86176a97     .j.j.j.j.j.j.j..
1002cf8c:	6ac36abb 6ab86ac2 6aac6ab3 6ad16ade     .j.j.j.j.j.j.j.j
1002cf9c:	6aaa6adf 6aea6ada 6b056afb 6afa8616     .j.j.j.j.j.k...j
1002cfac:	6b166b12 6b1f9b31 6b376b38 6b3976dc     .k.k1..k8k7k.v9k
1002cfbc:	6b4798ee 6b496b43 6b596b50 6b5b6b54     ..GkCkIkPkYkTk[k
1002cfcc:	6b616b5f 6b796b78 6b806b7f 6b836b84     _kakxkyk.k.k.k.k
1002cfdc:	6b986b8d 6b9e6b95 6baa6ba4 6baf6bab     .k.k.k.k.k.k.k.k
1002cfec:	6bb16bb2 6bb76bb3 6bc66bbc 6bd36bcb     .k.k.k.k.k.k.k.k
1002cffc:	6bec6bdf 6bf36beb 9ebe6bef 6c136c08     .k.k.k.k.k...l.l
1002d00c:	6c1b6c14 6c236c24 6c556c5e 6c6a6c62     .l.l$l#l^lUlbljl
1002d01c:	6c8d6c82 6c816c9a 6c7e6c9b 6c736c68     .l.l.l.l.l~lhlsl
1002d02c:	6c906c92 6cf16cc4 6cbd6cd3 6cc56cd7     .l.l.l.l.l.l.l.l
1002d03c:	6cae6cdd 6cbe6cb1 6cdb6cba 6cd96cef     .l.l.l.l.l.l.l.l
1002d04c:	6d1f6cea 6d36884d 6d3d6d2b 6d196d38     .l.mM.6m+m=m8m.m
1002d05c:	6d336d35 6d0c6d12 6d936d63 6d5a6d64     5m3m.m.mcm.mdmZm
1002d06c:	6d596d79 6d956d8e 6d856fe4 6e156df9     ymYm.m.m.o.m.m.n
1002d07c:	6db56e0a 6de66dc7 6dc66db8 6dde6dec     .n.m.m.m.m.m.m.m
1002d08c:	6de86dcc 6dc56dd2 6dd96dfa 6dd56de4     .m.m.m.m.m.m.m.m
1002d09c:	6dee6dea 6e6e6e2d 6e196e2e 6e5f6e72     .m.m-nnn.n.nrn_n
1002d0ac:	6e236e3e 6e2b6e6b 6e4d6e76 6e436e1f     >n#nkn+nvnMn.nCn
1002d0bc:	6e4e6e3a 6eff6e24 6e386e1d 6eaa6e82     :nNn$n.n.n8n.n.n
1002d0cc:	6ec96e98 6ed36eb7 6eaf6ebd 6eb26ec4     .n.n.n.n.n.n.n.n
1002d0dc:	6ed56ed4 6ea56e8f 6e9f6ec2 6f116f41     .n.n.n.n.n.nAo.o
1002d0ec:	6eec704c 6efe6ef8 6ef26f3f 6eef6f31     Lp.n.n.n?o.n1o.n
1002d0fc:	6ecc6f32 6f136f3e 6f866ef7 6f786f7a     2o.n>o.o.n.ozoxo
1002d10c:	6f806f81 6f5b6f6f 6f6d6ff3 6f7c6f82     .o.ooo[o.omo.o|o
1002d11c:	6f8e6f58 6fc26f91 6fb36f66 6fa16fa3     Xo.o.o.ofo.o.o.o
1002d12c:	6fb96fa4 6faa6fc6 6fd56fdf 6fd46fec     .o.o.o.o.o.o.o.o
1002d13c:	6ff16fd8 6fdb6fee 700b7009 70116ffa     .o.o.o.o.p.p.o.p
1002d14c:	700f7001 701b6ffe 6f74701a 7018701d     .p.p.o.p.pto.p.p
1002d15c:	7030701f 7032703e 70637051 70927099     .p0p>p2pQpcp.p.p
1002d16c:	70f170af 70b870ac 70ae70b3 70cb70df     .p.p.p.p.p.p.p.p
1002d17c:	70d970dd 70fd7109 7119711c 71557165     .p.p.q.p.q.qeqUq
1002d18c:	71667188 714c7162 716c7156 71fb718f     .qfqbqLqVqlq.q.q
1002d19c:	71957184 71ac71a8 71b971d7 71d271be     .q.q.q.q.q.q.q.q
1002d1ac:	71d471c9 71e071ce 71e771ec 71fc71f5     .q.q.q.q.q.q.q.q
1002d1bc:	71ff71f9 7210720d 7228721b 722c722d     .q.q.r.r.r(r-r,r
1002d1cc:	72327230 723c723b 7240723f 724b7246     0r2r;r<r?r@rFrKr
1002d1dc:	72747258 7282727e 72877281 72967292     Xrtr~r.r.r.r.r.r
1002d1ec:	72a772a2 72b272b9 72c672c3 72ce72c4     .r.r.r.r.r.r.r.r
1002d1fc:	72e272d2 72e172e0 72f772f9 7317500f     .r.r.r.r.r.r.P.s
1002d20c:	731c730a 731d7316 732f7334 73257329     .s.s.s.s4s/s)s%s
1002d21c:	734e733e 9ed8734f 736a7357 73707368     >sNsOs..Wsjshsps
1002d22c:	73757378 737a737b 73b373c8 73bb73ce     xsus{szs.s.s.s.s
1002d23c:	73e573c0 73de73ee 740574a2 7425746f     .s.s.s.s.t.tot%t
1002d24c:	743273f8 7455743a 745f743f 74417459     .s2t:tUt?t_tYtAt
1002d25c:	7469745c 74637470 7476746a 748b747e     \titptctjtvt~t.t
1002d26c:	74a7749e 74cf74ca 73f174d4 74e374e0     .t.t.t.t.t.s.t.t
1002d27c:	74e974e7 74f274ee 74f174f0 74f774f8     .t.t.t.t.t.t.t.t
1002d28c:	75037504 750c7505 750d750e 75137515     .u.u.u.u.u.u.u.u
1002d29c:	7526751e 753c752c 754d7544 7549754a     .u&u,u<uDuMuJuIu
1002d2ac:	7546755b 7569755a 75677564 756d756b     [uFuZuiudugukumu
1002d2bc:	75767578 75877586 758a7574 75827589     xuvu.u.utu.u.u.u
1002d2cc:	759a7594 75a5759d 75c275a3 75c375b3     .u.u.u.u.u.u.u.u
1002d2dc:	75bd75b5 75bc75b8 75cd75b1 75d275ca     .u.u.u.u.u.u.u.u
1002d2ec:	75e375d9 75fe75de 75fc75ff 75f07601     .u.u.u.u.u.u.v.u
1002d2fc:	75f275fa 760b75f3 7609760d 7627761f     .u.u.u.v.v.v.v'v
1002d30c:	76217620 76247622 76307634 7647763b      v!v"v$v4v0v;vGv
1002d31c:	76467648 7658765c 76627661 76697668     HvFv\vXvavbvhviv
1002d32c:	7667766a 7670766c 76767672 767c7678     jvgvlvpvrvvvxv|v
1002d33c:	76837680 768b7688 7696768e 76997693     .v.v.v.v.v.v.v.v
1002d34c:	76b0769a 76b876b4 76ba76b9 76cd76c2     .v.v.v.v.v.v.v.v
1002d35c:	76d276d6 76e176de 76e776e5 862f76ea     .v.v.v.v.v.v.v/.
1002d36c:	770876fb 77047707 77247729 7725771e     .v.w.w.w)w$w.w%w
1002d37c:	771b7726 77387737 775a7747 776b7768     &w.w7w8wGwZwhwkw
1002d38c:	7765775b 777e777f 778e7779 7791778b     [wew.w~wyw.w.w.w
1002d39c:	779e77a0 77b677b0 77bf77b9 77bd77bc     .w.w.w.w.w.w.w.w
1002d3ac:	77c777bb 77d777cd 77dc77da 77ee77e3     .w.w.w.w.w.w.w.w
1002d3bc:	780c77fc 79267812 792a7820 788e7845     .w.x.x&y x*yEx.x
1002d3cc:	78867874 789a787c 78a3788c 78aa78b5     tx.x|x.x.x.x.x.x
1002d3dc:	78d178af 78cb78c6 78be78d4 78c578bc     .x.x.x.x.x.x.x.x
1002d3ec:	78ec78ca 78da78e7 78f478fd 79127907     .x.x.x.x.x.x.y.y
1002d3fc:	79197911 792b792c 79607940 795f7957     .y.y,y+y@y`yWy_y
1002d40c:	7955795a 797a7953 798a797f 79a7799d     ZyUySyzy.y.y.y.y
1002d41c:	79aa9f4b 79b379ae 79ba79b9 79d579c9     K..y.y.y.y.y.y.y
1002d42c:	79ec79e7 79e379e1 7a0d7a08 7a197a18     .y.y.y.y.z.z.z.z
1002d43c:	7a1f7a20 7a317980 7a3e7a3b 7a437a37      z.z.y1z;z>z7zCz
1002d44c:	7a497a57 7a627a61 9f9d7a69 7a797a70     WzIzazbziz..pzyz
1002d45c:	7a887a7d 7a957a97 7a967a98 7ac87aa9     }z.z.z.z.z.z.z.z
1002d46c:	7ab67ab0 7ac47ac5 90837abf 7aca7ac7     .z.z.z.z.z...z.z
1002d47c:	7acf7acd 7ad37ad5 7ada7ad9 7ae17add     .z.z.z.z.z.z.z.z
1002d48c:	7ae67ae2 7af07aed 7b0f7b02 7b067b0a     .z.z.z.z.{.{.{.{
1002d49c:	7b187b33 7b1e7b19 7b287b35 7b507b36     3{.{.{.{5{({6{P{
1002d4ac:	7b047b7a 7b0b7b4d 7b457b4c 7b657b75     z{.{M{.{L{E{u{e{
1002d4bc:	7b677b74 7b717b70 7b6e7b6c 7b987b9d     t{g{p{q{l{n{.{.{
1002d4cc:	7b8d7b9f 7b9a7b9c 7b927b8b 7b5d7b8f     .{.{.{.{.{.{.{]{
1002d4dc:	7bcb7b99 7bcc7bc1 7bb47bcf 7bdd7bc6     .{.{.{.{.{.{.{.{
1002d4ec:	7c117be9 7be67c14 7c607be5 7c077c00     .{.|.|.{.{`|.|.|
1002d4fc:	7bf37c13 7c177bf7 7bf67c0d 7c277c23     .|.{.{.|.|.{#|'|
1002d50c:	7c1f7c2a 7c2b7c37 7c4c7c3d 7c547c43     *|.|7|+|=|L|C|T|
1002d51c:	7c407c4f 7c587c50 7c647c5f 7c657c56     O|@|P|X|_|d|V|e|
1002d52c:	7c757c6c 7c907c83 7cad7ca4 7cab7ca2     l|u|.|.|.|.|.|.|
1002d53c:	7ca87ca1 7cb27cb3 7cae7cb1 7cbd7cb9     .|.|.|.|.|.|.|.|
1002d54c:	7cc57cc0 7cd87cc2 7cdc7cd2 9b3b7ce2     .|.|.|.|.|.|.|;.
1002d55c:	7cf27cef 7cf67cf4 7d067cfa 7d1c7d02     .|.|.|.|.|.}.}.}
1002d56c:	7d0a7d15 7d4b7d45 7d327d2e 7d357d3f     .}.}E}K}.}2}?}5}
1002d57c:	7d737d46 7d4e7d56 7d687d72 7d4f7d6e     F}s}V}N}r}h}n}O}
1002d58c:	7d937d63 7d5b7d89 7d7d7d8f 7dba7d9b     c}.}.}[}.}}}.}.}
1002d59c:	7da37dae 7dc77db5 7dab7dbd 7da27e3d     .}.}.}.}.}.}=~.}
1002d5ac:	7ddc7daf 7d9f7db8 7dd87db0 7de47ddd     .}.}.}.}.}.}.}.}
1002d5bc:	7dfb7dde 7de17df2 7e0a7e05 7e217e23     .}.}.}.}.~.~#~!~
1002d5cc:	7e317e12 7e097e1f 7e227e0b 7e667e46     .~1~.~.~.~"~F~f~
1002d5dc:	7e357e3b 7e437e39 7e327e37 7e677e3a     ;~5~9~C~7~2~:~g~
1002d5ec:	7e567e5d 7e597e5e 7e797e5a 7e697e6a     ]~V~^~Y~Z~y~j~i~
1002d5fc:	7e7b7e7c 7dd57e83 8fae7e7d 7e887e7f     |~{~.~.}}~...~.~
1002d60c:	7e8c7e89 7e907e92 7e947e93 7e8e7e96     .~.~.~.~.~.~.~.~
1002d61c:	7e9c7e9b 7f3a7f38 7f4c7f45 7f4e7f4d     .~.~8.:.E.L.M.N.
1002d62c:	7f517f50 7f547f55 7f5f7f58 7f687f60     P.Q.U.T.X._.`.h.
1002d63c:	7f677f69 7f827f78 7f837f86 7f877f88     i.g.x...........
1002d64c:	7f947f8c 7f9d7f9e 7fa37f9a 7fb27faf     ................
1002d65c:	7fae7fb9 7fb87fb6 7fc58b71 7fca7fc6     ........q.......
1002d66c:	7fd47fd5 7fe67fe1 7ff37fe9 98dc7ff9     ................
1002d67c:	80048006 8012800b 80198018 8021801c     ..............!.
1002d68c:	803f8028 804a803b 80528046 805a8058     (.?.;.J.F.R.X.Z.
1002d69c:	8062805f 80738068 80708072 80798076     _.b.h.s.r.p.v.y.
1002d6ac:	807f807d 80868084 809b8085 809a8093     }...............
1002d6bc:	519080ad 80db80ac 80d980e5 80c480dd     ...Q............
1002d6cc:	80d680da 80ef8109 811b80f1 81238129     ............).#.
1002d6dc:	814b812f 8146968b 8153813e 80fc8151     /.K...F.>.S.Q...
1002d6ec:	816e8171 81668165 81838174 818a8188     q.n.e.f.t.......
1002d6fc:	81828180 819581a0 81a381a4 8193815f     ............_...
1002d70c:	81b081a9 81be81b5 81bd81b8 81c281c0     ................
1002d71c:	81c981ba 81d181cd 81d881d9 81da81c8     ................
1002d72c:	81e081df 81fa81e7 81fe81fb 82028201     ................
1002d73c:	82078205 820d820a 82168210 822b8229     ............).+.
1002d74c:	82338238 82598240 825d8258 825f825a     8.3.@.Y.X.].Z._.
1002d75c:	82628264 826a8268 822e826b 82778271     d.b.h.j.k...q.w.
1002d76c:	827e8278 8292828d 829f82ab 82ac82bb     x.~.............
1002d77c:	82e382e1 82d282df 82f382f4 839382fa     ................
1002d78c:	82fb8303 82de82f9 82dc8306 82d98309     ................
1002d79c:	83348335 83328316 83408331 83508339     5.4...2.1.@.9.P.
1002d7ac:	832f8345 8317832b 83858318 83aa839a     E./.+...........
1002d7bc:	83a2839f 83238396 8387838e 837c838a     ......#.......|.
1002d7cc:	837383b5 83a08375 83a88389 841383f4     ..s.u...........
1002d7dc:	83ce83eb 840383fd 840b83d8 83f783c1     ................
1002d7ec:	83e08407 840d83f2 84208422 843883bd     ........". ...8.
1002d7fc:	83fb8506 842a846d 855a843c 84778484     ....m.*.<.Z...w.
1002d80c:	84ad846b 8482846e 84468469 846f842c     k...n...i.F.,.o.
1002d81c:	84358479 846284ca 84bf84b9 84d9849f     y.5...b.........
1002d82c:	84bb84cd 84d084da 84c684c1 84a184d6     ................
1002d83c:	84ff8521 851784f4 852c8518 8515851f     !.........,.....
1002d84c:	84fc8514 85638540 85488558 86028541     ....@.c.X.H.A...
1002d85c:	8555854b 85a48580 85918588 85a8858a     K.U.............
1002d86c:	8594856d 85ea859b 859c8587 857e8577     m...........w.~.
1002d87c:	85c98590 85cf85ba 85d085b9 85dd85d5     ................
1002d88c:	85dc85e5 860a85f9 860b8613 85fa85fe     ................
1002d89c:	86228606 8630861a 864d863f 86544e55     .."...0.?.M.UNT.
1002d8ac:	8667865f 86938671 86a986a3 868b86aa     _.g.q...........
1002d8bc:	86b6868c 86c486af 86b086c6 882386c9     ..............#.
1002d8cc:	86d486ab 86e986de 86df86ec 86ef86db     ................
1002d8dc:	87068712 87008708 86fb8703 87098711     ................
1002d8ec:	86f9870d 8734870a 8737873f 8725873b     ......4.?.7.;.%.
1002d8fc:	871a8729 875f8760 874c8778 8774874e     )...`._.x.L.N.t.
1002d90c:	87688757 8759876e 87638753 8805876a     W.h.n.Y.S.c.j...
1002d91c:	879f87a2 87af8782 87bd87cb 87d087c0     ................
1002d92c:	87ab96d6 87b387c4 87c687c7 87ef87bb     ................
1002d93c:	87e087f2 880d880f 87f687fe 880e87f7     ................
1002d94c:	881187d2 88158816 88218822 88368831     ........".!.1.6.
1002d95c:	88278839 8844883b 88528842 885e8859     9.'.;.D.B.R.Y.^.
1002d96c:	886b8862 887e8881 8875889e 88b5887d     b.k...~...u.}...
1002d97c:	88828872 88928897 889988ae 888d88a2     r...............
1002d98c:	88b088a4 88b188bf 88c488c3 88d888d4     ................
1002d99c:	88dd88d9 890288f9 88f488fc 88f288e8     ................
1002d9ac:	890c8904 8913890a 891e8943 892a8925     ........C...%.*.
1002d9bc:	8941892b 893b8944 89388936 891d894c     +.A.D.;.6.8.L...
1002d9cc:	895e8960 89648966 896a896d 8974896f     `.^.f.d.m.j.o.t.
1002d9dc:	897e8977 89888983 8993898a 89a18998     w.~.............
1002d9ec:	89a689a9 89af89ac 89ba89b2 89bf89bd     ................
1002d9fc:	89da89c0 89dd89dc 89f489e7 8a0389f8     ................
1002da0c:	8a108a16 8a1b8a0c 8a258a1d 8a418a36     ..........%.6.A.
1002da1c:	8a528a5b 8a488a46 8a6d8a7c 8a628a6c     [.R.F.H.|.m.l.b.
1002da2c:	8a828a85 8aa88a84 8a918aa1 8aa68aa5     ................
1002da3c:	8aa38a9a 8acd8ac4 8ada8ac2 8af38aeb     ................
1002da4c:	8ae48ae7 8b148af1 8ae28ae0 8ade8af7     ................
1002da5c:	8b0c8adb 8b1a8b07 8b168ae1 8b178b10     ................
1002da6c:	8b338b20 8b2697ab 8b3e8b2b 8b418b28      .3...&.+.>.(.A.
1002da7c:	8b4f8b4c 8b498b4e 8b5b8b56 8b6b8b5a     L.O.N.I.V.[.Z.k.
1002da8c:	8b6c8b5f 8b748b6f 8b808b7d 8b8e8b8c     _.l.o.t.}.......
1002da9c:	8b938b92 8b998b96 8c3a8b9a 8c3f8c41     ..........:.A.?.
1002daac:	8c4c8c48 8c508c4e 8c628c55 8c788c6c     H.L.N.P.U.b.l.x.
1002dabc:	8c828c7a 8c858c89 8c8d8c8a 8c948c8e     z...............
1002dacc:	8c988c7c 8cad621d 8cbd8caa 8cb38cb2     |....b..........
1002dadc:	8cb68cae 8cc18cc8 8ce38ce4 8cfd8cda     ................
1002daec:	8cfb8cfa 8d058d04 8d078d0a 8d0d8d0f     ................
1002dafc:	9f4e8d10 8ccd8d13 8d168d14 8d6d8d67     ..N.........g.m.
1002db0c:	8d738d71 8d998d81 8dbe8dc2 8dcf8dba     q.s.............
1002db1c:	8dd68dda 8ddb8dcc 8dea8dcb 8ddf8deb     ................
1002db2c:	8dfc8de3 8e098e08 8e1d8dff 8e108e1e     ................
1002db3c:	8e428e1f 8e308e35 8e4a8e34 8e498e47     ..B.5.0.4.J.G.I.
1002db4c:	8e508e4c 8e598e48 8e608e64 8e638e2a     L.P.H.Y.d.`.*.c.
1002db5c:	8e768e55 8e7c8e72 8e878e81 8e848e85     U.v.r.|.........
1002db6c:	8e8a8e8b 8e918e93 8e998e94 8ea18eaa     ................
1002db7c:	8eb08eac 8eb18ec6 8ec58ebe 8ecb8ec8     ................
1002db8c:	8ee38edb 8efb8efc 8efe8eeb 8f058f0a     ................
1002db9c:	8f128f15 8f138f19 8f1f8f1c 8f0c8f1b     ................
1002dbac:	8f338f26 8f398f3b 8f428f45 8f4c8f3e     &.3.;.9.E.B.>.L.
1002dbbc:	8f468f49 8f578f4e 8f628f5c 8f648f63     I.F.N.W.\.b.c.d.
1002dbcc:	8f9f8f9c 8fad8fa3 8fb78faf 8fe58fda     ................
1002dbdc:	8fea8fe2 90878fef 90058ff4 8ffa8ff9     ................
1002dbec:	90159011 900d9021 9016901e 9027900b     ....!.........'.
1002dbfc:	90359036 8ff89039 9050904f 90529051     6.5.9...O.P.Q.R.
1002dc0c:	9049900e 9056903e 905e9058 906f9068     ..I.>.V.X.^.h.o.
1002dc1c:	96a89076 90829072 9081907d 908a9080     v...r...}.......
1002dc2c:	908f9089 90af90a8 90b590b1 90e490e2     ................
1002dc3c:	90db6248 91129102 91329119 914a9130     Hb........2.0.J.
1002dc4c:	91589156 91659163 91739169 918b9172     V.X.c.e.i.s.r...
1002dc5c:	91829189 91ab91a2 91aa91af 91b491b5     ................
1002dc6c:	91c091ba 91c991c1 91d091cb 91df91d6     ................
1002dc7c:	91db91e1 91f591fc 921e91f6 921491ff     ................
1002dc8c:	9215922c 925e9211 92459257 92649249     ,.....^.W.E.I.d.
1002dc9c:	92959248 924b923f 929c9250 92939296     H...?.K.P.......
1002dcac:	925a929b 92b992cf 92e992b7 92fa930f     ..Z.............
1002dcbc:	932e9344 93229319 9323931a 9335933a     D....."...#.:.5.
1002dccc:	935c933b 937c9360 9356936e 93ac93b0     ;.\.`.|.n.V.....
1002dcdc:	939493ad 93d693b9 93e893d7 93d893e5     ................
1002dcec:	93dd93c3 93c893d0 941a93e4 94139414     ................
1002dcfc:	94079403 94369410 9435942b 943a9421     ......6.+.5.!.:.
1002dd0c:	94529441 945b9444 94629460 946a945e     A.R.D.[.`.b.^.j.
1002dd1c:	94709229 94779475 945a947d 947e947c     ).p.u.w.}.Z.|.~.
1002dd2c:	947f9481 95879582 9594958a 95989596     ................
1002dd3c:	95a09599 95a795a8 95bc95ad 95b995bb     ................
1002dd4c:	95ca95be 95c36ff6 95cc95cd 95d495d5     .....o..........
1002dd5c:	95dc95d6 95e595e1 962195e2 962e9628     ..........!.(...
1002dd6c:	9642962f 964f964c 9677964b 965e965c     /.B.L.O.K.w.\.^.
1002dd7c:	965f965d 96729666 968d966c 96959698     ]._.f.r.l.......
1002dd8c:	96aa9697 96b196a7 96b096b2 96b696b4     ................
1002dd9c:	96b996b8 96cb96ce 96cd96c9 96dc894d     ............M...
1002ddac:	96d5970d 970496f9 97089706 970e9713     ................
1002ddbc:	970f9711 97199716 972a9724 97399730     ........$.*.0.9.
1002ddcc:	973e973d 97469744 97429748 975c9749     =.>.D.F.H.B.I.\.
1002dddc:	97649760 97689766 976b52d2 97799771     `.d.f.h..Rk.q.y.
1002ddec:	977c9785 977a9781 978b9786 9790978f     ..|...z.........
1002ddfc:	97a8979c 97a397a6 97b497b3 97c697c3     ................
1002de0c:	97cb97c8 97ed97dc 97f29f4f 97f67adf     ........O....z..
1002de1c:	980f97f5 9838980c 98219824 983d9837     ......8.$.!.7.=.
1002de2c:	984f9846 986b984b 9870986f 98749871     F.O.K.k.o.p.q.t.
1002de3c:	98aa9873 98b198af 98c498b6 98c698c3     s...............
1002de4c:	98eb98e9 99099903 99149912 99219918     ..............!.
1002de5c:	991e991d 99209924 992e992c 993e993d     ....$. .,...=.>.
1002de6c:	99499942 99509945 9951994b 994c9952     B.I.E.P.K.Q.R.L.
1002de7c:	99979955 99a59998 99ae99ad 99df99bc     U...............
1002de8c:	99dd99db 99d199d8 99ee99ed 99f299f1     ................
1002de9c:	99f899fb 9a0f9a01 99e29a05 9a2b9a19     ..............+.
1002deac:	9a459a37 9a409a42 9a3e9a43 9a4d9a55     7.E.B.@.C.>.U.M.
1002debc:	9a579a5b 9a629a5f 9a649a65 9a6b9a69     [.W._.b.e.d.i.k.
1002decc:	9aad9a6a 9abc9ab0 9acf9ac0 9ad39ad1     j...............
1002dedc:	9ade9ad4 9ae29adf 9ae69ae3 9aeb9aef     ................
1002deec:	9af49aee 9af79af1 9b069afb 9b1a9b18     ................
1002defc:	9b229b1f 9b259b23 9b289b27 9b2a9b29     ..".#.%.'.(.).*.
1002df0c:	9b2f9b2e 9b449b32 9b4f9b43 9b4e9b4d     ../.2.D.C.O.M.N.
1002df1c:	9b589b51 9b939b74 9b919b83 9b979b96     Q.X.t...........
1002df2c:	9ba09b9f 9bb49ba8 9bca9bc0 9bc69bb9     ................
1002df3c:	9bd19bcf 9be39bd2 9be49be2 9be19bd4     ................
1002df4c:	9bf29c3a 9bf09bf1 9c149c15 9c139c09     :...............
1002df5c:	9c069c0c 9c129c08 9c049c0a 9c1b9c2e     ................
1002df6c:	9c249c25 9c309c21 9c329c47 9c3e9c46     %.$.!.0.G.2.F.>.
1002df7c:	9c609c5a 9c769c67 9ce79c78 9cf09cec     Z.`.g.v.x.......
1002df8c:	9d089d09 9d039ceb 9d2a9d06 9daf9d26     ..........*.&...
1002df9c:	9d1f9d23 9d159d44 9d419d12 9d3e9d3f     #...D.....A.?.>.
1002dfac:	9d489d46 9d5e9d5d 9d519d64 9d599d50     F.H.].^.d.Q.P.Y.
1002dfbc:	9d899d72 9dab9d87 9d7a9d6f 9da49d9a     r.......o.z.....
1002dfcc:	9db29da9 9dc19dc4 9db89dbb 9dc69dba     ................
1002dfdc:	9dc29dcf 9dd39dd9 9de69df8 9def9ded     ................
1002dfec:	9e1a9dfd 9e1e9e1b 9e799e75 9e819e7d     ........u.y.}...
1002dffc:	9e8b9e88 9e929e8c 9e919e95 9ea59e9d     ................
1002e00c:	9eb89ea9 9ead9eaa 9ecc9761 9ecf9ece     ........a.......
1002e01c:	9ed49ed0 9ede9edc 9ee09edd 9ee89ee5     ................
1002e02c:	9ef49eef 9ef79ef6 9efb9ef9 9efd9efc     ................
1002e03c:	9f089f07 9f1576b7 9f2c9f21 9f4a9f3e     .....v..!.,.>.J.
1002e04c:	9f549f52 9f5f9f63 9f619f60 9f679f66     R.T.c._.`.a.f.g.
1002e05c:	9f6a9f6c 9f729f77 9f959f76 9fa09f9c     l.j.w.r.v.......
1002e06c:	69c7582f 74649059 719951dc              /X.iY.dt.Q.q

1002e078 <b02cf>:
1002e078:	55164e9c 963f5a03 611b54c0 59f66328     .N.U.Z?..T.a(c.Y
1002e088:	84759022 7a50831c 63e160aa 65ed6e25     ".u...Pz.`.c%n.e
1002e098:	82a68466 68939bf5 65a15727 5b9b6271     f......h'W.eqb.[
1002e0a8:	867b59d0 7d6298f4 9b8e7dbe 7c9f6216     .Y{...b}.}...b.|
1002e0b8:	5b8988b7 63095eb5 68486697 978d95c7     ...[.^.c.fHh....
1002e0c8:	4ee5674f 4f4d4f0a 50494f9d 593756f2     Og.N.OMO.OIP.V7Y
1002e0d8:	5a0159d4 60df5c09 6170610f 69056613     .Y.Z.\.`.apa.f.i
1002e0e8:	754f70ba 79fb7570 7def7dad 840e80c3     .pOupu.y.}.}....
1002e0f8:	8b028863 907a9055 4e95533b 57df4ea5     c...U.z.;S.N.N.W
1002e108:	90c180b2 4e0078ef 6ea258f1 7a329038     .....x.N.X.n8.2z
1002e118:	828b8328 51419c2f 54bd5370 56e054e1     (.../.AQpS.T.T.V
1002e128:	5f1559fb 6deb98f2 852d80e4 96709662     .Y._...m..-.b.p.
1002e138:	97fb96a0 53f3540b 70cf5b87 8fc27fbd     .....T.S.[.p....
1002e148:	536f96e8 7aba9d5c 78934e11 6e2681fc     ..oS\..z.N.x..&n
1002e158:	55045618 851a6b1d 59e59c3b 6d6653a9     .V.U.k..;..Y.Sfm
1002e168:	958f74dc 4e915642 96f2904b 990c834f     .t..BV.NK...O...
1002e178:	55b653e1 5f715b30 66f36620 6c386804     .S.U0[q_ f.f.h8l
1002e188:	6d296cf3 76c8745b 98347a4e 885b82f1     .l)m[t.vNz4...[.
1002e198:	92ed8a60 75ab6db2 99c576ca 8b0160a6     `....m.u.v...`..
1002e1a8:	95b28d8a 53ad698e 57125186 59445830     .....i.S.Q.W0XDY
1002e1b8:	5ef65bb4 63a96028 6cbf63f4 708e6f14     .[.^(`.c.c.l.o.p
1002e1c8:	71597114 733f71d5 82767e01 859782d1     .qYq.q?s.~v.....
1002e1d8:	925b9060 58699d1b 6c5a65bc 51f97525     `.[...iX.eZl%u.Q
1002e1e8:	5965592e 5fdc5f80 65fa62bc 6b276a2a     .YeY._._.b.e*j'k
1002e1f8:	738b6bb4 89567fc1 9d0e9d2c 5ca19ec4     .k.s..V.,......\
1002e208:	837b6c96 5c4b5104 81c661b6 72616876     .l{..QK\.a..vhar
1002e218:	4ffa4e59 60695378 7a4f6e29 4e0b97f3     YN.OxSi`)nOz...N
1002e228:	4eee5316 4f3d4f55 4f734fa1 53ef52a0     .S.NUO=O.OsO.R.S
1002e238:	590f5609 5bb65ac1 79d15be1 679c6687     .V.Y.Z.[.[.y.f.g
1002e248:	6b4c67b6 706b6cb3 798d73c2 7a3c79be     .gLk.lkp.s.y.y<z
1002e258:	82b17b87 830482db 83ef8377 876683d3     .{......w.....f.
1002e268:	56298ab2 8fe68ca8 971e904e 4fc4868a     ..)V....N......O
1002e278:	62115ce8 753b7259 82bd81e5 8cc086fe     .\.bYr;u........
1002e288:	991396c5 4ecb99d5 89e34f1a 584a56de     .......N.O...VJX
1002e298:	5efb58ca 602a5feb 60626094 621261d0     .X.^._*`.`b`.a.b
1002e2a8:	653962d0 66669b41 6d7768b0 754c7070     .b9eA.ff.hwmppLu
1002e2b8:	7d757686 87f982a5 968e958b 51f18c9d     .vu}...........Q
1002e2c8:	591652be 5bb354b3 61685d16 6daf6982     .R.Y.T.[.]ha.i.m
1002e2d8:	84cb788d 8a728857 9ab893a7 99a86d6c     .x..W.r.....lm..
1002e2e8:	57a386d9 86ce67ff 5283920e 54045687     ...W.g.....R.V.T
1002e2f8:	62e15ed3 683c64b9 6bbb6838 78ba7372     .^.b.d<h8h.krs.x
1002e308:	899a7a6b 8d6b89d2 90ed8f03 969495a3     kz....k.........
1002e318:	5b669769 697d5cb3 984e984d 7b20639b     i.f[.\}iM.N..c {
1002e328:	6a7f6a2b 9c0d68b6 52726f5f 6070559d     +j.j.h.._orR.Up`
1002e338:	6d3b62ec 6ed16e07 8910845b 4e148f44     .b;m.n.n[...D..N
1002e348:	53f69c39 6a3a691b 682a9784 7ac3515c     9..S.i:j..*h\Q.z
1002e358:	91dc84b2 565b938c 68229d28 84318305     ......[V(."h..1.
1002e368:	52087ca5 74e682c5 4f834e7e 5bd251a0     .|.R...t~N.O.Q.[
1002e378:	52d8520a 5dfb52e7 582a559a 5b8c59e6     .R.R.R.].U*X.Y.[
1002e388:	5bdb5b98 5e795e72 611f60a3 61be6163     .[.[r^y^.`.aca.a
1002e398:	656263db 685367d1 6b3e68fa 6c576b53     .cbe.gSh.h>kSkWl
1002e3a8:	6f976f22 74b06f45 76e37518 7aff770b     "o.oEo.t.u.v.w.z
1002e3b8:	7c217ba1 7f367de9 809d7ff0 839e8266     .{!|.}6.....f...
1002e3c8:	8acc89b3 90848cab 95939451 95a29591     ........Q.......
1002e3d8:	97d39665 82189928 542b4e38 5dcc5cb8     e...(...8N+T.\.]
1002e3e8:	764c73a9 5ca9773c 8d0b7feb 981196c1     .sLv<w.\........
1002e3f8:	98589854 4f0e4f01 559c5371 57fa5668     T.X..O.OqS.UhV.W
1002e408:	5b095947 5c905bc4 5e7e5e0c 63ee5fcc     GY.[.[.\.^~^._.c
1002e418:	65d7673a 671f65e2 68c468cb 5e306a5f     :g.e.e.g.h.h_j0^
1002e428:	6c176bc5 757f6c7d 5b637948 7d007a00     .k.l}l.uHyc[.z.}
1002e438:	898f5fbd 8cb48a18 8ecc8d77 98e28f1d     ._......w.......
1002e448:	9b3c9a0e 507d4e80 59935100 622f5b9c     ..<..N}P.Q.Y.[/b
1002e458:	64ec6280 72a06b3a 79477591 87fb7fa9     .b.d:k.r.uGy....
1002e468:	8b708abc 83ca63ac 540997a0 55ab5403     ..p..c.....T.T.U
1002e478:	6a586854 78278a70 9ecd6775 5ba25374     ThXjp.'xug..tS.[
1002e488:	8650811a 4e189006 4ec74e45 53ca4f11     ..P....NEN.N.O.S
1002e498:	5bae5438 60255f13 673d6551 6c726c42     8T.[._%`Qe=gBlrl
1002e4a8:	70786ce3 7a767403 7b087aae 7cfe7d1a     .lxp.tvz.z.{.}.|
1002e4b8:	65e77d66 53bb725b 5de85c45 62e062d2     f}.e[r.SE\.].b.b
1002e4c8:	6e206319 8a31865a 92f88ddd 79a66f01     .c nZ.1......o.y
1002e4d8:	4ea89b5a 4eac4eab 4fa04f9b 514750d1     Z..N.N.N.O.O.PGQ
1002e4e8:	51717af6 535451f6 537f5321 55ac53eb     .zqQ.QTS!S.S.S.U
1002e4f8:	5ce15883 5f4a5f37 6050602f 631f606d     .X.\7_J_/`P`m`.c
1002e508:	6a4b6559 72c26cc1 77ef72ed 810580f8     YeKj.l.r.r.w....
1002e518:	854e8208 93e190f7 995797ff 4ef09a5a     ..N.......W.Z..N
1002e528:	5c2d51dd 696d6681 66f25c40 73896975     .Q-\.fmi@\.fui.s
1002e538:	7c816850 52e450c5 5dfe5747 65a49326     Ph.|.P.RGW.]&..e
1002e548:	6b3d6b23 79817434 7b4b79bd 82b97dca     #k=k4t.y.yK{.}..
1002e558:	887f83cc 8b39895f 91d18fd1 9280541f     ...._.9......T..
1002e568:	50364e5d 533a53e5 739672d7 82e677e9     ]N6P.S:S.r.s.w..
1002e578:	99c68eaf 99d299c8 611a5177 55b0865e     ........wQ.a^..U
1002e588:	50767a7a 90475bd3 4e329685 91e76adb     zzvP.[G...2N.j..
1002e598:	5c485c51 7a9f6398 97746c93 7aaa8f61     Q\H\.c.z.lt.a..z
1002e5a8:	9688718a 68177c82 68517e70 52f2936c     .q...|.hp~Qhl..R
1002e5b8:	85ab541b 7fa48a13 90e18ecd 88885366     .T..........fS..
1002e5c8:	4fc27941 521150be 55535144 73ea572d     Ay.O.P.RDQSU-W.s
1002e5d8:	5951578b 5f845f62 61766075 61a96167     .WQYb_._u`vaga.a
1002e5e8:	643a63b2 666f656c 6e136842 7a3d7566     .c:dleofBh.nfu=z
1002e5f8:	7d4c7cfb 7e4b7d99 830e7f6b 86cd834a     .|L}.}K~k...J...
1002e608:	8a638a08 8efd8b66 9d8f981a 8fce82b8     ..c.f...........
1002e618:	52879be8 6483621f 96996fc0 50916841     ...R.b.d.o..Ah.P
1002e628:	6c7a6b20 7a746f54 88407d50 67088a23      kzlTotzP}@.#..g
1002e638:	50394ef6 50655026 5238517c 55a75263     .N9P&PeP|Q8RcR.U
1002e648:	5805570f 5efa5acc 61f861b2 637262f3     .W.X.Z.^.a.a.brc
1002e658:	6a29691c 72ac727d 7814732e 7d79786f     .i)j}r.r.s.xoxy}
1002e668:	80a9770c 8b19898b 8ed28ce2 93759063     .w..........c.u.
1002e678:	9855967a 9e789a13 539f5143 5e7b53b3     z.U...x.CQ.S.S{^
1002e688:	6e1b5f26 73846e90 7d4373fe 8a008237     &_.n.n.s.sC}7...
1002e698:	96508afa 500b4e4e 547c53e4 59d156fa     ..P.NN.P.S|T.V.Y
1002e6a8:	5df15b64 5f275eab 65456238 6e5667af     d[.].^'_8bEe.gVn
1002e6b8:	7cca72d0 80a188b4 83f080e1 8a87864e     .r.|........N...
1002e6c8:	92378de8 986796c7 4e949f13 4f0d4e92     ..7...g....N.N.O
1002e6d8:	54495348 5a2f543e 5fa15f8c 68a7609f     HSIT>T/Z._._.`.h
1002e6e8:	745a6a8e 8a9e7881 8b778aa4 4e5e9190     .jZt.x....w...^N
1002e6f8:	4ea49bc9 4faf4f7c 50165019 516c5149     ...N|O.O.P.PIQlQ
1002e708:	52b9529f 539a52fe 541153e3 5589540e     .R.R.R.S.S.T.T.U
1002e718:	57a25751 5b54597d 5b8f5b5d 5de75de5     QW.W}YT[][.[.].]
1002e728:	5e785df7 5e9a5e83 5f185eb7 614c6052     .]x^.^.^.^._R`La
1002e738:	62d86297 653b63a7 66436602 676d66f4     .b.b.c;e.fCf.fmg
1002e748:	68976821 6c5f69cb 6d696d2a 6e9d6e2f     !h.h.i_l*mim/n.n
1002e758:	76877532 7a3f786c 7d057ce0 7d5e7d18     2u.vlx?z.|.}.}^}
1002e768:	80157db1 80af8003 815480b1 822a818f     .}........T...*.
1002e778:	884c8352 8b1b8861 8cfc8ca2 917590ca     R.L.a.........u.
1002e788:	783f9271 95a492fc 9805964d 9ad89999     q.?x....M.......
1002e798:	525b9d3b 53f752ab 58d55408 6fe062f7     ;.[R.R.S.T.X.b.o
1002e7a8:	8f5f8c6a 514b9eb9 544a523b 7a4056fd     j._...KQ;RJT.V@z
1002e7b8:	9d609177 73449ed2 81706f09 5ffd7511     w.`...Ds.op..u._
1002e7c8:	9aa860da 8fbc72db 98036b64 56f04eca     .`...r..dk...N.V
1002e7d8:	58be5764 60685a5a 660f61c7 68396606     dW.XZZh`.a.f.f9h
1002e7e8:	6df768b1 7d3a75d5 9b42826e 4f504e9b     .h.m.u:}n.B..NPO
1002e7f8:	550653c9 5de65d6f 67fb5dee 74736c99     .S.Uo].].].g.lst
1002e808:	8a507802 88df9396 5ea75750 50b5632b     .xP.....PW.^+c.P
1002e818:	518d50ac 54c96700 59bb585e 5f695bb0     .P.Q.g.T^X.Y.[i_
1002e828:	63a1624d 6b73683d 707d6e08 728091c7     Mb.c=hsk.n}p...r
1002e838:	78267815 658e796d 83dc7d30 8f0988c1     .x&xmy.e0}......
1002e848:	5264969b 67505728 8ca17f6a 574251b4     ..dR(WPgj....QBW
1002e858:	583a962a 80b4698a 5d0e54b2 789557fc     *.:X.i...T.].W.x
1002e868:	4f5c9dfa 548b524a 6628643e 67f56714     ..\OJR.T>d(f.g.g
1002e878:	7b567a84 932f7d22 9bad685c 53197b39     .zV{"}/.\h..9{.S
1002e888:	5237518a 62f65bdf 64e664ae 6bba672d     .Q7R.[.b.d.d-g.k
1002e898:	96d185a9 9bd67690 9306634c 76bf9bab     .....v..Lc.....v
1002e8a8:	4e096652 53c25098 60e85c71 65636492     Rf.N.P.Sq\.`.dce
1002e8b8:	71e6685f 752373ca 7e827b97 8b838695     _h.q.s#u.{.~....
1002e8c8:	91788cdb 65ac9910 6b8b66ab 4ed44ed5     ..x....e.f.k.N.N
1002e8d8:	4f7f4f3a 53f8523a 55e353f2 58eb56db     :O.O:R.S.S.U.V.X
1002e8e8:	59c959cb 5b5059ff 5e025c4d 5fd75e2b     .Y.Y.YP[M\.^+^._
1002e8f8:	6307601d 5b5c652f 65bd65af 679d65e8     .`.c/e\[.e.e.e.g
1002e908:	6b7b6b62 73456c0f 79c17949 7d197cf8     bk{k.lEsIy.y.|.}
1002e918:	80a27d2b 81f38102 8a5e8996 8a668a69     +}........^.i.f.
1002e928:	8aee8a8c 8cdc8cc7 98fc96cc 4e8b6b6f     ............ok.N
1002e938:	4f8d4f3c 5b575150 61485bfa 66426301     <O.OPQW[.[Ha.cBf
1002e948:	6ecb6b21 723e6cbb 75d474bd 793a78c1     !k.n.l>r.t.u.x:y
1002e958:	8033800c 849481ea 6c508f9e 5f0f9e7f     ..3.......Pl..._
1002e968:	9d2b8b58 8ef87afa 96eb5b8d 53f14e03     X.+..z...[...N.S
1002e978:	593157f7 5ba45ac9 6e7f6089 75be6f06     .W1Y.Z.[.`.n.o.u
1002e988:	5b9f8cea 7be08500 67f45072 5c61829d     ...[...{rP.g..a\
1002e998:	7e1e854a 5199820e 63685c04 659c8d66     J..~...Q.\hcf..e
1002e9a8:	793e716e 80057d17 8eca8b1d 86c7906e     nq>y.}......n...
1002e9b8:	501f90aa 5c3a52fa 707c6753 914c7235     ...P.R:\Sg|p5rL.
1002e9c8:	932b91c8 5bc282e5 60f95f31 53d64e3b     ..+....[1_.`;N.S
1002e9d8:	624b5b88 6b8a6731 73e072e9 816b7a2e     .[Kb1g.k.r.s.zk.
1002e9e8:	91528da3 51129996 546a53d7 63885bff     ..R....Q.SjT.[.c
1002e9f8:	7dac6a39 56da9700 546853ce 5c315b97     9j.}...V.ShT.[1\
1002ea08:	4fee5dde 62fe6101 79c06d32 7d4279cb     .].O.a.b2m.y.yB}
1002ea18:	7fd27e4d 821f81ed 88468490 8b908972     M~........F.r...
1002ea28:	8f2f8e74 914b9031 96c6916c 4ec0919c     t./.1.K.l......N
1002ea38:	51454f4f 5f935341 67d4620e 6e0b6c41     OOEQAS._.b.gAl.n
1002ea48:	7e267363 928391cd 591953d4 6dd15bbf     cs&~.....S.Y.[.m
1002ea58:	7e2e795d 587e7c9b 51fa719f 8ff08853     ]y.~.|~X.q.QS...
1002ea68:	5cfb4fca 77ac6625 821c7ae3 51c699ff     .O.\%f.w.z.....Q
1002ea78:	65ec5faa 6b89696f 6e966df3 76fe6f64     ._.eoi.k.m.ndo.v
1002ea88:	5de17d14 91879075 51e69806 6240521d     .}.]u......Q.R@b
1002ea98:	66d96691 5eb66e1a 7f727dd2 85af66f8     .f.f.n.^.}r..f..
1002eaa8:	8af885f7 53d952a9 5e8f5973 60555f90     .....R.SsY.^._U`
1002eab8:	966492e4 511f50b7 532052dd 53ec5347     ..d..P.Q.R SGS.S
1002eac8:	554654e8 56175531 59be5968 5bb55a3c     .TFU1U.VhY.Y<Z.[
1002ead8:	5c0f5c06 5c1a5c11 5e8a5e84 5f705ee0     .\.\.\.\.^.^.^p_
1002eae8:	6284627f 638c62db 66076377 662d660c     .b.b.b.cwc.f.f-f
1002eaf8:	677e6676 6a1f68a2 6cbc6a35 6e096d88     vf~g.h.j5j.l.m.n
1002eb08:	713c6e58 71677126 770175c7 7901785d     Xn<q&qgq.u.w]x.y
1002eb18:	79f07965 7b117ae0 7d397ca7 83d68096     ey.y.z.{.|9}....
1002eb28:	8549848b 88f3885d 8a3c8a1f 8a738a54     ..I.].....<.T.s.
1002eb38:	8cde8c61 926691a4 9418937e 9798969c     a.....f.~.......
1002eb48:	4e084e0a 4e574e1e 52705197 583457ce     .N.N.NWN.QpR.W4X
1002eb58:	5b2258cc 60c55e38 676164fe 6d446756     .X"[8^.`.dagVgDm
1002eb68:	757372b6 84b87a63 91b88b72 56319320     .rsucz..r... .1V
1002eb78:	98fe57f4 690d62ed 71ed6b96 80777e54     .W...b.i.k.qT~w.
1002eb88:	89e68272 875598df 5c3b8fb1 4fe14f38     r.....U...;\8O.O
1002eb98:	55074fb5 5bdd5a20 5fc35be9 632f614e     .O.U Z.[.[._Na/c
1002eba8:	664b65b0 699b68ee 6df16d78 75b97533     .eKf.h.ixm.m3u.u
1002ebb8:	795e771f 7d3379e6 82af81e3 89aa85aa     .w^y.y3}........
1002ebc8:	8eab8a3a 90328f9b 970791dd 4ec14eba     :.....2......N.N
1002ebd8:	58755203 5c0b58ec 5c3d751a 8a0a814e     .RuX.X.\.u=\N...
1002ebe8:	96638fc5 7b25976d 98088acf 56f39162     ..c.m.%{....b..V
1002ebf8:	901753a8 57825439 63a85e25 708a6c34     .S..9T.W%^.c4l.p
1002ec08:	7c8b7761 88707fe0 91549042 93189310     aw.|..p.B.T.....
1002ec18:	745e968f 5d079ac4 65705d69 8da867a2     ..^t...]i]pe.g..
1002ec28:	636e96db 69196749 981783c5 88fe96c0     ..ncIg.i........
1002ec38:	647a6f84 4e165bf8 755d702c 51c4662f     .ozd.[.N,p]u/f.Q
1002ec48:	52e25236 5f8159d3 62106027 6574653f     6R.R.Y._'`.b?ete
1002ec58:	6674661f 681668f2 6e056b63 751f7272     .ftf.h.hck.nrr.u
1002ec68:	7cbe76db 58f08056 897f88fd 8a938aa0     .v.|V..X........
1002ec78:	901d8acb 97529192 65899759 81067a0e     ......R.Y..e.z..
1002ec88:	5e2d96bb 621a60dc 661465a5 77f36790     ..-^.`.b.e.f.g.w
1002ec98:	7c4d7a4d 810a7e3e 8d648cac 8e5f8de1     MzM|>~....d..._.
1002eca8:	520778a9 63a562d9 62986442 7a838a2d     .x.R.b.cBd.b-..z
1002ecb8:	8aac7bc0 7d7696ea 8749820c 51484ed9     .{....v}..I..NHQ
1002ecc8:	53605343 5c025ba3 5ddd5c16 62476226     CS`S.[.\.\.]&bGb
1002ecd8:	681364b0 6cc96834 6d176d45 6f5c67d3     .d.h4h.lEm.m.g\o
1002ece8:	717d714e 7a7f65cb 7dda7bad 7fa87e4a     Nq}q.e.z.{.}J~..
1002ecf8:	821b817a 85a68239 8cce8a6e 90788df5     z...9...n.....x.
1002ed08:	92ad9077 95839291 524d9bae 6f385584     w.........MR.U8o
1002ed18:	51687136 7e557985 7cce81b3 5851564c     6qhQ.yU~...|LVQX
1002ed28:	63aa5ca8 66fd66fe 72d9695a 758e758f     .\.c.f.fZi.r.u.u
1002ed38:	7956790e 7c9779df 7d447d20 8a348607     .yVy.y.| }D}..4.
1002ed48:	9061963b 50e79f20 53cc5275 500953e2     ;.a. ..PuR.S.S.P
1002ed58:	58ee55aa 723d594f 5c645b8b 60e3531d     .U.XOY=r.[d\.S.`
1002ed68:	635c60f3 633f6383 64cd63bb 66f965e9     .`\c.c?c.c.d.e.f
1002ed78:	69cd5de3 6f1569fd 4e8971e5 76f875e9     .].i.i.o.q.N.u.v
1002ed88:	7cdf7a93 7d9c7dcf 83498061 846c8358     .z.|.}.}a.I.X.l.
1002ed98:	85fb84bc 8d7088c5 906d9001 971c9397     ......p...m.....
1002eda8:	50cf9a12 618e5897 853581d3 90208d08     ...P.X.a..5... .
1002edb8:	50744fc3 53735247 6349606f 6e2c675f     .OtPGRsSo`Ic_g,n
1002edc8:	901f8db3 5c5e4fd7 65cf8cca 53527d9a     .....O^\...e.}RS
1002edd8:	51768896 5b5863c3 5c0a5b6b 6751640d     ..vQ.cX[k[.\.dQg
1002ede8:	4ed6905c 592a591a 8a516c70 5815553e     \..N.Y*YplQ.>U.X
1002edf8:	60f059a5 67c16253 69558235 99c49640     .Y.`Sb.g5.Ui@...
1002ee08:	4f539a28 5bfe5806 5cb18010 5f855e2f     (.SO.X.[...\/^._
1002ee18:	614b6020 66ff6234 6ede6cf0 817f80ce      `Ka4b.f.l.n....
1002ee28:	888b82d4 90008cb8 968a902e 9bdb9edb     ................
1002ee38:	53f04ee3 7b2c5927 984c918d 6edd9df9     .N.S'Y,{..L....n
1002ee48:	53537027 5b855544 629e6258 6ca262d3     'pSSDU.[Xb.b.b.l
1002ee58:	74226fef 94388a17 8afe6fc1 51e78338     .o"t..8..o..8..Q
1002ee68:	53ea86f8 4f4653e9 8fb09054 8131596a     ...S.SFOT...jY1.
1002ee78:	7aea5dfd 68da8fbf 72f88c37 6a3d9c48     .].z...h7..rH.=j
1002ee88:	4e398ab0 56065358 62c55766 65e663a2     ..9NXS.VfW.b.c.e
1002ee98:	6de16b4e 70ad6e5b 7aef77ed 7dbb7baa     Nk.m[n.p.w.z.{.}
1002eea8:	80c6803d 8a9586cb 56e3935b 5f3e58c7     =.......[..V.X>_
1002eeb8:	669665ad 6bb56a80 8ac77537 77e55024     .e.f.j.k7u..$P.w
1002eec8:	5f1b5730 667a6065 75f46c60 7f6e7a1a     0W._e`zf`l.u.zn.
1002eed8:	871881f4 99b39045 755c7bc9 7b517af9     ....E....{\u.zQ{
1002eee8:	901084c4 7a9279e9 5ae18336 4e2d7740     .....y.z6..Z@w-N
1002eef8:	5b994ef2 62bd5fe0 67f1663c 866b6ce8     .N.[._.b<f.g.lk.
1002ef08:	8a3b8877 92f3914e 6a1799d0 732a7026     w.;.N......j&p*s
1002ef18:	845782e7 4e018caf 51cb5146 5bf5558b     ..W....NFQ.Q.U.[
1002ef28:	5e335e16 5f145e81 5f6b5f35 61f25fb4     .^3^.^._5_k_._.a
1002ef38:	66a26311 6f6e671d 753a7252 8074773a     .c.f.gnoRr:u:wt.
1002ef48:	81788139 8abf8776 8d858adc 929a8df3     9.x.v...........
1002ef58:	98029577 52c59ce5 76f46357 6c886715     w......RWc.v.g.l
1002ef68:	8cc373cd 967393ae 589c6d25 69cc690e     .s....s.%m.X.i.i
1002ef78:	939a8ffd 901a75db 6802585a 69fb63b4     .....u..ZX.h.c.i
1002ef88:	6f2c4f43 8fbb67d8 7db48526 693f9354     CO,o.g..&..}T.?i
1002ef98:	576a6f70 5b2c58f7 722a7d2c 91e3540a     pojW.X,[,}*r.T..
1002efa8:	4ead9db4 505c4f4e 52435075 54488c9e     ...NNO\PuPCR..HT
1002efb8:	5b9a5824 5e955e1d 5ef75ead 608c5f1f     $X.[.^.^.^.^._.`
1002efc8:	633a62b5 68af63d0 78876c40 7a0b798e     .b:c.c.h@l.x.y.z
1002efd8:	82477de0 8ae68a02 90138e44 912d90b8     .}G.....D.....-.
1002efe8:	9f0e91d8 64586ce5 657564e2 76846ef4     .....lXd.due.n.v
1002eff8:	90697b1b 6eba93d1 5fb954f2 8f4d64a4     .{i....n.T._.dM.
1002f008:	92448fed 586b5178 5c555929 6dfb5e97     ..D.xQkX)YU\.^.m
1002f018:	751c7e8f 8ee28cbc 70b9985b 6bbf4f1d     .~.u....[..p.O.k
1002f028:	75306fb1 514e96fb 58355410 59ac5857     .o0u..NQ.T5XWX.Y
1002f038:	5f925c60 675c6597 767b6e21 8ced83df     `\._.e\g!n{v....
1002f048:	90fd9014 7825934d 52aa783a 571f5ea6     ....M.%x:x.R.^.W
1002f058:	60125974 515a5012 51cd51ac 55105200     tY.`.PZQ.Q.Q.R.U
1002f068:	58585854 5b955957 5d8b5cf6 629560bc     TXXXWY.[.\.].`.b
1002f078:	6771642d 68bc6843 76d768df 6e6f6dd8     -dqgCh.h.h.v.mon
1002f088:	706f6d9b 5f5371c8 797775d8 7b547b49     .mop.qS_.uwyI{T{
1002f098:	7cd67b52 52307d71 85698463 8a0e85e4     R{.|q}0Rc.i.....
1002f0a8:	8c468b04 90038e0f 9419900f 982d9676     ..F.........v.-.
1002f0b8:	95d89a30 52d550cd 5802540c 61a75c0e     0....P.R.T.X.\.a
1002f0c8:	6d1e649e 7ae577b3 840480f4 92859053     .d.m.w.z....S...
1002f0d8:	9d075ce0 5f97533f 6d9c5fb3 77637279     .\..?S._._.myrcw
1002f0e8:	7be479bf 72ec6bd2 68038aad 51f86a61     .y.{.k.r...haj.Q
1002f0f8:	69347a81 9cf65c4a 5bc582eb 701e9149     .z4iJ\.....[I..p
1002f108:	5c6f5678 656660c7 8c5a6c8c 98139041     xVo\.`fe.lZ.A...
1002f118:	66c75451 5948920d 518590a3 51ea4e4d     QT.f..HY...QMN.Q
1002f128:	8b0e8599 637a7058 6962934b 7e0499b4     ....XpzcK.bi...~
1002f138:	53577577 8edf6960 6c5d96e3 5c3c4e8c     wuWS`i....]l.N<\
1002f148:	8fe95f10 8cd15302 86798089 65e55eff     ._...S....y..^.e
1002f158:	51654e73 5c3f5982 4efb97ee 5fcd598a     sNeQ.Y?\...N.Y._
1002f168:	6fe18a8d 796279b0 84715be7 71b1732b     ...o.yby.[q.+s.q
1002f178:	5ff55e74 649a637b 7c9871c3 5efc4e43     t^._{c.d.q.|CN.^
1002f188:	57dc4e4b 60a956a2 7d0d6fc3 813380fd     KN.W.V.`.o.}..3.
1002f198:	8fb281bf 86a48997 628a5df4 898764ad     .........].b.d..
1002f1a8:	6ce26777 74366d3e 5a467834 82ad7f75     wg.l>m6t4xFZu...
1002f1b8:	4ff399ac 62dd5ec3 65576392 76c3676f     ...O.^.b.cWeog.v
1002f1c8:	80cc724c 8f2980ba 500d914d 5a9257f9     Lr....).M..P.W.Z
1002f1d8:	69736885 72fd7164 58f28cb7 966a8ce0     .hsidq.r...X..j.
1002f1e8:	877f9019 77e779e4 4f2f8429 535a5265     .....y.w)./OeRZS
1002f1f8:	67cf62cd 767d6cca 7c957b94 85848236     .b.g.l}v.{.|6...
1002f208:	66dd8feb 72066f20 83ab7e1b 9ea699c1     ...f o.r.~......
1002f218:	7bb151fd 7bb87872 7b488087 5e616ae8     .Q.{rx.{..H{.ja^
1002f228:	7551808c 516b7560 6e8c9262 9197767a     ..Qu`ukQb..nzv..
1002f238:	4f109aea 629c7f70 95a57b4f 567a9ce9     ...Op..bO{....zV
1002f248:	86e45859 4f3496bc 534a5224 53db53cd     YX....4O$RJS.S.S
1002f258:	642c5e06 677f6591 6c4e6c3e 72af7248     .^,d.e.g>lNlHr.r
1002f268:	755473ed 822c7e41 8ca985e9 91c67bc4     .sTuA~,......{..
1002f278:	98127169 633d98ef 756a6669 78d076e4     iq....=cifju.v.x
1002f288:	86ee8543 5351532a 59835426 5f7c5e87     C...*SQS&T.Y.^|_
1002f298:	624960b2 62ab6279 6bd46590 75b26ccc     .`Ibyb.b.e.k.l.u
1002f2a8:	789176ae 7dcb79d8 80a57f77 8ab988ab     .v.x.y.}w.......
1002f2b8:	907f8cbb 98db975e 7c386a0b 5c3e5099     ....^....j8|.P>\
1002f2c8:	67875fae 74356bd8 7f8e7709 67ca9f3b     ._.g.k5t.w..;..g
1002f2d8:	53397a17 9aed758b 819d5f66 809883f1     .z9S.u..f_......
1002f2e8:	5fc55f3c 7b467562 6867903c 5a9b59eb     <_._buF{<.gh.Y.Z
1002f2f8:	767e7d10 4ff58b2c 6a195f6a 6f026c37     .}~v,..Oj_.j7l.o
1002f308:	796874e2 8a558868 5edf8c79 75c563cf     .thyh.U.y..^.c.u
1002f318:	82d779d2 92f29328 86ed849c 54c19c2d     .y..(.......-..T
1002f328:	658c5f6c 70156d5c 8cd38ca7 654f983b     l_.e\m.p....;.Oe
1002f338:	4e0d74f6 57e04ed8 5a66592b 51a85bcc     .t.N.N.W+YfZ.[.Q
1002f348:	5e9c5e03 62766016 65a76577 6d6e666e     .^.^.`vbwe.enfnm
1002f358:	7b267236 819a8150 8b5c8299 8ce68ca0     6r&{P.....\.....
1002f368:	961c8d74 4fae9644 6b6664ab 8461821e     t...D..O.dfk..a.
1002f378:	90e8856a 69535c01 847a98a8 4f0f8557     j....\Si..z.W..O
1002f388:	5fa9526f 670d5e45 8179798f 89868907     oR._E^.g.yy.....
1002f398:	5f176df5 6cb86255 72694ecf 52069b92     .m._Ub.l.Nir...R
1002f3a8:	5674543b 61a458b3 711a626e 7c89596e     ;TtV.X.anb.qnY.|
1002f3b8:	7d1b7cde 658796f0 4e19805e 51754f75     .|.}...e^..NuOuQ
1002f3c8:	5e635840 5f0a5e73 4e2667c4 9589853d     @Xc^s^._.g&N=...
1002f3d8:	7c73965b 50fb9801 765658c1 522578a7     [.s|...P.XVv.x%R
1002f3e8:	851177a5 504f7b86 72475909 7de87bc7     .w...{OP.YGr.{.}
1002f3f8:	8fd48fba 4fbf904d 5a2952c9 97ad5f01     ....M..O.R)Z._..
1002f408:	82174fdd 570392ea 6b696355 88dc752b     .O.....WUcik+u..
1002f418:	7a428f14 589352df 620a6155 6bcd66ae     ..Bz.R.XUa.b.f.k
1002f428:	83e97c3f 4ff85023 54465305 59495831     ?|..#P.O.SFT1XIY
1002f438:	5cf05b9d 5d295cef 62b15e96 653e6367     .[.\.\)].^.bgc>e
1002f448:	670b65b9 6ce16cd5 783270f9 80de7e2b     .e.g.l.l.p2x+~..
1002f458:	840c82b3 870284ec 8a2a8912 90a68c4a     ..........*.J...
1002f468:	98fd92d2 9d6c9cf3 4ea14e4f 5256508d     ......l.ON.N.PVR
1002f478:	59a8574a 5fd85e3d 623f5fd9 671b66b4     JW.Y=^._._?b.f.g
1002f488:	68d267d0 7d215192 81a880aa 8c8c8b00     .g.h.Q!}........
1002f498:	927e8cbf 54209632 5317982c 535c50d5     ..~.2. T,..S.P\S
1002f4a8:	64b258a8 72676734 7a467766 52c391e6     .X.d4ggrfwFz...R
1002f4b8:	6b866ca1 5e4c5800 672c5954 51e17ffb     .l.k.XL^TY,g...Q
1002f4c8:	646976c6 9b5478e8 57cb9ebb 662759b9     .vid.xT....W.Y'f
1002f4d8:	6bce679a 69d954e9 819c5e55 9baa6795     .g.k.T.iU^...g..
1002f4e8:	9c5267fe 4ea6685d 53c84fe3 672b62b9     .gR.]h.N.O.S.b+g
1002f4f8:	8fc46cab 7e6d4fad 4e079ebf 6e806162     .l...Om~...Nba.n
1002f508:	85136f2b 672a5473 5df39b45 5cac7b95     +o..sT*gE..].{.\
1002f518:	871c5bc6 84d16e4a 81087a14 7c8d5999     .[..Jn...z...Y.|
1002f528:	77206c11 592252d9 725f7121 972777db     .l w.R"Y!q_r.w'.
1002f538:	690b9d61 5a185a7f 540d51a5 660e547d     a..i.Z.Z.Q.T}T.f
1002f548:	8ff776df 9cf49298 725d59ea 514d6ec5     .v.......Y]r.nMQ
1002f558:	7dbf68c9 97627dec 64789eba 83026a21     .h.}.}b...xd!j..
1002f568:	5b5f5984 731b6bdb 7db276f2 84998017     .Y_[.k.s.v.}....
1002f578:	67285132 76ee9ed9 52ff6762 5c249905     2Q(g...vbg.R..$\
1002f588:	7c7e623b 554f8cb0 7d0b60b6 53019580     ;b~|..OU.`.}...S
1002f598:	51b64e5f 723a591c 91ce8036 77e25f25     _N.Q.Y:r6...%_.w
1002f5a8:	5f795384 85ac7d04 8e8d8a33 67f39756     .Sy_.}..3...V..g
1002f5b8:	945385ae 61086109 76526cb9 8f388aed     ..S..a.a.lRv..8.
1002f5c8:	4f51552f 52c7512a 5ba553cb 60a05e7d     /UQO*Q.R.S.[}^.`
1002f5d8:	63d66182 67da6709 6d8c6e67 73377336     .a.c.g.ggn.m6s7s
1002f5e8:	79507531 8a9888d5 9091904a 96c490f5     1uPy....J.......
1002f5f8:	5915878d 4f594e88 8a894e0e 98108f3f     ...Y.NYO.N..?...
1002f608:	5e7c50ad 5bb95996 63da5eb8 64c163fa     .P|^.Y.[.^.c.c.d
1002f618:	694a66dc 6d0b69d8 71946eb6 7aaf7528     .fJi.i.m.n.q(u.z
1002f628:	80007f8a 84c98449 8b218981 90658e0a     ....I.....!...e.
1002f638:	990a967d 6291617e 6c836b32 7fcc6d74     }...~a.b2k.ltm..
1002f648:	6dc07ffc 87ba7f85 676588f8 983c83b1     ...m......eg..<.
1002f658:	6d1b96f7 843d7d61 4e71916a 5d505375     ...ma}=.j.qNuSP]
1002f668:	6feb6b04 862d85cd 522989a7 5c65540f     .k.o..-...)R.Te\
1002f678:	68a8674e 74837406 88cf75e2 91cc88e1     Ng.h.t.t.u......
1002f688:	967896e2 73875f8b 844e7acb 756563a0     ..x.._.s.zN..ceu
1002f698:	6d415289 74096e9c 786b7559 96867c92     .RAm.n.tYukx.|..
1002f6a8:	9f8d7adc 616e4fb6 865c65c5 4eae4e86     .z...Ona.e\..N.N
1002f6b8:	4e2150da 5bee51cc 68816599 731f6dbc     .P!N.Q.[.e.h.m.s
1002f6c8:	77ad7642 7ce77a1c 8ad2826f 91cf907c     Bv.w.z.|o...|...
1002f6d8:	98189675 7dd1529b 5398502b 6dcb6797     u....R.}+P.S.g.m
1002f6e8:	743371d0 8f2a81e8 9c5796a3 74609e9f     .q3t..*...W...`t
1002f6f8:	6d995841 985e7d2f 4f364ee4 51b74f8b     AX.m/}^..N6O.O.Q
1002f708:	5dba52b1 73b2601c 82d3793c 96b79234     .R.].`.s<y..4...
1002f718:	970a96f6 9f629e97 6b7466a6 52a35217     ......b..ftk.R.R
1002f728:	88c270c8 604b5ec9 6f236190 7c3e7149     .p...^K`.a#oIq>|
1002f738:	806f7df4 902384ee 5442932c 6ad39b6f     .}o...#.,.BTo..j
1002f748:	8cc27089 97328def 5a4152b4 5f045eca     .p....2..RAZ.^._
1002f758:	697c6717 6d6a6994 72626f0f 7bed72fc     .g|i.ijm.obr.r.{
1002f768:	807e8001 90ce874b 9e93516d 808b7984     ..~.K...mQ...y..
1002f778:	8ad69332 548c502d 6b6a8a71 81078cc4     2...-P.Tq.jk....
1002f788:	67a060d1 4e999df2 9c104e98 85c18a6b     .`.g...N.N..k...
1002f798:	69008568 78976e7e 00008155              h..i~n.xU...

1002f7a4 <a8>:
1002f7a4:	25022500 2510250c 25142518 252c251c     .%.%.%.%.%.%.%,%
1002f7b4:	25342524 2501253c 250f2503 251b2513     $%4%<%.%.%.%.%.%
1002f7c4:	25232517 252b2533 254b253b 252f2520     .%#%3%+%;%K% %/%
1002f7d4:	25372528 251d253f 25252530 25422538     (%7%?%.%0%%%8%B%

1002f7e4 <a7>:
1002f7e4:	04110410 04130412 04150414 04160401     ................
1002f7f4:	04180417 041a0419 041c041b 041e041d     ................
1002f804:	0420041f 04220421 04240423 04260425     .. .!.".#.$.%.&.
1002f814:	04280427 042a0429 042c042b 042e042d     '.(.).*.+.,.-...
1002f824:	0000042f 00000000 00000000 00000000     /...............
	...
1002f844:	04310430 04330432 04350434 04360451     0.1.2.3.4.5.Q.6.
1002f854:	04380437 043a0439 043c043b 043e043d     7.8.9.:.;.<.=.>.
1002f864:	0440043f 04420441 04440443 04460445     ?.@.A.B.C.D.E.F.
1002f874:	04480447 044a0449 044c044b 044e044d     G.H.I.J.K.L.M.N.
1002f884:	0000044f                                O...

1002f888 <a6>:
1002f888:	03920391 03940393 03960395 03980397     ................
1002f898:	039a0399 039c039b 039e039d 03a0039f     ................
1002f8a8:	03a303a1 03a503a4 03a703a6 03a903a8     ................
	...
1002f8c8:	03b203b1 03b403b3 03b603b5 03b803b7     ................
1002f8d8:	03ba03b9 03bc03bb 03be03bd 03c003bf     ................
1002f8e8:	03c303c1 03c503c4 03c703c6 03c903c8     ................

1002f8f8 <a3>:
	...
1002f904:	01000000 01010101 01010101 00000001     ................
1002f914:	00000000 01010101 01010101 01010101     ................
1002f924:	01010101 01010101 01010101 00000101     ................
1002f934:	00000000 01010100 01010101 01010101     ................
1002f944:	01010101 01010101 01010101 00010101     ................

1002f954 <a2>:
1002f954:	25a125c6 25b325a0 25bd25b2 203b25bc     .%.%.%.%.%.%.%; 
1002f964:	21923012 21912190 30132193 00000000     .0.!.!.!.!.0....
	...
1002f984:	22080000 2286220b 22822287 222a2283     ..."."."."."."*"
1002f994:	00002229 00000000 00000000 00000000     )"..............
1002f9a4:	22270000 00ac2228 21d421d2 22032200     ..'"("...!.!."."
1002f9b4:	00002229 00000000 00000000 00000000     )"..............
1002f9c4:	00000000 22200000 231222a5 22072202     ...... ".".#."."
1002f9d4:	22522261 226b226a 223d221a 2235221d     a"R"j"k"."="."5"
1002f9e4:	222c222b 00000000 00000000 00000000     +","............
1002f9f4:	212b0000 266f2030 266a266d 20212020     ..+!0 o&m&j&  ! 
1002fa04:	222c00b6 00000000 25ef0000              ..,".......%

1002fa10 <a1>:
1002fa10:	30013000 ff0c3002 30fbff0e ff1bff1a     .0.0.0.....0....
1002fa20:	ff01ff1f 309c309b ff4000b4 ff3e00a8     .....0.0..@...>.
1002fa30:	ff3f203e 30fe30fd 309e309d 4edd3003     > ?..0.0.0.0.0.N
1002fa40:	30063005 30fc3007 20102014 ff3cff0f     .0.0.0.0. . ..<.
1002fa50:	2016301c 2026ff5c 20182025 201c2019     .0. \.& % . . . 
1002fa60:	ff08201d 3014ff09 ff3b3015 ff5bff3d     . .....0.0;.=.[.
1002fa70:	3008ff5d 300a3009 300c300b 300e300d     ]..0.0.0.0.0.0.0
1002fa80:	3010300f ff0b3011 00b12212 00f700d7     .0.0.0..."......
1002fa90:	2260ff1d ff1eff1c 22672266 2234221e     ..`"....f"g"."4"
1002faa0:	26402642 203200b0 21032033 ff0400a5     B&@&..2 3 .!....
1002fab0:	00a300a2 ff03ff05 ff0aff06 00a7ff20     ............ ...
1002fac0:	26052606 25cf25cb 25c725ce              .&.&.%.%.%.%

1002facc <categories>:
1002facc:	00000000 201c001f 00000000 00002114     ....... .....!..
1002fadc:	24160002 00000000 00002514 28150002     ...$.....%.....(
1002faec:	00000000 00002911 2a140000 00000000     .....).....*....
1002fafc:	00002b18 2c140000 00000000 00002d10     .+.....,.....-..
1002fb0c:	2e140000 00010000 0000300c 3a140009     .........0.....:
1002fb1c:	00010000 00003c18 3f140002 00010000     .....<.....?....
1002fb2c:	00004103 5b150019 00000000 00005c14     .A.....[.....\..
1002fb3c:	5d110000 00000000 00005e17 5f0f0000     ...].....^....._
1002fb4c:	00000000 00006017 61030000 00190000     .....`.....a....
1002fb5c:	00007b15 7c180000 00000000 00007d11     .{.....|.....}..
1002fb6c:	7e180000 00000000 00007f00 a01c0020     ...~........ ...
1002fb7c:	00000000 0000a114 a2160000 00030000     ................
1002fb8c:	0000a619 a7140000 00000000 0000a817     ................
1002fb9c:	a9190000 00000000 0000aa06 ab130000     ................
1002fbac:	00000000 0000ac18 ad010000 00000000     ................
1002fbbc:	0000ae19 af170000 00000000 0000b019     ................
1002fbcc:	b1180000 00000000 0000b20e b4170001     ................
1002fbdc:	00000000 0000b503 b6140000 00010000     ................
1002fbec:	0000b817 b90e0000 00000000 0000ba06     ................
1002fbfc:	bb120000 00000000 0000bc0e bf140002     ................
1002fc0c:	00000000 0000c003 d7180016 00000000     ................
1002fc1c:	0000d803 df040006 00000000 0000e003     ................
1002fc2c:	f7180016 00000000 0000f803 3804003f     ............?..8
1002fc3c:	00000001 00013903 4904000f 00000001     .....9.....I....
1002fc4c:	00014a03 8d040042 00000001 00018e03     .J..B...........
1002fc5c:	9b04000c 00000001 00019c03 aa04000d     ................
1002fc6c:	00010001 0001ac03 ba04000d 00000001     ................
1002fc7c:	0001bb06 bc030000 00010001 0001be04     ................
1002fc8c:	bf030000 00000001 0001c006 c4030003     ................
1002fc9c:	00000001 0001c507 c6030000 00010001     ................
1002fcac:	0001c807 c9030000 00010001 0001cb07     ................
1002fcbc:	cc030000 00230001 0001f004 f1030000     ......#.........
1002fccc:	00000001 0001f207 f3030000 002d0001     ..............-.
1002fcdc:	00022104 22030000 00110002 00023404     .!.....".....4..
1002fcec:	3a030005 001a0002 00025504 56030000     ...:.....U.....V
1002fcfc:	00010002 00025804 59030000 00000002     .....X.....Y....
1002fd0c:	00025a04 5b030000 00010002 00025d04     .Z.....[.....]..
1002fd1c:	60030002 00010002 00026204 63030000     ...`.....b.....c
1002fd2c:	00000002 00026404 65030000 00010002     .....d.....e....
1002fd3c:	00026704 68030000 00040002 00026d04     .g.....h.....m..
1002fd4c:	6f030001 00000002 00027004 71030000     ...o.....p.....q
1002fd5c:	00010002 00027304 75030001 00000002     .....s.....u....
1002fd6c:	00027604 7d030006 00000002 00027e04     .v.....}.....~..
1002fd7c:	80030001 00000002 00028104 82030000     ................
1002fd8c:	00010002 00028404 87030002 00050002     ................
1002fd9c:	00028d04 92030004 00000002 00029304     ................
1002fdac:	94060000 00000002 00029504 9d030007     ................
1002fdbc:	00010002 00029f04 b0050010 00110002     ................
1002fdcc:	0002c217 c6050003 000b0002 0002d217     ................
1002fddc:	e005000d 00040002 0002e517 ec050006     ................
1002fdec:	00000002 0002ed17 ee050000 00000002     ................
1002fdfc:	0002ef17 000b0010 006f0003 00037003     ..........o..p..
1002fe0c:	74050003 00000003 00037517 76030000     ...t.....u.....v
1002fe1c:	00010003 00037a05 7b030000 00020003     .....z.....{....
1002fe2c:	00037e14 7f030000 00000003 00038417     .~..............
1002fe3c:	86030001 00000003 00038714 88030000     ................
1002fe4c:	00020003 00038c03 8e030000 00010003     ................
1002fe5c:	00039004 91030000 00100003 0003a303     ................
1002fe6c:	b004000c 00000003 0003b103 d2080020     ............ ...
1002fe7c:	00020003 0003d503 f6180020 00000003     ........ .......
1002fe8c:	0003f703 fc040004 00000003 0003fd03     ................
1002fe9c:	82190084 00000004 0004830b 880a0004     ................
1002feac:	00010004 00048a03 310300a5 00250005     ...........1..%.
1002febc:	00055905 5a140000 00050005 00056004     .Y.....Z.....`..
1002fecc:	61030000 00250005 00058704 89140001     ...a..%.........
1002fedc:	00000005 00058a10 8d190000 00010005     ................
1002feec:	00058f16 910b0000 002c0005 0005be10     ..........,.....
1002fefc:	bf0b0000 00000005 0005c014 c10b0000     ................
1002ff0c:	00010005 0005c314 c40b0000 00010005     ................
1002ff1c:	0005c614 c70b0000 00000005 0005d006     ................
1002ff2c:	ef06001a 00030005 0005f314 00010001     ................
1002ff3c:	00050006 00060618 09140002 00010006     ................
1002ff4c:	00060b16 0c140000 00010006 00060e19     ................
1002ff5c:	100b0001 000a0006 00061b14 1c010000     ................
1002ff6c:	00000006 00061d14 20060002 001f0006     ........... ....
1002ff7c:	00064005 41060000 00090006 00064b0b     .@.....A.....K..
1002ff8c:	600c0014 00090006 00066a14 6e060003     ...`.....j.....n
1002ff9c:	00010006 0006700b 71060000 00620006     .....p.....q..b.
1002ffac:	0006d414 d5060000 00000006 0006d60b     ................
1002ffbc:	dd010006 00000006 0006de19 df0b0000     ................
1002ffcc:	00050006 0006e505 e70b0001 00010006     ................
1002ffdc:	0006e919 ea0b0000 00030006 0006ee06     ................
1002ffec:	f00c0001 00090006 0006fa06 fd190002     ................
1002fffc:	00010006 0006ff06 00140000 000d0007     ................
1003000c:	00070f01 10060000 00000007 0007110b     ................
1003001c:	12060000 001d0007 0007300b 4d06001a     .........0.....M
1003002c:	00580007 0007a60b b106000a 00000007     ..X.............
1003003c:	0007c00c ca060009 00200007 0007eb0b     .......... .....
1003004c:	f4050008 00010007 0007f619 f7140000     ................
1003005c:	00020007 0007fa05 fd0b0000 00000007     ................
1003006c:	0007fe16 00060001 00150008 0008160b     ................
1003007c:	1a050003 00000008 00081b0b 24050008     ...............$
1003008c:	00000008 0008250b 28050002 00000008     .....%.....(....
1003009c:	0008290b 30140004 000e0008 00084006     .).....0.....@..
100300ac:	590b0018 00020008 00085e14 60060000     ...Y.....^.....`
100300bc:	000a0008 00087006 88170017 00000008     .....p..........
100300cc:	00088906 90010005 00010008 0008980b     ................
100300dc:	a0060007 00280008 0008c905 ca0b0000     ......(.........
100300ec:	00170008 0008e201 e30b0000 001f0008     ................
100300fc:	00090309 04060000 00350009 00093a0b     ..........5..:..
1003010c:	3b090000 00000009 00093c0b 3d060000     ...;.....<.....=
1003011c:	00000009 00093e09 410b0002 00070009     .....>.....A....
1003012c:	00094909 4d0b0003 00000009 00094e09     .I.....M.....N..
1003013c:	50060001 00000009 0009510b 58060006     ...P.....Q.....X
1003014c:	00090009 0009620b 64140001 00010009     .....b.....d....
1003015c:	0009660c 70140009 00000009 00097105     .f.....p.....q..
1003016c:	72060000 000e0009 0009810b 82090000     ...r............
1003017c:	00010009 00098506 8f060007 00010009     ................
1003018c:	00099306 aa060015 00060009 0009b206     ................
1003019c:	b6060000 00030009 0009bc0b bd060000     ................
100301ac:	00000009 0009be09 c10b0002 00030009     ................
100301bc:	0009c709 cb090001 00010009 0009cd0b     ................
100301cc:	ce060000 00000009 0009d709 dc060000     ................
100301dc:	00010009 0009df06 e20b0002 00010009     ................
100301ec:	0009e60c f0060009 00010009 0009f216     ................
100301fc:	f40e0001 00050009 0009fa19 fb160000     ................
1003020c:	00000009 0009fc06 fd140000 00000009     ................
1003021c:	0009fe0b 010b0000 0001000a 000a0309     ................
1003022c:	05060000 0005000a 000a0f06 13060001     ................
1003023c:	0015000a 000a2a06 32060006 0001000a     .....*.....2....
1003024c:	000a3506 38060001 0001000a 000a3c0b     .5.....8.....<..
1003025c:	3e090000 0002000a 000a410b 470b0001     ...>.....A.....G
1003026c:	0001000a 000a4b0b 510b0002 0000000a     .....K.....Q....
1003027c:	000a5906 5e060003 0000000a 000a660c     .Y.....^.....f..
1003028c:	700b0009 0001000a 000a7206 750b0002     ...p.....r.....u
1003029c:	0000000a 000a7614 810b0000 0001000a     .....v..........
100302ac:	000a8309 85060000 0008000a 000a8f06     ................
100302bc:	93060002 0015000a 000aaa06 b2060006     ................
100302cc:	0001000a 000ab506 bc0b0004 0000000a     ................
100302dc:	000abd06 be090000 0002000a 000ac10b     ................
100302ec:	c70b0004 0001000a 000ac909 cb090000     ................
100302fc:	0001000a 000acd0b d0060000 0000000a     ................
1003030c:	000ae006 e20b0001 0001000a 000ae60c     ................
1003031c:	f0140009 0000000a 000af116 f9060000     ................
1003032c:	0000000a 000afa0b 010b0005 0000000b     ................
1003033c:	000b0209 05060001 0007000b 000b0f06     ................
1003034c:	13060001 0015000b 000b2a06 32060006     .........*.....2
1003035c:	0001000b 000b3506 3c0b0004 0000000b     .....5.....<....
1003036c:	000b3d06 3e090000 0000000b 000b3f0b     .=.....>.....?..
1003037c:	40090000 0000000b 000b410b 47090003     ...@.....A.....G
1003038c:	0001000b 000b4b09 4d0b0001 0000000b     .....K.....M....
1003039c:	000b550b 57090001 0000000b 000b5c06     .U.....W.....\..
100303ac:	5f060001 0002000b 000b620b 660c0001     ..._.....b.....f
100303bc:	0009000b 000b7019 71060000 0000000b     .....p.....q....
100303cc:	000b720e 820b0005 0000000b 000b8306     .r..............
100303dc:	85060000 0005000b 000b8e06 92060002     ................
100303ec:	0003000b 000b9906 9c060001 0000000b     ................
100303fc:	000b9e06 a3060001 0001000b 000ba806     ................
1003040c:	ae060002 000b000b 000bbe09 c00b0001     ................
1003041c:	0000000b 000bc109 c6090001 0002000b     ................
1003042c:	000bca09 cd0b0002 0000000b 000bd006     ................
1003043c:	d7090000 0000000b 000be60c f00e0009     ................
1003044c:	0002000b 000bf319 f9160005 0000000b     ................
1003045c:	000bfa19 000b0000 0000000c 000c0109     ................
1003046c:	040b0002 0000000c 000c0506 0e060007     ................
1003047c:	0002000c 000c1206 2a060016 000f000c     ...........*....
1003048c:	000c3c0b 3d060000 0000000c 000c3e0b     .<.....=.....>..
1003049c:	41090002 0003000c 000c460b 4a0b0002     ...A.....F.....J
100304ac:	0003000c 000c550b 58060001 0002000c     .....U.....X....
100304bc:	000c5d06 60060000 0001000c 000c620b     .].....`.....b..
100304cc:	660c0001 0009000c 000c7714 780e0000     ...f.....w.....x
100304dc:	0006000c 000c7f19 80060000 0000000c     ................
100304ec:	000c810b 82090000 0001000c 000c8414     ................
100304fc:	85060000 0007000c 000c8e06 92060002     ................
1003050c:	0016000c 000caa06 b5060009 0004000c     ................
1003051c:	000cbc0b bd060000 0000000c 000cbe09     ................
1003052c:	bf0b0000 0000000c 000cc009 c60b0004     ................
1003053c:	0000000c 000cc709 ca090001 0001000c     ................
1003054c:	000ccc0b d5090001 0001000c 000cdd06     ................
1003055c:	e0060001 0001000c 000ce20b e60c0001     ................
1003056c:	0009000c 000cf106 f3090001 0000000c     ................
1003057c:	000d000b 02090001 0001000d 000d0406     ................
1003058c:	0e060008 0002000d 000d1206 3b0b0028     ............(..;
1003059c:	0001000d 000d3d06 3e090000 0002000d     .....=.....>....
100305ac:	000d410b 46090003 0002000d 000d4a09     .A.....F.....J..
100305bc:	4d0b0002 0000000d 000d4e06 4f190000     ...M.....N.....O
100305cc:	0000000d 000d5406 57090002 0000000d     .....T.....W....
100305dc:	000d580e 5f060006 0002000d 000d620b     .X....._.....b..
100305ec:	660c0001 0009000d 000d700e 79190008     ...f.....p.....y
100305fc:	0000000d 000d7a06 810b0005 0000000d     .....z..........
1003060c:	000d8209 85060001 0011000d 000d9a06     ................
1003061c:	b3060017 0008000d 000dbd06 c0060000     ................
1003062c:	0006000d 000dca0b cf090000 0002000d     ................
1003063c:	000dd20b d60b0002 0000000d 000dd809     ................
1003064c:	e60c0007 0009000d 000df209 f4140001     ................
1003065c:	0000000d 000e0106 310b002f 0000000e     ......../..1....
1003066c:	000e3206 340b0001 0006000e 000e3f16     .2.....4.....?..
1003067c:	40060000 0005000e 000e4605 470b0000     ...@.....F.....G
1003068c:	0007000e 000e4f14 500c0000 0009000e     .....O.....P....
1003069c:	000e5a14 81060001 0001000e 000e8406     .Z..............
100306ac:	86060000 0004000e 000e8c06 a5060017     ................
100306bc:	0000000e 000ea706 b10b0009 0000000e     ................
100306cc:	000eb206 b40b0001 0008000e 000ebd06     ................
100306dc:	c0060000 0004000e 000ec605 c80b0000     ................
100306ec:	0006000e 000ed00c dc060009 0003000e     ................
100306fc:	000f0006 01190000 0002000f 000f0414     ................
1003070c:	1319000e 0000000f 000f1414 15190000     ................
1003071c:	0002000f 000f180b 1a190001 0005000f     ................
1003072c:	000f200c 2a0e0009 0009000f 000f3419     . .....*.....4..
1003073c:	350b0000 0000000f 000f3619 370b0000     ...5.....6.....7
1003074c:	0000000f 000f3819 390b0000 0000000f     .....8.....9....
1003075c:	000f3a15 3b110000 0000000f 000f3c15     .:.....;.....<..
1003076c:	3d110000 0000000f 000f3e09 40060001     ...=.....>.....@
1003077c:	0007000f 000f4906 710b0023 000d000f     .....I..#..q....
1003078c:	000f7f09 800b0000 0004000f 000f8514     ................
1003079c:	860b0000 0001000f 000f8806 8d0b0004     ................
100307ac:	000a000f 000f990b be190023 0007000f     ........#.......
100307bc:	000fc60b c7190000 0005000f 000fce19     ................
100307cc:	d0140001 0004000f 000fd519 d9140003     ................
100307dc:	0001000f 00100006 2b09002a 00010010     ........*..+....
100307ec:	00102d0b 31090003 00000010 0010320b     .-.....1.....2..
100307fc:	38090005 00000010 0010390b 3b090001     ...8.....9.....;
1003080c:	00010010 00103d0b 3f060001 00000010     .....=.....?....
1003081c:	0010400c 4a140009 00050010 00105006     .@.....J.....P..
1003082c:	56090005 00010010 0010580b 5a060001     ...V.....X.....Z
1003083c:	00030010 00105e0b 61060002 00000010     .....^.....a....
1003084c:	00106209 65060002 00010010 00106709     .b.....e.....g..
1003085c:	6e060006 00020010 0010710b 75060003     ...n.....q.....u
1003086c:	000c0010 0010820b 83090000 00010010     ................
1003087c:	0010850b 87090001 00050010 00108d0b     ................
1003088c:	8e060000 00000010 00108f09 900c0000     ................
1003089c:	00090010 00109a09 9d0b0002 00000010     ................
100308ac:	00109e19 a0030001 00250010 0010c703     ..........%.....
100308bc:	cd030000 00000010 0010d003 fb14002a     ............*...
100308cc:	00000010 0010fc05 fd030000 00020010     ................
100308dc:	00110006 4a060148 00030012 00125006     ....H..J.....P..
100308ec:	58060006 00000012 00125a06 60060003     ...X.....Z.....`
100308fc:	00280012 00128a06 90060003 00200012     ..(........... .
1003090c:	0012b206 b8060003 00060012 0012c006     ................
1003091c:	c2060000 00030012 0012c806 d806000e     ................
1003092c:	00380012 00131206 18060003 00420013     ..8...........B.
1003093c:	00135d0b 60140002 00080013 0013690e     .].....`.....i..
1003094c:	80060013 000f0013 00139019 a0030009     ................
1003095c:	00550013 0013f803 00100005 00000014     ..U.............
1003096c:	00140106 6d19026b 00000016 00166e14     ....k..m.....n..
1003097c:	6f060000 00100016 0016801c 81060000     ...o............
1003098c:	00190016 00169b15 9c110000 00000016     ................
1003099c:	0016a006 eb14004a 00020016 0016ee0d     ....J...........
100309ac:	f1060002 00070016 00170006 120b0011     ................
100309bc:	00020017 00171509 1f060000 00120017     ................
100309cc:	0017320b 34090001 00000017 00173514     .2.....4.....5..
100309dc:	40060001 00110017 0017520b 60060001     ...@.....R.....`
100309ec:	000c0017 00176e06 720b0002 00010017     .....n.....r....
100309fc:	00178006 b40b0033 00010017 0017b609     ....3...........
10030a0c:	b70b0000 00060017 0017be09 c60b0007     ................
10030a1c:	00000017 0017c709 c90b0001 000a0017     ................
10030a2c:	0017d414 d7050002 00000017 0017d814     ................
10030a3c:	db160002 00000017 0017dc06 dd0b0000     ................
10030a4c:	00000017 0017e00c f00e0009 00090017     ................
10030a5c:	00180014 06100005 00000018 00180714     ................
10030a6c:	0b0b0003 00020018 00180e01 0f0b0000     ................
10030a7c:	00000018 0018100c 20060009 00220018     ........... ..".
10030a8c:	00184305 44060000 00340018 00188006     .C.....D..4.....
10030a9c:	850b0004 00010018 00188706 a90b0021     ............!...
10030aac:	00000018 0018aa06 b0060000 00450018     ..............E.
10030abc:	00190006 200b001e 00020019 00192309     ....... .....#..
10030acc:	270b0003 00010019 00192909 30090002     ...'.....).....0
10030adc:	00010019 0019320b 33090000 00050019     .....2.....3....
10030aec:	0019390b 40190002 00000019 00194414     .9.....@.....D..
10030afc:	460c0001 00090019 00195006 7006001d     ...F.....P.....p
10030b0c:	00040019 00198006 b006002b 00190019     ........+.......
10030b1c:	0019d00c da0e0009 00000019 0019de19     ................
10030b2c:	00060021 0016001a 001a170b 19090001     !...............
10030b3c:	0001001a 001a1b0b 1e140000 0001001a     ................
10030b4c:	001a2006 55090034 0000001a 001a560b     . ..4..U.....V..
10030b5c:	57090000 0000001a 001a580b 600b0006     ...W.....X.....`
10030b6c:	0000001a 001a6109 620b0000 0000001a     .....a.....b....
10030b7c:	001a6309 650b0001 0007001a 001a6d09     .c.....e.....m..
10030b8c:	730b0005 0009001a 001a7f0b 800c0000     ...s............
10030b9c:	0009001a 001a900c a0140009 0006001a     ................
10030bac:	001aa705 a8140000 0005001a 001ab00b     ................
10030bbc:	be0a000d 0000001a 001abf0b 000b000f     ................
10030bcc:	0003001b 001b0409 05060000 002e001b     ................
10030bdc:	001b340b 35090000 0000001b 001b360b     .4.....5.....6..
10030bec:	3b090004 0000001b 001b3c0b 3d090000     ...;.....<.....=
10030bfc:	0004001b 001b420b 43090000 0001001b     .....B.....C....
10030c0c:	001b4506 500c0007 0009001b 001b5a14     .E.....P.....Z..
10030c1c:	61190006 0009001b 001b6b0b 74190008     ...a.....k.....t
10030c2c:	0008001b 001b7d14 800b0001 0001001b     .....}..........
10030c3c:	001b8209 83060000 001d001b 001ba109     ................
10030c4c:	a20b0000 0003001b 001ba609 a80b0001     ................
10030c5c:	0001001b 001baa09 ab0b0000 0002001b     ................
10030c6c:	001bae06 b00c0001 0009001b 001bba06     ................
10030c7c:	e60b002b 0000001b 001be709 e80b0000     +...............
10030c8c:	0001001b 001bea09 ed0b0002 0000001b     ................
10030c9c:	001bee09 ef0b0000 0002001b 001bf209     ................
10030cac:	fc140001 0003001b 001c0006 24090023     ............#..$
10030cbc:	0007001c 001c2c0b 34090007 0001001c     .....,.....4....
10030ccc:	001c360b 3b140001 0004001c 001c400c     .6.....;.....@..
10030cdc:	4d060009 0002001c 001c500c 5a060009     ...M.....P.....Z
10030cec:	001d001c 001c7805 7e140005 0001001c     .....x.....~....
10030cfc:	001c8003 90030008 002a001c 001cbd03     ..........*.....
10030d0c:	c0140002 0007001c 001cd00b d3140002     ................
10030d1c:	0000001c 001cd40b e109000c 0000001c     ................
10030d2c:	001ce20b e9060006 0003001c 001ced0b     ................
10030d3c:	ee060000 0005001c 001cf40b f5060000     ................
10030d4c:	0001001c 001cf709 f80b0000 0001001c     ................
10030d5c:	001cfa06 00040000 002b001d 001d2c05     ..........+..,..
10030d6c:	6b04003e 000c001d 001d7805 79030000     >..k.....x.....y
10030d7c:	0000001d 001d7a04 7d030002 0000001d     .....z.....}....
10030d8c:	001d7e04 8e03000f 0000001d 001d8f04     .~..............
10030d9c:	9b05000b 0024001d 001dc00b 0003003f     ......$.....?...
10030dac:	0095001e 001e9604 9b030004 0000001e     ................
10030dbc:	001e9c04 9e030001 0000001e 001e9f04     ................
10030dcc:	a0030000 0075001e 001f1803 20030005     ......u........ 
10030ddc:	0025001f 001f4803 50040005 0000001f     ..%..H.....P....
10030dec:	001f5103 52040000 0000001f 001f5303     .Q.....R.....S..
10030dfc:	54040000 0000001f 001f5503 56040000     ...T.....U.....V
10030e0c:	0000001f 001f5703 59030000 0000001f     .....W.....Y....
10030e1c:	001f5b03 5d030000 0000001f 001f5f03     .[.....]....._..
10030e2c:	8003001e 0007001f 001f8807 90030007     ................
10030e3c:	0007001f 001f9807 a0030007 0007001f     ................
10030e4c:	001fa807 b0030007 0001001f 001fb204     ................
10030e5c:	b3030000 0000001f 001fb404 b6040000     ................
10030e6c:	0001001f 001fb803 bc070003 0000001f     ................
10030e7c:	001fbd17 be030000 0000001f 001fbf17     ................
10030e8c:	c2040002 0000001f 001fc303 c4040000     ................
10030e9c:	0000001f 001fc604 c8030001 0003001f     ................
10030eac:	001fcc07 cd170000 0002001f 001fd003     ................
10030ebc:	d2040001 0001001f 001fd604 d8030001     ................
10030ecc:	0003001f 001fdd17 e0030002 0001001f     ................
10030edc:	001fe204 e5030002 0000001f 001fe604     ................
10030eec:	e8030001 0004001f 001fed17 f2040002     ................
10030efc:	0000001f 001ff303 f4040000 0000001f     ................
10030f0c:	001ff604 f8030001 0003001f 001ffc07     ................
10030f1c:	fd170000 0001001f 0020001c 0b01000a     .......... .....
10030f2c:	00040020 00201010 16140005 00010020      ..... ..... ...
10030f3c:	00201813 19120000 00000020 00201a15     .. ..... ..... .
10030f4c:	1b130000 00010020 00201d12 1e150000     .... ..... .....
10030f5c:	00000020 00201f13 20140000 00070020      ..... ....  ...
10030f6c:	0020281a 291b0000 00000020 00202a01     .( ....) ....* .
10030f7c:	2f1c0004 00000020 00203014 39130008     .../ ....0 ....9
10030f8c:	00000020 00203a12 3b140000 00030020      ....: ....; ...
10030f9c:	00203f0f 41140001 00020020 00204418     .? ....A ....D .
10030fac:	45150000 00000020 00204611 47140000     ...E ....F ....G
10030fbc:	000a0020 00205218 53140000 00000020      ....R ....S ...
10030fcc:	0020540f 55140000 00090020 00205f1c     .T ....U ...._ .
10030fdc:	60010000 00040020 00206601 700e0009     ...` ....f ....p
10030fec:	00000020 00207105 740e0000 00050020      ....q ....t ...
10030ffc:	00207a18 7d150002 00000020 00207e11     .z ....} ....~ .
1003100c:	7f050000 00000020 0020800e 8a180009     .... ..... .....
1003101c:	00020020 00208d15 8e110000 00000020      ..... ..... ...
1003102c:	00209005 a016000c 00200020 0020d00b     .. ..... . ... .
1003103c:	dd0a000c 00030020 0020e10b e20a0000     .... ..... .....
1003104c:	00020020 0020e50b 0019000b 00010021      ..... .....!...
1003105c:	00210208 03190000 00030021 00210708     ..!.....!.....!.
1003106c:	08190000 00010021 00210a04 0b080000     ....!.....!.....
1003107c:	00020021 00210e04 10080001 00020021     !.....!.....!...
1003108c:	00211304 14190000 00000021 00211508     ..!.....!.....!.
1003109c:	16190000 00010021 00211818 19080000     ....!.....!.....
100310ac:	00040021 00211e19 24080005 00000021     !.....!....$!...
100310bc:	00212519 26030000 00000021 00212719     .%!....&!....'!.
100310cc:	28080000 00000021 00212919 2a030000     ...(!....)!....*
100310dc:	00010021 00212c08 2e190001 00000021     !....,!.....!...
100310ec:	00212f04 30080000 00010021 00213203     ./!....0!....2!.
100310fc:	33080000 00000021 00213404 35060000     ...3!....4!....5
1003110c:	00030021 00213904 3a190000 00010021     !....9!....:!...
1003111c:	00213c04 3e080001 00010021 00214018     .<!....>!....@!.
1003112c:	45080004 00000021 00214604 4a190003     ...E!....F!....J
1003113c:	00000021 00214b18 4c190000 00010021     !....K!....L!...
1003114c:	00214e03 4f190000 00000021 0021500e     .N!....O!....P!.
1003115c:	600d000f 00220021 00218303 850d0001     ...`!."...!.....
1003116c:	00030021 0021890e 8a190000 00010021     !.....!.....!...
1003117c:	00219018 95190004 00040021 00219a18     ..!.....!.....!.
1003118c:	9c190001 00030021 0021a018 a1190000     ....!.....!.....
1003119c:	00010021 0021a318 a4190000 00010021     !.....!.....!...
100311ac:	0021a618 a7190000 00060021 0021ae18     ..!.....!.....!.
100311bc:	af190000 001e0021 0021ce18 d0190001     ....!.....!.....
100311cc:	00010021 0021d218 d3190000 00000021     !.....!.....!...
100311dc:	0021d418 d5190000 001e0021 0021f418     ..!.....!.....!.
100311ec:	0019010b 00070023 00230815 09110000     ....#.....#.....
100311fc:	00000023 00230a15 0b110000 00000023     #.....#.....#...
1003120c:	00230c19 20180013 00010023 00232219     ..#.... #...."#.
1003121c:	29150006 00000023 00232a11 2b190000     ...)#....*#....+
1003122c:	00500023 00237c18 7d190000 001d0023     #.P..|#....}#...
1003123c:	00239b18 b4190018 00270023 0023dc18     ..#.....#.'...#.
1003124c:	e2190005 00440023 00244019 600e000a     ....#.D..@$....`
1003125c:	003b0024 00249c19 ea0e004d 00150024     $.;...$.M...$...
1003126c:	00250019 b71800b6 00000025 0025b819     ..%.....%.....%.
1003127c:	c1180008 00000025 0025c219 f8180035     ....%.....%.5...
1003128c:	00070025 00260019 6f18006e 00000026     %.....&.n..o&...
1003129c:	00267019 681500f7 00000027 00276911     .p&....h'....i'.
100312ac:	6a150000 00000027 00276b11 6c150000     ...j'....k'....l
100312bc:	00000027 00276d11 6e150000 00000027     '....m'....n'...
100312cc:	00276f11 70150000 00000027 00277111     .o'....p'....q'.
100312dc:	72150000 00000027 00277311 74150000     ...r'....s'....t
100312ec:	00000027 00277511 760e0000 001d0027     '....u'....v'...
100312fc:	00279419 c018002b 00040027 0027c515     ..'.+...'.....'.
1003130c:	c6110000 00000027 0027c718 e615001e     ....'.....'.....
1003131c:	00000027 0027e711 e8150000 00000027     '.....'.....'...
1003132c:	0027e911 ea150000 00000027 0027eb11     ..'.....'.....'.
1003133c:	ec150000 00000027 0027ed11 ee150000     ....'.....'.....
1003134c:	00000027 0027ef11 f0180000 000f0027     '.....'.....'...
1003135c:	00280019 001800ff 00820029 00298315     ..(.....).....).
1003136c:	84110000 00000029 00298515 86110000     ....).....).....
1003137c:	00000029 00298715 88110000 00000029     ).....).....)...
1003138c:	00298915 8a110000 00000029 00298b15     ..).....).....).
1003139c:	8c110000 00000029 00298d15 8e110000     ....).....).....
100313ac:	00000029 00298f15 90110000 00000029     ).....).....)...
100313bc:	00299115 92110000 00000029 00299315     ..).....).....).
100313cc:	94110000 00000029 00299515 96110000     ....).....).....
100313dc:	00000029 00299715 98110000 00000029     ).....).....)...
100313ec:	00299918 d815003e 00000029 0029d911     ..).>...).....).
100313fc:	da150000 00000029 0029db11 dc180000     ....).....).....
1003140c:	001f0029 0029fc15 fd110000 00000029     ).....).....)...
1003141c:	0029fe18 00190101 002f002b 002b3018     ..).....+./..0+.
1003142c:	45190014 0001002b 002b4718 4d190005     ...E+....G+....M
1003143c:	0026002b 002b7619 9719001f 0068002b     +.&..v+.....+.h.
1003144c:	002c0003 71040070 0000002c 002c7203     ..,.p..q,....r,.
1003145c:	74040001 0000002c 002c7503 77040001     ...t,....u,....w
1003146c:	0004002c 002c7c05 7e030001 0065002c     ,....|,....~,.e.
1003147c:	002ce404 e5190000 0005002c 002ceb03     ..,.....,.....,.
1003148c:	ef0b0003 0002002c 002cf203 f9140001     ....,.....,.....
1003149c:	0003002c 002cfd0e fe140000 0001002c     ,.....,.....,...
100314ac:	002d0003 27030025 0000002d 002d2d03     ..-.%..'-....--.
100314bc:	30060000 0037002d 002d6f05 70140000     ...0-.7..o-....p
100314cc:	0000002d 002d7f0b 80060000 0016002d     -.....-.....-...
100314dc:	002da006 a8060006 0006002d 002db006     ..-.....-.....-.
100314ec:	b8060006 0006002d 002dc006 c8060006     ....-.....-.....
100314fc:	0006002d 002dd006 d8060006 0006002d     -.....-.....-...
1003150c:	002de00b 0014001f 0001002e 002e0213     ..-.............
1003151c:	03120000 0000002e 002e0413 05120000     ................
1003152c:	0000002e 002e0614 09130002 0000002e     ................
1003153c:	002e0a12 0b140000 0000002e 002e0c13     ................
1003154c:	0d120000 0000002e 002e0e14 17100008     ................
1003155c:	0000002e 002e1814 1a100001 0000002e     ................
1003156c:	002e1b14 1c130000 0000002e 002e1d12     ................
1003157c:	1e140000 0001002e 002e2013 21120000     ......... .....!
1003158c:	0000002e 002e2215 23110000 0000002e     .....".....#....
1003159c:	002e2415 25110000 0000002e 002e2615     .$.....%.....&..
100315ac:	27110000 0000002e 002e2815 29110000     ...'.....(.....)
100315bc:	0000002e 002e2a14 2f050004 0000002e     .....*...../....
100315cc:	002e3014 3a100009 0001002e 002e3c14     .0.....:.....<..
100315dc:	40100003 0000002e 002e4114 42150000     ...@.....A.....B
100315ec:	0000002e 002e4314 5019000c 0001002e     .....C.....P....
100315fc:	002e5214 55150002 0000002e 002e5611     .R.....U.....V..
1003160c:	57150000 0000002e 002e5811 59150000     ...W.....X.....Y
1003161c:	0000002e 002e5a11 5b150000 0000002e     .....Z.....[....
1003162c:	002e5c11 5d100000 0000002e 002e8019     .\.....]........
1003163c:	9b190019 0058002e 002f0019 f01900d5     ......X.../.....
1003164c:	000b002f 0030001c 01140000 00020030     /.....0.....0...
1003165c:	00300419 05050000 00000030 00300606     ..0.....0.....0.
1003166c:	070d0000 00000030 00300815 09110000     ....0.....0.....
1003167c:	00000030 00300a15 0b110000 00000030     0.....0.....0...
1003168c:	00300c15 0d110000 00000030 00300e15     ..0.....0.....0.
1003169c:	0f110000 00000030 00301015 11110000     ....0.....0.....
100316ac:	00000030 00301219 14150001 00000030     0.....0.....0...
100316bc:	00301511 16150000 00000030 00301711     ..0.....0.....0.
100316cc:	18150000 00000030 00301911 1a150000     ....0.....0.....
100316dc:	00000030 00301b11 1c100000 00000030     0.....0.....0...
100316ec:	00301d15 1e110000 00010030 00302019     ..0.....0.... 0.
100316fc:	210d0000 00080030 00302a0b 2e090003     ...!0....*0.....
1003170c:	00010030 00303010 31050000 00040030     0....00....10...
1003171c:	00303619 380d0001 00020030 00303b05     .60....80....;0.
1003172c:	3c060000 00000030 00303d14 3e190000     ...<0....=0....>
1003173c:	00010030 00304106 990b0055 00010030     0....A0.U...0...
1003174c:	00309b17 9d050001 00010030 00309f06     ..0.....0.....0.
1003175c:	a0100000 00000030 0030a106 fb140059     ....0.....0.Y...
1003176c:	00000030 0030fc05 ff060002 00000030     0.....0.....0...
1003177c:	00310506 3106002a 005d0031 00319019     ..1.*..11.]...1.
1003178c:	920e0001 00030031 00319619 a0060009     ....1.....1.....
1003179c:	001f0031 0031c019 f0060023 000f0031     1.....1.#...1...
100317ac:	00320019 200e001e 00090032 00322a19     ..2.... 2....*2.
100317bc:	480e001d 00070032 00325019 510e0000     ...H2....P2....Q
100317cc:	000e0032 00326019 800e001f 00090032     2....`2.....2...
100317dc:	00328a19 b10e0026 000e0032 0032c019     ..2.&...2.....2.
100317ec:	0006013f 19bf0034 004dc019 0006003f     ?...4.....M.?...
100317fc:	5214004e 00a01505 16060000 047600a0     N..R..........v.
1003180c:	00a49019 d0060036 002700a4 00a4f805     ....6.....'.....
1003181c:	fe140005 000100a4 00a50006 0c05010b     ................
1003182c:	000000a6 00a60d14 10060002 000f00a6     ................
1003183c:	00a6200c 2a060009 000100a6 00a64003     . .....*.....@..
1003184c:	6e06002d 000000a6 00a66f0b 700a0000     -..n.....o.....p
1003185c:	000200a6 00a67314 740b0000 000900a6     .....s.....t....
1003186c:	00a67e14 7f050000 000000a6 00a68003     .~..............
1003187c:	9c05001b 000100a6 00a69e0b a0060001     ................
1003188c:	004500a6 00a6e60d f00b0009 000100a6     ..E.............
1003189c:	00a6f214 00170005 001600a7 00a71705     ................
100318ac:	20170008 000100a7 00a72203 3004000d     ... .....".....0
100318bc:	000100a7 00a73203 7005003d 000000a7     .....2..=..p....
100318cc:	00a77104 79030007 000e00a7 00a78805     .q.....y........
100318dc:	89170000 000100a7 00a78b03 8e040002     ................
100318ec:	000000a7 00a78f06 90030000 000400a7     ................
100318fc:	00a79504 96030000 001800a7 00a7af04     ................
1003190c:	b0030000 001a00a7 00a7d003 d3040001     ................
1003191c:	000000a7 00a7d504 d6030000 000300a7     ................
1003192c:	00a7f205 f5030002 000100a7 00a7f706     ................
1003193c:	f8050000 000100a7 00a7fa04 fb060000     ................
1003194c:	000600a7 00a8020b 03060000 000200a8     ................
1003195c:	00a8060b 07060000 000300a8 00a80b0b     ................
1003196c:	0c060000 001600a8 00a82309 250b0001     .........#.....%
1003197c:	000100a8 00a82709 28190000 000300a8     .....'.....(....
1003198c:	00a82c0b 300e0000 000500a8 00a83619     .,.....0.....6..
1003199c:	38160001 000000a8 00a83919 40060000     ...8.....9.....@
100319ac:	003300a8 00a87414 80090003 000100a8     ..3..t..........
100319bc:	00a88206 b4090031 000f00a8 00a8c40b     ....1...........
100319cc:	ce140001 000100a8 00a8d00c e00b0009     ................
100319dc:	001100a8 00a8f206 f8140005 000200a8     ................
100319ec:	00a8fb06 fc140000 000000a8 00a8fd06     ................
100319fc:	ff0b0001 000000a8 00a9000c 0a060009     ................
10031a0c:	001b00a9 00a9260b 2e140007 000100a9     .....&..........
10031a1c:	00a93006 470b0016 000a00a9 00a95209     .0.....G.....R..
10031a2c:	5f140001 000000a9 00a96006 800b001c     ..._.....`......
10031a3c:	000200a9 00a98309 84060000 002e00a9     ................
10031a4c:	00a9b30b b4090000 000100a9 00a9b60b     ................
10031a5c:	ba090003 000100a9 00a9bc0b be090001     ................
10031a6c:	000200a9 00a9c114 cf05000c 000000a9     ................
10031a7c:	00a9d00c de140009 000100a9 00a9e006     ................
10031a8c:	e50b0004 000000a9 00a9e605 e7060000     ................
10031a9c:	000800a9 00a9f00c fa060009 000400a9     ................
10031aac:	00aa0006 290b0028 000500aa 00aa2f09     ....(..)...../..
10031abc:	310b0001 000100aa 00aa3309 350b0001     ...1.....3.....5
10031acc:	000100aa 00aa4006 430b0002 000000aa     .....@.....C....
10031adc:	00aa4406 4c0b0007 000000aa 00aa4d09     .D.....L.....M..
10031aec:	500c0000 000900aa 00aa5c14 60060003     ...P.....\.....`
10031afc:	000f00aa 00aa7005 71060000 000500aa     .....p.....q....
10031b0c:	00aa7719 7a060002 000000aa 00aa7b09     .w.....z.....{..
10031b1c:	7c0b0000 000000aa 00aa7d09 7e060000     ...|.....}.....~
10031b2c:	003100aa 00aab00b b1060000 000000aa     ..1.............
10031b3c:	00aab20b b5060002 000100aa 00aab70b     ................
10031b4c:	b9060001 000400aa 00aabe0b c0060001     ................
10031b5c:	000000aa 00aac10b c2060000 000000aa     ................
10031b6c:	00aadb06 dd050001 000000aa 00aade14     ................
10031b7c:	e0060001 000a00aa 00aaeb09 ec0b0000     ................
10031b8c:	000100aa 00aaee09 f0140001 000100aa     ................
10031b9c:	00aaf206 f3050000 000100aa 00aaf509     ................
10031bac:	f60b0000 000000aa 00ab0106 09060005     ................
10031bbc:	000500ab 00ab1106 20060005 000600ab     ........... ....
10031bcc:	00ab2806 30040006 002200ab 00ab5303     .(.....0.."..S..
10031bdc:	54040000 000600ab 00ab5b17 5c050000     ...T.....[.....\
10031bec:	000300ab 00ab6004 69050008 000000ab     .....`.....i....
10031bfc:	00ab6a17 70030001 004f00ab 00abc006     .j.....p..O.....
10031c0c:	e3090022 000100ab 00abe50b e6090000     "...............
10031c1c:	000100ab 00abe80b e9090000 000100ab     ................
10031c2c:	00abeb14 ec090000 000000ab 00abed0b     ................
10031c3c:	f00c0000 000900ab 00ac0006 b0062ba3     .............+..
10031c4c:	001600d7 00d7cb06 00020030 07ff00d8     ........0.......
10031c5c:	00f90006 7006016d 006900fa 00fb0004     ....m..p..i.....
10031c6c:	13040006 000400fb 00fb1d06 1e0b0000     ................
10031c7c:	000000fb 00fb1f06 29180009 000000fb     ...........)....
10031c8c:	00fb2a06 3806000c 000400fb 00fb3e06     .*.....8.....>..
10031c9c:	40060000 000100fb 00fb4306 46060001     ...@.....C.....F
10031cac:	006b00fb 00fbb217 d3060010 016a00fb     ..k...........j.
10031cbc:	00fd3e11 3f150000 000000fd 00fd4019     .>.....?.....@..
10031ccc:	5006000f 003f00fd 00fd9206 cf190035     ...P..?.....5...
10031cdc:	000000fd 00fdf006 fc16000b 000000fd     ................
10031cec:	00fdfd19 000b0002 000f00fe 00fe1014     ................
10031cfc:	17150006 000000fe 00fe1811 19140000     ................
10031d0c:	000000fe 00fe200b 3014000f 000000fe     ..... .....0....
10031d1c:	00fe3110 330f0001 000100fe 00fe3515     .1.....3.....5..
10031d2c:	36110000 000000fe 00fe3715 38110000     ...6.....7.....8
10031d3c:	000000fe 00fe3915 3a110000 000000fe     .....9.....:....
10031d4c:	00fe3b15 3c110000 000000fe 00fe3d15     .;.....<.....=..
10031d5c:	3e110000 000000fe 00fe3f15 40110000     ...>.....?.....@
10031d6c:	000000fe 00fe4115 42110000 000000fe     .....A.....B....
10031d7c:	00fe4315 44110000 000000fe 00fe4514     .C.....D.....E..
10031d8c:	47150001 000000fe 00fe4811 49140000     ...G.....H.....I
10031d9c:	000300fe 00fe4d0f 50140002 000200fe     .....M.....P....
10031dac:	00fe5414 58100003 000000fe 00fe5915     .T.....X.....Y..
10031dbc:	5a110000 000000fe 00fe5b15 5c110000     ...Z.....[.....\
10031dcc:	000000fe 00fe5d15 5e110000 000000fe     .....].....^....
10031ddc:	00fe5f14 62180002 000000fe 00fe6310     ._.....b.....c..
10031dec:	64180000 000200fe 00fe6814 69160000     ...d.....h.....i
10031dfc:	000000fe 00fe6a14 70060001 000400fe     .....j.....p....
10031e0c:	00fe7606 ff010086 000000fe 00ff0114     .v..............
10031e1c:	04160002 000000ff 00ff0514 08150002     ................
10031e2c:	000000ff 00ff0911 0a140000 000000ff     ................
10031e3c:	00ff0b18 0c140000 000000ff 00ff0d10     ................
10031e4c:	0e140000 000100ff 00ff100c 1a140009     ................
10031e5c:	000100ff 00ff1c18 1f140002 000100ff     ................
10031e6c:	00ff2103 3b150019 000000ff 00ff3c14     .!.....;.....<..
10031e7c:	3d110000 000000ff 00ff3e17 3f0f0000     ...=.....>.....?
10031e8c:	000000ff 00ff4017 41030000 001900ff     .....@.....A....
10031e9c:	00ff5b15 5c180000 000000ff 00ff5d11     .[.....\.....]..
10031eac:	5e180000 000000ff 00ff5f15 60110000     ...^....._.....`
10031ebc:	000000ff 00ff6114 62150000 000000ff     .....a.....b....
10031ecc:	00ff6311 64140000 000100ff 00ff6606     .c.....d.....f..
10031edc:	70050009 000000ff 00ff7106 9e05002c     ...p.....q..,...
10031eec:	000100ff 00ffa006 c206001e 000500ff     ................
10031efc:	00ffca06 d2060005 000500ff 00ffda06     ................
10031f0c:	e0160002 000100ff 00ffe218 e3170000     ................
10031f1c:	000000ff 00ffe419 e5160000 000100ff     ................
10031f2c:	00ffe819 e9180000 000300ff 00ffed19     ................
10031f3c:	f9010001 000200ff 00fffc19 00060001     ................
10031f4c:	000b0100 01000d06 28060019 00120100     ...........(....
10031f5c:	01003c06 3f060001 000e0100 01005006     .<.....?.....P..
10031f6c:	8006000d 007a0100 01010014 070e0002     ......z.........
10031f7c:	002c0101 01013719 400d0008 00340101     ..,..7.....@..4.
10031f8c:	0101750e 79190003 00100101 01018a0e     .u.....y........
10031f9c:	8c190001 00020101 01019019 a019000c     ................
10031fac:	00000101 0101d019 fd0b002c 00000101     ........,.......
10031fbc:	01028006 a006001c 00300102 0102e00b     ..........0.....
10031fcc:	e10e0000 001a0102 01030006 200e001f     ............... 
10031fdc:	00030103 01032d06 410d0013 00000103     .....-.....A....
10031fec:	01034206 4a0d0007 00000103 01035006     .B.....J.....P..
10031ffc:	760b0025 00040103 01038006 9f14001d     %..v............
1003200c:	00000103 0103a006 c8060023 00070103     ........#.......
1003201c:	0103d014 d10d0000 00040103 01040003     ................
1003202c:	5006004f 004d0104 0104a00c b0030009     O..P..M.........
1003203c:	00230104 0104d803 00060023 00270105     ..#.....#.....'.
1003204c:	01053006 6f140033 00000105 01057003     .0..3..o.....p..
1003205c:	7c03000a 000e0105 01058c03 94030006     ...|............
1003206c:	00010105 01059703 a303000a 000e0105     ................
1003207c:	0105b303 bb030006 00010105 01060006     ................
1003208c:	40060136 00150107 01076006 80050007     6..@.....`......
1003209c:	00050107 01078705 b2050029 00080107     ........).......
100320ac:	01080006 08060005 00000108 01080a06     ................
100320bc:	3706002b 00010108 01083c06 3f060000     +..7.....<.....?
100320cc:	00160108 01085714 580e0000 00070108     .....W.....X....
100320dc:	01086006 77190016 00010108 0108790e     .`.....w.....y..
100320ec:	80060006 001e0108 0108a70e e0060008     ................
100320fc:	00120108 0108f406 fb0e0001 00040108     ................
1003210c:	01090006 160e0015 00050109 01091f14     ................
1003211c:	20060000 00190109 01093f14 80060000     ... .....?......
1003212c:	00370109 0109bc0e be060001 00010109     ..7.............
1003213c:	0109c00e d20e000f 002d0109 010a0006     ..........-.....
1003214c:	010b0000 0002010a 010a050b 0c0b0001     ................
1003215c:	0003010a 010a1006 15060003 0002010a     ................
1003216c:	010a1906 380b001c 0002010a 010a3f0b     .......8.....?..
1003217c:	400e0000 0008010a 010a5014 60060008     ...@.....P.....`
1003218c:	001c010a 010a7d0e 7f140001 0000010a     .....}..........
1003219c:	010a8006 9d0e001c 0002010a 010ac006     ................
100321ac:	c8190007 0000010a 010ac906 e50b001b     ................
100321bc:	0001010a 010aeb0e f0140004 0006010a     ................
100321cc:	010b0006 39140035 0006010b 010b4006     ....5..9.....@..
100321dc:	580e0015 0007010b 010b6006 780e0012     ...X.....`.....x
100321ec:	0007010b 010b8006 99140011 0003010b     ................
100321fc:	010ba90e 00060006 0048010c 010c8003     ..........H.....
1003220c:	c0030032 0032010c 010cfa0e 00060005     2.....2.........
1003221c:	0023010d 010d240b 300c0003 0009010d     ..#..$.....0....
1003222c:	010e600e 8006001e 0029010e 010eab0b     .`........).....
1003223c:	ad100001 0000010e 010eb006 fd0b0001     ................
1003224c:	0002010e 010f0006 1d0e001c 0009010f     ................
1003225c:	010f2706 30060000 0015010f 010f460b     .'.....0.....F..
1003226c:	510e000a 0003010f 010f5514 70060004     ...Q.....U.....p
1003227c:	0011010f 010f820b 86140003 0003010f     ................
1003228c:	010fb006 c50e0014 0006010f 010fe006     ................
1003229c:	00090016 00000110 0110010b 02090000     ................
100322ac:	00000110 01100306 380b0034 000e0110     ........4..8....
100322bc:	01104714 520e0006 00130110 0110660c     .G.....R.....f..
100322cc:	700b0009 00000110 01107106 730b0001     ...p.....q.....s
100322dc:	00010110 01107506 7f0b0000 00020110     .....u..........
100322ec:	01108209 83060000 002c0110 0110b009     ..........,.....
100322fc:	b30b0002 00030110 0110b709 b90b0001     ................
1003230c:	00010110 0110bb14 bd010001 00000110     ................
1003231c:	0110be14 c20b0003 00000110 0110cd01     ................
1003232c:	d0060000 00180110 0110f00c 000b0009     ................
1003233c:	00020111 01110306 270b0023 00040111     ........#..'....
1003234c:	01112c09 2d0b0000 00070111 0111360c     .,.....-.....6..
1003235c:	40140009 00030111 01114406 45090000     ...@.....D.....E
1003236c:	00010111 01114706 50060000 00220111     .....G.....P..".
1003237c:	0111730b 74140000 00010111 01117606     .s.....t.....v..
1003238c:	800b0000 00010111 01118209 83060000     ................
1003239c:	002f0111 0111b309 b60b0002 00080111     ../.............
100323ac:	0111bf09 c1060001 00030111 0111c514     ................
100323bc:	c90b0003 00030111 0111cd14 ce090000     ................
100323cc:	00000111 0111cf0b d00c0000 00090111     ................
100323dc:	0111da06 db140000 00000111 0111dc06     ................
100323ec:	dd140000 00020111 0111e10e 00060013     ................
100323fc:	00110112 01121306 2c090018 00020112     ...........,....
1003240c:	01122f0b 32090002 00010112 0112340b     ./.....2.....4..
1003241c:	35090000 00000112 0112360b 38140001     ...5.....6.....8
1003242c:	00050112 01123e0b 3f060000 00010112     .....>.....?....
1003243c:	0112410b 80060000 00060112 01128806     .A..............
1003244c:	8a060000 00030112 01128f06 9f06000e     ................
1003245c:	00090112 0112a914 b0060000 002e0112     ................
1003246c:	0112df0b e0090000 00020112 0112e30b     ................
1003247c:	f00c0007 00090112 0113000b 02090001     ................
1003248c:	00010113 01130506 0f060007 00010113     ................
1003249c:	01131306 2a060015 00060113 01133206     .......*.....2..
100324ac:	35060001 00040113 01133b0b 3d060001     ...5.....;.....=
100324bc:	00000113 01133e09 400b0001 00000113     .....>.....@....
100324cc:	01134109 47090003 00010113 01134b09     .A.....G.....K..
100324dc:	50060002 00000113 01135709 5d060000     ...P.....W.....]
100324ec:	00040113 01136209 660b0001 00060113     .....b.....f....
100324fc:	0113700b 00060004 00340114 01143509     .p........4..5..
1003250c:	380b0002 00070114 01144009 420b0001     ...8.....@.....B
1003251c:	00020114 01144509 460b0000 00000114     .....E.....F....
1003252c:	01144706 4b140003 00040114 0114500c     .G.....K.....P..
1003253c:	5a140009 00010114 01145d14 5e0b0000     ...Z.....].....^
1003254c:	00000114 01145f06 80060002 002f0114     ....._......../.
1003255c:	0114b009 b30b0002 00050114 0114b909     ................
1003256c:	ba0b0000 00000114 0114bb09 bf0b0003     ................
1003257c:	00010114 0114c109 c20b0000 00010114     ................
1003258c:	0114c406 c6140001 00000114 0114c706     ................
1003259c:	d00c0000 00090114 01158006 af09002e     ................
100325ac:	00020115 0115b20b b8090003 00030115     ................
100325bc:	0115bc0b be090001 00000115 0115bf0b     ................
100325cc:	c1140001 00160115 0115d806 dc0b0003     ................
100325dc:	00010115 01160006 3009002f 00020116     ......../..0....
100325ec:	0116330b 3b090007 00010116 01163d0b     .3.....;.....=..
100325fc:	3e090000 00000116 01163f0b 41140001     ...>.....?.....A
1003260c:	00020116 01164406 500c0000 00090116     .....D.....P....
1003261c:	01166014 8006000c 002a0116 0116ab0b     .`........*.....
1003262c:	ac090000 00000116 0116ad0b ae090000     ................
1003263c:	00010116 0116b00b b6090005 00000116     ................
1003264c:	0116b70b b8060000 00000116 0116b914     ................
1003265c:	c00c0000 00090116 01170006 1d0b001a     ................
1003266c:	00020117 01172009 220b0001 00030117     ..... ....."....
1003267c:	01172609 270b0000 00040117 0117300c     .&.....'.....0..
1003268c:	3a0e0009 00010117 01173c14 3f190002     ...:.....<.....?
1003269c:	00000117 01174006 00060006 002b0118     .....@........+.
100326ac:	01182c09 2f0b0002 00080118 01183809     .,...../.....8..
100326bc:	390b0000 00010118 01183b14 a0030000     ...9.....;......
100326cc:	003f0118 0118e00c ea0e0009 00080118     ..?.............
100326dc:	0118ff06 09060007 00000119 01190c06     ................
100326ec:	15060007 00010119 01191806 30090017     ...............0
100326fc:	00050119 01193709 3b0b0001 00010119     .....7.....;....
1003270c:	01193d09 3e0b0000 00000119 01193f06     .=.....>.....?..
1003271c:	40090000 00000119 01194106 42090000     ...@.....A.....B
1003272c:	00000119 0119430b 44140000 00020119     .....C.....D....
1003273c:	0119500c a0060009 00070119 0119aa06     .P..............
1003274c:	d1090026 00020119 0119d40b da0b0003     &...............
1003275c:	00010119 0119dc09 e00b0003 00000119     ................
1003276c:	0119e106 e2140000 00000119 0119e306     ................
1003277c:	e4090000 00000119 011a0006 010b0000     ................
1003278c:	0009011a 011a0b06 330b0027 0005011a     ........'..3....
1003279c:	011a3909 3a060000 0000011a 011a3b0b     .9.....:.....;..
100327ac:	3f140003 0007011a 011a470b 50060000     ...?.....G.....P
100327bc:	0000011a 011a510b 57090005 0001011a     .....Q.....W....
100327cc:	011a590b 5c060002 002d011a 011a8a0b     .Y.....\..-.....
100327dc:	9709000c 0000011a 011a980b 9a140001     ................
100327ec:	0002011a 011a9d06 9e140000 0004011a     ................
100327fc:	011ab006 00140048 0009011b 011c0006     ....H...........
1003280c:	0a060008 0024011c 011c2f09 300b0000     ......$../.....0
1003281c:	0006011c 011c380b 3e090005 0000011c     .....8.....>....
1003282c:	011c3f0b 40060000 0000011c 011c4114     .?.....@.....A..
1003283c:	500c0004 0009011c 011c5a0e 70140012     ...P.....Z.....p
1003284c:	0001011c 011c7206 920b001d 0015011c     .....r..........
1003285c:	011ca909 aa0b0000 0006011c 011cb109     ................
1003286c:	b20b0000 0001011c 011cb409 b50b0000     ................
1003287c:	0001011c 011d0006 08060006 0001011d     ................
1003288c:	011d0b06 310b0025 0005011d 011d3a0b     ....%..1.....:..
1003289c:	3c0b0000 0001011d 011d3f0b 46060006     ...<.....?.....F
100328ac:	0000011d 011d470b 500c0000 0009011d     .....G.....P....
100328bc:	011d6006 67060005 0001011d 011d6a06     .`.....g.....j..
100328cc:	8a09001f 0004011d 011d900b 93090001     ................
100328dc:	0001011d 011d950b 96090000 0000011d     ................
100328ec:	011d970b 98060000 0000011d 011da00c     ................
100328fc:	e0060009 0012011e 011ef30b f5090001     ................
1003290c:	0001011e 011ef714 000b0001 0001011f     ................
1003291c:	011f0206 03090000 0000011f 011f0406     ................
1003292c:	1206000c 0021011f 011f3409 360b0001     ......!..4.....6
1003293c:	0004011f 011f3e09 400b0001 0000011f     .....>.....@....
1003294c:	011f4109 420b0000 0000011f 011f4314     .A.....B.....C..
1003295c:	500c000c 0009011f 011fb006 c00e0000     ...P............
1003296c:	0014011f 011fd519 dd160007 0003011f     ................
1003297c:	011fe119 ff140010 0000011f 01200006     .............. .
1003298c:	000d0399 006e0124 01247014 80060004     ....$.n..p$.....
1003299c:	00c30124 012f9006 f1140060 0001012f     $...../.`.../...
100329ac:	01300006 3001042f 000f0134 0134400b     ..0./..04....@4.
100329bc:	41060000 00050134 0134470b 0006000e     ...A4....G4.....
100329cc:	02460144 01680006 40060238 001e016a     D.F...h.8..@j...
100329dc:	016a600c 6e140009 0001016a 016a7006     .`j....nj....pj.
100329ec:	c00c004e 0009016a 016ad006 f00b001d     N...j.....j.....
100329fc:	0004016a 016af514 00060000 002f016b     j.....j.....k./.
10032a0c:	016b300b 37140006 0004016b 016b3c19     .0k....7k....<k.
10032a1c:	40050003 0003016b 016b4414 45190000     ...@k....Dk....E
10032a2c:	0000016b 016b500c 5b0e0009 0006016b     k....Pk....[k...
10032a3c:	016b6306 7d060014 0012016b 016e4003     .ck....}k....@n.
10032a4c:	800e003f 0016016e 016e9714 00060003     ?...n.....n.....
10032a5c:	004a016f 016f4f0b 50060000 0000016f     o.J..Oo....Po...
10032a6c:	016f5109 8f0b0036 0003016f 016f9305     .Qo.6...o.....o.
10032a7c:	e005000c 0001016f 016fe214 e3050000     ....o.....o.....
10032a8c:	0000016f 016fe40b f0090000 0001016f     o.....o.....o...
10032a9c:	01700006 000617f7 04d50188 018d0006     ..p.............
10032aac:	f0050008 000301af 01aff505 fd050006     ................
10032abc:	000101af 01b00006 32060122 000001b1     ........"..2....
10032acc:	01b15006 55060002 000001b1 01b16406     .P.....U.....d..
10032adc:	70060003 018b01b1 01bc0006 7006006a     ...p........j..p
10032aec:	000c01bc 01bc8006 90060008 000901bc     ................
10032afc:	01bc9c19 9d0b0000 000101bc 01bc9f14     ................
10032b0c:	a0010000 000301bc 01cf000b 300b002d     ............-..0
10032b1c:	001601cf 01cf5019 00190073 00f501d0     .....P..s.......
10032b2c:	01d10019 29190026 003b01d1 01d16509     ....&..)..;..e..
10032b3c:	670b0001 000201d1 01d16a19 6d090002     ...g.....j.....m
10032b4c:	000501d1 01d17301 7b0b0007 000701d1     .....s.....{....
10032b5c:	01d18319 850b0001 000601d1 01d18c19     ................
10032b6c:	aa0b001d 000301d1 01d1ae19 0019003c     ............<...
10032b7c:	004101d2 01d2420b 45190002 000001d2     ..A..B.....E....
10032b8c:	01d2c00e e00e0013 001301d2 01d30019     ................
10032b9c:	600e0056 001801d3 01d40008 1a040019     V..`............
10032bac:	001901d4 01d43408 4e040019 000601d4     .....4.....N....
10032bbc:	01d45604 68080011 001901d4 01d48204     .V.....h........
10032bcc:	9c080019 000001d4 01d49e08 a2080001     ................
10032bdc:	000001d4 01d4a508 a9080001 000301d4     ................
10032bec:	01d4ae08 b6040007 000301d4 01d4bb04     ................
10032bfc:	bd040000 000601d4 01d4c504 d008000a     ................
10032c0c:	001901d4 01d4ea04 04080019 000101d5     ................
10032c1c:	01d50708 0d080003 000701d5 01d51608     ................
10032c2c:	1e040006 001901d5 01d53808 3b080001     .........8.....;
10032c3c:	000301d5 01d54008 46080004 000001d5     .....@.....F....
10032c4c:	01d54a08 52040006 001901d5 01d56c08     .J.....R.....l..
10032c5c:	86040019 001901d5 01d5a008 ba040019     ................
10032c6c:	001901d5 01d5d408 ee040019 001901d5     ................
10032c7c:	01d60808 22040019 001901d6 01d63c08     .......".....<..
10032c8c:	56040019 001901d6 01d67008 8a040019     ...V.....p......
10032c9c:	001b01d6 01d6a808 c1180018 000001d6     ................
10032cac:	01d6c204 db180018 000001d6 01d6dc04     ................
10032cbc:	e2080005 001801d6 01d6fb18 fc040000     ................
10032ccc:	001801d6 01d71518 16040000 000501d7     ................
10032cdc:	01d71c08 35180018 000001d7 01d73604     .......5.....6..
10032cec:	4f180018 000001d7 01d75004 56080005     ...O.....P.....V
10032cfc:	001801d7 01d76f18 70040000 001801d7     .....o.....p....
10032d0c:	01d78918 8a040000 000501d7 01d79008     ................
10032d1c:	a9180018 000001d7 01d7aa04 c3180018     ................
10032d2c:	000001d7 01d7c404 ca080005 000001d7     ................
10032d3c:	01d7cb04 ce0c0000 003101d7 01d80019     ..........1.....
10032d4c:	000b01ff 003601da 01da3719 3b0b0003     ......6..7.....;
10032d5c:	003101da 01da6d19 750b0007 000001da     ..1..m.....u....
10032d6c:	01da7619 840b000d 000001da 01da8519     .v..............
10032d7c:	87140001 000401da 01da9b0b a10b0004     ................
10032d8c:	000e01da 01df0004 0a060009 000001df     ................
10032d9c:	01df0b04 25040013 000501df 01e0000b     .......%........
10032dac:	080b0006 001001e0 01e01b0b 230b0006     ...............#
10032dbc:	000101e0 01e0260b 30050004 003d01e0     .....&.....0..=.
10032dcc:	01e08f0b 00060000 002c01e1 01e1300b     ..........,..0..
10032ddc:	37050006 000601e1 01e1400c 4e060009     ...7.....@.....N
10032dec:	000001e1 01e14f19 90060000 001d01e2     .....O..........
10032dfc:	01e2ae0b c0060000 002b01e2 01e2ec0b     ..........+.....
10032e0c:	f00c0003 000901e2 01e2ff16 d0060000     ................
10032e1c:	001a01e4 01e4eb05 ec0b0000 000301e4     ................
10032e2c:	01e4f00c e0060009 000601e7 01e7e806     ................
10032e3c:	ed060003 000101e7 01e7f006 0006000e     ................
10032e4c:	00c401e8 01e8c70e d00b0008 000601e8     ................
10032e5c:	01e90003 440b0043 000601e9 01e94b05     ....C..D.....K..
10032e6c:	500c0000 000901e9 01e95e14 710e0001     ...P.....^.....q
10032e7c:	003a01ec 01ecac19 ad0e0000 000201ec     ..:.............
10032e8c:	01ecb016 b10e0000 000301ec 01ed010e     ................
10032e9c:	2e19002c 000001ed 01ed2f0e 0006000e     ,......../......
10032eac:	000301ee 01ee0506 2106001a 000101ee     ...........!....
10032ebc:	01ee2406 27060000 000001ee 01ee2906     .$.....'.....)..
10032ecc:	34060009 000301ee 01ee3906 3b060000     ...4.....9.....;
10032edc:	000001ee 01ee4206 47060000 000001ee     .....B.....G....
10032eec:	01ee4906 4b060000 000001ee 01ee4d06     .I.....K.....M..
10032efc:	51060002 000101ee 01ee5406 57060000     ...Q.....T.....W
10032f0c:	000001ee 01ee5906 5b060000 000001ee     .....Y.....[....
10032f1c:	01ee5d06 5f060000 000001ee 01ee6106     .]....._.....a..
10032f2c:	64060001 000001ee 01ee6706 6c060003     ...d.....g.....l
10032f3c:	000601ee 01ee7406 79060003 000301ee     .....t.....y....
10032f4c:	01ee7e06 80060000 000901ee 01ee8b06     .~..............
10032f5c:	a1060010 000201ee 01eea506 ab060004     ................
10032f6c:	001001ee 01eef018 00190001 002b01f0     ..............+.
10032f7c:	01f03019 a0190063 000e01f0 01f0b119     .0..c...........
10032f8c:	c119000e 000e01f0 01f0d119 000e0024     ............$...
10032f9c:	000c01f1 01f10d19 e61900a0 001c01f1     ................
10032fac:	01f21019 4019002b 000801f2 01f25019     ....+..@.....P..
10032fbc:	60190001 000501f2 01f30019 fb1700fa     ...`............
10032fcc:	000401f3 01f40019 dc1902d7 001001f6     ................
10032fdc:	01f6f019 0019000c 007601f7 01f77b19     ..........v..{..
10032fec:	e019005e 000b01f7 01f7f019 00190000     ^...............
10032ffc:	000b01f8 01f81019 50190037 000901f8     ........7..P....
1003300c:	01f86019 90190027 001d01f8 01f8b019     .`..'...........
1003301c:	00190001 015301f9 01fa6019 7019000d     ......S..`.....p
1003302c:	000c01fa 01fa8019 90190008 002d01fa     ..............-.
1003303c:	01fabf19 ce190006 000d01fa 01fae019     ................
1003304c:	f0190008 000801fa 01fb0019 94190092     ................
1003305c:	003601fb 01fbf00c 00060009 a6df0200     ..6.............
1003306c:	02a70006 40061039 00dd02b7 02b82006     ....9..@..... ..
1003307c:	b0061681 1d3002ce 02f80006 0006021d     ......0.........
1003308c:	134a0300 03135006 0101105f 00000e00     ..J..P.._.......
1003309c:	0e002001 000b005f 00ef0e01 6c6f562f     . .._......./Vol
100330ac:	73656d75 7461642f 656a2f61 6e696b6e     umes/data/jenkin
100330bc:	6f772f73 70736b72 2f656361 2d554e47     s/workspace/GNU-
100330cc:	6c6f6f74 69616863 72612f6e 32312d6d     toolchain/arm-12
100330dc:	6372732f 77656e2f 2d62696c 77677963     /src/newlib-cygw
100330ec:	6e2f6e69 696c7765 696c2f62 732f6362     in/newlib/libc/s
100330fc:	696c6474 64672f62 2d616f74 68746567     tdlib/gdtoa-geth
1003310c:	632e7865 00000000                       ex.c....

10033114 <__hexdig>:
	...
10033144:	13121110 17161514 00001918 00000000     ................
10033154:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
10033174:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

10033214 <_init>:
10033214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10033216:	bf00      	nop
10033218:	bcf8      	pop	{r3, r4, r5, r6, r7}
1003321a:	bc08      	pop	{r3}
1003321c:	469e      	mov	lr, r3
1003321e:	4770      	bx	lr

10033220 <_fini>:
10033220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10033222:	bf00      	nop
10033224:	bcf8      	pop	{r3, r4, r5, r6, r7}
10033226:	bc08      	pop	{r3}
10033228:	469e      	mov	lr, r3
1003322a:	4770      	bx	lr
1003322c:	0000      	movs	r0, r0
	...

10033230 <__MXC_FLC_Com_Read_veneer>:
10033230:	f85f f000 	ldr.w	pc, [pc]	@ 10033234 <__MXC_FLC_Com_Read_veneer+0x4>
10033234:	20000a91 	.word	0x20000a91

10033238 <__MXC_FLC_Com_Write_veneer>:
10033238:	f85f f000 	ldr.w	pc, [pc]	@ 1003323c <__MXC_FLC_Com_Write_veneer+0x4>
1003323c:	200009b9 	.word	0x200009b9

10033240 <__MXC_FLC_RevA_Write32Using128_veneer>:
10033240:	f85f f000 	ldr.w	pc, [pc]	@ 10033244 <__MXC_FLC_RevA_Write32Using128_veneer+0x4>
10033244:	200008ad 	.word	0x200008ad

10033248 <__MXC_FLC_PageErase_veneer>:
10033248:	f85f f000 	ldr.w	pc, [pc]	@ 1003324c <__MXC_FLC_PageErase_veneer+0x4>
1003324c:	20000711 	.word	0x20000711

10033250 <__EH_FRAME_BEGIN__>:
10033250:	00000010 00000000 00527a01 010e7c02     .........zR..|..
10033260:	000d0c1b 00000038 00000018 fffe6db4     ....8........m..
10033270:	0000009e 100e5100 03850484 01870286     .....Q..........
10033280:	c5c6c75b 4c000ec4 0a0b420a 100e0b42     [......L.B..B...
10033290:	03850484 01870286 c5c6c751 00000ec4     ........Q.......
100332a0:	00000010 00000000 00527a01 010e7c02     .........zR..|..
100332b0:	000d0c1b 00000014 00000018 fffe6e04     .............n..
100332c0:	00000134 0a710200 00000b43 00000010     4.....q.C.......
100332d0:	00000000 00527a01 010e7c02 000d0c1b     .....zR..|......
100332e0:	0000001c 00000018 fffe6f18 000000d8     .........o......
100332f0:	080e4100 02840185 4a0a4902 0b41c4c5     .A.......I.J..A.

10033300 <__FRAME_END__>:
10033300:	00000000                                ....

Disassembly of section .data:

20000000 <PACKET_SIZE>:
20000000:	00000015                                ....

20000004 <PADDING>:
20000004:	00000080 00000000 00000000 00000000     ................
	...

20000044 <ConsoleUart>:
20000044:	40042000                                . .@

20000048 <overflows>:
20000048:	ffffffff                                ....

2000004c <flc_int>:
2000004c:	40029000                                ...@

20000050 <interruptCheck>:
20000050:	00001008                                ....

20000054 <__malloc_sbrk_base>:
20000054:	ffffffff                                ....

20000058 <__malloc_trim_threshold>:
20000058:	00020000 00000000                       ........

20000060 <__malloc_av_>:
	...
20000068:	20000060 20000060 20000068 20000068     `.. `.. h.. h.. 
20000078:	20000070 20000070 20000078 20000078     p.. p.. x.. x.. 
20000088:	20000080 20000080 20000088 20000088     ... ... ... ... 
20000098:	20000090 20000090 20000098 20000098     ... ... ... ... 
200000a8:	200000a0 200000a0 200000a8 200000a8     ... ... ... ... 
200000b8:	200000b0 200000b0 200000b8 200000b8     ... ... ... ... 
200000c8:	200000c0 200000c0 200000c8 200000c8     ... ... ... ... 
200000d8:	200000d0 200000d0 200000d8 200000d8     ... ... ... ... 
200000e8:	200000e0 200000e0 200000e8 200000e8     ... ... ... ... 
200000f8:	200000f0 200000f0 200000f8 200000f8     ... ... ... ... 
20000108:	20000100 20000100 20000108 20000108     ... ... ... ... 
20000118:	20000110 20000110 20000118 20000118     ... ... ... ... 
20000128:	20000120 20000120 20000128 20000128      ..  .. (.. (.. 
20000138:	20000130 20000130 20000138 20000138     0.. 0.. 8.. 8.. 
20000148:	20000140 20000140 20000148 20000148     @.. @.. H.. H.. 
20000158:	20000150 20000150 20000158 20000158     P.. P.. X.. X.. 
20000168:	20000160 20000160 20000168 20000168     `.. `.. h.. h.. 
20000178:	20000170 20000170 20000178 20000178     p.. p.. x.. x.. 
20000188:	20000180 20000180 20000188 20000188     ... ... ... ... 
20000198:	20000190 20000190 20000198 20000198     ... ... ... ... 
200001a8:	200001a0 200001a0 200001a8 200001a8     ... ... ... ... 
200001b8:	200001b0 200001b0 200001b8 200001b8     ... ... ... ... 
200001c8:	200001c0 200001c0 200001c8 200001c8     ... ... ... ... 
200001d8:	200001d0 200001d0 200001d8 200001d8     ... ... ... ... 
200001e8:	200001e0 200001e0 200001e8 200001e8     ... ... ... ... 
200001f8:	200001f0 200001f0 200001f8 200001f8     ... ... ... ... 
20000208:	20000200 20000200 20000208 20000208     ... ... ... ... 
20000218:	20000210 20000210 20000218 20000218     ... ... ... ... 
20000228:	20000220 20000220 20000228 20000228      ..  .. (.. (.. 
20000238:	20000230 20000230 20000238 20000238     0.. 0.. 8.. 8.. 
20000248:	20000240 20000240 20000248 20000248     @.. @.. H.. H.. 
20000258:	20000250 20000250 20000258 20000258     P.. P.. X.. X.. 
20000268:	20000260 20000260 20000268 20000268     `.. `.. h.. h.. 
20000278:	20000270 20000270 20000278 20000278     p.. p.. x.. x.. 
20000288:	20000280 20000280 20000288 20000288     ... ... ... ... 
20000298:	20000290 20000290 20000298 20000298     ... ... ... ... 
200002a8:	200002a0 200002a0 200002a8 200002a8     ... ... ... ... 
200002b8:	200002b0 200002b0 200002b8 200002b8     ... ... ... ... 
200002c8:	200002c0 200002c0 200002c8 200002c8     ... ... ... ... 
200002d8:	200002d0 200002d0 200002d8 200002d8     ... ... ... ... 
200002e8:	200002e0 200002e0 200002e8 200002e8     ... ... ... ... 
200002f8:	200002f0 200002f0 200002f8 200002f8     ... ... ... ... 
20000308:	20000300 20000300 20000308 20000308     ... ... ... ... 
20000318:	20000310 20000310 20000318 20000318     ... ... ... ... 
20000328:	20000320 20000320 20000328 20000328      ..  .. (.. (.. 
20000338:	20000330 20000330 20000338 20000338     0.. 0.. 8.. 8.. 
20000348:	20000340 20000340 20000348 20000348     @.. @.. H.. H.. 
20000358:	20000350 20000350 20000358 20000358     P.. P.. X.. X.. 
20000368:	20000360 20000360 20000368 20000368     `.. `.. h.. h.. 
20000378:	20000370 20000370 20000378 20000378     p.. p.. x.. x.. 
20000388:	20000380 20000380 20000388 20000388     ... ... ... ... 
20000398:	20000390 20000390 20000398 20000398     ... ... ... ... 
200003a8:	200003a0 200003a0 200003a8 200003a8     ... ... ... ... 
200003b8:	200003b0 200003b0 200003b8 200003b8     ... ... ... ... 
200003c8:	200003c0 200003c0 200003c8 200003c8     ... ... ... ... 
200003d8:	200003d0 200003d0 200003d8 200003d8     ... ... ... ... 
200003e8:	200003e0 200003e0 200003e8 200003e8     ... ... ... ... 
200003f8:	200003f0 200003f0 200003f8 200003f8     ... ... ... ... 
20000408:	20000400 20000400 20000408 20000408     ... ... ... ... 
20000418:	20000410 20000410 20000418 20000418     ... ... ... ... 
20000428:	20000420 20000420 20000428 20000428      ..  .. (.. (.. 
20000438:	20000430 20000430 20000438 20000438     0.. 0.. 8.. 8.. 
20000448:	20000440 20000440 20000448 20000448     @.. @.. H.. H.. 
20000458:	20000450 20000450 20000458 20000458     P.. P.. X.. X.. 

20000468 <__sglue>:
20000468:	00000000 00000003 200015cc              ........... 

20000474 <__global_locale>:
20000474:	00000043 00000000 00000000 00000000     C...............
	...
20000494:	00000043 00000000 00000000 00000000     C...............
	...
200004b4:	00000043 00000000 00000000 00000000     C...............
	...
200004d4:	00000043 00000000 00000000 00000000     C...............
	...
200004f4:	00000043 00000000 00000000 00000000     C...............
	...
20000514:	00000043 00000000 00000000 00000000     C...............
	...
20000534:	00000043 00000000 00000000 00000000     C...............
	...
20000554:	10020a8d 1001b5fd 00000000 1002c210     ................
20000564:	1002c1c8 1002c5b4 1002c5b4 1002c5b4     ................
20000574:	1002c5b4 1002c5b4 1002c5b4 1002c5b4     ................
20000584:	1002c5b4 1002c5b4 ffffffff ffffffff     ................
20000594:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200005bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200005e0 <_impure_ptr>:
200005e0:	200005e8 00000000                       ... ....

200005e8 <_impure_data>:
200005e8:	00000000 200015cc 20001634 2000169c     ....... 4.. ... 
	...
20000680:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000690:	0005deec 0000000b 00000000 00000000     ................
	...

20000708 <__atexit_recursive_mutex>:
20000708:	20001710                                ... 

2000070c <MXC_FLC_Busy>:
    return MXC_FLC_RevA_Busy();
2000070c:	f000 b856 	b.w	200007bc <MXC_FLC_RevA_Busy>

20000710 <MXC_FLC_PageErase>:
{
20000710:	b507      	push	{r0, r1, r2, lr}
    mxc_flc_regs_t *flc = NULL;
20000712:	2300      	movs	r3, #0
{
20000714:	4602      	mov	r2, r0
    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
20000716:	4601      	mov	r1, r0
20000718:	a801      	add	r0, sp, #4
    mxc_flc_regs_t *flc = NULL;
2000071a:	9301      	str	r3, [sp, #4]
    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
2000071c:	f000 f9cc 	bl	20000ab8 <__MXC_FLC_ME17_GetByAddress_veneer>
20000720:	b958      	cbnz	r0, 2000073a <MXC_FLC_PageErase+0x2a>
    if ((err = MXC_FLC_ME17_GetPhysicalAddress(address, &addr)) < E_NO_ERROR) {
20000722:	4669      	mov	r1, sp
20000724:	4610      	mov	r0, r2
20000726:	f000 f9cb 	bl	20000ac0 <__MXC_FLC_ME17_GetPhysicalAddress_veneer>
2000072a:	2800      	cmp	r0, #0
2000072c:	db05      	blt.n	2000073a <MXC_FLC_PageErase+0x2a>
    err = MXC_FLC_RevA_PageErase((mxc_flc_reva_regs_t *)flc, addr);
2000072e:	e9dd 1000 	ldrd	r1, r0, [sp]
20000732:	f000 f86b 	bl	2000080c <MXC_FLC_RevA_PageErase>
    MXC_FLC_ME17_Flash_Operation();
20000736:	f000 f9bb 	bl	20000ab0 <__MXC_FLC_ME17_Flash_Operation_veneer>
}
2000073a:	b003      	add	sp, #12
2000073c:	f85d fb04 	ldr.w	pc, [sp], #4

20000740 <MXC_FLC_Write128>:
{
20000740:	b513      	push	{r0, r1, r4, lr}
    mxc_flc_regs_t *flc = NULL;
20000742:	2300      	movs	r3, #0
20000744:	9300      	str	r3, [sp, #0]
    if (address & 0xF) {
20000746:	0703      	lsls	r3, r0, #28
{
20000748:	4604      	mov	r4, r0
2000074a:	460a      	mov	r2, r1
    if (address & 0xF) {
2000074c:	d112      	bne.n	20000774 <MXC_FLC_Write128+0x34>
    if ((err = MXC_FLC_ME17_GetByAddress(&flc, address)) != E_NO_ERROR) {
2000074e:	4601      	mov	r1, r0
20000750:	4668      	mov	r0, sp
20000752:	f000 f9b1 	bl	20000ab8 <__MXC_FLC_ME17_GetByAddress_veneer>
20000756:	b958      	cbnz	r0, 20000770 <MXC_FLC_Write128+0x30>
    if ((err = MXC_FLC_ME17_GetPhysicalAddress(address, &addr)) < E_NO_ERROR) {
20000758:	a901      	add	r1, sp, #4
2000075a:	4620      	mov	r0, r4
2000075c:	f000 f9b0 	bl	20000ac0 <__MXC_FLC_ME17_GetPhysicalAddress_veneer>
20000760:	2800      	cmp	r0, #0
20000762:	db05      	blt.n	20000770 <MXC_FLC_Write128+0x30>
    err = MXC_FLC_RevA_Write128((mxc_flc_reva_regs_t *)flc, addr, data);
20000764:	e9dd 0100 	ldrd	r0, r1, [sp]
20000768:	f000 f8e4 	bl	20000934 <MXC_FLC_RevA_Write128>
    MXC_FLC_ME17_Flash_Operation();
2000076c:	f000 f9a0 	bl	20000ab0 <__MXC_FLC_ME17_Flash_Operation_veneer>
}
20000770:	b002      	add	sp, #8
20000772:	bd10      	pop	{r4, pc}
        return E_BAD_PARAM;
20000774:	f06f 0002 	mvn.w	r0, #2
20000778:	e7fa      	b.n	20000770 <MXC_FLC_Write128+0x30>
	...

2000077c <MXC_prepare_flc>:
    return (flc->ctrl &
2000077c:	6883      	ldr	r3, [r0, #8]
    if (MXC_busy_flc(flc)) {
2000077e:	075a      	lsls	r2, r3, #29
20000780:	d114      	bne.n	200007ac <MXC_prepare_flc+0x30>
    flc->clkdiv = SystemCoreClock / 1000000;
20000782:	4b0c      	ldr	r3, [pc, #48]	@ (200007b4 <MXC_prepare_flc+0x38>)
20000784:	4a0c      	ldr	r2, [pc, #48]	@ (200007b8 <MXC_prepare_flc+0x3c>)
20000786:	681b      	ldr	r3, [r3, #0]
20000788:	fbb3 f3f2 	udiv	r3, r3, r2
2000078c:	6043      	str	r3, [r0, #4]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
2000078e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
20000790:	079b      	lsls	r3, r3, #30
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000792:	bf42      	ittt	mi
20000794:	6a43      	ldrmi	r3, [r0, #36]	@ 0x24
20000796:	f023 0302 	bicmi.w	r3, r3, #2
2000079a:	6243      	strmi	r3, [r0, #36]	@ 0x24
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_UNLOCK) | MXC_S_FLC_REVA_CTRL_UNLOCK_UNLOCKED;
2000079c:	6883      	ldr	r3, [r0, #8]
2000079e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
200007a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
200007a6:	6083      	str	r3, [r0, #8]
    return E_NO_ERROR;
200007a8:	2000      	movs	r0, #0
200007aa:	4770      	bx	lr
        return E_BUSY;
200007ac:	f06f 0005 	mvn.w	r0, #5
}
200007b0:	4770      	bx	lr
200007b2:	bf00      	nop
200007b4:	200018ac 	.word	0x200018ac
200007b8:	000f4240 	.word	0x000f4240

200007bc <MXC_FLC_RevA_Busy>:
    return (flc->ctrl &
200007bc:	4b02      	ldr	r3, [pc, #8]	@ (200007c8 <MXC_FLC_RevA_Busy+0xc>)
200007be:	6898      	ldr	r0, [r3, #8]
}
200007c0:	f000 0007 	and.w	r0, r0, #7
200007c4:	4770      	bx	lr
200007c6:	bf00      	nop
200007c8:	40029000 	.word	0x40029000

200007cc <MXC_FLC_RevA_MassErase>:
{
200007cc:	b508      	push	{r3, lr}
200007ce:	4601      	mov	r1, r0
    if ((err = MXC_prepare_flc(flc)) != E_NO_ERROR) {
200007d0:	f7ff ffd4 	bl	2000077c <MXC_prepare_flc>
200007d4:	b9c8      	cbnz	r0, 2000080a <MXC_FLC_RevA_MassErase+0x3e>
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_ERASE_CODE) |
200007d6:	688b      	ldr	r3, [r1, #8]
200007d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
200007dc:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
200007e0:	608b      	str	r3, [r1, #8]
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_ME;
200007e2:	688b      	ldr	r3, [r1, #8]
200007e4:	f043 0302 	orr.w	r3, r3, #2
200007e8:	608b      	str	r3, [r1, #8]
    return (flc->ctrl &
200007ea:	688b      	ldr	r3, [r1, #8]
    while (MXC_busy_flc(flc)) {}
200007ec:	075a      	lsls	r2, r3, #29
200007ee:	d1fc      	bne.n	200007ea <MXC_FLC_RevA_MassErase+0x1e>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
200007f0:	688b      	ldr	r3, [r1, #8]
200007f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
200007f6:	608b      	str	r3, [r1, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
200007f8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
200007fa:	079b      	lsls	r3, r3, #30
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
200007fc:	bf41      	itttt	mi
200007fe:	6a4b      	ldrmi	r3, [r1, #36]	@ 0x24
20000800:	f023 0302 	bicmi.w	r3, r3, #2
20000804:	624b      	strmi	r3, [r1, #36]	@ 0x24
        return E_BAD_STATE;
20000806:	f06f 0006 	mvnmi.w	r0, #6
}
2000080a:	bd08      	pop	{r3, pc}

2000080c <MXC_FLC_RevA_PageErase>:
{
2000080c:	b510      	push	{r4, lr}
2000080e:	4604      	mov	r4, r0
    if ((err = MXC_prepare_flc(flc)) != E_NO_ERROR) {
20000810:	f7ff ffb4 	bl	2000077c <MXC_prepare_flc>
20000814:	b9d0      	cbnz	r0, 2000084c <MXC_FLC_RevA_PageErase+0x40>
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_ERASE_CODE) |
20000816:	68a3      	ldr	r3, [r4, #8]
20000818:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
2000081c:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
20000820:	60a3      	str	r3, [r4, #8]
    flc->addr = addr;
20000822:	6021      	str	r1, [r4, #0]
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_PGE;
20000824:	68a3      	ldr	r3, [r4, #8]
20000826:	f043 0304 	orr.w	r3, r3, #4
2000082a:	60a3      	str	r3, [r4, #8]
    return (flc->ctrl &
2000082c:	68a3      	ldr	r3, [r4, #8]
    while (MXC_busy_flc(flc)) {}
2000082e:	075a      	lsls	r2, r3, #29
20000830:	d1fc      	bne.n	2000082c <MXC_FLC_RevA_PageErase+0x20>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
20000832:	68a3      	ldr	r3, [r4, #8]
20000834:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000838:	60a3      	str	r3, [r4, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
2000083a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
2000083c:	079b      	lsls	r3, r3, #30
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
2000083e:	bf41      	itttt	mi
20000840:	6a63      	ldrmi	r3, [r4, #36]	@ 0x24
20000842:	f023 0302 	bicmi.w	r3, r3, #2
20000846:	6263      	strmi	r3, [r4, #36]	@ 0x24
        return E_BAD_STATE;
20000848:	f06f 0006 	mvnmi.w	r0, #6
}
2000084c:	bd10      	pop	{r4, pc}

2000084e <MXC_FLC_RevA_Write32>:
{
2000084e:	b538      	push	{r3, r4, r5, lr}
    if (logicAddr & 0x3) {
20000850:	078d      	lsls	r5, r1, #30
{
20000852:	4604      	mov	r4, r0
    if (logicAddr & 0x3) {
20000854:	d127      	bne.n	200008a6 <MXC_FLC_RevA_Write32+0x58>
    if ((*(uint32_t *)logicAddr & data) != data) {
20000856:	680b      	ldr	r3, [r1, #0]
20000858:	ea02 0503 	and.w	r5, r2, r3
2000085c:	439a      	bics	r2, r3
2000085e:	d11f      	bne.n	200008a0 <MXC_FLC_RevA_Write32+0x52>
    if ((err = MXC_prepare_flc(flc)) != E_NO_ERROR) {
20000860:	f7ff ff8c 	bl	2000077c <MXC_prepare_flc>
20000864:	b9f0      	cbnz	r0, 200008a4 <MXC_FLC_RevA_Write32+0x56>
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_WDTH;
20000866:	68a3      	ldr	r3, [r4, #8]
    logicAddr = logicAddr & 0xfffffffc;
20000868:	f021 0103 	bic.w	r1, r1, #3
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_WDTH;
2000086c:	f043 0310 	orr.w	r3, r3, #16
20000870:	60a3      	str	r3, [r4, #8]
    flc->addr = logicAddr;
20000872:	6021      	str	r1, [r4, #0]
    flc->data[0] = data;
20000874:	6325      	str	r5, [r4, #48]	@ 0x30
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_WR;
20000876:	68a3      	ldr	r3, [r4, #8]
20000878:	f043 0301 	orr.w	r3, r3, #1
2000087c:	60a3      	str	r3, [r4, #8]
    while ((flc->ctrl & MXC_F_FLC_REVA_CTRL_PEND) != 0) {}
2000087e:	68a3      	ldr	r3, [r4, #8]
20000880:	01d9      	lsls	r1, r3, #7
20000882:	d4fc      	bmi.n	2000087e <MXC_FLC_RevA_Write32+0x30>
    return (flc->ctrl &
20000884:	68a3      	ldr	r3, [r4, #8]
    while (MXC_busy_flc(flc)) {}
20000886:	075a      	lsls	r2, r3, #29
20000888:	d1fc      	bne.n	20000884 <MXC_FLC_RevA_Write32+0x36>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
2000088a:	68a3      	ldr	r3, [r4, #8]
2000088c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000890:	60a3      	str	r3, [r4, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
20000892:	6a63      	ldr	r3, [r4, #36]	@ 0x24
20000894:	079b      	lsls	r3, r3, #30
20000896:	d505      	bpl.n	200008a4 <MXC_FLC_RevA_Write32+0x56>
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000898:	6a63      	ldr	r3, [r4, #36]	@ 0x24
2000089a:	f023 0302 	bic.w	r3, r3, #2
2000089e:	6263      	str	r3, [r4, #36]	@ 0x24
        return E_BAD_STATE;
200008a0:	f06f 0006 	mvn.w	r0, #6
}
200008a4:	bd38      	pop	{r3, r4, r5, pc}
        return E_BAD_PARAM;
200008a6:	f06f 0002 	mvn.w	r0, #2
200008aa:	e7fb      	b.n	200008a4 <MXC_FLC_RevA_Write32+0x56>

200008ac <MXC_FLC_RevA_Write32Using128>:
{
200008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
200008ae:	b085      	sub	sp, #20
200008b0:	460c      	mov	r4, r1
200008b2:	4606      	mov	r6, r0
200008b4:	4615      	mov	r5, r2
    uint32_t current_data[4] = { 0, 0, 0, 0 };
200008b6:	2100      	movs	r1, #0
200008b8:	2210      	movs	r2, #16
200008ba:	4668      	mov	r0, sp
{
200008bc:	461f      	mov	r7, r3
    uint32_t current_data[4] = { 0, 0, 0, 0 };
200008be:	f000 f8ef 	bl	20000aa0 <__memset_veneer>
    if (logicAddr & 0x3) {
200008c2:	07a2      	lsls	r2, r4, #30
200008c4:	d130      	bne.n	20000928 <MXC_FLC_RevA_Write32Using128+0x7c>
    if ((*(uint32_t *)logicAddr & data) != data) {
200008c6:	6823      	ldr	r3, [r4, #0]
200008c8:	ea35 0303 	bics.w	r3, r5, r3
200008cc:	d12f      	bne.n	2000092e <MXC_FLC_RevA_Write32Using128+0x82>
    if ((err = MXC_prepare_flc(flc)) != E_NO_ERROR) {
200008ce:	4630      	mov	r0, r6
200008d0:	f7ff ff54 	bl	2000077c <MXC_prepare_flc>
200008d4:	b9b0      	cbnz	r0, 20000904 <MXC_FLC_RevA_Write32Using128+0x58>
    logicAddr = logicAddr & 0xfffffff0;
200008d6:	f024 000f 	bic.w	r0, r4, #15
    for (ptr = (uint32_t *)logicAddr; ptr < (uint32_t *)(logicAddr + 16); ptr++, i++) {
200008da:	f110 0f10 	cmn.w	r0, #16
200008de:	bf2c      	ite	cs
200008e0:	2301      	movcs	r3, #1
200008e2:	2305      	movcc	r3, #5
200008e4:	4669      	mov	r1, sp
200008e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
200008ea:	4602      	mov	r2, r0
200008ec:	4694      	mov	ip, r2
200008ee:	3204      	adds	r2, #4
200008f0:	429a      	cmp	r2, r3
200008f2:	d109      	bne.n	20000908 <MXC_FLC_RevA_Write32Using128+0x5c>
    if (byte < 4) {
200008f4:	f014 0f0c 	tst.w	r4, #12
    flc->addr = physicalAddr;
200008f8:	6037      	str	r7, [r6, #0]
    if (byte < 4) {
200008fa:	d10a      	bne.n	20000912 <MXC_FLC_RevA_Write32Using128+0x66>
        current_data[0] = data;
200008fc:	9500      	str	r5, [sp, #0]
    return MXC_FLC_Write128(logicAddr, current_data);
200008fe:	4669      	mov	r1, sp
20000900:	f7ff ff1e 	bl	20000740 <MXC_FLC_Write128>
}
20000904:	b005      	add	sp, #20
20000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
        current_data[i] = *ptr;
20000908:	f8dc c000 	ldr.w	ip, [ip]
2000090c:	f841 cb04 	str.w	ip, [r1], #4
    for (ptr = (uint32_t *)logicAddr; ptr < (uint32_t *)(logicAddr + 16); ptr++, i++) {
20000910:	e7ec      	b.n	200008ec <MXC_FLC_RevA_Write32Using128+0x40>
    } else if (byte < 8) {
20000912:	0723      	lsls	r3, r4, #28
20000914:	d401      	bmi.n	2000091a <MXC_FLC_RevA_Write32Using128+0x6e>
        current_data[1] = data;
20000916:	9501      	str	r5, [sp, #4]
20000918:	e7f1      	b.n	200008fe <MXC_FLC_RevA_Write32Using128+0x52>
    byte = (logicAddr & 0xf);
2000091a:	f004 040f 	and.w	r4, r4, #15
    } else if (byte < 12) {
2000091e:	2c0b      	cmp	r4, #11
        current_data[2] = data;
20000920:	bf94      	ite	ls
20000922:	9502      	strls	r5, [sp, #8]
        current_data[3] = data;
20000924:	9503      	strhi	r5, [sp, #12]
20000926:	e7ea      	b.n	200008fe <MXC_FLC_RevA_Write32Using128+0x52>
        return E_BAD_PARAM;
20000928:	f06f 0002 	mvn.w	r0, #2
2000092c:	e7ea      	b.n	20000904 <MXC_FLC_RevA_Write32Using128+0x58>
        return E_BAD_STATE;
2000092e:	f06f 0006 	mvn.w	r0, #6
20000932:	e7e7      	b.n	20000904 <MXC_FLC_RevA_Write32Using128+0x58>

20000934 <MXC_FLC_RevA_Write128>:
{
20000934:	b538      	push	{r3, r4, r5, lr}
    if (addr & 0xF) {
20000936:	070b      	lsls	r3, r1, #28
{
20000938:	4604      	mov	r4, r0
2000093a:	4615      	mov	r5, r2
    if (addr & 0xF) {
2000093c:	d127      	bne.n	2000098e <MXC_FLC_RevA_Write128+0x5a>
    if ((err = MXC_prepare_flc(flc)) != E_NO_ERROR) {
2000093e:	f7ff ff1d 	bl	2000077c <MXC_prepare_flc>
20000942:	bb18      	cbnz	r0, 2000098c <MXC_FLC_RevA_Write128+0x58>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_WDTH;
20000944:	68a3      	ldr	r3, [r4, #8]
20000946:	f023 0310 	bic.w	r3, r3, #16
2000094a:	60a3      	str	r3, [r4, #8]
    flc->addr = addr;
2000094c:	6021      	str	r1, [r4, #0]
    flc->data[0] = data[0];
2000094e:	682b      	ldr	r3, [r5, #0]
20000950:	6323      	str	r3, [r4, #48]	@ 0x30
    flc->data[1] = data[1];
20000952:	686b      	ldr	r3, [r5, #4]
20000954:	6363      	str	r3, [r4, #52]	@ 0x34
    flc->data[2] = data[2];
20000956:	68ab      	ldr	r3, [r5, #8]
20000958:	63a3      	str	r3, [r4, #56]	@ 0x38
    flc->data[3] = data[3];
2000095a:	68eb      	ldr	r3, [r5, #12]
2000095c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_WR;
2000095e:	68a3      	ldr	r3, [r4, #8]
20000960:	f043 0301 	orr.w	r3, r3, #1
20000964:	60a3      	str	r3, [r4, #8]
    while ((flc->ctrl & MXC_F_FLC_REVA_CTRL_PEND) != 0) {}
20000966:	68a3      	ldr	r3, [r4, #8]
20000968:	01d9      	lsls	r1, r3, #7
2000096a:	d4fc      	bmi.n	20000966 <MXC_FLC_RevA_Write128+0x32>
    return (flc->ctrl &
2000096c:	68a3      	ldr	r3, [r4, #8]
    while (MXC_busy_flc(flc)) {}
2000096e:	075a      	lsls	r2, r3, #29
20000970:	d1fc      	bne.n	2000096c <MXC_FLC_RevA_Write128+0x38>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
20000972:	68a3      	ldr	r3, [r4, #8]
20000974:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000978:	60a3      	str	r3, [r4, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
2000097a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
2000097c:	079b      	lsls	r3, r3, #30
2000097e:	d505      	bpl.n	2000098c <MXC_FLC_RevA_Write128+0x58>
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000980:	6a63      	ldr	r3, [r4, #36]	@ 0x24
20000982:	f023 0302 	bic.w	r3, r3, #2
20000986:	6263      	str	r3, [r4, #36]	@ 0x24
        return E_BAD_STATE;
20000988:	f06f 0006 	mvn.w	r0, #6
}
2000098c:	bd38      	pop	{r3, r4, r5, pc}
        return E_BAD_PARAM;
2000098e:	f06f 0002 	mvn.w	r0, #2
20000992:	e7fb      	b.n	2000098c <MXC_FLC_RevA_Write128+0x58>

20000994 <MXC_FLC_Com_VerifyData>:
#else
__attribute__((section(".flashprog")))
#endif
// Length is number of 32-bit words
int MXC_FLC_Com_VerifyData(uint32_t address, uint32_t length, uint32_t *data)
{
20000994:	b510      	push	{r4, lr}
    volatile uint32_t *ptr;

    for (ptr = (uint32_t *)address; ptr < (((uint32_t *)(address)) + length); ptr++, data++) {
20000996:	eb00 0181 	add.w	r1, r0, r1, lsl #2
2000099a:	3a04      	subs	r2, #4
2000099c:	4281      	cmp	r1, r0
2000099e:	d801      	bhi.n	200009a4 <MXC_FLC_Com_VerifyData+0x10>
        if (*ptr != *data) {
            return E_BAD_STATE;
        }
    }

    return E_NO_ERROR;
200009a0:	2000      	movs	r0, #0
}
200009a2:	bd10      	pop	{r4, pc}
        if (*ptr != *data) {
200009a4:	6804      	ldr	r4, [r0, #0]
200009a6:	f852 3f04 	ldr.w	r3, [r2, #4]!
200009aa:	429c      	cmp	r4, r3
200009ac:	d101      	bne.n	200009b2 <MXC_FLC_Com_VerifyData+0x1e>
    for (ptr = (uint32_t *)address; ptr < (((uint32_t *)(address)) + length); ptr++, data++) {
200009ae:	3004      	adds	r0, #4
200009b0:	e7f4      	b.n	2000099c <MXC_FLC_Com_VerifyData+0x8>
            return E_BAD_STATE;
200009b2:	f06f 0006 	mvn.w	r0, #6
200009b6:	e7f4      	b.n	200009a2 <MXC_FLC_Com_VerifyData+0xe>

200009b8 <MXC_FLC_Com_Write>:
#else
__attribute__((section(".flashprog")))
#endif
// make sure to disable ICC with ICC_Disable(); before Running this function
int MXC_FLC_Com_Write(uint32_t address, uint32_t length, uint32_t *buffer)
{
200009b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t current_data_32;
    uint8_t *current_data = (uint8_t *)&current_data_32;
    uint8_t *buffer8 = (uint8_t *)buffer;

    // Align the address to a word boundary and read/write if we have to
    if (address & 0x3) {
200009bc:	f010 0903 	ands.w	r9, r0, #3
{
200009c0:	b087      	sub	sp, #28
200009c2:	4605      	mov	r5, r0
200009c4:	460c      	mov	r4, r1
200009c6:	4616      	mov	r6, r2
    if (address & 0x3) {
200009c8:	d017      	beq.n	200009fa <MXC_FLC_Com_Write+0x42>
        // Figure out how many bytes we have to write to round up the address
        bytes_written = 4 - (address & 0x3);

        // Save the data currently in the flash
        memcpy(current_data, (void *)(address & (~0x3)), 4);
200009ca:	f020 0803 	bic.w	r8, r0, #3
        bytes_written = 4 - (address & 0x3);
200009ce:	f1c9 0704 	rsb	r7, r9, #4
        memcpy(current_data, (void *)(address & (~0x3)), 4);
200009d2:	f8d8 3000 	ldr.w	r3, [r8]
200009d6:	9301      	str	r3, [sp, #4]

        // Modify current_data to insert the data from buffer
        memcpy(&current_data[4 - bytes_written], buffer8, bytes_written);
200009d8:	ab01      	add	r3, sp, #4
200009da:	4631      	mov	r1, r6
200009dc:	463a      	mov	r2, r7
200009de:	eb03 0009 	add.w	r0, r3, r9
200009e2:	f000 f871 	bl	20000ac8 <__memcpy_veneer>

        // Write the modified data
        if ((err = MXC_FLC_Write32(address - (address % 4), current_data_32)) != E_NO_ERROR) {
200009e6:	9901      	ldr	r1, [sp, #4]
200009e8:	4640      	mov	r0, r8
200009ea:	f000 f85d 	bl	20000aa8 <__MXC_FLC_Write32_veneer>
200009ee:	2800      	cmp	r0, #0
200009f0:	d14b      	bne.n	20000a8a <MXC_FLC_Com_Write+0xd2>
            return err;
        }

        address += bytes_written;
200009f2:	3c04      	subs	r4, #4
200009f4:	443d      	add	r5, r7
        length -= bytes_written;
200009f6:	444c      	add	r4, r9
        buffer8 += bytes_written;
200009f8:	443e      	add	r6, r7
200009fa:	eb06 0804 	add.w	r8, r6, r4
200009fe:	1967      	adds	r7, r4, r5
20000a00:	e007      	b.n	20000a12 <MXC_FLC_Com_Write+0x5a>
    }

    // Align the address to a 4-word (128bit) boundary
    while ((length >= 4) && ((address & 0xF) != 0)) {
        memcpy(current_data, buffer8, 4);
20000a02:	6829      	ldr	r1, [r5, #0]
20000a04:	9101      	str	r1, [sp, #4]
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000a06:	4630      	mov	r0, r6
20000a08:	f000 f84e 	bl	20000aa8 <__MXC_FLC_Write32_veneer>
20000a0c:	2800      	cmp	r0, #0
20000a0e:	d13c      	bne.n	20000a8a <MXC_FLC_Com_Write+0xd2>
            return err;
        }

        address += 4;
        length -= 4;
20000a10:	3c04      	subs	r4, #4
    while ((length >= 4) && ((address & 0xF) != 0)) {
20000a12:	2c03      	cmp	r4, #3
20000a14:	eba8 0504 	sub.w	r5, r8, r4
20000a18:	eba7 0604 	sub.w	r6, r7, r4
20000a1c:	d802      	bhi.n	20000a24 <MXC_FLC_Com_Write+0x6c>
20000a1e:	4425      	add	r5, r4
20000a20:	4426      	add	r6, r4
20000a22:	e01d      	b.n	20000a60 <MXC_FLC_Com_Write+0xa8>
20000a24:	0733      	lsls	r3, r6, #28
20000a26:	d1ec      	bne.n	20000a02 <MXC_FLC_Com_Write+0x4a>
        buffer8 += 4;
    }

    if (length >= 16) {
        uint32_t buff128[4];
        while (length >= 16) {
20000a28:	2c0f      	cmp	r4, #15
20000a2a:	d9f8      	bls.n	20000a1e <MXC_FLC_Com_Write+0x66>
            memcpy(buff128, buffer8, 16);
20000a2c:	aa02      	add	r2, sp, #8
20000a2e:	f105 0710 	add.w	r7, r5, #16
20000a32:	6828      	ldr	r0, [r5, #0]
20000a34:	6869      	ldr	r1, [r5, #4]
20000a36:	4613      	mov	r3, r2
20000a38:	c303      	stmia	r3!, {r0, r1}
20000a3a:	3508      	adds	r5, #8
20000a3c:	42bd      	cmp	r5, r7
20000a3e:	461a      	mov	r2, r3
20000a40:	d1f7      	bne.n	20000a32 <MXC_FLC_Com_Write+0x7a>
            if ((err = MXC_FLC_Write128(address, buff128)) != E_NO_ERROR) {
20000a42:	a902      	add	r1, sp, #8
20000a44:	4630      	mov	r0, r6
20000a46:	f7ff fe7b 	bl	20000740 <MXC_FLC_Write128>
20000a4a:	b9f0      	cbnz	r0, 20000a8a <MXC_FLC_Com_Write+0xd2>
                return err;
            }

            address += 16;
20000a4c:	3610      	adds	r6, #16
            length -= 16;
20000a4e:	3c10      	subs	r4, #16
20000a50:	e7ea      	b.n	20000a28 <MXC_FLC_Com_Write+0x70>
            buffer8 += 16;
        }
    }

    while (length >= 4) {
        memcpy(current_data, buffer8, 4);
20000a52:	6809      	ldr	r1, [r1, #0]
20000a54:	9101      	str	r1, [sp, #4]
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000a56:	4638      	mov	r0, r7
20000a58:	f000 f826 	bl	20000aa8 <__MXC_FLC_Write32_veneer>
20000a5c:	b9a8      	cbnz	r0, 20000a8a <MXC_FLC_Com_Write+0xd2>
            return err;
        }

        address += 4;
        length -= 4;
20000a5e:	3c04      	subs	r4, #4
    while (length >= 4) {
20000a60:	2c03      	cmp	r4, #3
20000a62:	eba5 0104 	sub.w	r1, r5, r4
20000a66:	eba6 0704 	sub.w	r7, r6, r4
20000a6a:	d8f2      	bhi.n	20000a52 <MXC_FLC_Com_Write+0x9a>
        buffer8 += 4;
    }

    if (length > 0) {
20000a6c:	b164      	cbz	r4, 20000a88 <MXC_FLC_Com_Write+0xd0>
        // Save the data currently in the flash
        memcpy(current_data, (void *)(address), 4);
20000a6e:	683b      	ldr	r3, [r7, #0]
20000a70:	9301      	str	r3, [sp, #4]

        // Modify current_data to insert the data from buffer
        memcpy(current_data, buffer8, length);
20000a72:	4622      	mov	r2, r4
20000a74:	a801      	add	r0, sp, #4
20000a76:	f000 f827 	bl	20000ac8 <__memcpy_veneer>

        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000a7a:	9901      	ldr	r1, [sp, #4]
20000a7c:	4638      	mov	r0, r7
            return err;
        }
    }

    return E_NO_ERROR;
}
20000a7e:	b007      	add	sp, #28
20000a80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000a84:	f000 b810 	b.w	20000aa8 <__MXC_FLC_Write32_veneer>
    return E_NO_ERROR;
20000a88:	4620      	mov	r0, r4
}
20000a8a:	b007      	add	sp, #28
20000a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

20000a90 <MXC_FLC_Com_Read>:
#pragma section = ".flashprog"
#else
__attribute__((section(".flashprog")))
#endif
void MXC_FLC_Com_Read(int address, void *buffer, int len)
{
20000a90:	460b      	mov	r3, r1
    memcpy(buffer, (void *)address, len);
20000a92:	4601      	mov	r1, r0
20000a94:	4618      	mov	r0, r3
20000a96:	f000 b817 	b.w	20000ac8 <__memcpy_veneer>
20000a9a:	0000      	movs	r0, r0
20000a9c:	0000      	movs	r0, r0
	...

20000aa0 <__memset_veneer>:
20000aa0:	f85f f000 	ldr.w	pc, [pc]	@ 20000aa4 <__memset_veneer+0x4>
20000aa4:	10019a3d 	.word	0x10019a3d

20000aa8 <__MXC_FLC_Write32_veneer>:
20000aa8:	f85f f000 	ldr.w	pc, [pc]	@ 20000aac <__MXC_FLC_Write32_veneer+0x4>
20000aac:	10014057 	.word	0x10014057

20000ab0 <__MXC_FLC_ME17_Flash_Operation_veneer>:
20000ab0:	f85f f000 	ldr.w	pc, [pc]	@ 20000ab4 <__MXC_FLC_ME17_Flash_Operation_veneer+0x4>
20000ab4:	10013fd5 	.word	0x10013fd5

20000ab8 <__MXC_FLC_ME17_GetByAddress_veneer>:
20000ab8:	f85f f000 	ldr.w	pc, [pc]	@ 20000abc <__MXC_FLC_ME17_GetByAddress_veneer+0x4>
20000abc:	10014001 	.word	0x10014001

20000ac0 <__MXC_FLC_ME17_GetPhysicalAddress_veneer>:
20000ac0:	f85f f000 	ldr.w	pc, [pc]	@ 20000ac4 <__MXC_FLC_ME17_GetPhysicalAddress_veneer+0x4>
20000ac4:	10014029 	.word	0x10014029

20000ac8 <__memcpy_veneer>:
20000ac8:	f85f f000 	ldr.w	pc, [pc]	@ 20000acc <__memcpy_veneer+0x4>
20000acc:	1001a0c1 	.word	0x1001a0c1

20000ad0 <__init_array_start>:
20000ad0:	1001a3b1 	.word	0x1001a3b1

20000ad4 <__frame_dummy_init_array_entry>:
20000ad4:	1000e271                                q...

20000ad8 <__do_global_dtors_aux_fini_array_entry>:
20000ad8:	1000e249                                I...
